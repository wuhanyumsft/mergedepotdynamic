{"content":"    \r\n    <h1 id=\"System_Windows_Forms_Control\">\r\n      <span class=\"lang-csharp\">Control</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Defines the base class for controls, which are components with visual representation.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.ComponentModel.DefaultEvent(&quot;Click&quot;)]\n[System.ComponentModel.DefaultProperty(&quot;Text&quot;)]\n[System.ComponentModel.Design.Serialization.DesignerSerializer(&quot;System.Windows.Forms.Design.ControlCodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;, &quot;System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;)]\n[System.ComponentModel.Designer(&quot;System.Windows.Forms.Design.ControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;)]\n[System.ComponentModel.ToolboxItemFilter(&quot;System.Windows.Forms&quot;)]\n[System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic class Control : System.ComponentModel.Component, IDisposable, System.ComponentModel.ISynchronizeInvoke, System.Windows.Forms.IBindableComponent, System.Windows.Forms.IDropTarget, System.Windows.Forms.IWin32Window</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component\" data-linktype=\"relative-path\">System.ComponentModel.Component</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Control</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Container\" data-linktype=\"relative-path\">Container</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_DesignMode\" data-linktype=\"relative-path\">DesignMode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Disposed\" data-linktype=\"relative-path\">Disposed</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Events\" data-linktype=\"relative-path\">Events</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_GetService_System_Type_\" data-linktype=\"relative-path\">GetService(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>To create your own control class, inherit from the <a class=\"xref\" href=\"system.windows.forms.usercontrol\" data-linktype=\"relative-path\">UserControl</a>, Control classes, or from the other Windows Forms provided controls. For more information about authoring custom controls, see <a href=\"../Topic/Developing%20Custom%20Windows%20Forms%20Controls%20with%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Developing Custom Windows Forms Controls with the .NET Framework</a>.  </p>\n<p> The Control class implements very basic functionality required by classes that display information to the user. It handles user input through the keyboard and pointing devices. It handles message routing and security. It defines the bounds of a control (its position and size), although it does not implement painting. It provides a window handle (<code>hWnd</code>).  </p>\n<p> Windows Forms controls use ambient properties so child controls can appear like their surrounding environment. An <em>ambient property</em> is a control property that, if not set, is retrieved from the parent control. If the control does not have a <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Parent_\" data-linktype=\"relative-path\">Parent</a>, and the property is not set, the control attempts to determine the value of the ambient property through the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Site_\" data-linktype=\"relative-path\">Site</a> property. If the control is not sited, if the site does not support ambient properties, or if the property is not set on the <a class=\"xref\" href=\"system.windows.forms.ambientproperties\" data-linktype=\"relative-path\">AmbientProperties</a>, the control uses its own default values. Typically, an ambient property represents a characteristic of a control, such as <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BackColor_\" data-linktype=\"relative-path\">BackColor</a>, that is communicated to a child control. For example, a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> will have the same <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BackColor_\" data-linktype=\"relative-path\">BackColor</a> as its parent <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> by default. Ambient properties provided by the Controlclass include: <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Cursor_\" data-linktype=\"relative-path\">Cursor</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Font_\" data-linktype=\"relative-path\">Font</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BackColor_\" data-linktype=\"relative-path\">BackColor</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a>, and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RightToLeft_\" data-linktype=\"relative-path\">RightToLeft</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To make your Windows Forms application support visual styles, be sure to set the <a class=\"xref\" href=\"system.windows.forms.flatstyle\" data-linktype=\"relative-path\">FlatStyle</a> property to <code>System</code> and include a manifest with your executable. A manifest is an XML file that is included either as a resource within your application executable or as a separate file that resides in the same directory as the executable file. For an example of a manifest, see the Example section of the <a class=\"xref\" href=\"system.windows.forms.flatstyle\" data-linktype=\"relative-path\">FlatStyle</a> enumeration. For more information about using visual styles, see<a href=\"http://msdn.microsoft.com/library/windows/desktop/bb773187.aspx\" data-linktype=\"external\">Visual Styles</a>.  </p>\n</div>\n<p> Windows Forms has accessibility support built in, and provides information about your application that enables it to work with accessibility client applications such as screen enlarger and reviewer utilities, voice input utilities, on-screen keyboards, alternative input devices, and keyboard enhancement utilities. Sometimes you will want to provide additional information to accessibility client applications. There are two ways of providing this additional information. You can set the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_AccessibleName_\" data-linktype=\"relative-path\">AccessibleName</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_AccessibleDescription_\" data-linktype=\"relative-path\">AccessibleDescription</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_AccessibleDefaultActionDescription_\" data-linktype=\"relative-path\">AccessibleDefaultActionDescription</a>, and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_AccessibleRole_\" data-linktype=\"relative-path\">AccessibleRole</a> property values, which will be reported to accessibility client applications. This method is typically used to provide limited accessibility information for existing controls. Alternatively, you can write your own class deriving from the <a class=\"xref\" href=\"system.windows.forms.accessibleobject\" data-linktype=\"relative-path\">AccessibleObject</a> or <a class=\"xref\" href=\"system.windows.forms.control.controlaccessibleobject\" data-linktype=\"relative-path\">Control+ControlAccessibleObject</a> classes, providing as much accessibility information as needed.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To maintain better performance, do not set the size of a control in its constructor. The preferred method is to override the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DefaultSize_\" data-linktype=\"relative-path\">DefaultSize</a> property.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> Do not add data bindings for a Control in its constructor. Doing so will cause errors in code generation and can cause unwanted behavior.  </p>\n</div>\n<p> The majority of the controls in the <a class=\"xref\" href=\"system.windows.forms\" data-linktype=\"relative-path\">System.Windows.Forms</a> namespace use the underlying Windows common control as a base to build on. For more information about the Windows common controls, see<a href=\"http://msdn.microsoft.com/library/windows/desktop/bb775497.aspx\" data-linktype=\"external\">General Control Reference</a>.  </p>\n<p> To identify Windows Forms controls from a separate process, use a standard <code>SendMessage</code> call to pass the WM_GETCONTROLNAME message. WM_GETCONTROLNAME is independent of the language and Windows hierarchy. For more information, see the &quot;Recommended Solution for Windows Forms&quot; topic in<a href=\"http://msdn.microsoft.com/library/ms996405.aspx\" data-linktype=\"external\">Automating Windows Forms</a>.  </p>\n<p> Use the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_InvokeRequired_\" data-linktype=\"relative-path\">InvokeRequired</a> property to synchronize access to the control from multiple threads. For more information about multithreaded Windows Forms controls, see <a href=\"../Topic/How%20to:%20Make%20Thread-Safe%20Calls%20to%20Windows%20Forms%20Controls.md\" data-linktype=\"relative-path\">How to: Make Thread-Safe Calls to Windows Forms Controls</a></p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control__ctor\" data-linktype=\"self-bookmark\">Control()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class with default settings.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control__ctor_System_String_\" data-linktype=\"self-bookmark\">Control(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class with specific text.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control__ctor_System_Windows_Forms_Control_System_String_\" data-linktype=\"self-bookmark\">Control(Control,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class as a child control, with specific text.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control__ctor_System_String_System_Int32_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Control(String,Int32,Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class with specific text, size, and location.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control__ctor_System_Windows_Forms_Control_System_String_System_Int32_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Control(Control,String,Int32,Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class as a child control, with specific text, size, and location.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_AccessibilityObject\" data-linktype=\"self-bookmark\">AccessibilityObject</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.windows.forms.accessibleobject\" data-linktype=\"relative-path\">AccessibleObject</a> assigned to the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_AccessibleDefaultActionDescription\" data-linktype=\"self-bookmark\">AccessibleDefaultActionDescription</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the default action description of the control for use by accessibility client applications.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_AccessibleDescription\" data-linktype=\"self-bookmark\">AccessibleDescription</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the description of the control used by accessibility client applications.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_AccessibleName\" data-linktype=\"self-bookmark\">AccessibleName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the name of the control used by accessibility client applications.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_AccessibleRole\" data-linktype=\"self-bookmark\">AccessibleRole</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the accessible role of the control</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_AllowDrop\" data-linktype=\"self-bookmark\">AllowDrop</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the control can accept data that the user drags onto it.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Anchor\" data-linktype=\"self-bookmark\">Anchor</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the edges of the container to which a control is bound and determines how a control is resized with its parent.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_AutoScrollOffset\" data-linktype=\"self-bookmark\">AutoScrollOffset</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets where this control is scrolled to in <span class=\"xref\">stem.Windows.Forms.ScrollableControl.ScrollControlIntoView*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_AutoSize\" data-linktype=\"self-bookmark\">AutoSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>This property is not relevant for this class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_BackColor\" data-linktype=\"self-bookmark\">BackColor</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the background color for the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_BackgroundImage\" data-linktype=\"self-bookmark\">BackgroundImage</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the background image displayed in the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_BackgroundImageLayout\" data-linktype=\"self-bookmark\">BackgroundImageLayout</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the background image layout as defined in the <a class=\"xref\" href=\"system.windows.forms.imagelayout\" data-linktype=\"relative-path\">ImageLayout</a> enumeration.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_BindingContext\" data-linktype=\"self-bookmark\">BindingContext</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.windows.forms.bindingcontext\" data-linktype=\"relative-path\">BindingContext</a> for the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Bottom\" data-linktype=\"self-bookmark\">Bottom</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the distance, in pixels, between the bottom edge of the control and the top edge of its container&#39;s client area.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Bounds\" data-linktype=\"self-bookmark\">Bounds</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the size and location of the control including its nonclient elements, in pixels, relative to the parent control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_CanEnableIme\" data-linktype=\"self-bookmark\">CanEnableIme</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <span class=\"xref\">stem.Windows.Forms.Control.ImeMode*</span> property can be set to an active value, to enable IME support.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_CanFocus\" data-linktype=\"self-bookmark\">CanFocus</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the control can receive focus.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_CanRaiseEvents\" data-linktype=\"self-bookmark\">CanRaiseEvents</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines if events can be raised on the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_CanSelect\" data-linktype=\"self-bookmark\">CanSelect</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the control can be selected.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Capture\" data-linktype=\"self-bookmark\">Capture</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the control has captured the mouse.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_CausesValidation\" data-linktype=\"self-bookmark\">CausesValidation</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the control causes validation to be performed on any controls that require validation when it receives focus.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_CheckForIllegalCrossThreadCalls\" data-linktype=\"self-bookmark\">CheckForIllegalCrossThreadCalls</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether to catch calls on the wrong thread that access a control&#39;s <span class=\"xref\">stem.Windows.Forms.Control.Handle*</span> property when an application is being debugged.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ClientRectangle\" data-linktype=\"self-bookmark\">ClientRectangle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the rectangle that represents the client area of the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ClientSize\" data-linktype=\"self-bookmark\">ClientSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the height and width of the client area of the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_CompanyName\" data-linktype=\"self-bookmark\">CompanyName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the name of the company or creator of the application containing the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ContainsFocus\" data-linktype=\"self-bookmark\">ContainsFocus</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the control, or one of its child controls, currently has the input focus.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ContextMenu\" data-linktype=\"self-bookmark\">ContextMenu</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the shortcut menu associated with the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ContextMenuStrip\" data-linktype=\"self-bookmark\">ContextMenuStrip</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.windows.forms.contextmenustrip\" data-linktype=\"relative-path\">ContextMenuStrip</a> associated with this control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Controls\" data-linktype=\"self-bookmark\">Controls</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the collection of controls contained within the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Created\" data-linktype=\"self-bookmark\">Created</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the control has been created.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_CreateParams\" data-linktype=\"self-bookmark\">CreateParams</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the required creation parameters when the control handle is created.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Cursor\" data-linktype=\"self-bookmark\">Cursor</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the cursor that is displayed when the mouse pointer is over the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_DataBindings\" data-linktype=\"self-bookmark\">DataBindings</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the data bindings for the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_DefaultBackColor\" data-linktype=\"self-bookmark\">DefaultBackColor</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the default background color of the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_DefaultCursor\" data-linktype=\"self-bookmark\">DefaultCursor</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the default cursor for the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_DefaultFont\" data-linktype=\"self-bookmark\">DefaultFont</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the default font of the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_DefaultForeColor\" data-linktype=\"self-bookmark\">DefaultForeColor</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the default foreground color of the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_DefaultImeMode\" data-linktype=\"self-bookmark\">DefaultImeMode</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the default Input Method Editor (IME) mode supported by the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_DefaultMargin\" data-linktype=\"self-bookmark\">DefaultMargin</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the space, in pixels, that is specified by default between controls.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_DefaultMaximumSize\" data-linktype=\"self-bookmark\">DefaultMaximumSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the length and height, in pixels, that is specified as the default maximum size of a control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_DefaultMinimumSize\" data-linktype=\"self-bookmark\">DefaultMinimumSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the length and height, in pixels, that is specified as the default minimum size of a control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_DefaultPadding\" data-linktype=\"self-bookmark\">DefaultPadding</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the internal spacing, in pixels, of the contents of a control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_DefaultSize\" data-linktype=\"self-bookmark\">DefaultSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the default size of the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_DisplayRectangle\" data-linktype=\"self-bookmark\">DisplayRectangle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the rectangle that represents the display area of the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Disposing\" data-linktype=\"self-bookmark\">Disposing</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the base <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class is in the process of disposing.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Dock\" data-linktype=\"self-bookmark\">Dock</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets which control borders are docked to its parent control and determines how a control is resized with its parent.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_DoubleBuffered\" data-linktype=\"self-bookmark\">DoubleBuffered</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether this control should redraw its surface using a secondary buffer to reduce or prevent flicker.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Enabled\" data-linktype=\"self-bookmark\">Enabled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the control can respond to user interaction.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Focused\" data-linktype=\"self-bookmark\">Focused</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the control has input focus.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Font\" data-linktype=\"self-bookmark\">Font</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the font of the text displayed by the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_FontHeight\" data-linktype=\"self-bookmark\">FontHeight</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the height of the font of the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ForeColor\" data-linktype=\"self-bookmark\">ForeColor</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the foreground color of the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Handle\" data-linktype=\"self-bookmark\">Handle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the window handle that the control is bound to.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_HasChildren\" data-linktype=\"self-bookmark\">HasChildren</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the control contains one or more child controls.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Height\" data-linktype=\"self-bookmark\">Height</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the height of the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ImeMode\" data-linktype=\"self-bookmark\">ImeMode</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the Input Method Editor (IME) mode of the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ImeModeBase\" data-linktype=\"self-bookmark\">ImeModeBase</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the IME mode of a control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_InvokeRequired\" data-linktype=\"self-bookmark\">InvokeRequired</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the caller must call an invoke method when making method calls to the control because the caller is on a different thread than the one the control was created on.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_IsAccessible\" data-linktype=\"self-bookmark\">IsAccessible</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the control is visible to accessibility applications.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_IsDisposed\" data-linktype=\"self-bookmark\">IsDisposed</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the control has been disposed of.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_IsHandleCreated\" data-linktype=\"self-bookmark\">IsHandleCreated</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the control has a handle associated with it.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_IsMirrored\" data-linktype=\"self-bookmark\">IsMirrored</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the control is mirrored.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_LayoutEngine\" data-linktype=\"self-bookmark\">LayoutEngine</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a cached instance of the control&#39;s layout engine.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Left\" data-linktype=\"self-bookmark\">Left</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the distance, in pixels, between the left edge of the control and the left edge of its container&#39;s client area.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Location\" data-linktype=\"self-bookmark\">Location</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the coordinates of the upper-left corner of the control relative to the upper-left corner of its container.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Margin\" data-linktype=\"self-bookmark\">Margin</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the space between controls.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_MaximumSize\" data-linktype=\"self-bookmark\">MaximumSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the size that is the upper limit that <span class=\"xref\">stem.Windows.Forms.Control.GetPreferredSize*</span> can specify.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_MinimumSize\" data-linktype=\"self-bookmark\">MinimumSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the size that is the lower limit that <span class=\"xref\">stem.Windows.Forms.Control.GetPreferredSize*</span> can specify.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ModifierKeys\" data-linktype=\"self-bookmark\">ModifierKeys</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating which of the modifier keys (SHIFT, CTRL, and ALT) is in a pressed state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_MouseButtons\" data-linktype=\"self-bookmark\">MouseButtons</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating which of the mouse buttons is in a pressed state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_MousePosition\" data-linktype=\"self-bookmark\">MousePosition</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the position of the mouse cursor in screen coordinates.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Name\" data-linktype=\"self-bookmark\">Name</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the name of the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Padding\" data-linktype=\"self-bookmark\">Padding</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets padding within the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Parent\" data-linktype=\"self-bookmark\">Parent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the parent container of the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_PreferredSize\" data-linktype=\"self-bookmark\">PreferredSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the size of a rectangular area into which the control can fit.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ProductName\" data-linktype=\"self-bookmark\">ProductName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the product name of the assembly containing the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ProductVersion\" data-linktype=\"self-bookmark\">ProductVersion</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the version of the assembly containing the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_PropagatingImeMode\" data-linktype=\"self-bookmark\">PropagatingImeMode</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an object that represents a propagating IME mode.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_RecreatingHandle\" data-linktype=\"self-bookmark\">RecreatingHandle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the control is currently re-creating its handle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Region\" data-linktype=\"self-bookmark\">Region</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the window region associated with the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_RenderRightToLeft\" data-linktype=\"self-bookmark\">RenderRightToLeft</a></div>\r\n          </td>\r\n            <td>\r\n            <p>This property is now obsolete.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ResizeRedraw\" data-linktype=\"self-bookmark\">ResizeRedraw</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the control redraws itself when resized.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Right\" data-linktype=\"self-bookmark\">Right</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the distance, in pixels, between the right edge of the control and the left edge of its container&#39;s client area.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_RightToLeft\" data-linktype=\"self-bookmark\">RightToLeft</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether control&#39;s elements are aligned to support locales using right-to-left fonts.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ScaleChildren\" data-linktype=\"self-bookmark\">ScaleChildren</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that determines the scaling of child controls.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ShowFocusCues\" data-linktype=\"self-bookmark\">ShowFocusCues</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the control should display focus rectangles.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ShowKeyboardCues\" data-linktype=\"self-bookmark\">ShowKeyboardCues</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the user interface is in the appropriate state to show or hide keyboard accelerators.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Site\" data-linktype=\"self-bookmark\">Site</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the site of the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Size\" data-linktype=\"self-bookmark\">Size</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the height and width of the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_TabIndex\" data-linktype=\"self-bookmark\">TabIndex</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the tab order of the control within its container.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_TabStop\" data-linktype=\"self-bookmark\">TabStop</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the user can give the focus to this control using the TAB key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Tag\" data-linktype=\"self-bookmark\">Tag</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the object that contains data about the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Text\" data-linktype=\"self-bookmark\">Text</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the text associated with this control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Top\" data-linktype=\"self-bookmark\">Top</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the distance, in pixels, between the top edge of the control and the top edge of its container&#39;s client area.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_TopLevelControl\" data-linktype=\"self-bookmark\">TopLevelControl</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the parent control that is not parented by another Windows Forms control. Typically, this is the outermost <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> that the control is contained in.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_UseWaitCursor\" data-linktype=\"self-bookmark\">UseWaitCursor</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether to use the wait cursor for the current control and all child controls.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Visible\" data-linktype=\"self-bookmark\">Visible</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the control and all its child controls are displayed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Width\" data-linktype=\"self-bookmark\">Width</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the width of the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_WindowTarget\" data-linktype=\"self-bookmark\">WindowTarget</a></div>\r\n          </td>\r\n            <td>\r\n            <p>This property is not relevant for this class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_AccessibilityNotifyClients_System_Windows_Forms_AccessibleEvents_System_Int32_\" data-linktype=\"self-bookmark\">AccessibilityNotifyClients(AccessibleEvents,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Notifies the accessibility client applications of the specified <a class=\"xref\" href=\"system.windows.forms.accessibleevents\" data-linktype=\"relative-path\">AccessibleEvents</a> for the specified child control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_AccessibilityNotifyClients_System_Windows_Forms_AccessibleEvents_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">AccessibilityNotifyClients(AccessibleEvents,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Notifies the accessibility client applications of the specified <a class=\"xref\" href=\"system.windows.forms.accessibleevents\" data-linktype=\"relative-path\">AccessibleEvents</a> for the specified child control .</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_BeginInvoke_System_Delegate_\" data-linktype=\"self-bookmark\">BeginInvoke(Delegate)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes the specified delegate asynchronously on the thread that the control&#39;s underlying handle was created on.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_BeginInvoke_System_Delegate_System_Object___\" data-linktype=\"self-bookmark\">BeginInvoke(Delegate,Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes the specified delegate asynchronously with the specified arguments, on the thread that the control&#39;s underlying handle was created on.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_BringToFront\" data-linktype=\"self-bookmark\">BringToFront()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Brings the control to the front of the z-order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Contains_System_Windows_Forms_Control_\" data-linktype=\"self-bookmark\">Contains(Control)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves a value indicating whether the specified control is a child of the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_CreateAccessibilityInstance\" data-linktype=\"self-bookmark\">CreateAccessibilityInstance()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new accessibility object for the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_CreateControl\" data-linktype=\"self-bookmark\">CreateControl()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Forces the creation of the visible control, including the creation of the handle and any visible child controls.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_CreateControlsInstance\" data-linktype=\"self-bookmark\">CreateControlsInstance()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new instance of the control collection for the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_CreateGraphics\" data-linktype=\"self-bookmark\">CreateGraphics()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates the <a class=\"xref\" href=\"system.drawing.graphics\" data-linktype=\"relative-path\">Graphics</a> for the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_CreateHandle\" data-linktype=\"self-bookmark\">CreateHandle()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a handle for the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_DefWndProc_System_Windows_Forms_Message__\" data-linktype=\"self-bookmark\">DefWndProc(Message)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sends the specified message to the default window procedure.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_DestroyHandle\" data-linktype=\"self-bookmark\">DestroyHandle()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Destroys the handle associated with the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Dispose_System_Boolean_\" data-linktype=\"self-bookmark\">Dispose(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> and its child controls and optionally releases the managed resources.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_DoDragDrop_System_Object_System_Windows_Forms_DragDropEffects_\" data-linktype=\"self-bookmark\">DoDragDrop(Object,DragDropEffects)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Begins a drag-and-drop operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_DrawToBitmap_System_Drawing_Bitmap_System_Drawing_Rectangle_\" data-linktype=\"self-bookmark\">DrawToBitmap(Bitmap,Rectangle)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Supports rendering to the specified bitmap.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_EndInvoke_System_IAsyncResult_\" data-linktype=\"self-bookmark\">EndInvoke(IAsyncResult)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the return value of the asynchronous operation represented by the <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> passed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_FindForm\" data-linktype=\"self-bookmark\">FindForm()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the form that the control is on.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Focus\" data-linktype=\"self-bookmark\">Focus()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets input focus to the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_FromChildHandle_System_IntPtr_\" data-linktype=\"self-bookmark\">FromChildHandle(IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the control that contains the specified handle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_FromHandle_System_IntPtr_\" data-linktype=\"self-bookmark\">FromHandle(IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the control that is currently associated with the specified handle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_GetAccessibilityObjectById_System_Int32_\" data-linktype=\"self-bookmark\">GetAccessibilityObjectById(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the specified <a class=\"xref\" href=\"system.windows.forms.accessibleobject\" data-linktype=\"relative-path\">AccessibleObject</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_GetAutoSizeMode\" data-linktype=\"self-bookmark\">GetAutoSizeMode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves a value indicating how a control will behave when its <span class=\"xref\">stem.Windows.Forms.Control.AutoSize*</span> property is enabled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_GetChildAtPoint_System_Drawing_Point_\" data-linktype=\"self-bookmark\">GetChildAtPoint(Point)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the child control that is located at the specified coordinates.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_GetChildAtPoint_System_Drawing_Point_System_Windows_Forms_GetChildAtPointSkip_\" data-linktype=\"self-bookmark\">GetChildAtPoint(Point,GetChildAtPointSkip)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the child control that is located at the specified coordinates, specifying whether to ignore child controls of a certain type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_GetContainerControl\" data-linktype=\"self-bookmark\">GetContainerControl()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the next <a class=\"xref\" href=\"system.windows.forms.containercontrol\" data-linktype=\"relative-path\">ContainerControl</a> up the control&#39;s chain of parent controls.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_GetNextControl_System_Windows_Forms_Control_System_Boolean_\" data-linktype=\"self-bookmark\">GetNextControl(Control,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the next control forward or back in the tab order of child controls.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_GetPreferredSize_System_Drawing_Size_\" data-linktype=\"self-bookmark\">GetPreferredSize(Size)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the size of a rectangular area into which a control can be fitted.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_GetScaledBounds_System_Drawing_Rectangle_System_Drawing_SizeF_System_Windows_Forms_BoundsSpecified_\" data-linktype=\"self-bookmark\">GetScaledBounds(Rectangle,SizeF,BoundsSpecified)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the bounds within which the control is scaled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_GetStyle_System_Windows_Forms_ControlStyles_\" data-linktype=\"self-bookmark\">GetStyle(ControlStyles)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the value of the specified control style bit for the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_GetTopLevel\" data-linktype=\"self-bookmark\">GetTopLevel()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines if the control is a top-level control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Hide\" data-linktype=\"self-bookmark\">Hide()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Conceals the control from the user.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_InitLayout\" data-linktype=\"self-bookmark\">InitLayout()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Called after the control has been added to another container.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Invalidate\" data-linktype=\"self-bookmark\">Invalidate()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invalidates the entire surface of the control and causes the control to be redrawn.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Invalidate_System_Boolean_\" data-linktype=\"self-bookmark\">Invalidate(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invalidates a specific region of the control and causes a paint message to be sent to the control. Optionally, invalidates the child controls assigned to the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Invalidate_System_Drawing_Rectangle_\" data-linktype=\"self-bookmark\">Invalidate(Rectangle)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invalidates the specified region of the control (adds it to the control&#39;s update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Invalidate_System_Drawing_Region_\" data-linktype=\"self-bookmark\">Invalidate(Region)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invalidates the specified region of the control (adds it to the control&#39;s update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Invalidate_System_Drawing_Rectangle_System_Boolean_\" data-linktype=\"self-bookmark\">Invalidate(Rectangle,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invalidates the specified region of the control (adds it to the control&#39;s update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control. Optionally, invalidates the child controls assigned to the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Invalidate_System_Drawing_Region_System_Boolean_\" data-linktype=\"self-bookmark\">Invalidate(Region,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invalidates the specified region of the control (adds it to the control&#39;s update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control. Optionally, invalidates the child controls assigned to the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Invoke_System_Delegate_\" data-linktype=\"self-bookmark\">Invoke(Delegate)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes the specified delegate on the thread that owns the control&#39;s underlying window handle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Invoke_System_Delegate_System_Object___\" data-linktype=\"self-bookmark\">Invoke(Delegate,Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes the specified delegate, on the thread that owns the control&#39;s underlying window handle, with the specified list of arguments.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_InvokeGotFocus_System_Windows_Forms_Control_System_EventArgs_\" data-linktype=\"self-bookmark\">InvokeGotFocus(Control,EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GotFocus\" data-linktype=\"relative-path\">GotFocus</a> event for the specified control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_InvokeLostFocus_System_Windows_Forms_Control_System_EventArgs_\" data-linktype=\"self-bookmark\">InvokeLostFocus(Control,EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_LostFocus\" data-linktype=\"relative-path\">LostFocus</a> event for the specified control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_InvokeOnClick_System_Windows_Forms_Control_System_EventArgs_\" data-linktype=\"self-bookmark\">InvokeOnClick(Control,EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Click\" data-linktype=\"relative-path\">Click</a> event for the specified control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_InvokePaint_System_Windows_Forms_Control_System_Windows_Forms_PaintEventArgs_\" data-linktype=\"self-bookmark\">InvokePaint(Control,PaintEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Paint\" data-linktype=\"relative-path\">Paint</a> event for the specified control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_InvokePaintBackground_System_Windows_Forms_Control_System_Windows_Forms_PaintEventArgs_\" data-linktype=\"self-bookmark\">InvokePaintBackground(Control,PaintEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <code>PaintBackground</code> event for the specified control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_IsInputChar_System_Char_\" data-linktype=\"self-bookmark\">IsInputChar(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines if a character is an input character that the control recognizes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_IsInputKey_System_Windows_Forms_Keys_\" data-linktype=\"self-bookmark\">IsInputKey(Keys)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified key is a regular input key or a special key that requires preprocessing.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_IsKeyLocked_System_Windows_Forms_Keys_\" data-linktype=\"self-bookmark\">IsKeyLocked(Keys)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the CAPS LOCK, NUM LOCK, or SCROLL LOCK key is in effect.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_IsMnemonic_System_Char_System_String_\" data-linktype=\"self-bookmark\">IsMnemonic(Char,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines if the specified character is the mnemonic character assigned to the control in the specified string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_NotifyInvalidate_System_Drawing_Rectangle_\" data-linktype=\"self-bookmark\">NotifyInvalidate(Rectangle)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invalidated\" data-linktype=\"relative-path\">Invalidated</a> event with a specified region of the control to invalidate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnAutoSizeChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnAutoSizeChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_AutoSizeChanged\" data-linktype=\"relative-path\">AutoSizeChanged</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnBackColorChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnBackColorChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BackColorChanged\" data-linktype=\"relative-path\">BackColorChanged</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnBackgroundImageChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnBackgroundImageChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BackgroundImageChanged\" data-linktype=\"relative-path\">BackgroundImageChanged</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnBackgroundImageLayoutChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnBackgroundImageLayoutChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BackgroundImageLayoutChanged\" data-linktype=\"relative-path\">BackgroundImageLayoutChanged</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnBindingContextChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnBindingContextChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BindingContextChanged\" data-linktype=\"relative-path\">BindingContextChanged</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnCausesValidationChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnCausesValidationChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CausesValidationChanged\" data-linktype=\"relative-path\">CausesValidationChanged</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnChangeUICues_System_Windows_Forms_UICuesEventArgs_\" data-linktype=\"self-bookmark\">OnChangeUICues(UICuesEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ChangeUICues\" data-linktype=\"relative-path\">ChangeUICues</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnClick_System_EventArgs_\" data-linktype=\"self-bookmark\">OnClick(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Click\" data-linktype=\"relative-path\">Click</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnClientSizeChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnClientSizeChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ClientSizeChanged\" data-linktype=\"relative-path\">ClientSizeChanged</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnContextMenuChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnContextMenuChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ContextMenuChanged\" data-linktype=\"relative-path\">ContextMenuChanged</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnContextMenuStripChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnContextMenuStripChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ContextMenuStripChanged\" data-linktype=\"relative-path\">ContextMenuStripChanged</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnControlAdded_System_Windows_Forms_ControlEventArgs_\" data-linktype=\"self-bookmark\">OnControlAdded(ControlEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ControlAdded\" data-linktype=\"relative-path\">ControlAdded</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnControlRemoved_System_Windows_Forms_ControlEventArgs_\" data-linktype=\"self-bookmark\">OnControlRemoved(ControlEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ControlRemoved\" data-linktype=\"relative-path\">ControlRemoved</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnCreateControl\" data-linktype=\"self-bookmark\">OnCreateControl()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <span class=\"xref\">stem.Windows.Forms.Control.CreateControl*</span> method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnCursorChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnCursorChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CursorChanged\" data-linktype=\"relative-path\">CursorChanged</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnDockChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnDockChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DockChanged\" data-linktype=\"relative-path\">DockChanged</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnDoubleClick_System_EventArgs_\" data-linktype=\"self-bookmark\">OnDoubleClick(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoubleClick\" data-linktype=\"relative-path\">DoubleClick</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnDragDrop_System_Windows_Forms_DragEventArgs_\" data-linktype=\"self-bookmark\">OnDragDrop(DragEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragDrop\" data-linktype=\"relative-path\">DragDrop</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnDragEnter_System_Windows_Forms_DragEventArgs_\" data-linktype=\"self-bookmark\">OnDragEnter(DragEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragEnter\" data-linktype=\"relative-path\">DragEnter</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnDragLeave_System_EventArgs_\" data-linktype=\"self-bookmark\">OnDragLeave(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragLeave\" data-linktype=\"relative-path\">DragLeave</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnDragOver_System_Windows_Forms_DragEventArgs_\" data-linktype=\"self-bookmark\">OnDragOver(DragEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnEnabledChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnEnabledChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_EnabledChanged\" data-linktype=\"relative-path\">EnabledChanged</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnEnter_System_EventArgs_\" data-linktype=\"self-bookmark\">OnEnter(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Enter\" data-linktype=\"relative-path\">Enter</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnFontChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnFontChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_FontChanged\" data-linktype=\"relative-path\">FontChanged</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnForeColorChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnForeColorChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColorChanged\" data-linktype=\"relative-path\">ForeColorChanged</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnGiveFeedback_System_Windows_Forms_GiveFeedbackEventArgs_\" data-linktype=\"self-bookmark\">OnGiveFeedback(GiveFeedbackEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GiveFeedback\" data-linktype=\"relative-path\">GiveFeedback</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnGotFocus_System_EventArgs_\" data-linktype=\"self-bookmark\">OnGotFocus(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GotFocus\" data-linktype=\"relative-path\">GotFocus</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnHandleCreated_System_EventArgs_\" data-linktype=\"self-bookmark\">OnHandleCreated(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_HandleCreated\" data-linktype=\"relative-path\">HandleCreated</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnHandleDestroyed_System_EventArgs_\" data-linktype=\"self-bookmark\">OnHandleDestroyed(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_HandleDestroyed\" data-linktype=\"relative-path\">HandleDestroyed</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnHelpRequested_System_Windows_Forms_HelpEventArgs_\" data-linktype=\"self-bookmark\">OnHelpRequested(HelpEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_HelpRequested\" data-linktype=\"relative-path\">HelpRequested</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnImeModeChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnImeModeChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ImeModeChanged\" data-linktype=\"relative-path\">ImeModeChanged</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnInvalidated_System_Windows_Forms_InvalidateEventArgs_\" data-linktype=\"self-bookmark\">OnInvalidated(InvalidateEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invalidated\" data-linktype=\"relative-path\">Invalidated</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnKeyDown_System_Windows_Forms_KeyEventArgs_\" data-linktype=\"self-bookmark\">OnKeyDown(KeyEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyDown\" data-linktype=\"relative-path\">KeyDown</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnKeyPress_System_Windows_Forms_KeyPressEventArgs_\" data-linktype=\"self-bookmark\">OnKeyPress(KeyPressEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyPress\" data-linktype=\"relative-path\">KeyPress</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnKeyUp_System_Windows_Forms_KeyEventArgs_\" data-linktype=\"self-bookmark\">OnKeyUp(KeyEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyUp\" data-linktype=\"relative-path\">KeyUp</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnLayout_System_Windows_Forms_LayoutEventArgs_\" data-linktype=\"self-bookmark\">OnLayout(LayoutEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Layout\" data-linktype=\"relative-path\">Layout</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnLeave_System_EventArgs_\" data-linktype=\"self-bookmark\">OnLeave(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Leave\" data-linktype=\"relative-path\">Leave</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnLocationChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnLocationChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_LocationChanged\" data-linktype=\"relative-path\">LocationChanged</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnLostFocus_System_EventArgs_\" data-linktype=\"self-bookmark\">OnLostFocus(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_LostFocus\" data-linktype=\"relative-path\">LostFocus</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnMarginChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnMarginChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MarginChanged\" data-linktype=\"relative-path\">MarginChanged</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnMouseCaptureChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnMouseCaptureChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseCaptureChanged\" data-linktype=\"relative-path\">MouseCaptureChanged</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnMouseClick_System_Windows_Forms_MouseEventArgs_\" data-linktype=\"self-bookmark\">OnMouseClick(MouseEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseClick\" data-linktype=\"relative-path\">MouseClick</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnMouseDoubleClick_System_Windows_Forms_MouseEventArgs_\" data-linktype=\"self-bookmark\">OnMouseDoubleClick(MouseEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDoubleClick\" data-linktype=\"relative-path\">MouseDoubleClick</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnMouseDown_System_Windows_Forms_MouseEventArgs_\" data-linktype=\"self-bookmark\">OnMouseDown(MouseEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnMouseEnter_System_EventArgs_\" data-linktype=\"self-bookmark\">OnMouseEnter(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseEnter\" data-linktype=\"relative-path\">MouseEnter</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnMouseHover_System_EventArgs_\" data-linktype=\"self-bookmark\">OnMouseHover(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseHover\" data-linktype=\"relative-path\">MouseHover</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnMouseLeave_System_EventArgs_\" data-linktype=\"self-bookmark\">OnMouseLeave(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseLeave\" data-linktype=\"relative-path\">MouseLeave</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnMouseMove_System_Windows_Forms_MouseEventArgs_\" data-linktype=\"self-bookmark\">OnMouseMove(MouseEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseMove\" data-linktype=\"relative-path\">MouseMove</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnMouseUp_System_Windows_Forms_MouseEventArgs_\" data-linktype=\"self-bookmark\">OnMouseUp(MouseEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseUp\" data-linktype=\"relative-path\">MouseUp</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnMouseWheel_System_Windows_Forms_MouseEventArgs_\" data-linktype=\"self-bookmark\">OnMouseWheel(MouseEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseWheel\" data-linktype=\"relative-path\">MouseWheel</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnMove_System_EventArgs_\" data-linktype=\"self-bookmark\">OnMove(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Move\" data-linktype=\"relative-path\">Move</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnNotifyMessage_System_Windows_Forms_Message_\" data-linktype=\"self-bookmark\">OnNotifyMessage(Message)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Notifies the control of Windows messages.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnPaddingChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnPaddingChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_PaddingChanged\" data-linktype=\"relative-path\">PaddingChanged</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnPaint_System_Windows_Forms_PaintEventArgs_\" data-linktype=\"self-bookmark\">OnPaint(PaintEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Paint\" data-linktype=\"relative-path\">Paint</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnPaintBackground_System_Windows_Forms_PaintEventArgs_\" data-linktype=\"self-bookmark\">OnPaintBackground(PaintEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Paints the background of the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnParentBackColorChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnParentBackColorChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BackColorChanged\" data-linktype=\"relative-path\">BackColorChanged</a> event when the <span class=\"xref\">stem.Windows.Forms.Control.BackColor*</span> property value of the control&#39;s container changes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnParentBackgroundImageChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnParentBackgroundImageChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BackgroundImageChanged\" data-linktype=\"relative-path\">BackgroundImageChanged</a> event when the <span class=\"xref\">stem.Windows.Forms.Control.BackgroundImage*</span> property value of the control&#39;s container changes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnParentBindingContextChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnParentBindingContextChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BindingContextChanged\" data-linktype=\"relative-path\">BindingContextChanged</a> event when the <span class=\"xref\">stem.Windows.Forms.Control.BindingContext*</span> property value of the control&#39;s container changes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnParentChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnParentChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ParentChanged\" data-linktype=\"relative-path\">ParentChanged</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnParentCursorChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnParentCursorChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CursorChanged\" data-linktype=\"relative-path\">CursorChanged</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnParentEnabledChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnParentEnabledChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_EnabledChanged\" data-linktype=\"relative-path\">EnabledChanged</a> event when the <span class=\"xref\">stem.Windows.Forms.Control.Enabled*</span> property value of the control&#39;s container changes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnParentFontChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnParentFontChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_FontChanged\" data-linktype=\"relative-path\">FontChanged</a> event when the <span class=\"xref\">stem.Windows.Forms.Control.Font*</span> property value of the control&#39;s container changes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnParentForeColorChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnParentForeColorChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColorChanged\" data-linktype=\"relative-path\">ForeColorChanged</a> event when the <span class=\"xref\">stem.Windows.Forms.Control.ForeColor*</span> property value of the control&#39;s container changes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnParentRightToLeftChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnParentRightToLeftChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RightToLeftChanged\" data-linktype=\"relative-path\">RightToLeftChanged</a> event when the <span class=\"xref\">stem.Windows.Forms.Control.RightToLeft*</span> property value of the control&#39;s container changes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnParentVisibleChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnParentVisibleChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_VisibleChanged\" data-linktype=\"relative-path\">VisibleChanged</a> event when the <span class=\"xref\">stem.Windows.Forms.Control.Visible*</span> property value of the control&#39;s container changes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnPreviewKeyDown_System_Windows_Forms_PreviewKeyDownEventArgs_\" data-linktype=\"self-bookmark\">OnPreviewKeyDown(PreviewKeyDownEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_PreviewKeyDown\" data-linktype=\"relative-path\">PreviewKeyDown</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnPrint_System_Windows_Forms_PaintEventArgs_\" data-linktype=\"self-bookmark\">OnPrint(PaintEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Paint\" data-linktype=\"relative-path\">Paint</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnQueryContinueDrag_System_Windows_Forms_QueryContinueDragEventArgs_\" data-linktype=\"self-bookmark\">OnQueryContinueDrag(QueryContinueDragEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_QueryContinueDrag\" data-linktype=\"relative-path\">QueryContinueDrag</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnRegionChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnRegionChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RegionChanged\" data-linktype=\"relative-path\">RegionChanged</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnResize_System_EventArgs_\" data-linktype=\"self-bookmark\">OnResize(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Resize\" data-linktype=\"relative-path\">Resize</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnRightToLeftChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnRightToLeftChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RightToLeftChanged\" data-linktype=\"relative-path\">RightToLeftChanged</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnSizeChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnSizeChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SizeChanged\" data-linktype=\"relative-path\">SizeChanged</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnStyleChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnStyleChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_StyleChanged\" data-linktype=\"relative-path\">StyleChanged</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnSystemColorsChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnSystemColorsChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SystemColorsChanged\" data-linktype=\"relative-path\">SystemColorsChanged</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnTabIndexChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnTabIndexChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_TabIndexChanged\" data-linktype=\"relative-path\">TabIndexChanged</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnTabStopChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnTabStopChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_TabStopChanged\" data-linktype=\"relative-path\">TabStopChanged</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnTextChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnTextChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_TextChanged\" data-linktype=\"relative-path\">TextChanged</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnValidated_System_EventArgs_\" data-linktype=\"self-bookmark\">OnValidated(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validated\" data-linktype=\"relative-path\">Validated</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnValidating_System_ComponentModel_CancelEventArgs_\" data-linktype=\"self-bookmark\">OnValidating(CancelEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validating\" data-linktype=\"relative-path\">Validating</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_OnVisibleChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnVisibleChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_VisibleChanged\" data-linktype=\"relative-path\">VisibleChanged</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_PerformLayout\" data-linktype=\"self-bookmark\">PerformLayout()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Forces the control to apply layout logic to all its child controls.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_PerformLayout_System_Windows_Forms_Control_System_String_\" data-linktype=\"self-bookmark\">PerformLayout(Control,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Forces the control to apply layout logic to all its child controls.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_PointToClient_System_Drawing_Point_\" data-linktype=\"self-bookmark\">PointToClient(Point)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the location of the specified screen point into client coordinates.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_PointToScreen_System_Drawing_Point_\" data-linktype=\"self-bookmark\">PointToScreen(Point)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the location of the specified client point into screen coordinates.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_PreProcessControlMessage_System_Windows_Forms_Message__\" data-linktype=\"self-bookmark\">PreProcessControlMessage(Message)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Preprocesses keyboard or input messages within the message loop before they are dispatched.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_PreProcessMessage_System_Windows_Forms_Message__\" data-linktype=\"self-bookmark\">PreProcessMessage(Message)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Preprocesses keyboard or input messages within the message loop before they are dispatched.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ProcessCmdKey_System_Windows_Forms_Message__System_Windows_Forms_Keys_\" data-linktype=\"self-bookmark\">ProcessCmdKey(Message,Keys)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Processes a command key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ProcessDialogChar_System_Char_\" data-linktype=\"self-bookmark\">ProcessDialogChar(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Processes a dialog character.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ProcessDialogKey_System_Windows_Forms_Keys_\" data-linktype=\"self-bookmark\">ProcessDialogKey(Keys)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Processes a dialog key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ProcessKeyEventArgs_System_Windows_Forms_Message__\" data-linktype=\"self-bookmark\">ProcessKeyEventArgs(Message)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Processes a key message and generates the appropriate control events.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ProcessKeyMessage_System_Windows_Forms_Message__\" data-linktype=\"self-bookmark\">ProcessKeyMessage(Message)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Processes a keyboard message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ProcessKeyPreview_System_Windows_Forms_Message__\" data-linktype=\"self-bookmark\">ProcessKeyPreview(Message)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Previews a keyboard message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ProcessMnemonic_System_Char_\" data-linktype=\"self-bookmark\">ProcessMnemonic(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Processes a mnemonic character.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_RaiseDragEvent_System_Object_System_Windows_Forms_DragEventArgs_\" data-linktype=\"self-bookmark\">RaiseDragEvent(Object,DragEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the appropriate drag event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_RaiseKeyEvent_System_Object_System_Windows_Forms_KeyEventArgs_\" data-linktype=\"self-bookmark\">RaiseKeyEvent(Object,KeyEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the appropriate key event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_RaiseMouseEvent_System_Object_System_Windows_Forms_MouseEventArgs_\" data-linktype=\"self-bookmark\">RaiseMouseEvent(Object,MouseEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the appropriate mouse event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_RaisePaintEvent_System_Object_System_Windows_Forms_PaintEventArgs_\" data-linktype=\"self-bookmark\">RaisePaintEvent(Object,PaintEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the appropriate paint event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_RecreateHandle\" data-linktype=\"self-bookmark\">RecreateHandle()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Forces the re-creation of the handle for the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_RectangleToClient_System_Drawing_Rectangle_\" data-linktype=\"self-bookmark\">RectangleToClient(Rectangle)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the size and location of the specified screen rectangle in client coordinates.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_RectangleToScreen_System_Drawing_Rectangle_\" data-linktype=\"self-bookmark\">RectangleToScreen(Rectangle)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the size and location of the specified client rectangle in screen coordinates.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ReflectMessage_System_IntPtr_System_Windows_Forms_Message__\" data-linktype=\"self-bookmark\">ReflectMessage(IntPtr,Message)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reflects the specified message to the control that is bound to the specified handle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Refresh\" data-linktype=\"self-bookmark\">Refresh()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Forces the control to invalidate its client area and immediately redraw itself and any child controls.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ResetBackColor\" data-linktype=\"self-bookmark\">ResetBackColor()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resets the <span class=\"xref\">stem.Windows.Forms.Control.BackColor*</span> property to its default value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ResetBindings\" data-linktype=\"self-bookmark\">ResetBindings()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Causes a control bound to the <a class=\"xref\" href=\"system.windows.forms.bindingsource\" data-linktype=\"relative-path\">BindingSource</a> to reread all the items in the list and refresh their displayed values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ResetCursor\" data-linktype=\"self-bookmark\">ResetCursor()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resets the <span class=\"xref\">stem.Windows.Forms.Control.Cursor*</span> property to its default value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ResetFont\" data-linktype=\"self-bookmark\">ResetFont()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resets the <span class=\"xref\">stem.Windows.Forms.Control.Font*</span> property to its default value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ResetForeColor\" data-linktype=\"self-bookmark\">ResetForeColor()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resets the <span class=\"xref\">stem.Windows.Forms.Control.ForeColor*</span> property to its default value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ResetImeMode\" data-linktype=\"self-bookmark\">ResetImeMode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resets the <span class=\"xref\">stem.Windows.Forms.Control.ImeMode*</span> property to its default value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ResetMouseEventArgs\" data-linktype=\"self-bookmark\">ResetMouseEventArgs()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resets the control to handle the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseLeave\" data-linktype=\"relative-path\">MouseLeave</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ResetRightToLeft\" data-linktype=\"self-bookmark\">ResetRightToLeft()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resets the <span class=\"xref\">stem.Windows.Forms.Control.RightToLeft*</span> property to its default value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ResetText\" data-linktype=\"self-bookmark\">ResetText()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resets the <span class=\"xref\">stem.Windows.Forms.Control.Text*</span> property to its default value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ResumeLayout\" data-linktype=\"self-bookmark\">ResumeLayout()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resumes usual layout logic.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ResumeLayout_System_Boolean_\" data-linktype=\"self-bookmark\">ResumeLayout(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resumes usual layout logic, optionally forcing an immediate layout of pending layout requests.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_RtlTranslateAlignment_System_Drawing_ContentAlignment_\" data-linktype=\"self-bookmark\">RtlTranslateAlignment(ContentAlignment)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified <a class=\"xref\" href=\"system.drawing.contentalignment\" data-linktype=\"relative-path\">ContentAlignment</a> to the appropriate <a class=\"xref\" href=\"system.drawing.contentalignment\" data-linktype=\"relative-path\">ContentAlignment</a> to support right-to-left text.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_RtlTranslateAlignment_System_Windows_Forms_HorizontalAlignment_\" data-linktype=\"self-bookmark\">RtlTranslateAlignment(HorizontalAlignment)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified <a class=\"xref\" href=\"system.windows.forms.horizontalalignment\" data-linktype=\"relative-path\">HorizontalAlignment</a> to the appropriate <a class=\"xref\" href=\"system.windows.forms.horizontalalignment\" data-linktype=\"relative-path\">HorizontalAlignment</a> to support right-to-left text.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_RtlTranslateAlignment_System_Windows_Forms_LeftRightAlignment_\" data-linktype=\"self-bookmark\">RtlTranslateAlignment(LeftRightAlignment)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified <a class=\"xref\" href=\"system.windows.forms.leftrightalignment\" data-linktype=\"relative-path\">LeftRightAlignment</a> to the appropriate <a class=\"xref\" href=\"system.windows.forms.leftrightalignment\" data-linktype=\"relative-path\">LeftRightAlignment</a> to support right-to-left text.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_RtlTranslateContent_System_Drawing_ContentAlignment_\" data-linktype=\"self-bookmark\">RtlTranslateContent(ContentAlignment)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified <a class=\"xref\" href=\"system.drawing.contentalignment\" data-linktype=\"relative-path\">ContentAlignment</a> to the appropriate <a class=\"xref\" href=\"system.drawing.contentalignment\" data-linktype=\"relative-path\">ContentAlignment</a> to support right-to-left text.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_RtlTranslateHorizontal_System_Windows_Forms_HorizontalAlignment_\" data-linktype=\"self-bookmark\">RtlTranslateHorizontal(HorizontalAlignment)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified <a class=\"xref\" href=\"system.windows.forms.horizontalalignment\" data-linktype=\"relative-path\">HorizontalAlignment</a> to the appropriate <a class=\"xref\" href=\"system.windows.forms.horizontalalignment\" data-linktype=\"relative-path\">HorizontalAlignment</a> to support right-to-left text.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_RtlTranslateLeftRight_System_Windows_Forms_LeftRightAlignment_\" data-linktype=\"self-bookmark\">RtlTranslateLeftRight(LeftRightAlignment)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified <a class=\"xref\" href=\"system.windows.forms.leftrightalignment\" data-linktype=\"relative-path\">LeftRightAlignment</a> to the appropriate <a class=\"xref\" href=\"system.windows.forms.leftrightalignment\" data-linktype=\"relative-path\">LeftRightAlignment</a> to support right-to-left text.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Scale_System_Drawing_SizeF_\" data-linktype=\"self-bookmark\">Scale(SizeF)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Scales the control and all child controls by the specified scaling factor.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Scale_System_Single_\" data-linktype=\"self-bookmark\">Scale(Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Scales the control and any child controls.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Scale_System_Single_System_Single_\" data-linktype=\"self-bookmark\">Scale(Single,Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Scales the entire control and any child controls.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ScaleControl_System_Drawing_SizeF_System_Windows_Forms_BoundsSpecified_\" data-linktype=\"self-bookmark\">ScaleControl(SizeF,BoundsSpecified)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Scales a control&#39;s location, size, padding and margin.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ScaleCore_System_Single_System_Single_\" data-linktype=\"self-bookmark\">ScaleCore(Single,Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>This method is not relevant for this class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Select\" data-linktype=\"self-bookmark\">Select()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Activates the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Select_System_Boolean_System_Boolean_\" data-linktype=\"self-bookmark\">Select(Boolean,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Activates a child control. Optionally specifies the direction in the tab order to select the control from.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_SelectNextControl_System_Windows_Forms_Control_System_Boolean_System_Boolean_System_Boolean_System_Boolean_\" data-linktype=\"self-bookmark\">SelectNextControl(Control,Boolean,Boolean,Boolean,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Activates the next control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_SendToBack\" data-linktype=\"self-bookmark\">SendToBack()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sends the control to the back of the z-order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_SetAutoSizeMode_System_Windows_Forms_AutoSizeMode_\" data-linktype=\"self-bookmark\">SetAutoSizeMode(AutoSizeMode)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets a value indicating how a control will behave when its <span class=\"xref\">stem.Windows.Forms.Control.AutoSize*</span> property is enabled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_SetBounds_System_Int32_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">SetBounds(Int32,Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the bounds of the control to the specified location and size.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_SetBounds_System_Int32_System_Int32_System_Int32_System_Int32_System_Windows_Forms_BoundsSpecified_\" data-linktype=\"self-bookmark\">SetBounds(Int32,Int32,Int32,Int32,BoundsSpecified)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the specified bounds of the control to the specified location and size.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_SetBoundsCore_System_Int32_System_Int32_System_Int32_System_Int32_System_Windows_Forms_BoundsSpecified_\" data-linktype=\"self-bookmark\">SetBoundsCore(Int32,Int32,Int32,Int32,BoundsSpecified)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs the work of setting the specified bounds of this control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_SetClientSizeCore_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">SetClientSizeCore(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the size of the client area of the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_SetStyle_System_Windows_Forms_ControlStyles_System_Boolean_\" data-linktype=\"self-bookmark\">SetStyle(ControlStyles,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets a specified <a class=\"xref\" href=\"system.windows.forms.controlstyles\" data-linktype=\"relative-path\">ControlStyles</a> flag to either <code>true</code> or <code>false</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_SetTopLevel_System_Boolean_\" data-linktype=\"self-bookmark\">SetTopLevel(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the control as the top-level control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_SetVisibleCore_System_Boolean_\" data-linktype=\"self-bookmark\">SetVisibleCore(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the control to the specified visible state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Show\" data-linktype=\"self-bookmark\">Show()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Displays the control to the user.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_SizeFromClientSize_System_Drawing_Size_\" data-linktype=\"self-bookmark\">SizeFromClientSize(Size)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines the size of the entire control from the height and width of its client area.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_SuspendLayout\" data-linktype=\"self-bookmark\">SuspendLayout()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Temporarily suspends the layout logic for the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Update\" data-linktype=\"self-bookmark\">Update()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Causes the control to redraw the invalidated regions within its client area.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_UpdateBounds\" data-linktype=\"self-bookmark\">UpdateBounds()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Updates the bounds of the control with the current size and location.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_UpdateBounds_System_Int32_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">UpdateBounds(Int32,Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Updates the bounds of the control with the specified size and location.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_UpdateBounds_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">UpdateBounds(Int32,Int32,Int32,Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Updates the bounds of the control with the specified size, location, and client size.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_UpdateStyles\" data-linktype=\"self-bookmark\">UpdateStyles()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Forces the assigned styles to be reapplied to the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_UpdateZOrder\" data-linktype=\"self-bookmark\">UpdateZOrder()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Updates the control in its parent&#39;s z-order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_WndProc_System_Windows_Forms_Message__\" data-linktype=\"self-bookmark\">WndProc(Message)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Processes Windows messages.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Events\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_AutoSizeChanged\" data-linktype=\"self-bookmark\">AutoSizeChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>This event is not relevant for this class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_BackColorChanged\" data-linktype=\"self-bookmark\">BackColorChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.Forms.Control.BackColor*</span> property changes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_BackgroundImageChanged\" data-linktype=\"self-bookmark\">BackgroundImageChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.Forms.Control.BackgroundImage*</span> property changes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_BackgroundImageLayoutChanged\" data-linktype=\"self-bookmark\">BackgroundImageLayoutChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the <span class=\"xref\">stem.Windows.Forms.Control.BackgroundImageLayout*</span> property changes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_BindingContextChanged\" data-linktype=\"self-bookmark\">BindingContextChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the value of the <a class=\"xref\" href=\"system.windows.forms.bindingcontext\" data-linktype=\"relative-path\">BindingContext</a> property changes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_CausesValidationChanged\" data-linktype=\"self-bookmark\">CausesValidationChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.Forms.Control.CausesValidation*</span> property changes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ChangeUICues\" data-linktype=\"self-bookmark\">ChangeUICues</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the focus or keyboard user interface (UI) cues change.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Click\" data-linktype=\"self-bookmark\">Click</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the control is clicked.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ClientSizeChanged\" data-linktype=\"self-bookmark\">ClientSizeChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.Forms.Control.ClientSize*</span> property changes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ContextMenuChanged\" data-linktype=\"self-bookmark\">ContextMenuChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.Forms.Control.ContextMenu*</span> property changes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ContextMenuStripChanged\" data-linktype=\"self-bookmark\">ContextMenuStripChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.Forms.Control.ContextMenuStrip*</span> property changes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ControlAdded\" data-linktype=\"self-bookmark\">ControlAdded</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a new control is added to the <a class=\"xref\" href=\"system.windows.forms.control.controlcollection\" data-linktype=\"relative-path\">Control+ControlCollection</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ControlRemoved\" data-linktype=\"self-bookmark\">ControlRemoved</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a control is removed from the <a class=\"xref\" href=\"system.windows.forms.control.controlcollection\" data-linktype=\"relative-path\">Control+ControlCollection</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_CursorChanged\" data-linktype=\"self-bookmark\">CursorChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.Forms.Control.Cursor*</span> property changes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_DockChanged\" data-linktype=\"self-bookmark\">DockChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.Forms.Control.Dock*</span> property changes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_DoubleClick\" data-linktype=\"self-bookmark\">DoubleClick</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the control is double-clicked.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_DragDrop\" data-linktype=\"self-bookmark\">DragDrop</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a drag-and-drop operation is completed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_DragEnter\" data-linktype=\"self-bookmark\">DragEnter</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when an object is dragged into the control&#39;s bounds.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_DragLeave\" data-linktype=\"self-bookmark\">DragLeave</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when an object is dragged out of the control&#39;s bounds.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_DragOver\" data-linktype=\"self-bookmark\">DragOver</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when an object is dragged over the control&#39;s bounds.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_EnabledChanged\" data-linktype=\"self-bookmark\">EnabledChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the <span class=\"xref\">stem.Windows.Forms.Control.Enabled*</span> property value has changed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Enter\" data-linktype=\"self-bookmark\">Enter</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the control is entered.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_FontChanged\" data-linktype=\"self-bookmark\">FontChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the <span class=\"xref\">stem.Windows.Forms.Control.Font*</span> property value changes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ForeColorChanged\" data-linktype=\"self-bookmark\">ForeColorChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the <span class=\"xref\">stem.Windows.Forms.Control.ForeColor*</span> property value changes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_GiveFeedback\" data-linktype=\"self-bookmark\">GiveFeedback</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs during a drag operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_GotFocus\" data-linktype=\"self-bookmark\">GotFocus</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the control receives focus.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_HandleCreated\" data-linktype=\"self-bookmark\">HandleCreated</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a handle is created for the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_HandleDestroyed\" data-linktype=\"self-bookmark\">HandleDestroyed</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the control&#39;s handle is in the process of being destroyed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_HelpRequested\" data-linktype=\"self-bookmark\">HelpRequested</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the user requests help for a control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ImeModeChanged\" data-linktype=\"self-bookmark\">ImeModeChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the <span class=\"xref\">stem.Windows.Forms.Control.ImeMode*</span> property has changed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Invalidated\" data-linktype=\"self-bookmark\">Invalidated</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a control&#39;s display requires redrawing.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_KeyDown\" data-linktype=\"self-bookmark\">KeyDown</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a key is pressed while the control has focus.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_KeyPress\" data-linktype=\"self-bookmark\">KeyPress</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a character. space or backspace key is pressed while the control has focus.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_KeyUp\" data-linktype=\"self-bookmark\">KeyUp</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a key is released while the control has focus.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Layout\" data-linktype=\"self-bookmark\">Layout</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a control should reposition its child controls.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Leave\" data-linktype=\"self-bookmark\">Leave</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the input focus leaves the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_LocationChanged\" data-linktype=\"self-bookmark\">LocationChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the <span class=\"xref\">stem.Windows.Forms.Control.Location*</span> property value has changed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_LostFocus\" data-linktype=\"self-bookmark\">LostFocus</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the control loses focus.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_MarginChanged\" data-linktype=\"self-bookmark\">MarginChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the control&#39;s margin changes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_MouseCaptureChanged\" data-linktype=\"self-bookmark\">MouseCaptureChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the control loses mouse capture.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_MouseClick\" data-linktype=\"self-bookmark\">MouseClick</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the control is clicked by the mouse.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_MouseDoubleClick\" data-linktype=\"self-bookmark\">MouseDoubleClick</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the control is double clicked by the mouse.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_MouseDown\" data-linktype=\"self-bookmark\">MouseDown</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the mouse pointer is over the control and a mouse button is pressed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_MouseEnter\" data-linktype=\"self-bookmark\">MouseEnter</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the mouse pointer enters the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_MouseHover\" data-linktype=\"self-bookmark\">MouseHover</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the mouse pointer rests on the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_MouseLeave\" data-linktype=\"self-bookmark\">MouseLeave</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the mouse pointer leaves the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_MouseMove\" data-linktype=\"self-bookmark\">MouseMove</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the mouse pointer is moved over the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_MouseUp\" data-linktype=\"self-bookmark\">MouseUp</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the mouse pointer is over the control and a mouse button is released.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_MouseWheel\" data-linktype=\"self-bookmark\">MouseWheel</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the mouse wheel moves while the control has focus.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Move\" data-linktype=\"self-bookmark\">Move</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the control is moved.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_PaddingChanged\" data-linktype=\"self-bookmark\">PaddingChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the control&#39;s padding changes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Paint\" data-linktype=\"self-bookmark\">Paint</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the control is redrawn.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_ParentChanged\" data-linktype=\"self-bookmark\">ParentChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the <span class=\"xref\">stem.Windows.Forms.Control.Parent*</span> property value changes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_PreviewKeyDown\" data-linktype=\"self-bookmark\">PreviewKeyDown</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs before the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyDown\" data-linktype=\"relative-path\">KeyDown</a> event when a key is pressed while focus is on this control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_QueryAccessibilityHelp\" data-linktype=\"self-bookmark\">QueryAccessibilityHelp</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when <a class=\"xref\" href=\"system.windows.forms.accessibleobject\" data-linktype=\"relative-path\">AccessibleObject</a> is providing help to accessibility applications.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_QueryContinueDrag\" data-linktype=\"self-bookmark\">QueryContinueDrag</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs during a drag-and-drop operation and enables the drag source to determine whether the drag-and-drop operation should be canceled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_RegionChanged\" data-linktype=\"self-bookmark\">RegionChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.Forms.Control.Region*</span> property changes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Resize\" data-linktype=\"self-bookmark\">Resize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the control is resized.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_RightToLeftChanged\" data-linktype=\"self-bookmark\">RightToLeftChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the <span class=\"xref\">stem.Windows.Forms.Control.RightToLeft*</span> property value changes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_SizeChanged\" data-linktype=\"self-bookmark\">SizeChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the <span class=\"xref\">stem.Windows.Forms.Control.Size*</span> property value changes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_StyleChanged\" data-linktype=\"self-bookmark\">StyleChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the control style changes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_SystemColorsChanged\" data-linktype=\"self-bookmark\">SystemColorsChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the system colors change.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_TabIndexChanged\" data-linktype=\"self-bookmark\">TabIndexChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the <span class=\"xref\">stem.Windows.Forms.Control.TabIndex*</span> property value changes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_TabStopChanged\" data-linktype=\"self-bookmark\">TabStopChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the <span class=\"xref\">stem.Windows.Forms.Control.TabStop*</span> property value changes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_TextChanged\" data-linktype=\"self-bookmark\">TextChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the <span class=\"xref\">stem.Windows.Forms.Control.Text*</span> property value changes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Validated\" data-linktype=\"self-bookmark\">Validated</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the control is finished validating.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_Validating\" data-linktype=\"self-bookmark\">Validating</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the control is validating.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_VisibleChanged\" data-linktype=\"self-bookmark\">VisibleChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the <span class=\"xref\">stem.Windows.Forms.Control.Visible*</span> property value changes.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_System_Windows_Forms_IDropTarget_OnDragDrop_System_Windows_Forms_DragEventArgs_\" data-linktype=\"self-bookmark\">IDropTarget.OnDragDrop(DragEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragDrop\" data-linktype=\"relative-path\">DragDrop</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_System_Windows_Forms_IDropTarget_OnDragEnter_System_Windows_Forms_DragEventArgs_\" data-linktype=\"self-bookmark\">IDropTarget.OnDragEnter(DragEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragEnter\" data-linktype=\"relative-path\">DragEnter</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_System_Windows_Forms_IDropTarget_OnDragLeave_System_EventArgs_\" data-linktype=\"self-bookmark\">IDropTarget.OnDragLeave(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragLeave\" data-linktype=\"relative-path\">DragLeave</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_Control_System_Windows_Forms_IDropTarget_OnDragOver_System_Windows_Forms_DragEventArgs_\" data-linktype=\"self-bookmark\">IDropTarget.OnDragOver(DragEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control__ctor\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Control()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class with default settings.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Control ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class is the base class for all controls used in a Windows Forms application. Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control__ctor_System_String_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Control(String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class with specific text.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Control (string text);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>text</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The text displayed by the control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class is the base class for all controls used in a Windows Forms application. Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.  </p>\n<p> This version of the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control__ctor_\" data-linktype=\"relative-path\">Control</a> constructor sets the initial <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property value to the <code>text</code> parameter value.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control__ctor_System_Windows_Forms_Control_System_String_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Control(Control,String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class as a child control, with specific text.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Control (System.Windows.Forms.Control parent, string text);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>parent</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> to be the parent of the control.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>text</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The text displayed by the control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class is the base class for all controls used in a Windows Forms application. Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.  </p>\n<p> This version of the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control__ctor_\" data-linktype=\"relative-path\">Control</a> constructor sets the initial <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property value to the <code>text</code> parameter value. The constructor also adds the control to the parent control&#39;s <a class=\"xref\" href=\"system.windows.forms.control.controlcollection\" data-linktype=\"relative-path\">Control+ControlCollection</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control__ctor_System_String_System_Int32_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Control(String,Int32,Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class with specific text, size, and location.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Control (string text, int left, int top, int width, int height);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>text</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The text displayed by the control.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Drawing.Point.X*</span> position of the control, in pixels, from the left edge of the control&#39;s container. The value is assigned to the <span class=\"xref\">stem.Windows.Forms.Control.Left*</span> property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>top</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Drawing.Point.Y*</span> position of the control, in pixels, from the top edge of the control&#39;s container. The value is assigned to the <span class=\"xref\">stem.Windows.Forms.Control.Top*</span> property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>width</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The width of the control, in pixels. The value is assigned to the <span class=\"xref\">stem.Windows.Forms.Control.Width*</span> property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>height</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The height of the control, in pixels. The value is assigned to the <span class=\"xref\">stem.Windows.Forms.Control.Height*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class is the base class for all controls used in a Windows Forms application. Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.  </p>\n<p> This version of the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control__ctor_\" data-linktype=\"relative-path\">Control</a> constructor sets the initial <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a>property value to the <code>text</code> parameter value. The initial <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Size_\" data-linktype=\"relative-path\">Size</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Location_\" data-linktype=\"relative-path\">Location</a> of the control are determined by the <code>left</code>, <code>top</code>, <code>width</code> and <code>height</code> parameter values.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To maintain better performance, do not set the size of a control in its constructor. The preferred method is to override the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DefaultSize_\" data-linktype=\"relative-path\">DefaultSize</a> property.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control__ctor_System_Windows_Forms_Control_System_String_System_Int32_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Control(Control,String,Int32,Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class as a child control, with specific text, size, and location.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Control (System.Windows.Forms.Control parent, string text, int left, int top, int width, int height);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>parent</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> to be the parent of the control.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>text</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The text displayed by the control.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Drawing.Point.X*</span> position of the control, in pixels, from the left edge of the control&#39;s container. The value is assigned to the <span class=\"xref\">stem.Windows.Forms.Control.Left*</span> property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>top</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Drawing.Point.Y*</span> position of the control, in pixels, from the top edge of the control&#39;s container. The value is assigned to the <span class=\"xref\">stem.Windows.Forms.Control.Top*</span> property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>width</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The width of the control, in pixels. The value is assigned to the <span class=\"xref\">stem.Windows.Forms.Control.Width*</span> property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>height</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The height of the control, in pixels. The value is assigned to the <span class=\"xref\">stem.Windows.Forms.Control.Height*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class is the base class for all controls used in a Windows Forms application. Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.  </p>\n<p> This version of the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control__ctor_\" data-linktype=\"relative-path\">Control</a> constructor sets the initial <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property value to the <code>text</code> parameter value. The constructor also adds the control to the parent control&#39;s <a class=\"xref\" href=\"system.windows.forms.control.controlcollection\" data-linktype=\"relative-path\">Control+ControlCollection</a>. The initial <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Size_\" data-linktype=\"relative-path\">Size</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Location_\" data-linktype=\"relative-path\">Location</a> of the control are determined by the <code>left</code>, <code>top</code>, <code>width</code> and <code>height</code> parameter values.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To maintain better performance, do not set the size of a control in its constructor. The preferred method is to override the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DefaultSize_\" data-linktype=\"relative-path\">DefaultSize</a> property.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_AccessibilityObject\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_AccessibilityObject_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AccessibilityObject</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.windows.forms.accessibleobject\" data-linktype=\"relative-path\">AccessibleObject</a> assigned to the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.AccessibleObject AccessibilityObject { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.accessibleobject\" data-linktype=\"relative-path\">AccessibleObject</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.accessibleobject\" data-linktype=\"relative-path\">AccessibleObject</a> assigned to the control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To control the instance returned from this method, override the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CreateAccessibilityInstance_\" data-linktype=\"relative-path\">CreateAccessibilityInstance</a> method.  </p>\n<p> If no <a class=\"xref\" href=\"system.windows.forms.accessibleobject\" data-linktype=\"relative-path\">AccessibleObject</a> is currently assigned to the control, a new instance of one is created.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To get or set the AccessibilityObject property, you must add a reference to the <code>Accessibility</code> assembly installed with the<!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnshort-md.md&quot; -->.NET Framework<!--END INCLUDE -->.  </p>\n</div>\n<p> For more information about accessible objects, see <a href=\"http://msdn.microsoft.com/library/windows/desktop/dd373592.aspx\" data-linktype=\"external\">Active Accessibility</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_AccessibleDefaultActionDescription\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_AccessibleDefaultActionDescription_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AccessibleDefaultActionDescription</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the default action description of the control for use by accessibility client applications.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string AccessibleDefaultActionDescription { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The default action description of the control for use by accessibility client applications.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An object&#39;s AccessibleDefaultActionDescription property describes the object&#39;s primary method of manipulation from the user&#39;s viewpoint. This property should be a verb or a short verb phrase.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Not all objects have default actions, and some objects might have a default action that is related to its <a class=\"xref\" href=\"system.windows.forms.accessibleobject#System_Windows_Forms_AccessibleObject_Value_\" data-linktype=\"relative-path\">Value</a> property, such as in the following examples:  </p>\n</div>\n<ul>\n<li><p>A selected check box has a default action of &quot;Uncheck&quot; and a value of &quot;Checked.&quot;  </p>\n</li>\n<li><p>A cleared check box has a default action of &quot;Check&quot; and a value of &quot;Unchecked.&quot;  </p>\n</li>\n<li><p>A button labeled &quot;Print&quot; has a default action of &quot;Press,&quot; with no value.  </p>\n</li>\n<li><p>A label or a text box control that shows &quot;Printer&quot; has no default action, but would have a value of &quot;Printer.&quot;  </p>\n<p>For more information about properties of accessible objects, see <a href=\"http://msdn.microsoft.com/library/windows/desktop/dd318025.aspx\" data-linktype=\"external\">Content of Descriptive Properties</a>.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_AccessibleDescription\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_AccessibleDescription_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AccessibleDescription</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the description of the control used by accessibility client applications.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string AccessibleDescription { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The description of the control used by accessibility client applications. The default is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An object&#39;s AccessibleDescription property provides a textual description about an object&#39;s visual appearance. The description is primarily used to provide greater context for low-vision or blind users, but can also be used for context searching or other applications.  </p>\n<p> The AccessibleDescription property is needed if the description is not obvious, or if it is redundant based on the object&#39;s <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_AccessibleName_\" data-linktype=\"relative-path\">AccessibleName</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_AccessibleRole_\" data-linktype=\"relative-path\">AccessibleRole</a>, <a class=\"xref\" href=\"system.windows.forms.accessibleobject#System_Windows_Forms_AccessibleObject_State_\" data-linktype=\"relative-path\">State</a>, and <a class=\"xref\" href=\"system.windows.forms.accessibleobject#System_Windows_Forms_AccessibleObject_Value_\" data-linktype=\"relative-path\">Value</a> properties. For example, a button with &quot;OK&quot; would not need additional information, but a button that shows a picture of a cactus would. The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_AccessibleName_\" data-linktype=\"relative-path\">AccessibleName</a>, and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_AccessibleRole_\" data-linktype=\"relative-path\">AccessibleRole</a> (and perhaps <a class=\"xref\" href=\"system.windows.forms.accessibleobject#System_Windows_Forms_AccessibleObject_Help_\" data-linktype=\"relative-path\">Help</a>) properties for the cactus button would describe its purpose, but the AccessibleDescription property would convey information that is less tangible, such as &quot;A button that shows a picture of a cactus.&quot;  </p>\n<p> For more information about properties of accessible objects, see <a href=\"http://msdn.microsoft.com/library/windows/desktop/dd318025.aspx\" data-linktype=\"external\">Content of Descriptive Properties</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates an instance of a <a class=\"xref\" href=\"system.windows.forms.checkbox\" data-linktype=\"relative-path\">CheckBox</a> derived class, <code>MyCheckBox</code>, assigns it an <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> to its <a class=\"xref\" href=\"system.windows.forms.buttonbase#System_Windows_Forms_ButtonBase_Image_\" data-linktype=\"relative-path\">Image</a> property and sets the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_AccessibleName_\" data-linktype=\"relative-path\">AccessibleName</a> and AccessibleDescription properties, because the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property is <code>null</code>. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> named <code>MyForm</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control.ControlAccessibleObject#2\">public MyForm()\n{\n   // Create a &#39;MyCheckBox&#39; control and \n   // display an image on it.\n   MyCustomControls.MyCheckBox myCheckBox = \n      new MyCustomControls.MyCheckBox();\n   myCheckBox.Location = new Point(5,5);\n   myCheckBox.Image = Image.FromFile(\n     Application.CommonAppDataPath + &quot;\\\\Preview.jpg&quot;);\n\n   // Set the AccessibleName property\n   // since there is no Text displayed.\n   myCheckBox.AccessibleName = &quot;Preview&quot;;\n   myCheckBox.AccessibleDescription =\n     &quot;A toggle button used to show the document preview.&quot;;\n   this.Controls.Add(myCheckBox);\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control.ControlAccessibleObject#2\">   public:\n      MyForm()\n      {\n         // Create a &#39;MyCheckBox&#39; control and\n         // display an image on it.\n         MyCustomControls::MyCheckBox^ myCheckBox = gcnew MyCustomControls::MyCheckBox;\n         myCheckBox-&gt;Location = Point(5,5);\n         myCheckBox-&gt;Image = Image::FromFile( String::Concat( Application::CommonAppDataPath, &quot;\\\\Preview.jpg&quot; ) );\n         \n         // Set the AccessibleName property\n         // since there is no Text displayed.\n         myCheckBox-&gt;AccessibleName = &quot;Preview&quot;;\n         myCheckBox-&gt;AccessibleDescription = &quot;A toggle button used to show the document preview.&quot;;\n         this-&gt;Controls-&gt;Add( myCheckBox );\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control.ControlAccessibleObject#2\">Public Sub New()\n   &#39; Create a &#39;MyCheckBox&#39; control and \n   &#39; display an image on it. \n   Dim myCheckBox As New MyCustomControls.MyCheckBox()\n   myCheckBox.Location = New Point(5, 5)\n   myCheckBox.Image = Image.FromFile( _\n     Application.CommonAppDataPath + &quot;\\Preview.jpg&quot;)\n\n   &#39; Set the AccessibleName property\n   &#39; since there is no Text displayed. \n   myCheckBox.AccessibleName = &quot;Preview&quot;\n\n   &#39; Set the AccessibleDescription text.\n   myCheckBox.AccessibleDescription = _\n     &quot;A toggle button used to show the document preview.&quot;\n   Me.Controls.Add(myCheckBox)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_AccessibleName\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_AccessibleName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AccessibleName</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the name of the control used by accessibility client applications.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string AccessibleName { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the control used by accessibility client applications. The default is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The AccessibleName property is a label that briefly describes and identifies the object within its container, such as the text in a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a>, the name of a <a class=\"xref\" href=\"system.windows.forms.menuitem\" data-linktype=\"relative-path\">MenuItem</a>, or a label displayed next to a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> control.  </p>\n<p> For more information about properties of accessible objects, see the &quot;<a href=\"http://msdn.microsoft.com/library/windows/desktop/dd318025.aspx\" data-linktype=\"external\">Content of Descriptive Properties</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates an instance of a <a class=\"xref\" href=\"system.windows.forms.checkbox\" data-linktype=\"relative-path\">CheckBox</a> derived class, <code>MyCheckBox</code>, assigns it an <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> to its <a class=\"xref\" href=\"system.windows.forms.buttonbase#System_Windows_Forms_ButtonBase_Image_\" data-linktype=\"relative-path\">Image</a> property and sets the AccessibleName and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_AccessibleDescription_\" data-linktype=\"relative-path\">AccessibleDescription</a> properties since the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property is <code>null</code>. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> named <code>MyForm</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control.ControlAccessibleObject#2\">public MyForm()\n{\n   // Create a &#39;MyCheckBox&#39; control and \n   // display an image on it.\n   MyCustomControls.MyCheckBox myCheckBox = \n      new MyCustomControls.MyCheckBox();\n   myCheckBox.Location = new Point(5,5);\n   myCheckBox.Image = Image.FromFile(\n     Application.CommonAppDataPath + &quot;\\\\Preview.jpg&quot;);\n\n   // Set the AccessibleName property\n   // since there is no Text displayed.\n   myCheckBox.AccessibleName = &quot;Preview&quot;;\n   myCheckBox.AccessibleDescription =\n     &quot;A toggle button used to show the document preview.&quot;;\n   this.Controls.Add(myCheckBox);\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control.ControlAccessibleObject#2\">   public:\n      MyForm()\n      {\n         // Create a &#39;MyCheckBox&#39; control and\n         // display an image on it.\n         MyCustomControls::MyCheckBox^ myCheckBox = gcnew MyCustomControls::MyCheckBox;\n         myCheckBox-&gt;Location = Point(5,5);\n         myCheckBox-&gt;Image = Image::FromFile( String::Concat( Application::CommonAppDataPath, &quot;\\\\Preview.jpg&quot; ) );\n         \n         // Set the AccessibleName property\n         // since there is no Text displayed.\n         myCheckBox-&gt;AccessibleName = &quot;Preview&quot;;\n         myCheckBox-&gt;AccessibleDescription = &quot;A toggle button used to show the document preview.&quot;;\n         this-&gt;Controls-&gt;Add( myCheckBox );\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control.ControlAccessibleObject#2\">Public Sub New()\n   &#39; Create a &#39;MyCheckBox&#39; control and \n   &#39; display an image on it. \n   Dim myCheckBox As New MyCustomControls.MyCheckBox()\n   myCheckBox.Location = New Point(5, 5)\n   myCheckBox.Image = Image.FromFile( _\n     Application.CommonAppDataPath + &quot;\\Preview.jpg&quot;)\n\n   &#39; Set the AccessibleName property\n   &#39; since there is no Text displayed. \n   myCheckBox.AccessibleName = &quot;Preview&quot;\n\n   &#39; Set the AccessibleDescription text.\n   myCheckBox.AccessibleDescription = _\n     &quot;A toggle button used to show the document preview.&quot;\n   Me.Controls.Add(myCheckBox)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_AccessibleRole\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_AccessibleRole_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AccessibleRole</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the accessible role of the control</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.AccessibleRole AccessibleRole { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.accessiblerole\" data-linktype=\"relative-path\">AccessibleRole</a></div>\r\n                  </div>\r\n                  <p>One of the values of <a class=\"xref\" href=\"system.windows.forms.accessiblerole\" data-linktype=\"relative-path\">AccessibleRole</a>. The default is <code>Default</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.invalidenumargumentexception\" data-linktype=\"relative-path\">InvalidEnumArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value assigned is not one of the <a class=\"xref\" href=\"system.windows.forms.accessiblerole\" data-linktype=\"relative-path\">AccessibleRole</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The AccessibleRole property describes what kind of user interface element an object is. If the control&#39;s role cannot be determined, the AccessibleRole property is set to <code>Default</code>.  </p>\n<p> For more information about properties of accessible objects, see <a href=\"http://msdn.microsoft.com/library/windows/desktop/dd318025.aspx\" data-linktype=\"external\">Content of Descriptive Properties</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_AllowDrop\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_AllowDrop_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AllowDrop</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the control can accept data that the user drags onto it.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool AllowDrop { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if drag-and-drop operations are allowed in the control; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example enables the user to drag an image or image file onto the form, and have it be displayed at the point on it is dropped. The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnPaint_\" data-linktype=\"relative-path\">OnPaint</a> method is overridden to repaint the image each time the form is painted; otherwise the image would only persist until the next repainting. The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragEnter\" data-linktype=\"relative-path\">DragEnter</a> event-handling method determines the type of data being dragged into the form and provides the appropriate feedback. The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragDrop\" data-linktype=\"relative-path\">DragDrop</a> event-handling method displays the image on the form, if an <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> can be created from the data. Because the <a class=\"xref\" href=\"system.windows.forms.drageventargs#System_Windows_Forms_DragEventArgs_X_\" data-linktype=\"relative-path\">X</a> and <a class=\"xref\" href=\"system.windows.forms.drageventargs#System_Windows_Forms_DragEventArgs_Y_\" data-linktype=\"relative-path\">Y</a> values are screen coordinates, the example uses the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_PointToClient_\" data-linktype=\"relative-path\">PointToClient</a> method to convert them to client coordinates.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control.DragOperations#1\">private Image picture;\nprivate Point pictureLocation;\n\npublic Form1()\n{\n   // Enable drag-and-drop operations and \n   // add handlers for DragEnter and DragDrop.\n   this.AllowDrop = true;\n   this.DragDrop += new DragEventHandler(this.Form1_DragDrop);\n   this.DragEnter += new DragEventHandler(this.Form1_DragEnter);\n}\n\nprotected override void OnPaint(PaintEventArgs e)\n{\n   // If there is an image and it has a location, \n   // paint it when the Form is repainted.\n   base.OnPaint(e);\n   if(this.picture != null &amp;&amp; this.pictureLocation != Point.Empty)\n   {\n      e.Graphics.DrawImage(this.picture, this.pictureLocation);\n   }\n}\n\nprivate void Form1_DragDrop(object sender, DragEventArgs e)\n{\n   // Handle FileDrop data.\n   if(e.Data.GetDataPresent(DataFormats.FileDrop) )\n   {\n      // Assign the file names to a string array, in \n      // case the user has selected multiple files.\n      string[] files = (string[])e.Data.GetData(DataFormats.FileDrop);\n      try\n      {\n         // Assign the first image to the picture variable.\n         this.picture = Image.FromFile(files[0]);\n         // Set the picture location equal to the drop point.\n         this.pictureLocation = this.PointToClient(new Point(e.X, e.Y) );\n      }\n      catch(Exception ex)\n      {\n         MessageBox.Show(ex.Message);\n         return;\n      }\n   }\n\n   // Handle Bitmap data.\n   if(e.Data.GetDataPresent(DataFormats.Bitmap) )\n   {\n      try\n      {\n         // Create an Image and assign it to the picture variable.\n         this.picture = (Image)e.Data.GetData(DataFormats.Bitmap);\n         // Set the picture location equal to the drop point.\n         this.pictureLocation = this.PointToClient(new Point(e.X, e.Y) );\n      }\n      catch(Exception ex)\n      {\n         MessageBox.Show(ex.Message);\n         return;\n      }\n   }\n   // Force the form to be redrawn with the image.\n   this.Invalidate();\n}\n\nprivate void Form1_DragEnter(object sender, DragEventArgs e)\n{\n   // If the data is a file or a bitmap, display the copy cursor.\n   if (e.Data.GetDataPresent(DataFormats.Bitmap) || \n      e.Data.GetDataPresent(DataFormats.FileDrop) ) \n   {\n      e.Effect = DragDropEffects.Copy;\n   }\n   else\n   {\n      e.Effect = DragDropEffects.None;\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control.DragOperations#1\">   private:\n      Image^ picture;\n      Point pictureLocation;\n\n   public:\n      Form1()\n      {\n         \n         // Enable drag-and-drop operations and\n         // add handlers for DragEnter and DragDrop.\n         this-&gt;AllowDrop = true;\n         this-&gt;DragDrop += gcnew DragEventHandler( this, &amp;Form1::Form1_DragDrop );\n         this-&gt;DragEnter += gcnew DragEventHandler( this, &amp;Form1::Form1_DragEnter );\n      }\n\n   protected:\n      virtual void OnPaint( PaintEventArgs^ e ) override\n      {\n         \n         // If there is an image and it has a location,\n         // paint it when the Form is repainted.\n         Form::OnPaint( e );\n         if ( this-&gt;picture != nullptr &amp;&amp; this-&gt;pictureLocation != Point::Empty )\n         {\n            e-&gt;Graphics-&gt;DrawImage( this-&gt;picture, this-&gt;pictureLocation );\n         }\n      }\n\n   private:\n      void Form1_DragDrop( Object^ /*sender*/, DragEventArgs^ e )\n      {\n         \n         // Handle FileDrop data.\n         if ( e-&gt;Data-&gt;GetDataPresent( DataFormats::FileDrop ) )\n         {\n            // Assign the file names to a String* array, in\n            // case the user has selected multiple files.\n            array&lt;String^&gt;^files = (array&lt;String^&gt;^)e-&gt;Data-&gt;GetData( DataFormats::FileDrop );\n            try\n            {\n               // Assign the first image to the picture variable.\n               this-&gt;picture = Image::FromFile( files[ 0 ] );\n               \n               // Set the picture location equal to the drop point.\n               this-&gt;pictureLocation = this-&gt;PointToClient( Point(e-&gt;X,e-&gt;Y) );\n            }\n            catch ( Exception^ ex ) \n            {\n               MessageBox::Show( ex-&gt;Message );\n               return;\n            }\n\n         }\n         \n         // Handle Bitmap data.\n         if ( e-&gt;Data-&gt;GetDataPresent( DataFormats::Bitmap ) )\n         {\n            try\n            {\n               // Create an Image and assign it to the picture variable.\n               this-&gt;picture = dynamic_cast&lt;Image^&gt;(e-&gt;Data-&gt;GetData( DataFormats::Bitmap ));\n\n               // Set the picture location equal to the drop point.\n               this-&gt;pictureLocation = this-&gt;PointToClient( Point(e-&gt;X,e-&gt;Y) );\n            }\n            catch ( Exception^ ex ) \n            {\n               MessageBox::Show( ex-&gt;Message );\n               return;\n            }\n         }\n         \n         // Force the form to be redrawn with the image.\n         this-&gt;Invalidate();\n      }\n\n      void Form1_DragEnter( Object^ /*sender*/, DragEventArgs^ e )\n      {\n         // If the data is a file or a bitmap, display the copy cursor.\n         if ( e-&gt;Data-&gt;GetDataPresent( DataFormats::Bitmap ) || e-&gt;Data-&gt;GetDataPresent( DataFormats::FileDrop ) )\n         {\n            e-&gt;Effect = DragDropEffects::Copy;\n         }\n         else\n         {\n            e-&gt;Effect = DragDropEffects::None;\n         }\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control.DragOperations#1\">Private picture As Image\nPrivate pictureLocation As Point\n\nPublic Sub New()\n   &#39; Enable drag-and-drop operations.\n   Me.AllowDrop = True\nEnd Sub\n\nProtected Overrides Sub OnPaint(ByVal e As PaintEventArgs)\n   MyBase.OnPaint(e)\n\n   &#39; If there is an image and it has a location, \n   &#39; paint it when the Form is repainted.\n   If (Me.picture IsNot Nothing) And _\n     Not (Me.pictureLocation.Equals(Point.Empty)) Then\n      e.Graphics.DrawImage(Me.picture, Me.pictureLocation)\n   End If\nEnd Sub\n\nPrivate Sub Form1_DragDrop(ByVal sender As Object, _\n  ByVal e As DragEventArgs) Handles MyBase.DragDrop\n   &#39; Handle FileDrop data.\n   If e.Data.GetDataPresent(DataFormats.FileDrop) Then\n      &#39; Assign the file names to a string array, in \n      &#39; case the user has selected multiple files.\n      Dim files As String() = CType(e.Data.GetData(DataFormats.FileDrop), String())\n      Try\n         &#39; Assign the first image to the &#39;picture&#39; variable.\n         Me.picture = Image.FromFile(files(0))\n         &#39; Set the picture location equal to the drop point.\n         Me.pictureLocation = Me.PointToClient(New Point(e.X, e.Y))\n      Catch ex As Exception\n         MessageBox.Show(ex.Message)\n         Return\n      End Try\n   End If\n\n   &#39; Handle Bitmap data.\n   If e.Data.GetDataPresent(DataFormats.Bitmap) Then\n      Try\n         &#39; Create an Image and assign it to the picture variable.\n         Me.picture = CType(e.Data.GetData(DataFormats.Bitmap), Image)\n         &#39; Set the picture location equal to the drop point.\n         Me.pictureLocation = Me.PointToClient(New Point(e.X, e.Y))\n      Catch ex As Exception\n         MessageBox.Show(ex.Message)\n         Return\n      End Try\n   End If\n\n   &#39; Force the form to be redrawn with the image.\n   Me.Invalidate()\nEnd Sub\n\nPrivate Sub Form1_DragEnter(ByVal sender As Object, _\n  ByVal e As DragEventArgs) Handles MyBase.DragEnter\n   &#39; If the data is a file or a bitmap, display the copy cursor.\n   If e.Data.GetDataPresent(DataFormats.Bitmap) _\n      Or e.Data.GetDataPresent(DataFormats.FileDrop) Then\n      e.Effect = DragDropEffects.Copy\n   Else\n      e.Effect = DragDropEffects.None\n   End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Anchor\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Anchor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Anchor</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the edges of the container to which a control is bound and determines how a control is resized with its parent.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Windows.Forms.AnchorStyles Anchor { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.anchorstyles\" data-linktype=\"relative-path\">AnchorStyles</a></div>\r\n                  </div>\r\n                  <p>A bitwise combination of the <a class=\"xref\" href=\"system.windows.forms.anchorstyles\" data-linktype=\"relative-path\">AnchorStyles</a> values. The default is <code>Top</code> and <code>Left</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the Anchor property to define how a control is automatically resized as its parent control is resized. Anchoring a control to its parent control ensures that the anchored edges remain in the same position relative to the edges of the parent control when the parent control is resized.  </p>\n<p> You can anchor a control to one or more edges of its container. For example, if you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> whose Anchor property value is set to <code>Top</code> and <code>Bottom</code>, the <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> is stretched to maintain the anchored distance to the top and bottom edges of the <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> as the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Height_\" data-linktype=\"relative-path\">Height</a> of the <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> is increased.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The Anchor and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Dock_\" data-linktype=\"relative-path\">Dock</a> properties are mutually exclusive. Only one can be set at a time, and the last one set takes precedence.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example adds a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> to a form and sets some of its common properties. The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized. Next it sets the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BackgroundImage_\" data-linktype=\"relative-path\">BackgroundImage</a> and resizes the button to the same size as the <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a>. The example then sets the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_TabStop_\" data-linktype=\"relative-path\">TabStop</a> to <code>true</code> and sets the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_TabIndex_\" data-linktype=\"relative-path\">TabIndex</a> property. Lastly, it adds an event handler to handle the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Click\" data-linktype=\"relative-path\">Click</a> event of the button. This example requires that you have an <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> named <code>imageList1</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control Properties#3\">// Add a button to a form and set some of its common properties.\nprivate void AddMyButton()\n{\n   // Create a button and add it to the form.\n   Button button1 = new Button();\n\n   // Anchor the button to the bottom right corner of the form\n   button1.Anchor = (AnchorStyles.Bottom | AnchorStyles.Right);\n\n   // Assign a background image.\n   button1.BackgroundImage = imageList1.Images[0];\n\n   // Specify the layout style of the background image. Tile is the default.\n   button1.BackgroundImageLayout = ImageLayout.Center;\n   \n   // Make the button the same size as the image.\n   button1.Size = button1.BackgroundImage.Size;\n\n   // Set the button&#39;s TabIndex and TabStop properties.\n   button1.TabIndex = 1;\n   button1.TabStop = true;\n\n   // Add a delegate to handle the Click event.\n   button1.Click += new System.EventHandler(this.button1_Click);\n\n   // Add the button to the form.\n   this.Controls.Add(button1);\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control Properties#3\">      // Add a button to a form and set some of its common properties.\n   private:\n      void AddMyButton()\n      {\n         // Create a button and add it to the form.\n         Button^ button1 = gcnew Button;\n\n         // Anchor the button to the bottom right corner of the form\n         button1-&gt;Anchor = static_cast&lt;AnchorStyles&gt;(AnchorStyles::Bottom | AnchorStyles::Right);\n\n         // Assign a background image.\n         button1-&gt;BackgroundImage = imageList1-&gt;Images[ 0 ];\n\n         // Specify the layout style of the background image. Tile is the default.\n         button1-&gt;BackgroundImageLayout = ImageLayout::Center;\n\n         // Make the button the same size as the image.\n         button1-&gt;Size = button1-&gt;BackgroundImage-&gt;Size;\n\n         // Set the button&#39;s TabIndex and TabStop properties.\n         button1-&gt;TabIndex = 1;\n         button1-&gt;TabStop = true;\n\n         // Add a delegate to handle the Click event.\n         button1-&gt;Click += gcnew System::EventHandler( this, &amp;Form1::button1_Click );\n\n         // Add the button to the form.\n         this-&gt;Controls-&gt;Add( button1 );\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control Properties#3\">&#39; Add a button to a form and set some of its common properties.\nPrivate Sub AddMyButton()\n   &#39; Create a button and add it to the form.\n   Dim button1 As New Button()\n   \n   &#39; Anchor the button to the bottom right corner of the form\n   button1.Anchor = AnchorStyles.Bottom Or AnchorStyles.Right\n   \n   &#39; Assign a background image.\n   button1.BackgroundImage = imageList1.Images(0)\n\n   &#39; Specify the layout style of the background image. Tile is the default.\n   button1.BackgroundImageLayout = ImageLayout.Center\n   \n   &#39; Make the button the same size as the image.\n   button1.Size = button1.BackgroundImage.Size\n   \n   &#39; Set the button&#39;s TabIndex and TabStop properties.\n   button1.TabIndex = 1\n   button1.TabStop = True\n\n   &#39; Add a delegate to handle the Click event.\n   AddHandler button1.Click, AddressOf Me.button1_Click\n   \n   &#39; Add the button to the form.\n   Me.Controls.Add(button1)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_AutoScrollOffset\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_AutoScrollOffset_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AutoScrollOffset</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets where this control is scrolled to in <span class=\"xref\">stem.Windows.Forms.ScrollableControl.ScrollControlIntoView*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Drawing.Point AutoScrollOffset { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.point\" data-linktype=\"relative-path\">Point</a> specifying the scroll location. The default is the upper-left corner of the control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_AutoSize\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_AutoSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AutoSize</div>        \r\n          </div>\r\n    \r\n            <p>This property is not relevant for this class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool AutoSize { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if enabled; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is not relevant for this class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_BackColor\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_BackColor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BackColor</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the background color for the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Drawing.Color BackColor { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.color\" data-linktype=\"relative-path\">Color</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.color\" data-linktype=\"relative-path\">Color</a> that represents the background color of the control. The default is the value of the <span class=\"xref\">stem.Windows.Forms.Control.DefaultBackColor*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The BackColor property does not support transparent colors unless the <code>SupportsTransparentBackColor</code> value of <a class=\"xref\" href=\"system.windows.forms.controlstyles\" data-linktype=\"relative-path\">System.Windows.Forms.ControlStyles</a> is set to <code>true</code>.  </p>\n<p> The BackColor property is an ambient property. An ambient property is a control property that, if not set, is retrieved from the parent control. For example, a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> will have the same BackColor as its parent <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> by default. For more information about ambient properties, see the <a class=\"xref\" href=\"system.windows.forms.ambientproperties\" data-linktype=\"relative-path\">AmbientProperties</a> class or the <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class overview.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets the BackColor and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> of the controls to the default system colors. The code recursively calls itself if the control has any child controls. This code example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with at least one child control; however, a child container control, like a <a class=\"xref\" href=\"system.windows.forms.panel\" data-linktype=\"relative-path\">Panel</a> or <a class=\"xref\" href=\"system.windows.forms.groupbox\" data-linktype=\"relative-path\">GroupBox</a>, with its own child control(s) would better demonstrate the recursion.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control Properties#1\">// Reset all the controls to the user&#39;s default Control color. \nprivate void ResetAllControlsBackColor(Control control)\n{\n   control.BackColor = SystemColors.Control;\n   control.ForeColor = SystemColors.ControlText;\n   if(control.HasChildren)\n   {\n      // Recursively call this method for each child control.\n      foreach(Control childControl in control.Controls)\n      {\n         ResetAllControlsBackColor(childControl);\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control Properties#1\">      // Reset all the controls to the user&#39;s default Control color.\n   private:\n      void ResetAllControlsBackColor( Control^ control )\n      {\n         control-&gt;BackColor = SystemColors::Control;\n         control-&gt;ForeColor = SystemColors::ControlText;\n         if ( control-&gt;HasChildren )\n         {\n            // Recursively call this method for each child control.\n            IEnumerator^ myEnum = control-&gt;Controls-&gt;GetEnumerator();\n            while ( myEnum-&gt;MoveNext() )\n            {\n               Control^ childControl = safe_cast&lt;Control^&gt;(myEnum-&gt;Current);\n               ResetAllControlsBackColor( childControl );\n            }\n         }\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control Properties#1\">&#39; Reset all the controls to the user&#39;s default Control color. \nPrivate Sub ResetAllControlsBackColor(control As Control)\n   control.BackColor = SystemColors.Control\n   control.ForeColor = SystemColors.ControlText\n   If control.HasChildren Then\n      &#39; Recursively call this method for each child control.\n      Dim childControl As Control\n      For Each childControl In  control.Controls\n         ResetAllControlsBackColor(childControl)\n      Next childControl\n   End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_BackgroundImage\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_BackgroundImage_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BackgroundImage</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the background image displayed in the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Drawing.Image BackgroundImage { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> that represents the image to display in the background of the control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <ul>\n<li>Use the BackgroundImage property to place a graphic image onto a control.  </li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> Images with translucent or transparent colors are not supported by Windows Forms controls as background images.  </p>\n<p> This property is not supported on child controls whose <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_RightToLeftLayout_\" data-linktype=\"relative-path\">RightToLeftLayout</a> property is <code>true</code>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example adds a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> to a form and sets some of its common properties. The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized. Next it sets the BackgroundImage and resizes the button to the same size as the <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a>. The example then sets the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_TabStop_\" data-linktype=\"relative-path\">TabStop</a> to <code>true</code> and sets the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_TabIndex_\" data-linktype=\"relative-path\">TabIndex</a> property. Lastly, it adds an event handler to handle the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Click\" data-linktype=\"relative-path\">Click</a> event of the button. This example requires that you have an <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> named <code>imageList1</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control Properties#3\">// Add a button to a form and set some of its common properties.\nprivate void AddMyButton()\n{\n   // Create a button and add it to the form.\n   Button button1 = new Button();\n\n   // Anchor the button to the bottom right corner of the form\n   button1.Anchor = (AnchorStyles.Bottom | AnchorStyles.Right);\n\n   // Assign a background image.\n   button1.BackgroundImage = imageList1.Images[0];\n\n   // Specify the layout style of the background image. Tile is the default.\n   button1.BackgroundImageLayout = ImageLayout.Center;\n   \n   // Make the button the same size as the image.\n   button1.Size = button1.BackgroundImage.Size;\n\n   // Set the button&#39;s TabIndex and TabStop properties.\n   button1.TabIndex = 1;\n   button1.TabStop = true;\n\n   // Add a delegate to handle the Click event.\n   button1.Click += new System.EventHandler(this.button1_Click);\n\n   // Add the button to the form.\n   this.Controls.Add(button1);\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control Properties#3\">      // Add a button to a form and set some of its common properties.\n   private:\n      void AddMyButton()\n      {\n         // Create a button and add it to the form.\n         Button^ button1 = gcnew Button;\n\n         // Anchor the button to the bottom right corner of the form\n         button1-&gt;Anchor = static_cast&lt;AnchorStyles&gt;(AnchorStyles::Bottom | AnchorStyles::Right);\n\n         // Assign a background image.\n         button1-&gt;BackgroundImage = imageList1-&gt;Images[ 0 ];\n\n         // Specify the layout style of the background image. Tile is the default.\n         button1-&gt;BackgroundImageLayout = ImageLayout::Center;\n\n         // Make the button the same size as the image.\n         button1-&gt;Size = button1-&gt;BackgroundImage-&gt;Size;\n\n         // Set the button&#39;s TabIndex and TabStop properties.\n         button1-&gt;TabIndex = 1;\n         button1-&gt;TabStop = true;\n\n         // Add a delegate to handle the Click event.\n         button1-&gt;Click += gcnew System::EventHandler( this, &amp;Form1::button1_Click );\n\n         // Add the button to the form.\n         this-&gt;Controls-&gt;Add( button1 );\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control Properties#3\">&#39; Add a button to a form and set some of its common properties.\nPrivate Sub AddMyButton()\n   &#39; Create a button and add it to the form.\n   Dim button1 As New Button()\n   \n   &#39; Anchor the button to the bottom right corner of the form\n   button1.Anchor = AnchorStyles.Bottom Or AnchorStyles.Right\n   \n   &#39; Assign a background image.\n   button1.BackgroundImage = imageList1.Images(0)\n\n   &#39; Specify the layout style of the background image. Tile is the default.\n   button1.BackgroundImageLayout = ImageLayout.Center\n   \n   &#39; Make the button the same size as the image.\n   button1.Size = button1.BackgroundImage.Size\n   \n   &#39; Set the button&#39;s TabIndex and TabStop properties.\n   button1.TabIndex = 1\n   button1.TabStop = True\n\n   &#39; Add a delegate to handle the Click event.\n   AddHandler button1.Click, AddressOf Me.button1_Click\n   \n   &#39; Add the button to the form.\n   Me.Controls.Add(button1)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_BackgroundImageLayout\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_BackgroundImageLayout_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BackgroundImageLayout</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the background image layout as defined in the <a class=\"xref\" href=\"system.windows.forms.imagelayout\" data-linktype=\"relative-path\">ImageLayout</a> enumeration.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.imagelayout\" data-linktype=\"relative-path\">ImageLayout</a></div>\r\n                  </div>\r\n                  <p>One of the values of <a class=\"xref\" href=\"system.windows.forms.imagelayout\" data-linktype=\"relative-path\">ImageLayout</a> (<a class=\"xref\" href=\"system.windows.forms.imagelayout\" data-linktype=\"relative-path\">ImageLayout</a> , <a class=\"xref\" href=\"system.windows.forms.imagelayout\" data-linktype=\"relative-path\">ImageLayout</a>, <a class=\"xref\" href=\"system.windows.forms.imagelayout\" data-linktype=\"relative-path\">ImageLayout</a>, <a class=\"xref\" href=\"system.windows.forms.imagelayout\" data-linktype=\"relative-path\">ImageLayout</a>, or <a class=\"xref\" href=\"system.windows.forms.imagelayout\" data-linktype=\"relative-path\">ImageLayout</a>). <a class=\"xref\" href=\"system.windows.forms.imagelayout\" data-linktype=\"relative-path\">ImageLayout</a> is the default value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.invalidenumargumentexception\" data-linktype=\"relative-path\">InvalidEnumArgumentException</a></div>\r\n                  </div>\r\n                  <p>The specified enumeration value does not exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the BackgroundImageLayout property to specify the position and behavior of an image you have placed onto a control. BackgroundImageLayout takes effect only if the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BackgroundImage_\" data-linktype=\"relative-path\">BackgroundImage</a> property is set.  </p>\n<p> You can increase performance for large images if you set BackgroundImageLayout to something other than <a class=\"xref\" href=\"system.windows.forms.imagelayout\" data-linktype=\"relative-path\">ImageLayout</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_BindingContext\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_BindingContext_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BindingContext</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.windows.forms.bindingcontext\" data-linktype=\"relative-path\">BindingContext</a> for the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Windows.Forms.BindingContext BindingContext { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.bindingcontext\" data-linktype=\"relative-path\">BindingContext</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.bindingcontext\" data-linktype=\"relative-path\">BindingContext</a> for the control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.windows.forms.bindingcontext\" data-linktype=\"relative-path\">BindingContext</a> of a <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> is used to return a single<a class=\"xref\" href=\"system.windows.forms.bindingmanagerbase\" data-linktype=\"relative-path\">BindingManagerBase</a> for all data-bound controls contained by the <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a>. The <a class=\"xref\" href=\"system.windows.forms.bindingmanagerbase\" data-linktype=\"relative-path\">BindingManagerBase</a> keeps all controls that are bound to the same data source synchronized. For example, setting the <a class=\"xref\" href=\"system.windows.forms.bindingmanagerbase#System_Windows_Forms_BindingManagerBase_Position_\" data-linktype=\"relative-path\">Position</a> property of the <a class=\"xref\" href=\"system.windows.forms.bindingmanagerbase\" data-linktype=\"relative-path\">BindingManagerBase</a> specifies the item in the underlying list that all data-bound controls point to.  </p>\n<p> For more information about creating a new <a class=\"xref\" href=\"system.windows.forms.bindingcontext\" data-linktype=\"relative-path\">BindingContext</a> and assigning it to the BindingContext property, see the <a class=\"xref\" href=\"system.windows.forms.bindingcontext#System_Windows_Forms_BindingContext__ctor_\" data-linktype=\"relative-path\">BindingContext</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates four <a class=\"xref\" href=\"system.windows.forms.binding\" data-linktype=\"relative-path\">Binding</a> objects to bind five controls, a <a class=\"xref\" href=\"system.windows.forms.datetimepicker\" data-linktype=\"relative-path\">DateTimePicker</a> and four <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> controls, to several data sources. The <a class=\"xref\" href=\"system.windows.forms.bindingcontext\" data-linktype=\"relative-path\">BindingContext</a> is then used to get the <a class=\"xref\" href=\"system.windows.forms.bindingmanagerbase\" data-linktype=\"relative-path\">BindingManagerBase</a> for each data source.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic BindingContext Example#1\">   void BindControls()\n   {\n      /* Create two Binding objects for the first two TextBox \n            controls. The data-bound property for both controls \n            is the Text property. The data source is a DataSet \n            (ds). The data member is a navigation path in the form: \n            &quot;TableName.ColumnName&quot;. */\n      text1-&gt;DataBindings-&gt;Add( gcnew Binding( &quot;Text&quot;,ds,&quot;customers.custName&quot; ) );\n      text2-&gt;DataBindings-&gt;Add( gcnew Binding( &quot;Text&quot;,ds,&quot;customers.custID&quot; ) );\n\n      /* Bind the DateTimePicker control by adding a new Binding. \n            The data member of the DateTimePicker is a navigation path:\n            TableName.RelationName.ColumnName string. */\n      DateTimePicker1-&gt;DataBindings-&gt;Add( gcnew Binding( &quot;Value&quot;,ds,&quot;customers.CustToOrders.OrderDate&quot; ) );\n\n      /* Add event delegates for the Parse and Format events to a \n            new Binding object, and add the object to the third \n            TextBox control&#39;s BindingsCollection. The delegates \n            must be added before adding the Binding to the \n            collection; otherwise, no formatting occurs until \n            the Current object of the BindingManagerBase for \n            the data source changes. */\n      Binding^ b = gcnew Binding( &quot;Text&quot;,ds,&quot;customers.custToOrders.OrderAmount&quot; );\n      b-&gt;Parse += gcnew ConvertEventHandler( this, &amp;Form1::CurrencyStringToDecimal );\n      b-&gt;Format += gcnew ConvertEventHandler( this, &amp;Form1::DecimalToCurrencyString );\n      text3-&gt;DataBindings-&gt;Add( b );\n\n      // Get the BindingManagerBase for the Customers table. \n      bmCustomers = this-&gt;BindingContext[ ds,&quot;Customers&quot; ];\n\n      /* Get the BindingManagerBase for the Orders table using the \n            RelationName. */\n      bmOrders = this-&gt;BindingContext[ds, &quot;customers.CustToOrders&quot;];\n\n      /* Bind the fourth TextBox control&#39;s Text property to the\n         third control&#39;s Text property. */\n      text4-&gt;DataBindings-&gt;Add( &quot;Text&quot;, text3, &quot;Text&quot; );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic BindingContext Example#1\">   protected void BindControls()\n   {\n      /* Create two Binding objects for the first two TextBox \n         controls. The data-bound property for both controls \n         is the Text property. The data source is a DataSet \n         (ds). The data member is a navigation path in the form: \n         &quot;TableName.ColumnName&quot;. */\n      text1.DataBindings.Add(new Binding\n      (&quot;Text&quot;, ds, &quot;customers.custName&quot;));\n      text2.DataBindings.Add(new Binding\n      (&quot;Text&quot;, ds, &quot;customers.custID&quot;));\n      \n      /* Bind the DateTimePicker control by adding a new Binding. \n         The data member of the DateTimePicker is a navigation path:\n         TableName.RelationName.ColumnName string. */\n      DateTimePicker1.DataBindings.Add(new \n      Binding(&quot;Value&quot;, ds, &quot;customers.CustToOrders.OrderDate&quot;));\n\n      /* Add event delegates for the Parse and Format events to a \n         new Binding object, and add the object to the third \n         TextBox control&#39;s BindingsCollection. The delegates \n         must be added before adding the Binding to the \n         collection; otherwise, no formatting occurs until \n         the Current object of the BindingManagerBase for \n         the data source changes. */\n         Binding b = new Binding\n         (&quot;Text&quot;, ds, &quot;customers.custToOrders.OrderAmount&quot;);\n      b.Parse+=new ConvertEventHandler(CurrencyStringToDecimal);\n      b.Format+=new ConvertEventHandler(DecimalToCurrencyString);\n      text3.DataBindings.Add(b);\n\n      // Get the BindingManagerBase for the Customers table. \n      bmCustomers = this.BindingContext [ds, &quot;Customers&quot;];\n\n      /* Get the BindingManagerBase for the Orders table using the \n         RelationName. */ \n      bmOrders = this.BindingContext[ds, &quot;customers.CustToOrders&quot;];\n\n      /* Bind the fourth TextBox control&#39;s Text property to the\n      third control&#39;s Text property. */\n      text4.DataBindings.Add(&quot;Text&quot;, text3, &quot;Text&quot;);\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic BindingContext Example#1\">   Protected Sub BindControls()\n\n      &#39; Create two Binding objects for the first two TextBox \n      &#39;   controls. The data-bound property for both controls \n      &#39;   is the Text property. The data source is a DataSet \n      &#39;   (ds). The data member is the string \n      &#39;   &quot;TableName.ColumnName&quot;.\n      text1.DataBindings.Add(New Binding _\n         (&quot;Text&quot;, ds, &quot;customers.custName&quot;))\n      text2.DataBindings.Add(New Binding _\n         (&quot;Text&quot;, ds, &quot;customers.custID&quot;))\n      \n      &#39; Bind the DateTimePicker control by adding a new Binding. \n      &#39;   The data member of the DateTimePicker is a \n      &#39;   TableName.RelationName.ColumnName string.\n      DateTimePicker1.DataBindings.Add(New Binding _\n         (&quot;Value&quot;, ds, &quot;customers.CustToOrders.OrderDate&quot;))\n\n      &#39; Add event delegates for the Parse and Format events to a \n      &#39;   new Binding object, and add the object to the third \n      &#39;   TextBox control&#39;s BindingsCollection. The delegates \n      &#39;   must be added before adding the Binding to the \n      &#39;   collection; otherwise, no formatting occurs until \n      &#39;   the Current object of the BindingManagerBase for \n      &#39;   the data source changes.\n      Dim b As Binding = New Binding _\n         (&quot;Text&quot;, ds, &quot;customers.custToOrders.OrderAmount&quot;)\n      AddHandler b.Parse,  New ConvertEventHandler(AddressOf CurrencyStringToDecimal)      \n      AddHandler b.Format, New ConvertEventHandler(AddressOf DecimalToCurrencyString)\n      text3.DataBindings.Add(b)\n\n      &#39; Get the BindingManagerBase for the Customers table.\n      bmCustomers = Me.BindingContext(ds, &quot;Customers&quot;)\n\n      &#39; Get the BindingManagerBase for the Orders table using the \n      &#39;   RelationName.\n      bmOrders = Me.BindingContext(ds, &quot;customers.CustToOrders&quot;)\n\n      &#39; Bind the fourth TextBox control&#39;s Text property to the\n      &#39; third control&#39;s Text property.\n      text4.DataBindings.Add(&quot;Text&quot;, text3, &quot;Text&quot;)\n\n   End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Bottom\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Bottom_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Bottom</div>        \r\n          </div>\r\n    \r\n            <p>Gets the distance, in pixels, between the bottom edge of the control and the top edge of its container&#39;s client area.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Bottom { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> representing the distance, in pixels, between the bottom edge of the control and the top edge of its container&#39;s client area.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of this property is equal to the sum of the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Top_\" data-linktype=\"relative-path\">Top</a> property value, and the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Height_\" data-linktype=\"relative-path\">Height</a> property value.  </p>\n<p> The Bottom property is a read-only property. You can manipulate this property value by changing the value of the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Top_\" data-linktype=\"relative-path\">Top</a> or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Height_\" data-linktype=\"relative-path\">Height</a> properties or calling the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SetBounds_\" data-linktype=\"relative-path\">SetBounds</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SetBoundsCore_\" data-linktype=\"relative-path\">SetBoundsCore</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_UpdateBounds_\" data-linktype=\"relative-path\">UpdateBounds</a>, or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SetClientSizeCore_\" data-linktype=\"relative-path\">SetClientSizeCore</a> methods.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the Bottom property to define the lower limit of a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> control relative to the client area of the container.  </p>\n<pre><code class=\"lang-cpp\" name=\"Control.KeyUp#1\">   // This example demonstrates how to use the KeyUp event with the Help class to display\n   // pop-up style help to the user of the application. When the user presses F1, the Help\n   // class displays a pop-up window, similar to a ToolTip, near the control. This example assumes\n   // that a TextBox control, named textBox1, has been added to the form and its KeyUp\n   // event has been connected to this event handler method.\nprivate:\n   void textBox1_KeyUp( Object^ /*sender*/, System::Windows::Forms::KeyEventArgs^ e )\n   {\n      \n      // Determine whether the key entered is the F1 key. Display help if it is.\n      if ( e-&gt;KeyCode == Keys::F1 )\n      {\n         \n         // Display a pop-up help topic to assist the user.\n         Help::ShowPopup( textBox1, &quot;Enter your first name&quot;, Point(textBox1-&gt;Right,this-&gt;textBox1-&gt;Bottom) );\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Control.KeyUp#1\">    &#39; This example demonstrates how to use the KeyUp event with the Help class to display\n    &#39; pop-up style help to the user of the application. When the user presses F1, the Help\n    &#39; class displays a pop-up window, similar to a ToolTip, near the control. This example assumes\n    &#39; that a TextBox control, named textBox1, has been added to the form and its KeyUp\n    &#39; event has been contected to this event handler method.\n    Private Sub textBox1_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles textBox1.KeyUp\n        &#39; Determine whether the key entered is the F1 key. Display help if it is.\n        If e.KeyCode = Keys.F1 Then\n            &#39; Display a pop-up help topic to assist the user.\n            Help.ShowPopup(textBox1, &quot;Enter your first name&quot;, New Point(textBox1.Right, Me.textBox1.Bottom))\n        End If\n    End Sub &#39;textBox1_KeyUp\n</code></pre><pre><code class=\"lang-cs\" name=\"Control.KeyUp#1\">        // This example demonstrates how to use the KeyUp event with the Help class to display\n        // pop-up style help to the user of the application. When the user presses F1, the Help\n        // class displays a pop-up window, similar to a ToolTip, near the control. This example assumes\n        // that a TextBox control, named textBox1, has been added to the form and its KeyUp\n        // event has been contected to this event handler method.\n        private void textBox1_KeyUp(object sender, System.Windows.Forms.KeyEventArgs e)\n        {\n            // Determine whether the key entered is the F1 key. Display help if it is.\n            if(e.KeyCode == Keys.F1)\n            {\n                // Display a pop-up help topic to assist the user.\n                Help.ShowPopup(textBox1, &quot;Enter your first name&quot;, new Point(textBox1.Right, this.textBox1.Bottom));\n            }\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Bounds\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Bounds_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Bounds</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the size and location of the control including its nonclient elements, in pixels, relative to the parent control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Drawing.Rectangle Bounds { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a> in pixels relative to the parent control that represents the size and location of the control including its nonclient elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The bounds of the control include the nonclient elements such as scroll bars, borders, title bars, and menus. The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SetBoundsCore_\" data-linktype=\"relative-path\">SetBoundsCore</a> method is called to set the Bounds property. The Boundsproperty is not always changed through its <code>set</code> method so you should override the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SetBoundsCore_\" data-linktype=\"relative-path\">SetBoundsCore</a> method to ensure that your code is executed when the Bounds property is set.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates three <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> controls on a form and sets their size and location by using the various size-related and location-related properties. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> that has a width and height of at least 300 pixels.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control SizeLocation#1\">// Create three buttons and place them on a form using \n// several size and location related properties. \nprivate void AddOKCancelButtons()\n{\n   // Set the button size and location using \n   // the Size and Location properties.\n   Button buttonOK = new Button();\n   buttonOK.Location = new Point(136,248);\n   buttonOK.Size = new Size(75,25);\n   // Set the Text property and make the \n   // button the form&#39;s default button. \n   buttonOK.Text = &quot;&amp;OK&quot;;\n   this.AcceptButton = buttonOK;\n\n   // Set the button size and location using the Top, \n   // Left, Width, and Height properties.\n   Button buttonCancel = new Button();\n   buttonCancel.Top = buttonOK.Top;\n   buttonCancel.Left = buttonOK.Right + 5;\n   buttonCancel.Width = buttonOK.Width;\n   buttonCancel.Height = buttonOK.Height;\n   // Set the Text property and make the \n   // button the form&#39;s cancel button.\n   buttonCancel.Text = &quot;&amp;Cancel&quot;;\n   this.CancelButton = buttonCancel;\n\n   // Set the button size and location using \n   // the Bounds property.\n   Button buttonHelp = new Button();\n   buttonHelp.Bounds = new Rectangle(10,10, 75, 25);\n   // Set the Text property of the button.\n   buttonHelp.Text = &quot;&amp;Help&quot;;\n\n   // Add the buttons to the form.\n   this.Controls.AddRange(new Control[] {buttonOK, buttonCancel, buttonHelp} );\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control SizeLocation#1\">      // Create three buttons and place them on a form using\n      // several size and location related properties.\n      void AddOKCancelButtons()\n      {\n         \n         // Set the button size and location using\n         // the Size and Location properties.\n         Button^ buttonOK = gcnew Button;\n         buttonOK-&gt;Location = Point(136,248);\n         buttonOK-&gt;Size = System::Drawing::Size( 75, 25 );\n         \n         // Set the Text property and make the\n         // button the form&#39;s default button.\n         buttonOK-&gt;Text = &quot;&amp;OK&quot;;\n         this-&gt;AcceptButton = buttonOK;\n         \n         // Set the button size and location using the Top,\n         // Left, Width, and Height properties.\n         Button^ buttonCancel = gcnew Button;\n         buttonCancel-&gt;Top = buttonOK-&gt;Top;\n         buttonCancel-&gt;Left = buttonOK-&gt;Right + 5;\n         buttonCancel-&gt;Width = buttonOK-&gt;Width;\n         buttonCancel-&gt;Height = buttonOK-&gt;Height;\n         \n         // Set the Text property and make the\n         // button the form&#39;s cancel button.\n         buttonCancel-&gt;Text = &quot;&amp;Cancel&quot;;\n         this-&gt;CancelButton = buttonCancel;\n         \n         // Set the button size and location using\n         // the Bounds property.\n         Button^ buttonHelp = gcnew Button;\n         buttonHelp-&gt;Bounds = Rectangle(10,10,75,25);\n         \n         // Set the Text property of the button.\n         buttonHelp-&gt;Text = &quot;&amp;Help&quot;;\n         \n         // Add the buttons to the form.\n         array&lt;Control^&gt;^temp1 = {buttonOK,buttonCancel,buttonHelp};\n         this-&gt;Controls-&gt;AddRange( temp1 );\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control SizeLocation#1\">&#39; Create three buttons and place them on a form using \n&#39; several size and location related properties. \nPrivate Sub AddOKCancelButtons()\n   &#39; Set the button size and location using \n      &#39; the Size and Location properties. \n   Dim buttonOK As New Button()\n   buttonOK.Location = New Point(136, 248)\n   buttonOK.Size = New Size(75, 25)\n   &#39; Set the Text property and make the \n   &#39; button the form&#39;s default button. \n   buttonOK.Text = &quot;&amp;OK&quot;\n   Me.AcceptButton = buttonOK\n   \n   &#39; Set the button size and location using the Top, \n   &#39; Left, Width, and Height properties. \n   Dim buttonCancel As New Button()\n   buttonCancel.Top = buttonOK.Top\n   buttonCancel.Left = buttonOK.Right + 5\n   buttonCancel.Width = buttonOK.Width\n   buttonCancel.Height = buttonOK.Height\n   &#39; Set the Text property and make the \n   &#39; button the form&#39;s cancel button. \n   buttonCancel.Text = &quot;&amp;Cancel&quot;\n   Me.CancelButton = buttonCancel\n   \n   &#39; Set the button size and location using \n   &#39; the Bounds property. \n   Dim buttonHelp As New Button()\n   buttonHelp.Bounds = New Rectangle(10, 10, 75, 25)\n   &#39; Set the Text property of the button.\n   buttonHelp.Text = &quot;&amp;Help&quot;\n   \n   &#39; Add the buttons to the form.\n   Me.Controls.AddRange(New Control() {buttonOK, buttonCancel, buttonHelp})\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_CanEnableIme\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_CanEnableIme_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanEnableIme</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <span class=\"xref\">stem.Windows.Forms.Control.ImeMode*</span> property can be set to an active value, to enable IME support.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual bool CanEnableIme { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> in all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Derived classes can override this property to return <code>false</code> if IME is not supported.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_CanFocus\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_CanFocus_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanFocus</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the control can receive focus.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool CanFocus { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the control can receive focus; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In order for a control to receive input focus, the control must have a handle assigned to it, and the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Visible_\" data-linktype=\"relative-path\">Visible</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Enabled_\" data-linktype=\"relative-path\">Enabled</a> properties must both be set to <code>true</code> for both the control and all its parent controls, and the control must be a form or the control&#39;s outermost parent must be a form.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets focus to the specified <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a>, if it can receive focus.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.ControlMembers6#1\">   public:\n      void ControlSetFocus( Control^ control )\n      {\n         \n         // Set focus to the control, if it can receive focus.\n         if ( control-&gt;CanFocus )\n         {\n            control-&gt;Focus();\n         }\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.ControlMembers6#1\">public void ControlSetFocus(Control control)\n{\n   // Set focus to the control, if it can receive focus.\n   if(control.CanFocus)\n   {\n      control.Focus();\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.ControlMembers6#1\">Public Sub ControlSetFocus(control As Control)\n   &#39; Set focus to the control, if it can receive focus.\n   If control.CanFocus Then\n      control.Focus()\n   End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_CanRaiseEvents\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_CanRaiseEvents_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanRaiseEvents</div>        \r\n          </div>\r\n    \r\n            <p>Determines if events can be raised on the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override bool CanRaiseEvents { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the control is hosted as an ActiveX control whose events are not frozen; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If this control is being hosted as an ActiveX control, this property will return <code>false</code> if the ActiveX control has its events frozen.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_CanSelect\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_CanSelect_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanSelect</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the control can be selected.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool CanSelect { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the control can be selected; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property returns <code>true</code> if the <code>Selectable</code> value of <a class=\"xref\" href=\"system.windows.forms.controlstyles\" data-linktype=\"relative-path\">System.Windows.Forms.ControlStyles</a> is set to <code>true</code>, is contained in another control, the control itself is visible and enabled, and all its parent controls are visible and enabled.  </p>\n<p> The Windows Forms controls in the following list are not selectable and will return a value of <code>false</code> for the CanSelect property. Controls derived from these controls are also not selectable.  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.windows.forms.panel\" data-linktype=\"relative-path\">Panel</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.groupbox\" data-linktype=\"relative-path\">GroupBox</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.picturebox\" data-linktype=\"relative-path\">PictureBox</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.progressbar\" data-linktype=\"relative-path\">ProgressBar</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.splitter\" data-linktype=\"relative-path\">Splitter</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.label\" data-linktype=\"relative-path\">Label</a>  \n</li>\n<li><p><a class=\"xref\" href=\"system.windows.forms.linklabel\" data-linktype=\"relative-path\">LinkLabel</a> (when there is no link present in the control)</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example selects the specified <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a>, if it is selectable.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.ControlMembers6#2\">   public:\n      void ControlSelect( Control^ control )\n      {\n         \n         // Select the control, if it can be selected.\n         if ( control-&gt;CanSelect )\n         {\n            control-&gt;Select(  );\n         }\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.ControlMembers6#2\">public void ControlSelect(Control control)\n{\n   // Select the control, if it can be selected.\n   if(control.CanSelect)\n   {\n      control.Select();\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.ControlMembers6#2\">Public Sub ControlSelect(control As Control)\n   &#39; Select the control, if it can be selected.\n   If control.CanSelect Then\n      control.Select()\n   End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Capture\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Capture_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Capture</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the control has captured the mouse.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Capture { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the control has captured the mouse; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When a control has captured the mouse, it receives mouse input whether or not the cursor is within its borders. The mouse is typically only captured during drag operations.  </p>\n<p> Only the foreground window can capture the mouse. When a background window attempts to do so, the window receives messages only for mouse events that occur when the mouse cursor is within the visible portion of the window. Also, even if the foreground window has captured the mouse, the user can still click another window, bringing it to the foreground.  </p>\n<p> When the mouse is captured, shortcut keys should not work.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the Capture property. To run this example paste the following code in a form containing a <a class=\"xref\" href=\"system.windows.forms.label\" data-linktype=\"relative-path\">Label</a> named label1 and two <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> controls named listbox1 and listbox2. Ensure the form and controls&#39; <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> event is associated with the method in this example.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.ControlCapture#1\">    &#39;This method handles the mouse down event for all the controls on the form.  When a control has\n    &#39;captured the mouse, the control&#39;s name will be output on label1.\n    Private Sub Control_MouseDown(ByVal sender As System.Object, _\n        ByVal e As System.Windows.Forms.MouseEventArgs) Handles MyBase.MouseDown, _\n        label1.MouseDown, listbox1.MouseDown, listbox2.MouseDown\n        Dim control As Control = CType(sender, Control)\n        If (control.Capture) Then\n            label1.Text = control.Name &amp; &quot; has captured the mouse&quot;\n        End If\n    End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.ControlCapture#1\">   // This method handles the mouse down event for all the controls on the form.  \n   // When a control has captured the mouse\n   // the control&#39;s name will be output on label1.\n   void Control_MouseDown( System::Object^ sender,\n      System::Windows::Forms::MouseEventArgs^ /*e*/ )\n   {\n      Control^ control = (Control^)(sender);\n      if ( control-&gt;Capture )\n      {\n         label1-&gt;Text = control-&gt;Name + &quot; has captured the mouse&quot;;\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.ControlCapture#1\">\t// This method handles the mouse down event for all the controls on the form.  \n\t// When a control has captured the mouse\n\t// the control&#39;s name will be output on label1.\n\tprivate void Control_MouseDown(System.Object sender, \n\t\tSystem.Windows.Forms.MouseEventArgs e)\n\t{\n\t\tControl control = (Control) sender;\n\t\tif (control.Capture)\n\t\t{\n\t\t\tlabel1.Text = control.Name+&quot; has captured the mouse&quot;;\n\t\t}\n\t}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_CausesValidation\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_CausesValidation_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CausesValidation</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the control causes validation to be performed on any controls that require validation when it receives focus.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool CausesValidation { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the control causes validation to be performed on any controls requiring validation when it receives focus; otherwise, <code>false</code>. The default is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the CausesValidation property is set to <code>false</code>, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validating\" data-linktype=\"relative-path\">Validating</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validated\" data-linktype=\"relative-path\">Validated</a> events are suppressed.  </p>\n<p> The CausesValidation property value is typically set to <code>false</code> for controls such as a Help button.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the derived class<a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> and validates an e-mail address that the user enters. If the e-mail address is not in the standard format (containing &quot;@&quot; and &quot;.&quot;), the validation fails, an <a class=\"xref\" href=\"system.windows.forms.errorprovider\" data-linktype=\"relative-path\">ErrorProvider</a> icon is displayed, and the event is canceled. One of the buttons on the form has its CausesValidation property set to <code>false</code>. Clicking or setting focus to this button does not trigger validation. This example requires that a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>, an <a class=\"xref\" href=\"system.windows.forms.errorprovider\" data-linktype=\"relative-path\">ErrorProvider</a> control, and a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> have been created on a form.  </p>\n<pre><code class=\"lang-cs\" name=\"Control.Validating#2\">public Form1()\n{\n    InitializeComponent();\n    //Set button2 to be non-validating.\n    this.button2.CausesValidation = false;\n}\n\n\nprivate void textBox1_Validating(object sender, \n \t\t\t\tSystem.ComponentModel.CancelEventArgs e)\n{\n   string errorMsg;\n   if(!ValidEmailAddress(textBox1.Text, out errorMsg))\n   {\n      // Cancel the event and select the text to be corrected by the user.\n      e.Cancel = true;\n      textBox1.Select(0, textBox1.Text.Length);\n\n      // Set the ErrorProvider error with the text to display. \n      this.errorProvider1.SetError(textBox1, errorMsg);\n   }\n}\n\nprivate void textBox1_Validated(object sender, System.EventArgs e)\n{\n   // If all conditions have been met, clear the ErrorProvider of errors.\n   errorProvider1.SetError(textBox1, &quot;&quot;);\n}\npublic bool ValidEmailAddress(string emailAddress, out string errorMessage)\n{\n   // Confirm that the e-mail address string is not empty.\n   if(emailAddress.Length == 0)\n   {\n      errorMessage = &quot;e-mail address is required.&quot;;\n         return false;\n   }\n\n   // Confirm that there is an &quot;@&quot; and a &quot;.&quot; in the e-mail address, and in the correct order.\n   if(emailAddress.IndexOf(&quot;@&quot;) &gt; -1)\n   {\n      if(emailAddress.IndexOf(&quot;.&quot;, emailAddress.IndexOf(&quot;@&quot;) ) &gt; emailAddress.IndexOf(&quot;@&quot;) )\n      {\n         errorMessage = &quot;&quot;;\n         return true;\n      }\n   }\n   \n   errorMessage = &quot;e-mail address must be valid e-mail address format.<br>&quot; +\n      &quot;For example &#39;someone@example.com&#39; &quot;;\n      return false;\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Control.Validating#2\">public:\n   Form1()\n   {\n      InitializeComponent();    \n      //Set button2 to be non-validating.\n      this-&gt;button2-&gt;CausesValidation = false;\n   }\n\nprivate:\n   void textBox1_Validating( Object^ sender, System::ComponentModel::CancelEventArgs^ e )\n   {\n      String^ errorMsg;\n      if ( !ValidEmailAddress( textBox1-&gt;Text, &amp;errorMsg ) )\n      {\n         // Cancel the event and select the text to be corrected by the user.\n         e-&gt;Cancel = true;\n         textBox1-&gt;Select( 0, textBox1-&gt;Text-&gt;Length );\n         \n         // Set the ErrorProvider error with the text to display.\n         this-&gt;errorProvider1-&gt;SetError( textBox1, errorMsg );\n      }\n   }\n\n   void textBox1_Validated( Object^ sender, System::EventArgs^ e )\n   {\n      // If all conditions have been met, clear the ErrorProvider of errors.\n      errorProvider1-&gt;SetError( textBox1, &quot;&quot; );\n   }\n\npublic:\n   bool ValidEmailAddress( String^ emailAddress, [Out]interior_ptr&lt;String^&gt; errorMessage )\n   {\n      // Confirm that the e-mail address String* is not empty.\n      if ( emailAddress-&gt;Length == 0 )\n      {\n         *errorMessage = &quot;e-mail address is required.&quot;;\n         return false;\n      }\n\n      // Confirm that there is an &quot;@&quot; and a &quot;.&quot; in the e-mail address, and in the correct order.\n      if ( emailAddress-&gt;IndexOf( &quot;@&quot; ) &gt; -1 )\n      {\n         if ( emailAddress-&gt;IndexOf( &quot;.&quot;, emailAddress-&gt;IndexOf( &quot;@&quot; ) ) &gt; emailAddress-&gt;IndexOf( &quot;@&quot; ) )\n         {\n            *errorMessage = &quot;&quot;;\n            return true;\n         }\n      }\n\n      *errorMessage = &quot;e-mail address must be valid e-mail address format.<br>&quot; +\n         &quot;For example &#39;someone@example.com&#39; &quot;;\n      return false;\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Control.Validating#2\">    Public Sub New()\n        MyBase.New()\n\n        InitializeComponent()\n        &#39;Set button2 to be non-validating.\n        Me.button2.CausesValidation = False\n    End Sub\n\n   Private Function ValidEmailAddress(ByVal emailAddress As String, ByRef errorMessage As String) As Boolean\n      &#39; Confirm there is text in the control.\n      If textBox1.Text.Length = 0 Then\n         errorMessage = &quot;E-mail address is required.&quot;\n         Return False\n\n      End If\n\n      &#39; Confirm that there is an &quot;@&quot; and a &quot;.&quot; in the e-mail address, and in the correct order.\n      If emailAddress.IndexOf(&quot;@&quot;) &gt; -1 Then\n         If (emailAddress.IndexOf(&quot;.&quot;, emailAddress.IndexOf(&quot;@&quot;)) &gt; emailAddress.IndexOf(&quot;@&quot;)) Then\n            errorMessage = &quot;&quot;\n            Return True\n         End If\n      End If\n\n      errorMessage = &quot;E-mail address must be valid e-mail address format.&quot; + ControlChars.Cr + _\n        &quot;For example &#39;someone@example.com&#39; &quot;\n      Return False\nEnd Function\n\n   Private Sub textBox1_Validating(ByVal sender As Object, _\n   ByVal e As System.ComponentModel.CancelEventArgs) Handles textBox1.Validating\n\n      Dim errorMsg As String\n      If Not ValidEmailAddress(textBox1.Text, errorMsg) Then\n         &#39; Cancel the event and select the text to be corrected by the user.\n         e.Cancel = True\n         textBox1.Select(0, textBox1.Text.Length)\n\n         &#39; Set the ErrorProvider error with the text to display. \n         Me.errorProvider1.SetError(textBox1, errorMsg)\n      End If\n   End Sub\n\n\n   Private Sub textBox1_Validated(ByVal sender As Object, _\n   ByVal e As System.EventArgs) Handles textBox1.Validated\n      &#39; If all conditions have been met, clear the error provider of errors.\n      errorProvider1.SetError(textBox1, &quot;&quot;)\n   End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_CheckForIllegalCrossThreadCalls\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_CheckForIllegalCrossThreadCalls_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CheckForIllegalCrossThreadCalls</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether to catch calls on the wrong thread that access a control&#39;s <span class=\"xref\">stem.Windows.Forms.Control.Handle*</span> property when an application is being debugged.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool CheckForIllegalCrossThreadCalls { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if calls on the wrong thread are caught; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When a thread other than the creating thread of a control tries to access one of that control&#39;s methods or properties, it often leads to unpredictable results. A common invalid thread activity is a call on the wrong thread that accesses the control&#39;s <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Handle_\" data-linktype=\"relative-path\">Handle</a> property. Set CheckForIllegalCrossThreadCalls to <code>true</code> to find and diagnose this thread activity more easily while debugging.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ClientRectangle\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_ClientRectangle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ClientRectangle</div>        \r\n          </div>\r\n    \r\n            <p>Gets the rectangle that represents the client area of the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Drawing.Rectangle ClientRectangle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a> that represents the client area of the control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The client area of a control is the bounds of the control, minus the nonclient elements such as scroll bars, borders, title bars, and menus.  </p>\n<p> Because client coordinates are relative to the upper-left corner of the client area of the control, the coordinates of the upper-left corner of the rectangle returned by this property are (0,0). You can use this property to obtain the size and coordinates of the client area of the control for tasks such as drawing on the surface of the control.  </p>\n<p> For more information about drawing on controls, see <a href=\"../Topic/Rendering%20a%20Windows%20Forms%20Control.md\" data-linktype=\"relative-path\">Rendering a Windows Forms Control</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example enables auto-scrolling for a form, resizes the form, and ensures that a button remains visible after the form is resized. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> named <code>button2</code> on it.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control Member5#2\">private:\n   void ResizeForm()\n   {\n      \n      // Enable auto-scrolling for the form.\n      this-&gt;AutoScroll = true;\n      \n      // Resize the form.\n      Rectangle r = this-&gt;ClientRectangle;\n      \n      // Subtract 100 pixels from each side of the Rectangle.\n      r.Inflate(  -100, -100 );\n      this-&gt;Bounds = this-&gt;RectangleToScreen( r );\n      \n      // Make sure button2 is visible.\n      this-&gt;ScrollControlIntoView( button2 );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.Control Member5#2\">private void ResizeForm()\n{\n   // Enable auto-scrolling for the form.\n   this.AutoScroll = true;\n\n   // Resize the form.\n   Rectangle r = this.ClientRectangle;\n   // Subtract 100 pixels from each side of the Rectangle.\n   r.Inflate(-100, -100);\n   this.Bounds = this.RectangleToScreen(r);\n\n   // Make sure button2 is visible.\n   this.ScrollControlIntoView(button2);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control Member5#2\">Private Sub ResizeForm()\n   &#39; Enable auto-scrolling for the form.\n   Me.AutoScroll = True\n   \n   &#39; Resize the form.\n   Dim r As Rectangle = Me.ClientRectangle\n   &#39; Subtract 100 pixels from each side of the Rectangle.\n   r.Inflate(- 100, - 100)\n   Me.Bounds = Me.RectangleToScreen(r)\n   \n   &#39; Make sure button2 is visible.\n   Me.ScrollControlIntoView(button2)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ClientSize\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_ClientSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ClientSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the height and width of the client area of the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Drawing.Size ClientSize { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> that represents the dimensions of the client area of the control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The client area of a control is the bounds of the control, minus the nonclient elements such as scroll bars, borders, title bars, and menus. The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SetClientSizeCore_\" data-linktype=\"relative-path\">SetClientSizeCore</a> method is called to set the ClientSizeproperty. The ClientSize property is not always changed through its <code>set</code> method so you should override the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SetClientSizeCore_\" data-linktype=\"relative-path\">SetClientSizeCore</a> method to ensure that your code is executed when the ClientSize property is set.  </p>\n<p> The <a class=\"xref\" href=\"system.drawing.size#System_Drawing_Size_Width_\" data-linktype=\"relative-path\">Width</a> and <a class=\"xref\" href=\"system.drawing.size#System_Drawing_Size_Height_\" data-linktype=\"relative-path\">Height</a> properties represent the width and height of the client area of the control. You can use this property to obtain the size of the client area of the control for tasks such as drawing on the surface of the control.  </p>\n<p> For more information about drawing on controls, see <a href=\"../Topic/Rendering%20a%20Windows%20Forms%20Control.md\" data-linktype=\"relative-path\">Rendering a Windows Forms Control</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You cannot bind application settings to this property. For more information on application settings, see <a href=\"../Topic/Application%20Settings%20Overview.md\" data-linktype=\"relative-path\">Application Settings Overview</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example resizes the specified control so the control will accommodate its formatted text. The formatted text is the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property with the control&#39;s assigned <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Font_\" data-linktype=\"relative-path\">Font</a> applied to the text. The <code>AutoSizeControl</code> method in this example also has a <code>textPadding</code> parameter that represents the padding to apply to all edges of the control. To make the padding appear equal, align the text with the <a class=\"xref\" href=\"system.drawing.contentalignment\" data-linktype=\"relative-path\">System.Drawing.ContentAlignment</a> value, if your control supports it.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control Member5#1\">private:\n   void AutoSizeControl( Control^ control, int textPadding )\n   {\n      \n      // Create a Graphics object for the Control.\n      Graphics^ g = control-&gt;CreateGraphics();\n      \n      // Get the Size needed to accommodate the formatted Text.\n      System::Drawing::Size preferredSize = g-&gt;MeasureString( control-&gt;Text, control-&gt;Font ).ToSize();\n      \n      // Pad the text and resize the control.\n      control-&gt;ClientSize = System::Drawing::Size( preferredSize.Width + (textPadding * 2), preferredSize.Height + (textPadding * 2) );\n      \n      // Clean up the Graphics object.\n      delete g;\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.Control Member5#1\">private void AutoSizeControl(Control control, int textPadding)\n{\n   // Create a Graphics object for the Control.\n   Graphics g = control.CreateGraphics();\n\n   // Get the Size needed to accommodate the formatted Text.\n   Size preferredSize = g.MeasureString(\n      control.Text, control.Font).ToSize();\n\n   // Pad the text and resize the control.\n   control.ClientSize = new Size(\n      preferredSize.Width + (textPadding * 2), \n      preferredSize.Height+(textPadding * 2) );\n\n   // Clean up the Graphics object.\n   g.Dispose();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control Member5#1\">Private Sub AutoSizeControl(control As Control, textPadding As Integer)\n   &#39; Create a Graphics object for the Control.\n   Dim g As Graphics = control.CreateGraphics()\n   \n   &#39; Get the Size needed to accommodate the formatted Text.\n   Dim preferredSize As Size = g.MeasureString( _\n     control.Text, control.Font).ToSize()\n   \n   &#39; Pad the text and resize the control.\n   control.ClientSize = New Size( _\n     preferredSize.Width + textPadding * 2, _\n     preferredSize.Height + textPadding * 2)\n   \n   &#39; Clean up the Graphics object.\n   g.Dispose()\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_CompanyName\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_CompanyName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CompanyName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the name of the company or creator of the application containing the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string CompanyName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The company name or creator of the application containing the control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The CompanyName property is a read-only property. To change the value of this property, set the <a class=\"xref\" href=\"system.reflection.assemblycompanyattribute#System_Reflection_AssemblyCompanyAttribute_Company_\" data-linktype=\"relative-path\">Company</a> property value of the <a class=\"xref\" href=\"system.reflection.assemblycompanyattribute\" data-linktype=\"relative-path\">AssemblyCompanyAttribute</a>. The following line of C# code sets the CompanyName property.  </p>\n<pre><code class=\"lang-c#\">[assembly: AssemblyCompany(&quot;Microsoft&quot;)]\n</code></pre><div class=\"NOTE\"><h5>Note</h5><p> It is strongly recommended that you provide the company name, product name, and product version for your app.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays information about the application in a <a class=\"xref\" href=\"system.windows.forms.label\" data-linktype=\"relative-path\">Label</a> contained by a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>. This example requires that the CompanyName, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ProductName_\" data-linktype=\"relative-path\">ProductName</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ProductVersion_\" data-linktype=\"relative-path\">ProductVersion</a> have been set.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control Properties3#1\">private void AboutDialog_Load(object sender, EventArgs e)\n{\n   // Display the application information in the label.\n   this.labelVersionInfo.Text = \n      this.CompanyName + &quot;  &quot; + \n      this.ProductName + &quot;  Version: &quot; +\n      this.ProductVersion;  \n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control Properties3#1\">      void AboutDialog_Load( Object^ /*sender*/, EventArgs^ /*e*/ )\n      {\n         // Display the application information in the label.\n         this-&gt;labelVersionInfo-&gt;Text = String::Format(  &quot;{0} {1} Version: {2}&quot;, this-&gt;CompanyName, this-&gt;ProductName, this-&gt;ProductVersion );\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control Properties3#1\">Private Sub AboutDialog_Load(sender As Object, e As EventArgs) Handles MyBase.Load\n   &#39; Display the application information in the label.\n   Me.labelVersionInfo.Text = _\n      Me.CompanyName + &quot;  &quot; + _\n      Me.ProductName + &quot;  Version: &quot; + _\n      Me.ProductVersion\n   End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ContainsFocus\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_ContainsFocus_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContainsFocus</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the control, or one of its child controls, currently has the input focus.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool ContainsFocus { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the control or one of its child controls currently has the input focus; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use this property to determine whether a control or any of the controls contained within it has the input focus. To determine whether the control has focus, regardless of whether any of its child controls have focus, use the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Focused_\" data-linktype=\"relative-path\">Focused</a> property. To give a control the input focus, use the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Focus_\" data-linktype=\"relative-path\">Focus</a> or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Select_\" data-linktype=\"relative-path\">Select</a> methods.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ContextMenu\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_ContextMenu_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContextMenu</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the shortcut menu associated with the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Windows.Forms.ContextMenu ContextMenu { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.contextmenu\" data-linktype=\"relative-path\">ContextMenu</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.contextmenu\" data-linktype=\"relative-path\">ContextMenu</a> that represents the shortcut menu associated with the control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use a shortcut menus to give context-specific menu options to users when they right-click on the control.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the <a class=\"xref\" href=\"system.windows.forms.contextmenu\" data-linktype=\"relative-path\">ContextMenu</a> assigned to a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> when the right mouse button is clicked and released. This code requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> on it. It is also required that the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> has a <a class=\"xref\" href=\"system.windows.forms.contextmenu\" data-linktype=\"relative-path\">ContextMenu</a> assigned to its ContextMenu property.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control Properties2#5\">private void treeView1_MouseUp(object sender, MouseEventArgs e)\n{\n   // If the right mouse button was clicked and released,\n   // display the shortcut menu assigned to the TreeView. \n   if(e.Button == MouseButtons.Right)\n   {\n      treeView1.ContextMenu.Show(treeView1, new Point(e.X, e.Y) );      \n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control Properties2#5\">      Private Sub treeView1_MouseUp(sender As Object, _\n        e As MouseEventArgs) Handles treeView1.MouseUp\n         &#39; If the right mouse button was clicked and released,\n         &#39; display the shortcut menu assigned to the TreeView. \n         If e.Button = MouseButtons.Right Then\n            treeView1.ContextMenu.Show(treeView1, New Point(e.X, e.Y))\n         End If\n      End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control Properties2#5\">private:\n   void treeView1_MouseUp( Object^ /*sender*/, MouseEventArgs^ e )\n   {\n      // If the right mouse button was clicked and released,\n      // display the shortcut menu assigned to the TreeView.\n      if ( e-&gt;Button == ::MouseButtons::Right )\n      {\n         treeView1-&gt;ContextMenu-&gt;Show( treeView1, Point(e-&gt;X,e-&gt;Y) );\n      }\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ContextMenuStrip\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_ContextMenuStrip_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContextMenuStrip</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.windows.forms.contextmenustrip\" data-linktype=\"relative-path\">ContextMenuStrip</a> associated with this control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Windows.Forms.ContextMenuStrip ContextMenuStrip { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.contextmenustrip\" data-linktype=\"relative-path\">ContextMenuStrip</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.contextmenustrip\" data-linktype=\"relative-path\">ContextMenuStrip</a> for this control, or <code>null</code> if there is no <a class=\"xref\" href=\"system.windows.forms.contextmenustrip\" data-linktype=\"relative-path\">ContextMenuStrip</a>. The default is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If a <a class=\"xref\" href=\"system.windows.forms.contextmenu\" data-linktype=\"relative-path\">ContextMenu</a> has also been assigned to the control, the <a class=\"xref\" href=\"system.windows.forms.contextmenu\" data-linktype=\"relative-path\">ContextMenu</a> takes precedence over the <a class=\"xref\" href=\"system.windows.forms.contextmenustrip\" data-linktype=\"relative-path\">ContextMenuStrip</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to add three <a class=\"xref\" href=\"system.windows.forms.toolstripmenuitem\" data-linktype=\"relative-path\">ToolStripMenuItem</a> objects to a <a class=\"xref\" href=\"system.windows.forms.contextmenustrip\" data-linktype=\"relative-path\">ContextMenuStrip</a>. In addition it demonstrates setting the ContextMenuStrip property of the form.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.Control.ContextMenuStrip#1\">Imports System\nImports System.Collections.Generic\nImports System.ComponentModel\nImports System.Data\nImports System.Drawing\nImports System.Text\nImports System.Windows.Forms\n\nPublic Class Form1\n   Inherits Form\n   Private contextMenuStrip1 As ContextMenuStrip\n   Private toolStripMenuItem1 As ToolStripMenuItem\n   Private toolStripMenuItem2 As ToolStripMenuItem\n   Private toolStripMenuItem3 As ToolStripMenuItem\n   Private components As IContainer\n   \n   \n   Public Sub New()\n      InitializeComponent()\n   End Sub\n   \n   &lt;STAThread()&gt;  _\n   Shared Sub Main()\n      Application.EnableVisualStyles()\n      Application.SetCompatibleTextRenderingDefault(False)\n      Application.Run(New Form1())\n   End Sub\n   \n   \n   Private Sub InitializeComponent()\n      Me.components = New System.ComponentModel.Container()\n      Me.contextMenuStrip1 = New System.Windows.Forms.ContextMenuStrip(Me.components)\n      Me.toolStripMenuItem1 = New System.Windows.Forms.ToolStripMenuItem()\n      Me.toolStripMenuItem2 = New System.Windows.Forms.ToolStripMenuItem()\n      Me.toolStripMenuItem3 = New System.Windows.Forms.ToolStripMenuItem()\n      Me.contextMenuStrip1.SuspendLayout()\n      Me.SuspendLayout()\n      &#39; \n      &#39; contextMenuStrip1\n      &#39; \n      Me.contextMenuStrip1.Items.AddRange(New System.Windows.Forms.ToolStripItem() {Me.toolStripMenuItem1, Me.toolStripMenuItem2, Me.toolStripMenuItem3})\n      Me.contextMenuStrip1.Name = &quot;contextMenuStrip1&quot;\n      Me.contextMenuStrip1.Size = New System.Drawing.Size(180, 70)\n      &#39; \n      &#39; toolStripMenuItem1\n      &#39; \n      Me.toolStripMenuItem1.Name = &quot;toolStripMenuItem1&quot;\n      Me.toolStripMenuItem1.Size = New System.Drawing.Size(179, 22)\n      Me.toolStripMenuItem1.Text = &quot;toolStripMenuItem1&quot;\n      &#39; \n      &#39; toolStripMenuItem2\n      &#39; \n      Me.toolStripMenuItem2.Name = &quot;toolStripMenuItem2&quot;\n      Me.toolStripMenuItem2.Size = New System.Drawing.Size(179, 22)\n      Me.toolStripMenuItem2.Text = &quot;toolStripMenuItem2&quot;\n      &#39; \n      &#39; toolStripMenuItem3\n      &#39; \n      Me.toolStripMenuItem3.Name = &quot;toolStripMenuItem3&quot;\n      Me.toolStripMenuItem3.Size = New System.Drawing.Size(179, 22)\n      Me.toolStripMenuItem3.Text = &quot;toolStripMenuItem3&quot;\n      &#39; \n      &#39; Form1\n      &#39; \n      Me.ClientSize = New System.Drawing.Size(292, 273)\n      Me.ContextMenuStrip = Me.contextMenuStrip1\n      Me.Name = &quot;Form1&quot;\n      Me.contextMenuStrip1.ResumeLayout(False)\n      Me.ResumeLayout(False)\n   End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.Control.ContextMenuStrip#1\">using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Text;\nusing System.Windows.Forms;\n\npublic class Form1 : Form\n{\n    private ContextMenuStrip contextMenuStrip1;\n    private ToolStripMenuItem toolStripMenuItem1;\n    private ToolStripMenuItem toolStripMenuItem2;\n    private ToolStripMenuItem toolStripMenuItem3;\n    private IContainer components;\n\n    public Form1()\n    {\n        InitializeComponent();\n    }\n    [STAThread]\n    static void Main()\n    {\n        Application.EnableVisualStyles();\n        Application.SetCompatibleTextRenderingDefault(false);\n        Application.Run(new Form1());\n    }\n\n    private void InitializeComponent()\n    {\n        this.components = new System.ComponentModel.Container();\n        this.contextMenuStrip1 = new System.Windows.Forms.ContextMenuStrip(this.components);\n        this.toolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem();\n        this.toolStripMenuItem2 = new System.Windows.Forms.ToolStripMenuItem();\n        this.toolStripMenuItem3 = new System.Windows.Forms.ToolStripMenuItem();\n        this.contextMenuStrip1.SuspendLayout();\n        this.SuspendLayout();\n        // \n        // contextMenuStrip1\n        // \n        this.contextMenuStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {\n            this.toolStripMenuItem1,\n            this.toolStripMenuItem2,\n            this.toolStripMenuItem3});\n        this.contextMenuStrip1.Name = &quot;contextMenuStrip1&quot;;\n        this.contextMenuStrip1.Size = new System.Drawing.Size(180, 70);\n        // \n        // toolStripMenuItem1\n        // \n        this.toolStripMenuItem1.Name = &quot;toolStripMenuItem1&quot;;\n        this.toolStripMenuItem1.Size = new System.Drawing.Size(179, 22);\n        this.toolStripMenuItem1.Text = &quot;toolStripMenuItem1&quot;;\n        // \n        // toolStripMenuItem2\n        // \n        this.toolStripMenuItem2.Name = &quot;toolStripMenuItem2&quot;;\n        this.toolStripMenuItem2.Size = new System.Drawing.Size(179, 22);\n        this.toolStripMenuItem2.Text = &quot;toolStripMenuItem2&quot;;\n        // \n        // toolStripMenuItem3\n        // \n        this.toolStripMenuItem3.Name = &quot;toolStripMenuItem3&quot;;\n        this.toolStripMenuItem3.Size = new System.Drawing.Size(179, 22);\n        this.toolStripMenuItem3.Text = &quot;toolStripMenuItem3&quot;;\n        // \n        // Form1\n        // \n        this.ClientSize = new System.Drawing.Size(292, 273);\n        this.ContextMenuStrip = this.contextMenuStrip1;\n        this.Name = &quot;Form1&quot;;\n        this.contextMenuStrip1.ResumeLayout(false);\n        this.ResumeLayout(false);\n\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Controls\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Controls_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Controls</div>        \r\n          </div>\r\n    \r\n            <p>Gets the collection of controls contained within the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.Control.ControlCollection Controls { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.control.controlcollection\" data-linktype=\"relative-path\">Control+ControlCollection</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.control.controlcollection\" data-linktype=\"relative-path\">Control+ControlCollection</a> representing the collection of controls contained within the control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> can act as a parent to a collection of controls. For example, when several controls are added to a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>, each of the controls is a member of the <a class=\"xref\" href=\"system.windows.forms.control.controlcollection\" data-linktype=\"relative-path\">Control+ControlCollection</a> assigned to the Controls property of the form, which is derived from the <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class.  </p>\n<p> You can manipulate the controls in the <a class=\"xref\" href=\"system.windows.forms.control.controlcollection\" data-linktype=\"relative-path\">Control+ControlCollection</a> assigned to the Controls property by using the methods available in the <a class=\"xref\" href=\"system.windows.forms.control.controlcollection\" data-linktype=\"relative-path\">Control+ControlCollection</a> class.  </p>\n<p> When adding several controls to a parent control, it is recommended that you call the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SuspendLayout_\" data-linktype=\"relative-path\">SuspendLayout</a> method before initializing the controls to be added. After adding the controls to the parent control, call the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ResumeLayout_\" data-linktype=\"relative-path\">ResumeLayout</a> method. Doing so will increase the performance of applications with many controls.  </p>\n<p> Use the Controls property to iterate through all controls of a form, including nested controls. Use the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GetNextControl_\" data-linktype=\"relative-path\">GetNextControl</a> method to retrieve the previous or next child control in the tab order. Use the <a class=\"xref\" href=\"system.windows.forms.containercontrol#System_Windows_Forms_ContainerControl_ActiveControl_\" data-linktype=\"relative-path\">ActiveControl</a> property to get or set the active control of a container control.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example removes a <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> from the <a class=\"xref\" href=\"system.windows.forms.control.controlcollection\" data-linktype=\"relative-path\">Control+ControlCollection</a> of the derived class <a class=\"xref\" href=\"system.windows.forms.panel\" data-linktype=\"relative-path\">Panel</a> if it is a member of the collection. The example requires that you have created a <a class=\"xref\" href=\"system.windows.forms.panel\" data-linktype=\"relative-path\">Panel</a>, a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a>, and at least one <a class=\"xref\" href=\"system.windows.forms.radiobutton\" data-linktype=\"relative-path\">RadioButton</a> control on a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>. The <a class=\"xref\" href=\"system.windows.forms.radiobutton\" data-linktype=\"relative-path\">RadioButton</a> control(s) are added to the <a class=\"xref\" href=\"system.windows.forms.panel\" data-linktype=\"relative-path\">Panel</a> control, and the <a class=\"xref\" href=\"system.windows.forms.panel\" data-linktype=\"relative-path\">Panel</a> control added to the <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>. When the button is clicked, the radio button named <code>removeButton</code> is removed from the <a class=\"xref\" href=\"system.windows.forms.control.controlcollection\" data-linktype=\"relative-path\">Control+ControlCollection</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"ControlCollection#4\">// Remove the RadioButton control if it exists.\nprivate void removeButton_Click(object sender, System.EventArgs e)\n{\n   if(panel1.Controls.Contains(removeButton))\n   {\n      panel1.Controls.Remove(removeButton);\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"ControlCollection#4\">    &#39; Remove the RadioButton control if it exists.\n    Private Sub RemoveButton_Click(ByVal sender As System.Object, _\n\t\tByVal e As System.EventArgs) Handles RemoveButton.Click\n        If Panel1.Controls.Contains(RemoveButton) Then\n            Panel1.Controls.Remove(RemoveButton)\n        End If\n    End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"ControlCollection#4\">      // Remove the RadioButton control if it exists.\n   private:\n      void removeButton_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n      {\n         if ( panel1-&gt;Controls-&gt;Contains( removeButton ) )\n         {\n            panel1-&gt;Controls-&gt;Remove( removeButton );\n         }\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Created\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Created_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Created</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the control has been created.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Created { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the control has been created; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Created property returns <code>true</code> if the <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> was successfully created even though the control&#39;s handle might not have been created or recreated yet.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_CreateParams\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_CreateParams_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateParams</div>        \r\n          </div>\r\n    \r\n            <p>Gets the required creation parameters when the control handle is created.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual System.Windows.Forms.CreateParams CreateParams { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.createparams\" data-linktype=\"relative-path\">CreateParams</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.createparams\" data-linktype=\"relative-path\">CreateParams</a> that contains the required creation parameters when the handle to the control is created.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The CreateParams property should not be overridden and used to adjust the properties of your derived control. Properties such as the <a class=\"xref\" href=\"system.windows.forms.createparams#System_Windows_Forms_CreateParams_Caption_\" data-linktype=\"relative-path\">Caption</a>, <a class=\"xref\" href=\"system.windows.forms.createparams#System_Windows_Forms_CreateParams_Width_\" data-linktype=\"relative-path\">Width</a>, and <a class=\"xref\" href=\"system.windows.forms.createparams#System_Windows_Forms_CreateParams_Height_\" data-linktype=\"relative-path\">Height</a> should be set by the corresponding properties in your control such as <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Width_\" data-linktype=\"relative-path\">Width</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Height_\" data-linktype=\"relative-path\">Height</a>. The <a class=\"xref\" href=\"system.windows.forms.createparams\" data-linktype=\"relative-path\">CreateParams</a> should only be extended when you are wrapping a standard Windows control class or to set styles not provided by the Windows Forms namespace. For more information about creating control parameters, see the <code>CreateWindow</code> and <code>CreateWindowEx</code> functions and the <a href=\"http://msdn.microsoft.com/library/windows/desktop/ms632603.aspx\" data-linktype=\"external\">CREATESTRUCT</a>structure documentation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example extends the CreateParams property of a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> derived class. The <a class=\"xref\" href=\"system.windows.forms.createparams#System_Windows_Forms_CreateParams_Style_\" data-linktype=\"relative-path\">Style</a> property is changed, which causes the button to display an <a class=\"xref\" href=\"system.drawing.icon\" data-linktype=\"relative-path\">Icon</a> rather than an <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a>. This example requires that you have a class that inherits from the <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"CreateParams#3\">    protected override CreateParams CreateParams\n    {\n        get\n        {\n            new SecurityPermission(SecurityPermissionFlag.UnmanagedCode).Demand();\n\n            // Extend the CreateParams property of the Button class.\n            CreateParams cp = base.CreateParams;\n            // Update the button Style.\n            cp.Style |= 0x00000040; // BS_ICON value\n\n            return cp;\n        }\n    }\n</code></pre><pre><code class=\"lang-cpp\" name=\"CreateParams#3\">      virtual System::Windows::Forms::CreateParams^ get() override\n      {\n         \n         // Extend the CreateParams property of the Button class.\n         System::Windows::Forms::CreateParams^ cp = __super::CreateParams;\n\n         // Update the button Style.\n         cp-&gt;Style |= 0x00000040; // BS_ICON value\n         return cp;\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"CreateParams#3\">\n    Protected Overrides ReadOnly Property CreateParams() As System.Windows.Forms.CreateParams\n        Get\n            Dim SecPerm As New SecurityPermission(SecurityPermissionFlag.UnmanagedCode)\n            SecPerm.Demand()\n\n            &#39; Extend the CreateParams property of the Button class.\n            Dim cp As System.Windows.Forms.CreateParams = MyBase.CreateParams\n            &#39; Update the button Style.\n            cp.Style = cp.Style Or &amp;H40 &#39; BS_ICON value\n\n            Return cp\n        End Get\n    End Property\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Cursor\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Cursor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Cursor</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the cursor that is displayed when the mouse pointer is over the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Windows.Forms.Cursor Cursor { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.cursor\" data-linktype=\"relative-path\">Cursor</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.cursor\" data-linktype=\"relative-path\">Cursor</a> that represents the cursor to display when the mouse pointer is over the control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Assign a <a class=\"xref\" href=\"system.windows.forms.cursor\" data-linktype=\"relative-path\">Cursor</a> to the Cursor property of the control to change the cursor displayed when the mouse pointer is over the control. To temporarily change the mouse cursor for all controls on your application set the <a class=\"xref\" href=\"system.windows.forms.cursor#System_Windows_Forms_Cursor_Current_\" data-linktype=\"relative-path\">Current</a> property. Typically you would set the <a class=\"xref\" href=\"system.windows.forms.cursor#System_Windows_Forms_Cursor_Current_\" data-linktype=\"relative-path\">Current</a> property to a wait cursor when populating a <a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a> or saving or loading a file.  </p>\n<p> The Cursor property is an ambient property. An ambient property is a control property that, if not set, is retrieved from the parent control. For example, a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> will have the same <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BackColor_\" data-linktype=\"relative-path\">BackColor</a> as its parent <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> by default. For more information about ambient properties, see the <a class=\"xref\" href=\"system.windows.forms.ambientproperties\" data-linktype=\"relative-path\">AmbientProperties</a> class or the <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class overview.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example fills a <a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a> with the user&#39;s available logical drives. The example also sets the combo box&#39;s <a class=\"xref\" href=\"system.windows.forms.cursor\" data-linktype=\"relative-path\">Cursor</a> property so the <a class=\"xref\" href=\"system.windows.forms.cursors#System_Windows_Forms_Cursors_Hand_\" data-linktype=\"relative-path\">Hand</a> cursor is displayed when the mouse pointer is over the drop-down button. This code requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a <a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a> on it.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control Properties2#1\">private void Form1_Load(object sender, EventArgs e)\n{\n   // Display the hand cursor when the mouse pointer\n   // is over the combo box drop-down button. \n   comboBox1.Cursor = Cursors.Hand;\n\n   // Fill the combo box with all the logical \n   // drives available to the user.\n   try\n   {\n      foreach(string logicalDrive in Environment.GetLogicalDrives() )\n      {\n         comboBox1.Items.Add(logicalDrive);\n      }\n   }\n   catch(Exception ex)\n   {\n      MessageBox.Show(ex.Message);\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control Properties2#1\">      Private Sub Form1_Load(sender As Object, _\n        e As EventArgs) Handles MyBase.Load\n         &#39; Display the hand cursor when the mouse pointer\n         &#39; is over the combo box drop-down button. \n         comboBox1.Cursor = Cursors.Hand\n         \n         &#39; Fill the combo box with all the logical \n         &#39; drives available to the user. \n         Try\n            Dim logicalDrive As String\n            For Each logicalDrive In  Environment.GetLogicalDrives()\n               comboBox1.Items.Add(logicalDrive)\n            Next logicalDrive\n         Catch ex As Exception\n            MessageBox.Show(ex.Message)\n         End Try\n      End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control Properties2#1\">private:\n   void Form1_Load( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      // Display the hand cursor when the mouse pointer\n      // is over the combo box drop-down button.\n      comboBox1-&gt;Cursor = Cursors::Hand;\n      \n      // Fill the combo box with all the logical\n      // drives available to the user.\n      try\n      {\n         IEnumerator^ myEnum = Environment::GetLogicalDrives()-&gt;GetEnumerator();\n         while ( myEnum-&gt;MoveNext() )\n         {\n            String^ logicalDrive = safe_cast&lt;String^&gt;(myEnum-&gt;Current);\n            comboBox1-&gt;Items-&gt;Add( logicalDrive );\n         }\n      }\n      catch ( Exception^ ex ) \n      {\n         MessageBox::Show( ex-&gt;Message );\n      }\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_DataBindings\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_DataBindings_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DataBindings</div>        \r\n          </div>\r\n    \r\n            <p>Gets the data bindings for the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.ControlBindingsCollection DataBindings { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.controlbindingscollection\" data-linktype=\"relative-path\">ControlBindingsCollection</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.controlbindingscollection\" data-linktype=\"relative-path\">ControlBindingsCollection</a> that contains the <a class=\"xref\" href=\"system.windows.forms.binding\" data-linktype=\"relative-path\">Binding</a> objects for the control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the DataBindings property to access the <a class=\"xref\" href=\"system.windows.forms.controlbindingscollection\" data-linktype=\"relative-path\">ControlBindingsCollection</a>. By adding <a class=\"xref\" href=\"system.windows.forms.binding\" data-linktype=\"relative-path\">Binding</a> objects to the collection, you can bind any property of a control to the property of an object.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example adds <a class=\"xref\" href=\"system.windows.forms.binding\" data-linktype=\"relative-path\">Binding</a> objects to the <a class=\"xref\" href=\"system.windows.forms.controlbindingscollection\" data-linktype=\"relative-path\">ControlBindingsCollection</a> of five controls: four <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> controls and a <a class=\"xref\" href=\"system.windows.forms.datetimepicker\" data-linktype=\"relative-path\">DateTimePicker</a> control. The <a class=\"xref\" href=\"system.windows.forms.controlbindingscollection\" data-linktype=\"relative-path\">ControlBindingsCollection</a> is accessed through the DataBindings property of the <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Control.DataBindings Example#1\">   void BindControls()\n   {\n      \n      /* Create two Binding objects for the first two TextBox \n         controls. The data-bound property for both controls \n         is the Text property. The data source is a DataSet \n         (ds). The data member is specified by a navigation \n         path in the form : TableName.ColumnName. */\n      textBox1-&gt;DataBindings-&gt;Add( gcnew Binding( &quot;Text&quot;,ds,&quot;customers.custName&quot; ) );\n      textBox2-&gt;DataBindings-&gt;Add( gcnew Binding( &quot;Text&quot;,ds,&quot;customers.custID&quot; ) );\n      \n      /* Bind the DateTimePicker control by adding a new Binding. \n         The data member of the DateTimePicker is specified by a \n         navigation path in the form: TableName.RelationName.ColumnName. */\n      DateTimePicker1-&gt;DataBindings-&gt;Add( gcnew Binding( &quot;Value&quot;,ds,&quot;customers.CustToOrders.OrderDate&quot; ) );\n      \n      /* Create a new Binding using the DataSet and a \n         navigation path(TableName.RelationName.ColumnName).\n         Add event delegates for the Parse and Format events to \n         the Binding object, and add the object to the third \n         TextBox control&#39;s BindingsCollection. The delegates \n         must be added before adding the Binding to the \n         collection; otherwise, no formatting occurs until \n         the Current object of the BindingManagerBase for \n         the data source changes. */\n      Binding^ b = gcnew Binding( &quot;Text&quot;,ds,&quot;customers.custToOrders.OrderAmount&quot; );\n      b-&gt;Parse += gcnew ConvertEventHandler( this, &amp;Form1::CurrencyStringToDecimal );\n      b-&gt;Format += gcnew ConvertEventHandler( this, &amp;Form1::DecimalToCurrencyString );\n      textBox3-&gt;DataBindings-&gt;Add( b );\n      \n      /*Bind the fourth TextBox to the Value of the \n         DateTimePicker control. This demonstrates how one control\n         can be bound to another.*/\n      textBox4-&gt;DataBindings-&gt;Add( &quot;Text&quot;, DateTimePicker1, &quot;Value&quot; );\n      BindingManagerBase^ bmText = this-&gt;BindingContext[ DateTimePicker1 ];\n      \n      /* Print the Type of the BindingManagerBase, which is \n         a PropertyManager because the data source\n         returns only a single property value. */\n      Console::WriteLine( bmText-&gt;GetType() );\n      \n      // Print the count of managed objects, which is 1.\n      Console::WriteLine( bmText-&gt;Count );\n      \n      // Get the BindingManagerBase for the Customers table. \n      bmCustomers = this-&gt;BindingContext[ds, &quot;Customers&quot;];\n      \n      /* Print the Type and count of the BindingManagerBase.\n         Because the data source inherits from IBindingList,\n         it is a RelatedCurrencyManager (derived from CurrencyManager). */\n      Console::WriteLine( bmCustomers-&gt;GetType() );\n      Console::WriteLine( bmCustomers-&gt;Count );\n      \n      /* Get the BindingManagerBase for the Orders of the current\n         customer using a navigation path: TableName.RelationName. */\n      bmOrders = this-&gt;BindingContext[ds, &quot;customers.CustToOrders&quot;];\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Control.DataBindings Example#1\">protected void BindControls()\n{\n   /* Create two Binding objects for the first two TextBox \n   controls. The data-bound property for both controls \n   is the Text property. The data source is a DataSet \n   (ds). The data member is specified by a navigation \n   path in the form : TableName.ColumnName. */\n   textBox1.DataBindings.Add(new Binding\n   (&quot;Text&quot;, ds, &quot;customers.custName&quot;));\n   textBox2.DataBindings.Add(new Binding\n   (&quot;Text&quot;, ds, &quot;customers.custID&quot;));\n      \n   /* Bind the DateTimePicker control by adding a new Binding. \n   The data member of the DateTimePicker is specified by a \n   navigation path in the form: TableName.RelationName.ColumnName. */\n   DateTimePicker1.DataBindings.Add(new \n   Binding(&quot;Value&quot;, ds, &quot;customers.CustToOrders.OrderDate&quot;));\n\n   /* Create a new Binding using the DataSet and a \n   navigation path(TableName.RelationName.ColumnName).\n   Add event delegates for the Parse and Format events to \n   the Binding object, and add the object to the third \n   TextBox control&#39;s BindingsCollection. The delegates \n   must be added before adding the Binding to the \n   collection; otherwise, no formatting occurs until \n   the Current object of the BindingManagerBase for \n   the data source changes. */\n   Binding b = new Binding\n   (&quot;Text&quot;, ds, &quot;customers.custToOrders.OrderAmount&quot;);\n   b.Parse += new ConvertEventHandler(CurrencyStringToDecimal);\n   b.Format += new ConvertEventHandler(DecimalToCurrencyString);\n   textBox3.DataBindings.Add(b);\n\n   /*Bind the fourth TextBox to the Value of the \n   DateTimePicker control. This demonstrates how one control\n   can be bound to another.*/\n   textBox4.DataBindings.Add(&quot;Text&quot;, DateTimePicker1,&quot;Value&quot;);\n   BindingManagerBase bmText = this.BindingContext[\n   DateTimePicker1];\n\n   /* Print the Type of the BindingManagerBase, which is \n   a PropertyManager because the data source\n   returns only a single property value. */\n   Console.WriteLine(bmText.GetType().ToString());\n   // Print the count of managed objects, which is 1.\n   Console.WriteLine(bmText.Count);\n\n   // Get the BindingManagerBase for the Customers table. \n   bmCustomers = this.BindingContext [ds, &quot;Customers&quot;];\n   /* Print the Type and count of the BindingManagerBase.\n   Because the data source inherits from IBindingList,\n   it is a RelatedCurrencyManager (derived from CurrencyManager). */\n   Console.WriteLine(bmCustomers.GetType().ToString());\n   Console.WriteLine(bmCustomers.Count);\n   \n   /* Get the BindingManagerBase for the Orders of the current\n   customer using a navigation path: TableName.RelationName. */ \n   bmOrders = this.BindingContext[ds, &quot;customers.CustToOrders&quot;];\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Control.DataBindings Example#1\">    Protected Sub BindControls()\n        &#39; Create two Binding objects for the first two TextBox \n        &#39; controls. The data-bound property for both controls \n        &#39; is the Text property. The data source is a DataSet \n        &#39; (ds). The data member is specified by a navigation \n        &#39; path in the form : TableName.ColumnName. \n        textBox1.DataBindings.Add _\n           (New Binding(&quot;Text&quot;, ds, &quot;customers.custName&quot;))\n        textBox2.DataBindings.Add _\n           (New Binding(&quot;Text&quot;, ds, &quot;customers.custID&quot;))\n        \n        &#39; Bind the DateTimePicker control by adding a new Binding. \n        &#39; The data member of the DateTimePicker is specified by a \n        &#39; navigation path in the form: TableName.RelationName.ColumnName. \n        DateTimePicker1.DataBindings.Add _\n           (New Binding(&quot;Value&quot;, ds, &quot;customers.CustToOrders.OrderDate&quot;))\n        \n        &#39; Create a new Binding using the DataSet and a \n        &#39; navigation path(TableName.RelationName.ColumnName).\n        &#39; Add event delegates for the Parse and Format events to \n        &#39; the Binding object, and add the object to the third \n        &#39; TextBox control&#39;s BindingsCollection. The delegates \n        &#39; must be added before adding the Binding to the \n        &#39; collection; otherwise, no formatting occurs until \n        &#39; the Current object of the BindingManagerBase for\n        &#39; the data source changes. \n        Dim b As New Binding(&quot;Text&quot;, ds, &quot;customers.custToOrders.OrderAmount&quot;)\n        AddHandler b.Parse, AddressOf CurrencyStringToDecimal\n        AddHandler b.Format, AddressOf DecimalToCurrencyString\n        textBox3.DataBindings.Add(b)\n        \n        &#39; Bind the fourth TextBox to the Value of the \n        &#39; DateTimePicker control. This demonstrates how one control\n        &#39; can be bound to another.\n        textBox4.DataBindings.Add(&quot;Text&quot;, DateTimePicker1, &quot;Value&quot;)\n        Dim bmText As BindingManagerBase = Me.BindingContext(DateTimePicker1)\n        \n        &#39; Print the Type of the BindingManagerBase, which is \n        &#39; a PropertyManager because the data source\n        &#39; returns only a single property value. \n        Console.WriteLine(bmText.GetType().ToString())\n        &#39; Print the count of managed objects, which is 1.\n        Console.WriteLine(bmText.Count)\n        \n        &#39; Get the BindingManagerBase for the Customers table. \n        bmCustomers = Me.BindingContext(ds, &quot;Customers&quot;)\n        &#39; Print the Type and count of the BindingManagerBase.\n        &#39; Because the data source inherits from IBindingList,\n        &#39; it is a RelatedCurrencyManager (derived from CurrencyManager). \n        Console.WriteLine(bmCustomers.GetType().ToString())\n        Console.WriteLine(bmCustomers.Count)\n        \n        &#39; Get the BindingManagerBase for the Orders of the current\n        &#39; customer using a navigation path: TableName.RelationName. \n        bmOrders = Me.BindingContext(ds, &quot;customers.CustToOrders&quot;)\n    End Sub    \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_DefaultBackColor\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_DefaultBackColor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefaultBackColor</div>        \r\n          </div>\r\n    \r\n            <p>Gets the default background color of the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Drawing.Color DefaultBackColor { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.color\" data-linktype=\"relative-path\">Color</a></div>\r\n                  </div>\r\n                  <p>The default background <a class=\"xref\" href=\"system.drawing.color\" data-linktype=\"relative-path\">Color</a> of the control. The default is <span class=\"xref\">stem.Drawing.SystemColors.Control*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is the default <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BackColor_\" data-linktype=\"relative-path\">BackColor</a> property value of a generic top-level control. Derived classes can have different defaults.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the DefaultBackColor, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DefaultFont_\" data-linktype=\"relative-path\">DefaultFont</a>, and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DefaultForeColor_\" data-linktype=\"relative-path\">DefaultForeColor</a> members. To run the example, paste the following code in a form containing a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> called ListBox1. Call the <code>Populate_ListBox</code> method in the form&#39;s constructor or <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_Load\" data-linktype=\"relative-path\">Load</a> event-handling method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.ControlDefaultProperties#1\">   // The following method displays the default font, \n   // background color and foreground color values for the ListBox  \n   // control. The values are displayed in the ListBox, itself.\n   void Populate_ListBox()\n   {\n      ListBox1-&gt;Dock = DockStyle::Bottom;\n      \n      // Display the values in the read-only properties \n      // DefaultBackColor, DefaultFont, DefaultForecolor.\n      ListBox1-&gt;Items-&gt;Add( String::Format( &quot;Default BackColor: {0}&quot;, ListBox::DefaultBackColor ) );\n      ListBox1-&gt;Items-&gt;Add( String::Format( &quot;Default Font: {0}&quot;, ListBox::DefaultFont ) );\n      ListBox1-&gt;Items-&gt;Add( String::Format( &quot;Default ForeColor:{0}&quot;, ListBox::DefaultForeColor ) );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.ControlDefaultProperties#1\">\n\t// The following method displays the default font, \n\t// background color and foreground color values for the ListBox  \n\t// control. The values are displayed in the ListBox, itself.\n\n\tprivate void Populate_ListBox()\n\t{\n\t\tListBox1.Dock = DockStyle.Bottom;\n\n\t\t// Display the values in the read-only properties \n\t\t// DefaultBackColor, DefaultFont, DefaultForecolor.\n\t\tListBox1.Items.Add(&quot;Default BackColor: &quot; + \n\t\t\tListBox.DefaultBackColor.ToString());\n\t\tListBox1.Items.Add(&quot;Default Font: &quot; + \n\t\t\tListBox.DefaultFont.ToString());\n\t\tListBox1.Items.Add(&quot;Default ForeColor:&quot; + \n\t\t\tListBox.DefaultForeColor.ToString());\n\n\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.ControlDefaultProperties#1\">\n    &#39; The following method displays the default font, \n    &#39; background color and foreground color values for the ListBox  \n    &#39; control. The values are displayed in the ListBox, itself.\n\n    Private Sub Populate_ListBox()\n        ListBox1.Dock = DockStyle.Bottom\n\n        &#39; Display the values in the read-only properties \n        &#39; DefaultBackColor, DefaultFont, DefaultForecolor.\n        ListBox1.Items.Add(&quot;Default BackColor: &quot; &amp; ListBox.DefaultBackColor.ToString)\n        ListBox1.Items.Add(&quot;Default Font: &quot; &amp; ListBox.DefaultFont.ToString)\n        ListBox1.Items.Add(&quot;Default ForeColor:&quot; &amp; ListBox.DefaultForeColor.ToString)\n\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_DefaultCursor\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_DefaultCursor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefaultCursor</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the default cursor for the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual System.Windows.Forms.Cursor DefaultCursor { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.cursor\" data-linktype=\"relative-path\">Cursor</a></div>\r\n                  </div>\r\n                  <p>An object of type <a class=\"xref\" href=\"system.windows.forms.cursor\" data-linktype=\"relative-path\">Cursor</a> representing the current default cursor.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Override DefaultCursor to configure a default cursor for your control. This is more efficient than setting the cursor in the control&#39;s constructor, and gives automatic support for certain cursor-related designer functions.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_DefaultFont\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_DefaultFont_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefaultFont</div>        \r\n          </div>\r\n    \r\n            <p>Gets the default font of the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Drawing.Font DefaultFont { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.font\" data-linktype=\"relative-path\">Font</a></div>\r\n                  </div>\r\n                  <p>The default <a class=\"xref\" href=\"system.drawing.font\" data-linktype=\"relative-path\">Font</a> of the control. The value returned will vary depending on the user&#39;s operating system the local culture setting of their system.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The default font or the regional alternative fonts are not installed on the client computer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table describes the value returned by DefaultFont depending on the operating system and local culture.  </p>\n<table>\n<thead>\n<tr>\n<th>System/and or Culture</th>\n<th>Font</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Windows NT 4x, Japanese version</td>\n<td>MS UI Gothic, 9 point.</td>\n</tr>\n<tr>\n<td>Arabic Windows</td>\n<td>Tahoma, 8 point.</td>\n</tr>\n<tr>\n<td>Other operating system/culture</td>\n<td>MS Shell Dlg logical font, typically Microsoft San Serif 8 point.</td>\n</tr>\n</tbody>\n</table>\n<p> MS Shell Dlg maps to a font set in the system registry.  </p>\n<p> If the previous fonts are not installed, the default font is Tahoma, 8 point. If Tahoma, 8 point, is not installed, DefaultFontreturns the value of the <a class=\"xref\" href=\"system.drawing.fontfamily#System_Drawing_FontFamily_GenericSansSerif_\" data-linktype=\"relative-path\">GenericSansSerif</a> property</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DefaultBackColor_\" data-linktype=\"relative-path\">DefaultBackColor</a>, DefaultFont, and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DefaultForeColor_\" data-linktype=\"relative-path\">DefaultForeColor</a> members. To run the example, paste the following code in a form containing a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> called ListBox1. Call the <code>Populate_ListBox</code> method in the form&#39;s constructor or <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_Load\" data-linktype=\"relative-path\">Load</a> event-handling method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.ControlDefaultProperties#1\">   // The following method displays the default font, \n   // background color and foreground color values for the ListBox  \n   // control. The values are displayed in the ListBox, itself.\n   void Populate_ListBox()\n   {\n      ListBox1-&gt;Dock = DockStyle::Bottom;\n      \n      // Display the values in the read-only properties \n      // DefaultBackColor, DefaultFont, DefaultForecolor.\n      ListBox1-&gt;Items-&gt;Add( String::Format( &quot;Default BackColor: {0}&quot;, ListBox::DefaultBackColor ) );\n      ListBox1-&gt;Items-&gt;Add( String::Format( &quot;Default Font: {0}&quot;, ListBox::DefaultFont ) );\n      ListBox1-&gt;Items-&gt;Add( String::Format( &quot;Default ForeColor:{0}&quot;, ListBox::DefaultForeColor ) );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.ControlDefaultProperties#1\">\n\t// The following method displays the default font, \n\t// background color and foreground color values for the ListBox  \n\t// control. The values are displayed in the ListBox, itself.\n\n\tprivate void Populate_ListBox()\n\t{\n\t\tListBox1.Dock = DockStyle.Bottom;\n\n\t\t// Display the values in the read-only properties \n\t\t// DefaultBackColor, DefaultFont, DefaultForecolor.\n\t\tListBox1.Items.Add(&quot;Default BackColor: &quot; + \n\t\t\tListBox.DefaultBackColor.ToString());\n\t\tListBox1.Items.Add(&quot;Default Font: &quot; + \n\t\t\tListBox.DefaultFont.ToString());\n\t\tListBox1.Items.Add(&quot;Default ForeColor:&quot; + \n\t\t\tListBox.DefaultForeColor.ToString());\n\n\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.ControlDefaultProperties#1\">\n    &#39; The following method displays the default font, \n    &#39; background color and foreground color values for the ListBox  \n    &#39; control. The values are displayed in the ListBox, itself.\n\n    Private Sub Populate_ListBox()\n        ListBox1.Dock = DockStyle.Bottom\n\n        &#39; Display the values in the read-only properties \n        &#39; DefaultBackColor, DefaultFont, DefaultForecolor.\n        ListBox1.Items.Add(&quot;Default BackColor: &quot; &amp; ListBox.DefaultBackColor.ToString)\n        ListBox1.Items.Add(&quot;Default Font: &quot; &amp; ListBox.DefaultFont.ToString)\n        ListBox1.Items.Add(&quot;Default ForeColor:&quot; &amp; ListBox.DefaultForeColor.ToString)\n\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_DefaultForeColor\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_DefaultForeColor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefaultForeColor</div>        \r\n          </div>\r\n    \r\n            <p>Gets the default foreground color of the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Drawing.Color DefaultForeColor { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.color\" data-linktype=\"relative-path\">Color</a></div>\r\n                  </div>\r\n                  <p>The default foreground <a class=\"xref\" href=\"system.drawing.color\" data-linktype=\"relative-path\">Color</a> of the control. The default is <span class=\"xref\">stem.Drawing.SystemColors.ControlText*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is the default <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> property value of a nonparented control. Derived classes can have different defaults.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DefaultBackColor_\" data-linktype=\"relative-path\">DefaultBackColor</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DefaultFont_\" data-linktype=\"relative-path\">DefaultFont</a>, and DefaultForeColor members. To run the example, paste the following code in a form containing a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> called ListBox1. Call the <code>Populate_ListBox</code> method in the form&#39;s constructor or <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_Load\" data-linktype=\"relative-path\">Load</a> event-handling method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.ControlDefaultProperties#1\">   // The following method displays the default font, \n   // background color and foreground color values for the ListBox  \n   // control. The values are displayed in the ListBox, itself.\n   void Populate_ListBox()\n   {\n      ListBox1-&gt;Dock = DockStyle::Bottom;\n      \n      // Display the values in the read-only properties \n      // DefaultBackColor, DefaultFont, DefaultForecolor.\n      ListBox1-&gt;Items-&gt;Add( String::Format( &quot;Default BackColor: {0}&quot;, ListBox::DefaultBackColor ) );\n      ListBox1-&gt;Items-&gt;Add( String::Format( &quot;Default Font: {0}&quot;, ListBox::DefaultFont ) );\n      ListBox1-&gt;Items-&gt;Add( String::Format( &quot;Default ForeColor:{0}&quot;, ListBox::DefaultForeColor ) );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.ControlDefaultProperties#1\">\n\t// The following method displays the default font, \n\t// background color and foreground color values for the ListBox  \n\t// control. The values are displayed in the ListBox, itself.\n\n\tprivate void Populate_ListBox()\n\t{\n\t\tListBox1.Dock = DockStyle.Bottom;\n\n\t\t// Display the values in the read-only properties \n\t\t// DefaultBackColor, DefaultFont, DefaultForecolor.\n\t\tListBox1.Items.Add(&quot;Default BackColor: &quot; + \n\t\t\tListBox.DefaultBackColor.ToString());\n\t\tListBox1.Items.Add(&quot;Default Font: &quot; + \n\t\t\tListBox.DefaultFont.ToString());\n\t\tListBox1.Items.Add(&quot;Default ForeColor:&quot; + \n\t\t\tListBox.DefaultForeColor.ToString());\n\n\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.ControlDefaultProperties#1\">\n    &#39; The following method displays the default font, \n    &#39; background color and foreground color values for the ListBox  \n    &#39; control. The values are displayed in the ListBox, itself.\n\n    Private Sub Populate_ListBox()\n        ListBox1.Dock = DockStyle.Bottom\n\n        &#39; Display the values in the read-only properties \n        &#39; DefaultBackColor, DefaultFont, DefaultForecolor.\n        ListBox1.Items.Add(&quot;Default BackColor: &quot; &amp; ListBox.DefaultBackColor.ToString)\n        ListBox1.Items.Add(&quot;Default Font: &quot; &amp; ListBox.DefaultFont.ToString)\n        ListBox1.Items.Add(&quot;Default ForeColor:&quot; &amp; ListBox.DefaultForeColor.ToString)\n\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_DefaultImeMode\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_DefaultImeMode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefaultImeMode</div>        \r\n          </div>\r\n    \r\n            <p>Gets the default Input Method Editor (IME) mode supported by the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual System.Windows.Forms.ImeMode DefaultImeMode { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.imemode\" data-linktype=\"relative-path\">ImeMode</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.windows.forms.imemode\" data-linktype=\"relative-path\">ImeMode</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An Input Method Editor (IME) is a program that enables users to enter complex characters and symbols, such as Japanese Kanji characters, by using a standard keyboard.  </p>\n<p> As implemented in the <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class, this property always returns the <a class=\"xref\" href=\"system.windows.forms.imemode\" data-linktype=\"relative-path\">System.Windows.Forms.ImeMode</a> value. The <a class=\"xref\" href=\"system.windows.forms.imemode\" data-linktype=\"relative-path\">ImeMode</a> value specifies that the IME mode is inherited from the parent control.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example overrides the DefaultImeMode property to turn off the Input Method Editor.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control Properties2#4\">protected override ImeMode DefaultImeMode\n{\n   get\n   {\n      // Disable the IME mode for the control.\n      return ImeMode.Off;\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control Properties2#4\">      Protected Overrides ReadOnly Property DefaultImeMode() As ImeMode\n         Get\n            &#39; Disable the IME mode for the control.\n            Return ImeMode.Off\n         End Get\n      End Property\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control Properties2#4\">protected:\n   property System::Windows::Forms::ImeMode DefaultImeMode \n   {\n      virtual System::Windows::Forms::ImeMode get() override\n      {\n         // Disable the IME mode for the control.\n         return ::ImeMode::Off;\n      }\n\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_DefaultMargin\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_DefaultMargin_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefaultMargin</div>        \r\n          </div>\r\n    \r\n            <p>Gets the space, in pixels, that is specified by default between controls.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual System.Windows.Forms.Padding DefaultMargin { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.padding\" data-linktype=\"relative-path\">Padding</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.padding\" data-linktype=\"relative-path\">Padding</a> that represents the default space between controls.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_DefaultMaximumSize\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_DefaultMaximumSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefaultMaximumSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the length and height, in pixels, that is specified as the default maximum size of a control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual System.Drawing.Size DefaultMaximumSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Drawing.Point.#ctor*</span> representing the size of the control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_DefaultMinimumSize\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_DefaultMinimumSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefaultMinimumSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the length and height, in pixels, that is specified as the default minimum size of a control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual System.Drawing.Size DefaultMinimumSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> representing the size of the control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_DefaultPadding\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_DefaultPadding_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefaultPadding</div>        \r\n          </div>\r\n    \r\n            <p>Gets the internal spacing, in pixels, of the contents of a control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual System.Windows.Forms.Padding DefaultPadding { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.padding\" data-linktype=\"relative-path\">Padding</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.padding\" data-linktype=\"relative-path\">Padding</a> that represents the internal spacing of the contents of a control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_DefaultSize\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_DefaultSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefaultSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the default size of the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual System.Drawing.Size DefaultSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>The default <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> of the control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The DefaultSize property represents the <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> of the control when it is initially created. You can adjust the size of the control by setting its <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Size_\" data-linktype=\"relative-path\">Size</a> property value.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To maintain better performance, do not set the <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> of a control in its constructor. The preferred method is to override the DefaultSize property.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> On Windows Server 2003 systems, the size of a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> is restricted by the maximum pixel width and height of the monitor.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example overrides the DefaultSize property, and makes the default size of the form 500 pixels square.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control Properties2#3\">protected override Size DefaultSize\n{\n   get\n   {\n      // Set the default size of\n      // the form to 500 pixels square.\n      return new Size(500,500);\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control Properties2#3\">      Protected Overrides ReadOnly Property DefaultSize() As Size\n         Get\n            &#39; Set the default size of\n            &#39; the form to 500 pixels square. \n            Return New Size(500, 500)\n         End Get\n      End Property\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control Properties2#3\">protected:\n   property System::Drawing::Size DefaultSize \n   {\n      virtual System::Drawing::Size get() override\n      {\n         // Set the default size of\n         // the form to 500 pixels square.\n         return System::Drawing::Size( 500, 500 );\n      }\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_DisplayRectangle\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_DisplayRectangle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DisplayRectangle</div>        \r\n          </div>\r\n    \r\n            <p>Gets the rectangle that represents the display area of the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Drawing.Rectangle DisplayRectangle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a> that represents the display area of the control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The DisplayRectangle property returns the client rectangle of the display area of the control. For the base control class, this is equal to the client rectangle. However, inheriting controls might want to change this if their client area differs from their display area. The display rectangle is the smallest <a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a> that encloses a control and is used to lay out controls.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Disposing\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Disposing_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Disposing</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the base <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class is in the process of disposing.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Disposing { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the base <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class is in the process of disposing; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When this property returns <code>true</code>, the base<a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class is in the process of disposing. After the control is disposed of, it can no longer be referenced as a valid Windows control. Even though the instance of a control is disposed of, it is still maintained in memory until it is removed from memory through garbage collection. When a control is disposed of, you cannot call its <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RecreateHandle_\" data-linktype=\"relative-path\">RecreateHandle</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Dock\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Dock_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dock</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets which control borders are docked to its parent control and determines how a control is resized with its parent.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Windows.Forms.DockStyle Dock { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.dockstyle\" data-linktype=\"relative-path\">DockStyle</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.windows.forms.dockstyle\" data-linktype=\"relative-path\">DockStyle</a> values. The default is <a class=\"xref\" href=\"system.windows.forms.dockstyle\" data-linktype=\"relative-path\">DockStyle</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.invalidenumargumentexception\" data-linktype=\"relative-path\">InvalidEnumArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value assigned is not one of the <a class=\"xref\" href=\"system.windows.forms.dockstyle\" data-linktype=\"relative-path\">DockStyle</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the Dock property to define how a control is automatically resized as its parent control is resized. For example, setting Dock to <a class=\"xref\" href=\"system.windows.forms.dockstyle\" data-linktype=\"relative-path\">System.Windows.Forms.DockStyle</a> causes the control to align itself with the left edges of its parent control and to resize as the parent control is resized. Controls are docked in their Z-order, which is the visual layering of controls on a form along the form&#39;s Z-axis (depth).  </p>\n<p> A control can be docked to one edge of its parent container or can be docked to all edges and fill the parent container.  </p>\n<p> Setting the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Margin_\" data-linktype=\"relative-path\">Margin</a> property on a docked control has no effect on the distance of the control from the the edges of its container.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Anchor_\" data-linktype=\"relative-path\">Anchor</a> and Dock properties are mutually exclusive. Only one can be set at a time, and the last one set takes precedence.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a <a class=\"xref\" href=\"system.windows.forms.groupbox\" data-linktype=\"relative-path\">GroupBox</a> and sets some of its common properties. The example creates a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> and sets its <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Location_\" data-linktype=\"relative-path\">Location</a> within the group box. Next, it sets the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property of the group box, and docks the group box to the top of the form. Lastly, it disables the group box by setting the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Enabled_\" data-linktype=\"relative-path\">Enabled</a> property to <code>false</code>, which causes all controls contained within the group box to be disabled.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control Properties#2\">// Add a GroupBox to a form and set some of its common properties.\nprivate void AddMyGroupBox()\n{\n   // Create a GroupBox and add a TextBox to it.\n   GroupBox groupBox1 = new GroupBox();\n   TextBox textBox1 = new TextBox();\n   textBox1.Location = new Point(15, 15);\n   groupBox1.Controls.Add(textBox1);\n\n   // Set the Text and Dock properties of the GroupBox.\n   groupBox1.Text = &quot;MyGroupBox&quot;;\n   groupBox1.Dock = DockStyle.Top;\n\n   // Disable the GroupBox (which disables all its child controls)\n   groupBox1.Enabled = false;\n\n   // Add the Groupbox to the form.\n   this.Controls.Add(groupBox1);\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control Properties#2\">      // Add a GroupBox to a form and set some of its common properties.\n   private:\n      void AddMyGroupBox()\n      {\n         // Create a GroupBox and add a TextBox to it.\n         GroupBox^ groupBox1 = gcnew GroupBox;\n         TextBox^ textBox1 = gcnew TextBox;\n         textBox1-&gt;Location = Point(15,15);\n         groupBox1-&gt;Controls-&gt;Add( textBox1 );\n\n         // Set the Text and Dock properties of the GroupBox.\n         groupBox1-&gt;Text = &quot;MyGroupBox&quot;;\n         groupBox1-&gt;Dock = DockStyle::Top;\n\n         // Disable the GroupBox (which disables all its child controls)\n         groupBox1-&gt;Enabled = false;\n\n         // Add the Groupbox to the form.\n         this-&gt;Controls-&gt;Add( groupBox1 );\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control Properties#2\">&#39; Add a GroupBox to a form and set some of its common properties.\nPrivate Sub AddMyGroupBox()\n   &#39; Create a GroupBox and add a TextBox to it.\n   Dim groupBox1 As New GroupBox()\n   Dim textBox1 As New TextBox()\n   textBox1.Location = New Point(15, 15)\n   groupBox1.Controls.Add(textBox1)\n   \n   &#39; Set the Text and Dock properties of the GroupBox.\n   groupBox1.Text = &quot;MyGroupBox&quot;\n   groupBox1.Dock = DockStyle.Top\n   \n   &#39; Disable the GroupBox (which disables all its child controls)\n   groupBox1.Enabled = False\n   \n   &#39; Add the Groupbox to the form.\n   Me.Controls.Add(groupBox1)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_DoubleBuffered\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_DoubleBuffered_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DoubleBuffered</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether this control should redraw its surface using a secondary buffer to reduce or prevent flicker.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual bool DoubleBuffered { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the surface of the control should be drawn using double buffering; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Buffered graphics can reduce or eliminate flicker that is caused by progressive redrawing of parts of a displayed surface. Buffered graphics require that the updated graphics data is first written to a buffer. The data in the graphics buffer is then quickly written to displayed surface memory. The relatively quick switch of the displayed graphics memory typically reduces the flicker that can otherwise occur.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> DoubleBuffered is not a bindable property.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Enabled\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Enabled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Enabled</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the control can respond to user interaction.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Enabled { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the control can respond to user interaction; otherwise, <code>false</code>. The default is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>With the Enabled property, you can enable or disable controls at run time. For example, you can disable controls that do not apply to the current state of the application. You can also disable a control to restrict its use. For example, a button can be disabled to prevent the user from clicking it. If a control is disabled, it cannot be selected.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Setting the Enabled property to <code>false</code> does not disable the application&#39;s control box or prevent the application window from receiving the focus.  </p>\n</div>\n<p> When a container control has its enabled property set to <code>false</code>, all its contained controls are disabled, as well. For example, if the user clicks on any of the controls contained in a disabled <a class=\"xref\" href=\"system.windows.forms.groupbox\" data-linktype=\"relative-path\">GroupBox</a> control, no events are raised.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When a scrollable control is disabled, the scroll bars are also disabled. For example, a disabled multiline textbox is unable to scroll to display all the lines of text.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a <a class=\"xref\" href=\"system.windows.forms.groupbox\" data-linktype=\"relative-path\">GroupBox</a> and sets some of its common properties. The example creates a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> and sets its <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Location_\" data-linktype=\"relative-path\">Location</a> within the group box. Next, it sets the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property of the group box, and docks the group box to the top of the form. Lastly, it disables the group box by setting the Enabled property to <code>false</code>, which causes all controls contained within the group box to be disabled.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control Properties#2\">// Add a GroupBox to a form and set some of its common properties.\nprivate void AddMyGroupBox()\n{\n   // Create a GroupBox and add a TextBox to it.\n   GroupBox groupBox1 = new GroupBox();\n   TextBox textBox1 = new TextBox();\n   textBox1.Location = new Point(15, 15);\n   groupBox1.Controls.Add(textBox1);\n\n   // Set the Text and Dock properties of the GroupBox.\n   groupBox1.Text = &quot;MyGroupBox&quot;;\n   groupBox1.Dock = DockStyle.Top;\n\n   // Disable the GroupBox (which disables all its child controls)\n   groupBox1.Enabled = false;\n\n   // Add the Groupbox to the form.\n   this.Controls.Add(groupBox1);\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control Properties#2\">      // Add a GroupBox to a form and set some of its common properties.\n   private:\n      void AddMyGroupBox()\n      {\n         // Create a GroupBox and add a TextBox to it.\n         GroupBox^ groupBox1 = gcnew GroupBox;\n         TextBox^ textBox1 = gcnew TextBox;\n         textBox1-&gt;Location = Point(15,15);\n         groupBox1-&gt;Controls-&gt;Add( textBox1 );\n\n         // Set the Text and Dock properties of the GroupBox.\n         groupBox1-&gt;Text = &quot;MyGroupBox&quot;;\n         groupBox1-&gt;Dock = DockStyle::Top;\n\n         // Disable the GroupBox (which disables all its child controls)\n         groupBox1-&gt;Enabled = false;\n\n         // Add the Groupbox to the form.\n         this-&gt;Controls-&gt;Add( groupBox1 );\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control Properties#2\">&#39; Add a GroupBox to a form and set some of its common properties.\nPrivate Sub AddMyGroupBox()\n   &#39; Create a GroupBox and add a TextBox to it.\n   Dim groupBox1 As New GroupBox()\n   Dim textBox1 As New TextBox()\n   textBox1.Location = New Point(15, 15)\n   groupBox1.Controls.Add(textBox1)\n   \n   &#39; Set the Text and Dock properties of the GroupBox.\n   groupBox1.Text = &quot;MyGroupBox&quot;\n   groupBox1.Dock = DockStyle.Top\n   \n   &#39; Disable the GroupBox (which disables all its child controls)\n   groupBox1.Enabled = False\n   \n   &#39; Add the Groupbox to the form.\n   Me.Controls.Add(groupBox1)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Focused\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Focused_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Focused</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the control has input focus.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool Focused { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the control has focus; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example disables a <a class=\"xref\" href=\"system.windows.forms.menuitem\" data-linktype=\"relative-path\">MenuItem</a> if a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> does not have focus. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> named <code>textBox1</code> and two <a class=\"xref\" href=\"system.windows.forms.menuitem\" data-linktype=\"relative-path\">MenuItem</a> objects named <code>menuItemEdit</code> and <code>menuItemEditInsertCustomerInfo</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.FOrms.Control Members2#4\">private void menuItemEdit_Popup(object sender, EventArgs e)\n{\n   // Disable the menu item if the text box does not have focus.\n   this.menuItemEditInsertCustomerInfo.Enabled = this.textBox1.Focused;\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.FOrms.Control Members2#4\">   private:\n      void menuItemEdit_Popup( Object^ /*sender*/, EventArgs^ /*e*/ )\n      {\n         // Disable the menu item if the text box does not have focus.\n         this-&gt;menuItemEditInsertCustomerInfo-&gt;Enabled = this-&gt;textBox1-&gt;Focused;\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.FOrms.Control Members2#4\">Private Sub menuItemEdit_Popup(sender As Object, _\n  e As EventArgs) Handles menuItemEdit.Popup\n   &#39; Disable the menu item if the text box does not have focus.\n   Me.menuItemEditInsertCustomerInfo.Enabled = Me.textBox1.Focused\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Font\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Font_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Font</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the font of the text displayed by the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Drawing.Font Font { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.font\" data-linktype=\"relative-path\">Font</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.drawing.font\" data-linktype=\"relative-path\">Font</a> to apply to the text displayed by the control. The default is the value of the <span class=\"xref\">stem.Windows.Forms.Control.DefaultFont*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Font property is an ambient property. An ambient property is a control property that, if not set, is retrieved from the parent control. For example, a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> will have the same <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BackColor_\" data-linktype=\"relative-path\">BackColor</a> as its parent <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> by default. For more information about ambient properties, see the <a class=\"xref\" href=\"system.windows.forms.ambientproperties\" data-linktype=\"relative-path\">AmbientProperties</a> class or the <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class overview.  </p>\n<p> Because the <a class=\"xref\" href=\"system.drawing.font\" data-linktype=\"relative-path\">Font</a> is immutable (meaning that you cannot adjust any of its properties), you can only assign the Font property a new <a class=\"xref\" href=\"system.drawing.font\" data-linktype=\"relative-path\">Font</a>. However, you can base the new font on the existing font.  </p>\n<p> [Visual Basic, C#]  </p>\n<p> The following is an example of how to adjust the existing font to make it bold:  </p>\n<pre><code class=\"lang-c#\">myControl.Font = new Font(myControl.Font,   \n    myControl.Font.Style | FontStyle.Bold);\n</code></pre><pre><code class=\"lang-vb#\">MyControl.Font = New Font(MyControl.Font, _   \n    MyControl.Font.Style Or FontStyle.Bold)\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays a <a class=\"xref\" href=\"system.windows.forms.fontdialog\" data-linktype=\"relative-path\">FontDialog</a> to the user and changes the <a class=\"xref\" href=\"system.drawing.font\" data-linktype=\"relative-path\">Font</a> of a <a class=\"xref\" href=\"system.windows.forms.datetimepicker\" data-linktype=\"relative-path\">DateTimePicker</a> control. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> and a <a class=\"xref\" href=\"system.windows.forms.datetimepicker\" data-linktype=\"relative-path\">DateTimePicker</a> on it.  </p>\n<pre><code class=\"lang-cpp\" name=\"Control_Font#1\">private:\n   void myButton_Click( Object^ sender, EventArgs^ e )\n   {\n      FontDialog^ myFontDialog = gcnew FontDialog;\n      if ( myFontDialog-&gt;ShowDialog() == ::DialogResult::OK )\n      {\n         // Set the control&#39;s font.\n         myDateTimePicker-&gt;Font = myFontDialog-&gt;Font;\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"Control_Font#1\">private void myButton_Click(object sender, EventArgs e)\n{\n   FontDialog myFontDialog = new FontDialog();\n   if(myFontDialog.ShowDialog() == DialogResult.OK)\n   {\n      // Set the control&#39;s font.\n      myDateTimePicker.Font = myFontDialog.Font;\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Control_Font#1\">   Private Sub myButton_Click(sender As Object, e As EventArgs)\n      Dim myFontDialog As FontDialog\n      myFontDialog = New FontDialog()\n      \n      If myFontDialog.ShowDialog() = DialogResult.OK Then\n         &#39; Set the control&#39;s font.\n         myDateTimePicker.Font = myFontDialog.Font\n      End If\n   End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_FontHeight\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_FontHeight_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FontHeight</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the height of the font of the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected int FontHeight { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The height of the <a class=\"xref\" href=\"system.drawing.font\" data-linktype=\"relative-path\">Font</a> of the control in pixels.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> The FontHeight property should not be set to any value other than the control&#39;s <a class=\"xref\" href=\"system.drawing.font#System_Drawing_Font_Height_\" data-linktype=\"relative-path\">Height</a> value, or -1. Setting FontHeight to -1 has the effect of clearing the cached height value, and the value is recalculated the next time the property is referenced.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ForeColor\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_ForeColor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ForeColor</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the foreground color of the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Drawing.Color ForeColor { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.color\" data-linktype=\"relative-path\">Color</a></div>\r\n                  </div>\r\n                  <p>The foreground <a class=\"xref\" href=\"system.drawing.color\" data-linktype=\"relative-path\">Color</a> of the control. The default is the value of the <span class=\"xref\">stem.Windows.Forms.Control.DefaultForeColor*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ForeColor property is an ambient property. An ambient property is a control property that, if not set, is retrieved from the parent control. For example, a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> will have the same <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BackColor_\" data-linktype=\"relative-path\">BackColor</a> as its parent <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> by default. For more information about ambient properties, see the <a class=\"xref\" href=\"system.windows.forms.ambientproperties\" data-linktype=\"relative-path\">AmbientProperties</a> class or the <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class overview.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BackColor_\" data-linktype=\"relative-path\">BackColor</a> and ForeColor of the controls to the default system colors. The code recursively calls itself if the control has any child controls. This code example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with at least one child control; however, a child container control, like a <a class=\"xref\" href=\"system.windows.forms.panel\" data-linktype=\"relative-path\">Panel</a> or <a class=\"xref\" href=\"system.windows.forms.groupbox\" data-linktype=\"relative-path\">GroupBox</a>, with its own child control(s) would better demonstrate the recursion.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control Properties#1\">// Reset all the controls to the user&#39;s default Control color. \nprivate void ResetAllControlsBackColor(Control control)\n{\n   control.BackColor = SystemColors.Control;\n   control.ForeColor = SystemColors.ControlText;\n   if(control.HasChildren)\n   {\n      // Recursively call this method for each child control.\n      foreach(Control childControl in control.Controls)\n      {\n         ResetAllControlsBackColor(childControl);\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control Properties#1\">      // Reset all the controls to the user&#39;s default Control color.\n   private:\n      void ResetAllControlsBackColor( Control^ control )\n      {\n         control-&gt;BackColor = SystemColors::Control;\n         control-&gt;ForeColor = SystemColors::ControlText;\n         if ( control-&gt;HasChildren )\n         {\n            // Recursively call this method for each child control.\n            IEnumerator^ myEnum = control-&gt;Controls-&gt;GetEnumerator();\n            while ( myEnum-&gt;MoveNext() )\n            {\n               Control^ childControl = safe_cast&lt;Control^&gt;(myEnum-&gt;Current);\n               ResetAllControlsBackColor( childControl );\n            }\n         }\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control Properties#1\">&#39; Reset all the controls to the user&#39;s default Control color. \nPrivate Sub ResetAllControlsBackColor(control As Control)\n   control.BackColor = SystemColors.Control\n   control.ForeColor = SystemColors.ControlText\n   If control.HasChildren Then\n      &#39; Recursively call this method for each child control.\n      Dim childControl As Control\n      For Each childControl In  control.Controls\n         ResetAllControlsBackColor(childControl)\n      Next childControl\n   End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Handle\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Handle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Handle</div>        \r\n          </div>\r\n    \r\n            <p>Gets the window handle that the control is bound to.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IntPtr Handle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> that contains the window handle (<code>HWND</code>) of the control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the Handle property is a Windows <code>HWND</code>. If the handle has not yet been created, referencing this property will force the handle to be created.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using the <a class=\"xref\" href=\"system.windows.forms.controlpaint#System_Windows_Forms_ControlPaint_DrawFocusRectangle_\" data-linktype=\"relative-path\">DrawFocusRectangle</a> and the Handle property. To run the example paste the following code in a form. Add two buttons named <code>Button1</code> and <code>Button2</code> to the form and ensure all events are connected to their event handlers.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.ControlPaint1#2\">    &#39; This method draws a focus rectangle on Button2 using the \n    &#39; handle and client rectangle of Button2.\n    Private Sub Button1_Click(ByVal sender As System.Object, _\n        ByVal e As System.EventArgs) Handles Button1.Click\n        ControlPaint.DrawFocusRectangle(Graphics.FromHwnd(Button2.Handle), _\n        Button2.ClientRectangle)\n    End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.ControlPaint1#2\">   // This method draws a focus rectangle on Button2 using the \n   // handle and client rectangle of Button2.\n   void Button1_Click( System::Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      ControlPaint::DrawFocusRectangle( Graphics::FromHwnd( Button2-&gt;Handle ), Button2-&gt;ClientRectangle );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.ControlPaint1#2\">\t// This method draws a focus rectangle on Button2 using the \n\t// handle and client rectangle of Button2.\n\tprivate void Button1_Click(System.Object sender, System.EventArgs e)\n\t{\n\t\tControlPaint.DrawFocusRectangle(Graphics.FromHwnd(Button2.Handle), \n\t\t\tButton2.ClientRectangle);\n\t}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_HasChildren\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_HasChildren_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HasChildren</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the control contains one or more child controls.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool HasChildren { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the control contains one or more child controls; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Controls_\" data-linktype=\"relative-path\">Controls</a> collection has a <a class=\"xref\" href=\"system.windows.forms.layout.arrangedelementcollection#System_Windows_Forms_Layout_ArrangedElementCollection_Count_\" data-linktype=\"relative-path\">Count</a> greater than zero, the HasChildren property will return <code>true</code>. Accessing the HasChildren property does not force the creation of a <a class=\"xref\" href=\"system.windows.forms.control.controlcollection\" data-linktype=\"relative-path\">Control+ControlCollection</a> if the control has no children, so referencing this property can provide a performance benefit when walking a tree of controls.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BackColor_\" data-linktype=\"relative-path\">BackColor</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> of the controls to the default system colors. The code recursively calls itself if the control has any child controls. This code example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with at least one child control; however, a child container control, like a <a class=\"xref\" href=\"system.windows.forms.panel\" data-linktype=\"relative-path\">Panel</a> or <a class=\"xref\" href=\"system.windows.forms.groupbox\" data-linktype=\"relative-path\">GroupBox</a>, with its own child control(s) would better demonstrate the recursion.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control Properties#1\">// Reset all the controls to the user&#39;s default Control color. \nprivate void ResetAllControlsBackColor(Control control)\n{\n   control.BackColor = SystemColors.Control;\n   control.ForeColor = SystemColors.ControlText;\n   if(control.HasChildren)\n   {\n      // Recursively call this method for each child control.\n      foreach(Control childControl in control.Controls)\n      {\n         ResetAllControlsBackColor(childControl);\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control Properties#1\">      // Reset all the controls to the user&#39;s default Control color.\n   private:\n      void ResetAllControlsBackColor( Control^ control )\n      {\n         control-&gt;BackColor = SystemColors::Control;\n         control-&gt;ForeColor = SystemColors::ControlText;\n         if ( control-&gt;HasChildren )\n         {\n            // Recursively call this method for each child control.\n            IEnumerator^ myEnum = control-&gt;Controls-&gt;GetEnumerator();\n            while ( myEnum-&gt;MoveNext() )\n            {\n               Control^ childControl = safe_cast&lt;Control^&gt;(myEnum-&gt;Current);\n               ResetAllControlsBackColor( childControl );\n            }\n         }\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control Properties#1\">&#39; Reset all the controls to the user&#39;s default Control color. \nPrivate Sub ResetAllControlsBackColor(control As Control)\n   control.BackColor = SystemColors.Control\n   control.ForeColor = SystemColors.ControlText\n   If control.HasChildren Then\n      &#39; Recursively call this method for each child control.\n      Dim childControl As Control\n      For Each childControl In  control.Controls\n         ResetAllControlsBackColor(childControl)\n      Next childControl\n   End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Height\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Height_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Height</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the height of the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Height { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The height of the control in pixels.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Changes made to the Height and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Top_\" data-linktype=\"relative-path\">Top</a> property values cause the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Bottom_\" data-linktype=\"relative-path\">Bottom</a> property value of the control to change.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The minimum height for the derived control <a class=\"xref\" href=\"system.windows.forms.splitter\" data-linktype=\"relative-path\">Splitter</a> is one pixel. The default height for the <a class=\"xref\" href=\"system.windows.forms.splitter\" data-linktype=\"relative-path\">Splitter</a> control is three pixels. Setting the height of the <a class=\"xref\" href=\"system.windows.forms.splitter\" data-linktype=\"relative-path\">Splitter</a> control to a value less than one will reset the property value to the default height.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates three <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> controls on a form and sets their size and location by using the various size-related and location-related properties. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> that has a width and height of at least 300 pixels.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control SizeLocation#1\">// Create three buttons and place them on a form using \n// several size and location related properties. \nprivate void AddOKCancelButtons()\n{\n   // Set the button size and location using \n   // the Size and Location properties.\n   Button buttonOK = new Button();\n   buttonOK.Location = new Point(136,248);\n   buttonOK.Size = new Size(75,25);\n   // Set the Text property and make the \n   // button the form&#39;s default button. \n   buttonOK.Text = &quot;&amp;OK&quot;;\n   this.AcceptButton = buttonOK;\n\n   // Set the button size and location using the Top, \n   // Left, Width, and Height properties.\n   Button buttonCancel = new Button();\n   buttonCancel.Top = buttonOK.Top;\n   buttonCancel.Left = buttonOK.Right + 5;\n   buttonCancel.Width = buttonOK.Width;\n   buttonCancel.Height = buttonOK.Height;\n   // Set the Text property and make the \n   // button the form&#39;s cancel button.\n   buttonCancel.Text = &quot;&amp;Cancel&quot;;\n   this.CancelButton = buttonCancel;\n\n   // Set the button size and location using \n   // the Bounds property.\n   Button buttonHelp = new Button();\n   buttonHelp.Bounds = new Rectangle(10,10, 75, 25);\n   // Set the Text property of the button.\n   buttonHelp.Text = &quot;&amp;Help&quot;;\n\n   // Add the buttons to the form.\n   this.Controls.AddRange(new Control[] {buttonOK, buttonCancel, buttonHelp} );\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control SizeLocation#1\">      // Create three buttons and place them on a form using\n      // several size and location related properties.\n      void AddOKCancelButtons()\n      {\n         \n         // Set the button size and location using\n         // the Size and Location properties.\n         Button^ buttonOK = gcnew Button;\n         buttonOK-&gt;Location = Point(136,248);\n         buttonOK-&gt;Size = System::Drawing::Size( 75, 25 );\n         \n         // Set the Text property and make the\n         // button the form&#39;s default button.\n         buttonOK-&gt;Text = &quot;&amp;OK&quot;;\n         this-&gt;AcceptButton = buttonOK;\n         \n         // Set the button size and location using the Top,\n         // Left, Width, and Height properties.\n         Button^ buttonCancel = gcnew Button;\n         buttonCancel-&gt;Top = buttonOK-&gt;Top;\n         buttonCancel-&gt;Left = buttonOK-&gt;Right + 5;\n         buttonCancel-&gt;Width = buttonOK-&gt;Width;\n         buttonCancel-&gt;Height = buttonOK-&gt;Height;\n         \n         // Set the Text property and make the\n         // button the form&#39;s cancel button.\n         buttonCancel-&gt;Text = &quot;&amp;Cancel&quot;;\n         this-&gt;CancelButton = buttonCancel;\n         \n         // Set the button size and location using\n         // the Bounds property.\n         Button^ buttonHelp = gcnew Button;\n         buttonHelp-&gt;Bounds = Rectangle(10,10,75,25);\n         \n         // Set the Text property of the button.\n         buttonHelp-&gt;Text = &quot;&amp;Help&quot;;\n         \n         // Add the buttons to the form.\n         array&lt;Control^&gt;^temp1 = {buttonOK,buttonCancel,buttonHelp};\n         this-&gt;Controls-&gt;AddRange( temp1 );\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control SizeLocation#1\">&#39; Create three buttons and place them on a form using \n&#39; several size and location related properties. \nPrivate Sub AddOKCancelButtons()\n   &#39; Set the button size and location using \n      &#39; the Size and Location properties. \n   Dim buttonOK As New Button()\n   buttonOK.Location = New Point(136, 248)\n   buttonOK.Size = New Size(75, 25)\n   &#39; Set the Text property and make the \n   &#39; button the form&#39;s default button. \n   buttonOK.Text = &quot;&amp;OK&quot;\n   Me.AcceptButton = buttonOK\n   \n   &#39; Set the button size and location using the Top, \n   &#39; Left, Width, and Height properties. \n   Dim buttonCancel As New Button()\n   buttonCancel.Top = buttonOK.Top\n   buttonCancel.Left = buttonOK.Right + 5\n   buttonCancel.Width = buttonOK.Width\n   buttonCancel.Height = buttonOK.Height\n   &#39; Set the Text property and make the \n   &#39; button the form&#39;s cancel button. \n   buttonCancel.Text = &quot;&amp;Cancel&quot;\n   Me.CancelButton = buttonCancel\n   \n   &#39; Set the button size and location using \n   &#39; the Bounds property. \n   Dim buttonHelp As New Button()\n   buttonHelp.Bounds = New Rectangle(10, 10, 75, 25)\n   &#39; Set the Text property of the button.\n   buttonHelp.Text = &quot;&amp;Help&quot;\n   \n   &#39; Add the buttons to the form.\n   Me.Controls.AddRange(New Control() {buttonOK, buttonCancel, buttonHelp})\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ImeMode\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_ImeMode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ImeMode</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the Input Method Editor (IME) mode of the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.ImeMode ImeMode { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.imemode\" data-linktype=\"relative-path\">ImeMode</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.windows.forms.imemode\" data-linktype=\"relative-path\">ImeMode</a> values. The default is <a class=\"xref\" href=\"system.windows.forms.imemode\" data-linktype=\"relative-path\">ImeMode</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.invalidenumargumentexception\" data-linktype=\"relative-path\">InvalidEnumArgumentException</a></div>\r\n                  </div>\r\n                  <p>The assigned value is not one of the <a class=\"xref\" href=\"system.windows.forms.imemode\" data-linktype=\"relative-path\">ImeMode</a> enumeration values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An IME is a program that enables users to enter complex characters and symbols, such as Japanese Kanji characters, using a standard keyboard. The ImeMode property is typically set to <a class=\"xref\" href=\"system.windows.forms.imemode\" data-linktype=\"relative-path\">System.Windows.Forms.ImeMode</a> for a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> control that is intended to only enter numeric values. The ImeMode property value is set to <a class=\"xref\" href=\"system.windows.forms.imemode\" data-linktype=\"relative-path\">System.Windows.Forms.ImeMode</a> for the <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> class.  </p>\n<p> Most classes that do not directly support Input Method Editors, or allow direct input from an IME, will set the value of this property to <a class=\"xref\" href=\"system.windows.forms.imemode\" data-linktype=\"relative-path\">ImeMode</a>.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> The user can interactively change the ImeMode unless it has been programmatically set to <a class=\"xref\" href=\"system.windows.forms.imemode\" data-linktype=\"relative-path\">System.Windows.Forms.ImeMode</a>. In this case, the user will not be able to use the IME.  </p>\n<p> The ImeMode property is ignored on Windows 8 when the global input mode is in effect. For more info, see<a href=\"http://go.microsoft.com/fwlink/?LinkID=256509\" data-linktype=\"external\">Switch Text Input Changed from Per-Thread to Per-User</a>.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ImeModeBase\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_ImeModeBase_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ImeModeBase</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the IME mode of a control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual System.Windows.Forms.ImeMode ImeModeBase { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.imemode\" data-linktype=\"relative-path\">ImeMode</a></div>\r\n                  </div>\r\n                  <p>The IME mode of the control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_InvokeRequired\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_InvokeRequired_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InvokeRequired</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the caller must call an invoke method when making method calls to the control because the caller is on a different thread than the one the control was created on.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool InvokeRequired { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the control&#39;s <span class=\"xref\">stem.Windows.Forms.Control.Handle*</span> was created on a different thread than the calling thread (indicating that you must make calls to the control through an invoke method); otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Controls in Windows Forms are bound to a specific thread and are not thread safe. Therefore, if you are calling a control&#39;s method from a different thread, you must use one of the control&#39;s invoke methods to marshal the call to the proper thread. This property can be used to determine if you must call an invoke method, which can be useful if you do not know what thread owns a control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In addition to the InvokeRequired property, there are four methods on a control that are thread safe to call: <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invoke_\" data-linktype=\"relative-path\">Invoke</a>,<a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BeginInvoke_\" data-linktype=\"relative-path\">BeginInvoke</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_EndInvoke_\" data-linktype=\"relative-path\">EndInvoke</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CreateGraphics_\" data-linktype=\"relative-path\">CreateGraphics</a> if the handle for the control has already been created. Calling <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CreateGraphics_\" data-linktype=\"relative-path\">CreateGraphics</a> before the control&#39;s handle has been created on a background thread can cause illegal cross thread calls. For all other method calls, you should use one of these invoke methods when calling from a different thread.  </p>\n</div>\n<p> If the control&#39;s handle does not yet exist, InvokeRequired searches up the control&#39;s parent chain until it finds a control or form that does have a window handle. If no appropriate handle can be found, the InvokeRequired method returns <code>false</code>.  </p>\n<p> This means that InvokeRequiredcan return <code>false</code> if <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invoke_\" data-linktype=\"relative-path\">Invoke</a> is not required (the call occurs on the same thread), or if the control was created on a different thread but the control&#39;s handle has not yet been created.  </p>\n<p> In the case where the control&#39;s handle has not yet been created, you should not simply call properties, methods, or events on the control. This might cause the control&#39;s handle to be created on the background thread, isolating the control on a thread without a message pump and making the application unstable.  </p>\n<p> You can protect against this case by also checking the value of <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_IsHandleCreated_\" data-linktype=\"relative-path\">IsHandleCreated</a> when InvokeRequired returns <code>false</code> on a background thread. If the control handle has not yet been created, you must wait until it has been created before calling <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invoke_\" data-linktype=\"relative-path\">Invoke</a> or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BeginInvoke_\" data-linktype=\"relative-path\">BeginInvoke</a>. Typically, this happens only if a background thread is created in the constructor of the primary form for the application (as in <code>Application.Run(new MainForm())</code>, before the form has been shown or <code>Application.Run</code> has been called.  </p>\n<p> One solution is to wait until the form&#39;s handle has been created before starting the background thread. Either force handle creation by calling the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Handle_\" data-linktype=\"relative-path\">Handle</a> property, or wait until the <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_Load\" data-linktype=\"relative-path\">Load</a> event to start the background process.  </p>\n<p> An even better solution is to use the <code>SynchronizationContext</code> returned by <a class=\"xref\" href=\"system.threading.synchronizationcontext\" data-linktype=\"relative-path\">SynchronizationContext</a> rather than a control for cross-thread marshaling.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An exception might be thrown if the thread that should process the message is no longer active.  </p>\n</div>\n<p> For more information about multithreaded Windows Forms controls, see <a href=\"../Topic/How%20to:%20Use%20a%20Background%20Thread%20to%20Search%20for%20Files.md\" data-linktype=\"relative-path\">How to: Use a Background Thread to Search for Files</a> and <a href=\"../Topic/How%20to:%20Make%20Thread-Safe%20Calls%20to%20Windows%20Forms%20Controls.md\" data-linktype=\"relative-path\">How to: Make Thread-Safe Calls to Windows Forms Controls</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_IsAccessible\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_IsAccessible_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsAccessible</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the control is visible to accessibility applications.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsAccessible { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the control is visible to accessibility applications; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_IsDisposed\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_IsDisposed_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDisposed</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the control has been disposed of.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsDisposed { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the control has been disposed of; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When this property returns <code>true</code>, the control is disposed of and can no longer be referenced as a valid Windows control. Even though the instance of a control is disposed of, it is still maintained in memory until it is removed from memory through garbage collection. When a control is disposed, you cannot call its <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RecreateHandle_\" data-linktype=\"relative-path\">RecreateHandle</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_IsHandleCreated\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_IsHandleCreated_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsHandleCreated</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the control has a handle associated with it.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsHandleCreated { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a handle has been assigned to the control; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the IsHandleCreated property to determine whether <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CreateHandle_\" data-linktype=\"relative-path\">CreateHandle</a> has been called.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_IsMirrored\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_IsMirrored_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsMirrored</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the control is mirrored.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsMirrored { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the control is mirrored; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A mirrored control displays both layout and text from right to left. For more information, see <a href=\"http://msdn.microsoft.com/en-us/7c5c4ecc-9bfb-4508-8383-753e306719b1\" data-linktype=\"external\">How to: Create Mirrored Windows Forms and Controls</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_LayoutEngine\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_LayoutEngine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LayoutEngine</div>        \r\n          </div>\r\n    \r\n            <p>Gets a cached instance of the control&#39;s layout engine.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Windows.Forms.Layout.LayoutEngine LayoutEngine { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.layout.layoutengine\" data-linktype=\"relative-path\">LayoutEngine</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.layout.layoutengine\" data-linktype=\"relative-path\">LayoutEngine</a> for the control&#39;s contents.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The LayoutEngine property gets the layout engine for the control&#39;s children rather than for the control itself.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Left\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Left_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Left</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the distance, in pixels, between the left edge of the control and the left edge of its container&#39;s client area.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Left { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> representing the distance, in pixels, between the left edge of the control and the left edge of its container&#39;s client area.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Left property value is equivalent to the <a class=\"xref\" href=\"system.drawing.point#System_Drawing_Point_X_\" data-linktype=\"relative-path\">X</a> property of the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Location_\" data-linktype=\"relative-path\">Location</a> property value of the control.  </p>\n<p> Changes made to the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Width_\" data-linktype=\"relative-path\">Width</a> and Left property values cause the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Right_\" data-linktype=\"relative-path\">Right</a> property value of the control to change.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates three <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> controls on a form and sets their size and location by using the various size-related and location-related properties. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> that has a width and height of at least 300 pixels.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control SizeLocation#1\">// Create three buttons and place them on a form using \n// several size and location related properties. \nprivate void AddOKCancelButtons()\n{\n   // Set the button size and location using \n   // the Size and Location properties.\n   Button buttonOK = new Button();\n   buttonOK.Location = new Point(136,248);\n   buttonOK.Size = new Size(75,25);\n   // Set the Text property and make the \n   // button the form&#39;s default button. \n   buttonOK.Text = &quot;&amp;OK&quot;;\n   this.AcceptButton = buttonOK;\n\n   // Set the button size and location using the Top, \n   // Left, Width, and Height properties.\n   Button buttonCancel = new Button();\n   buttonCancel.Top = buttonOK.Top;\n   buttonCancel.Left = buttonOK.Right + 5;\n   buttonCancel.Width = buttonOK.Width;\n   buttonCancel.Height = buttonOK.Height;\n   // Set the Text property and make the \n   // button the form&#39;s cancel button.\n   buttonCancel.Text = &quot;&amp;Cancel&quot;;\n   this.CancelButton = buttonCancel;\n\n   // Set the button size and location using \n   // the Bounds property.\n   Button buttonHelp = new Button();\n   buttonHelp.Bounds = new Rectangle(10,10, 75, 25);\n   // Set the Text property of the button.\n   buttonHelp.Text = &quot;&amp;Help&quot;;\n\n   // Add the buttons to the form.\n   this.Controls.AddRange(new Control[] {buttonOK, buttonCancel, buttonHelp} );\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control SizeLocation#1\">      // Create three buttons and place them on a form using\n      // several size and location related properties.\n      void AddOKCancelButtons()\n      {\n         \n         // Set the button size and location using\n         // the Size and Location properties.\n         Button^ buttonOK = gcnew Button;\n         buttonOK-&gt;Location = Point(136,248);\n         buttonOK-&gt;Size = System::Drawing::Size( 75, 25 );\n         \n         // Set the Text property and make the\n         // button the form&#39;s default button.\n         buttonOK-&gt;Text = &quot;&amp;OK&quot;;\n         this-&gt;AcceptButton = buttonOK;\n         \n         // Set the button size and location using the Top,\n         // Left, Width, and Height properties.\n         Button^ buttonCancel = gcnew Button;\n         buttonCancel-&gt;Top = buttonOK-&gt;Top;\n         buttonCancel-&gt;Left = buttonOK-&gt;Right + 5;\n         buttonCancel-&gt;Width = buttonOK-&gt;Width;\n         buttonCancel-&gt;Height = buttonOK-&gt;Height;\n         \n         // Set the Text property and make the\n         // button the form&#39;s cancel button.\n         buttonCancel-&gt;Text = &quot;&amp;Cancel&quot;;\n         this-&gt;CancelButton = buttonCancel;\n         \n         // Set the button size and location using\n         // the Bounds property.\n         Button^ buttonHelp = gcnew Button;\n         buttonHelp-&gt;Bounds = Rectangle(10,10,75,25);\n         \n         // Set the Text property of the button.\n         buttonHelp-&gt;Text = &quot;&amp;Help&quot;;\n         \n         // Add the buttons to the form.\n         array&lt;Control^&gt;^temp1 = {buttonOK,buttonCancel,buttonHelp};\n         this-&gt;Controls-&gt;AddRange( temp1 );\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control SizeLocation#1\">&#39; Create three buttons and place them on a form using \n&#39; several size and location related properties. \nPrivate Sub AddOKCancelButtons()\n   &#39; Set the button size and location using \n      &#39; the Size and Location properties. \n   Dim buttonOK As New Button()\n   buttonOK.Location = New Point(136, 248)\n   buttonOK.Size = New Size(75, 25)\n   &#39; Set the Text property and make the \n   &#39; button the form&#39;s default button. \n   buttonOK.Text = &quot;&amp;OK&quot;\n   Me.AcceptButton = buttonOK\n   \n   &#39; Set the button size and location using the Top, \n   &#39; Left, Width, and Height properties. \n   Dim buttonCancel As New Button()\n   buttonCancel.Top = buttonOK.Top\n   buttonCancel.Left = buttonOK.Right + 5\n   buttonCancel.Width = buttonOK.Width\n   buttonCancel.Height = buttonOK.Height\n   &#39; Set the Text property and make the \n   &#39; button the form&#39;s cancel button. \n   buttonCancel.Text = &quot;&amp;Cancel&quot;\n   Me.CancelButton = buttonCancel\n   \n   &#39; Set the button size and location using \n   &#39; the Bounds property. \n   Dim buttonHelp As New Button()\n   buttonHelp.Bounds = New Rectangle(10, 10, 75, 25)\n   &#39; Set the Text property of the button.\n   buttonHelp.Text = &quot;&amp;Help&quot;\n   \n   &#39; Add the buttons to the form.\n   Me.Controls.AddRange(New Control() {buttonOK, buttonCancel, buttonHelp})\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Location\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Location_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Location</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the coordinates of the upper-left corner of the control relative to the upper-left corner of its container.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Drawing.Point Location { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.drawing.point\" data-linktype=\"relative-path\">Point</a> that represents the upper-left corner of the control relative to the upper-left corner of its container.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Because the <a class=\"xref\" href=\"system.drawing.point\" data-linktype=\"relative-path\">Point</a> class is a value type (<code>Structure</code> in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/vbprvb-md.md&quot; -->Visual Basic<!--END INCLUDE -->, <code>struct</code> in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/csprcs-md.md&quot; -->Visual C#<!--END INCLUDE -->), it is returned by value, meaning accessing the property returns a copy of the upper-left point of the control. So, adjusting the <a class=\"xref\" href=\"system.drawing.point#System_Drawing_Point_X_\" data-linktype=\"relative-path\">X</a> or <a class=\"xref\" href=\"system.drawing.point#System_Drawing_Point_Y_\" data-linktype=\"relative-path\">Y</a> properties of the <a class=\"xref\" href=\"system.drawing.point\" data-linktype=\"relative-path\">Point</a> returned from this property will not affect the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Left_\" data-linktype=\"relative-path\">Left</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Right_\" data-linktype=\"relative-path\">Right</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Top_\" data-linktype=\"relative-path\">Top</a>, or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Bottom_\" data-linktype=\"relative-path\">Bottom</a> property values of the control. To adjust these properties set each property value individually, or set the Location property with a new <a class=\"xref\" href=\"system.drawing.point\" data-linktype=\"relative-path\">Point</a>.  </p>\n<p> If the <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> is a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>, the Location property value represents the upper-left corner of the <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> in screen coordinates.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a <a class=\"xref\" href=\"system.windows.forms.groupbox\" data-linktype=\"relative-path\">GroupBox</a> and sets some of its common properties. The example creates a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>and sets its Location within the group box. Next, it sets the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property of the group box, and docks the group box to the top of the form. Lastly, it disables the group box by setting the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Enabled_\" data-linktype=\"relative-path\">Enabled</a> property to <code>false</code>, which causes all controls contained within the group box to be disabled.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control Properties#2\">// Add a GroupBox to a form and set some of its common properties.\nprivate void AddMyGroupBox()\n{\n   // Create a GroupBox and add a TextBox to it.\n   GroupBox groupBox1 = new GroupBox();\n   TextBox textBox1 = new TextBox();\n   textBox1.Location = new Point(15, 15);\n   groupBox1.Controls.Add(textBox1);\n\n   // Set the Text and Dock properties of the GroupBox.\n   groupBox1.Text = &quot;MyGroupBox&quot;;\n   groupBox1.Dock = DockStyle.Top;\n\n   // Disable the GroupBox (which disables all its child controls)\n   groupBox1.Enabled = false;\n\n   // Add the Groupbox to the form.\n   this.Controls.Add(groupBox1);\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control Properties#2\">      // Add a GroupBox to a form and set some of its common properties.\n   private:\n      void AddMyGroupBox()\n      {\n         // Create a GroupBox and add a TextBox to it.\n         GroupBox^ groupBox1 = gcnew GroupBox;\n         TextBox^ textBox1 = gcnew TextBox;\n         textBox1-&gt;Location = Point(15,15);\n         groupBox1-&gt;Controls-&gt;Add( textBox1 );\n\n         // Set the Text and Dock properties of the GroupBox.\n         groupBox1-&gt;Text = &quot;MyGroupBox&quot;;\n         groupBox1-&gt;Dock = DockStyle::Top;\n\n         // Disable the GroupBox (which disables all its child controls)\n         groupBox1-&gt;Enabled = false;\n\n         // Add the Groupbox to the form.\n         this-&gt;Controls-&gt;Add( groupBox1 );\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control Properties#2\">&#39; Add a GroupBox to a form and set some of its common properties.\nPrivate Sub AddMyGroupBox()\n   &#39; Create a GroupBox and add a TextBox to it.\n   Dim groupBox1 As New GroupBox()\n   Dim textBox1 As New TextBox()\n   textBox1.Location = New Point(15, 15)\n   groupBox1.Controls.Add(textBox1)\n   \n   &#39; Set the Text and Dock properties of the GroupBox.\n   groupBox1.Text = &quot;MyGroupBox&quot;\n   groupBox1.Dock = DockStyle.Top\n   \n   &#39; Disable the GroupBox (which disables all its child controls)\n   groupBox1.Enabled = False\n   \n   &#39; Add the Groupbox to the form.\n   Me.Controls.Add(groupBox1)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Margin\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Margin_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Margin</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the space between controls.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.Padding Margin { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.padding\" data-linktype=\"relative-path\">Padding</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.padding\" data-linktype=\"relative-path\">Padding</a> representing the space between controls.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Controls receive default values for Margin that are reasonably close to Windows user interface guidelines. Some adjustments might still be necessary for particular applications.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Setting the Margin property on a docked control has no effect on the distance of the control from the the edges of its container.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_MaximumSize\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_MaximumSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MaximumSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the size that is the upper limit that <span class=\"xref\">stem.Windows.Forms.Control.GetPreferredSize*</span> can specify.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Drawing.Size MaximumSize { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>An ordered pair of type <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> representing the width and height of a rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_MinimumSize\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_MinimumSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MinimumSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the size that is the lower limit that <span class=\"xref\">stem.Windows.Forms.Control.GetPreferredSize*</span> can specify.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Drawing.Size MinimumSize { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>An ordered pair of type <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> representing the width and height of a rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ModifierKeys\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_ModifierKeys_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ModifierKeys</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating which of the modifier keys (SHIFT, CTRL, and ALT) is in a pressed state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Forms.Keys ModifierKeys { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.keys\" data-linktype=\"relative-path\">Keys</a></div>\r\n                  </div>\r\n                  <p>A bitwise combination of the <a class=\"xref\" href=\"system.windows.forms.keys\" data-linktype=\"relative-path\">Keys</a> values. The default is <a class=\"xref\" href=\"system.windows.forms.keys\" data-linktype=\"relative-path\">Keys</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example hides a button when the CTRL key is pressed while the button is clicked. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> named <code>button1</code> on a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control Members4#2\">private void button1_Click(object sender, System.EventArgs e)\n{\n   /* If the CTRL key is pressed when the \n      * control is clicked, hide the control. */\n   if(Control.ModifierKeys == Keys.Control)\n   {\n      ((Control)sender).Hide();\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control Members4#2\">Private Sub button1_Click(sender As Object, _\n  e As EventArgs) Handles button1.Click\n   &#39; If the CTRL key is pressed when the \n   &#39; control is clicked, hide the control. \n   If Control.ModifierKeys = Keys.Control Then\n      CType(sender, Control).Hide()\n   End If\nEnd Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control Members4#2\">   private:\n      void button1_Click( Object^ sender, System::EventArgs^ /*e*/ )\n      {\n         /* If the CTRL key is pressed when the\n            * control is clicked, hide the control. */\n         if ( Control::ModifierKeys == Keys::Control )\n         {\n            (dynamic_cast&lt;Control^&gt;(sender))-&gt;Hide();\n         }\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_MouseButtons\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_MouseButtons_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseButtons</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating which of the mouse buttons is in a pressed state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Forms.MouseButtons MouseButtons { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.mousebuttons\" data-linktype=\"relative-path\">MouseButtons</a></div>\r\n                  </div>\r\n                  <p>A bitwise combination of the <a class=\"xref\" href=\"system.windows.forms.mousebuttons\" data-linktype=\"relative-path\">MouseButtons</a> enumeration values. The default is <a class=\"xref\" href=\"system.windows.forms.mousebuttons\" data-linktype=\"relative-path\">MouseButtons</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BackColor_\" data-linktype=\"relative-path\">BackColor</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RectangleToScreen_\" data-linktype=\"relative-path\">RectangleToScreen</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_PointToScreen_\" data-linktype=\"relative-path\">PointToScreen</a>, MouseButtons, <a class=\"xref\" href=\"system.windows.forms.controlpaint#System_Windows_Forms_ControlPaint_DrawReversibleFrame_\" data-linktype=\"relative-path\">DrawReversibleFrame</a>, and <a class=\"xref\" href=\"system.drawing.rectangle#System_Drawing_Rectangle_IntersectsWith_\" data-linktype=\"relative-path\">IntersectsWith</a> members. To run the example, paste the following code in a form called Form1 containing several controls. This example requires that the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseMove\" data-linktype=\"relative-path\">MouseMove</a>, and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseUp\" data-linktype=\"relative-path\">MouseUp</a> events are connected to the event handlers defined in the example.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.RectangleToScreen#2\">    // The following three methods will draw a rectangle and allow \n    // the user to use the mouse to resize the rectangle.  If the \n    // rectangle intersects a control&#39;s client rectangle, the \n    // control&#39;s color will change.\n\n    bool isDrag = false;\n    Rectangle theRectangle = new Rectangle\n\t\t(new Point(0, 0), new Size(0, 0));\n    Point startPoint;\n\n    private void Form1_MouseDown(object sender, \n\t\tSystem.Windows.Forms.MouseEventArgs e)\n    {\n\n        // Set the isDrag variable to true and get the starting point \n        // by using the PointToScreen method to convert form \n\t\t// coordinates to screen coordinates.\n        if (e.Button==MouseButtons.Left)\n        {\n            isDrag = true;\n        }\n\n        Control control = (Control) sender;\n\n        // Calculate the startPoint by using the PointToScreen \n        // method.\n        startPoint = control.PointToScreen(new Point(e.X, e.Y));\n    }\n\n    private void Form1_MouseMove(object sender, \n\t\tSystem.Windows.Forms.MouseEventArgs e)\n    {\n\n        // If the mouse is being dragged, \n\t\t// undraw and redraw the rectangle as the mouse moves.\n        if (isDrag)\n\n            // Hide the previous rectangle by calling the \n\t\t\t// DrawReversibleFrame method with the same parameters.\n        {\n            ControlPaint.DrawReversibleFrame(theRectangle, \n\t\t\t\tthis.BackColor, FrameStyle.Dashed);\n\n            // Calculate the endpoint and dimensions for the new \n\t        // rectangle, again using the PointToScreen method.\n            Point endPoint = ((Control) sender).PointToScreen(new Point(e.X, e.Y));\n\n            int width = endPoint.X-startPoint.X;\n            int height = endPoint.Y-startPoint.Y;\n            theRectangle = new Rectangle(startPoint.X, \n\t\t\t\tstartPoint.Y, width, height);\n\n            // Draw the new rectangle by calling DrawReversibleFrame\n\t\t\t// again.  \n            ControlPaint.DrawReversibleFrame(theRectangle, \n\t\t\t\tthis.BackColor, FrameStyle.Dashed);\n        }\n    }\n\n    private void Form1_MouseUp(object sender, \n\t\tSystem.Windows.Forms.MouseEventArgs e)\n    {\n\n        // If the MouseUp event occurs, the user is not dragging.\n        isDrag = false;\n\n        // Draw the rectangle to be evaluated. Set a dashed frame style \n        // using the FrameStyle enumeration.\n        ControlPaint.DrawReversibleFrame(theRectangle, \n\t\t\tthis.BackColor, FrameStyle.Dashed);\n\n        // Find out which controls intersect the rectangle and \n        // change their color. The method uses the RectangleToScreen  \n        // method to convert the Control&#39;s client coordinates \n\t\t// to screen coordinates.\n\t    Rectangle controlRectangle;\n        for(int i = 0; i &lt; Controls.Count; i++)\n        {\n            controlRectangle = Controls[i].RectangleToScreen\n\t\t\t\t(Controls[i].ClientRectangle);\n            if (controlRectangle.IntersectsWith(theRectangle))\n            {\n                Controls[i].BackColor = Color.BurlyWood;\n            }\n        }\n\n        // Reset the rectangle.\n        theRectangle = new Rectangle(0, 0, 0, 0);\n    }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.RectangleToScreen#2\">private:\n   // The following three methods will draw a rectangle and allow \n   // the user to use the mouse to resize the rectangle.  If the \n   // rectangle intersects a control&#39;s client rectangle, the \n   // control&#39;s color will change.\n   bool isDrag;\n   Rectangle theRectangle;\n   Point startPoint;\n   void Form1_MouseDown( Object^ sender, System::Windows::Forms::MouseEventArgs^ e )\n   {\n      \n      // Set the isDrag variable to true and get the starting point \n      // by using the PointToScreen method to convert form \n      // coordinates to screen coordinates.\n      if ( e-&gt;Button == ::MouseButtons::Left )\n      {\n         isDrag = true;\n      }\n\n      Control^ control = dynamic_cast&lt;Control^&gt;(sender);\n      \n      // Calculate the startPoint by using the PointToScreen \n      // method.\n      startPoint = control-&gt;PointToScreen( Point(e-&gt;X,e-&gt;Y) );\n   }\n\n   void Form1_MouseMove( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n   {\n      \n      // If the mouse is being dragged, \n      // undraw and redraw the rectangle as the mouse moves.\n      if ( isDrag )\n      {\n         ControlPaint::DrawReversibleFrame( theRectangle, this-&gt;BackColor, FrameStyle::Dashed );\n         \n         // Calculate the endpoint and dimensions for the new \n         // rectangle, again using the PointToScreen method.\n         Point endPoint = this-&gt;PointToScreen( Point(e-&gt;X,e-&gt;Y) );\n         int width = endPoint.X - startPoint.X;\n         int height = endPoint.Y - startPoint.Y;\n         theRectangle = Rectangle(startPoint.X,startPoint.Y,width,height);\n         \n         // Draw the new rectangle by calling DrawReversibleFrame\n         // again.  \n         ControlPaint::DrawReversibleFrame( theRectangle, this-&gt;BackColor, FrameStyle::Dashed );\n      }\n   }\n\n   void Form1_MouseUp( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ /*e*/ )\n   {\n      \n      // If the MouseUp event occurs, the user is not dragging.\n      isDrag = false;\n      \n      // Draw the rectangle to be evaluated. Set a dashed frame style \n      // using the FrameStyle enumeration.\n      ControlPaint::DrawReversibleFrame( theRectangle, this-&gt;BackColor, FrameStyle::Dashed );\n      \n      // Find out which controls intersect the rectangle and \n      // change their color. The method uses the RectangleToScreen  \n      // method to convert the Control&#39;s client coordinates \n      // to screen coordinates.\n      Rectangle controlRectangle;\n      for ( int i = 0; i &lt; Controls-&gt;Count; i++ )\n      {\n         controlRectangle = Controls[ i ]-&gt;RectangleToScreen( Controls[ i ]-&gt;ClientRectangle );\n         if ( controlRectangle.IntersectsWith( theRectangle ) )\n         {\n            Controls[ i ]-&gt;BackColor = Color::BurlyWood;\n         }\n\n      }\n      \n      // Reset the rectangle.\n      theRectangle = Rectangle(0,0,0,0);\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.RectangleToScreen#2\">    &#39; The following three methods will draw a rectangle and allow \n    &#39; the user to use the mouse to resize the rectangle.  If the \n    &#39; rectangle intersects a control&#39;s client rectangle, the \n    &#39; control&#39;s color will change.\n\n    Dim isDrag As Boolean = False\n    Dim theRectangle As New rectangle(New Point(0, 0), New Size(0, 0))\n    Dim startPoint As Point\n\n    Private Sub Form1_MouseDown(ByVal sender As Object, ByVal e As _\n        System.Windows.Forms.MouseEventArgs) Handles MyBase.MouseDown\n\n        &#39; Set the isDrag variable to true and get the starting point \n        &#39; by using the PointToScreen method to convert form coordinates to\n        &#39; screen coordinates.\n        If (e.Button = MouseButtons.Left) Then\n            isDrag = True\n        End If\n\n        Dim control As Control = CType(sender, Control)\n\n        &#39; Calculate the startPoint by using the PointToScreen \n        &#39; method.\n        startPoint = control.PointToScreen(New Point(e.X, e.Y))\n    End Sub\n\n    Private Sub Form1_MouseMove(ByVal sender As Object, ByVal e As _\n    System.Windows.Forms.MouseEventArgs) Handles MyBase.MouseMove\n\n        &#39; If the mouse is being dragged, undraw and redraw the rectangle\n        &#39; as the mouse moves.\n        If (isDrag) Then\n\n            &#39; Hide the previous rectangle by calling the DrawReversibleFrame \n            &#39; method with the same parameters.\n            ControlPaint.DrawReversibleFrame(theRectangle, Me.BackColor, _\n                FrameStyle.Dashed)\n\n            &#39; Calculate the endpoint and dimensions for the new rectangle, \n            &#39; again using the PointToScreen method.\n            Dim endPoint As Point = CType(sender, Control).PointToScreen(New Point(e.X, e.Y))\n            Dim width As Integer = endPoint.X - startPoint.X\n            Dim height As Integer = endPoint.Y - startPoint.Y\n            theRectangle = New Rectangle(startPoint.X, startPoint.Y, _\n                width, height)\n\n            &#39; Draw the new rectangle by calling DrawReversibleFrame again.  \n            ControlPaint.DrawReversibleFrame(theRectangle, Me.BackColor, _\n                 FrameStyle.Dashed)\n        End If\n    End Sub\n\n    Private Sub Form1_MouseUp(ByVal sender As Object, ByVal e As _\n    System.Windows.Forms.MouseEventArgs) Handles MyBase.MouseUp\n\n        &#39; If the MouseUp event occurs, the user is not dragging.\n        isDrag = False\n\n        &#39; Draw the rectangle to be evaluated. Set a dashed frame style \n        &#39; using the FrameStyle enumeration.\n        ControlPaint.DrawReversibleFrame(theRectangle, Me.BackColor, _\n            FrameStyle.Dashed)\n\n        &#39; Find out which controls intersect the rectangle and change their color.\n        &#39; The method uses the RectangleToScreen method to convert the \n        &#39; Control&#39;s client coordinates to screen coordinates.\n        Dim i As Integer\n        Dim controlRectangle As Rectangle\n        For i = 0 To Controls.Count - 1\n            controlRectangle = Controls(i).RectangleToScreen _\n                (Controls(i).ClientRectangle)\n            If controlRectangle.IntersectsWith(theRectangle) Then\n                Controls(i).BackColor = Color.BurlyWood\n            End If\n        Next\n\n        &#39; Reset the rectangle.\n        theRectangle = New Rectangle(0, 0, 0, 0)\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_MousePosition\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_MousePosition_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MousePosition</div>        \r\n          </div>\r\n    \r\n            <p>Gets the position of the mouse cursor in screen coordinates.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Drawing.Point MousePosition { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.point\" data-linktype=\"relative-path\">Point</a> that contains the coordinates of the mouse cursor relative to the upper-left corner of the screen.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MousePosition property returns a <a class=\"xref\" href=\"system.drawing.point\" data-linktype=\"relative-path\">Point</a> that represents the mouse cursor position at the time the property was referenced. The coordinates indicate the position on the screen, not relative to the control, and are returned regardless of whether the cursor is positioned over the control. The coordinates of the upper-left corner of the screen are 0,0.  </p>\n<p> The MousePosition property is identical to the <a class=\"xref\" href=\"system.windows.forms.cursor#System_Windows_Forms_Cursor_Position_\" data-linktype=\"relative-path\">Position</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example puts a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> label into an editable state when the user presses ALT+E while the mouse cursor is over the tree node. After the user is done editing the label, the labels cannot be edited again until the ALT+E key combination is pressed again. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> on a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>. The tree view should also have at least one <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> in its <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_Nodes_\" data-linktype=\"relative-path\">Nodes</a> collection.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control Members4#3\">private void treeView1_KeyDown(object sender, KeyEventArgs e)\n{\n   /* If the &#39;Alt&#39; and &#39;E&#39; keys are pressed,\n      * allow the user to edit the TreeNode label. */\n   if(e.Alt &amp;&amp; e.KeyCode == Keys.E)\n         \n   {\n      treeView1.LabelEdit = true;\n      // If there is a TreeNode under the mose cursor, begin editing. \n      TreeNode editNode = treeView1.GetNodeAt(\n         treeView1.PointToClient(System.Windows.Forms.Control.MousePosition));\n      if(editNode != null)\n      { \n         editNode.BeginEdit();\n      }\n   }\n}\n\nprivate void treeView1_AfterLabelEdit(object sender, NodeLabelEditEventArgs e)\n{\n   // Disable the ability to edit the TreeNode labels.\n   treeView1.LabelEdit = false;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control Members4#3\">Private Sub treeView1_KeyDown(sender As Object, _\n  e As KeyEventArgs) Handles treeView1.KeyDown\n   &#39; If the &#39;Alt&#39; and &#39;E&#39; keys are pressed,\n   &#39; allow the user to edit the TreeNode label. \n   If e.Alt And e.KeyCode = Keys.E Then\n      treeView1.LabelEdit = True\n      &#39; If there is a TreeNode under the mose cursor, begin editing. \n      Dim editNode As TreeNode = treeView1.GetNodeAt( _\n        treeView1.PointToClient(System.Windows.Forms.Control.MousePosition))\n      If (editNode IsNot Nothing) Then\n         editNode.BeginEdit()\n      End If\n   End If\nEnd Sub\n\nPrivate Sub treeView1_AfterLabelEdit(sender As Object, _\n  e As NodeLabelEditEventArgs) Handles treeView1.AfterLabelEdit\n   &#39; Disable the ability to edit the TreeNode labels.\n   treeView1.LabelEdit = False\nEnd Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control Members4#3\">   private:\n      void treeView1_KeyDown( Object^ /*sender*/, KeyEventArgs^ e )\n      {\n         /* If the &#39;Alt&#39; and &#39;E&#39; keys are pressed,\n            * allow the user to edit the TreeNode label. */\n         if ( e-&gt;Alt &amp;&amp; e-&gt;KeyCode == Keys::E )\n         {\n            treeView1-&gt;LabelEdit = true;\n            \n            // If there is a TreeNode under the mose cursor, begin editing.\n            TreeNode^ editNode = treeView1-&gt;GetNodeAt( treeView1-&gt;PointToClient( Control::MousePosition ) );\n            if ( editNode != nullptr )\n            {\n               editNode-&gt;BeginEdit();\n            }\n         }\n      }\n\n      void treeView1_AfterLabelEdit( Object^ /*sender*/, NodeLabelEditEventArgs^ /*e*/ )\n      {\n         // Disable the ability to edit the TreeNode labels.\n         treeView1-&gt;LabelEdit = false;\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Name\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Name_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Name</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the name of the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Name { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the control. The default is an empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Name property can be used at run time to evaluate the object by name rather than type and programmatic name. Because the Name property returns a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> type, it can be evaluated in case-style logic statements (<code>Select</code> statement in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/vbprvb-md.md&quot; -->Visual Basic<!--END INCLUDE -->, <code>switch</code> statement in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/csprcs-md.md&quot; -->Visual C#<!--END INCLUDE --> and <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/vcprvc-md.md&quot; -->Visual C++<!--END INCLUDE -->).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the Name of a control in a <a class=\"xref\" href=\"system.windows.forms.messagebox\" data-linktype=\"relative-path\">MessageBox</a> when the control is added or removed from a form.  </p>\n<pre><code class=\"lang-cpp\" name=\"Control.ControlRemoved#1\">   // This example demonstrates the use of the ControlAdded and\n   // ControlRemoved events. This example assumes that two Button controls\n   // are added to the form and connected to the addControl_Click and\n   // removeControl_Click event-handler methods.\nprivate:\n   void Form1_Load( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // Connect the ControlRemoved and ControlAdded event handlers\n      // to the event-handler methods.\n      // ControlRemoved and ControlAdded are not available at design time.\n      this-&gt;ControlRemoved += gcnew System::Windows::Forms::ControlEventHandler( this, &amp;Form1::Control_Removed );\n      this-&gt;ControlAdded += gcnew System::Windows::Forms::ControlEventHandler( this, &amp;Form1::Control_Added );\n   }\n\n   void Control_Added( Object^ /*sender*/, System::Windows::Forms::ControlEventArgs^ e )\n   {\n      MessageBox::Show( String::Format( &quot;The control named {0} has been added to the form.&quot;, e-&gt;Control-&gt;Name ) );\n   }\n\n   void Control_Removed( Object^ /*sender*/, System::Windows::Forms::ControlEventArgs^ e )\n   {\n      MessageBox::Show( String::Format( &quot;The control named {0} has been removed from the form.&quot;, e-&gt;Control-&gt;Name ) );\n   }\n\n   // Click event handler for a Button control. Adds a TextBox to the form.\n   void addControl_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // Create a new TextBox control and add it to the form.\n      TextBox^ textBox1 = gcnew TextBox;\n      textBox1-&gt;Size = System::Drawing::Size( 100, 10 );\n      textBox1-&gt;Location = Point(10,10);\n\n      // Name the control in order to remove it later. The name must be specified\n      // if a control is added at run time.\n      textBox1-&gt;Name = &quot;textBox1&quot;;\n\n      // Add the control to the form&#39;s control collection.\n      this-&gt;Controls-&gt;Add( textBox1 );\n   }\n\n   // Click event handler for a Button control.\n   // Removes the previously added TextBox from the form.\n   void removeControl_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // Loop through all controls in the form&#39;s control collection.\n      IEnumerator^ myEnum = this-&gt;Controls-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         Control^ tempCtrl = safe_cast&lt;Control^&gt;(myEnum-&gt;Current);\n         \n         // Determine whether the control is textBox1,\n         // and if it is, remove it.\n         if ( tempCtrl-&gt;Name-&gt;Equals( &quot;textBox1&quot; ) )\n         {\n            this-&gt;Controls-&gt;Remove( tempCtrl );\n         }\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Control.ControlRemoved#1\">    &#39; This example demonstrates the use of the ControlAdded and\n    &#39; ControlRemoved events. This example assumes that two Button controls \n    &#39; are added to the form and connected to the addControl_Click and \n    &#39; removeControl_Click event-handler methods.\n    Private Sub Form1_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Load\n        &#39; Connect the ControlRemoved and ControlAdded event handlers to the event-handler methods.\n        &#39; ControlRemoved and ControlAdded are not available at design time.\n        AddHandler Me.ControlRemoved, AddressOf Me.Control_Removed\n        AddHandler Me.ControlAdded, AddressOf Me.Control_Added\n    End Sub &#39;Form1_Load\n\n\n    Private Sub Control_Added(ByVal sender As Object, ByVal e As System.Windows.Forms.ControlEventArgs)\n        MessageBox.Show((&quot;The control named &quot; + e.Control.Name + &quot; has been added to the form.&quot;))\n    End Sub\n\n\n    Private Sub Control_Removed(ByVal sender As Object, ByVal e As System.Windows.Forms.ControlEventArgs)\n        MessageBox.Show((&quot;The control named &quot; + e.Control.Name + &quot; has been removed from the form.&quot;))\n    End Sub\n\n\n    &#39; Click event handler for a Button control. Adds a TextBox to the form.\n    Private Sub addControl_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles button1.Click\n        &#39; Create a new TextBox control and add it to the form.\n        Dim textBox1 As New TextBox()\n        textBox1.Size = New Size(100, 10)\n        textBox1.Location = New Point(10, 10)\n        &#39; Name the control in order to remove it later. \n        &#39; The name must be specified if a control is added at run time.\n        textBox1.Name = &quot;textBox1&quot;\n\n        &#39; Add the control to the form&#39;s control collection.\n        Me.Controls.Add(textBox1)\n    End Sub\n\n\n    &#39; Click event handler for a Button control.\n    &#39; Removes the previously added TextBox from the form.\n    Private Sub removeControl_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles button2.Click\n        &#39; Loop through all controls in the form&#39;s control collection.\n        Dim tempCtrl As Control\n        For Each tempCtrl In Me.Controls\n            &#39; Determine whether the control is textBox1,\n            &#39; and if it is, remove it.\n            If tempCtrl.Name = &quot;textBox1&quot; Then\n                Me.Controls.Remove(tempCtrl)\n            End If\n        Next tempCtrl\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Control.ControlRemoved#1\">        // This example demonstrates the use of the ControlAdded and\n        // ControlRemoved events. This example assumes that two Button controls\n        // are added to the form and connected to the addControl_Click and\n        // removeControl_Click event-handler methods.\n        private void Form1_Load(object sender, System.EventArgs e)\n        {\n            // Connect the ControlRemoved and ControlAdded event handlers\n            // to the event-handler methods.\n            // ControlRemoved and ControlAdded are not available at design time.\n            this.ControlRemoved += new System.Windows.Forms.ControlEventHandler(this.Control_Removed);\n            this.ControlAdded += new System.Windows.Forms.ControlEventHandler(this.Control_Added);\n        }\n\n        private void Control_Added(object sender, System.Windows.Forms.ControlEventArgs e)\n        {\n            MessageBox.Show(&quot;The control named &quot; + e.Control.Name + &quot; has been added to the form.&quot;);\n        }\n\n        private void Control_Removed(object sender, System.Windows.Forms.ControlEventArgs e)\n        {\n            MessageBox.Show(&quot;The control named &quot; + e.Control.Name + &quot; has been removed from the form.&quot;);\n        }\n\n        // Click event handler for a Button control. Adds a TextBox to the form.\n        private void addControl_Click(object sender, System.EventArgs e)\n        {\n            // Create a new TextBox control and add it to the form.\n            TextBox textBox1 = new TextBox();\n            textBox1.Size = new Size(100,10);\n            textBox1.Location = new Point(10,10);\n            // Name the control in order to remove it later. The name must be specified\n            // if a control is added at run time.\n            textBox1.Name = &quot;textBox1&quot;;\n\n            // Add the control to the form&#39;s control collection.\n            this.Controls.Add(textBox1);\n        }\n\n        // Click event handler for a Button control.\n        // Removes the previously added TextBox from the form.\n        private void removeControl_Click(object sender, System.EventArgs e)\n        {\n            // Loop through all controls in the form&#39;s control collection.\n            foreach (Control tempCtrl in this.Controls)\n            {\n                // Determine whether the control is textBox1,\n                // and if it is, remove it.\n                if (tempCtrl.Name == &quot;textBox1&quot;)\n                {\n                    this.Controls.Remove(tempCtrl);\n                }\n            }\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Padding\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Padding_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Padding</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets padding within the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.Padding Padding { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.padding\" data-linktype=\"relative-path\">Padding</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.padding\" data-linktype=\"relative-path\">Padding</a> representing the control&#39;s internal spacing characteristics.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For containers such as <a class=\"xref\" href=\"system.windows.forms.groupbox\" data-linktype=\"relative-path\">GroupBox</a> and <a class=\"xref\" href=\"system.windows.forms.tabcontrol\" data-linktype=\"relative-path\">TabControl</a>, the Padding property gets or sets their respective <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DisplayRectangle_\" data-linktype=\"relative-path\">DisplayRectangle</a> properties. The <a class=\"xref\" href=\"system.windows.forms.scrollablecontrol#System_Windows_Forms_ScrollableControl_DockPadding_\" data-linktype=\"relative-path\">DockPadding</a> property is equal to its Padding property.  </p>\n<p> Controls receive default values for Padding that are reasonably close to Windows user interface guidelines. Some adjustments might still be necessary for particular applications.  </p>\n<p> All controls that implement <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GetPreferredSize_\" data-linktype=\"relative-path\">GetPreferredSize</a> are enlarged by the amount in Padding when <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_AutoSize_\" data-linktype=\"relative-path\">AutoSize</a> is <code>true</code>.  </p>\n<p> The following controls do not use Padding:  </p>\n<ul>\n<li><p>Controls that do not implement <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_AutoSize_\" data-linktype=\"relative-path\">AutoSize</a> through <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GetPreferredSize_\" data-linktype=\"relative-path\">GetPreferredSize</a>  </p>\n</li>\n<li><p>Custom controls that directly inherit from <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a>  </p>\n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.axhost\" data-linktype=\"relative-path\">AxHost</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.datagridview\" data-linktype=\"relative-path\">DataGridView</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.datetimepicker\" data-linktype=\"relative-path\">DateTimePicker</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.hscrollbar\" data-linktype=\"relative-path\">HScrollBar</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.listview\" data-linktype=\"relative-path\">ListView</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.maskedtextbox\" data-linktype=\"relative-path\">MaskedTextBox</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.monthcalendar\" data-linktype=\"relative-path\">MonthCalendar</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.progressbar\" data-linktype=\"relative-path\">ProgressBar</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.propertygrid\" data-linktype=\"relative-path\">PropertyGrid</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.splitcontainer\" data-linktype=\"relative-path\">SplitContainer</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.textboxbase\" data-linktype=\"relative-path\">TextBoxBase</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.vscrollbar\" data-linktype=\"relative-path\">VScrollBar</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.webbrowser\" data-linktype=\"relative-path\">WebBrowser</a></li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Parent\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Parent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parent</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the parent container of the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.Control Parent { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> that represents the parent or container control of the control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Setting the Parent property value to <code>null</code> removes the control from the <a class=\"xref\" href=\"system.windows.forms.control.controlcollection\" data-linktype=\"relative-path\">Control+ControlCollection</a> of its current parent control.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the Parent property and the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_FindForm_\" data-linktype=\"relative-path\">FindForm</a> method to set properties on the parent control of a button and its form.  </p>\n<pre><code class=\"lang-cpp\" name=\"Control.FindForm#1\">   // This example uses the Parent property and the Find method of Control to set\n   // properties on the parent control of a Button and its Form. The example assumes\n   // that a Button control named button1 is located within a GroupBox control. The \n   // example also assumes that the Click event of the Button control is connected to\n   // the event handler method defined in the example.\nprivate:\n   void button1_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // Get the control the Button control is located in. In this case a GroupBox.\n      Control^ control = button1-&gt;Parent;\n      \n      // Set the text and backcolor of the parent control.\n      control-&gt;Text = &quot;My Groupbox&quot;;\n      control-&gt;BackColor = Color::Blue;\n      \n      // Get the form that the Button control is contained within.\n      Form^ myForm = button1-&gt;FindForm();\n      \n      // Set the text and color of the form containing the Button.\n      myForm-&gt;Text = &quot;The Form of My Control&quot;;\n      myForm-&gt;BackColor = Color::Red;\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Control.FindForm#1\">   &#39; This example uses the Parent property and the Find method of Control to set\n   &#39; properties on the parent control of a Button and its Form. The example assumes\n   &#39; that a Button control named button1 is located within a GroupBox control. The \n   &#39; example also assumes that the Click event of the Button control is connected to\n   &#39; the event handler method defined in the example.\n   Private Sub button1_Click(sender As Object, e As System.EventArgs) Handles button1.Click\n      &#39; Get the control the Button control is located in. In this case a GroupBox.\n      Dim control As Control = button1.Parent\n      &#39; Set the text and backcolor of the parent control.\n      control.Text = &quot;My Groupbox&quot;\n      control.BackColor = Color.Blue\n      &#39; Get the form that the Button control is contained within.\n      Dim myForm As Form = button1.FindForm()\n      &#39; Set the text and color of the form containing the Button.\n      myForm.Text = &quot;The Form of My Control&quot;\n      myForm.BackColor = Color.Red\n   End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Control.FindForm#1\">      // This example uses the Parent property and the Find method of Control to set\n      // properties on the parent control of a Button and its Form. The example assumes\n      // that a Button control named button1 is located within a GroupBox control. The \n      // example also assumes that the Click event of the Button control is connected to\n      // the event handler method defined in the example.\n      private void button1_Click(object sender, System.EventArgs e)\n      {\n         // Get the control the Button control is located in. In this case a GroupBox.\n         Control control = button1.Parent;\n         // Set the text and backcolor of the parent control.\n         control.Text = &quot;My Groupbox&quot;;\n         control.BackColor = Color.Blue;\n         // Get the form that the Button control is contained within.\n         Form myForm = button1.FindForm();\n         // Set the text and color of the form containing the Button.\n         myForm.Text = &quot;The Form of My Control&quot;;\n         myForm.BackColor = Color.Red;\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_PreferredSize\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_PreferredSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreferredSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the size of a rectangular area into which the control can fit.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Drawing.Size PreferredSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> containing the height and width, in pixels.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ProductName\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_ProductName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ProductName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the product name of the assembly containing the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ProductName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The product name of the assembly containing the control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ProductName property is a read-only property. To change the value of this property, set the <a class=\"xref\" href=\"system.reflection.assemblyproductattribute#System_Reflection_AssemblyProductAttribute_Product_\" data-linktype=\"relative-path\">Product</a> property value of the <a class=\"xref\" href=\"system.reflection.assemblyproductattribute\" data-linktype=\"relative-path\">AssemblyProductAttribute</a>. The following line of C# code sets the ProductName property.  </p>\n<pre><code>[assembly: AssemblyProduct(&quot;MyApplication&quot;)]\n</code></pre><div class=\"NOTE\"><h5>Note</h5><p> It is strongly recommended that you provide the company name, product name, and product version. Providing this information enables the use of Windows Forms features such as <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_UserAppDataPath_\" data-linktype=\"relative-path\">UserAppDataPath</a> that make it easier to write applications that comply with the &quot;Certified for Windows&quot; program. For more information about the Certified for Windows program, see <a href=\"http://msdn.microsoft.com/certification\" data-linktype=\"external\">http://msdn.microsoft.com/certification</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays information about the application in a <a class=\"xref\" href=\"system.windows.forms.label\" data-linktype=\"relative-path\">Label</a> contained by a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>. This example requires that the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CompanyName_\" data-linktype=\"relative-path\">CompanyName</a>, ProductName and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ProductVersion_\" data-linktype=\"relative-path\">ProductVersion</a> have been set.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control Properties3#1\">private void AboutDialog_Load(object sender, EventArgs e)\n{\n   // Display the application information in the label.\n   this.labelVersionInfo.Text = \n      this.CompanyName + &quot;  &quot; + \n      this.ProductName + &quot;  Version: &quot; +\n      this.ProductVersion;  \n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control Properties3#1\">      void AboutDialog_Load( Object^ /*sender*/, EventArgs^ /*e*/ )\n      {\n         // Display the application information in the label.\n         this-&gt;labelVersionInfo-&gt;Text = String::Format(  &quot;{0} {1} Version: {2}&quot;, this-&gt;CompanyName, this-&gt;ProductName, this-&gt;ProductVersion );\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control Properties3#1\">Private Sub AboutDialog_Load(sender As Object, e As EventArgs) Handles MyBase.Load\n   &#39; Display the application information in the label.\n   Me.labelVersionInfo.Text = _\n      Me.CompanyName + &quot;  &quot; + _\n      Me.ProductName + &quot;  Version: &quot; + _\n      Me.ProductVersion\n   End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ProductVersion\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_ProductVersion_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ProductVersion</div>        \r\n          </div>\r\n    \r\n            <p>Gets the version of the assembly containing the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ProductVersion { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The file version of the assembly containing the control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ProductVersion property is a read-only property. To change the value of this property, set the <a class=\"xref\" href=\"system.reflection.assemblyversionattribute#System_Reflection_AssemblyVersionAttribute_Version_\" data-linktype=\"relative-path\">Version</a> property value of the <a class=\"xref\" href=\"system.reflection.assemblyversionattribute\" data-linktype=\"relative-path\">AssemblyVersionAttribute</a>. The following line of C# code sets the ProductVersion property.  </p>\n<pre><code>[assembly: AssemblyVersion(&quot;1.0.1&quot;)]\n</code></pre><div class=\"NOTE\"><h5>Note</h5><p> It is strongly recommended that you provide the company name, product name, and product version. Providing this information enables the use of Windows Forms features such as <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_UserAppDataPath_\" data-linktype=\"relative-path\">UserAppDataPath</a> that make it easier to write applications that comply with the &quot;Certified for Windows&quot; program. For more information about the Certified for Windows program, see <a href=\"http://msdn.microsoft.com/certification\" data-linktype=\"external\">http://msdn.microsoft.com/certification</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays information about the application in a <a class=\"xref\" href=\"system.windows.forms.label\" data-linktype=\"relative-path\">Label</a> contained by a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>. This example requires that the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CompanyName_\" data-linktype=\"relative-path\">CompanyName</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ProductName_\" data-linktype=\"relative-path\">ProductName</a> and ProductVersion have been set.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control Properties3#1\">private void AboutDialog_Load(object sender, EventArgs e)\n{\n   // Display the application information in the label.\n   this.labelVersionInfo.Text = \n      this.CompanyName + &quot;  &quot; + \n      this.ProductName + &quot;  Version: &quot; +\n      this.ProductVersion;  \n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control Properties3#1\">      void AboutDialog_Load( Object^ /*sender*/, EventArgs^ /*e*/ )\n      {\n         // Display the application information in the label.\n         this-&gt;labelVersionInfo-&gt;Text = String::Format(  &quot;{0} {1} Version: {2}&quot;, this-&gt;CompanyName, this-&gt;ProductName, this-&gt;ProductVersion );\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control Properties3#1\">Private Sub AboutDialog_Load(sender As Object, e As EventArgs) Handles MyBase.Load\n   &#39; Display the application information in the label.\n   Me.labelVersionInfo.Text = _\n      Me.CompanyName + &quot;  &quot; + _\n      Me.ProductName + &quot;  Version: &quot; + _\n      Me.ProductVersion\n   End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_PropagatingImeMode\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_PropagatingImeMode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PropagatingImeMode</div>        \r\n          </div>\r\n    \r\n            <p>Gets an object that represents a propagating IME mode.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected static System.Windows.Forms.ImeMode PropagatingImeMode { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.imemode\" data-linktype=\"relative-path\">ImeMode</a></div>\r\n                  </div>\r\n                  <p>An object that represents a propagating IME mode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_RecreatingHandle\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_RecreatingHandle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RecreatingHandle</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the control is currently re-creating its handle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool RecreatingHandle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the control is currently re-creating its handle; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The RecreatingHandle property returns <code>true</code> if the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RecreateHandle_\" data-linktype=\"relative-path\">RecreateHandle</a> method is still running on the control.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Region\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Region_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Region</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the window region associated with the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Drawing.Region Region { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.region\" data-linktype=\"relative-path\">Region</a></div>\r\n                  </div>\r\n                  <p>The window <a class=\"xref\" href=\"system.drawing.region\" data-linktype=\"relative-path\">Region</a> associated with the control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The window region is a collection of pixels within the window where the operating system permits drawing. The operating system does not display any portion of a window that lies outside of the window region. The coordinates of a control&#39;s region are relative to the upper-left corner of the control, not the client area of the control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The collection of pixels contained with the region can be noncontiguous.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the Region property by creating a round button. To run the example, paste the following code in a form containing a button called <code>roundButton</code>. This example requires that the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Paint\" data-linktype=\"relative-path\">Paint</a> event is connected to the event handler defined in the example.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.Control.Region#1\">\t// This method will change the square button to a circular button by \n\t// creating a new circle-shaped GraphicsPath object and setting it \n\t// to the RoundButton objects region.\n\tprivate void roundButton_Paint(object sender, \n\t\tSystem.Windows.Forms.PaintEventArgs e)\n\t{\n\n\t\tSystem.Drawing.Drawing2D.GraphicsPath buttonPath = \n\t\t\tnew System.Drawing.Drawing2D.GraphicsPath();\n\n\t\t// Set a new rectangle to the same size as the button&#39;s \n\t\t// ClientRectangle property.\n\t\tSystem.Drawing.Rectangle newRectangle = roundButton.ClientRectangle;\n\n\t\t// Decrease the size of the rectangle.\n\t\tnewRectangle.Inflate(-10, -10);\n\t\t\n\t\t// Draw the button&#39;s border.\n\t\te.Graphics.DrawEllipse(System.Drawing.Pens.Black, newRectangle);\n\n\t\t// Increase the size of the rectangle to include the border.\n\t\tnewRectangle.Inflate( 1,  1);\n\n\t\t// Create a circle within the new rectangle.\n\t\tbuttonPath.AddEllipse(newRectangle);\n\t\t\t\t\n\t\t// Set the button&#39;s Region property to the newly created \n\t\t// circle region.\n\t\troundButton.Region = new System.Drawing.Region(buttonPath);\n\n\t}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.Control.Region#1\">private:\n   // This method will change the square button to a circular button by \n   // creating a new circle-shaped GraphicsPath object and setting it \n   // to the RoundButton objects region.\n   void roundButton_Paint( Object^ sender,\n      System::Windows::Forms::PaintEventArgs^ e )\n   {\n      System::Drawing::Drawing2D::GraphicsPath^ buttonPath =\n         gcnew System::Drawing::Drawing2D::GraphicsPath;\n      \n      // Set a new rectangle to the same size as the button&#39;s \n      // ClientRectangle property.\n      System::Drawing::Rectangle newRectangle = roundButton-&gt;ClientRectangle;\n      \n      // Decrease the size of the rectangle.\n      newRectangle.Inflate(  -10, -10 );\n      \n      // Draw the button&#39;s border.\n      e-&gt;Graphics-&gt;DrawEllipse( System::Drawing::Pens::Black, newRectangle );\n      \n      // Increase the size of the rectangle to include the border.\n      newRectangle.Inflate( 1, 1 );\n      \n      // Create a circle within the new rectangle.\n      buttonPath-&gt;AddEllipse( newRectangle );\n      \n      // Set the button&#39;s Region property to the newly created \n      // circle region.\n      roundButton-&gt;Region = gcnew System::Drawing::Region( buttonPath );\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.Control.Region#1\">    &#39; This method will change the square button to a circular button by \n    &#39; creating a new circle-shaped GraphicsPath object and setting it \n    &#39; to the RoundButton objects region.\n    Private Sub roundButton_Paint(ByVal sender As Object, _\n        ByVal e As System.Windows.Forms.PaintEventArgs) Handles roundButton.Paint\n\n        Dim buttonPath As New System.Drawing.Drawing2D.GraphicsPath\n\n        &#39; Set a new rectangle to the same size as the button&#39;s \n        &#39; ClientRectangle property.\n        Dim newRectangle As Rectangle = roundButton.ClientRectangle\n\n        &#39; Decrease the size of the rectangle.\n        newRectangle.Inflate(-10, -10)\n\n        &#39; Draw the button&#39;s border.\n        &#39;e.Graphics.DrawEllipse(System.Drawing.Pens.Black, newRectangle)\n\n        &#39;Increase the size of the rectangle to include the border.\n        newRectangle.Inflate(1, 1)\n\n        &#39; Create a circle within the new rectangle.\n        buttonPath.AddEllipse(newRectangle)\n        e.Graphics.DrawPath(Pens.Black, buttonPath)\n        &#39; Set the button&#39;s Region property to the newly created \n        &#39; circle region.\n        roundButton.Region = New System.Drawing.Region(buttonPath)\n\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_RenderRightToLeft\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_RenderRightToLeft_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RenderRightToLeft</div>        \r\n          </div>\r\n    \r\n            <p>This property is now obsolete.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected bool RenderRightToLeft { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the control is rendered from right to left; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ResizeRedraw\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_ResizeRedraw_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResizeRedraw</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the control redraws itself when resized.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected bool ResizeRedraw { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the control redraws itself when resized; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ResizeRedraw property value is equivalent to the return value of the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GetStyle_\" data-linktype=\"relative-path\">GetStyle</a> method when passing in the <a class=\"xref\" href=\"system.windows.forms.controlstyles\" data-linktype=\"relative-path\">System.Windows.Forms.ControlStyles</a> value as a parameter.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Right\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Right_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Right</div>        \r\n          </div>\r\n    \r\n            <p>Gets the distance, in pixels, between the right edge of the control and the left edge of its container&#39;s client area.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Right { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> representing the distance, in pixels, between the right edge of the control and the left edge of its container&#39;s client area.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the Right property is equal to the sum of the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Left_\" data-linktype=\"relative-path\">Left</a> property value and the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Width_\" data-linktype=\"relative-path\">Width</a> property value.  </p>\n<p> The Right property is read-only. You can change this property value indirectly by changing the value of the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Left_\" data-linktype=\"relative-path\">Left</a> or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Width_\" data-linktype=\"relative-path\">Width</a> properties or calling the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SetBounds_\" data-linktype=\"relative-path\">SetBounds</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SetBoundsCore_\" data-linktype=\"relative-path\">SetBoundsCore</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_UpdateBounds_\" data-linktype=\"relative-path\">UpdateBounds</a>, or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SetClientSizeCore_\" data-linktype=\"relative-path\">SetClientSizeCore</a> methods.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates three <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> controls on a form and sets their size and location by using the various size-related and location-related properties. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> that has a width and height of at least 300 pixels.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control SizeLocation#1\">// Create three buttons and place them on a form using \n// several size and location related properties. \nprivate void AddOKCancelButtons()\n{\n   // Set the button size and location using \n   // the Size and Location properties.\n   Button buttonOK = new Button();\n   buttonOK.Location = new Point(136,248);\n   buttonOK.Size = new Size(75,25);\n   // Set the Text property and make the \n   // button the form&#39;s default button. \n   buttonOK.Text = &quot;&amp;OK&quot;;\n   this.AcceptButton = buttonOK;\n\n   // Set the button size and location using the Top, \n   // Left, Width, and Height properties.\n   Button buttonCancel = new Button();\n   buttonCancel.Top = buttonOK.Top;\n   buttonCancel.Left = buttonOK.Right + 5;\n   buttonCancel.Width = buttonOK.Width;\n   buttonCancel.Height = buttonOK.Height;\n   // Set the Text property and make the \n   // button the form&#39;s cancel button.\n   buttonCancel.Text = &quot;&amp;Cancel&quot;;\n   this.CancelButton = buttonCancel;\n\n   // Set the button size and location using \n   // the Bounds property.\n   Button buttonHelp = new Button();\n   buttonHelp.Bounds = new Rectangle(10,10, 75, 25);\n   // Set the Text property of the button.\n   buttonHelp.Text = &quot;&amp;Help&quot;;\n\n   // Add the buttons to the form.\n   this.Controls.AddRange(new Control[] {buttonOK, buttonCancel, buttonHelp} );\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control SizeLocation#1\">      // Create three buttons and place them on a form using\n      // several size and location related properties.\n      void AddOKCancelButtons()\n      {\n         \n         // Set the button size and location using\n         // the Size and Location properties.\n         Button^ buttonOK = gcnew Button;\n         buttonOK-&gt;Location = Point(136,248);\n         buttonOK-&gt;Size = System::Drawing::Size( 75, 25 );\n         \n         // Set the Text property and make the\n         // button the form&#39;s default button.\n         buttonOK-&gt;Text = &quot;&amp;OK&quot;;\n         this-&gt;AcceptButton = buttonOK;\n         \n         // Set the button size and location using the Top,\n         // Left, Width, and Height properties.\n         Button^ buttonCancel = gcnew Button;\n         buttonCancel-&gt;Top = buttonOK-&gt;Top;\n         buttonCancel-&gt;Left = buttonOK-&gt;Right + 5;\n         buttonCancel-&gt;Width = buttonOK-&gt;Width;\n         buttonCancel-&gt;Height = buttonOK-&gt;Height;\n         \n         // Set the Text property and make the\n         // button the form&#39;s cancel button.\n         buttonCancel-&gt;Text = &quot;&amp;Cancel&quot;;\n         this-&gt;CancelButton = buttonCancel;\n         \n         // Set the button size and location using\n         // the Bounds property.\n         Button^ buttonHelp = gcnew Button;\n         buttonHelp-&gt;Bounds = Rectangle(10,10,75,25);\n         \n         // Set the Text property of the button.\n         buttonHelp-&gt;Text = &quot;&amp;Help&quot;;\n         \n         // Add the buttons to the form.\n         array&lt;Control^&gt;^temp1 = {buttonOK,buttonCancel,buttonHelp};\n         this-&gt;Controls-&gt;AddRange( temp1 );\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control SizeLocation#1\">&#39; Create three buttons and place them on a form using \n&#39; several size and location related properties. \nPrivate Sub AddOKCancelButtons()\n   &#39; Set the button size and location using \n      &#39; the Size and Location properties. \n   Dim buttonOK As New Button()\n   buttonOK.Location = New Point(136, 248)\n   buttonOK.Size = New Size(75, 25)\n   &#39; Set the Text property and make the \n   &#39; button the form&#39;s default button. \n   buttonOK.Text = &quot;&amp;OK&quot;\n   Me.AcceptButton = buttonOK\n   \n   &#39; Set the button size and location using the Top, \n   &#39; Left, Width, and Height properties. \n   Dim buttonCancel As New Button()\n   buttonCancel.Top = buttonOK.Top\n   buttonCancel.Left = buttonOK.Right + 5\n   buttonCancel.Width = buttonOK.Width\n   buttonCancel.Height = buttonOK.Height\n   &#39; Set the Text property and make the \n   &#39; button the form&#39;s cancel button. \n   buttonCancel.Text = &quot;&amp;Cancel&quot;\n   Me.CancelButton = buttonCancel\n   \n   &#39; Set the button size and location using \n   &#39; the Bounds property. \n   Dim buttonHelp As New Button()\n   buttonHelp.Bounds = New Rectangle(10, 10, 75, 25)\n   &#39; Set the Text property of the button.\n   buttonHelp.Text = &quot;&amp;Help&quot;\n   \n   &#39; Add the buttons to the form.\n   Me.Controls.AddRange(New Control() {buttonOK, buttonCancel, buttonHelp})\nEnd Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"Control.KeyUp#1\">   // This example demonstrates how to use the KeyUp event with the Help class to display\n   // pop-up style help to the user of the application. When the user presses F1, the Help\n   // class displays a pop-up window, similar to a ToolTip, near the control. This example assumes\n   // that a TextBox control, named textBox1, has been added to the form and its KeyUp\n   // event has been connected to this event handler method.\nprivate:\n   void textBox1_KeyUp( Object^ /*sender*/, System::Windows::Forms::KeyEventArgs^ e )\n   {\n      \n      // Determine whether the key entered is the F1 key. Display help if it is.\n      if ( e-&gt;KeyCode == Keys::F1 )\n      {\n         \n         // Display a pop-up help topic to assist the user.\n         Help::ShowPopup( textBox1, &quot;Enter your first name&quot;, Point(textBox1-&gt;Right,this-&gt;textBox1-&gt;Bottom) );\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Control.KeyUp#1\">    &#39; This example demonstrates how to use the KeyUp event with the Help class to display\n    &#39; pop-up style help to the user of the application. When the user presses F1, the Help\n    &#39; class displays a pop-up window, similar to a ToolTip, near the control. This example assumes\n    &#39; that a TextBox control, named textBox1, has been added to the form and its KeyUp\n    &#39; event has been contected to this event handler method.\n    Private Sub textBox1_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles textBox1.KeyUp\n        &#39; Determine whether the key entered is the F1 key. Display help if it is.\n        If e.KeyCode = Keys.F1 Then\n            &#39; Display a pop-up help topic to assist the user.\n            Help.ShowPopup(textBox1, &quot;Enter your first name&quot;, New Point(textBox1.Right, Me.textBox1.Bottom))\n        End If\n    End Sub &#39;textBox1_KeyUp\n</code></pre><pre><code class=\"lang-cs\" name=\"Control.KeyUp#1\">        // This example demonstrates how to use the KeyUp event with the Help class to display\n        // pop-up style help to the user of the application. When the user presses F1, the Help\n        // class displays a pop-up window, similar to a ToolTip, near the control. This example assumes\n        // that a TextBox control, named textBox1, has been added to the form and its KeyUp\n        // event has been contected to this event handler method.\n        private void textBox1_KeyUp(object sender, System.Windows.Forms.KeyEventArgs e)\n        {\n            // Determine whether the key entered is the F1 key. Display help if it is.\n            if(e.KeyCode == Keys.F1)\n            {\n                // Display a pop-up help topic to assist the user.\n                Help.ShowPopup(textBox1, &quot;Enter your first name&quot;, new Point(textBox1.Right, this.textBox1.Bottom));\n            }\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_RightToLeft\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_RightToLeft_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RightToLeft</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether control&#39;s elements are aligned to support locales using right-to-left fonts.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Windows.Forms.RightToLeft RightToLeft { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.righttoleft\" data-linktype=\"relative-path\">RightToLeft</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.windows.forms.righttoleft\" data-linktype=\"relative-path\">RightToLeft</a> values. The default is <a class=\"xref\" href=\"system.windows.forms.righttoleft\" data-linktype=\"relative-path\">RightToLeft</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.invalidenumargumentexception\" data-linktype=\"relative-path\">InvalidEnumArgumentException</a></div>\r\n                  </div>\r\n                  <p>The assigned value is not one of the <a class=\"xref\" href=\"system.windows.forms.righttoleft\" data-linktype=\"relative-path\">RightToLeft</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The RightToLeft property is an ambient property. An ambient property is a control property that, if not set, is retrieved from the parent control. For example, a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> will have the same <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BackColor_\" data-linktype=\"relative-path\">BackColor</a> as its parent <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> by default. For more information about ambient properties, see the <a class=\"xref\" href=\"system.windows.forms.ambientproperties\" data-linktype=\"relative-path\">AmbientProperties</a> class or the <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class overview.  </p>\n<p> The RightToLeft property is used for international applications where the language is written from right to left, such as Hebrew or Arabic. When this property is set to <a class=\"xref\" href=\"system.windows.forms.righttoleft\" data-linktype=\"relative-path\">System.Windows.Forms.RightToLeft</a>, control elements that include text are displayed from right to left.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the value of the RightToLeft property is changed at run time, only raw text without formatting is preserved.  </p>\n</div>\n<p> The following are a few examples of how control elements are affected by the RightToLeft property value of <a class=\"xref\" href=\"system.windows.forms.righttoleft\" data-linktype=\"relative-path\">System.Windows.Forms.RightToLeft</a> :  </p>\n<ul>\n<li><p>Vertical scroll bars are displayed on the left side rather than right side of scrollable controls (for example, <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>, <a class=\"xref\" href=\"system.windows.forms.panel\" data-linktype=\"relative-path\">Panel</a>, multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>, and <a class=\"xref\" href=\"system.windows.forms.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>).  </p>\n</li>\n<li><p>Horizontal scroll bars start with the scroll box (thumb) right-aligned.  </p>\n</li>\n<li><p>The check box element alignment, controlled by the <code>CheckAlign</code> property, is reversed for <a class=\"xref\" href=\"system.windows.forms.checkbox\" data-linktype=\"relative-path\">CheckBox</a> and <a class=\"xref\" href=\"system.windows.forms.radiobutton\" data-linktype=\"relative-path\">RadioButton</a> controls.  </p>\n</li>\n<li><p>Items in list box, combo box, and up-down controls are right aligned.  </p>\n</li>\n<li><p>Up and down buttons are left-aligned on <a class=\"xref\" href=\"system.windows.forms.numericupdown\" data-linktype=\"relative-path\">NumericUpDown</a> and <a class=\"xref\" href=\"system.windows.forms.domainupdown\" data-linktype=\"relative-path\">DomainUpDown</a> controls.  </p>\n</li>\n<li><p>Menus (<a class=\"xref\" href=\"system.windows.forms.mainmenu\" data-linktype=\"relative-path\">MainMenu</a>, <a class=\"xref\" href=\"system.windows.forms.menuitem\" data-linktype=\"relative-path\">MenuItem</a>, and <a class=\"xref\" href=\"system.windows.forms.contextmenu\" data-linktype=\"relative-path\">ContextMenu</a>) are displayed right-aligned.  </p>\n</li>\n<li><p>The alignment of toolbar buttons on a <a class=\"xref\" href=\"system.windows.forms.toolbar\" data-linktype=\"relative-path\">ToolBar</a> control or the alignment of text on a <a class=\"xref\" href=\"system.windows.forms.toolbarbutton\" data-linktype=\"relative-path\">ToolBarButton</a> is not affected by the RightToLeft property.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.windows.forms.axhost\" data-linktype=\"relative-path\">AxHost</a> supports right-to-left alignment; however, the effect on an ActiveX control depends on the extent to which the control author implemented support for right-to-left display.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ScaleChildren\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_ScaleChildren_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ScaleChildren</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that determines the scaling of child controls.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual bool ScaleChildren { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if child controls will be scaled when the <span class=\"xref\">stem.Windows.Forms.Control.Scale*</span> method on this control is called; otherwise, <code>false</code>. The default is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the ScaleChildren property is <code>true</code>, then the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Scale_\" data-linktype=\"relative-path\">Scale</a> method will recursively call the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ScaleControl_\" data-linktype=\"relative-path\">ScaleControl</a> method of each of its child controls.  </p>\n<p> The default implementation of ScaleChildren always returns <code>true</code>. Derived classes can override ScaleChildren to return <code>false</code> to indicate that scaling should not be performed on their children.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ShowFocusCues\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_ShowFocusCues_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ShowFocusCues</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the control should display focus rectangles.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual bool ShowFocusCues { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the control should display focus rectangles; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about this feature, see the<a href=\"http://msdn.microsoft.com/library/windows/desktop/ms646342(v=vs.85).aspx\" data-linktype=\"external\">WM_CHANGEUISTATE</a>,<a href=\"http://msdn.microsoft.com/library/windows/desktop/ms646355(v=vs.85).aspx\" data-linktype=\"external\">WM_QUERYUISTATE</a>, and the <a href=\"http://msdn.microsoft.com/library/windows/desktop/ms646361(v=vs.85).aspx\" data-linktype=\"external\">WM_UPDATEUISTATE</a>topics.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ShowKeyboardCues\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_ShowKeyboardCues_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ShowKeyboardCues</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the user interface is in the appropriate state to show or hide keyboard accelerators.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual bool ShowKeyboardCues { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the keyboard accelerators are visible; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In controls created in the Windows Forms designer, keyboard accelerators are visible by default.  </p>\n<p> For more information about this feature, see the<a href=\"http://msdn.microsoft.com/library/windows/desktop/ms646342(v=vs.85).aspx\" data-linktype=\"external\">WM_CHANGEUISTATE</a>,<a href=\"http://msdn.microsoft.com/library/windows/desktop/ms646355(v=vs.85).aspx\" data-linktype=\"external\">WM_QUERYUISTATE</a>, and the <a href=\"http://msdn.microsoft.com/library/windows/desktop/ms646361(v=vs.85).aspx\" data-linktype=\"external\">WM_UPDATEUISTATE</a>topics.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Site\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Site_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Site</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the site of the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.ComponentModel.ISite Site { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.isite\" data-linktype=\"relative-path\">ISite</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.componentmodel.isite\" data-linktype=\"relative-path\">ISite</a> associated with the <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a>, if any.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Size\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Size_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Size</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the height and width of the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Drawing.Size Size { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> that represents the height and width of the control in pixels.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Because the <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> class is a value type (<code>Structure</code> in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/vbprvb-md.md&quot; -->Visual Basic<!--END INCLUDE -->, <code>struct</code> in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/csprcs-md.md&quot; -->Visual C#<!--END INCLUDE -->), it is returned by value, meaning accessing the property returns a copy of the size of the control. So, adjusting the <a class=\"xref\" href=\"system.drawing.size#System_Drawing_Size_Width_\" data-linktype=\"relative-path\">Width</a> or <a class=\"xref\" href=\"system.drawing.size#System_Drawing_Size_Height_\" data-linktype=\"relative-path\">Height</a> properties of the <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> returned from this property will not affect the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Width_\" data-linktype=\"relative-path\">Width</a> or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Height_\" data-linktype=\"relative-path\">Height</a> of the control. To adjust the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Width_\" data-linktype=\"relative-path\">Width</a> or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Height_\" data-linktype=\"relative-path\">Height</a> of the control, you must set the control&#39;s <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Width_\" data-linktype=\"relative-path\">Width</a> or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Height_\" data-linktype=\"relative-path\">Height</a> property, or set the Size property with a new <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To maintain better performance, do not set the <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> of a control in its constructor. The preferred method is to override the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DefaultSize_\" data-linktype=\"relative-path\">DefaultSize</a> property.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> On Windows Server 2003 systems, the size of a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> is restricted by the maximum pixel width and height of the monitor.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example adds a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> to a form and sets some of its common properties. The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized. Next it sets the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BackgroundImage_\" data-linktype=\"relative-path\">BackgroundImage</a> and resizes the button to the same size as the<a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a>. The example then sets the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_TabStop_\" data-linktype=\"relative-path\">TabStop</a> to <code>true</code> and sets the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_TabIndex_\" data-linktype=\"relative-path\">TabIndex</a> property. Lastly, it adds an event handler to handle the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Click\" data-linktype=\"relative-path\">Click</a> event of the button. This example requires that you have an <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> named <code>imageList1</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control Properties#3\">// Add a button to a form and set some of its common properties.\nprivate void AddMyButton()\n{\n   // Create a button and add it to the form.\n   Button button1 = new Button();\n\n   // Anchor the button to the bottom right corner of the form\n   button1.Anchor = (AnchorStyles.Bottom | AnchorStyles.Right);\n\n   // Assign a background image.\n   button1.BackgroundImage = imageList1.Images[0];\n\n   // Specify the layout style of the background image. Tile is the default.\n   button1.BackgroundImageLayout = ImageLayout.Center;\n   \n   // Make the button the same size as the image.\n   button1.Size = button1.BackgroundImage.Size;\n\n   // Set the button&#39;s TabIndex and TabStop properties.\n   button1.TabIndex = 1;\n   button1.TabStop = true;\n\n   // Add a delegate to handle the Click event.\n   button1.Click += new System.EventHandler(this.button1_Click);\n\n   // Add the button to the form.\n   this.Controls.Add(button1);\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control Properties#3\">      // Add a button to a form and set some of its common properties.\n   private:\n      void AddMyButton()\n      {\n         // Create a button and add it to the form.\n         Button^ button1 = gcnew Button;\n\n         // Anchor the button to the bottom right corner of the form\n         button1-&gt;Anchor = static_cast&lt;AnchorStyles&gt;(AnchorStyles::Bottom | AnchorStyles::Right);\n\n         // Assign a background image.\n         button1-&gt;BackgroundImage = imageList1-&gt;Images[ 0 ];\n\n         // Specify the layout style of the background image. Tile is the default.\n         button1-&gt;BackgroundImageLayout = ImageLayout::Center;\n\n         // Make the button the same size as the image.\n         button1-&gt;Size = button1-&gt;BackgroundImage-&gt;Size;\n\n         // Set the button&#39;s TabIndex and TabStop properties.\n         button1-&gt;TabIndex = 1;\n         button1-&gt;TabStop = true;\n\n         // Add a delegate to handle the Click event.\n         button1-&gt;Click += gcnew System::EventHandler( this, &amp;Form1::button1_Click );\n\n         // Add the button to the form.\n         this-&gt;Controls-&gt;Add( button1 );\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control Properties#3\">&#39; Add a button to a form and set some of its common properties.\nPrivate Sub AddMyButton()\n   &#39; Create a button and add it to the form.\n   Dim button1 As New Button()\n   \n   &#39; Anchor the button to the bottom right corner of the form\n   button1.Anchor = AnchorStyles.Bottom Or AnchorStyles.Right\n   \n   &#39; Assign a background image.\n   button1.BackgroundImage = imageList1.Images(0)\n\n   &#39; Specify the layout style of the background image. Tile is the default.\n   button1.BackgroundImageLayout = ImageLayout.Center\n   \n   &#39; Make the button the same size as the image.\n   button1.Size = button1.BackgroundImage.Size\n   \n   &#39; Set the button&#39;s TabIndex and TabStop properties.\n   button1.TabIndex = 1\n   button1.TabStop = True\n\n   &#39; Add a delegate to handle the Click event.\n   AddHandler button1.Click, AddressOf Me.button1_Click\n   \n   &#39; Add the button to the form.\n   Me.Controls.Add(button1)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_TabIndex\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_TabIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TabIndex</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the tab order of the control within its container.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int TabIndex { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index value of the control within the set of controls within its container. The controls in the container are included in the tab order.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A tab index can consist of any valid integer greater than or equal to zero, lower numbers being earlier in the tab order. If more than one control on the same parent control has the same tab index, the z-order of the controls determines the order to cycle through the controls.  </p>\n<p> For a control to be included in the tab order, its <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_TabStop_\" data-linktype=\"relative-path\">TabStop</a> property must be set to <code>true</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example adds a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> to a form and sets some of its common properties. The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized. Next it sets the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BackgroundImage_\" data-linktype=\"relative-path\">BackgroundImage</a> and resizes the button to the same size as the <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a>. The example then sets the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_TabStop_\" data-linktype=\"relative-path\">TabStop</a> to <code>true</code> and sets the TabIndex property. Lastly, it adds an event handler to handle the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Click\" data-linktype=\"relative-path\">Click</a> event of the button. This example requires that you have an <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> named <code>imageList1</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control Properties#3\">// Add a button to a form and set some of its common properties.\nprivate void AddMyButton()\n{\n   // Create a button and add it to the form.\n   Button button1 = new Button();\n\n   // Anchor the button to the bottom right corner of the form\n   button1.Anchor = (AnchorStyles.Bottom | AnchorStyles.Right);\n\n   // Assign a background image.\n   button1.BackgroundImage = imageList1.Images[0];\n\n   // Specify the layout style of the background image. Tile is the default.\n   button1.BackgroundImageLayout = ImageLayout.Center;\n   \n   // Make the button the same size as the image.\n   button1.Size = button1.BackgroundImage.Size;\n\n   // Set the button&#39;s TabIndex and TabStop properties.\n   button1.TabIndex = 1;\n   button1.TabStop = true;\n\n   // Add a delegate to handle the Click event.\n   button1.Click += new System.EventHandler(this.button1_Click);\n\n   // Add the button to the form.\n   this.Controls.Add(button1);\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control Properties#3\">      // Add a button to a form and set some of its common properties.\n   private:\n      void AddMyButton()\n      {\n         // Create a button and add it to the form.\n         Button^ button1 = gcnew Button;\n\n         // Anchor the button to the bottom right corner of the form\n         button1-&gt;Anchor = static_cast&lt;AnchorStyles&gt;(AnchorStyles::Bottom | AnchorStyles::Right);\n\n         // Assign a background image.\n         button1-&gt;BackgroundImage = imageList1-&gt;Images[ 0 ];\n\n         // Specify the layout style of the background image. Tile is the default.\n         button1-&gt;BackgroundImageLayout = ImageLayout::Center;\n\n         // Make the button the same size as the image.\n         button1-&gt;Size = button1-&gt;BackgroundImage-&gt;Size;\n\n         // Set the button&#39;s TabIndex and TabStop properties.\n         button1-&gt;TabIndex = 1;\n         button1-&gt;TabStop = true;\n\n         // Add a delegate to handle the Click event.\n         button1-&gt;Click += gcnew System::EventHandler( this, &amp;Form1::button1_Click );\n\n         // Add the button to the form.\n         this-&gt;Controls-&gt;Add( button1 );\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control Properties#3\">&#39; Add a button to a form and set some of its common properties.\nPrivate Sub AddMyButton()\n   &#39; Create a button and add it to the form.\n   Dim button1 As New Button()\n   \n   &#39; Anchor the button to the bottom right corner of the form\n   button1.Anchor = AnchorStyles.Bottom Or AnchorStyles.Right\n   \n   &#39; Assign a background image.\n   button1.BackgroundImage = imageList1.Images(0)\n\n   &#39; Specify the layout style of the background image. Tile is the default.\n   button1.BackgroundImageLayout = ImageLayout.Center\n   \n   &#39; Make the button the same size as the image.\n   button1.Size = button1.BackgroundImage.Size\n   \n   &#39; Set the button&#39;s TabIndex and TabStop properties.\n   button1.TabIndex = 1\n   button1.TabStop = True\n\n   &#39; Add a delegate to handle the Click event.\n   AddHandler button1.Click, AddressOf Me.button1_Click\n   \n   &#39; Add the button to the form.\n   Me.Controls.Add(button1)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_TabStop\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_TabStop_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TabStop</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the user can give the focus to this control using the TAB key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool TabStop { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the user can give the focus to the control using the TAB key; otherwise, <code>false</code>. The default is <code>true</code>.  </p>\n <div class=\"alert NOTE\"><br> This property will always return <code>true</code> for an instance of the <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> class.<br>\n</div>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When the user presses the TAB key, the input focus is set to the next control in the tab order. Controls with the TabStop property value of <code>false</code> are not included in the collection of controls in the tab order. The tab order can be manipulated by setting the control&#39;s <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_TabIndex_\" data-linktype=\"relative-path\">TabIndex</a> property value.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example adds a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> to a form and sets some of its common properties. The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized. Next it sets the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BackgroundImage_\" data-linktype=\"relative-path\">BackgroundImage</a> and resizes the button to the same size as the <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a>. The example then sets the TabStop to <code>true</code> and sets the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_TabIndex_\" data-linktype=\"relative-path\">TabIndex</a> property. Lastly, it adds an event handler to handle the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Click\" data-linktype=\"relative-path\">Click</a> event of the button. This example requires that you have an <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> named <code>imageList1</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control Properties#3\">// Add a button to a form and set some of its common properties.\nprivate void AddMyButton()\n{\n   // Create a button and add it to the form.\n   Button button1 = new Button();\n\n   // Anchor the button to the bottom right corner of the form\n   button1.Anchor = (AnchorStyles.Bottom | AnchorStyles.Right);\n\n   // Assign a background image.\n   button1.BackgroundImage = imageList1.Images[0];\n\n   // Specify the layout style of the background image. Tile is the default.\n   button1.BackgroundImageLayout = ImageLayout.Center;\n   \n   // Make the button the same size as the image.\n   button1.Size = button1.BackgroundImage.Size;\n\n   // Set the button&#39;s TabIndex and TabStop properties.\n   button1.TabIndex = 1;\n   button1.TabStop = true;\n\n   // Add a delegate to handle the Click event.\n   button1.Click += new System.EventHandler(this.button1_Click);\n\n   // Add the button to the form.\n   this.Controls.Add(button1);\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control Properties#3\">      // Add a button to a form and set some of its common properties.\n   private:\n      void AddMyButton()\n      {\n         // Create a button and add it to the form.\n         Button^ button1 = gcnew Button;\n\n         // Anchor the button to the bottom right corner of the form\n         button1-&gt;Anchor = static_cast&lt;AnchorStyles&gt;(AnchorStyles::Bottom | AnchorStyles::Right);\n\n         // Assign a background image.\n         button1-&gt;BackgroundImage = imageList1-&gt;Images[ 0 ];\n\n         // Specify the layout style of the background image. Tile is the default.\n         button1-&gt;BackgroundImageLayout = ImageLayout::Center;\n\n         // Make the button the same size as the image.\n         button1-&gt;Size = button1-&gt;BackgroundImage-&gt;Size;\n\n         // Set the button&#39;s TabIndex and TabStop properties.\n         button1-&gt;TabIndex = 1;\n         button1-&gt;TabStop = true;\n\n         // Add a delegate to handle the Click event.\n         button1-&gt;Click += gcnew System::EventHandler( this, &amp;Form1::button1_Click );\n\n         // Add the button to the form.\n         this-&gt;Controls-&gt;Add( button1 );\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control Properties#3\">&#39; Add a button to a form and set some of its common properties.\nPrivate Sub AddMyButton()\n   &#39; Create a button and add it to the form.\n   Dim button1 As New Button()\n   \n   &#39; Anchor the button to the bottom right corner of the form\n   button1.Anchor = AnchorStyles.Bottom Or AnchorStyles.Right\n   \n   &#39; Assign a background image.\n   button1.BackgroundImage = imageList1.Images(0)\n\n   &#39; Specify the layout style of the background image. Tile is the default.\n   button1.BackgroundImageLayout = ImageLayout.Center\n   \n   &#39; Make the button the same size as the image.\n   button1.Size = button1.BackgroundImage.Size\n   \n   &#39; Set the button&#39;s TabIndex and TabStop properties.\n   button1.TabIndex = 1\n   button1.TabStop = True\n\n   &#39; Add a delegate to handle the Click event.\n   AddHandler button1.Click, AddressOf Me.button1_Click\n   \n   &#39; Add the button to the form.\n   Me.Controls.Add(button1)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Tag\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Tag_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Tag</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the object that contains data about the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object Tag { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> that contains data about the control. The default is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Any type derived from the <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> class can be assigned to this property. If the Tag property is set through the Windows Forms designer, only text can be assigned.  </p>\n<p> A common use for the Tag property is to store data that is closely associated with the control. For example, if you have a control that displays information about a customer, you might store a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> that contains the customer&#39;s order history in that control&#39;s Tag property so the data can be accessed quickly.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays a form and stores a <code>Customer</code> in its Tag property. This example requires that you have defined a class that derives from <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> named <code>CustomerForm</code> and that you have defined a <code>Customer</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control Members2#3\">private void buttonNewCustomer_Click(object sender, EventArgs e)\n{\n   /* Create a new customer form and assign a new \n    * Customer object to the Tag property. */\n   CustomerForm customerForm = new CustomerForm();\n   customerForm.Tag = new Customer();\n   customerForm.Show();\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control Members2#3\">   private:\n      void buttonNewCustomer_Click( Object^ /*sender*/, EventArgs^ /*e*/ )\n      {\n         /* Create a new customer form and assign a new\n                     * Customer object to the Tag property. */\n         CustomerForm^ customerForm = gcnew CustomerForm;\n         customerForm-&gt;Tag = gcnew Customer;\n         customerForm-&gt;Show();\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control Members2#3\">Private Sub buttonNewCustomer_Click(sender As Object, _\n  e As EventArgs) Handles buttonNewCustomer.Click\n   &#39; Create a new customer form and assign a new \n   &#39; Customer object to the Tag property. \n   Dim customerForm As New CustomerForm()\n   customerForm.Tag = New Customer()\n   customerForm.Show()\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Text\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Text_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Text</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the text associated with this control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string Text { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The text associated with this control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Text property of the control is used differently by each derived class. For example the Text property of a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> is displayed in the title bar at the top of the form, is fairly small in character count, and usually displays the application or document name. However, the Text property of a <a class=\"xref\" href=\"system.windows.forms.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> can be large and can include numerous nonvisual characters used to format the text. For example, the text displayed in a <a class=\"xref\" href=\"system.windows.forms.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> can be formatted by adjusting the <a class=\"xref\" href=\"system.drawing.font\" data-linktype=\"relative-path\">Font</a> properties, or by the addition of spaces or tab characters to align the text.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a <a class=\"xref\" href=\"system.windows.forms.groupbox\" data-linktype=\"relative-path\">GroupBox</a> and sets some of its common properties. The example creates a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> and sets its <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Location_\" data-linktype=\"relative-path\">Location</a> within the group box. Next, it sets the Text property of the group box, and docks the group box to the top of the form. Lastly, it disables the group box by setting the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Enabled_\" data-linktype=\"relative-path\">Enabled</a> property to <code>false</code>, which causes all controls contained within the group box to be disabled.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control Properties#2\">// Add a GroupBox to a form and set some of its common properties.\nprivate void AddMyGroupBox()\n{\n   // Create a GroupBox and add a TextBox to it.\n   GroupBox groupBox1 = new GroupBox();\n   TextBox textBox1 = new TextBox();\n   textBox1.Location = new Point(15, 15);\n   groupBox1.Controls.Add(textBox1);\n\n   // Set the Text and Dock properties of the GroupBox.\n   groupBox1.Text = &quot;MyGroupBox&quot;;\n   groupBox1.Dock = DockStyle.Top;\n\n   // Disable the GroupBox (which disables all its child controls)\n   groupBox1.Enabled = false;\n\n   // Add the Groupbox to the form.\n   this.Controls.Add(groupBox1);\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control Properties#2\">      // Add a GroupBox to a form and set some of its common properties.\n   private:\n      void AddMyGroupBox()\n      {\n         // Create a GroupBox and add a TextBox to it.\n         GroupBox^ groupBox1 = gcnew GroupBox;\n         TextBox^ textBox1 = gcnew TextBox;\n         textBox1-&gt;Location = Point(15,15);\n         groupBox1-&gt;Controls-&gt;Add( textBox1 );\n\n         // Set the Text and Dock properties of the GroupBox.\n         groupBox1-&gt;Text = &quot;MyGroupBox&quot;;\n         groupBox1-&gt;Dock = DockStyle::Top;\n\n         // Disable the GroupBox (which disables all its child controls)\n         groupBox1-&gt;Enabled = false;\n\n         // Add the Groupbox to the form.\n         this-&gt;Controls-&gt;Add( groupBox1 );\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control Properties#2\">&#39; Add a GroupBox to a form and set some of its common properties.\nPrivate Sub AddMyGroupBox()\n   &#39; Create a GroupBox and add a TextBox to it.\n   Dim groupBox1 As New GroupBox()\n   Dim textBox1 As New TextBox()\n   textBox1.Location = New Point(15, 15)\n   groupBox1.Controls.Add(textBox1)\n   \n   &#39; Set the Text and Dock properties of the GroupBox.\n   groupBox1.Text = &quot;MyGroupBox&quot;\n   groupBox1.Dock = DockStyle.Top\n   \n   &#39; Disable the GroupBox (which disables all its child controls)\n   groupBox1.Enabled = False\n   \n   &#39; Add the Groupbox to the form.\n   Me.Controls.Add(groupBox1)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Top\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Top_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Top</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the distance, in pixels, between the top edge of the control and the top edge of its container&#39;s client area.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Top { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> representing the distance, in pixels, between the bottom edge of the control and the top edge of its container&#39;s client area.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Top property value is equivalent to the <a class=\"xref\" href=\"system.drawing.point#System_Drawing_Point_Y_\" data-linktype=\"relative-path\">Y</a> property of the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Location_\" data-linktype=\"relative-path\">Location</a> property value of the control.  </p>\n<p> Changes made to the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Height_\" data-linktype=\"relative-path\">Height</a> and Top property values cause the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Bottom_\" data-linktype=\"relative-path\">Bottom</a> property value of the control to change.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates three <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> controls on a form and sets their size and location by using the various size-related and location-related properties. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> that has a width and height of at least 300 pixels.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control SizeLocation#1\">// Create three buttons and place them on a form using \n// several size and location related properties. \nprivate void AddOKCancelButtons()\n{\n   // Set the button size and location using \n   // the Size and Location properties.\n   Button buttonOK = new Button();\n   buttonOK.Location = new Point(136,248);\n   buttonOK.Size = new Size(75,25);\n   // Set the Text property and make the \n   // button the form&#39;s default button. \n   buttonOK.Text = &quot;&amp;OK&quot;;\n   this.AcceptButton = buttonOK;\n\n   // Set the button size and location using the Top, \n   // Left, Width, and Height properties.\n   Button buttonCancel = new Button();\n   buttonCancel.Top = buttonOK.Top;\n   buttonCancel.Left = buttonOK.Right + 5;\n   buttonCancel.Width = buttonOK.Width;\n   buttonCancel.Height = buttonOK.Height;\n   // Set the Text property and make the \n   // button the form&#39;s cancel button.\n   buttonCancel.Text = &quot;&amp;Cancel&quot;;\n   this.CancelButton = buttonCancel;\n\n   // Set the button size and location using \n   // the Bounds property.\n   Button buttonHelp = new Button();\n   buttonHelp.Bounds = new Rectangle(10,10, 75, 25);\n   // Set the Text property of the button.\n   buttonHelp.Text = &quot;&amp;Help&quot;;\n\n   // Add the buttons to the form.\n   this.Controls.AddRange(new Control[] {buttonOK, buttonCancel, buttonHelp} );\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control SizeLocation#1\">      // Create three buttons and place them on a form using\n      // several size and location related properties.\n      void AddOKCancelButtons()\n      {\n         \n         // Set the button size and location using\n         // the Size and Location properties.\n         Button^ buttonOK = gcnew Button;\n         buttonOK-&gt;Location = Point(136,248);\n         buttonOK-&gt;Size = System::Drawing::Size( 75, 25 );\n         \n         // Set the Text property and make the\n         // button the form&#39;s default button.\n         buttonOK-&gt;Text = &quot;&amp;OK&quot;;\n         this-&gt;AcceptButton = buttonOK;\n         \n         // Set the button size and location using the Top,\n         // Left, Width, and Height properties.\n         Button^ buttonCancel = gcnew Button;\n         buttonCancel-&gt;Top = buttonOK-&gt;Top;\n         buttonCancel-&gt;Left = buttonOK-&gt;Right + 5;\n         buttonCancel-&gt;Width = buttonOK-&gt;Width;\n         buttonCancel-&gt;Height = buttonOK-&gt;Height;\n         \n         // Set the Text property and make the\n         // button the form&#39;s cancel button.\n         buttonCancel-&gt;Text = &quot;&amp;Cancel&quot;;\n         this-&gt;CancelButton = buttonCancel;\n         \n         // Set the button size and location using\n         // the Bounds property.\n         Button^ buttonHelp = gcnew Button;\n         buttonHelp-&gt;Bounds = Rectangle(10,10,75,25);\n         \n         // Set the Text property of the button.\n         buttonHelp-&gt;Text = &quot;&amp;Help&quot;;\n         \n         // Add the buttons to the form.\n         array&lt;Control^&gt;^temp1 = {buttonOK,buttonCancel,buttonHelp};\n         this-&gt;Controls-&gt;AddRange( temp1 );\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control SizeLocation#1\">&#39; Create three buttons and place them on a form using \n&#39; several size and location related properties. \nPrivate Sub AddOKCancelButtons()\n   &#39; Set the button size and location using \n      &#39; the Size and Location properties. \n   Dim buttonOK As New Button()\n   buttonOK.Location = New Point(136, 248)\n   buttonOK.Size = New Size(75, 25)\n   &#39; Set the Text property and make the \n   &#39; button the form&#39;s default button. \n   buttonOK.Text = &quot;&amp;OK&quot;\n   Me.AcceptButton = buttonOK\n   \n   &#39; Set the button size and location using the Top, \n   &#39; Left, Width, and Height properties. \n   Dim buttonCancel As New Button()\n   buttonCancel.Top = buttonOK.Top\n   buttonCancel.Left = buttonOK.Right + 5\n   buttonCancel.Width = buttonOK.Width\n   buttonCancel.Height = buttonOK.Height\n   &#39; Set the Text property and make the \n   &#39; button the form&#39;s cancel button. \n   buttonCancel.Text = &quot;&amp;Cancel&quot;\n   Me.CancelButton = buttonCancel\n   \n   &#39; Set the button size and location using \n   &#39; the Bounds property. \n   Dim buttonHelp As New Button()\n   buttonHelp.Bounds = New Rectangle(10, 10, 75, 25)\n   &#39; Set the Text property of the button.\n   buttonHelp.Text = &quot;&amp;Help&quot;\n   \n   &#39; Add the buttons to the form.\n   Me.Controls.AddRange(New Control() {buttonOK, buttonCancel, buttonHelp})\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_TopLevelControl\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_TopLevelControl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TopLevelControl</div>        \r\n          </div>\r\n    \r\n            <p>Gets the parent control that is not parented by another Windows Forms control. Typically, this is the outermost <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> that the control is contained in.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.Control TopLevelControl { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> that represents the top-level control that contains the current control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The top-level control is defined as the parent control that is not parented by another Windows Forms control. Typically, this is the outermost <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> that the control is contained in. For example, if the control is contained on an MDI child <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>, then the top-level control is the Multiple Document Interface (MDI) parent <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>. If the control is not parented on a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>, this property will return <code>null</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_UseWaitCursor\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_UseWaitCursor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UseWaitCursor</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether to use the wait cursor for the current control and all child controls.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool UseWaitCursor { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to use the wait cursor for the current control and all child controls; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use a wait cursor whenever you perform an operation that takes a noticeable amount of time.However, note that operations that block the UI thread will also block acursor change.Therefore, this property should only be used when performing time-consuming operations in another thread. To change the cursor globally and immediately, seethe <a class=\"xref\" href=\"system.windows.forms.cursor#System_Windows_Forms_Cursor_Current_\" data-linktype=\"relative-path\">Current</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Visible\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Visible_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Visible</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the control and all its child controls are displayed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Visible { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the control and all its child controls are displayed; otherwise, <code>false</code>. The default is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Note that even if <code>Visible</code> is set to <code>true</code>, the control might not be visible to the user if it is obscured behind other controls.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the derived classes <a class=\"xref\" href=\"system.windows.forms.vscrollbar\" data-linktype=\"relative-path\">VScrollBar</a> and <a class=\"xref\" href=\"system.windows.forms.hscrollbar\" data-linktype=\"relative-path\">HScrollBar</a> and sets their Visible property values, based on the size of an <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> being displayed in a <a class=\"xref\" href=\"system.windows.forms.picturebox\" data-linktype=\"relative-path\">PictureBox</a> control. This example requires that a <a class=\"xref\" href=\"system.windows.forms.picturebox\" data-linktype=\"relative-path\">PictureBox</a> has been created on a form and that <a class=\"xref\" href=\"system.windows.forms.hscrollbar\" data-linktype=\"relative-path\">HScrollBar</a> and <a class=\"xref\" href=\"system.windows.forms.vscrollbar\" data-linktype=\"relative-path\">VScrollBar</a> controls have been created on the <a class=\"xref\" href=\"system.windows.forms.picturebox\" data-linktype=\"relative-path\">PictureBox</a>. This code should be called when the image is loaded into the picture box and by the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Resize\" data-linktype=\"relative-path\">Resize</a> event of the form.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Control.Visible Example#1\">public:\n   void DisplayScrollBars()\n   {\n      // Display or hide the scroll bars based upon  \n      // whether the image is larger than the PictureBox.\n      if ( pictureBox1-&gt;Width &gt; pictureBox1-&gt;Image-&gt;Width )\n      {\n         hScrollBar1-&gt;Visible = false;\n      }\n      else\n      {\n         hScrollBar1-&gt;Visible = true;\n      }\n\n      if ( pictureBox1-&gt;Height &gt; pictureBox1-&gt;Image-&gt;Height )\n      {\n         vScrollBar1-&gt;Visible = false;\n      }\n      else\n      {\n         vScrollBar1-&gt;Visible = true;\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Control.Visible Example#1\">    Public Sub DisplayScrollBars()\n        &#39; Display or hide the scroll bars based upon  \n        &#39; whether the image is larger than the PictureBox.\n        If pictureBox1.Width &gt; pictureBox1.Image.Width Then\n            hScrollBar1.Visible = False\n        Else\n            hScrollBar1.Visible = True\n        End If\n        \n        If pictureBox1.Height &gt; pictureBox1.Image.Height Then\n            vScrollBar1.Visible = False\n        Else\n            vScrollBar1.Visible = True\n        End If\n    End Sub &#39;DisplayScrollBars\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Control.Visible Example#1\">public void DisplayScrollBars()\n {\n    // Display or hide the scroll bars based upon  \n    // whether the image is larger than the PictureBox.\n    if (pictureBox1.Width &gt; pictureBox1.Image.Width)\n    {\n       hScrollBar1.Visible = false;\n    }\n    else\n    {\n       hScrollBar1.Visible = true;\n    }\n    \n    if (pictureBox1.Height &gt; pictureBox1.Image.Height)\n    {\n       vScrollBar1.Visible = false;\n    }\n    else\n    {\n       vScrollBar1.Visible = true;\n    }\n }\n \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Width\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Width_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Width</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the width of the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Width { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The width of the control in pixels.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Changes made to the Width and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Left_\" data-linktype=\"relative-path\">Left</a> property values cause the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Right_\" data-linktype=\"relative-path\">Right</a> property value of the control to change.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates three <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> controls on a form and sets their size and location by using the various size-related and location-related properties. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> that has a width and height of at least 300 pixels.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control SizeLocation#1\">// Create three buttons and place them on a form using \n// several size and location related properties. \nprivate void AddOKCancelButtons()\n{\n   // Set the button size and location using \n   // the Size and Location properties.\n   Button buttonOK = new Button();\n   buttonOK.Location = new Point(136,248);\n   buttonOK.Size = new Size(75,25);\n   // Set the Text property and make the \n   // button the form&#39;s default button. \n   buttonOK.Text = &quot;&amp;OK&quot;;\n   this.AcceptButton = buttonOK;\n\n   // Set the button size and location using the Top, \n   // Left, Width, and Height properties.\n   Button buttonCancel = new Button();\n   buttonCancel.Top = buttonOK.Top;\n   buttonCancel.Left = buttonOK.Right + 5;\n   buttonCancel.Width = buttonOK.Width;\n   buttonCancel.Height = buttonOK.Height;\n   // Set the Text property and make the \n   // button the form&#39;s cancel button.\n   buttonCancel.Text = &quot;&amp;Cancel&quot;;\n   this.CancelButton = buttonCancel;\n\n   // Set the button size and location using \n   // the Bounds property.\n   Button buttonHelp = new Button();\n   buttonHelp.Bounds = new Rectangle(10,10, 75, 25);\n   // Set the Text property of the button.\n   buttonHelp.Text = &quot;&amp;Help&quot;;\n\n   // Add the buttons to the form.\n   this.Controls.AddRange(new Control[] {buttonOK, buttonCancel, buttonHelp} );\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control SizeLocation#1\">      // Create three buttons and place them on a form using\n      // several size and location related properties.\n      void AddOKCancelButtons()\n      {\n         \n         // Set the button size and location using\n         // the Size and Location properties.\n         Button^ buttonOK = gcnew Button;\n         buttonOK-&gt;Location = Point(136,248);\n         buttonOK-&gt;Size = System::Drawing::Size( 75, 25 );\n         \n         // Set the Text property and make the\n         // button the form&#39;s default button.\n         buttonOK-&gt;Text = &quot;&amp;OK&quot;;\n         this-&gt;AcceptButton = buttonOK;\n         \n         // Set the button size and location using the Top,\n         // Left, Width, and Height properties.\n         Button^ buttonCancel = gcnew Button;\n         buttonCancel-&gt;Top = buttonOK-&gt;Top;\n         buttonCancel-&gt;Left = buttonOK-&gt;Right + 5;\n         buttonCancel-&gt;Width = buttonOK-&gt;Width;\n         buttonCancel-&gt;Height = buttonOK-&gt;Height;\n         \n         // Set the Text property and make the\n         // button the form&#39;s cancel button.\n         buttonCancel-&gt;Text = &quot;&amp;Cancel&quot;;\n         this-&gt;CancelButton = buttonCancel;\n         \n         // Set the button size and location using\n         // the Bounds property.\n         Button^ buttonHelp = gcnew Button;\n         buttonHelp-&gt;Bounds = Rectangle(10,10,75,25);\n         \n         // Set the Text property of the button.\n         buttonHelp-&gt;Text = &quot;&amp;Help&quot;;\n         \n         // Add the buttons to the form.\n         array&lt;Control^&gt;^temp1 = {buttonOK,buttonCancel,buttonHelp};\n         this-&gt;Controls-&gt;AddRange( temp1 );\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control SizeLocation#1\">&#39; Create three buttons and place them on a form using \n&#39; several size and location related properties. \nPrivate Sub AddOKCancelButtons()\n   &#39; Set the button size and location using \n      &#39; the Size and Location properties. \n   Dim buttonOK As New Button()\n   buttonOK.Location = New Point(136, 248)\n   buttonOK.Size = New Size(75, 25)\n   &#39; Set the Text property and make the \n   &#39; button the form&#39;s default button. \n   buttonOK.Text = &quot;&amp;OK&quot;\n   Me.AcceptButton = buttonOK\n   \n   &#39; Set the button size and location using the Top, \n   &#39; Left, Width, and Height properties. \n   Dim buttonCancel As New Button()\n   buttonCancel.Top = buttonOK.Top\n   buttonCancel.Left = buttonOK.Right + 5\n   buttonCancel.Width = buttonOK.Width\n   buttonCancel.Height = buttonOK.Height\n   &#39; Set the Text property and make the \n   &#39; button the form&#39;s cancel button. \n   buttonCancel.Text = &quot;&amp;Cancel&quot;\n   Me.CancelButton = buttonCancel\n   \n   &#39; Set the button size and location using \n   &#39; the Bounds property. \n   Dim buttonHelp As New Button()\n   buttonHelp.Bounds = New Rectangle(10, 10, 75, 25)\n   &#39; Set the Text property of the button.\n   buttonHelp.Text = &quot;&amp;Help&quot;\n   \n   &#39; Add the buttons to the form.\n   Me.Controls.AddRange(New Control() {buttonOK, buttonCancel, buttonHelp})\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_WindowTarget\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_WindowTarget_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WindowTarget</div>        \r\n          </div>\r\n    \r\n            <p>This property is not relevant for this class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.IWindowTarget WindowTarget { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.iwindowtarget\" data-linktype=\"relative-path\">IWindowTarget</a></div>\r\n                  </div>\r\n                  <p>The NativeWindow contained within the control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is not relevant for this class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_AccessibilityNotifyClients_System_Windows_Forms_AccessibleEvents_System_Int32_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_AccessibilityNotifyClients_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AccessibilityNotifyClients(AccessibleEvents,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Notifies the accessibility client applications of the specified <a class=\"xref\" href=\"system.windows.forms.accessibleevents\" data-linktype=\"relative-path\">AccessibleEvents</a> for the specified child control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void AccessibilityNotifyClients (System.Windows.Forms.AccessibleEvents accEvent, int childID);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>accEvent</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.accessibleevents\" data-linktype=\"relative-path\">AccessibleEvents</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.accessibleevents\" data-linktype=\"relative-path\">AccessibleEvents</a> to notify the accessibility client applications of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>childID</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The child <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> to notify of the accessible event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You must call the <a class=\"xref\" href=\"system.windows.forms.control.controlaccessibleobject#System_Windows_Forms_Control_ControlAccessibleObject_NotifyClients_\" data-linktype=\"relative-path\">NotifyClients</a> method for each <a class=\"xref\" href=\"system.windows.forms.accessibleevents\" data-linktype=\"relative-path\">AccessibleEvents</a> the accessibility client applications are to be notified of. The <a class=\"xref\" href=\"system.windows.forms.control.controlaccessibleobject#System_Windows_Forms_Control_ControlAccessibleObject_NotifyClients_\" data-linktype=\"relative-path\">NotifyClients</a> method is typically called when a property is set or from within an event handler. For example, you might call the <a class=\"xref\" href=\"system.windows.forms.control.controlaccessibleobject#System_Windows_Forms_Control_ControlAccessibleObject_NotifyClients_\" data-linktype=\"relative-path\">NotifyClients</a> method and pass in an <a class=\"xref\" href=\"system.windows.forms.accessibleevents\" data-linktype=\"relative-path\">AccessibleEvents</a> value of <code>Hide</code> from within the event handler for the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_VisibleChanged\" data-linktype=\"relative-path\">System.Windows.Forms.Control.VisibleChanged</a> event.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the creation of an accessibility-aware chart control, using the <a class=\"xref\" href=\"system.windows.forms.accessibleobject\" data-linktype=\"relative-path\">AccessibleObject</a> and <a class=\"xref\" href=\"system.windows.forms.control.controlaccessibleobject\" data-linktype=\"relative-path\">Control+ControlAccessibleObject</a> classes to expose accessible information. The control plots two curves along with a legend. The <code>ChartControlAccessibleObject</code> class, which derives from <code>ControlAccessibleObject</code>, is used in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CreateAccessibilityInstance_\" data-linktype=\"relative-path\">CreateAccessibilityInstance</a> method to provide custom accessible information for the chart control. Since the chart legend is not an actual <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> -based control, but instead is drawn by the chart control, it does not any built-in accessible information. Because of this, the <code>ChartControlAccessibleObject</code> class overrides the <a class=\"xref\" href=\"system.windows.forms.accessibleobject#System_Windows_Forms_AccessibleObject_GetChild_\" data-linktype=\"relative-path\">GetChild</a> method to return the <code>CurveLegendAccessibleObject</code> that represents accessible information for each part of the legend. When an accessible-aware application uses this control, the control can provide the necessary accessible information.  </p>\n<p> This code excerpt demonstrates calling the AccessibilityNotifyClients method. See the <a class=\"xref\" href=\"system.windows.forms.accessibleobject\" data-linktype=\"relative-path\">AccessibleObject</a> class overview for the complete code example.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.AccessibleObject#5\">            &#39; Gets or sets the location for the curve legend.            \n            Public Property Location() As Point\n                Get\n                    Return m_location\n                End Get\n                Set\n                    m_location = value\n                    chart.Invalidate()\n\n                    &#39; Notifies the chart of the location change. This is used for\n                    &#39; the accessibility information. AccessibleEvents.LocationChange\n                    &#39; tells the chart the reason for the notification.\n                    chart.ExposeAccessibilityNotifyClients(AccessibleEvents.LocationChange, _\n                            CType(AccessibilityObject, CurveLegendAccessibleObject).ID)\n                End Set\n            End Property\n            \n            &#39; Gets or sets the Name for the curve legend.            \n            Public Property Name() As String\n                Get\n                    Return m_name\n                End Get\n                Set\n                    If m_name &lt;&gt; value Then\n                        m_name = value\n                        chart.Invalidate()\n\n                        &#39; Notifies the chart of the name change. This is used for\n                        &#39; the accessibility information. AccessibleEvents.NameChange\n                        &#39; tells the chart the reason for the notification. \n                        chart.ExposeAccessibilityNotifyClients(AccessibleEvents.NameChange, _\n                                CType(AccessibilityObject, CurveLegendAccessibleObject).ID)\n                    End If\n                End Set\n            End Property\n            \n            &#39; Gets or sets the Selected state for the curve legend.            \n            Public Property Selected() As Boolean\n                Get\n                    Return m_selected\n                End Get\n                Set\n                    If m_selected &lt;&gt; value Then\n                        m_selected = value\n                        chart.Invalidate()\n\n                        &#39; Notifies the chart of the selection value change. This is used for\n                        &#39; the accessibility information. The AccessibleEvents value varies\n                        &#39; on whether the selection is true (AccessibleEvents.SelectionAdd) or \n                        &#39; false (AccessibleEvents.SelectionRemove). \n                        If m_selected Then\n                            chart.ExposeAccessibilityNotifyClients(AccessibleEvents.SelectionAdd, _\n                                    CType(AccessibilityObject, CurveLegendAccessibleObject).ID) \n                        Else\n                            chart.ExposeAccessibilityNotifyClients(AccessibleEvents.SelectionRemove, _\n                                    CType(AccessibilityObject, CurveLegendAccessibleObject).ID) \n                        End If\n                    End If\n                End Set\n            End Property\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.AccessibleObject#5\">            // Gets or sets the location for the curve legend.\n            public Point Location\n            {   \n                get {\n                    return location;\n                }\n                set {\n                    location = value;\n                    chart.Invalidate();\n\n                    // Notifies the chart of the location change. This is used for\n                    // the accessibility information. AccessibleEvents.LocationChange\n                    // tells the chart the reason for the notification.\n\n                    chart.AccessibilityNotifyClients(AccessibleEvents.LocationChange, \n                        ((CurveLegendAccessibleObject)AccessibilityObject).ID);\n                }\n            }            \n        \n            // Gets or sets the Name for the curve legend.\n            public string Name\n            {   \n                get {\n                    return name;\n                }\n                set {\n                    if (name != value) \n                    {\n                        name = value;\n                        chart.Invalidate();\n\n                        // Notifies the chart of the name change. This is used for\n                        // the accessibility information. AccessibleEvents.NameChange\n                        // tells the chart the reason for the notification.\n\n                        chart.AccessibilityNotifyClients(AccessibleEvents.NameChange, \n                            ((CurveLegendAccessibleObject)AccessibilityObject).ID);\n                    }\n                }\n            }\n\n            // Gets or sets the Selected state for the curve legend.\n            public bool Selected\n            {   \n                get {\n                    return selected;\n                }\n                set {\n                    if (selected != value) \n                    {\n                        selected = value;\n                        chart.Invalidate();\n\n                        // Notifies the chart of the selection value change. This is used for\n                        // the accessibility information. The AccessibleEvents value depends upon\n                        // if the selection is true (AccessibleEvents.SelectionAdd) or \n                        // false (AccessibleEvents.SelectionRemove).\n                        chart.AccessibilityNotifyClients(\n                            selected ? AccessibleEvents.SelectionAdd : AccessibleEvents.SelectionRemove, \n                            ((CurveLegendAccessibleObject)AccessibilityObject).ID);\n                    }\n                }\n            }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.AccessibleObject#5\">         // Gets or sets the location for the curve legend.\n         Point get()\n         {\n            return location;\n         }\n\n         void set( Point value )\n         {\n            location = value;\n            chart-&gt;Invalidate();\n            \n            // Notifies the chart of the location change. This is used for\n            // the accessibility information. AccessibleEvents::LocationChange\n            // tells the chart the reason for the notification.\n            chart-&gt;AccessibilityNotifyClients( AccessibleEvents::LocationChange, (dynamic_cast&lt;CurveLegendAccessibleObject^&gt;(AccessibilityObject))-&gt;ID );\n         }\n\n      }\n\n      property String^ Name \n      {\n\n         // Gets or sets the Name for the curve legend.\n         String^ get()\n         {\n            return name;\n         }\n\n         void set( String^ value )\n         {\n            if ( name != value )\n            {\n               name = value;\n               chart-&gt;Invalidate();\n               \n               // Notifies the chart of the name change. This is used for\n               // the accessibility information. AccessibleEvents::NameChange\n               // tells the chart the reason for the notification.\n               chart-&gt;AccessibilityNotifyClients( AccessibleEvents::NameChange, (dynamic_cast&lt;CurveLegendAccessibleObject^&gt;(AccessibilityObject))-&gt;ID );\n            }\n         }\n\n      }\n\n      property bool Selected \n      {\n\n         // Gets or sets the Selected state for the curve legend.\n         bool get()\n         {\n            return selected;\n         }\n\n         void set( bool value )\n         {\n            if ( selected != value )\n            {\n               selected = value;\n               chart-&gt;Invalidate();\n               \n               // Notifies the chart of the selection value change. This is used for\n               // the accessibility information. The AccessibleEvents value depends upon\n               // if the selection is true (AccessibleEvents::SelectionAdd) or\n               // false (AccessibleEvents::SelectionRemove).\n               chart-&gt;AccessibilityNotifyClients( selected ? AccessibleEvents::SelectionAdd : AccessibleEvents::SelectionRemove, (dynamic_cast&lt;CurveLegendAccessibleObject^&gt;(AccessibilityObject))-&gt;ID );\n            }\n         }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_AccessibilityNotifyClients_System_Windows_Forms_AccessibleEvents_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_AccessibilityNotifyClients_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AccessibilityNotifyClients(AccessibleEvents,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Notifies the accessibility client applications of the specified <a class=\"xref\" href=\"system.windows.forms.accessibleevents\" data-linktype=\"relative-path\">AccessibleEvents</a> for the specified child control .</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void AccessibilityNotifyClients (System.Windows.Forms.AccessibleEvents accEvent, int objectID, int childID);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>accEvent</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.accessibleevents\" data-linktype=\"relative-path\">AccessibleEvents</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.accessibleevents\" data-linktype=\"relative-path\">AccessibleEvents</a> to notify the accessibility client applications of.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>objectID</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The identifier of the <a class=\"xref\" href=\"system.windows.forms.accessibleobject\" data-linktype=\"relative-path\">AccessibleObject</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>childID</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The child <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> to notify of the accessible event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_BeginInvoke_System_Delegate_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_BeginInvoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginInvoke(Delegate)</div>        \r\n          </div>\r\n    \r\n            <p>Executes the specified delegate asynchronously on the thread that the control&#39;s underlying handle was created on.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IAsyncResult BeginInvoke (Delegate method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A delegate to a method that takes no parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that represents the result of the BeginInvoke operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>No appropriate window handle can be found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The delegate is called asynchronously, and this method returns immediately. You can call this method from any thread, even the thread that owns the control&#39;s handle. If the control&#39;s handle does not exist yet, this method searches up the control&#39;s parent chain until it finds a control or form that does have a window handle. If no appropriate handle can be found, BeginInvoke will throw an exception. Exceptions within the delegate method are considered untrapped and will be sent to the application&#39;s untrapped exception handler.  </p>\n<p> You can call <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_EndInvoke_\" data-linktype=\"relative-path\">EndInvoke</a> to retrieve the return value from the delegate, if neccesary, but this is not required. <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_EndInvoke_\" data-linktype=\"relative-path\">EndInvoke</a> will block until the return value can be retrieved.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Most methods on a control can only be called from the thread where the control was created. In addition to the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_InvokeRequired_\" data-linktype=\"relative-path\">InvokeRequired</a> property, there are four methods on a control that are thread safe: <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invoke_\" data-linktype=\"relative-path\">Invoke</a>, BeginInvoke, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_EndInvoke_\" data-linktype=\"relative-path\">EndInvoke</a>, and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CreateGraphics_\" data-linktype=\"relative-path\">CreateGraphics</a> if the handle for the control has already been created. Calling <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CreateGraphics_\" data-linktype=\"relative-path\">CreateGraphics</a> before the control&#39;s handle has been created on a background thread can cause illegal cross thread calls. For all other method calls, you should use one of the invoke methods to marshal the call to the control&#39;s thread. The invoke methods always invoke their callbacks on the control&#39;s thread.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> An exception might be thrown if the thread that should process the message is no longer active.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates a use of the BeginInvoke method.  </p>\n<pre><code class=\"lang-cpp\" name=\"Control_BeginInvoke#2\">private:\n   void Invoke_Click( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      myTextBox-&gt;BeginInvoke( gcnew InvokeDelegate( this, &amp;MyForm::InvokeMethod ) );\n   }\n\n   void InvokeMethod()\n   {\n      myTextBox-&gt;Text = &quot;Executed the given delegate&quot;;\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Control_BeginInvoke#2\">   Delegate Sub InvokeDelegate()\n   \n   Private Sub Invoke_Click(sender As Object, e As EventArgs)\n      myTextBox.BeginInvoke(New InvokeDelegate(AddressOf InvokeMethod))\n   End Sub &#39;Invoke_Click\n   \n   Public Sub InvokeMethod()\n      myTextBox.Text = &quot;Executed the given delegate&quot;\n   End Sub &#39;InvokeMethod\n</code></pre><pre><code class=\"lang-cs\" name=\"Control_BeginInvoke#2\">   public delegate void InvokeDelegate();\n\n   private void Invoke_Click(object sender, EventArgs e)\n   {\n      myTextBox.BeginInvoke(new InvokeDelegate(InvokeMethod));\n   }\n   public void InvokeMethod()\n   {\n      myTextBox.Text = &quot;Executed the given delegate&quot;;\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_BeginInvoke_System_Delegate_System_Object___\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_BeginInvoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginInvoke(Delegate,Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Executes the specified delegate asynchronously with the specified arguments, on the thread that the control&#39;s underlying handle was created on.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IAsyncResult BeginInvoke (Delegate method, object[] args);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A delegate to a method that takes parameters of the same number and type that are contained in the <code>args</code> parameter.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>args</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of objects to pass as arguments to the given method. This can be <code>null</code> if no arguments are needed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that represents the result of the <span class=\"xref\">stem.Windows.Forms.Control.BeginInvoke*</span> operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>No appropriate window handle can be found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The delegate is called asynchronously, and this method returns immediately. You can call this method from any thread, even the thread that owns the control&#39;s handle. If the control&#39;s handle does not exist yet, this method searches up the control&#39;s parent chain until it finds a control or form that does have a window handle. If no appropriate handle can be found, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BeginInvoke_\" data-linktype=\"relative-path\">BeginInvoke</a> will throw an exception. Exceptions within the delegate method are considered untrapped and will be sent to the application&#39;s untrapped exception handler.  </p>\n<p> You can call <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_EndInvoke_\" data-linktype=\"relative-path\">EndInvoke</a> to retrieve the return value from the delegate, if neccesary, but this is not required. <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_EndInvoke_\" data-linktype=\"relative-path\">EndInvoke</a> will block until the return value can be retrieved.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Most methods on a control can only be called from the thread where the control was created. In addition to the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_InvokeRequired_\" data-linktype=\"relative-path\">InvokeRequired</a> property, there are four methods on a control that are thread safe: <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invoke_\" data-linktype=\"relative-path\">Invoke</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BeginInvoke_\" data-linktype=\"relative-path\">BeginInvoke</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_EndInvoke_\" data-linktype=\"relative-path\">EndInvoke</a>, and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CreateGraphics_\" data-linktype=\"relative-path\">CreateGraphics</a> if the handle for the control has already been created. Calling <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CreateGraphics_\" data-linktype=\"relative-path\">CreateGraphics</a> before the control&#39;s handle has been created on a background thread can cause illegal cross thread calls. For all other method calls, you should use one of the invoke methods to marshal the call to the control&#39;s thread. The invoke methods always invoke their callbacks on the control&#39;s thread.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> An exception might be thrown if the thread that should process the message is no longer active.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates a use of the BeginInvoke method.  </p>\n<pre><code class=\"lang-cpp\" name=\"Control_BeginInvoke#1\">private:\n   delegate void MyDelegate(\n   Label^ myControl, String^ myArg2 );\n   void Button_Click( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      array&lt;Object^&gt;^myArray = gcnew array&lt;Object^&gt;(2);\n      myArray[ 0 ] = gcnew Label;\n      myArray[ 1 ] = &quot;Enter a Value&quot;;\n      myTextBox-&gt;BeginInvoke( gcnew MyDelegate( this, &amp;MyForm::DelegateMethod ), myArray );\n   }\n\n   void DelegateMethod( Label^ myControl, String^ myCaption )\n   {\n      myControl-&gt;Location = Point(16,16);\n      myControl-&gt;Size = System::Drawing::Size( 80, 25 );\n      myControl-&gt;Text = myCaption;\n      this-&gt;Controls-&gt;Add( myControl );\n   }\n\n   delegate void InvokeDelegate();\n</code></pre><pre><code class=\"lang-vb\" name=\"Control_BeginInvoke#1\">   Delegate Sub MyDelegate(myControl As Label, myArg2 As String)\n   \n   Private Sub Button_Click(sender As Object, e As EventArgs)\n      Dim myArray(1) As Object\n      \n      myArray(0) = New Label()\n      myArray(1) = &quot;Enter a Value&quot;\n      myTextBox.BeginInvoke(New MyDelegate(AddressOf DelegateMethod), myArray)\n   End Sub &#39;Button_Click\n   \n   Public Sub DelegateMethod(myControl As Label, myCaption As String)\n      myControl.Location = New Point(16, 16)\n      myControl.Size = New Size(80, 25)\n      myControl.Text = myCaption\n      Me.Controls.Add(myControl)\n   End Sub &#39;DelegateMethod\n   \n</code></pre><pre><code class=\"lang-cs\" name=\"Control_BeginInvoke#1\">   public delegate void MyDelegate(Label myControl, string myArg2);\n\n   private void Button_Click(object sender, EventArgs e)\n   {\n      object[] myArray = new object[2];\n\n      myArray[0] = new Label();\n      myArray[1] = &quot;Enter a Value&quot;;\n      myTextBox.BeginInvoke(new MyDelegate(DelegateMethod), myArray);\n   }\n\n   public void DelegateMethod(Label myControl, string myCaption)\n   {\n      myControl.Location = new Point(16,16);\n      myControl.Size = new Size(80, 25);\n      myControl.Text = myCaption;\n      this.Controls.Add(myControl);\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_BringToFront\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_BringToFront_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BringToFront()</div>        \r\n          </div>\r\n    \r\n            <p>Brings the control to the front of the z-order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void BringToFront ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The control is moved to the front of the z-order. If the control is a child of another control, the child control is moved to the front of the z-order. BringToFront does not make a control a top-level control, and it does not raise the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Paint\" data-linktype=\"relative-path\">Paint</a> event.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example ensures that a <a class=\"xref\" href=\"system.windows.forms.label\" data-linktype=\"relative-path\">Label</a> is visible by calling its BringToFront method. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a <a class=\"xref\" href=\"system.windows.forms.panel\" data-linktype=\"relative-path\">Panel</a> named <code>panel1</code>, and a <a class=\"xref\" href=\"system.windows.forms.label\" data-linktype=\"relative-path\">Label</a> named <code>label1</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control Members4#1\">private void MakeLabelVisible()\n{\n   /* If the panel contains label1, bring it \n   * to the front to make sure it is visible. */\n   if(panel1.Contains(label1))\n   {\n      label1.BringToFront();\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control Members4#1\">Private Sub MakeLabelVisible()\n   &#39; If the panel contains label1, bring it \n   &#39; to the front to make sure it is visible. \n   If panel1.Contains(label1) Then\n      label1.BringToFront()\n   End If\nEnd Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control Members4#1\">   private:\n      void MakeLabelVisible()\n      {\n         \n         /* If the panel contains label1, bring it\n            * to the front to make sure it is visible. */\n         if ( panel1-&gt;Contains( label1 ) )\n         {\n            label1-&gt;BringToFront();\n         }\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Contains_System_Windows_Forms_Control_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Contains_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Contains(Control)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves a value indicating whether the specified control is a child of the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Contains (System.Windows.Forms.Control ctl);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ctl</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> to evaluate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified control is a child of the control; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example ensures that a <a class=\"xref\" href=\"system.windows.forms.label\" data-linktype=\"relative-path\">Label</a> is visible by calling its <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BringToFront_\" data-linktype=\"relative-path\">BringToFront</a> method. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a <a class=\"xref\" href=\"system.windows.forms.panel\" data-linktype=\"relative-path\">Panel</a> named <code>panel1</code>, and a <a class=\"xref\" href=\"system.windows.forms.label\" data-linktype=\"relative-path\">Label</a> named <code>label1</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control Members4#1\">private void MakeLabelVisible()\n{\n   /* If the panel contains label1, bring it \n   * to the front to make sure it is visible. */\n   if(panel1.Contains(label1))\n   {\n      label1.BringToFront();\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control Members4#1\">Private Sub MakeLabelVisible()\n   &#39; If the panel contains label1, bring it \n   &#39; to the front to make sure it is visible. \n   If panel1.Contains(label1) Then\n      label1.BringToFront()\n   End If\nEnd Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control Members4#1\">   private:\n      void MakeLabelVisible()\n      {\n         \n         /* If the panel contains label1, bring it\n            * to the front to make sure it is visible. */\n         if ( panel1-&gt;Contains( label1 ) )\n         {\n            label1-&gt;BringToFront();\n         }\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_CreateAccessibilityInstance\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_CreateAccessibilityInstance_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateAccessibilityInstance()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new accessibility object for the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual System.Windows.Forms.AccessibleObject CreateAccessibilityInstance ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.accessibleobject\" data-linktype=\"relative-path\">AccessibleObject</a></div>\r\n                  </div>\r\n                  <p>A new <a class=\"xref\" href=\"system.windows.forms.accessibleobject\" data-linktype=\"relative-path\">AccessibleObject</a> for the control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you do not explicitly call the CreateAccessibilityInstance method, it will be called when the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_AccessibilityObject_\" data-linktype=\"relative-path\">AccessibilityObject</a> property is referenced.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To get or set the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_AccessibilityObject_\" data-linktype=\"relative-path\">AccessibilityObject</a> property, you must add a reference to the <code>Accessibility</code> assembly installed with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnshort-md.md&quot; -->.NET Framework<!--END INCLUDE -->.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the creation of an accessibility-aware chart control, using the <a class=\"xref\" href=\"system.windows.forms.accessibleobject\" data-linktype=\"relative-path\">AccessibleObject</a> and <a class=\"xref\" href=\"system.windows.forms.control.controlaccessibleobject\" data-linktype=\"relative-path\">Control+ControlAccessibleObject</a> classes to expose accessible information. The control plots two curves along with a legend. The <code>ChartControlAccessibleObject</code> class, which derives from <code>ControlAccessibleObject</code>, is used in the CreateAccessibilityInstance method to provide custom accessible information for the chart control. Since the chart legend is not an actual <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> -based control, but instead is drawn by the chart control, it does not any built-in accessible information. Because of this, the <code>ChartControlAccessibleObject</code> class overrides the <a class=\"xref\" href=\"system.windows.forms.accessibleobject#System_Windows_Forms_AccessibleObject_GetChild_\" data-linktype=\"relative-path\">GetChild</a> method to return the <code>CurveLegendAccessibleObject</code> that represents accessible information for each part of the legend. When an accessible-aware application uses this control, the control can provide the necessary accessible information.  </p>\n<p> This code excerpt demonstrates overriding the CreateAccessibilityInstance method. See the <a class=\"xref\" href=\"system.windows.forms.accessibleobject\" data-linktype=\"relative-path\">AccessibleObject</a> class overview for the complete code example.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.AccessibleObject#2\">        &#39; Overridden to return the custom AccessibleObject \n        &#39; for the entire chart.\n        Protected Overrides Function CreateAccessibilityInstance() As AccessibleObject\n            Return New ChartControlAccessibleObject(Me)\n        End Function \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.AccessibleObject#2\">        // Overridden to return the custom AccessibleObject \n        // for the entire chart.\n        protected override AccessibleObject CreateAccessibilityInstance() \n        {            \n            return new ChartControlAccessibleObject(this);\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.AccessibleObject#2\">protected:\n   // Overridden to return the custom AccessibleObject\n   // for the entire chart.\n   virtual AccessibleObject^ CreateAccessibilityInstance() override\n   {\n      return gcnew ChartControlAccessibleObject( this );\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_CreateControl\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_CreateControl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateControl()</div>        \r\n          </div>\r\n    \r\n            <p>Forces the creation of the visible control, including the creation of the handle and any visible child controls.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void CreateControl ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The CreateControl method forces a handle to be created for the control and its child controls. This method is used when you need a handle immediately for manipulation of the control or its children; simply calling a control&#39;s constructor does not create the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Handle_\" data-linktype=\"relative-path\">Handle</a>.  </p>\n<p> CreateControl does not create a control handle if the control&#39;s <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Visible_\" data-linktype=\"relative-path\">Visible</a> property is <code>false</code>. You can either call the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CreateHandle_\" data-linktype=\"relative-path\">CreateHandle</a> method or access the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Handle_\" data-linktype=\"relative-path\">Handle</a> property to create the control&#39;s handle regardless of the control&#39;s visibility, but in this case, no window handles are created for the control&#39;s children.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_CreateControlsInstance\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_CreateControlsInstance_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateControlsInstance()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new instance of the control collection for the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual System.Windows.Forms.Control.ControlCollection CreateControlsInstance ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.control.controlcollection\" data-linktype=\"relative-path\">Control+ControlCollection</a></div>\r\n                  </div>\r\n                  <p>A new instance of <a class=\"xref\" href=\"system.windows.forms.control.controlcollection\" data-linktype=\"relative-path\">Control+ControlCollection</a> assigned to the control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_CreateGraphics\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_CreateGraphics_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateGraphics()</div>        \r\n          </div>\r\n    \r\n            <p>Creates the <a class=\"xref\" href=\"system.drawing.graphics\" data-linktype=\"relative-path\">Graphics</a> for the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Drawing.Graphics CreateGraphics ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.graphics\" data-linktype=\"relative-path\">Graphics</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.drawing.graphics\" data-linktype=\"relative-path\">Graphics</a> for the control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.drawing.graphics\" data-linktype=\"relative-path\">Graphics</a> object that you retrieve through the CreateGraphics method should not normally be retained after the current Windows message has been processed, because anything painted with that object will be erased with the next WM_PAINT message. Therefore you cannot cache the <a class=\"xref\" href=\"system.drawing.graphics\" data-linktype=\"relative-path\">Graphics</a> object for reuse, except to use non-visual methods like <a class=\"xref\" href=\"system.drawing.graphics#System_Drawing_Graphics_MeasureString_\" data-linktype=\"relative-path\">MeasureString</a>. Instead, you must call CreateGraphics every time that you want to use the <a class=\"xref\" href=\"system.drawing.graphics\" data-linktype=\"relative-path\">Graphics</a> object, and then call <a class=\"xref\" href=\"system.drawing.graphics#System_Drawing_Graphics_Dispose_\" data-linktype=\"relative-path\">Dispose</a> when you are finished using it. For more information about Windows messages, see <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_WndProc_\" data-linktype=\"relative-path\">WndProc</a>.  </p>\n<p> By design, CreateGraphics sets ownership to the calling thread, and fails if it is called on other threads.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In addition to the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_InvokeRequired_\" data-linktype=\"relative-path\">InvokeRequired</a> property, there are four methods on a control that are thread safe: <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invoke_\" data-linktype=\"relative-path\">Invoke</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BeginInvoke_\" data-linktype=\"relative-path\">BeginInvoke</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_EndInvoke_\" data-linktype=\"relative-path\">EndInvoke</a>, and CreateGraphics if the handle for the control has already been created. Calling CreateGraphics before the control&#39;s handle has been created on a background thread can cause illegal cross thread calls. For all other method calls, you should use one of the invoke methods to marshal the call to the control&#39;s thread.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example resizes the specified control so the control will accommodate its formatted text. The formatted text is the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property with the control&#39;s assigned <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Font_\" data-linktype=\"relative-path\">Font</a> applied to the text. The <code>AutoSizeControl</code> method in this example also has a <code>textPadding</code> parameter that represents the padding to apply to all edges of the control. To make the padding appear equal, align the text with the <code>MiddleCenter</code> value of <a class=\"xref\" href=\"system.drawing.contentalignment\" data-linktype=\"relative-path\">System.Drawing.ContentAlignment</a> if your control supports it.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control Member5#1\">private:\n   void AutoSizeControl( Control^ control, int textPadding )\n   {\n      \n      // Create a Graphics object for the Control.\n      Graphics^ g = control-&gt;CreateGraphics();\n      \n      // Get the Size needed to accommodate the formatted Text.\n      System::Drawing::Size preferredSize = g-&gt;MeasureString( control-&gt;Text, control-&gt;Font ).ToSize();\n      \n      // Pad the text and resize the control.\n      control-&gt;ClientSize = System::Drawing::Size( preferredSize.Width + (textPadding * 2), preferredSize.Height + (textPadding * 2) );\n      \n      // Clean up the Graphics object.\n      delete g;\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.Control Member5#1\">private void AutoSizeControl(Control control, int textPadding)\n{\n   // Create a Graphics object for the Control.\n   Graphics g = control.CreateGraphics();\n\n   // Get the Size needed to accommodate the formatted Text.\n   Size preferredSize = g.MeasureString(\n      control.Text, control.Font).ToSize();\n\n   // Pad the text and resize the control.\n   control.ClientSize = new Size(\n      preferredSize.Width + (textPadding * 2), \n      preferredSize.Height+(textPadding * 2) );\n\n   // Clean up the Graphics object.\n   g.Dispose();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control Member5#1\">Private Sub AutoSizeControl(control As Control, textPadding As Integer)\n   &#39; Create a Graphics object for the Control.\n   Dim g As Graphics = control.CreateGraphics()\n   \n   &#39; Get the Size needed to accommodate the formatted Text.\n   Dim preferredSize As Size = g.MeasureString( _\n     control.Text, control.Font).ToSize()\n   \n   &#39; Pad the text and resize the control.\n   control.ClientSize = New Size( _\n     preferredSize.Width + textPadding * 2, _\n     preferredSize.Height + textPadding * 2)\n   \n   &#39; Clean up the Graphics object.\n   g.Dispose()\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_CreateHandle\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_CreateHandle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateHandle()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a handle for the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void CreateHandle ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The object is in a disposed state.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You typically should not call the CreateHandle method directly. The preferred method is to call the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CreateControl_\" data-linktype=\"relative-path\">CreateControl</a> method, which forces a handle to be created for the control and its child controls when the control is created.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_DefWndProc_System_Windows_Forms_Message__\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_DefWndProc_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefWndProc(Message)</div>        \r\n          </div>\r\n    \r\n            <p>Sends the specified message to the default window procedure.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void DefWndProc (ref System.Windows.Forms.Message m);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>m</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Windows <a class=\"xref\" href=\"system.windows.forms.message\" data-linktype=\"relative-path\">Message</a> to process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about processing Windows messages, see the <a href=\"http://go.microsoft.com/fwlink/?LinkId=181565\" data-linktype=\"external\">WindowProc function</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_DestroyHandle\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_DestroyHandle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DestroyHandle()</div>        \r\n          </div>\r\n    \r\n            <p>Destroys the handle associated with the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void DestroyHandle ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Dispose_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> and its child controls and optionally releases the managed resources.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void Dispose (bool disposing);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>disposing</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to release both managed and unmanaged resources; <code>false</code> to release only unmanaged resources.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is called by the public <code>Dispose()</code> method and the <a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a> method.<code>Dispose()</code> invokes the protected <code>Dispose(Boolean)</code> method with the <code>disposing</code> parameter set to <code>true</code>. <a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a> invokes <code>Dispose</code> with <code>disposing</code> set to <code>false</code>.  </p>\n<p> When the <code>disposing</code>parameter is <code>true</code>, this method releases all resources held by any managed objects that this <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> references. This method invokes the <code>Dispose()</code> method of each referenced object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_DoDragDrop_System_Object_System_Windows_Forms_DragDropEffects_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_DoDragDrop_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DoDragDrop(Object,DragDropEffects)</div>        \r\n          </div>\r\n    \r\n            <p>Begins a drag-and-drop operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.DragDropEffects DoDragDrop (object data, System.Windows.Forms.DragDropEffects allowedEffects);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>data</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The data to drag.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>allowedEffects</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a></div>\r\n                  </div>\r\n                  <p>A value from the <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a> enumeration that represents the final effect that was performed during the drag-and-drop operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>allowedEffects</code> parameter determines which drag operations can occur. If the drag operation needs to interoperate with applications in another process, data should either be a base managed class (<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, <a class=\"xref\" href=\"system.drawing.bitmap\" data-linktype=\"relative-path\">Bitmap</a>, or <a class=\"xref\" href=\"system.drawing.imaging.metafile\" data-linktype=\"relative-path\">Metafile</a>), or an object that implements <a class=\"xref\" href=\"system.runtime.serialization.iserializable\" data-linktype=\"relative-path\">ISerializable</a> or <a class=\"xref\" href=\"system.windows.forms.idataobject\" data-linktype=\"relative-path\">IDataObject</a>.  </p>\n<p> The following describes how and when events related to drag-and-drop operations are raised.  </p>\n<p> The DoDragDrop method determines the control under the current cursor location. It then checks to see if the control is a valid drop target.  </p>\n<p> If the control is a valid drop target, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GiveFeedback\" data-linktype=\"relative-path\">GiveFeedback</a> event is raised with the drag-and-drop effect specified. For a list of drag-and-drop effects, see the <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a> enumeration.  </p>\n<p> Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.  </p>\n<ul>\n<li><p>If the user moves out of a window, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragLeave\" data-linktype=\"relative-path\">DragLeave</a> event is raised.  </p>\n</li>\n<li><p>If the mouse enters another control, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragEnter\" data-linktype=\"relative-path\">DragEnter</a> for that control is raised.  </p>\n</li>\n<li><p>If the mouse moves but stays within the same control, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> event is raised.  </p>\n<p>If there is a change in the keyboard or mouse button state, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_QueryContinueDrag\" data-linktype=\"relative-path\">QueryContinueDrag</a> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <a class=\"xref\" href=\"system.windows.forms.querycontinuedrageventargs#System_Windows_Forms_QueryContinueDragEventArgs_Action_\" data-linktype=\"relative-path\">Action</a> property of the event&#39;s <a class=\"xref\" href=\"system.windows.forms.querycontinuedrageventargs\" data-linktype=\"relative-path\">QueryContinueDragEventArgs</a>.  </p>\n</li>\n<li><p>If the value of <a class=\"xref\" href=\"system.windows.forms.dragaction\" data-linktype=\"relative-path\">DragAction</a> is <code>Continue</code>, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> event is raised to continue the operation and the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GiveFeedback\" data-linktype=\"relative-path\">GiveFeedback</a> event is raised with the new effect so appropriate visual feedback can be set. For a list of valid drop effects, see the <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a> enumeration.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GiveFeedback\" data-linktype=\"relative-path\">GiveFeedback</a> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse&#39;s position.  </p>\n</div>\n</li>\n<li><p>If the value of <a class=\"xref\" href=\"system.windows.forms.dragaction\" data-linktype=\"relative-path\">DragAction</a> is <code>Drop</code>, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.  </p>\n</li>\n<li><p>If the value of <a class=\"xref\" href=\"system.windows.forms.dragaction\" data-linktype=\"relative-path\">DragAction</a> is <code>Cancel</code>, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragLeave\" data-linktype=\"relative-path\">DragLeave</a> event is raised.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> The DoDragDrop method catches all exceptions and rethrows only the following security or critical exceptions:  </p>\n</div>\n<ul>\n<li><p>SecurityException  </p>\n</li>\n<li><p>NullReferenceException  </p>\n</li>\n<li><p>StackOverflowException  </p>\n</li>\n<li><p>OutOfMemoryException  </p>\n</li>\n<li><p>ThreadAbortException  </p>\n</li>\n<li><p>ExecutionEngineException  </p>\n</li>\n<li><p>IndexOutOfRangeException  </p>\n</li>\n<li><p>AccessViolationException</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates a drag-and-drop operation between two <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> controls. The example calls the DoDragDrop method when the drag action starts. The drag action starts if the mouse has moved more than <a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_DragSize_\" data-linktype=\"relative-path\">DragSize</a> from the mouse location during the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> event. The <a class=\"xref\" href=\"system.windows.forms.listbox#System_Windows_Forms_ListBox_IndexFromPoint_\" data-linktype=\"relative-path\">IndexFromPoint</a> method is used to determine the index of the item to drag during the <code>MouseDown</code> event.  </p>\n<p> The example also demonstrates using custom cursors for the drag-and-drop operation. The example requires that two cursor files, <code>3dwarro.cur</code> and <code>3dwno.cur</code>, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the <code>UseCustomCursorsCheck</code> <a class=\"xref\" href=\"system.windows.forms.checkbox\" data-linktype=\"relative-path\">CheckBox</a> is checked. The custom cursors are set in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GiveFeedback\" data-linktype=\"relative-path\">GiveFeedback</a> event handler.  </p>\n<p> The keyboard state is evaluated in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> event handler for the right <code>ListBox</code>, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the <code>ListBox</code> where the drop would occur is also determined during the <code>DragOver</code> event. If the data to drop is not a <code>String</code>, then the <a class=\"xref\" href=\"system.windows.forms.drageventargs#System_Windows_Forms_DragEventArgs_Effect_\" data-linktype=\"relative-path\">Effect</a> is set to <code>None</code> in <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a>. Finally, the status of the drop is displayed in the <code>DropLocationLabel</code> <a class=\"xref\" href=\"system.windows.forms.label\" data-linktype=\"relative-path\">Label</a>.  </p>\n<p> The data to drop for the right <code>ListBox</code> is determined in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragDrop\" data-linktype=\"relative-path\">DragDrop</a> event handler and the <code>String</code> value is added at the appropriate place in the <code>ListBox</code>. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_QueryContinueDrag\" data-linktype=\"relative-path\">QueryContinueDrag</a> event handler.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.Control.DoDragDrop#1\">using namespace System;\nusing namespace System::Drawing;\nusing namespace System::Windows::Forms;\n\nnamespace Snip_DragNDrop\n{\n   public ref class Form1: public System::Windows::Forms::Form\n   {\n   private:\n      System::Windows::Forms::ListBox^ ListDragSource;\n      System::Windows::Forms::ListBox^ ListDragTarget;\n      System::Windows::Forms::CheckBox^ UseCustomCursorsCheck;\n      System::Windows::Forms::Label ^ DropLocationLabel;\n      Int32 indexOfItemUnderMouseToDrag;\n      Int32 indexOfItemUnderMouseToDrop;\n      Rectangle dragBoxFromMouseDown;\n      Point screenOffset;\n      System::Windows::Forms::Cursor^ MyNoDropCursor;\n      System::Windows::Forms::Cursor^ MyNormalCursor;\n\n   public:\n      Form1()\n      {\n         this-&gt;ListDragSource = gcnew System::Windows::Forms::ListBox;\n         this-&gt;ListDragTarget = gcnew System::Windows::Forms::ListBox;\n         this-&gt;UseCustomCursorsCheck = gcnew System::Windows::Forms::CheckBox;\n         this-&gt;DropLocationLabel = gcnew System::Windows::Forms::Label;\n         this-&gt;SuspendLayout();\n         \n         // ListDragSource\n         array&lt;Object^&gt;^temp0 = {&quot;five&quot;,&quot;six&quot;,&quot;seven&quot;,&quot;eight&quot;,&quot;nine&quot;,&quot;ten&quot;};\n         this-&gt;ListDragSource-&gt;Items-&gt;AddRange( temp0 );\n         this-&gt;ListDragSource-&gt;Location = System::Drawing::Point( 10, 17 );\n         this-&gt;ListDragSource-&gt;Size = System::Drawing::Size( 120, 225 );\n         this-&gt;ListDragSource-&gt;MouseDown += gcnew System::Windows::Forms::MouseEventHandler( this, &amp;Form1::ListDragSource_MouseDown );\n         this-&gt;ListDragSource-&gt;QueryContinueDrag += gcnew System::Windows::Forms::QueryContinueDragEventHandler( this, &amp;Form1::ListDragSource_QueryContinueDrag );\n         this-&gt;ListDragSource-&gt;MouseUp += gcnew System::Windows::Forms::MouseEventHandler( this, &amp;Form1::ListDragSource_MouseUp );\n         this-&gt;ListDragSource-&gt;MouseMove += gcnew System::Windows::Forms::MouseEventHandler( this, &amp;Form1::ListDragSource_MouseMove );\n         this-&gt;ListDragSource-&gt;GiveFeedback += gcnew System::Windows::Forms::GiveFeedbackEventHandler( this, &amp;Form1::ListDragSource_GiveFeedback );\n         \n         // ListDragTarget\n         this-&gt;ListDragTarget-&gt;AllowDrop = true;\n         this-&gt;ListDragTarget-&gt;Location = System::Drawing::Point( 154, 17 );\n         this-&gt;ListDragTarget-&gt;Size = System::Drawing::Size( 120, 225 );\n         this-&gt;ListDragTarget-&gt;DragOver += gcnew System::Windows::Forms::DragEventHandler( this, &amp;Form1::ListDragTarget_DragOver );\n         this-&gt;ListDragTarget-&gt;DragDrop += gcnew System::Windows::Forms::DragEventHandler( this, &amp;Form1::ListDragTarget_DragDrop );\n         this-&gt;ListDragTarget-&gt;DragEnter += gcnew System::Windows::Forms::DragEventHandler( this, &amp;Form1::ListDragTarget_DragEnter );\n         this-&gt;ListDragTarget-&gt;DragLeave += gcnew System::EventHandler( this, &amp;Form1::ListDragTarget_DragLeave );\n         \n         // UseCustomCursorsCheck\n         this-&gt;UseCustomCursorsCheck-&gt;Location = System::Drawing::Point( 10, 243 );\n         this-&gt;UseCustomCursorsCheck-&gt;Size = System::Drawing::Size( 137, 24 );\n         this-&gt;UseCustomCursorsCheck-&gt;Text = &quot;Use Custom Cursors&quot;;\n         \n         // DropLocationLabel\n         this-&gt;DropLocationLabel-&gt;Location = System::Drawing::Point( 154, 245 );\n         this-&gt;DropLocationLabel-&gt;Size = System::Drawing::Size( 137, 24 );\n         this-&gt;DropLocationLabel-&gt;Text = &quot;None&quot;;\n         \n         // Form1\n         this-&gt;ClientSize = System::Drawing::Size( 292, 270 );\n         array&lt;System::Windows::Forms::Control^&gt;^formControls = {this-&gt;ListDragSource,this-&gt;ListDragTarget,this-&gt;UseCustomCursorsCheck,this-&gt;DropLocationLabel};\n         this-&gt;Controls-&gt;AddRange( formControls );\n         this-&gt;Text = &quot;drag-and-drop Example&quot;;\n         this-&gt;ResumeLayout( false );\n      }\n\n\n   private:\n      void ListDragSource_MouseDown( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n      {\n         \n         // Get the index of the item the mouse is below.\n         indexOfItemUnderMouseToDrag = this-&gt;ListDragSource-&gt;IndexFromPoint( e-&gt;X, e-&gt;Y );\n         if ( indexOfItemUnderMouseToDrag != ListBox::NoMatches )\n         {\n            \n            // Remember the point where the mouse down occurred. The DragSize indicates\n            // the size that the mouse can move before a drag event should be started.\n            System::Drawing::Size dragSize = SystemInformation::DragSize;\n            \n            // Create a rectangle using the DragSize, with the mouse position being\n            // at the center of the rectangle.\n            dragBoxFromMouseDown = Rectangle(Point(e-&gt;X - (dragSize.Width / 2),e-&gt;Y - (dragSize.Height / 2)),dragSize);\n         }\n         else\n                  dragBoxFromMouseDown = Rectangle::Empty;\n\n         \n         // Reset the rectangle if the mouse is not over an item in the ListBox.\n      }\n\n      void ListDragSource_MouseUp( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ /*e*/ )\n      {\n         \n         // Reset the drag rectangle when the mouse button is raised.\n         dragBoxFromMouseDown = Rectangle::Empty;\n      }\n\n\n      void ListDragSource_MouseMove( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n      {\n         if ( (e-&gt;Button &amp; ::MouseButtons::Left) == ::MouseButtons::Left )\n         {\n            \n            // If the mouse moves outside the rectangle, start the drag.\n            if ( dragBoxFromMouseDown != Rectangle::Empty &amp;&amp;  !dragBoxFromMouseDown.Contains( e-&gt;X, e-&gt;Y ) )\n            {\n               \n               // Create custom cursors for the drag-and-drop operation.\n               try\n               {\n                  MyNormalCursor = gcnew System::Windows::Forms::Cursor( &quot;3dwarro.cur&quot; );\n                  MyNoDropCursor = gcnew System::Windows::Forms::Cursor( &quot;3dwno.cur&quot; );\n               }\n               catch ( Exception^ ) \n               {\n                  // An error occurred while attempting to load the cursors, so use\n                  // the standard cursors.\n                  this-&gt;UseCustomCursorsCheck-&gt;Checked = false;\n               }\n               __finally\n               {                  \n                  // The screenOffset is used to account for any desktop bands\n                  // that may be at the top or left side of the screen when\n                  // determining when to cancel the drag drop operation.\n                  screenOffset = SystemInformation::WorkingArea.Location;\n                  \n                  // Proceed with the drag-and-drop, passing in the list item.\n                  DragDropEffects dropEffect = this-&gt;ListDragSource-&gt;DoDragDrop( ListDragSource-&gt;Items[ indexOfItemUnderMouseToDrag ], static_cast&lt;DragDropEffects&gt;(DragDropEffects::All | DragDropEffects::Link) );\n                  \n                  // If the drag operation was a move then remove the item.\n                  if ( dropEffect == DragDropEffects::Move )\n                  {\n                     ListDragSource-&gt;Items-&gt;RemoveAt( indexOfItemUnderMouseToDrag );\n                     \n                     // Selects the previous item in the list as long as the list has an item.\n                     if ( indexOfItemUnderMouseToDrag &gt; 0 )\n                                          ListDragSource-&gt;SelectedIndex = indexOfItemUnderMouseToDrag - 1;\n                     else\n                     if ( ListDragSource-&gt;Items-&gt;Count &gt; 0 )\n                                          \n                     // Selects the first item.\n                     ListDragSource-&gt;SelectedIndex = 0;\n                  }\n                  \n                  // Dispose of the cursors since they are no longer needed.\n                  if ( MyNormalCursor != nullptr )\n                                    delete MyNormalCursor;\n                  if ( MyNoDropCursor != nullptr )\n                                    delete MyNoDropCursor;\n               }\n            }\n         }\n      }\n\n      void ListDragSource_GiveFeedback( Object^ /*sender*/, System::Windows::Forms::GiveFeedbackEventArgs^ e )\n      {\n         // Use custom cursors if the check box is checked.\n         if ( UseCustomCursorsCheck-&gt;Checked )\n         {\n            // Sets the custom cursor based upon the effect.\n            e-&gt;UseDefaultCursors = false;\n            if ( (e-&gt;Effect &amp; DragDropEffects::Move) == DragDropEffects::Move )\n                        ::Cursor::Current = MyNormalCursor;\n            else\n                        ::Cursor::Current = MyNoDropCursor;\n         }\n      }\n\n      void ListDragTarget_DragOver( Object^ /*sender*/, System::Windows::Forms::DragEventArgs^ e )\n      {\n         // Determine whether string data exists in the drop data. If not, then\n         // the drop effect reflects that the drop cannot occur.\n         if (  !e-&gt;Data-&gt;GetDataPresent( System::String::typeid ) )\n         {\n            e-&gt;Effect = DragDropEffects::None;\n            DropLocationLabel-&gt;Text = &quot;None - no string data.&quot;;\n            return;\n         }\n\n         // Set the effect based upon the KeyState.\n         if ( (e-&gt;KeyState &amp; (8 + 32)) == (8 + 32) &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Link) == DragDropEffects::Link) )\n         {\n            // KeyState 8 + 32 = CTL + ALT\n            // Link drag-and-drop effect.\n            e-&gt;Effect = DragDropEffects::Link;\n         }\n         else\n         if ( (e-&gt;KeyState &amp; 32) == 32 &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Link) == DragDropEffects::Link) )\n         {\n            // ALT KeyState for link.\n            e-&gt;Effect = DragDropEffects::Link;\n         }\n         else\n         if ( (e-&gt;KeyState &amp; 4) == 4 &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Move) == DragDropEffects::Move) )\n         {\n            // SHIFT KeyState for move.\n            e-&gt;Effect = DragDropEffects::Move;\n         }\n         else\n         if ( (e-&gt;KeyState &amp; 8) == 8 &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Copy) == DragDropEffects::Copy) )\n         {\n            // CTL KeyState for copy.\n            e-&gt;Effect = DragDropEffects::Copy;\n         }\n         else\n         if ( (e-&gt;AllowedEffect &amp; DragDropEffects::Move) == DragDropEffects::Move )\n         {\n            // By default, the drop action should be move, if allowed.\n            e-&gt;Effect = DragDropEffects::Move;\n         }\n         else\n                  e-&gt;Effect = DragDropEffects::None;\n\n\n\n\n\n         \n         // Get the index of the item the mouse is below.\n         // The mouse locations are relative to the screen, so they must be\n         // converted to client coordinates.\n         indexOfItemUnderMouseToDrop = ListDragTarget-&gt;IndexFromPoint( ListDragTarget-&gt;PointToClient( Point(e-&gt;X,e-&gt;Y) ) );\n         \n         // Updates the label text.\n         if ( indexOfItemUnderMouseToDrop != ListBox::NoMatches )\n         {\n            DropLocationLabel-&gt;Text = String::Concat( &quot;Drops before item # &quot;, (indexOfItemUnderMouseToDrop + 1) );\n         }\n         else\n                  DropLocationLabel-&gt;Text = &quot;Drops at the end.&quot;;\n      }\n\n      void ListDragTarget_DragDrop( Object^ /*sender*/, System::Windows::Forms::DragEventArgs^ e )\n      {\n         // Ensure that the list item index is contained in the data.\n         if ( e-&gt;Data-&gt;GetDataPresent( System::String::typeid ) )\n         {\n            Object^ item = dynamic_cast&lt;Object^&gt;(e-&gt;Data-&gt;GetData( System::String::typeid ));\n            \n            // Perform drag-and-drop, depending upon the effect.\n            if ( e-&gt;Effect == DragDropEffects::Copy || e-&gt;Effect == DragDropEffects::Move )\n            {\n               // Insert the item.\n               if ( indexOfItemUnderMouseToDrop != ListBox::NoMatches )\n                              ListDragTarget-&gt;Items-&gt;Insert( indexOfItemUnderMouseToDrop, item );\n               else\n                              ListDragTarget-&gt;Items-&gt;Add( item );\n            }\n         }\n\n         // Reset the label text.\n         DropLocationLabel-&gt;Text = &quot;None&quot;;\n      }\n\n      void ListDragSource_QueryContinueDrag( Object^ sender, System::Windows::Forms::QueryContinueDragEventArgs^ e )\n      {\n         // Cancel the drag if the mouse moves off the form.\n         ListBox^ lb = dynamic_cast&lt;ListBox^&gt;(sender);\n         if ( lb != nullptr )\n         {\n            Form^ f = lb-&gt;FindForm();\n\n            // Cancel the drag if the mouse moves off the form. The screenOffset\n            // takes into account any desktop bands that may be at the top or left\n            // side of the screen.\n            if ( ((Control::MousePosition.X - screenOffset.X) &lt; f-&gt;DesktopBounds.Left) || ((Control::MousePosition.X - screenOffset.X) &gt; f-&gt;DesktopBounds.Right) || ((Control::MousePosition.Y - screenOffset.Y) &lt; f-&gt;DesktopBounds.Top) || ((Control::MousePosition.Y - screenOffset.Y) &gt; f-&gt;DesktopBounds.Bottom) )\n            {\n               e-&gt;Action = DragAction::Cancel;\n            }\n         }\n      }\n\n      void ListDragTarget_DragEnter( Object^ /*sender*/, System::Windows::Forms::DragEventArgs^ /*e*/ )\n      {\n         // Reset the label text.\n         DropLocationLabel-&gt;Text = &quot;None&quot;;\n      }\n\n      void ListDragTarget_DragLeave( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n      {\n        // Reset the label text.\n         DropLocationLabel-&gt;Text = &quot;None&quot;;\n      }\n   };\n}\n\n/// The main entry point for the application.\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew Snip_DragNDrop::Form1 );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.Control.DoDragDrop#1\">Imports System\nImports System.Drawing\nImports System.Windows.Forms\n\nPublic NotInheritable Class Form1\n    Inherits System.Windows.Forms.Form\n\n    Friend WithEvents ListDragSource As System.Windows.Forms.ListBox\n    Friend WithEvents ListDragTarget As System.Windows.Forms.ListBox\n    Friend WithEvents UseCustomCursorsCheck As System.Windows.Forms.CheckBox\n    Friend WithEvents DropLocationLabel As System.Windows.Forms.Label\n\n    Private indexOfItemUnderMouseToDrag As Integer\n    Private indexOfItemUnderMouseToDrop As Integer\n\n    Private dragBoxFromMouseDown As Rectangle\n    Private screenOffset as Point\n\n    Private MyNoDropCursor As Cursor\n    Private MyNormalCursor As Cursor\n\n    &lt;System.STAThread()&gt; _\n    Public Shared Sub Main()\n        System.Windows.Forms.Application.Run(New Form1())\n    End Sub &#39;Main\n\n    Public Sub New()\n        MyBase.New()\n\n        Me.ListDragSource = New System.Windows.Forms.ListBox()\n        Me.ListDragTarget = New System.Windows.Forms.ListBox()\n        Me.UseCustomCursorsCheck = New System.Windows.Forms.CheckBox()\n        Me.DropLocationLabel = New System.Windows.Forms.Label()\n\n        Me.SuspendLayout()\n\n        &#39; ListDragSource\n        Me.ListDragSource.Items.AddRange(New Object() {&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, _\n                                                            &quot;five&quot;, &quot;six&quot;, &quot;seven&quot;, &quot;eight&quot;, _\n                                                            &quot;nine&quot;, &quot;ten&quot;})\n        Me.ListDragSource.Location = New System.Drawing.Point(10, 17)\n        Me.ListDragSource.Size = New System.Drawing.Size(120, 225)\n\n        &#39; ListDragTarget\n        Me.ListDragTarget.AllowDrop = True\n        Me.ListDragTarget.Location = New System.Drawing.Point(154, 17)\n        Me.ListDragTarget.Size = New System.Drawing.Size(120, 225)\n\n        &#39; UseCustomCursorsCheck\n        Me.UseCustomCursorsCheck.Location = New System.Drawing.Point(10, 243)\n        Me.UseCustomCursorsCheck.Size = New System.Drawing.Size(137, 24)\n        Me.UseCustomCursorsCheck.Text = &quot;Use Custom Cursors&quot;\n\n        &#39; DropLocationLabel\n        Me.DropLocationLabel.Location = New System.Drawing.Point(154, 245)\n        Me.DropLocationLabel.Size = New System.Drawing.Size(137, 24)\n        Me.DropLocationLabel.Text = &quot;None&quot;\n\n        &#39; Form1\n        Me.ClientSize = New System.Drawing.Size(292, 270)\n        Me.Controls.AddRange(New System.Windows.Forms.Control() {Me.ListDragSource, _\n                                            Me.ListDragTarget, Me.UseCustomCursorsCheck, _\n                                            Me.DropLocationLabel})\n\n        Me.Text = &quot;drag-and-drop Example&quot;\n        Me.ResumeLayout(False)\n    End Sub\n\n    Private Sub ListDragSource_MouseDown(ByVal sender As Object, ByVal e As MouseEventArgs) Handles ListDragSource.MouseDown\n\n        &#39; Get the index of the item the mouse is below.\n        indexOfItemUnderMouseToDrag = ListDragSource.IndexFromPoint(e.X, e.Y)\n\n        If (indexOfItemUnderMouseToDrag &lt;&gt; ListBox.NoMatches) Then\n\n            &#39; Remember the point where the mouse down occurred. The DragSize indicates\n            &#39; the size that the mouse can move before a drag event should be started.                \n            Dim dragSize As Size = SystemInformation.DragSize\n\n            &#39; Create a rectangle using the DragSize, with the mouse position being\n            &#39; at the center of the rectangle.\n            dragBoxFromMouseDown = New Rectangle(New Point(e.X - (dragSize.Width / 2), _\n                                                            e.Y - (dragSize.Height / 2)), dragSize)\n        Else\n            &#39; Reset the rectangle if the mouse is not over an item in the ListBox.\n            dragBoxFromMouseDown = Rectangle.Empty\n        End If\n\n    End Sub\n\n    Private Sub ListDragSource_MouseUp(ByVal sender As Object, ByVal e As MouseEventArgs) Handles ListDragSource.MouseUp\n\n        &#39; Reset the drag rectangle when the mouse button is raised.\n        dragBoxFromMouseDown = Rectangle.Empty\n    End Sub\n\n    Private Sub ListDragSource_MouseMove(ByVal sender As Object, ByVal e As MouseEventArgs) Handles ListDragSource.MouseMove\n\n        If ((e.Button And MouseButtons.Left) = MouseButtons.Left) Then\n\n            &#39; If the mouse moves outside the rectangle, start the drag.\n            If (Rectangle.op_Inequality(dragBoxFromMouseDown, Rectangle.Empty) And _\n                Not dragBoxFromMouseDown.Contains(e.X, e.Y)) Then\n\n                &#39; Creates custom cursors for the drag-and-drop operation.\n                Try\n                    MyNormalCursor = New Cursor(&quot;3dwarro.cur&quot;)\n                    MyNoDropCursor = New Cursor(&quot;3dwno.cur&quot;)\n\n                Catch\n                    &#39; An error occurred while attempting to load the cursors so use\n                    &#39; standard cursors.\n                    UseCustomCursorsCheck.Checked = False\n                Finally\n                    &#39; The screenOffset is used to account for any desktop bands \n                    &#39; that may be at the top or left side of the screen when \n                    &#39; determining when to cancel the drag drop operation.\n                    screenOffset = SystemInformation.WorkingArea.Location\n\n                    &#39; Proceed with the drag-and-drop, passing in the list item.                    \n                    Dim dropEffect As DragDropEffects = ListDragSource.DoDragDrop(ListDragSource.Items(indexOfItemUnderMouseToDrag), _\n                                                                                  DragDropEffects.All Or DragDropEffects.Link)\n\n                    &#39; If the drag operation was a move then remove the item.\n                    If (dropEffect = DragDropEffects.Move) Then\n                        ListDragSource.Items.RemoveAt(indexOfItemUnderMouseToDrag)\n\n                        &#39; Select the previous item in the list as long as the list has an item.\n                        If (indexOfItemUnderMouseToDrag &gt; 0) Then\n                            ListDragSource.SelectedIndex = indexOfItemUnderMouseToDrag - 1\n\n                        ElseIf (ListDragSource.Items.Count &gt; 0) Then\n                            &#39; Selects the first item.\n                            ListDragSource.SelectedIndex = 0\n                        End If\n                    End If\n\n                    &#39; Dispose the cursors since they are no longer needed.\n                    If (Not MyNormalCursor Is Nothing) Then _\n                        MyNormalCursor.Dispose()\n\n                    If (Not MyNoDropCursor Is Nothing) Then _\n                        MyNoDropCursor.Dispose()\n                End Try\n\n            End If\n        End If\n    End Sub\n    Private Sub ListDragSource_GiveFeedback(ByVal sender As Object, ByVal e As GiveFeedbackEventArgs) Handles ListDragSource.GiveFeedback\n\n        &#39; Use custom cursors if the check box is checked.\n        If (UseCustomCursorsCheck.Checked) Then\n\n            &#39; Set the custom cursor based upon the effect.\n            e.UseDefaultCursors = False\n            If ((e.Effect And DragDropEffects.Move) = DragDropEffects.Move) Then\n                Cursor.Current = MyNormalCursor\n            Else\n                Cursor.Current = MyNoDropCursor\n            End If\n        End If\n\n    End Sub\n\n    Private Sub ListDragTarget_DragOver(ByVal sender As Object, ByVal e As DragEventArgs) Handles ListDragTarget.DragOver\n        &#39; Determine whether string data exists in the drop data. If not, then\n        &#39; the drop effect reflects that the drop cannot occur.\n        If Not (e.Data.GetDataPresent(GetType(System.String))) Then\n\n            e.Effect = DragDropEffects.None\n            DropLocationLabel.Text = &quot;None - no string data.&quot;\n            Return\n        End If\n\n        &#39; Set the effect based upon the KeyState.\n        If ((e.KeyState And (8 + 32)) = (8 + 32) And _\n            (e.AllowedEffect And DragDropEffects.Link) = DragDropEffects.Link) Then\n            &#39; KeyState 8 + 32 = CTL + ALT\n\n            &#39; Link drag-and-drop effect.\n            e.Effect = DragDropEffects.Link\n\n        ElseIf ((e.KeyState And 32) = 32 And _\n            (e.AllowedEffect And DragDropEffects.Link) = DragDropEffects.Link) Then\n\n            &#39; ALT KeyState for link.\n            e.Effect = DragDropEffects.Link\n\n        ElseIf ((e.KeyState And 4) = 4 And _\n            (e.AllowedEffect And DragDropEffects.Move) = DragDropEffects.Move) Then\n\n            &#39; SHIFT KeyState for move.\n            e.Effect = DragDropEffects.Move\n\n        ElseIf ((e.KeyState And 8) = 8 And _\n            (e.AllowedEffect And DragDropEffects.Copy) = DragDropEffects.Copy) Then\n\n            &#39; CTL KeyState for copy.\n            e.Effect = DragDropEffects.Copy\n\n        ElseIf ((e.AllowedEffect And DragDropEffects.Move) = DragDropEffects.Move) Then\n\n            &#39; By default, the drop action should be move, if allowed.\n            e.Effect = DragDropEffects.Move\n\n        Else\n            e.Effect = DragDropEffects.None\n        End If\n\n        &#39; Gets the index of the item the mouse is below. \n\n        &#39; The mouse locations are relative to the screen, so they must be \n        &#39; converted to client coordinates.\n\n        indexOfItemUnderMouseToDrop = _\n            ListDragTarget.IndexFromPoint(ListDragTarget.PointToClient(New Point(e.X, e.Y)))\n\n        &#39; Updates the label text.\n        If (indexOfItemUnderMouseToDrop &lt;&gt; ListBox.NoMatches) Then\n\n            DropLocationLabel.Text = &quot;Drops before item #&quot; &amp; (indexOfItemUnderMouseToDrop + 1)\n        Else\n            DropLocationLabel.Text = &quot;Drops at the end.&quot;\n        End If\n\n    End Sub\n\n    Private Sub ListDragTarget_DragDrop(ByVal sender As Object, ByVal e As DragEventArgs) Handles ListDragTarget.DragDrop\n        &#39; Ensures that the list item index is contained in the data.\n\n        If (e.Data.GetDataPresent(GetType(System.String))) Then\n\n            Dim item As Object = CType(e.Data.GetData(GetType(System.String)), System.Object)\n\n            &#39; Perform drag-and-drop, depending upon the effect.\n            If (e.Effect = DragDropEffects.Copy Or _\n                e.Effect = DragDropEffects.Move) Then\n\n                &#39; Insert the item.\n                If (indexOfItemUnderMouseToDrop &lt;&gt; ListBox.NoMatches) Then\n                    ListDragTarget.Items.Insert(indexOfItemUnderMouseToDrop, item)\n                Else\n                    ListDragTarget.Items.Add(item)\n\n                End If\n            End If\n            &#39; Reset the label text.\n            DropLocationLabel.Text = &quot;None&quot;\n        End If\n    End Sub\n    Private Sub ListDragSource_QueryContinueDrag(ByVal sender As Object, ByVal e As QueryContinueDragEventArgs) Handles ListDragSource.QueryContinueDrag\n        &#39; Cancel the drag if the mouse moves off the form.\n        Dim lb as ListBox = CType(sender, System.Windows.Forms.ListBox)\n\n        If (lb isNot nothing) Then\n\n            Dim f as Form = lb.FindForm()\n\n            &#39; Cancel the drag if the mouse moves off the form. The screenOffset\n            &#39; takes into account any desktop bands that may be at the top or left\n            &#39; side of the screen.\n            If (((Control.MousePosition.X - screenOffset.X) &lt; f.DesktopBounds.Left) Or _\n                ((Control.MousePosition.X - screenOffset.X) &gt; f.DesktopBounds.Right) Or _\n                ((Control.MousePosition.Y - screenOffset.Y) &lt; f.DesktopBounds.Top) Or _\n                ((Control.MousePosition.Y - screenOffset.Y) &gt; f.DesktopBounds.Bottom)) Then\n\n                e.Action = DragAction.Cancel\n            End If\n        End if\n    End Sub\n    Private Sub ListDragTarget_DragEnter(ByVal sender As Object, ByVal e As DragEventArgs) Handles ListDragTarget.DragEnter\n\n        &#39; Reset the label text.\n        DropLocationLabel.Text = &quot;None&quot;\n    End Sub\n    Private Sub ListDragTarget_DragLeave(ByVal sender As Object, ByVal e As System.EventArgs) Handles ListDragTarget.DragLeave\n\n        &#39; Reset the label text.\n        DropLocationLabel.Text = &quot;None&quot;\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.Control.DoDragDrop#1\">using System;\nusing System.Drawing;\nusing System.Windows.Forms;\n\nnamespace Snip_DragNDrop\n{\n    public class Form1 : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ListBox ListDragSource;\n        private System.Windows.Forms.ListBox ListDragTarget;\n        private System.Windows.Forms.CheckBox UseCustomCursorsCheck;\n        private System.Windows.Forms.Label DropLocationLabel;\n\n        private int indexOfItemUnderMouseToDrag;\n        private int indexOfItemUnderMouseToDrop;        \n        \n        private Rectangle dragBoxFromMouseDown;\n        private Point screenOffset;\n\n        private Cursor MyNoDropCursor;\n        private Cursor MyNormalCursor;\n\n        /// The main entry point for the application.\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new Form1());\n        }\n\n        public Form1()\n        {\n            this.ListDragSource = new System.Windows.Forms.ListBox();\n            this.ListDragTarget = new System.Windows.Forms.ListBox();\n            this.UseCustomCursorsCheck = new System.Windows.Forms.CheckBox();\n            this.DropLocationLabel = new System.Windows.Forms.Label();\n\n            this.SuspendLayout();\n\n            // ListDragSource\n            this.ListDragSource.Items.AddRange(new object[] {&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, \n                                                                &quot;five&quot;, &quot;six&quot;, &quot;seven&quot;, &quot;eight&quot;,\n                                                                &quot;nine&quot;, &quot;ten&quot;});\n            this.ListDragSource.Location = new System.Drawing.Point(10, 17);\n            this.ListDragSource.Size = new System.Drawing.Size(120, 225);\n            this.ListDragSource.MouseDown += new System.Windows.Forms.MouseEventHandler(this.ListDragSource_MouseDown);\n            this.ListDragSource.QueryContinueDrag += new System.Windows.Forms.QueryContinueDragEventHandler(this.ListDragSource_QueryContinueDrag);\n            this.ListDragSource.MouseUp += new System.Windows.Forms.MouseEventHandler(this.ListDragSource_MouseUp);\n            this.ListDragSource.MouseMove += new System.Windows.Forms.MouseEventHandler(this.ListDragSource_MouseMove);\n            this.ListDragSource.GiveFeedback += new System.Windows.Forms.GiveFeedbackEventHandler(this.ListDragSource_GiveFeedback);\n\n            // ListDragTarget\n            this.ListDragTarget.AllowDrop = true;\n            this.ListDragTarget.Location = new System.Drawing.Point(154, 17);\n            this.ListDragTarget.Size = new System.Drawing.Size(120, 225);\n            this.ListDragTarget.DragOver += new System.Windows.Forms.DragEventHandler(this.ListDragTarget_DragOver);\n            this.ListDragTarget.DragDrop += new System.Windows.Forms.DragEventHandler(this.ListDragTarget_DragDrop);\n            this.ListDragTarget.DragEnter += new System.Windows.Forms.DragEventHandler(this.ListDragTarget_DragEnter);\n            this.ListDragTarget.DragLeave += new System.EventHandler(this.ListDragTarget_DragLeave);\n\n            // UseCustomCursorsCheck\n            this.UseCustomCursorsCheck.Location = new System.Drawing.Point(10, 243);\n            this.UseCustomCursorsCheck.Size = new System.Drawing.Size(137, 24);\n            this.UseCustomCursorsCheck.Text = &quot;Use Custom Cursors&quot;;\n\n            // DropLocationLabel\n            this.DropLocationLabel.Location = new System.Drawing.Point(154, 245);\n            this.DropLocationLabel.Size = new System.Drawing.Size(137, 24);\n            this.DropLocationLabel.Text = &quot;None&quot;;\n           \n            // Form1\n            this.ClientSize = new System.Drawing.Size(292, 270);\n            this.Controls.AddRange(new System.Windows.Forms.Control[] {this.ListDragSource,\n                                                        this.ListDragTarget, this.UseCustomCursorsCheck,\n                                                        this.DropLocationLabel});\n            this.Text = &quot;drag-and-drop Example&quot;;\n\n            this.ResumeLayout(false);\n\n        }\n\n        private void ListDragSource_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e) \n        {\n            // Get the index of the item the mouse is below.\n            indexOfItemUnderMouseToDrag = ListDragSource.IndexFromPoint(e.X, e.Y);\n\n            if (indexOfItemUnderMouseToDrag != ListBox.NoMatches) {\n                                \n                // Remember the point where the mouse down occurred. The DragSize indicates\n                // the size that the mouse can move before a drag event should be started.                \n                Size dragSize = SystemInformation.DragSize;\n\n                // Create a rectangle using the DragSize, with the mouse position being\n                // at the center of the rectangle.\n                dragBoxFromMouseDown = new Rectangle(new Point(e.X - (dragSize.Width /2),\n                                                               e.Y - (dragSize.Height /2)), dragSize);\n            } else\n                // Reset the rectangle if the mouse is not over an item in the ListBox.\n                dragBoxFromMouseDown = Rectangle.Empty;\n\n        }\n\n        private void ListDragSource_MouseUp(object sender, System.Windows.Forms.MouseEventArgs e) {\n            // Reset the drag rectangle when the mouse button is raised.\n            dragBoxFromMouseDown = Rectangle.Empty;\n        }\n\n        private void ListDragSource_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e) \n        {\n            \n            if ((e.Button &amp; MouseButtons.Left) == MouseButtons.Left) {\n\n                // If the mouse moves outside the rectangle, start the drag.\n                if (dragBoxFromMouseDown != Rectangle.Empty &amp;&amp; \n                    !dragBoxFromMouseDown.Contains(e.X, e.Y)) {\n\n                    // Create custom cursors for the drag-and-drop operation.\n                    try {\n                        MyNormalCursor = new Cursor(&quot;3dwarro.cur&quot;);\n                        MyNoDropCursor = new Cursor(&quot;3dwno.cur&quot;);\n\n                    } catch {\n                        // An error occurred while attempting to load the cursors, so use\n                        // standard cursors.\n                        UseCustomCursorsCheck.Checked = false;\n                    }finally {\n\n                        // The screenOffset is used to account for any desktop bands \n                        // that may be at the top or left side of the screen when \n                        // determining when to cancel the drag drop operation.\n                        screenOffset = SystemInformation.WorkingArea.Location;\n\n                        // Proceed with the drag-and-drop, passing in the list item.                    \n                        DragDropEffects dropEffect = ListDragSource.DoDragDrop(ListDragSource.Items[indexOfItemUnderMouseToDrag], DragDropEffects.All | DragDropEffects.Link);\n\n                        // If the drag operation was a move then remove the item.\n                        if (dropEffect == DragDropEffects.Move) {                        \n                            ListDragSource.Items.RemoveAt(indexOfItemUnderMouseToDrag);\n\n                            // Selects the previous item in the list as long as the list has an item.\n                            if (indexOfItemUnderMouseToDrag &gt; 0)\n                                ListDragSource.SelectedIndex = indexOfItemUnderMouseToDrag -1;\n\n                            else if (ListDragSource.Items.Count &gt; 0)\n                                // Selects the first item.\n                                ListDragSource.SelectedIndex =0;\n                        }\n\n                        // Dispose of the cursors since they are no longer needed.\n                        if (MyNormalCursor != null)\n                            MyNormalCursor.Dispose();\n\n                        if (MyNoDropCursor != null)\n                            MyNoDropCursor.Dispose();\n                    }\n                }\n            }\n        }\n        private void ListDragSource_GiveFeedback(object sender, System.Windows.Forms.GiveFeedbackEventArgs e) \n        {\n            // Use custom cursors if the check box is checked.\n            if (UseCustomCursorsCheck.Checked) {\n\n                // Sets the custom cursor based upon the effect.\n                e.UseDefaultCursors = false;\n                if ((e.Effect &amp; DragDropEffects.Move) == DragDropEffects.Move)\n                    Cursor.Current = MyNormalCursor;\n                else \n                    Cursor.Current = MyNoDropCursor;\n            }\n        \n        }\n        private void ListDragTarget_DragOver(object sender, System.Windows.Forms.DragEventArgs e) \n        {\n\n            // Determine whether string data exists in the drop data. If not, then\n            // the drop effect reflects that the drop cannot occur.\n            if (!e.Data.GetDataPresent(typeof(System.String))) {\n\n                e.Effect = DragDropEffects.None;\n                DropLocationLabel.Text = &quot;None - no string data.&quot;;\n                return;\n            }\n\n            // Set the effect based upon the KeyState.\n            if ((e.KeyState &amp; (8+32)) == (8+32) &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Link) == DragDropEffects.Link) {\n                // KeyState 8 + 32 = CTL + ALT\n\n                // Link drag-and-drop effect.\n                e.Effect = DragDropEffects.Link;\n\n            } else if ((e.KeyState &amp; 32) == 32 &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Link) == DragDropEffects.Link) {\n\n                // ALT KeyState for link.\n                e.Effect = DragDropEffects.Link;\n\n            } else if ((e.KeyState &amp; 4) == 4 &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Move) == DragDropEffects.Move) {\n\n                // SHIFT KeyState for move.\n                e.Effect = DragDropEffects.Move;\n\n            } else if ((e.KeyState &amp; 8) == 8 &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Copy) == DragDropEffects.Copy) {\n\n                // CTL KeyState for copy.\n                e.Effect = DragDropEffects.Copy;\n\n            } else if ((e.AllowedEffect &amp; DragDropEffects.Move) == DragDropEffects.Move)  {\n\n                // By default, the drop action should be move, if allowed.\n                e.Effect = DragDropEffects.Move;\n\n            } else\n                e.Effect = DragDropEffects.None;\n                \n            // Get the index of the item the mouse is below. \n\n            // The mouse locations are relative to the screen, so they must be \n            // converted to client coordinates.\n\n            indexOfItemUnderMouseToDrop = \n                ListDragTarget.IndexFromPoint(ListDragTarget.PointToClient(new Point(e.X, e.Y)));\n\n            // Updates the label text.\n            if (indexOfItemUnderMouseToDrop != ListBox.NoMatches){\n\n                DropLocationLabel.Text = &quot;Drops before item #&quot; + (indexOfItemUnderMouseToDrop + 1);\n            } else\n                DropLocationLabel.Text = &quot;Drops at the end.&quot;;\n\n        }\n        private void ListDragTarget_DragDrop(object sender, System.Windows.Forms.DragEventArgs e) \n        {\n            // Ensure that the list item index is contained in the data.\n            if (e.Data.GetDataPresent(typeof(System.String))) {\n\n                Object item = (object)e.Data.GetData(typeof(System.String));\n\n                // Perform drag-and-drop, depending upon the effect.\n                if (e.Effect == DragDropEffects.Copy ||\n                    e.Effect == DragDropEffects.Move) {\n                \n                    // Insert the item.\n                    if (indexOfItemUnderMouseToDrop != ListBox.NoMatches)\n                        ListDragTarget.Items.Insert(indexOfItemUnderMouseToDrop, item);\n                    else\n                        ListDragTarget.Items.Add(item);\n                    \n                }\n            }\n            // Reset the label text.\n            DropLocationLabel.Text = &quot;None&quot;;\n        }\n        private void ListDragSource_QueryContinueDrag(object sender, System.Windows.Forms.QueryContinueDragEventArgs e) {\n            // Cancel the drag if the mouse moves off the form.\n            ListBox lb = sender as ListBox;\n\n            if (lb != null) {\n\n                Form f = lb.FindForm();\n\n                // Cancel the drag if the mouse moves off the form. The screenOffset\n                // takes into account any desktop bands that may be at the top or left\n                // side of the screen.\n                if (((Control.MousePosition.X - screenOffset.X) &lt; f.DesktopBounds.Left) ||\n                    ((Control.MousePosition.X - screenOffset.X) &gt; f.DesktopBounds.Right) ||\n                    ((Control.MousePosition.Y - screenOffset.Y) &lt; f.DesktopBounds.Top) ||\n                    ((Control.MousePosition.Y - screenOffset.Y) &gt; f.DesktopBounds.Bottom)) {\n\n                    e.Action = DragAction.Cancel;\n                }\n            }\n        }\n        private void ListDragTarget_DragEnter(object sender, System.Windows.Forms.DragEventArgs e) {\n            // Reset the label text.\n            DropLocationLabel.Text = &quot;None&quot;;\n        }\n        private void ListDragTarget_DragLeave(object sender, System.EventArgs e) {\n            // Reset the label text.\n            DropLocationLabel.Text = &quot;None&quot;;\n        }\n    }\n}\n</code></pre><p> The following code example shows how to use the <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a> enumeration to specify how data should be transferred between the controls involved in a drag-and-drop operation. This example requires that your form includes a <a class=\"xref\" href=\"system.windows.forms.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> control and a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> control and that the <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> control is populated with a list of valid file names. When the user drags a file name onto the <a class=\"xref\" href=\"system.windows.forms.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> control, the control&#39;s <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragEnter\" data-linktype=\"relative-path\">DragEnter</a> event is raised. Within the event handler, the <a class=\"xref\" href=\"system.windows.forms.drageventargs#System_Windows_Forms_DragEventArgs_Effect_\" data-linktype=\"relative-path\">Effect</a> property of the <a class=\"xref\" href=\"system.windows.forms.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a> is initialized to <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a> to indicate that the data referenced by the file path should be copied to the <a class=\"xref\" href=\"system.windows.forms.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> control.  </p>\n<pre><code class=\"lang-cs\" name=\"RichTextDragDrop#1\">private void Form1_Load(object sender, EventArgs e) \n{\n   // Sets the AllowDrop property so that data can be dragged onto the control.\n   richTextBox1.AllowDrop = true;\n\n   // Add code here to populate the ListBox1 with paths to text files.\n\n}\n\nprivate void listBox1_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)\n{\n   // Determines which item was selected.\n   ListBox lb =( (ListBox)sender);\n   Point pt = new Point(e.X,e.Y);\n   int index = lb.IndexFromPoint(pt);\n\n   // Starts a drag-and-drop operation with that item.\n   if(index&gt;=0) \n   {\n      lb.DoDragDrop(lb.Items[index].ToString(), DragDropEffects.Link);\n   }\n}\n\nprivate void richTextBox1_DragEnter(object sender, DragEventArgs e) \n{\n   // If the data is text, copy the data to the RichTextBox control.\n   if(e.Data.GetDataPresent(&quot;Text&quot;))\n      e.Effect = DragDropEffects.Copy;\n}\n\nprivate void richTextBox1_DragDrop(object sender, DragEventArgs e) \n{\n   // Loads the file into the control. \n   richTextBox1.LoadFile((String)e.Data.GetData(&quot;Text&quot;), System.Windows.Forms.RichTextBoxStreamType.RichText);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"RichTextDragDrop#1\">Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load\n   &#39; Sets the AllowDrop property so that data can be dragged onto the control.\n   RichTextBox1.AllowDrop = True\n\n   &#39; Add code here to populate the ListBox1 with paths to text files.\n\nEnd Sub\n\nPrivate Sub RichTextBox1_DragEnter(ByVal sender As Object, ByVal e As System.Windows.Forms.DragEventArgs) Handles RichTextBox1.DragEnter\n   &#39; If the data is text, copy the data to the RichTextBox control.\n   If (e.Data.GetDataPresent(&quot;Text&quot;)) Then\n      e.Effect = DragDropEffects.Copy\n   End If\nEnd Sub\n\n\nPrivate Overloads Sub RichTextBox1_DragDrop(ByVal sender As Object, ByVal e As System.Windows.Forms.DragEventArgs) Handles RichTextBox1.DragDrop\n   &#39; Loads the file into the control. \n   RichTextBox1.LoadFile(e.Data.GetData(&quot;Text&quot;), System.Windows.Forms.RichTextBoxStreamType.RichText)\nEnd Sub\n\nPrivate Sub ListBox1_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles ListBox1.MouseDown\n   Dim Lb As ListBox\n   Dim Pt As New Point(e.X, e.Y)\n   Dim Index As Integer\n\n   &#39; Determines which item was selected.\n   Lb = sender\n   Index = Lb.IndexFromPoint(Pt)\n\n   &#39; Starts a drag-and-drop operation with that item.\n   If Index &gt;= 0 Then\n      Lb.DoDragDrop(Lb.Items(Index), DragDropEffects.Link)\n   End If\nEnd Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"RichTextDragDrop#1\">private:\n   void Form1_Load( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      // Sets the AllowDrop property so that data can be dragged onto the control.\n      richTextBox1-&gt;AllowDrop = true;\n\n      // Add code here to populate the ListBox1 with paths to text files.\n   }\n\n   void listBox1_MouseDown( Object^ sender, System::Windows::Forms::MouseEventArgs^ e )\n   {\n      // Determines which item was selected.\n      ListBox^ lb = (dynamic_cast&lt;ListBox^&gt;(sender));\n      Point pt = Point(e-&gt;X,e-&gt;Y);\n      int index = lb-&gt;IndexFromPoint( pt );\n\n      // Starts a drag-and-drop operation with that item.\n      if ( index &gt;= 0 )\n      {\n         lb-&gt;DoDragDrop( lb-&gt;Items[ index ], DragDropEffects::Link );\n      }\n   }\n\n   void richTextBox1_DragEnter( Object^ /*sender*/, DragEventArgs^ e )\n   {\n      // If the data is text, copy the data to the RichTextBox control.\n      if ( e-&gt;Data-&gt;GetDataPresent( &quot;Text&quot; ) )\n            e-&gt;Effect = DragDropEffects::Copy;\n   }\n\n   void richTextBox1_DragDrop( Object^ /*sender*/, DragEventArgs^ e )\n   {\n      // Loads the file into the control.\n      richTextBox1-&gt;LoadFile( dynamic_cast&lt;String^&gt;(e-&gt;Data-&gt;GetData( &quot;Text&quot; )), System::Windows::Forms::RichTextBoxStreamType::RichText );\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_DrawToBitmap_System_Drawing_Bitmap_System_Drawing_Rectangle_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_DrawToBitmap_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DrawToBitmap(Bitmap,Rectangle)</div>        \r\n          </div>\r\n    \r\n            <p>Supports rendering to the specified bitmap.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void DrawToBitmap (System.Drawing.Bitmap bitmap, System.Drawing.Rectangle targetBounds);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bitmap</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.bitmap\" data-linktype=\"relative-path\">Bitmap</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The bitmap to be drawn to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>targetBounds</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The bounds within which the control is rendered.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The DrawToBitmap method is not supported for ActiveX controls. You can override the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnPrint_\" data-linktype=\"relative-path\">OnPrint</a> event and provide custom printing logic if required.  </p>\n<p> The DrawToBitmap method has the following limitations:  </p>\n<ul>\n<li><p>An <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> might be thrown for large bitmaps. The maximum allowable size varies by machine.  </p>\n</li>\n<li><p>DrawToBitmap does not support the <code>Ink</code> controls for the Windows XP Tablet PC Edition 2005 operating system.  </p>\n</li>\n<li><p>DrawToBitmap does not draw a child <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> if the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Visible_\" data-linktype=\"relative-path\">Visible</a> property of the <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> is set to <code>false</code>.  </p>\n</li>\n<li><p>Controls inside containers are rendered in reverse order.  </p>\n</li>\n<li><p>DrawToBitmap is not fully functional for the <a class=\"xref\" href=\"system.windows.forms.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>; only the border of a bitmap is drawn.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_EndInvoke_System_IAsyncResult_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_EndInvoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndInvoke(IAsyncResult)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the return value of the asynchronous operation represented by the <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> passed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object EndInvoke (IAsyncResult asyncResult);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that represents a specific invoke asynchronous operation, returned when calling <span class=\"xref\">stem.Windows.Forms.Control.BeginInvoke*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> generated by the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>asyncResult</code> parameter value is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>asyncResult</code> object was not created by a preceding call of the <span class=\"xref\">stem.Windows.Forms.Control.BeginInvoke*</span> method from the same control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the asynchronous operation has not been completed, this function will block until the result is available.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In addition to the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_InvokeRequired_\" data-linktype=\"relative-path\">InvokeRequired</a> property, there are four methods on a control that are thread safe: <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invoke_\" data-linktype=\"relative-path\">Invoke</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BeginInvoke_\" data-linktype=\"relative-path\">BeginInvoke</a>, EndInvoke, and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CreateGraphics_\" data-linktype=\"relative-path\">CreateGraphics</a> if the handle for the control has already been created. Calling <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CreateGraphics_\" data-linktype=\"relative-path\">CreateGraphics</a> before the control&#39;s handle has been created on a background thread can cause illegal cross thread calls. For all other method calls, you should use one of the invoke methods to marshal the call to the control&#39;s thread.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_FindForm\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_FindForm_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FindForm()</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the form that the control is on.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.Form FindForm ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> that the control is on.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The control&#39;s <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Parent_\" data-linktype=\"relative-path\">Parent</a> property value might not be the same as the <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> returned by FindForm method. For example, if a <a class=\"xref\" href=\"system.windows.forms.radiobutton\" data-linktype=\"relative-path\">RadioButton</a> control is contained within a <a class=\"xref\" href=\"system.windows.forms.groupbox\" data-linktype=\"relative-path\">GroupBox</a> control, and the <a class=\"xref\" href=\"system.windows.forms.groupbox\" data-linktype=\"relative-path\">GroupBox</a> is on a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>, the <a class=\"xref\" href=\"system.windows.forms.radiobutton\" data-linktype=\"relative-path\">RadioButton</a> control&#39;s <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Parent_\" data-linktype=\"relative-path\">Parent</a> is the <a class=\"xref\" href=\"system.windows.forms.groupbox\" data-linktype=\"relative-path\">GroupBox</a> and the <a class=\"xref\" href=\"system.windows.forms.groupbox\" data-linktype=\"relative-path\">GroupBox</a> control&#39;s <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Parent_\" data-linktype=\"relative-path\">Parent</a> is the <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example finds the form that contains the specified button.  </p>\n<pre><code class=\"lang-cpp\" name=\"Control.FindForm#1\">   // This example uses the Parent property and the Find method of Control to set\n   // properties on the parent control of a Button and its Form. The example assumes\n   // that a Button control named button1 is located within a GroupBox control. The \n   // example also assumes that the Click event of the Button control is connected to\n   // the event handler method defined in the example.\nprivate:\n   void button1_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // Get the control the Button control is located in. In this case a GroupBox.\n      Control^ control = button1-&gt;Parent;\n      \n      // Set the text and backcolor of the parent control.\n      control-&gt;Text = &quot;My Groupbox&quot;;\n      control-&gt;BackColor = Color::Blue;\n      \n      // Get the form that the Button control is contained within.\n      Form^ myForm = button1-&gt;FindForm();\n      \n      // Set the text and color of the form containing the Button.\n      myForm-&gt;Text = &quot;The Form of My Control&quot;;\n      myForm-&gt;BackColor = Color::Red;\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Control.FindForm#1\">   &#39; This example uses the Parent property and the Find method of Control to set\n   &#39; properties on the parent control of a Button and its Form. The example assumes\n   &#39; that a Button control named button1 is located within a GroupBox control. The \n   &#39; example also assumes that the Click event of the Button control is connected to\n   &#39; the event handler method defined in the example.\n   Private Sub button1_Click(sender As Object, e As System.EventArgs) Handles button1.Click\n      &#39; Get the control the Button control is located in. In this case a GroupBox.\n      Dim control As Control = button1.Parent\n      &#39; Set the text and backcolor of the parent control.\n      control.Text = &quot;My Groupbox&quot;\n      control.BackColor = Color.Blue\n      &#39; Get the form that the Button control is contained within.\n      Dim myForm As Form = button1.FindForm()\n      &#39; Set the text and color of the form containing the Button.\n      myForm.Text = &quot;The Form of My Control&quot;\n      myForm.BackColor = Color.Red\n   End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Control.FindForm#1\">      // This example uses the Parent property and the Find method of Control to set\n      // properties on the parent control of a Button and its Form. The example assumes\n      // that a Button control named button1 is located within a GroupBox control. The \n      // example also assumes that the Click event of the Button control is connected to\n      // the event handler method defined in the example.\n      private void button1_Click(object sender, System.EventArgs e)\n      {\n         // Get the control the Button control is located in. In this case a GroupBox.\n         Control control = button1.Parent;\n         // Set the text and backcolor of the parent control.\n         control.Text = &quot;My Groupbox&quot;;\n         control.BackColor = Color.Blue;\n         // Get the form that the Button control is contained within.\n         Form myForm = button1.FindForm();\n         // Set the text and color of the form containing the Button.\n         myForm.Text = &quot;The Form of My Control&quot;;\n         myForm.BackColor = Color.Red;\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Focus\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Focus_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Focus()</div>        \r\n          </div>\r\n    \r\n            <p>Sets input focus to the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Focus ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the input focus request was successful; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Focus method returns <code>true</code> if the control successfully received input focus. The control can have the input focus while not displaying any visual cues of having the focus. This behavior is primarily observed by the nonselectable controls listed below, or any controls derived from them.  </p>\n<p> A control can be selected and receive input focus if all the following are true: the <code>Selectable</code> value of <a class=\"xref\" href=\"system.windows.forms.controlstyles\" data-linktype=\"relative-path\">ControlStyles</a> is set to <code>true</code>, it is contained in another control, and all its parent controls are both visible and enabled.  </p>\n<p> The Windows Forms controls in the following list are not selectable. Controls derived from these controls are also not selectable.  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.windows.forms.panel\" data-linktype=\"relative-path\">Panel</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.groupbox\" data-linktype=\"relative-path\">GroupBox</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.picturebox\" data-linktype=\"relative-path\">PictureBox</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.progressbar\" data-linktype=\"relative-path\">ProgressBar</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.splitter\" data-linktype=\"relative-path\">Splitter</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.label\" data-linktype=\"relative-path\">Label</a>  \n</li>\n<li><p><a class=\"xref\" href=\"system.windows.forms.linklabel\" data-linktype=\"relative-path\">LinkLabel</a> (when there is no link present in the control)  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> Focus is a low-level method intended primarily for custom control authors. Instead, application programmers should use the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Select_\" data-linktype=\"relative-path\">Select</a> method or the <a class=\"xref\" href=\"system.windows.forms.containercontrol#System_Windows_Forms_ContainerControl_ActiveControl_\" data-linktype=\"relative-path\">ActiveControl</a> property for child controls, or the <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_Activate_\" data-linktype=\"relative-path\">Activate</a> method for forms.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets focus to the specified <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a>, if it can receive focus.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.ControlMembers6#1\">   public:\n      void ControlSetFocus( Control^ control )\n      {\n         \n         // Set focus to the control, if it can receive focus.\n         if ( control-&gt;CanFocus )\n         {\n            control-&gt;Focus();\n         }\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.ControlMembers6#1\">public void ControlSetFocus(Control control)\n{\n   // Set focus to the control, if it can receive focus.\n   if(control.CanFocus)\n   {\n      control.Focus();\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.ControlMembers6#1\">Public Sub ControlSetFocus(control As Control)\n   &#39; Set focus to the control, if it can receive focus.\n   If control.CanFocus Then\n      control.Focus()\n   End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_FromChildHandle_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_FromChildHandle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FromChildHandle(IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the control that contains the specified handle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Forms.Control FromChildHandle (IntPtr handle);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>handle</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The window handle (<code>HWND</code>) to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> that represents the control associated with the specified handle; returns <code>null</code> if no control with the specified handle is found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method searches up the window handle parent chain until it finds a handle that is associated with a control. This method is more reliable than the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_FromHandle_\" data-linktype=\"relative-path\">FromHandle</a> method, because it correctly returns controls that own more than one handle.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_FromHandle_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_FromHandle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FromHandle(IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the control that is currently associated with the specified handle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Forms.Control FromHandle (IntPtr handle);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>handle</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The window handle (<code>HWND</code>) to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> that represents the control associated with the specified handle; returns <code>null</code> if no control with the specified handle is found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_FromChildHandle_\" data-linktype=\"relative-path\">FromChildHandle</a> method if you need to return controls that own more than one handle.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_GetAccessibilityObjectById_System_Int32_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_GetAccessibilityObjectById_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAccessibilityObjectById(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the specified <a class=\"xref\" href=\"system.windows.forms.accessibleobject\" data-linktype=\"relative-path\">AccessibleObject</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual System.Windows.Forms.AccessibleObject GetAccessibilityObjectById (int objectId);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>objectId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <code>Int32</code> that identifies the <a class=\"xref\" href=\"system.windows.forms.accessibleobject\" data-linktype=\"relative-path\">AccessibleObject</a> to retrieve.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.accessibleobject\" data-linktype=\"relative-path\">AccessibleObject</a></div>\r\n                  </div>\r\n                  <p>The specified <a class=\"xref\" href=\"system.windows.forms.accessibleobject\" data-linktype=\"relative-path\">AccessibleObject</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_GetAutoSizeMode\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_GetAutoSizeMode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAutoSizeMode()</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves a value indicating how a control will behave when its <span class=\"xref\">stem.Windows.Forms.Control.AutoSize*</span> property is enabled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected System.Windows.Forms.AutoSizeMode GetAutoSizeMode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.autosizemode\" data-linktype=\"relative-path\">AutoSizeMode</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.windows.forms.autosizemode\" data-linktype=\"relative-path\">AutoSizeMode</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_GetChildAtPoint_System_Drawing_Point_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_GetChildAtPoint_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetChildAtPoint(Point)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the child control that is located at the specified coordinates.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.Control GetChildAtPoint (System.Drawing.Point pt);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pt</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.point\" data-linktype=\"relative-path\">Point</a> that contains the coordinates where you want to look for a control. Coordinates are expressed relative to the upper-left corner of the control&#39;s client area.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> that represents the control that is located at the specified point.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If there is no child control at the specified point, the GetChildAtPoint method returns <code>null</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_GetChildAtPoint_System_Drawing_Point_System_Windows_Forms_GetChildAtPointSkip_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_GetChildAtPoint_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetChildAtPoint(Point,GetChildAtPointSkip)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the child control that is located at the specified coordinates, specifying whether to ignore child controls of a certain type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.Control GetChildAtPoint (System.Drawing.Point pt, System.Windows.Forms.GetChildAtPointSkip skipValue);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pt</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.point\" data-linktype=\"relative-path\">Point</a> that contains the coordinates where you want to look for a control. Coordinates are expressed relative to the upper-left corner of the control&#39;s client area.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>skipValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.getchildatpointskip\" data-linktype=\"relative-path\">GetChildAtPointSkip</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the values of <a class=\"xref\" href=\"system.windows.forms.getchildatpointskip\" data-linktype=\"relative-path\">GetChildAtPointSkip</a>, determining whether to ignore child controls of a certain type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a></div>\r\n                  </div>\r\n                  <p>The child <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> at the specified coordinates.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_GetContainerControl\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_GetContainerControl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetContainerControl()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the next <a class=\"xref\" href=\"system.windows.forms.containercontrol\" data-linktype=\"relative-path\">ContainerControl</a> up the control&#39;s chain of parent controls.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.IContainerControl GetContainerControl ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.icontainercontrol\" data-linktype=\"relative-path\">IContainerControl</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.windows.forms.icontainercontrol\" data-linktype=\"relative-path\">IContainerControl</a>, that represents the parent of the <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_GetNextControl_System_Windows_Forms_Control_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_GetNextControl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetNextControl(Control,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the next control forward or back in the tab order of child controls.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.Control GetNextControl (System.Windows.Forms.Control ctl, bool forward);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ctl</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> to start the search with.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>forward</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to search forward in the tab order; <code>false</code> to search backward.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a></div>\r\n                  </div>\r\n                  <p>The next <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> in the tab order.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetNextControl method is dependent on tab order. To iterate through all controls of a form, including nested controls, use the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Controls_\" data-linktype=\"relative-path\">Controls</a> property. To get or set the active control of a container control, use the <a class=\"xref\" href=\"system.windows.forms.containercontrol#System_Windows_Forms_ContainerControl_ActiveControl_\" data-linktype=\"relative-path\">ActiveControl</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_GetPreferredSize_System_Drawing_Size_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_GetPreferredSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetPreferredSize(Size)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the size of a rectangular area into which a control can be fitted.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Drawing.Size GetPreferredSize (System.Drawing.Size proposedSize);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>proposedSize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The custom-sized area for a control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>An ordered pair of type <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> representing the width and height of a rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The behavior of GetPreferredSize differs by control. The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_LayoutEngine_\" data-linktype=\"relative-path\">LayoutEngine</a> might be unable to assign the returned size to the control. You can return a size larger than the constraints indicated in the <code>proposedSize</code> parameter, but <code>proposedSize</code> should decrease as the constraint decreases. For example, <code>GetPreferredSize(new Size(100, 0))</code> should not be wider than <code>GetPreferredSize(new Size(200, 0))</code>. The exception is a <code>proposedSize</code> of 0 or <code>Size.Empty</code>, which are defined as unconstrained.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_GetScaledBounds_System_Drawing_Rectangle_System_Drawing_SizeF_System_Windows_Forms_BoundsSpecified_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_GetScaledBounds_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetScaledBounds(Rectangle,SizeF,BoundsSpecified)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the bounds within which the control is scaled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual System.Drawing.Rectangle GetScaledBounds (System.Drawing.Rectangle bounds, System.Drawing.SizeF factor, System.Windows.Forms.BoundsSpecified specified);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bounds</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a> that specifies the area for which to retrieve the display bounds.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>factor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.sizef\" data-linktype=\"relative-path\">SizeF</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The height and width of the control&#39;s bounds.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>specified</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.boundsspecified\" data-linktype=\"relative-path\">BoundsSpecified</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the values of <a class=\"xref\" href=\"system.windows.forms.boundsspecified\" data-linktype=\"relative-path\">BoundsSpecified</a> that specifies the bounds of the control to use when defining its size and position.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a> representing the bounds within which the control is scaled.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is a helper method that is called by <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ScaleControl_\" data-linktype=\"relative-path\">ScaleControl</a> to retrieve the bounds within which the control is scaled. You can override this method to reuse the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ScaleControl_\" data-linktype=\"relative-path\">ScaleControl</a> scaling logic, but you must supply your own bounds. The default implementation returns scaled bounds that take into account the <code>specified</code> bounds, whether the control is top level, whether the control is fixed width or auto size, and any adornments the control might have.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_GetStyle_System_Windows_Forms_ControlStyles_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_GetStyle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetStyle(ControlStyles)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the value of the specified control style bit for the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected bool GetStyle (System.Windows.Forms.ControlStyles flag);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>flag</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.controlstyles\" data-linktype=\"relative-path\">ControlStyles</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.controlstyles\" data-linktype=\"relative-path\">ControlStyles</a> bit to return the value from.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified control style bit is set to <code>true</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Control style bit flags are used to categorize supported behavior. A control can enable a style by calling the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SetStyle_\" data-linktype=\"relative-path\">SetStyle</a> method and passing in the appropriate <a class=\"xref\" href=\"system.windows.forms.controlstyles\" data-linktype=\"relative-path\">ControlStyles</a> bit and the Boolean value to set the bit to. To determine the value assigned to a specified <a class=\"xref\" href=\"system.windows.forms.controlstyles\" data-linktype=\"relative-path\">ControlStyles</a> bit, use the GetStyle method and pass in the <a class=\"xref\" href=\"system.windows.forms.controlstyles\" data-linktype=\"relative-path\">ControlStyles</a> member to evaluate.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example returns the value of the double-buffering related style bits for a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>. This example returns <code>true</code> only if all the style bits are set to <code>true</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.ControlMembers6#4\">   public:\n      bool DoubleBufferingEnabled()\n      {\n         \n         // Get the value of the double-buffering style bits.\n         return this-&gt;GetStyle( static_cast&lt;ControlStyles&gt;(ControlStyles::DoubleBuffer | ControlStyles::UserPaint | ControlStyles::AllPaintingInWmPaint) );\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.ControlMembers6#4\">public bool DoubleBufferingEnabled()\n{\n   // Get the value of the double-buffering style bits.\n   return this.GetStyle(ControlStyles.DoubleBuffer | \n      ControlStyles.UserPaint | \n      ControlStyles.AllPaintingInWmPaint);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.ControlMembers6#4\">Public Function DoubleBufferingEnabled() As Boolean\n   &#39; Get the value of the double-buffering style bits.\n   Return Me.GetStyle((ControlStyles.DoubleBuffer _\n     Or ControlStyles.UserPaint _\n     Or ControlStyles.AllPaintingInWmPaint))\nEnd Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_GetTopLevel\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_GetTopLevel_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTopLevel()</div>        \r\n          </div>\r\n    \r\n            <p>Determines if the control is a top-level control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected bool GetTopLevel ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the control is a top-level control; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Hide\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Hide_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Hide()</div>        \r\n          </div>\r\n    \r\n            <p>Conceals the control from the user.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Hide ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Hiding the control is equivalent to setting the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Visible_\" data-linktype=\"relative-path\">Visible</a> property to <code>false</code>. After the Hide method is called, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Visible_\" data-linktype=\"relative-path\">Visible</a> property returns a value of <code>false</code> until the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Show_\" data-linktype=\"relative-path\">Show</a> method is called.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example hides a button if the CTRL key is pressed when the button is clicked. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> named <code>button1</code> on a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control Members4#2\">private void button1_Click(object sender, System.EventArgs e)\n{\n   /* If the CTRL key is pressed when the \n      * control is clicked, hide the control. */\n   if(Control.ModifierKeys == Keys.Control)\n   {\n      ((Control)sender).Hide();\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control Members4#2\">Private Sub button1_Click(sender As Object, _\n  e As EventArgs) Handles button1.Click\n   &#39; If the CTRL key is pressed when the \n   &#39; control is clicked, hide the control. \n   If Control.ModifierKeys = Keys.Control Then\n      CType(sender, Control).Hide()\n   End If\nEnd Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control Members4#2\">   private:\n      void button1_Click( Object^ sender, System::EventArgs^ /*e*/ )\n      {\n         /* If the CTRL key is pressed when the\n            * control is clicked, hide the control. */\n         if ( Control::ModifierKeys == Keys::Control )\n         {\n            (dynamic_cast&lt;Control^&gt;(sender))-&gt;Hide();\n         }\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_InitLayout\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_InitLayout_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InitLayout()</div>        \r\n          </div>\r\n    \r\n            <p>Called after the control has been added to another container.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void InitLayout ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The InitLayout method is called immediately after adding a control to a container. The InitLayout method enables a control to initialize its layout state based on its container. For example, you would typically apply anchoring and docking to the control in the InitLayout method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Invalidate\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Invalidate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Invalidate()</div>        \r\n          </div>\r\n    \r\n            <p>Invalidates the entire surface of the control and causes the control to be redrawn.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Invalidate ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invalidate_\" data-linktype=\"relative-path\">Invalidate</a> method does not force a synchronous paint; to force a synchronous paint, call the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Update_\" data-linktype=\"relative-path\">Update</a> method after calling the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invalidate_\" data-linktype=\"relative-path\">Invalidate</a> method. When this method is called with no parameters, the entire client area is added to the update region.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example enables the user to drag an image or image file onto the form, and have it be displayed at the point on it is dropped. The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnPaint_\" data-linktype=\"relative-path\">OnPaint</a> method is overridden to repaint the image each time the form is painted; otherwise the image would only persist until the next repainting. The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragEnter\" data-linktype=\"relative-path\">DragEnter</a> event-handling method determines the type of data being dragged into the form and provides the appropriate feedback. The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragDrop\" data-linktype=\"relative-path\">DragDrop</a> event-handling method displays the image on the form, if an <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> can be created from the data. Because the <a class=\"xref\" href=\"system.windows.forms.drageventargs#System_Windows_Forms_DragEventArgs_X_\" data-linktype=\"relative-path\">X</a> and <a class=\"xref\" href=\"system.windows.forms.drageventargs#System_Windows_Forms_DragEventArgs_Y_\" data-linktype=\"relative-path\">Y</a> values are screen coordinates, the example uses the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_PointToClient_\" data-linktype=\"relative-path\">PointToClient</a> method to convert them to client coordinates.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control.DragOperations#1\">private Image picture;\nprivate Point pictureLocation;\n\npublic Form1()\n{\n   // Enable drag-and-drop operations and \n   // add handlers for DragEnter and DragDrop.\n   this.AllowDrop = true;\n   this.DragDrop += new DragEventHandler(this.Form1_DragDrop);\n   this.DragEnter += new DragEventHandler(this.Form1_DragEnter);\n}\n\nprotected override void OnPaint(PaintEventArgs e)\n{\n   // If there is an image and it has a location, \n   // paint it when the Form is repainted.\n   base.OnPaint(e);\n   if(this.picture != null &amp;&amp; this.pictureLocation != Point.Empty)\n   {\n      e.Graphics.DrawImage(this.picture, this.pictureLocation);\n   }\n}\n\nprivate void Form1_DragDrop(object sender, DragEventArgs e)\n{\n   // Handle FileDrop data.\n   if(e.Data.GetDataPresent(DataFormats.FileDrop) )\n   {\n      // Assign the file names to a string array, in \n      // case the user has selected multiple files.\n      string[] files = (string[])e.Data.GetData(DataFormats.FileDrop);\n      try\n      {\n         // Assign the first image to the picture variable.\n         this.picture = Image.FromFile(files[0]);\n         // Set the picture location equal to the drop point.\n         this.pictureLocation = this.PointToClient(new Point(e.X, e.Y) );\n      }\n      catch(Exception ex)\n      {\n         MessageBox.Show(ex.Message);\n         return;\n      }\n   }\n\n   // Handle Bitmap data.\n   if(e.Data.GetDataPresent(DataFormats.Bitmap) )\n   {\n      try\n      {\n         // Create an Image and assign it to the picture variable.\n         this.picture = (Image)e.Data.GetData(DataFormats.Bitmap);\n         // Set the picture location equal to the drop point.\n         this.pictureLocation = this.PointToClient(new Point(e.X, e.Y) );\n      }\n      catch(Exception ex)\n      {\n         MessageBox.Show(ex.Message);\n         return;\n      }\n   }\n   // Force the form to be redrawn with the image.\n   this.Invalidate();\n}\n\nprivate void Form1_DragEnter(object sender, DragEventArgs e)\n{\n   // If the data is a file or a bitmap, display the copy cursor.\n   if (e.Data.GetDataPresent(DataFormats.Bitmap) || \n      e.Data.GetDataPresent(DataFormats.FileDrop) ) \n   {\n      e.Effect = DragDropEffects.Copy;\n   }\n   else\n   {\n      e.Effect = DragDropEffects.None;\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control.DragOperations#1\">   private:\n      Image^ picture;\n      Point pictureLocation;\n\n   public:\n      Form1()\n      {\n         \n         // Enable drag-and-drop operations and\n         // add handlers for DragEnter and DragDrop.\n         this-&gt;AllowDrop = true;\n         this-&gt;DragDrop += gcnew DragEventHandler( this, &amp;Form1::Form1_DragDrop );\n         this-&gt;DragEnter += gcnew DragEventHandler( this, &amp;Form1::Form1_DragEnter );\n      }\n\n   protected:\n      virtual void OnPaint( PaintEventArgs^ e ) override\n      {\n         \n         // If there is an image and it has a location,\n         // paint it when the Form is repainted.\n         Form::OnPaint( e );\n         if ( this-&gt;picture != nullptr &amp;&amp; this-&gt;pictureLocation != Point::Empty )\n         {\n            e-&gt;Graphics-&gt;DrawImage( this-&gt;picture, this-&gt;pictureLocation );\n         }\n      }\n\n   private:\n      void Form1_DragDrop( Object^ /*sender*/, DragEventArgs^ e )\n      {\n         \n         // Handle FileDrop data.\n         if ( e-&gt;Data-&gt;GetDataPresent( DataFormats::FileDrop ) )\n         {\n            // Assign the file names to a String* array, in\n            // case the user has selected multiple files.\n            array&lt;String^&gt;^files = (array&lt;String^&gt;^)e-&gt;Data-&gt;GetData( DataFormats::FileDrop );\n            try\n            {\n               // Assign the first image to the picture variable.\n               this-&gt;picture = Image::FromFile( files[ 0 ] );\n               \n               // Set the picture location equal to the drop point.\n               this-&gt;pictureLocation = this-&gt;PointToClient( Point(e-&gt;X,e-&gt;Y) );\n            }\n            catch ( Exception^ ex ) \n            {\n               MessageBox::Show( ex-&gt;Message );\n               return;\n            }\n\n         }\n         \n         // Handle Bitmap data.\n         if ( e-&gt;Data-&gt;GetDataPresent( DataFormats::Bitmap ) )\n         {\n            try\n            {\n               // Create an Image and assign it to the picture variable.\n               this-&gt;picture = dynamic_cast&lt;Image^&gt;(e-&gt;Data-&gt;GetData( DataFormats::Bitmap ));\n\n               // Set the picture location equal to the drop point.\n               this-&gt;pictureLocation = this-&gt;PointToClient( Point(e-&gt;X,e-&gt;Y) );\n            }\n            catch ( Exception^ ex ) \n            {\n               MessageBox::Show( ex-&gt;Message );\n               return;\n            }\n         }\n         \n         // Force the form to be redrawn with the image.\n         this-&gt;Invalidate();\n      }\n\n      void Form1_DragEnter( Object^ /*sender*/, DragEventArgs^ e )\n      {\n         // If the data is a file or a bitmap, display the copy cursor.\n         if ( e-&gt;Data-&gt;GetDataPresent( DataFormats::Bitmap ) || e-&gt;Data-&gt;GetDataPresent( DataFormats::FileDrop ) )\n         {\n            e-&gt;Effect = DragDropEffects::Copy;\n         }\n         else\n         {\n            e-&gt;Effect = DragDropEffects::None;\n         }\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control.DragOperations#1\">Private picture As Image\nPrivate pictureLocation As Point\n\nPublic Sub New()\n   &#39; Enable drag-and-drop operations.\n   Me.AllowDrop = True\nEnd Sub\n\nProtected Overrides Sub OnPaint(ByVal e As PaintEventArgs)\n   MyBase.OnPaint(e)\n\n   &#39; If there is an image and it has a location, \n   &#39; paint it when the Form is repainted.\n   If (Me.picture IsNot Nothing) And _\n     Not (Me.pictureLocation.Equals(Point.Empty)) Then\n      e.Graphics.DrawImage(Me.picture, Me.pictureLocation)\n   End If\nEnd Sub\n\nPrivate Sub Form1_DragDrop(ByVal sender As Object, _\n  ByVal e As DragEventArgs) Handles MyBase.DragDrop\n   &#39; Handle FileDrop data.\n   If e.Data.GetDataPresent(DataFormats.FileDrop) Then\n      &#39; Assign the file names to a string array, in \n      &#39; case the user has selected multiple files.\n      Dim files As String() = CType(e.Data.GetData(DataFormats.FileDrop), String())\n      Try\n         &#39; Assign the first image to the &#39;picture&#39; variable.\n         Me.picture = Image.FromFile(files(0))\n         &#39; Set the picture location equal to the drop point.\n         Me.pictureLocation = Me.PointToClient(New Point(e.X, e.Y))\n      Catch ex As Exception\n         MessageBox.Show(ex.Message)\n         Return\n      End Try\n   End If\n\n   &#39; Handle Bitmap data.\n   If e.Data.GetDataPresent(DataFormats.Bitmap) Then\n      Try\n         &#39; Create an Image and assign it to the picture variable.\n         Me.picture = CType(e.Data.GetData(DataFormats.Bitmap), Image)\n         &#39; Set the picture location equal to the drop point.\n         Me.pictureLocation = Me.PointToClient(New Point(e.X, e.Y))\n      Catch ex As Exception\n         MessageBox.Show(ex.Message)\n         Return\n      End Try\n   End If\n\n   &#39; Force the form to be redrawn with the image.\n   Me.Invalidate()\nEnd Sub\n\nPrivate Sub Form1_DragEnter(ByVal sender As Object, _\n  ByVal e As DragEventArgs) Handles MyBase.DragEnter\n   &#39; If the data is a file or a bitmap, display the copy cursor.\n   If e.Data.GetDataPresent(DataFormats.Bitmap) _\n      Or e.Data.GetDataPresent(DataFormats.FileDrop) Then\n      e.Effect = DragDropEffects.Copy\n   Else\n      e.Effect = DragDropEffects.None\n   End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Invalidate_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Invalidate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Invalidate(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Invalidates a specific region of the control and causes a paint message to be sent to the control. Optionally, invalidates the child controls assigned to the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Invalidate (bool invalidateChildren);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>invalidateChildren</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to invalidate the control&#39;s child controls; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invalidate_\" data-linktype=\"relative-path\">Invalidate</a> method does not force a synchronous paint; to force a synchronous paint, call the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Update_\" data-linktype=\"relative-path\">Update</a> method after calling the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invalidate_\" data-linktype=\"relative-path\">Invalidate</a> method. When this method is called with no parameters, the entire client area is added to the update region.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Invalidate_System_Drawing_Rectangle_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Invalidate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Invalidate(Rectangle)</div>        \r\n          </div>\r\n    \r\n            <p>Invalidates the specified region of the control (adds it to the control&#39;s update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Invalidate (System.Drawing.Rectangle rc);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rc</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a> that represents the region to invalidate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invalidate_\" data-linktype=\"relative-path\">Invalidate</a> method does not force a synchronous paint; to force a synchronous paint, call the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Update_\" data-linktype=\"relative-path\">Update</a> method after calling the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invalidate_\" data-linktype=\"relative-path\">Invalidate</a> method. When this method is called with no parameters, the entire client area is added to the update region.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Invalidate_System_Drawing_Region_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Invalidate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Invalidate(Region)</div>        \r\n          </div>\r\n    \r\n            <p>Invalidates the specified region of the control (adds it to the control&#39;s update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Invalidate (System.Drawing.Region region);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>region</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.region\" data-linktype=\"relative-path\">Region</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.drawing.region\" data-linktype=\"relative-path\">Region</a> to invalidate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling the Invalidate method does not force a synchronous paint; to force a synchronous paint, call the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Update_\" data-linktype=\"relative-path\">Update</a> method after calling the Invalidate method. When this method is called with no parameters, the entire client area is added to the update region.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Invalidate_System_Drawing_Rectangle_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Invalidate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Invalidate(Rectangle,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Invalidates the specified region of the control (adds it to the control&#39;s update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control. Optionally, invalidates the child controls assigned to the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Invalidate (System.Drawing.Rectangle rc, bool invalidateChildren);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rc</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a> that represents the region to invalidate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>invalidateChildren</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to invalidate the control&#39;s child controls; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invalidate_\" data-linktype=\"relative-path\">Invalidate</a> method does not force a synchronous paint; to force a synchronous paint, call the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Update_\" data-linktype=\"relative-path\">Update</a> method after calling the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invalidate_\" data-linktype=\"relative-path\">Invalidate</a> method. When this method is called with no parameters, the entire client area is added to the update region.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Invalidate_System_Drawing_Region_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Invalidate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Invalidate(Region,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Invalidates the specified region of the control (adds it to the control&#39;s update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control. Optionally, invalidates the child controls assigned to the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Invalidate (System.Drawing.Region region, bool invalidateChildren);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>region</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.region\" data-linktype=\"relative-path\">Region</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.drawing.region\" data-linktype=\"relative-path\">Region</a> to invalidate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>invalidateChildren</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to invalidate the control&#39;s child controls; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invalidate_\" data-linktype=\"relative-path\">Invalidate</a> method does not force a synchronous paint; to force a synchronous paint, call the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Update_\" data-linktype=\"relative-path\">Update</a> method after calling the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invalidate_\" data-linktype=\"relative-path\">Invalidate</a> method. When this method is called with no parameters, the entire client area is added to the update region.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Invoke_System_Delegate_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Invoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Invoke(Delegate)</div>        \r\n          </div>\r\n    \r\n            <p>Executes the specified delegate on the thread that owns the control&#39;s underlying window handle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object Invoke (Delegate method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A delegate that contains a method to be called in the control&#39;s thread context.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The return value from the delegate being invoked, or <code>null</code> if the delegate has no return value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Delegates are similar to function pointers in C or C++ languages. Delegates encapsulate a reference to a method inside a delegate object. The delegate object can then be passed to code that calls the referenced method, and the method to be invoked can be unknown at compile time. Unlike function pointers in C or C++, delegates are object-oriented, type-safe, and more secure.  </p>\n<p> The Invoke method searches up the control&#39;s parent chain until it finds a control or form that has a window handle if the current control&#39;s underlying window handle does not exist yet. If no appropriate handle can be found, the Invoke method will throw an exception. Exceptions that are raised during the call will be propagated back to the caller.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In addition to the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_InvokeRequired_\" data-linktype=\"relative-path\">InvokeRequired</a> property, there are four methods on a control that are thread safe: Invoke, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BeginInvoke_\" data-linktype=\"relative-path\">BeginInvoke</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_EndInvoke_\" data-linktype=\"relative-path\">EndInvoke</a>, and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CreateGraphics_\" data-linktype=\"relative-path\">CreateGraphics</a> if the handle for the control has already been created. Calling <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CreateGraphics_\" data-linktype=\"relative-path\">CreateGraphics</a> before the control&#39;s handle has been created on a background thread can cause illegal cross thread calls. For all other method calls, you should use one of the invoke methods to marshal the call to the control&#39;s thread.  </p>\n</div>\n<p> The delegate can be an instance of <a class=\"xref\" href=\"system.eventhandler\" data-linktype=\"relative-path\">EventHandler</a>, in which case the sender parameter will contain this control, and the event parameter will contain <a class=\"xref\" href=\"system.eventargs#System_EventArgs_Empty\" data-linktype=\"relative-path\">System.EventArgs.Empty</a>. The delegate can also be an instance of <a class=\"xref\" href=\"system.windows.forms.methodinvoker\" data-linktype=\"relative-path\">MethodInvoker</a>, or any other delegate that takes a void parameter list. A call to an <a class=\"xref\" href=\"system.eventhandler\" data-linktype=\"relative-path\">EventHandler</a> or <a class=\"xref\" href=\"system.windows.forms.methodinvoker\" data-linktype=\"relative-path\">MethodInvoker</a> delegate will be faster than a call to another type of delegate.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An exception might be thrown if the thread that should process the message is no longer active.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows controls that contain a delegate. The delegate encapsulates a method that adds items to the list box, and this method is executed on the thread that owns the underlying handle of the form. When the user clicks on the button, <code>Invoke</code> runs the delegate.  </p>\n<pre><code class=\"lang-cpp\" name=\"Control_Invoke2#1\">/*\nThe following example demonstrates the &#39;Invoke(Delegate*)&#39; method of &#39;Control class.\nA &#39;ListBox&#39; and a &#39;Button&#39; control are added to a form, containing a delegate\nwhich encapsulates a method that adds items to the listbox.This function is executed\non the thread that owns the underlying handle of the form. When user clicks on button\nthe above delegate is executed using &#39;Invoke&#39; method.\n*/\n\n#using &lt;System.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.Windows.Forms.dll&gt;\n\nusing namespace System;\nusing namespace System::Drawing;\nusing namespace System::Windows::Forms;\nusing namespace System::Threading;\n\npublic ref class MyFormControl: public Form\n{\npublic:\n   delegate void AddListItem();\n   AddListItem^ myDelegate;\n\nprivate:\n   Button^ myButton;\n   Thread^ myThread;\n   ListBox^ myListBox;\n\npublic:\n   MyFormControl();\n   void AddListItemMethod()\n   {\n      String^ myItem;\n      for ( int i = 1; i &lt; 6; i++ )\n      {\n         myItem = &quot;MyListItem {0}&quot;,i;\n         myListBox-&gt;Items-&gt;Add( myItem );\n         myListBox-&gt;Update();\n         Thread::Sleep( 300 );\n      }\n   }\n\nprivate:\n   void Button_Click( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      myThread = gcnew Thread( gcnew ThreadStart( this, &amp;MyFormControl::ThreadFunction ) );\n      myThread-&gt;Start();\n   }\n\n   void ThreadFunction();\n};\n\n\n// The following code assumes a &#39;ListBox&#39; and a &#39;Button&#39; control are added to a form,\n// containing a delegate which encapsulates a method that adds items to the listbox.\npublic ref class MyThreadClass\n{\nprivate:\n   MyFormControl^ myFormControl1;\n\npublic:\n   MyThreadClass( MyFormControl^ myForm )\n   {\n      myFormControl1 = myForm;\n   }\n\n   void Run()\n   {\n      // Execute the specified delegate on the thread that owns\n      // &#39;myFormControl1&#39; control&#39;s underlying window handle.\n      myFormControl1-&gt;Invoke( myFormControl1-&gt;myDelegate );\n   }\n};\n\n\nMyFormControl::MyFormControl()\n{\n   myButton = gcnew Button;\n   myListBox = gcnew ListBox;\n   myButton-&gt;Location = Point( 72, 160 );\n   myButton-&gt;Size = System::Drawing::Size( 152, 32 );\n   myButton-&gt;TabIndex = 1;\n   myButton-&gt;Text = &quot;Add items in list box&quot;;\n   myButton-&gt;Click += gcnew EventHandler( this, &amp;MyFormControl::Button_Click );\n   myListBox-&gt;Location = Point( 48, 32 );\n   myListBox-&gt;Name = &quot;myListBox&quot;;\n   myListBox-&gt;Size = System::Drawing::Size( 200, 95 );\n   myListBox-&gt;TabIndex = 2;\n   ClientSize = System::Drawing::Size( 292, 273 );\n   array&lt;Control^&gt;^ temp0 = {myListBox,myButton};\n   Controls-&gt;AddRange( temp0 );\n   Text = &quot; &#39;Control_Invoke&#39; example&quot;;\n   myDelegate = gcnew AddListItem( this, &amp;MyFormControl::AddListItemMethod );\n}\n\nvoid MyFormControl::ThreadFunction()\n{\n   MyThreadClass^ myThreadClassObject = gcnew MyThreadClass( this );\n   myThreadClassObject-&gt;Run();\n}\n\nint main()\n{\n   MyFormControl^ myForm = gcnew MyFormControl;\n   myForm-&gt;ShowDialog();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Control_Invoke2#1\">/*\nThe following example demonstrates the &#39;Invoke(Delegate)&#39; method of &#39;Control class.\nA &#39;ListBox&#39; and a &#39;Button&#39; control are added to a form, containing a delegate\nwhich encapsulates a method that adds items to the listbox.This function is executed\non the thread that owns the underlying handle of the form. When user clicks on button\nthe above delegate is executed using &#39;Invoke&#39; method.\n\n\n*/\n\nusing System;\nusing System.Drawing;\nusing System.Windows.Forms;\nusing System.Threading;\n\n   public class MyFormControl : Form\n   {\n      public delegate void AddListItem();\n      public AddListItem myDelegate;\n      private Button myButton;\n      private Thread myThread;\n      private ListBox myListBox;\n      public MyFormControl()\n      {\n         myButton = new Button();\n         myListBox = new ListBox();\n         myButton.Location = new Point(72, 160);\n         myButton.Size = new Size(152, 32);\n         myButton.TabIndex = 1;\n         myButton.Text = &quot;Add items in list box&quot;;\n         myButton.Click += new EventHandler(Button_Click);\n         myListBox.Location = new Point(48, 32);\n         myListBox.Name = &quot;myListBox&quot;;\n         myListBox.Size = new Size(200, 95);\n         myListBox.TabIndex = 2;\n         ClientSize = new Size(292, 273);\n         Controls.AddRange(new Control[] {myListBox,myButton});\n         Text = &quot; &#39;Control_Invoke&#39; example&quot;;\n         myDelegate = new AddListItem(AddListItemMethod);\n      }\n      static void Main()\n      {\n         MyFormControl myForm = new MyFormControl();\n         myForm.ShowDialog();\n      }\n      public void AddListItemMethod()\n      {\n         String myItem;\n         for(int i=1;i&lt;6;i++)\n         {\n            myItem = &quot;MyListItem&quot; + i.ToString();\n            myListBox.Items.Add(myItem);\n            myListBox.Update();\n            Thread.Sleep(300);\n         }\n      }\n      private void Button_Click(object sender, EventArgs e)\n      {\n         myThread = new Thread(new ThreadStart(ThreadFunction));\n         myThread.Start();\n      }\n      private void ThreadFunction()\n      {\n         MyThreadClass myThreadClassObject  = new MyThreadClass(this);\n         myThreadClassObject.Run();\n      }\n   }\n\n// The following code assumes a &#39;ListBox&#39; and a &#39;Button&#39; control are added to a form, \n// containing a delegate which encapsulates a method that adds items to the listbox.\n\n   public class MyThreadClass\n   {\n      MyFormControl myFormControl1;\n      public MyThreadClass(MyFormControl myForm)\n      {\n         myFormControl1 = myForm;\n      }\n\n      public void Run()\n      {\n         // Execute the specified delegate on the thread that owns\n         // &#39;myFormControl1&#39; control&#39;s underlying window handle.\n         myFormControl1.Invoke(myFormControl1.myDelegate);\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Control_Invoke2#1\">&#39; The following example demonstrates the &#39;Invoke(Delegate)&#39; method of &#39;Control class.\n&#39; A &#39;ListBox&#39; and a &#39;Button&#39; control are added to a form, containing a delegate\n&#39; which encapsulates a method that adds items to the listbox.This function is executed\n&#39; on the thread that owns the underlying handle of the form. When user clicks on button\n&#39; the above delegate is executed using &#39;Invoke&#39; method.\n\nImports System\nImports System.Drawing\nImports System.Windows.Forms\nImports System.Threading\n\nPublic Class MyFormControl\n   Inherits Form\n\n   Delegate Sub AddListItem()\n   Public myDelegate As AddListItem\n   Private myButton As Button\n   Private myThread As Thread\n   Private myListBox As ListBox\n\n   Public Sub New()\n      myButton = New Button()\n      myListBox = New ListBox()\n      myButton.Location = New Point(72, 160)\n      myButton.Size = New Size(152, 32)\n      myButton.TabIndex = 1\n      myButton.Text = &quot;Add items in list box&quot;\n      AddHandler myButton.Click, AddressOf Button_Click\n      myListBox.Location = New Point(48, 32)\n      myListBox.Name = &quot;myListBox&quot;\n      myListBox.Size = New Size(200, 95)\n      myListBox.TabIndex = 2\n      ClientSize = New Size(292, 273)\n      Controls.AddRange(New Control() {myListBox, myButton})\n      Text = &quot; &#39;Control_Invoke&#39; example&quot;\n      myDelegate = New AddListItem(AddressOf AddListItemMethod)\n   End Sub &#39;New\n\n   Shared Sub Main()\n      Dim myForm As New MyFormControl()\n      myForm.ShowDialog()\n   End Sub &#39;Main\n\n   Public Sub AddListItemMethod()\n      Dim myItem As String\n      Dim i As Integer\n      For i = 1 To 5\n         myItem = &quot;MyListItem&quot; + i.ToString()\n         myListBox.Items.Add(myItem)\n         myListBox.Update()\n         Thread.Sleep(300)\n      Next i\n   End Sub &#39;AddListItemMethod\n\n   Private Sub Button_Click(sender As Object, e As EventArgs)\n      myThread = New Thread(New ThreadStart(AddressOf ThreadFunction))\n      myThread.Start()\n   End Sub &#39;Button_Click\n\n   Private Sub ThreadFunction()\n      Dim myThreadClassObject As New MyThreadClass(Me)\n      myThreadClassObject.Run()\n   End Sub &#39;ThreadFunction\nEnd Class &#39;MyFormControl\n\n\n&#39; The following code assumes a &#39;ListBox&#39; and a &#39;Button&#39; control are added to a form, \n&#39; containing a delegate which encapsulates a method that adds items to the listbox.\nPublic Class MyThreadClass\n   Private myFormControl1 As MyFormControl\n\n   Public Sub New(myForm As MyFormControl)\n      myFormControl1 = myForm\n   End Sub &#39;New\n\n   Public Sub Run()\n      &#39; Execute the specified delegate on the thread that owns\n      &#39; &#39;myFormControl1&#39; control&#39;s underlying window handle.\n      myFormControl1.Invoke(myFormControl1.myDelegate)\n   End Sub &#39;Run\n\nEnd Class &#39;MyThreadClass\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Invoke_System_Delegate_System_Object___\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Invoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Invoke(Delegate,Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Executes the specified delegate, on the thread that owns the control&#39;s underlying window handle, with the specified list of arguments.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object Invoke (Delegate method, object[] args);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A delegate to a method that takes parameters of the same number and type that are contained in the <code>args</code> parameter.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>args</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of objects to pass as arguments to the specified method. This parameter can be <code>null</code> if the method takes no arguments.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> that contains the return value from the delegate being invoked, or <code>null</code> if the delegate has no return value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Delegates are similar to function pointers in C or C++ languages. Delegates encapsulate a reference to a method inside a delegate object. The delegate object can then be passed to code that calls the referenced method, and the method to be invoked can be unknown at compile time. Unlike function pointers in C or C++, delegates are object-oriented, type-safe, and more secure.  </p>\n<p> If the control&#39;s handle does not exist yet, this method searches up the control&#39;s parent chain until it finds a control or form that does have a window handle. If no appropriate handle can be found, this method throws an exception. Exceptions that are raised during the call will be propagated back to the caller.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In addition to the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_InvokeRequired_\" data-linktype=\"relative-path\">InvokeRequired</a> property, there are four methods on a control that are thread safe: <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invoke_\" data-linktype=\"relative-path\">Invoke</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BeginInvoke_\" data-linktype=\"relative-path\">BeginInvoke</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_EndInvoke_\" data-linktype=\"relative-path\">EndInvoke</a>, and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CreateGraphics_\" data-linktype=\"relative-path\">CreateGraphics</a> if the handle for the control has already been created. Calling <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CreateGraphics_\" data-linktype=\"relative-path\">CreateGraphics</a> before the control&#39;s handle has been created on a background thread can cause illegal cross thread calls. For all other method calls, you should use one of the invoke methods to marshal the call to the control&#39;s thread.  </p>\n</div>\n<p> The delegate can be an instance of <a class=\"xref\" href=\"system.eventhandler\" data-linktype=\"relative-path\">EventHandler</a>, in which case the sender parameter will contain this control, and the event parameter will contain <a class=\"xref\" href=\"system.eventargs#System_EventArgs_Empty\" data-linktype=\"relative-path\">System.EventArgs.Empty</a>. The delegate can also be an instance of <a class=\"xref\" href=\"system.windows.forms.methodinvoker\" data-linktype=\"relative-path\">MethodInvoker</a>, or any other delegate that takes a void parameter list. A call to an <a class=\"xref\" href=\"system.eventhandler\" data-linktype=\"relative-path\">EventHandler</a> or <a class=\"xref\" href=\"system.windows.forms.methodinvoker\" data-linktype=\"relative-path\">MethodInvoker</a> delegate will be faster than a call to another type of delegate.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An exception might be thrown if the thread that should process the message is no longer active.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows controls that contain a delegate. The delegate encapsulates a method that adds items to the list box, and this method is executed on the thread that owns the underlying handle of the form, using the specified arguments. When the user clicks on the button, <code>Invoke</code> runs the delegate.  </p>\n<pre><code class=\"lang-cs\" name=\"Control_Invoke1#1\">using System;\nusing System.Drawing;\nusing System.Windows.Forms;\nusing System.Threading;\n\n   public class MyFormControl : Form\n   {\n      public delegate void AddListItem(String myString);\n      public AddListItem myDelegate;\n      private Button myButton;\n      private Thread myThread;\n      private ListBox myListBox;\n      public MyFormControl()\n      {\n         myButton = new Button();\n         myListBox = new ListBox();\n         myButton.Location = new Point(72, 160);\n         myButton.Size = new Size(152, 32);\n         myButton.TabIndex = 1;\n         myButton.Text = &quot;Add items in list box&quot;;\n         myButton.Click += new EventHandler(Button_Click);\n         myListBox.Location = new Point(48, 32);\n         myListBox.Name = &quot;myListBox&quot;;\n         myListBox.Size = new Size(200, 95);\n         myListBox.TabIndex = 2;\n         ClientSize = new Size(292, 273);\n         Controls.AddRange(new Control[] {myListBox,myButton});\n         Text = &quot; &#39;Control_Invoke&#39; example &quot;;\n         myDelegate = new AddListItem(AddListItemMethod);\n      }\n      static void Main()\n      {\n         MyFormControl myForm = new MyFormControl();\n         myForm.ShowDialog();\n      }\n      public void AddListItemMethod(String myString)\n      {\n            myListBox.Items.Add(myString);\n      }\n      private void Button_Click(object sender, EventArgs e)\n      {\n         myThread = new Thread(new ThreadStart(ThreadFunction));\n         myThread.Start();\n      }\n      private void ThreadFunction()\n      {\n         MyThreadClass myThreadClassObject  = new MyThreadClass(this);\n         myThreadClassObject.Run();\n      }\n   }\n   public class MyThreadClass\n   {\n      MyFormControl myFormControl1;\n      public MyThreadClass(MyFormControl myForm)\n      {\n         myFormControl1 = myForm;\n      }\n      String myString;\n\n      public void Run()\n      {\n\n\n         for (int i = 1; i &lt;= 5; i++)\n         {\n            myString = &quot;Step number &quot; + i.ToString() + &quot; executed&quot;;\n            Thread.Sleep(400);\n            // Execute the specified delegate on the thread that owns\n            // &#39;myFormControl1&#39; control&#39;s underlying window handle with\n            // the specified list of arguments.\n            myFormControl1.Invoke(myFormControl1.myDelegate,\n                                   new Object[] {myString});\n         }\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Control_Invoke1#1\">Imports System\nImports System.Drawing\nImports System.Windows.Forms\nImports System.Threading\n\nPublic Class MyFormControl\n   Inherits Form\n\n   Delegate Sub AddListItem(myString As String)\n   Public myDelegate As AddListItem\n   Private myButton As Button\n   Private myThread As Thread\n   Private myListBox As ListBox\n\n   Public Sub New()\n      myButton = New Button()\n      myListBox = New ListBox()\n      myButton.Location = New Point(72, 160)\n      myButton.Size = New Size(152, 32)\n      myButton.TabIndex = 1\n      myButton.Text = &quot;Add items in list box&quot;\n      AddHandler myButton.Click, AddressOf Button_Click\n      myListBox.Location = New Point(48, 32)\n      myListBox.Name = &quot;myListBox&quot;\n      myListBox.Size = New Size(200, 95)\n      myListBox.TabIndex = 2\n      ClientSize = New Size(292, 273)\n      Controls.AddRange(New Control() {myListBox, myButton})\n      Text = &quot; &#39;Control_Invoke&#39; example &quot;\n      myDelegate = New AddListItem(AddressOf AddListItemMethod)\n   End Sub &#39;New\n\n   Shared Sub Main()\n      Dim myForm As New MyFormControl()\n      myForm.ShowDialog()\n   End Sub &#39;Main\n\n   Public Sub AddListItemMethod(myString As String)\n      myListBox.Items.Add(myString)\n   End Sub &#39;AddListItemMethod\n\n   Private Sub Button_Click(sender As Object, e As EventArgs)\n      myThread = New Thread(New ThreadStart(AddressOf ThreadFunction))\n      myThread.Start()\n   End Sub &#39;Button_Click\n\n   Private Sub ThreadFunction()\n      Dim myThreadClassObject As New MyThreadClass(Me)\n      myThreadClassObject.Run()\n   End Sub &#39;ThreadFunction\nEnd Class &#39;MyFormControl\n\nPublic Class MyThreadClass\n   Private myFormControl1 As MyFormControl\n\n   Public Sub New(myForm As MyFormControl)\n      myFormControl1 = myForm\n   End Sub &#39;New\n   Private myString As String\n\n   Public Sub Run()\n\n      Dim i As Integer\n      For i = 1 To 5\n         myString = &quot;Step number &quot; + i.ToString() + &quot; executed&quot;\n         Thread.Sleep(400)\n         &#39; Execute the specified delegate on the thread that owns\n         &#39; &#39;myFormControl1&#39; control&#39;s underlying window handle with\n         &#39; the specified list of arguments.\n         myFormControl1.Invoke(myFormControl1.myDelegate, New Object() {myString})\n      Next i\n\n   End Sub &#39;Run\nEnd Class &#39;MyThreadClass\n</code></pre><pre><code class=\"lang-cpp\" name=\"Control_Invoke1#1\">using namespace System;\nusing namespace System::Drawing;\nusing namespace System::ComponentModel;\nusing namespace System::Windows::Forms;\nusing namespace System::Threading;\nref class MyFormControl: public Form\n{\npublic:\n   delegate void AddListItem( String^ myString );\n   AddListItem^ myDelegate;\n\nprivate:\n   Button^ myButton;\n   Thread^ myThread;\n   ListBox^ myListBox;\n\npublic:\n   MyFormControl();\n   void AddListItemMethod( String^ myString );\n\nprivate:\n   void Button_Click( Object^ sender, EventArgs^ e );\n   void ThreadFunction();\n};\n\nref class MyThreadClass\n{\nprivate:\n   MyFormControl^ myFormControl1;\n\npublic:\n   MyThreadClass( MyFormControl^ myForm )\n   {\n      myFormControl1 = myForm;\n   }\n\n   String^ myString;\n   void Run()\n   {\n      for ( int i = 1; i &lt;= 5; i++ )\n      {\n         myString = String::Concat( &quot;Step number &quot;, i, &quot; executed&quot; );\n         Thread::Sleep( 400 );\n         \n         // Execute the specified delegate on the thread that owns\n         // &#39;myFormControl1&#39; control&#39;s underlying window handle with\n         // the specified list of arguments.\n         array&lt;Object^&gt;^myStringArray = {myString};\n         myFormControl1-&gt;Invoke( myFormControl1-&gt;myDelegate, myStringArray );\n\n      }\n   }\n\n};\n\nMyFormControl::MyFormControl()\n{\n   myButton = gcnew Button;\n   myListBox = gcnew ListBox;\n   myButton-&gt;Location = Point(72,160);\n   myButton-&gt;Size = System::Drawing::Size( 152, 32 );\n   myButton-&gt;TabIndex = 1;\n   myButton-&gt;Text = &quot;Add items in list box&quot;;\n   myButton-&gt;Click += gcnew EventHandler( this, &amp;MyFormControl::Button_Click );\n   myListBox-&gt;Location = Point(48,32);\n   myListBox-&gt;Name = &quot;myListBox&quot;;\n   myListBox-&gt;Size = System::Drawing::Size( 200, 95 );\n   myListBox-&gt;TabIndex = 2;\n   ClientSize = System::Drawing::Size( 292, 273 );\n   array&lt;Control^&gt;^formControls = {myListBox,myButton};\n   Controls-&gt;AddRange( formControls );\n   Text = &quot; &#39;Control_Invoke&#39; example &quot;;\n   myDelegate = gcnew AddListItem( this, &amp;MyFormControl::AddListItemMethod );\n}\n\nvoid MyFormControl::AddListItemMethod( String^ myString )\n{\n   myListBox-&gt;Items-&gt;Add( myString );\n}\n\nvoid MyFormControl::Button_Click( Object^ /*sender*/, EventArgs^ /*e*/ )\n{\n   myThread = gcnew Thread( gcnew ThreadStart( this, &amp;MyFormControl::ThreadFunction ) );\n   myThread-&gt;Start();\n}\n\nvoid MyFormControl::ThreadFunction()\n{\n   MyThreadClass^ myThreadClassObject = gcnew MyThreadClass( this );\n   myThreadClassObject-&gt;Run();\n}\n\nint main()\n{\n   MyFormControl^ myForm = gcnew MyFormControl;\n   myForm-&gt;ShowDialog();\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_InvokeGotFocus_System_Windows_Forms_Control_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_InvokeGotFocus_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InvokeGotFocus(Control,EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GotFocus\" data-linktype=\"relative-path\">GotFocus</a> event for the specified control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void InvokeGotFocus (System.Windows.Forms.Control toInvoke, EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>toInvoke</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> to assign the event to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_InvokeLostFocus_System_Windows_Forms_Control_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_InvokeLostFocus_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InvokeLostFocus(Control,EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_LostFocus\" data-linktype=\"relative-path\">LostFocus</a> event for the specified control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void InvokeLostFocus (System.Windows.Forms.Control toInvoke, EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>toInvoke</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> to assign the event to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_InvokeOnClick_System_Windows_Forms_Control_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_InvokeOnClick_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InvokeOnClick(Control,EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Click\" data-linktype=\"relative-path\">Click</a> event for the specified control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void InvokeOnClick (System.Windows.Forms.Control toInvoke, EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>toInvoke</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> to assign the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Click\" data-linktype=\"relative-path\">Click</a> event to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_InvokePaint_System_Windows_Forms_Control_System_Windows_Forms_PaintEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_InvokePaint_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InvokePaint(Control,PaintEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Paint\" data-linktype=\"relative-path\">Paint</a> event for the specified control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void InvokePaint (System.Windows.Forms.Control c, System.Windows.Forms.PaintEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> to assign the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Paint\" data-linktype=\"relative-path\">Paint</a> event to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.painteventargs\" data-linktype=\"relative-path\">PaintEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.windows.forms.painteventargs\" data-linktype=\"relative-path\">PaintEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_InvokePaintBackground_System_Windows_Forms_Control_System_Windows_Forms_PaintEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_InvokePaintBackground_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InvokePaintBackground(Control,PaintEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <code>PaintBackground</code> event for the specified control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void InvokePaintBackground (System.Windows.Forms.Control c, System.Windows.Forms.PaintEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> to assign the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Paint\" data-linktype=\"relative-path\">Paint</a> event to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.painteventargs\" data-linktype=\"relative-path\">PaintEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.windows.forms.painteventargs\" data-linktype=\"relative-path\">PaintEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_IsInputChar_System_Char_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_IsInputChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsInputChar(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Determines if a character is an input character that the control recognizes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual bool IsInputChar (char charCode);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>charCode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character to test.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the character should be sent directly to the control and not preprocessed; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Call the IsInputChar method to determine whether the character specified by the <code>charCode</code> parameter is an input character that the control wants. This method is called during window message preprocessing to determine whether the specified input character should be preprocessed or sent directly to the control. If IsInputChar returns <code>true</code>, the specified character is sent directly to the control. If IsInputChar returns <code>false</code>, the specified character is preprocessed and only sent to the control if it is not consumed by the preprocessing phase. The preprocessing of a character includes checking whether the character is a mnemonic of another control.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_IsInputKey_System_Windows_Forms_Keys_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_IsInputKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsInputKey(Keys)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified key is a regular input key or a special key that requires preprocessing.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual bool IsInputKey (System.Windows.Forms.Keys keyData);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>keyData</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.keys\" data-linktype=\"relative-path\">Keys</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.windows.forms.keys\" data-linktype=\"relative-path\">Keys</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified key is a regular input key; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Call the IsInputKey method to determine whether the key specified by the <code>keyData</code> parameter is an input key that the control wants. This method is called during window message preprocessing to determine whether the specified input key should be preprocessed or sent directly to the control. If IsInputKey returns <code>true</code>, the specified key is sent directly to the control. If IsInputKey returns <code>false</code>, the specified key is preprocessed and only sent to the control if it is not consumed by the preprocessing phase. Keys that are preprocessed include the TAB, RETURN, ESC, and the UP ARROW, DOWN ARROW, LEFT ARROW, and RIGHT ARROW keys.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows you how to override the IsInputKey method for a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> control. In this example, the <code>TabTextBox</code> class handles the TAB key. When the <code>TabTextBox</code> has the focus and the user presses the TAB key four spaces are added at the text insertion point, replacing any selected text. By default, the <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> control handles the TAB key by moving the input focus to the next control. In this case, the keypress never reaches the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnKeyDown_\" data-linktype=\"relative-path\">OnKeyDown</a> method override. To prevent this default behavior, the IsInputKey method override returns <code>true</code> when the user presses the TAB key. For all other keypresses, the IsInputKey method override returns the result of calling the base-class version of the method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.Control.IsInputKey#0\">Imports System.Windows.Forms\n\nPublic Class Form1\n    Inherits Form\n\n    Public Sub New()\n\n        Dim panel As New FlowLayoutPanel()\n\n        Dim tabTextBox1 As New TabTextBox()\n        tabTextBox1.Text = &quot;TabTextBox&quot;\n        panel.Controls.Add(tabTextBox1)\n\n        Dim textBox1 As New TextBox()\n        textBox1.Text = &quot;Normal TextBox&quot;\n        panel.Controls.Add(textBox1)\n\n        Me.Controls.Add(panel)\n\n    End Sub\n\nEnd Class\n\nClass TabTextBox\n    Inherits TextBox\n\n    Protected Overrides Function IsInputKey( _\n        ByVal keyData As System.Windows.Forms.Keys) As Boolean\n\n        If keyData = Keys.Tab Then\n            Return True\n        Else\n            Return MyBase.IsInputKey(keyData)\n        End If\n\n    End Function\n\n    Protected Overrides Sub OnKeyDown( _\n        ByVal e As System.Windows.Forms.KeyEventArgs)\n\n        If e.KeyData = Keys.Tab Then\n            Me.SelectedText = &quot;    &quot;\n        Else\n            MyBase.OnKeyDown(e)\n        End If\n\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.Control.IsInputKey#0\">using System.Windows.Forms;\n\npublic class Form1 : Form\n{\n    public Form1()\n    {\n        FlowLayoutPanel panel = new FlowLayoutPanel();\n\n        TabTextBox tabTextBox1 = new TabTextBox();\n        tabTextBox1.Text = &quot;TabTextBox&quot;;\n        panel.Controls.Add(tabTextBox1);\n\n        TextBox textBox1 = new TextBox();\n        textBox1.Text = &quot;Normal TextBox&quot;;\n        panel.Controls.Add(textBox1);\n\n        this.Controls.Add(panel);\n    }\n}\n\nclass TabTextBox : TextBox\n{\n    protected override bool IsInputKey(Keys keyData)\n    {\n        if (keyData == Keys.Tab)\n        {\n            return true;\n        }\n        else\n        {\n            return base.IsInputKey(keyData);\n        }\n    }\n\n    protected override void OnKeyDown(KeyEventArgs e)\n    {\n        if (e.KeyData == Keys.Tab)\n        {\n            this.SelectedText = &quot;    &quot;;                \n        }\n        else\n        {\n            base.OnKeyDown(e);\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_IsKeyLocked_System_Windows_Forms_Keys_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_IsKeyLocked_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsKeyLocked(Keys)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the CAPS LOCK, NUM LOCK, or SCROLL LOCK key is in effect.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsKeyLocked (System.Windows.Forms.Keys keyVal);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>keyVal</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.keys\" data-linktype=\"relative-path\">Keys</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The CAPS LOCK, NUM LOCK, or SCROLL LOCK member of the <a class=\"xref\" href=\"system.windows.forms.keys\" data-linktype=\"relative-path\">Keys</a> enumeration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified key or keys are in effect; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <code>keyVal</code> parameter refers to a key other than the CAPS LOCK, NUM LOCK, or SCROLL LOCK key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the IsKeyLocked property to determine whether the CAPS LOCK, NUM LOCK, or SCROLL LOCK keys are on, whether individually or in combination.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays a message box indicating whether the specified key (the Caps Lock key in this case) is in effect.  </p>\n<pre><code class=\"lang-vb\" name=\"ControlIsKeyLocked#1\">\n&#39; To compile and run this sample from the command line, proceed as follows:\n&#39; vbc controliskeylocked.vb /r:System.Windows.Forms.dll /r:System.dll \n&#39; /r:System.Data.dll /r:System.Drawing.dll\n\nImports System\nImports System.Windows.Forms\nImports Microsoft.VisualBasic\n\nPublic Class CapsLockIndicator\n   \n    Public Shared Sub Main()\n        if Control.IsKeyLocked(Keys.CapsLock) Then\n            MessageBox.Show(&quot;The Caps Lock key is ON.&quot;)\n        Else\n            MessageBox.Show(&quot;The Caps Lock key is OFF.&quot;)\n        End If\n    End Sub &#39;Main\nEnd Class &#39;CapsLockIndicator\n</code></pre><pre><code class=\"lang-cpp\" name=\"ControlIsKeyLocked#1\">#using &lt;System.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.Windows.Forms.dll&gt;\n\nusing namespace System;\nusing namespace System::Windows::Forms;\nint main()\n{\n   if (Control::IsKeyLocked( Keys::CapsLock )) {\n      MessageBox::Show( &quot;The Caps Lock key is ON.&quot; );\n   }\n   else { \n      MessageBox::Show( &quot;The Caps Lock key is OFF.&quot; );\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"ControlIsKeyLocked#1\">using System;\nusing System.Windows.Forms;\n\npublic class CapsLockIndicator\n{\n    public static void Main()\n    {\n        if (Control.IsKeyLocked(Keys.CapsLock)) {\n            MessageBox.Show(&quot;The Caps Lock key is ON.&quot;);\n        }\n        else {\n            MessageBox.Show(&quot;The Caps Lock key is OFF.&quot;);\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_IsMnemonic_System_Char_System_String_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_IsMnemonic_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsMnemonic(Char,String)</div>        \r\n          </div>\r\n    \r\n            <p>Determines if the specified character is the mnemonic character assigned to the control in the specified string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsMnemonic (char charCode, string text);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>charCode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character to test.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>text</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <code>charCode</code> character is the mnemonic character assigned to the control; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The mnemonic character is the character immediately following the first instance of &quot;&amp;&quot; in a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates an extension of the button class that overrides the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ProcessMnemonic_\" data-linktype=\"relative-path\">ProcessMnemonic</a> method to exhibit custom behavior. The example also demonstrates the use of the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CanSelect_\" data-linktype=\"relative-path\">CanSelect</a> and IsMnemonic properties. To run this example paste the following code after a form class, in the same file. Add a button of type <code>MnemonicButton</code> to the form.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.ProcessMnemonic#1\">// This button is a simple extension of the button class that overrides\n// the ProcessMnemonic method.  If the mnemonic is correctly entered,  \n// the message box will appear and the click event will be raised.  \npublic class MyMnemonicButton:Button\n\n\t// This method makes sure the control is selectable and the \n\t// mneumonic is correct before displaying the message box\n\t// and triggering the click event.\n{\n\t[UIPermission(\n        SecurityAction.Demand, Window = UIPermissionWindow.AllWindows)]\n        protected override bool ProcessMnemonic(char inputChar)\n\t{\n\n\t\tif (CanSelect&amp;&amp;IsMnemonic(inputChar, this.Text))\n\t\t{\n\t\t\tMessageBox.Show(&quot;You&#39;ve raised the click event &quot; +\n\t\t\t\t&quot;using the mnemonic.&quot;);\n\t\t\tthis.PerformClick();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.ProcessMnemonic#1\">// This button is a simple extension of the button class that overrides\n// the ProcessMnemonic method.  If the mnemonic is correctly entered,  \n// the message box will appear and the click event will be raised.  \n// This method makes sure the control is selectable and the \n// mnemonic is correct before displaying the message box\n// and triggering the click event.\npublic ref class MyMnemonicButton: public Button\n{\nprotected:\n   bool ProcessMnemonic( char inputChar )\n   {\n      if ( CanSelect &amp;&amp; IsMnemonic( inputChar, this-&gt;Text ) )\n      {\n         MessageBox::Show( &quot;You&#39;ve raised the click event &quot;\n         &quot;using the mnemonic.&quot; );\n         this-&gt;PerformClick();\n         return true;\n      }\n\n      return false;\n   }\n\n};\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.ProcessMnemonic#1\">&#39; This button is a simple extension of the button class that overrides\n&#39; the ProcessMnemonic method.  If the mnemonic is correctly entered,  \n&#39; the message box will appear and the click event will be raised.  \nPublic Class MyMnemonicButton\n    Inherits Button\n\n    &#39; This method makes sure the control is selectable and the \n    &#39; mneumonic is correct before displaying the message box\n    &#39; and triggering the click event.\n    &lt;System.Security.Permissions.UIPermission( _\n    System.Security.Permissions.SecurityAction.Demand, Window:=UIPermissionWindow.AllWindows)&gt; _\n    Protected Overrides Function ProcessMnemonic( _\n        ByVal inputChar As Char) As Boolean\n\n        If (CanSelect And IsMnemonic(inputChar, Me.Text)) Then\n            MessageBox.Show(&quot;You&#39;ve raised the click event &quot; _\n                &amp; &quot;using the mnemonic.&quot;)\n            Me.PerformClick()\n            Return True\n        End If\n        Return False\n    End Function\n\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_NotifyInvalidate_System_Drawing_Rectangle_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_NotifyInvalidate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NotifyInvalidate(Rectangle)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invalidated\" data-linktype=\"relative-path\">Invalidated</a> event with a specified region of the control to invalidate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void NotifyInvalidate (System.Drawing.Rectangle invalidatedArea);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>invalidatedArea</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a> representing the area to invalidate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnAutoSizeChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnAutoSizeChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnAutoSizeChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_AutoSizeChanged\" data-linktype=\"relative-path\">AutoSizeChanged</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnAutoSizeChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnAutoSizeChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnBackColorChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnBackColorChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnBackColorChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BackColorChanged\" data-linktype=\"relative-path\">BackColorChanged</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnBackColorChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnBackColorChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example is an event-raising method that is executed when the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property value changes. The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class has several methods with the name pattern <code>On</code><em>PropertyName</em><code>Changed</code> that raise the corresponding <em>PropertyName</em><code>Changed</code> event when the <em>PropertyName</em> value changes (<em>PropertyName</em> represents the name of the corresponding property).  </p>\n<p> The following code example changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> of a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> derived class displaying currency data. The example converts the text to a decimal number and changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Red_\" data-linktype=\"relative-path\">Red</a> if the number is negative and to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Black_\" data-linktype=\"relative-path\">Black</a> if the number is positive. This example requires that you have a class that derives from the <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">   protected:\n      virtual void OnTextChanged( System::EventArgs^ e ) override\n      {\n         try\n         {\n            // Convert the text to a Double and determine\n            // if it is a negative number.\n            if ( Double::Parse( this-&gt;Text ) &lt; 0 )\n            {\n               // If the number is negative, display it in Red.\n               this-&gt;ForeColor = Color::Red;\n            }\n            else\n            {\n               // If the number is not negative, display it in Black.\n               this-&gt;ForeColor = Color::Black;\n            }\n         }\n         catch ( Exception^ ) \n         {\n            // If there is an error, display the\n            // text using the system colors.\n            this-&gt;ForeColor = SystemColors::ControlText;\n         }\n\n         TextBox::OnTextChanged( e );\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">protected override void OnTextChanged(System.EventArgs e)\n{\n   try\n   {\n      // Convert the text to a Double and determine\n      // if it is a negative number.\n      if(double.Parse(this.Text) &lt; 0)\n      {\n         // If the number is negative, display it in Red.\n         this.ForeColor = Color.Red;\n      }\n      else\n      {\n         // If the number is not negative, display it in Black.\n         this.ForeColor = Color.Black;\n      }\n   }\n   catch\n   {\n      // If there is an error, display the \n      // text using the system colors.\n      this.ForeColor = SystemColors.ControlText;\n   }\n   \n   base.OnTextChanged(e);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">Protected Overrides Sub OnTextChanged(e As System.EventArgs)\n   Try\n      &#39; Convert the text to a Double and determine\n      &#39; if it is a negative number.\n      If Double.Parse(Me.Text) &lt; 0 Then\n         &#39; If the number is negative, display it in Red.\n         Me.ForeColor = Color.Red\n      Else\n         &#39; If the number is not negative, display it in Black.\n         Me.ForeColor = Color.Black\n      End If\n   Catch\n      &#39; If there is an error, display the\n      &#39; text using the system colors.\n      Me.ForeColor = SystemColors.ControlText\n   End Try\n\n   MyBase.OnTextChanged(e)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnBackgroundImageChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnBackgroundImageChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnBackgroundImageChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BackgroundImageChanged\" data-linktype=\"relative-path\">BackgroundImageChanged</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnBackgroundImageChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnBackgroundImageChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example is an event-raising method that is executed when the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property value changes. The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class has several methods with the name pattern <code>On</code><em>PropertyName</em><code>Changed</code> that raise the corresponding <em>PropertyName</em><code>Changed</code> event when the <em>PropertyName</em> value changes (<em>PropertyName</em> represents the name of the corresponding property).  </p>\n<p> The following code example changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> of a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> derived class displaying currency data. The example converts the text to a decimal number and changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Red_\" data-linktype=\"relative-path\">Red</a> if the number is negative and to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Black_\" data-linktype=\"relative-path\">Black</a> if the number is positive. This example requires that you have a class that derives from the <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">   protected:\n      virtual void OnTextChanged( System::EventArgs^ e ) override\n      {\n         try\n         {\n            // Convert the text to a Double and determine\n            // if it is a negative number.\n            if ( Double::Parse( this-&gt;Text ) &lt; 0 )\n            {\n               // If the number is negative, display it in Red.\n               this-&gt;ForeColor = Color::Red;\n            }\n            else\n            {\n               // If the number is not negative, display it in Black.\n               this-&gt;ForeColor = Color::Black;\n            }\n         }\n         catch ( Exception^ ) \n         {\n            // If there is an error, display the\n            // text using the system colors.\n            this-&gt;ForeColor = SystemColors::ControlText;\n         }\n\n         TextBox::OnTextChanged( e );\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">protected override void OnTextChanged(System.EventArgs e)\n{\n   try\n   {\n      // Convert the text to a Double and determine\n      // if it is a negative number.\n      if(double.Parse(this.Text) &lt; 0)\n      {\n         // If the number is negative, display it in Red.\n         this.ForeColor = Color.Red;\n      }\n      else\n      {\n         // If the number is not negative, display it in Black.\n         this.ForeColor = Color.Black;\n      }\n   }\n   catch\n   {\n      // If there is an error, display the \n      // text using the system colors.\n      this.ForeColor = SystemColors.ControlText;\n   }\n   \n   base.OnTextChanged(e);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">Protected Overrides Sub OnTextChanged(e As System.EventArgs)\n   Try\n      &#39; Convert the text to a Double and determine\n      &#39; if it is a negative number.\n      If Double.Parse(Me.Text) &lt; 0 Then\n         &#39; If the number is negative, display it in Red.\n         Me.ForeColor = Color.Red\n      Else\n         &#39; If the number is not negative, display it in Black.\n         Me.ForeColor = Color.Black\n      End If\n   Catch\n      &#39; If there is an error, display the\n      &#39; text using the system colors.\n      Me.ForeColor = SystemColors.ControlText\n   End Try\n\n   MyBase.OnTextChanged(e)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnBackgroundImageLayoutChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnBackgroundImageLayoutChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnBackgroundImageLayoutChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BackgroundImageLayoutChanged\" data-linktype=\"relative-path\">BackgroundImageLayoutChanged</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnBackgroundImageLayoutChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnBackgroundImageLayoutChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnBindingContextChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnBindingContextChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnBindingContextChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BindingContextChanged\" data-linktype=\"relative-path\">BindingContextChanged</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnBindingContextChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnBindingContextChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnCausesValidationChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnCausesValidationChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnCausesValidationChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CausesValidationChanged\" data-linktype=\"relative-path\">CausesValidationChanged</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnCausesValidationChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnCausesValidationChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example is an event-raising method that is executed when the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property value changes. The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class has several methods with the name pattern <code>On</code><em>PropertyName</em><code>Changed</code> that raise the corresponding <em>PropertyName</em><code>Changed</code> event when the <em>PropertyName</em> value changes (<em>PropertyName</em> represents the name of the corresponding property).  </p>\n<p> The following code example changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> of a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> derived class displaying currency data. The example converts the text to a decimal number and changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Red_\" data-linktype=\"relative-path\">Red</a> if the number is negative and to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Black_\" data-linktype=\"relative-path\">Black</a> if the number is positive. This example requires that you have a class that derives from the <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">   protected:\n      virtual void OnTextChanged( System::EventArgs^ e ) override\n      {\n         try\n         {\n            // Convert the text to a Double and determine\n            // if it is a negative number.\n            if ( Double::Parse( this-&gt;Text ) &lt; 0 )\n            {\n               // If the number is negative, display it in Red.\n               this-&gt;ForeColor = Color::Red;\n            }\n            else\n            {\n               // If the number is not negative, display it in Black.\n               this-&gt;ForeColor = Color::Black;\n            }\n         }\n         catch ( Exception^ ) \n         {\n            // If there is an error, display the\n            // text using the system colors.\n            this-&gt;ForeColor = SystemColors::ControlText;\n         }\n\n         TextBox::OnTextChanged( e );\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">protected override void OnTextChanged(System.EventArgs e)\n{\n   try\n   {\n      // Convert the text to a Double and determine\n      // if it is a negative number.\n      if(double.Parse(this.Text) &lt; 0)\n      {\n         // If the number is negative, display it in Red.\n         this.ForeColor = Color.Red;\n      }\n      else\n      {\n         // If the number is not negative, display it in Black.\n         this.ForeColor = Color.Black;\n      }\n   }\n   catch\n   {\n      // If there is an error, display the \n      // text using the system colors.\n      this.ForeColor = SystemColors.ControlText;\n   }\n   \n   base.OnTextChanged(e);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">Protected Overrides Sub OnTextChanged(e As System.EventArgs)\n   Try\n      &#39; Convert the text to a Double and determine\n      &#39; if it is a negative number.\n      If Double.Parse(Me.Text) &lt; 0 Then\n         &#39; If the number is negative, display it in Red.\n         Me.ForeColor = Color.Red\n      Else\n         &#39; If the number is not negative, display it in Black.\n         Me.ForeColor = Color.Black\n      End If\n   Catch\n      &#39; If there is an error, display the\n      &#39; text using the system colors.\n      Me.ForeColor = SystemColors.ControlText\n   End Try\n\n   MyBase.OnTextChanged(e)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnChangeUICues_System_Windows_Forms_UICuesEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnChangeUICues_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnChangeUICues(UICuesEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ChangeUICues\" data-linktype=\"relative-path\">ChangeUICues</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnChangeUICues (System.Windows.Forms.UICuesEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.uicueseventargs\" data-linktype=\"relative-path\">UICuesEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.uicueseventargs\" data-linktype=\"relative-path\">UICuesEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnChangeUICues method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnClick_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnClick_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnClick(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Click\" data-linktype=\"relative-path\">Click</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnClick (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnClick method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates overriding the OnClick method in a derived class. To run the example, paste the following code after a form class, in the same file. Add a textbox of type <code>SingleClickTextBox</code> to the form.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.ControlOnClick#1\">// This is a custom TextBox control that overrides the OnClick method\n// to allow one-click selection of the text in the text box.\n\npublic class SingleClickTextBox: TextBox\n\n{\n\tprotected override void OnClick(EventArgs e)\n\t{\n\t\tthis.SelectAll();\n\t\tbase.OnClick(e);\n\t}\n\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.ControlOnClick#1\">&#39; This is a custom TextBox control that overrides the OnClick method\n&#39; to allow one-click selection of the text in the text box.\n\nPublic Class SingleClickTextBox\n    Inherits TextBox\n\n    Protected Overrides Sub OnClick(ByVal e As EventArgs)\n        Me.SelectAll()\n        MyBase.OnClick(e)\n    End Sub\n\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.ControlOnClick#1\">// This is a custom TextBox control that overrides the OnClick method\n// to allow one-click selection of the text in the text box.\npublic ref class SingleClickTextBox: public TextBox\n{\nprotected:\n   virtual void OnClick( EventArgs^ e ) override\n   {\n      this-&gt;SelectAll();\n      TextBox::OnClick( e );\n   }\n};\n</code></pre><p> The following code example shows one of the many uses of the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Click\" data-linktype=\"relative-path\">Click</a> event and event handler.  </p>\n<pre><code class=\"lang-cpp\" name=\"Control.FindForm#1\">   // This example uses the Parent property and the Find method of Control to set\n   // properties on the parent control of a Button and its Form. The example assumes\n   // that a Button control named button1 is located within a GroupBox control. The \n   // example also assumes that the Click event of the Button control is connected to\n   // the event handler method defined in the example.\nprivate:\n   void button1_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // Get the control the Button control is located in. In this case a GroupBox.\n      Control^ control = button1-&gt;Parent;\n      \n      // Set the text and backcolor of the parent control.\n      control-&gt;Text = &quot;My Groupbox&quot;;\n      control-&gt;BackColor = Color::Blue;\n      \n      // Get the form that the Button control is contained within.\n      Form^ myForm = button1-&gt;FindForm();\n      \n      // Set the text and color of the form containing the Button.\n      myForm-&gt;Text = &quot;The Form of My Control&quot;;\n      myForm-&gt;BackColor = Color::Red;\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Control.FindForm#1\">   &#39; This example uses the Parent property and the Find method of Control to set\n   &#39; properties on the parent control of a Button and its Form. The example assumes\n   &#39; that a Button control named button1 is located within a GroupBox control. The \n   &#39; example also assumes that the Click event of the Button control is connected to\n   &#39; the event handler method defined in the example.\n   Private Sub button1_Click(sender As Object, e As System.EventArgs) Handles button1.Click\n      &#39; Get the control the Button control is located in. In this case a GroupBox.\n      Dim control As Control = button1.Parent\n      &#39; Set the text and backcolor of the parent control.\n      control.Text = &quot;My Groupbox&quot;\n      control.BackColor = Color.Blue\n      &#39; Get the form that the Button control is contained within.\n      Dim myForm As Form = button1.FindForm()\n      &#39; Set the text and color of the form containing the Button.\n      myForm.Text = &quot;The Form of My Control&quot;\n      myForm.BackColor = Color.Red\n   End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Control.FindForm#1\">      // This example uses the Parent property and the Find method of Control to set\n      // properties on the parent control of a Button and its Form. The example assumes\n      // that a Button control named button1 is located within a GroupBox control. The \n      // example also assumes that the Click event of the Button control is connected to\n      // the event handler method defined in the example.\n      private void button1_Click(object sender, System.EventArgs e)\n      {\n         // Get the control the Button control is located in. In this case a GroupBox.\n         Control control = button1.Parent;\n         // Set the text and backcolor of the parent control.\n         control.Text = &quot;My Groupbox&quot;;\n         control.BackColor = Color.Blue;\n         // Get the form that the Button control is contained within.\n         Form myForm = button1.FindForm();\n         // Set the text and color of the form containing the Button.\n         myForm.Text = &quot;The Form of My Control&quot;;\n         myForm.BackColor = Color.Red;\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnClientSizeChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnClientSizeChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnClientSizeChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ClientSizeChanged\" data-linktype=\"relative-path\">ClientSizeChanged</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnClientSizeChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnClientSizeChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnContextMenuChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnContextMenuChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnContextMenuChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ContextMenuChanged\" data-linktype=\"relative-path\">ContextMenuChanged</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnContextMenuChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnContextMenuChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example is an event-raising method that is executed when the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property value changes. The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class has several methods with the name pattern <code>On</code><em>PropertyName</em><code>Changed</code> that raise the corresponding <em>PropertyName</em><code>Changed</code> event when the <em>PropertyName</em> value changes (<em>PropertyName</em> represents the name of the corresponding property).  </p>\n<p> The following code example changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> of a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> derived class displaying currency data. The example converts the text to a decimal number and changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Red_\" data-linktype=\"relative-path\">Red</a> if the number is negative and to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Black_\" data-linktype=\"relative-path\">Black</a> if the number is positive. This example requires that you have a class that derives from the <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">   protected:\n      virtual void OnTextChanged( System::EventArgs^ e ) override\n      {\n         try\n         {\n            // Convert the text to a Double and determine\n            // if it is a negative number.\n            if ( Double::Parse( this-&gt;Text ) &lt; 0 )\n            {\n               // If the number is negative, display it in Red.\n               this-&gt;ForeColor = Color::Red;\n            }\n            else\n            {\n               // If the number is not negative, display it in Black.\n               this-&gt;ForeColor = Color::Black;\n            }\n         }\n         catch ( Exception^ ) \n         {\n            // If there is an error, display the\n            // text using the system colors.\n            this-&gt;ForeColor = SystemColors::ControlText;\n         }\n\n         TextBox::OnTextChanged( e );\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">protected override void OnTextChanged(System.EventArgs e)\n{\n   try\n   {\n      // Convert the text to a Double and determine\n      // if it is a negative number.\n      if(double.Parse(this.Text) &lt; 0)\n      {\n         // If the number is negative, display it in Red.\n         this.ForeColor = Color.Red;\n      }\n      else\n      {\n         // If the number is not negative, display it in Black.\n         this.ForeColor = Color.Black;\n      }\n   }\n   catch\n   {\n      // If there is an error, display the \n      // text using the system colors.\n      this.ForeColor = SystemColors.ControlText;\n   }\n   \n   base.OnTextChanged(e);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">Protected Overrides Sub OnTextChanged(e As System.EventArgs)\n   Try\n      &#39; Convert the text to a Double and determine\n      &#39; if it is a negative number.\n      If Double.Parse(Me.Text) &lt; 0 Then\n         &#39; If the number is negative, display it in Red.\n         Me.ForeColor = Color.Red\n      Else\n         &#39; If the number is not negative, display it in Black.\n         Me.ForeColor = Color.Black\n      End If\n   Catch\n      &#39; If there is an error, display the\n      &#39; text using the system colors.\n      Me.ForeColor = SystemColors.ControlText\n   End Try\n\n   MyBase.OnTextChanged(e)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnContextMenuStripChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnContextMenuStripChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnContextMenuStripChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ContextMenuStripChanged\" data-linktype=\"relative-path\">ContextMenuStripChanged</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnContextMenuStripChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnContextMenuStripChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnControlAdded_System_Windows_Forms_ControlEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnControlAdded_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnControlAdded(ControlEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ControlAdded\" data-linktype=\"relative-path\">ControlAdded</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnControlAdded (System.Windows.Forms.ControlEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.controleventargs\" data-linktype=\"relative-path\">ControlEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.controleventargs\" data-linktype=\"relative-path\">ControlEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Called when a child control is added to the control.  </p>\n<p> Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnControlAdded method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ControlAdded\" data-linktype=\"relative-path\">ControlAdded</a> to add a control to a form and displays the name of the added control in a <a class=\"xref\" href=\"system.windows.forms.messagebox\" data-linktype=\"relative-path\">MessageBox</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Control.ControlRemoved#1\">   // This example demonstrates the use of the ControlAdded and\n   // ControlRemoved events. This example assumes that two Button controls\n   // are added to the form and connected to the addControl_Click and\n   // removeControl_Click event-handler methods.\nprivate:\n   void Form1_Load( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // Connect the ControlRemoved and ControlAdded event handlers\n      // to the event-handler methods.\n      // ControlRemoved and ControlAdded are not available at design time.\n      this-&gt;ControlRemoved += gcnew System::Windows::Forms::ControlEventHandler( this, &amp;Form1::Control_Removed );\n      this-&gt;ControlAdded += gcnew System::Windows::Forms::ControlEventHandler( this, &amp;Form1::Control_Added );\n   }\n\n   void Control_Added( Object^ /*sender*/, System::Windows::Forms::ControlEventArgs^ e )\n   {\n      MessageBox::Show( String::Format( &quot;The control named {0} has been added to the form.&quot;, e-&gt;Control-&gt;Name ) );\n   }\n\n   void Control_Removed( Object^ /*sender*/, System::Windows::Forms::ControlEventArgs^ e )\n   {\n      MessageBox::Show( String::Format( &quot;The control named {0} has been removed from the form.&quot;, e-&gt;Control-&gt;Name ) );\n   }\n\n   // Click event handler for a Button control. Adds a TextBox to the form.\n   void addControl_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // Create a new TextBox control and add it to the form.\n      TextBox^ textBox1 = gcnew TextBox;\n      textBox1-&gt;Size = System::Drawing::Size( 100, 10 );\n      textBox1-&gt;Location = Point(10,10);\n\n      // Name the control in order to remove it later. The name must be specified\n      // if a control is added at run time.\n      textBox1-&gt;Name = &quot;textBox1&quot;;\n\n      // Add the control to the form&#39;s control collection.\n      this-&gt;Controls-&gt;Add( textBox1 );\n   }\n\n   // Click event handler for a Button control.\n   // Removes the previously added TextBox from the form.\n   void removeControl_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // Loop through all controls in the form&#39;s control collection.\n      IEnumerator^ myEnum = this-&gt;Controls-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         Control^ tempCtrl = safe_cast&lt;Control^&gt;(myEnum-&gt;Current);\n         \n         // Determine whether the control is textBox1,\n         // and if it is, remove it.\n         if ( tempCtrl-&gt;Name-&gt;Equals( &quot;textBox1&quot; ) )\n         {\n            this-&gt;Controls-&gt;Remove( tempCtrl );\n         }\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Control.ControlRemoved#1\">    &#39; This example demonstrates the use of the ControlAdded and\n    &#39; ControlRemoved events. This example assumes that two Button controls \n    &#39; are added to the form and connected to the addControl_Click and \n    &#39; removeControl_Click event-handler methods.\n    Private Sub Form1_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Load\n        &#39; Connect the ControlRemoved and ControlAdded event handlers to the event-handler methods.\n        &#39; ControlRemoved and ControlAdded are not available at design time.\n        AddHandler Me.ControlRemoved, AddressOf Me.Control_Removed\n        AddHandler Me.ControlAdded, AddressOf Me.Control_Added\n    End Sub &#39;Form1_Load\n\n\n    Private Sub Control_Added(ByVal sender As Object, ByVal e As System.Windows.Forms.ControlEventArgs)\n        MessageBox.Show((&quot;The control named &quot; + e.Control.Name + &quot; has been added to the form.&quot;))\n    End Sub\n\n\n    Private Sub Control_Removed(ByVal sender As Object, ByVal e As System.Windows.Forms.ControlEventArgs)\n        MessageBox.Show((&quot;The control named &quot; + e.Control.Name + &quot; has been removed from the form.&quot;))\n    End Sub\n\n\n    &#39; Click event handler for a Button control. Adds a TextBox to the form.\n    Private Sub addControl_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles button1.Click\n        &#39; Create a new TextBox control and add it to the form.\n        Dim textBox1 As New TextBox()\n        textBox1.Size = New Size(100, 10)\n        textBox1.Location = New Point(10, 10)\n        &#39; Name the control in order to remove it later. \n        &#39; The name must be specified if a control is added at run time.\n        textBox1.Name = &quot;textBox1&quot;\n\n        &#39; Add the control to the form&#39;s control collection.\n        Me.Controls.Add(textBox1)\n    End Sub\n\n\n    &#39; Click event handler for a Button control.\n    &#39; Removes the previously added TextBox from the form.\n    Private Sub removeControl_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles button2.Click\n        &#39; Loop through all controls in the form&#39;s control collection.\n        Dim tempCtrl As Control\n        For Each tempCtrl In Me.Controls\n            &#39; Determine whether the control is textBox1,\n            &#39; and if it is, remove it.\n            If tempCtrl.Name = &quot;textBox1&quot; Then\n                Me.Controls.Remove(tempCtrl)\n            End If\n        Next tempCtrl\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Control.ControlRemoved#1\">        // This example demonstrates the use of the ControlAdded and\n        // ControlRemoved events. This example assumes that two Button controls\n        // are added to the form and connected to the addControl_Click and\n        // removeControl_Click event-handler methods.\n        private void Form1_Load(object sender, System.EventArgs e)\n        {\n            // Connect the ControlRemoved and ControlAdded event handlers\n            // to the event-handler methods.\n            // ControlRemoved and ControlAdded are not available at design time.\n            this.ControlRemoved += new System.Windows.Forms.ControlEventHandler(this.Control_Removed);\n            this.ControlAdded += new System.Windows.Forms.ControlEventHandler(this.Control_Added);\n        }\n\n        private void Control_Added(object sender, System.Windows.Forms.ControlEventArgs e)\n        {\n            MessageBox.Show(&quot;The control named &quot; + e.Control.Name + &quot; has been added to the form.&quot;);\n        }\n\n        private void Control_Removed(object sender, System.Windows.Forms.ControlEventArgs e)\n        {\n            MessageBox.Show(&quot;The control named &quot; + e.Control.Name + &quot; has been removed from the form.&quot;);\n        }\n\n        // Click event handler for a Button control. Adds a TextBox to the form.\n        private void addControl_Click(object sender, System.EventArgs e)\n        {\n            // Create a new TextBox control and add it to the form.\n            TextBox textBox1 = new TextBox();\n            textBox1.Size = new Size(100,10);\n            textBox1.Location = new Point(10,10);\n            // Name the control in order to remove it later. The name must be specified\n            // if a control is added at run time.\n            textBox1.Name = &quot;textBox1&quot;;\n\n            // Add the control to the form&#39;s control collection.\n            this.Controls.Add(textBox1);\n        }\n\n        // Click event handler for a Button control.\n        // Removes the previously added TextBox from the form.\n        private void removeControl_Click(object sender, System.EventArgs e)\n        {\n            // Loop through all controls in the form&#39;s control collection.\n            foreach (Control tempCtrl in this.Controls)\n            {\n                // Determine whether the control is textBox1,\n                // and if it is, remove it.\n                if (tempCtrl.Name == &quot;textBox1&quot;)\n                {\n                    this.Controls.Remove(tempCtrl);\n                }\n            }\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnControlRemoved_System_Windows_Forms_ControlEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnControlRemoved_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnControlRemoved(ControlEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ControlRemoved\" data-linktype=\"relative-path\">ControlRemoved</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnControlRemoved (System.Windows.Forms.ControlEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.controleventargs\" data-linktype=\"relative-path\">ControlEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.controleventargs\" data-linktype=\"relative-path\">ControlEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Called when a child control is removed from the control.  </p>\n<p> Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnControlRemoved method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ControlRemoved\" data-linktype=\"relative-path\">ControlRemoved</a> to remove a control from a form and displays the name of the removed control in a <a class=\"xref\" href=\"system.windows.forms.messagebox\" data-linktype=\"relative-path\">MessageBox</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Control.ControlRemoved#1\">   // This example demonstrates the use of the ControlAdded and\n   // ControlRemoved events. This example assumes that two Button controls\n   // are added to the form and connected to the addControl_Click and\n   // removeControl_Click event-handler methods.\nprivate:\n   void Form1_Load( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // Connect the ControlRemoved and ControlAdded event handlers\n      // to the event-handler methods.\n      // ControlRemoved and ControlAdded are not available at design time.\n      this-&gt;ControlRemoved += gcnew System::Windows::Forms::ControlEventHandler( this, &amp;Form1::Control_Removed );\n      this-&gt;ControlAdded += gcnew System::Windows::Forms::ControlEventHandler( this, &amp;Form1::Control_Added );\n   }\n\n   void Control_Added( Object^ /*sender*/, System::Windows::Forms::ControlEventArgs^ e )\n   {\n      MessageBox::Show( String::Format( &quot;The control named {0} has been added to the form.&quot;, e-&gt;Control-&gt;Name ) );\n   }\n\n   void Control_Removed( Object^ /*sender*/, System::Windows::Forms::ControlEventArgs^ e )\n   {\n      MessageBox::Show( String::Format( &quot;The control named {0} has been removed from the form.&quot;, e-&gt;Control-&gt;Name ) );\n   }\n\n   // Click event handler for a Button control. Adds a TextBox to the form.\n   void addControl_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // Create a new TextBox control and add it to the form.\n      TextBox^ textBox1 = gcnew TextBox;\n      textBox1-&gt;Size = System::Drawing::Size( 100, 10 );\n      textBox1-&gt;Location = Point(10,10);\n\n      // Name the control in order to remove it later. The name must be specified\n      // if a control is added at run time.\n      textBox1-&gt;Name = &quot;textBox1&quot;;\n\n      // Add the control to the form&#39;s control collection.\n      this-&gt;Controls-&gt;Add( textBox1 );\n   }\n\n   // Click event handler for a Button control.\n   // Removes the previously added TextBox from the form.\n   void removeControl_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // Loop through all controls in the form&#39;s control collection.\n      IEnumerator^ myEnum = this-&gt;Controls-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         Control^ tempCtrl = safe_cast&lt;Control^&gt;(myEnum-&gt;Current);\n         \n         // Determine whether the control is textBox1,\n         // and if it is, remove it.\n         if ( tempCtrl-&gt;Name-&gt;Equals( &quot;textBox1&quot; ) )\n         {\n            this-&gt;Controls-&gt;Remove( tempCtrl );\n         }\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Control.ControlRemoved#1\">    &#39; This example demonstrates the use of the ControlAdded and\n    &#39; ControlRemoved events. This example assumes that two Button controls \n    &#39; are added to the form and connected to the addControl_Click and \n    &#39; removeControl_Click event-handler methods.\n    Private Sub Form1_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Load\n        &#39; Connect the ControlRemoved and ControlAdded event handlers to the event-handler methods.\n        &#39; ControlRemoved and ControlAdded are not available at design time.\n        AddHandler Me.ControlRemoved, AddressOf Me.Control_Removed\n        AddHandler Me.ControlAdded, AddressOf Me.Control_Added\n    End Sub &#39;Form1_Load\n\n\n    Private Sub Control_Added(ByVal sender As Object, ByVal e As System.Windows.Forms.ControlEventArgs)\n        MessageBox.Show((&quot;The control named &quot; + e.Control.Name + &quot; has been added to the form.&quot;))\n    End Sub\n\n\n    Private Sub Control_Removed(ByVal sender As Object, ByVal e As System.Windows.Forms.ControlEventArgs)\n        MessageBox.Show((&quot;The control named &quot; + e.Control.Name + &quot; has been removed from the form.&quot;))\n    End Sub\n\n\n    &#39; Click event handler for a Button control. Adds a TextBox to the form.\n    Private Sub addControl_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles button1.Click\n        &#39; Create a new TextBox control and add it to the form.\n        Dim textBox1 As New TextBox()\n        textBox1.Size = New Size(100, 10)\n        textBox1.Location = New Point(10, 10)\n        &#39; Name the control in order to remove it later. \n        &#39; The name must be specified if a control is added at run time.\n        textBox1.Name = &quot;textBox1&quot;\n\n        &#39; Add the control to the form&#39;s control collection.\n        Me.Controls.Add(textBox1)\n    End Sub\n\n\n    &#39; Click event handler for a Button control.\n    &#39; Removes the previously added TextBox from the form.\n    Private Sub removeControl_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles button2.Click\n        &#39; Loop through all controls in the form&#39;s control collection.\n        Dim tempCtrl As Control\n        For Each tempCtrl In Me.Controls\n            &#39; Determine whether the control is textBox1,\n            &#39; and if it is, remove it.\n            If tempCtrl.Name = &quot;textBox1&quot; Then\n                Me.Controls.Remove(tempCtrl)\n            End If\n        Next tempCtrl\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Control.ControlRemoved#1\">        // This example demonstrates the use of the ControlAdded and\n        // ControlRemoved events. This example assumes that two Button controls\n        // are added to the form and connected to the addControl_Click and\n        // removeControl_Click event-handler methods.\n        private void Form1_Load(object sender, System.EventArgs e)\n        {\n            // Connect the ControlRemoved and ControlAdded event handlers\n            // to the event-handler methods.\n            // ControlRemoved and ControlAdded are not available at design time.\n            this.ControlRemoved += new System.Windows.Forms.ControlEventHandler(this.Control_Removed);\n            this.ControlAdded += new System.Windows.Forms.ControlEventHandler(this.Control_Added);\n        }\n\n        private void Control_Added(object sender, System.Windows.Forms.ControlEventArgs e)\n        {\n            MessageBox.Show(&quot;The control named &quot; + e.Control.Name + &quot; has been added to the form.&quot;);\n        }\n\n        private void Control_Removed(object sender, System.Windows.Forms.ControlEventArgs e)\n        {\n            MessageBox.Show(&quot;The control named &quot; + e.Control.Name + &quot; has been removed from the form.&quot;);\n        }\n\n        // Click event handler for a Button control. Adds a TextBox to the form.\n        private void addControl_Click(object sender, System.EventArgs e)\n        {\n            // Create a new TextBox control and add it to the form.\n            TextBox textBox1 = new TextBox();\n            textBox1.Size = new Size(100,10);\n            textBox1.Location = new Point(10,10);\n            // Name the control in order to remove it later. The name must be specified\n            // if a control is added at run time.\n            textBox1.Name = &quot;textBox1&quot;;\n\n            // Add the control to the form&#39;s control collection.\n            this.Controls.Add(textBox1);\n        }\n\n        // Click event handler for a Button control.\n        // Removes the previously added TextBox from the form.\n        private void removeControl_Click(object sender, System.EventArgs e)\n        {\n            // Loop through all controls in the form&#39;s control collection.\n            foreach (Control tempCtrl in this.Controls)\n            {\n                // Determine whether the control is textBox1,\n                // and if it is, remove it.\n                if (tempCtrl.Name == &quot;textBox1&quot;)\n                {\n                    this.Controls.Remove(tempCtrl);\n                }\n            }\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnCreateControl\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnCreateControl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnCreateControl()</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <span class=\"xref\">stem.Windows.Forms.Control.CreateControl*</span> method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnCreateControl ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The OnCreateControl method is called when the control is first created.  </p>\n<p> The OnCreateControl method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnCursorChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnCursorChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnCursorChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CursorChanged\" data-linktype=\"relative-path\">CursorChanged</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnCursorChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnCursorChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example is an event-raising method that is executed when the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property value changes. The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class has several methods with the name pattern <code>On</code><em>PropertyName</em><code>Changed</code> that raise the corresponding <em>PropertyName</em><code>Changed</code> event when the <em>PropertyName</em> value changes (<em>PropertyName</em> represents the name of the corresponding property).  </p>\n<p> The following code example changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> of a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> derived class displaying currency data. The example converts the text to a decimal number and changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Red_\" data-linktype=\"relative-path\">Red</a> if the number is negative and to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Black_\" data-linktype=\"relative-path\">Black</a> if the number is positive. This example requires that you have a class that derives from the <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">   protected:\n      virtual void OnTextChanged( System::EventArgs^ e ) override\n      {\n         try\n         {\n            // Convert the text to a Double and determine\n            // if it is a negative number.\n            if ( Double::Parse( this-&gt;Text ) &lt; 0 )\n            {\n               // If the number is negative, display it in Red.\n               this-&gt;ForeColor = Color::Red;\n            }\n            else\n            {\n               // If the number is not negative, display it in Black.\n               this-&gt;ForeColor = Color::Black;\n            }\n         }\n         catch ( Exception^ ) \n         {\n            // If there is an error, display the\n            // text using the system colors.\n            this-&gt;ForeColor = SystemColors::ControlText;\n         }\n\n         TextBox::OnTextChanged( e );\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">protected override void OnTextChanged(System.EventArgs e)\n{\n   try\n   {\n      // Convert the text to a Double and determine\n      // if it is a negative number.\n      if(double.Parse(this.Text) &lt; 0)\n      {\n         // If the number is negative, display it in Red.\n         this.ForeColor = Color.Red;\n      }\n      else\n      {\n         // If the number is not negative, display it in Black.\n         this.ForeColor = Color.Black;\n      }\n   }\n   catch\n   {\n      // If there is an error, display the \n      // text using the system colors.\n      this.ForeColor = SystemColors.ControlText;\n   }\n   \n   base.OnTextChanged(e);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">Protected Overrides Sub OnTextChanged(e As System.EventArgs)\n   Try\n      &#39; Convert the text to a Double and determine\n      &#39; if it is a negative number.\n      If Double.Parse(Me.Text) &lt; 0 Then\n         &#39; If the number is negative, display it in Red.\n         Me.ForeColor = Color.Red\n      Else\n         &#39; If the number is not negative, display it in Black.\n         Me.ForeColor = Color.Black\n      End If\n   Catch\n      &#39; If there is an error, display the\n      &#39; text using the system colors.\n      Me.ForeColor = SystemColors.ControlText\n   End Try\n\n   MyBase.OnTextChanged(e)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnDockChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnDockChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnDockChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DockChanged\" data-linktype=\"relative-path\">DockChanged</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnDockChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnDockChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example is an event-raising method that is executed when the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property value changes. The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class has several methods with the name pattern <code>On</code><em>PropertyName</em><code>Changed</code> that raise the corresponding <em>PropertyName</em><code>Changed</code> event when the <em>PropertyName</em> value changes (<em>PropertyName</em> represents the name of the corresponding property).  </p>\n<p> The following code example changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> of a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> derived class displaying currency data. The example converts the text to a decimal number and changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Red_\" data-linktype=\"relative-path\">Red</a> if the number is negative and to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Black_\" data-linktype=\"relative-path\">Black</a> if the number is positive. This example requires that you have a class that derives from the <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">   protected:\n      virtual void OnTextChanged( System::EventArgs^ e ) override\n      {\n         try\n         {\n            // Convert the text to a Double and determine\n            // if it is a negative number.\n            if ( Double::Parse( this-&gt;Text ) &lt; 0 )\n            {\n               // If the number is negative, display it in Red.\n               this-&gt;ForeColor = Color::Red;\n            }\n            else\n            {\n               // If the number is not negative, display it in Black.\n               this-&gt;ForeColor = Color::Black;\n            }\n         }\n         catch ( Exception^ ) \n         {\n            // If there is an error, display the\n            // text using the system colors.\n            this-&gt;ForeColor = SystemColors::ControlText;\n         }\n\n         TextBox::OnTextChanged( e );\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">protected override void OnTextChanged(System.EventArgs e)\n{\n   try\n   {\n      // Convert the text to a Double and determine\n      // if it is a negative number.\n      if(double.Parse(this.Text) &lt; 0)\n      {\n         // If the number is negative, display it in Red.\n         this.ForeColor = Color.Red;\n      }\n      else\n      {\n         // If the number is not negative, display it in Black.\n         this.ForeColor = Color.Black;\n      }\n   }\n   catch\n   {\n      // If there is an error, display the \n      // text using the system colors.\n      this.ForeColor = SystemColors.ControlText;\n   }\n   \n   base.OnTextChanged(e);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">Protected Overrides Sub OnTextChanged(e As System.EventArgs)\n   Try\n      &#39; Convert the text to a Double and determine\n      &#39; if it is a negative number.\n      If Double.Parse(Me.Text) &lt; 0 Then\n         &#39; If the number is negative, display it in Red.\n         Me.ForeColor = Color.Red\n      Else\n         &#39; If the number is not negative, display it in Black.\n         Me.ForeColor = Color.Black\n      End If\n   Catch\n      &#39; If there is an error, display the\n      &#39; text using the system colors.\n      Me.ForeColor = SystemColors.ControlText\n   End Try\n\n   MyBase.OnTextChanged(e)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnDoubleClick_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnDoubleClick_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnDoubleClick(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoubleClick\" data-linktype=\"relative-path\">DoubleClick</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnDoubleClick (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnDoubleClick method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoubleClick\" data-linktype=\"relative-path\">DoubleClick</a> event of a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> to load text files listed in the <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> into a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> control.  </p>\n<pre><code class=\"lang-cs\" name=\"Control.DoubleClick#1\">        // This example uses the DoubleClick event of a ListBox to load text files\n        // listed in the ListBox into a TextBox control. This example\n        // assumes that the ListBox, named listBox1, contains a list of valid file\n        // names with path and that this event handler method\n        // is connected to the DoublClick event of a ListBox control named listBox1.\n        // This example requires code access permission to access files.\n        private void listBox1_DoubleClick(object sender, System.EventArgs e)\n        {\n            // Get the name of the file to open from the ListBox.\n            String file = listBox1.SelectedItem.ToString();\n\n            try\n            {\n                // Determine if the file exists before loading.\n                if (System.IO.File.Exists(file))\n                {\n                    // Open the file and use a TextReader to read the contents into the TextBox.\n                    System.IO.FileInfo myFile = new System.IO.FileInfo(listBox1.SelectedItem.ToString());\n                    System.IO.TextReader myData = myFile.OpenText();;\n\n                    textBox1.Text = myData.ReadToEnd();\n                    myData.Close();\n                }\n            }\n                // Exception is thrown by the OpenText method of the FileInfo class.\n            catch(System.IO.FileNotFoundException)\n            {\n                MessageBox.Show(&quot;The file you specified does not exist.&quot;);\n            }\n                // Exception is thrown by the ReadToEnd method of the TextReader class.\n            catch(System.IO.IOException)\n            {\n                MessageBox.Show(&quot;There was a problem loading the file into the TextBox. Ensure that the file is a valid text file.&quot;);\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Control.DoubleClick#1\">    &#39; This example uses the DoubleClick event of a ListBox to load text files  \n    &#39; listed in the ListBox into a TextBox control. This example\n    &#39; assumes that the ListBox, named listBox1, contains a list of valid file \n    &#39; names with path and that this event handler method\n    &#39; is connected to the DoublClick event of a ListBox control named listBox1.\n    &#39; This example requires code access permission to access files.\n    Private Sub listBox1_DoubleClick(ByVal sender As Object, ByVal e As System.EventArgs) Handles listBox1.DoubleClick\n        &#39; Get the name of the file to open from the ListBox.\n        Dim file As [String] = listBox1.SelectedItem.ToString()\n\n        Try\n            &#39; Determine if the file exists before loading.\n            If System.IO.File.Exists(file) Then\n                &#39; Open the file and use a TextReader to read the contents into the TextBox.\n                Dim myFile As New System.IO.FileInfo(listBox1.SelectedItem.ToString())\n                Dim myData As System.IO.TextReader = myFile.OpenText()\n\n                textBox1.Text = myData.ReadToEnd()\n                myData.Close()\n            End If\n            &#39; Exception is thrown by the OpenText method of the FileInfo class.\n        Catch\n            MessageBox.Show(&quot;The file you specified does not exist.&quot;)\n            &#39; Exception is thrown by the ReadToEnd method of the TextReader class.\n        Catch\n         MessageBox.Show(&quot;There was a problem loading the file into the TextBox. Ensure that the file is a valid text file.&quot;)\n        End Try\n    End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"Control.DoubleClick#1\">   // This example uses the DoubleClick event of a ListBox to load text files\n   // listed in the ListBox into a TextBox control. This example\n   // assumes that the ListBox, named listBox1, contains a list of valid file\n   // names with path and that this event handler method\n   // is connected to the DoublClick event of a ListBox control named listBox1.\n   // This example requires code access permission to access files.\nprivate:\n   void listBox1_DoubleClick( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // Get the name of the file to open from the ListBox.\n      String^ file = listBox1-&gt;SelectedItem-&gt;ToString();\n      try\n      {\n         // Determine if the file exists before loading.\n         if ( System::IO::File::Exists( file ) )\n         {\n            \n            // Open the file and use a TextReader to read the contents into the TextBox.\n            System::IO::FileInfo^ myFile = gcnew System::IO::FileInfo( listBox1-&gt;SelectedItem-&gt;ToString() );\n            System::IO::TextReader^ myData = myFile-&gt;OpenText();\n            ;\n            textBox1-&gt;Text = myData-&gt;ReadToEnd();\n            myData-&gt;Close();\n         }\n      }\n      // Exception is thrown by the OpenText method of the FileInfo class.\n      catch ( System::IO::FileNotFoundException^ ) \n      {\n         MessageBox::Show( &quot;The file you specified does not exist.&quot; );\n      }\n      // Exception is thrown by the ReadToEnd method of the TextReader class.\n      catch ( System::IO::IOException^ ) \n      {\n         MessageBox::Show( &quot;There was a problem loading the file into the TextBox. Ensure that the file is a valid text file.&quot; );\n      }\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnDragDrop_System_Windows_Forms_DragEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnDragDrop_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnDragDrop(DragEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragDrop\" data-linktype=\"relative-path\">DragDrop</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnDragDrop (System.Windows.Forms.DragEventArgs drgevent);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>drgevent</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnDragDrop method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnDragEnter_System_Windows_Forms_DragEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnDragEnter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnDragEnter(DragEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragEnter\" data-linktype=\"relative-path\">DragEnter</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnDragEnter (System.Windows.Forms.DragEventArgs drgevent);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>drgevent</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnDragEnter method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnDragLeave_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnDragLeave_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnDragLeave(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragLeave\" data-linktype=\"relative-path\">DragLeave</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnDragLeave (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnDragLeave method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnDragOver_System_Windows_Forms_DragEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnDragOver_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnDragOver(DragEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnDragOver (System.Windows.Forms.DragEventArgs drgevent);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>drgevent</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnDragOver method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnEnabledChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnEnabledChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnEnabledChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_EnabledChanged\" data-linktype=\"relative-path\">EnabledChanged</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnEnabledChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnEnabledChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnEnter_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnEnter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnEnter(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Enter\" data-linktype=\"relative-path\">Enter</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnEnter (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnEnter method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Enter\" data-linktype=\"relative-path\">Enter</a> event to change the foreground and background colors of a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> under particular conditions.  </p>\n<pre><code class=\"lang-cs\" name=\"Control.Enter#1\">        private void textBox1_Enter(object sender, System.EventArgs e)\n        {\n            // If the TextBox contains text, change its foreground and background colors.\n            if (textBox1.Text != String.Empty)\n            {\n                textBox1.ForeColor = Color.Red;\n                textBox1.BackColor = Color.Black;\n                // Move the selection pointer to the end of the text of the control.\n                textBox1.Select(textBox1.Text.Length, 0);\n            }\n        }\n\n        private void textBox1_Leave(object sender, System.EventArgs e)\n        {\n            // Reset the colors and selection of the TextBox after focus is lost.\n            textBox1.ForeColor = Color.Black;\n            textBox1.BackColor = Color.White;\n            textBox1.Select(0,0);\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Control.Enter#1\">private:\n   void textBox1_Enter( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // If the TextBox contains text, change its foreground and background colors.\n      if ( textBox1-&gt;Text != String::Empty )\n      {\n         textBox1-&gt;ForeColor = Color::Red;\n         textBox1-&gt;BackColor = Color::Black;\n\n         // Move the selection pointer to the end of the text of the control.\n         textBox1-&gt;Select(textBox1-&gt;Text-&gt;Length,0);\n      }\n   }\n\n   void textBox1_Leave( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // Reset the colors and selection of the TextBox after focus is lost.\n      textBox1-&gt;ForeColor = Color::Black;\n      textBox1-&gt;BackColor = Color::White;\n      textBox1-&gt;Select(0,0);\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Control.Enter#1\">    Private Sub textBox1_Enter(sender As Object, e As System.EventArgs) Handles textBox1.Enter\n        &#39; If the TextBox contains text, change its foreground and background colors.\n        If textBox1.Text &lt;&gt; [String].Empty Then\n            textBox1.ForeColor = Color.Red\n            textBox1.BackColor = Color.Black\n            &#39; Move the selection pointer to the end of the text of the control.\n            textBox1.Select(textBox1.Text.Length, 0)\n        End If\n    End Sub &#39;textBox1_Enter\n   \n   \n    Private Sub textBox1_Leave(sender As Object, e As System.EventArgs) Handles textBox1.Leave\n        &#39; Reset the colors and selection of the TextBox after focus is lost.\n        textBox1.ForeColor = Color.Black\n        textBox1.BackColor = Color.White\n        textBox1.Select(0, 0)\n    End Sub &#39;textBox1_Leave\nEnd Class &#39;Form1 \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnFontChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnFontChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnFontChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_FontChanged\" data-linktype=\"relative-path\">FontChanged</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnFontChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnFontChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example is an event-raising method that is executed when the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property value changes. The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class has several methods with the name pattern <code>On</code><em>PropertyName</em><code>Changed</code> that raise the corresponding <em>PropertyName</em><code>Changed</code> event when the <em>PropertyName</em> value changes (<em>PropertyName</em> represents the name of the corresponding property).  </p>\n<p> The following code example changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> of a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> derived class displaying currency data. The example converts the text to a decimal number and changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Red_\" data-linktype=\"relative-path\">Red</a> if the number is negative and to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Black_\" data-linktype=\"relative-path\">Black</a> if the number is positive. This example requires that you have a class that derives from the <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">   protected:\n      virtual void OnTextChanged( System::EventArgs^ e ) override\n      {\n         try\n         {\n            // Convert the text to a Double and determine\n            // if it is a negative number.\n            if ( Double::Parse( this-&gt;Text ) &lt; 0 )\n            {\n               // If the number is negative, display it in Red.\n               this-&gt;ForeColor = Color::Red;\n            }\n            else\n            {\n               // If the number is not negative, display it in Black.\n               this-&gt;ForeColor = Color::Black;\n            }\n         }\n         catch ( Exception^ ) \n         {\n            // If there is an error, display the\n            // text using the system colors.\n            this-&gt;ForeColor = SystemColors::ControlText;\n         }\n\n         TextBox::OnTextChanged( e );\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">protected override void OnTextChanged(System.EventArgs e)\n{\n   try\n   {\n      // Convert the text to a Double and determine\n      // if it is a negative number.\n      if(double.Parse(this.Text) &lt; 0)\n      {\n         // If the number is negative, display it in Red.\n         this.ForeColor = Color.Red;\n      }\n      else\n      {\n         // If the number is not negative, display it in Black.\n         this.ForeColor = Color.Black;\n      }\n   }\n   catch\n   {\n      // If there is an error, display the \n      // text using the system colors.\n      this.ForeColor = SystemColors.ControlText;\n   }\n   \n   base.OnTextChanged(e);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">Protected Overrides Sub OnTextChanged(e As System.EventArgs)\n   Try\n      &#39; Convert the text to a Double and determine\n      &#39; if it is a negative number.\n      If Double.Parse(Me.Text) &lt; 0 Then\n         &#39; If the number is negative, display it in Red.\n         Me.ForeColor = Color.Red\n      Else\n         &#39; If the number is not negative, display it in Black.\n         Me.ForeColor = Color.Black\n      End If\n   Catch\n      &#39; If there is an error, display the\n      &#39; text using the system colors.\n      Me.ForeColor = SystemColors.ControlText\n   End Try\n\n   MyBase.OnTextChanged(e)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnForeColorChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnForeColorChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnForeColorChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColorChanged\" data-linktype=\"relative-path\">ForeColorChanged</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnForeColorChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnForeColorChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example is an event-raising method that is executed when the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property value changes. The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class has several methods with the name pattern <code>On</code><em>PropertyName</em><code>Changed</code> that raise the corresponding <em>PropertyName</em><code>Changed</code> event when the <em>PropertyName</em> value changes (<em>PropertyName</em> represents the name of the corresponding property).  </p>\n<p> The following code example changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> of a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> derived class displaying currency data. The example converts the text to a decimal number and changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Red_\" data-linktype=\"relative-path\">Red</a> if the number is negative and to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Black_\" data-linktype=\"relative-path\">Black</a> if the number is positive. This example requires that you have a class that derives from the <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">   protected:\n      virtual void OnTextChanged( System::EventArgs^ e ) override\n      {\n         try\n         {\n            // Convert the text to a Double and determine\n            // if it is a negative number.\n            if ( Double::Parse( this-&gt;Text ) &lt; 0 )\n            {\n               // If the number is negative, display it in Red.\n               this-&gt;ForeColor = Color::Red;\n            }\n            else\n            {\n               // If the number is not negative, display it in Black.\n               this-&gt;ForeColor = Color::Black;\n            }\n         }\n         catch ( Exception^ ) \n         {\n            // If there is an error, display the\n            // text using the system colors.\n            this-&gt;ForeColor = SystemColors::ControlText;\n         }\n\n         TextBox::OnTextChanged( e );\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">protected override void OnTextChanged(System.EventArgs e)\n{\n   try\n   {\n      // Convert the text to a Double and determine\n      // if it is a negative number.\n      if(double.Parse(this.Text) &lt; 0)\n      {\n         // If the number is negative, display it in Red.\n         this.ForeColor = Color.Red;\n      }\n      else\n      {\n         // If the number is not negative, display it in Black.\n         this.ForeColor = Color.Black;\n      }\n   }\n   catch\n   {\n      // If there is an error, display the \n      // text using the system colors.\n      this.ForeColor = SystemColors.ControlText;\n   }\n   \n   base.OnTextChanged(e);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">Protected Overrides Sub OnTextChanged(e As System.EventArgs)\n   Try\n      &#39; Convert the text to a Double and determine\n      &#39; if it is a negative number.\n      If Double.Parse(Me.Text) &lt; 0 Then\n         &#39; If the number is negative, display it in Red.\n         Me.ForeColor = Color.Red\n      Else\n         &#39; If the number is not negative, display it in Black.\n         Me.ForeColor = Color.Black\n      End If\n   Catch\n      &#39; If there is an error, display the\n      &#39; text using the system colors.\n      Me.ForeColor = SystemColors.ControlText\n   End Try\n\n   MyBase.OnTextChanged(e)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnGiveFeedback_System_Windows_Forms_GiveFeedbackEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnGiveFeedback_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnGiveFeedback(GiveFeedbackEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GiveFeedback\" data-linktype=\"relative-path\">GiveFeedback</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnGiveFeedback (System.Windows.Forms.GiveFeedbackEventArgs gfbevent);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>gfbevent</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.givefeedbackeventargs\" data-linktype=\"relative-path\">GiveFeedbackEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.givefeedbackeventargs\" data-linktype=\"relative-path\">GiveFeedbackEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnGiveFeedback method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnGotFocus_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnGotFocus_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnGotFocus(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GotFocus\" data-linktype=\"relative-path\">GotFocus</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnGotFocus (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnGotFocus method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnHandleCreated_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnHandleCreated_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnHandleCreated(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_HandleCreated\" data-linktype=\"relative-path\">HandleCreated</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnHandleCreated (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnHandleCreated method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnHandleDestroyed_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnHandleDestroyed_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnHandleDestroyed(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_HandleDestroyed\" data-linktype=\"relative-path\">HandleDestroyed</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnHandleDestroyed (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnHandleDestroyed method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnHelpRequested_System_Windows_Forms_HelpEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnHelpRequested_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnHelpRequested(HelpEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_HelpRequested\" data-linktype=\"relative-path\">HelpRequested</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnHelpRequested (System.Windows.Forms.HelpEventArgs hevent);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>hevent</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.helpeventargs\" data-linktype=\"relative-path\">HelpEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.helpeventargs\" data-linktype=\"relative-path\">HelpEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnHelpRequested method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnImeModeChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnImeModeChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnImeModeChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ImeModeChanged\" data-linktype=\"relative-path\">ImeModeChanged</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnImeModeChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnImeModeChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example is an event-raising method that is executed when the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property value changes. The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class has several methods with the name pattern <code>On</code><em>PropertyName</em><code>Changed</code> that raise the corresponding <em>PropertyName</em><code>Changed</code> event when the <em>PropertyName</em> value changes (<em>PropertyName</em> represents the name of the corresponding property).  </p>\n<p> The following code example changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> of a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> derived class displaying currency data. The example converts the text to a decimal number and changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Red_\" data-linktype=\"relative-path\">Red</a> if the number is negative and to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Black_\" data-linktype=\"relative-path\">Black</a> if the number is positive. This example requires that you have a class that derives from the <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">   protected:\n      virtual void OnTextChanged( System::EventArgs^ e ) override\n      {\n         try\n         {\n            // Convert the text to a Double and determine\n            // if it is a negative number.\n            if ( Double::Parse( this-&gt;Text ) &lt; 0 )\n            {\n               // If the number is negative, display it in Red.\n               this-&gt;ForeColor = Color::Red;\n            }\n            else\n            {\n               // If the number is not negative, display it in Black.\n               this-&gt;ForeColor = Color::Black;\n            }\n         }\n         catch ( Exception^ ) \n         {\n            // If there is an error, display the\n            // text using the system colors.\n            this-&gt;ForeColor = SystemColors::ControlText;\n         }\n\n         TextBox::OnTextChanged( e );\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">protected override void OnTextChanged(System.EventArgs e)\n{\n   try\n   {\n      // Convert the text to a Double and determine\n      // if it is a negative number.\n      if(double.Parse(this.Text) &lt; 0)\n      {\n         // If the number is negative, display it in Red.\n         this.ForeColor = Color.Red;\n      }\n      else\n      {\n         // If the number is not negative, display it in Black.\n         this.ForeColor = Color.Black;\n      }\n   }\n   catch\n   {\n      // If there is an error, display the \n      // text using the system colors.\n      this.ForeColor = SystemColors.ControlText;\n   }\n   \n   base.OnTextChanged(e);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">Protected Overrides Sub OnTextChanged(e As System.EventArgs)\n   Try\n      &#39; Convert the text to a Double and determine\n      &#39; if it is a negative number.\n      If Double.Parse(Me.Text) &lt; 0 Then\n         &#39; If the number is negative, display it in Red.\n         Me.ForeColor = Color.Red\n      Else\n         &#39; If the number is not negative, display it in Black.\n         Me.ForeColor = Color.Black\n      End If\n   Catch\n      &#39; If there is an error, display the\n      &#39; text using the system colors.\n      Me.ForeColor = SystemColors.ControlText\n   End Try\n\n   MyBase.OnTextChanged(e)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnInvalidated_System_Windows_Forms_InvalidateEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnInvalidated_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnInvalidated(InvalidateEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invalidated\" data-linktype=\"relative-path\">Invalidated</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnInvalidated (System.Windows.Forms.InvalidateEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.invalidateeventargs\" data-linktype=\"relative-path\">InvalidateEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.windows.forms.invalidateeventargs\" data-linktype=\"relative-path\">InvalidateEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnInvalidated method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnKeyDown_System_Windows_Forms_KeyEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnKeyDown_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnKeyDown(KeyEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyDown\" data-linktype=\"relative-path\">KeyDown</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnKeyDown (System.Windows.Forms.KeyEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnKeyDown method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyDown\" data-linktype=\"relative-path\">KeyDown</a> event to determine the type of character entered into the control.  </p>\n<pre><code class=\"lang-vb\" name=\"Control.KeyDown#1\">    &#39; Boolean flag used to determine when a character other than a number is entered.\n    Private nonNumberEntered As Boolean = False\n   \n   \n    &#39; Handle the KeyDown event to determine the type of character entered into the control.\n    Private Sub textBox1_KeyDown(sender As Object, e As System.Windows.Forms.KeyEventArgs) _\n         Handles textBox1.KeyDown\n        &#39; Initialize the flag to false.\n        nonNumberEntered = False\n      \n        &#39; Determine whether the keystroke is a number from the top of the keyboard.\n        If e.KeyCode &lt; Keys.D0 OrElse e.KeyCode &gt; Keys.D9 Then\n            &#39; Determine whether the keystroke is a number from the keypad.\n            If e.KeyCode &lt; Keys.NumPad0 OrElse e.KeyCode &gt; Keys.NumPad9 Then\n                &#39; Determine whether the keystroke is a backspace.\n                If e.KeyCode &lt;&gt; Keys.Back Then\n                    &#39; A non-numerical keystroke was pressed. \n                    &#39; Set the flag to true and evaluate in KeyPress event.\n                    nonNumberEntered = True\n                End If\n            End If\n        End If\n        &#39;If shift key was pressed, it&#39;s not a number.\n        If Control.ModifierKeys = Keys.Shift Then\n            nonNumberEntered = true\n        End If\n    End Sub &#39;textBox1_KeyDown\n   \n   \n    &#39; This event occurs after the KeyDown event and can be used \n    &#39; to prevent characters from entering the control.\n    Private Sub textBox1_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) _\n        Handles textBox1.KeyPress\n        &#39; Check for the flag being set in the KeyDown event.\n        If nonNumberEntered = True Then\n            &#39; Stop the character from being entered into the control since it is non-numerical.\n            e.Handled = True\n        End If\n    End Sub &#39;textBox1_KeyPress\n</code></pre><pre><code class=\"lang-cpp\" name=\"Control.KeyDown#1\">   // Boolean flag used to determine when a character other than a number is entered.\nprivate:\n   bool nonNumberEntered;\n\n   // Handle the KeyDown event to determine the type of character entered into the control.\n   void textBox1_KeyDown( Object^ /*sender*/, System::Windows::Forms::KeyEventArgs^ e )\n   {\n      // Initialize the flag to false.\n      nonNumberEntered = false;\n\n      // Determine whether the keystroke is a number from the top of the keyboard.\n      if ( e-&gt;KeyCode &lt; Keys::D0 || e-&gt;KeyCode &gt; Keys::D9 )\n      {\n         // Determine whether the keystroke is a number from the keypad.\n         if ( e-&gt;KeyCode &lt; Keys::NumPad0 || e-&gt;KeyCode &gt; Keys::NumPad9 )\n         {\n            // Determine whether the keystroke is a backspace.\n            if ( e-&gt;KeyCode != Keys::Back )\n            {\n               // A non-numerical keystroke was pressed.\n               // Set the flag to true and evaluate in KeyPress event.\n               nonNumberEntered = true;\n            }\n         }\n      }\n      //If shift key was pressed, it&#39;s not a number.\n      if (Control::ModifierKeys == Keys::Shift) {\n         nonNumberEntered = true;\n      }\n   }\n\n   // This event occurs after the KeyDown event and can be used to prevent\n   // characters from entering the control.\n   void textBox1_KeyPress( Object^ /*sender*/, System::Windows::Forms::KeyPressEventArgs^ e )\n   {\n      // Check for the flag being set in the KeyDown event.\n      if ( nonNumberEntered == true )\n      {         // Stop the character from being entered into the control since it is non-numerical.\n         e-&gt;Handled = true;\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"Control.KeyDown#1\">        // Boolean flag used to determine when a character other than a number is entered.\n        private bool nonNumberEntered = false;\n\n        // Handle the KeyDown event to determine the type of character entered into the control.\n        private void textBox1_KeyDown(object sender, System.Windows.Forms.KeyEventArgs e)\n        {\n            // Initialize the flag to false.\n            nonNumberEntered = false;\n\n            // Determine whether the keystroke is a number from the top of the keyboard.\n            if (e.KeyCode &lt; Keys.D0 || e.KeyCode &gt; Keys.D9)\n            {\n                // Determine whether the keystroke is a number from the keypad.\n                if (e.KeyCode &lt; Keys.NumPad0 || e.KeyCode &gt; Keys.NumPad9)\n                {\n                    // Determine whether the keystroke is a backspace.\n                    if(e.KeyCode != Keys.Back)\n                    {\n                        // A non-numerical keystroke was pressed.\n                        // Set the flag to true and evaluate in KeyPress event.\n                        nonNumberEntered = true;\n                    }\n                }\n            }\n            //If shift key was pressed, it&#39;s not a number.\n            if (Control.ModifierKeys == Keys.Shift) {\n                nonNumberEntered = true;\n            }\n        }\n\n        // This event occurs after the KeyDown event and can be used to prevent\n        // characters from entering the control.\n        private void textBox1_KeyPress(object sender, System.Windows.Forms.KeyPressEventArgs e)\n        {\n            // Check for the flag being set in the KeyDown event.\n            if (nonNumberEntered == true)\n            {\n                // Stop the character from being entered into the control since it is non-numerical.\n                e.Handled = true;\n            }\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnKeyPress_System_Windows_Forms_KeyPressEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnKeyPress_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnKeyPress(KeyPressEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyPress\" data-linktype=\"relative-path\">KeyPress</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnKeyPress (System.Windows.Forms.KeyPressEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.keypresseventargs\" data-linktype=\"relative-path\">KeyPressEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.keypresseventargs\" data-linktype=\"relative-path\">KeyPressEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnKeyPress method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyPress\" data-linktype=\"relative-path\">KeyPress</a> event to prevent characters from entering the control.  </p>\n<pre><code class=\"lang-vb\" name=\"Control.KeyDown#1\">    &#39; Boolean flag used to determine when a character other than a number is entered.\n    Private nonNumberEntered As Boolean = False\n   \n   \n    &#39; Handle the KeyDown event to determine the type of character entered into the control.\n    Private Sub textBox1_KeyDown(sender As Object, e As System.Windows.Forms.KeyEventArgs) _\n         Handles textBox1.KeyDown\n        &#39; Initialize the flag to false.\n        nonNumberEntered = False\n      \n        &#39; Determine whether the keystroke is a number from the top of the keyboard.\n        If e.KeyCode &lt; Keys.D0 OrElse e.KeyCode &gt; Keys.D9 Then\n            &#39; Determine whether the keystroke is a number from the keypad.\n            If e.KeyCode &lt; Keys.NumPad0 OrElse e.KeyCode &gt; Keys.NumPad9 Then\n                &#39; Determine whether the keystroke is a backspace.\n                If e.KeyCode &lt;&gt; Keys.Back Then\n                    &#39; A non-numerical keystroke was pressed. \n                    &#39; Set the flag to true and evaluate in KeyPress event.\n                    nonNumberEntered = True\n                End If\n            End If\n        End If\n        &#39;If shift key was pressed, it&#39;s not a number.\n        If Control.ModifierKeys = Keys.Shift Then\n            nonNumberEntered = true\n        End If\n    End Sub &#39;textBox1_KeyDown\n   \n   \n    &#39; This event occurs after the KeyDown event and can be used \n    &#39; to prevent characters from entering the control.\n    Private Sub textBox1_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) _\n        Handles textBox1.KeyPress\n        &#39; Check for the flag being set in the KeyDown event.\n        If nonNumberEntered = True Then\n            &#39; Stop the character from being entered into the control since it is non-numerical.\n            e.Handled = True\n        End If\n    End Sub &#39;textBox1_KeyPress\n</code></pre><pre><code class=\"lang-cpp\" name=\"Control.KeyDown#1\">   // Boolean flag used to determine when a character other than a number is entered.\nprivate:\n   bool nonNumberEntered;\n\n   // Handle the KeyDown event to determine the type of character entered into the control.\n   void textBox1_KeyDown( Object^ /*sender*/, System::Windows::Forms::KeyEventArgs^ e )\n   {\n      // Initialize the flag to false.\n      nonNumberEntered = false;\n\n      // Determine whether the keystroke is a number from the top of the keyboard.\n      if ( e-&gt;KeyCode &lt; Keys::D0 || e-&gt;KeyCode &gt; Keys::D9 )\n      {\n         // Determine whether the keystroke is a number from the keypad.\n         if ( e-&gt;KeyCode &lt; Keys::NumPad0 || e-&gt;KeyCode &gt; Keys::NumPad9 )\n         {\n            // Determine whether the keystroke is a backspace.\n            if ( e-&gt;KeyCode != Keys::Back )\n            {\n               // A non-numerical keystroke was pressed.\n               // Set the flag to true and evaluate in KeyPress event.\n               nonNumberEntered = true;\n            }\n         }\n      }\n      //If shift key was pressed, it&#39;s not a number.\n      if (Control::ModifierKeys == Keys::Shift) {\n         nonNumberEntered = true;\n      }\n   }\n\n   // This event occurs after the KeyDown event and can be used to prevent\n   // characters from entering the control.\n   void textBox1_KeyPress( Object^ /*sender*/, System::Windows::Forms::KeyPressEventArgs^ e )\n   {\n      // Check for the flag being set in the KeyDown event.\n      if ( nonNumberEntered == true )\n      {         // Stop the character from being entered into the control since it is non-numerical.\n         e-&gt;Handled = true;\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"Control.KeyDown#1\">        // Boolean flag used to determine when a character other than a number is entered.\n        private bool nonNumberEntered = false;\n\n        // Handle the KeyDown event to determine the type of character entered into the control.\n        private void textBox1_KeyDown(object sender, System.Windows.Forms.KeyEventArgs e)\n        {\n            // Initialize the flag to false.\n            nonNumberEntered = false;\n\n            // Determine whether the keystroke is a number from the top of the keyboard.\n            if (e.KeyCode &lt; Keys.D0 || e.KeyCode &gt; Keys.D9)\n            {\n                // Determine whether the keystroke is a number from the keypad.\n                if (e.KeyCode &lt; Keys.NumPad0 || e.KeyCode &gt; Keys.NumPad9)\n                {\n                    // Determine whether the keystroke is a backspace.\n                    if(e.KeyCode != Keys.Back)\n                    {\n                        // A non-numerical keystroke was pressed.\n                        // Set the flag to true and evaluate in KeyPress event.\n                        nonNumberEntered = true;\n                    }\n                }\n            }\n            //If shift key was pressed, it&#39;s not a number.\n            if (Control.ModifierKeys == Keys.Shift) {\n                nonNumberEntered = true;\n            }\n        }\n\n        // This event occurs after the KeyDown event and can be used to prevent\n        // characters from entering the control.\n        private void textBox1_KeyPress(object sender, System.Windows.Forms.KeyPressEventArgs e)\n        {\n            // Check for the flag being set in the KeyDown event.\n            if (nonNumberEntered == true)\n            {\n                // Stop the character from being entered into the control since it is non-numerical.\n                e.Handled = true;\n            }\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnKeyUp_System_Windows_Forms_KeyEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnKeyUp_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnKeyUp(KeyEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyUp\" data-linktype=\"relative-path\">KeyUp</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnKeyUp (System.Windows.Forms.KeyEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnKeyUp method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyUp\" data-linktype=\"relative-path\">KeyUp</a> event with the <a class=\"xref\" href=\"system.windows.forms.help\" data-linktype=\"relative-path\">Help</a> class to display pop-up style help to the user.  </p>\n<pre><code class=\"lang-cpp\" name=\"Control.KeyUp#1\">   // This example demonstrates how to use the KeyUp event with the Help class to display\n   // pop-up style help to the user of the application. When the user presses F1, the Help\n   // class displays a pop-up window, similar to a ToolTip, near the control. This example assumes\n   // that a TextBox control, named textBox1, has been added to the form and its KeyUp\n   // event has been connected to this event handler method.\nprivate:\n   void textBox1_KeyUp( Object^ /*sender*/, System::Windows::Forms::KeyEventArgs^ e )\n   {\n      \n      // Determine whether the key entered is the F1 key. Display help if it is.\n      if ( e-&gt;KeyCode == Keys::F1 )\n      {\n         \n         // Display a pop-up help topic to assist the user.\n         Help::ShowPopup( textBox1, &quot;Enter your first name&quot;, Point(textBox1-&gt;Right,this-&gt;textBox1-&gt;Bottom) );\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Control.KeyUp#1\">    &#39; This example demonstrates how to use the KeyUp event with the Help class to display\n    &#39; pop-up style help to the user of the application. When the user presses F1, the Help\n    &#39; class displays a pop-up window, similar to a ToolTip, near the control. This example assumes\n    &#39; that a TextBox control, named textBox1, has been added to the form and its KeyUp\n    &#39; event has been contected to this event handler method.\n    Private Sub textBox1_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles textBox1.KeyUp\n        &#39; Determine whether the key entered is the F1 key. Display help if it is.\n        If e.KeyCode = Keys.F1 Then\n            &#39; Display a pop-up help topic to assist the user.\n            Help.ShowPopup(textBox1, &quot;Enter your first name&quot;, New Point(textBox1.Right, Me.textBox1.Bottom))\n        End If\n    End Sub &#39;textBox1_KeyUp\n</code></pre><pre><code class=\"lang-cs\" name=\"Control.KeyUp#1\">        // This example demonstrates how to use the KeyUp event with the Help class to display\n        // pop-up style help to the user of the application. When the user presses F1, the Help\n        // class displays a pop-up window, similar to a ToolTip, near the control. This example assumes\n        // that a TextBox control, named textBox1, has been added to the form and its KeyUp\n        // event has been contected to this event handler method.\n        private void textBox1_KeyUp(object sender, System.Windows.Forms.KeyEventArgs e)\n        {\n            // Determine whether the key entered is the F1 key. Display help if it is.\n            if(e.KeyCode == Keys.F1)\n            {\n                // Display a pop-up help topic to assist the user.\n                Help.ShowPopup(textBox1, &quot;Enter your first name&quot;, new Point(textBox1.Right, this.textBox1.Bottom));\n            }\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnLayout_System_Windows_Forms_LayoutEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnLayout_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnLayout(LayoutEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Layout\" data-linktype=\"relative-path\">Layout</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnLayout (System.Windows.Forms.LayoutEventArgs levent);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>levent</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.layouteventargs\" data-linktype=\"relative-path\">LayoutEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.layouteventargs\" data-linktype=\"relative-path\">LayoutEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnLayout method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnLeave_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnLeave_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnLeave(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Leave\" data-linktype=\"relative-path\">Leave</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnLeave (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnLeave method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Leave\" data-linktype=\"relative-path\">Leave</a> event to reset a control to its former state.  </p>\n<pre><code class=\"lang-cs\" name=\"Control.Enter#1\">        private void textBox1_Enter(object sender, System.EventArgs e)\n        {\n            // If the TextBox contains text, change its foreground and background colors.\n            if (textBox1.Text != String.Empty)\n            {\n                textBox1.ForeColor = Color.Red;\n                textBox1.BackColor = Color.Black;\n                // Move the selection pointer to the end of the text of the control.\n                textBox1.Select(textBox1.Text.Length, 0);\n            }\n        }\n\n        private void textBox1_Leave(object sender, System.EventArgs e)\n        {\n            // Reset the colors and selection of the TextBox after focus is lost.\n            textBox1.ForeColor = Color.Black;\n            textBox1.BackColor = Color.White;\n            textBox1.Select(0,0);\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Control.Enter#1\">private:\n   void textBox1_Enter( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // If the TextBox contains text, change its foreground and background colors.\n      if ( textBox1-&gt;Text != String::Empty )\n      {\n         textBox1-&gt;ForeColor = Color::Red;\n         textBox1-&gt;BackColor = Color::Black;\n\n         // Move the selection pointer to the end of the text of the control.\n         textBox1-&gt;Select(textBox1-&gt;Text-&gt;Length,0);\n      }\n   }\n\n   void textBox1_Leave( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // Reset the colors and selection of the TextBox after focus is lost.\n      textBox1-&gt;ForeColor = Color::Black;\n      textBox1-&gt;BackColor = Color::White;\n      textBox1-&gt;Select(0,0);\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Control.Enter#1\">    Private Sub textBox1_Enter(sender As Object, e As System.EventArgs) Handles textBox1.Enter\n        &#39; If the TextBox contains text, change its foreground and background colors.\n        If textBox1.Text &lt;&gt; [String].Empty Then\n            textBox1.ForeColor = Color.Red\n            textBox1.BackColor = Color.Black\n            &#39; Move the selection pointer to the end of the text of the control.\n            textBox1.Select(textBox1.Text.Length, 0)\n        End If\n    End Sub &#39;textBox1_Enter\n   \n   \n    Private Sub textBox1_Leave(sender As Object, e As System.EventArgs) Handles textBox1.Leave\n        &#39; Reset the colors and selection of the TextBox after focus is lost.\n        textBox1.ForeColor = Color.Black\n        textBox1.BackColor = Color.White\n        textBox1.Select(0, 0)\n    End Sub &#39;textBox1_Leave\nEnd Class &#39;Form1 \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnLocationChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnLocationChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnLocationChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_LocationChanged\" data-linktype=\"relative-path\">LocationChanged</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnLocationChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnLocationChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example is an event-raising method that is executed when the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property value changes. The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class has several methods with the name pattern <code>On</code><em>PropertyName</em><code>Changed</code> that raise the corresponding <em>PropertyName</em> <code>Changed</code> event when the <em>PropertyName</em> value changes (<em>PropertyName</em> represents the name of the corresponding property).  </p>\n<p> The following code example changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> of a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> derived class displaying currency data. The example converts the text to a decimal number and changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Red_\" data-linktype=\"relative-path\">Red</a> if the number is negative and to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Black_\" data-linktype=\"relative-path\">Black</a> if the number is positive. This example requires that you have a class that derives from the <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">   protected:\n      virtual void OnTextChanged( System::EventArgs^ e ) override\n      {\n         try\n         {\n            // Convert the text to a Double and determine\n            // if it is a negative number.\n            if ( Double::Parse( this-&gt;Text ) &lt; 0 )\n            {\n               // If the number is negative, display it in Red.\n               this-&gt;ForeColor = Color::Red;\n            }\n            else\n            {\n               // If the number is not negative, display it in Black.\n               this-&gt;ForeColor = Color::Black;\n            }\n         }\n         catch ( Exception^ ) \n         {\n            // If there is an error, display the\n            // text using the system colors.\n            this-&gt;ForeColor = SystemColors::ControlText;\n         }\n\n         TextBox::OnTextChanged( e );\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">protected override void OnTextChanged(System.EventArgs e)\n{\n   try\n   {\n      // Convert the text to a Double and determine\n      // if it is a negative number.\n      if(double.Parse(this.Text) &lt; 0)\n      {\n         // If the number is negative, display it in Red.\n         this.ForeColor = Color.Red;\n      }\n      else\n      {\n         // If the number is not negative, display it in Black.\n         this.ForeColor = Color.Black;\n      }\n   }\n   catch\n   {\n      // If there is an error, display the \n      // text using the system colors.\n      this.ForeColor = SystemColors.ControlText;\n   }\n   \n   base.OnTextChanged(e);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">Protected Overrides Sub OnTextChanged(e As System.EventArgs)\n   Try\n      &#39; Convert the text to a Double and determine\n      &#39; if it is a negative number.\n      If Double.Parse(Me.Text) &lt; 0 Then\n         &#39; If the number is negative, display it in Red.\n         Me.ForeColor = Color.Red\n      Else\n         &#39; If the number is not negative, display it in Black.\n         Me.ForeColor = Color.Black\n      End If\n   Catch\n      &#39; If there is an error, display the\n      &#39; text using the system colors.\n      Me.ForeColor = SystemColors.ControlText\n   End Try\n\n   MyBase.OnTextChanged(e)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnLostFocus_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnLostFocus_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnLostFocus(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_LostFocus\" data-linktype=\"relative-path\">LostFocus</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnLostFocus (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnLostFocus method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnMarginChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnMarginChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnMarginChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MarginChanged\" data-linktype=\"relative-path\">MarginChanged</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnMarginChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnMarginChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnMouseCaptureChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnMouseCaptureChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnMouseCaptureChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseCaptureChanged\" data-linktype=\"relative-path\">MouseCaptureChanged</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnMouseCaptureChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnMouseCaptureChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnMouseClick_System_Windows_Forms_MouseEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnMouseClick_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnMouseClick(MouseEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseClick\" data-linktype=\"relative-path\">MouseClick</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnMouseClick (System.Windows.Forms.MouseEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.windows.forms.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnMouseClick method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnMouseDoubleClick_System_Windows_Forms_MouseEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnMouseDoubleClick_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnMouseDoubleClick(MouseEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDoubleClick\" data-linktype=\"relative-path\">MouseDoubleClick</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnMouseDoubleClick (System.Windows.Forms.MouseEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.windows.forms.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnMouseDoubleClick method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnMouseDown_System_Windows_Forms_MouseEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnMouseDown_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnMouseDown(MouseEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnMouseDown (System.Windows.Forms.MouseEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnMouseDown method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnMouseEnter_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnMouseEnter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnMouseEnter(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseEnter\" data-linktype=\"relative-path\">MouseEnter</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnMouseEnter (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnMouseEnter method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnMouseHover_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnMouseHover_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnMouseHover(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseHover\" data-linktype=\"relative-path\">MouseHover</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnMouseHover (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnMouseHover method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to override the OnMouseHover and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnMouseMove_\" data-linktype=\"relative-path\">OnMouseMove</a> methods in a derived class. To run the example, paste the following code in a new form and paste this class, forming the same file, after the form. Add a button of type <code>FunButton</code> to the form.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.ControlDefaultProperties#2\">// To use this example create a new form and paste this class \n// forming the same file, after the form class in the same file.  \n// Add a button of type FunButton to the form. \npublic ref class FunButton: public Button\n{\nprotected:\n   virtual void OnMouseHover( System::EventArgs^ e ) override\n   {\n      \n      // Get the font size in Points, add one to the\n      // size, and reset the button&#39;s font to the larger\n      // size.\n      float fontSize = Font-&gt;SizeInPoints;\n      fontSize += 1;\n      System::Drawing::Size buttonSize = Size;\n      this-&gt;Font = gcnew System::Drawing::Font( Font-&gt;FontFamily,fontSize,Font-&gt;Style );\n      \n      // Increase the size width and height of the button \n      // by 5 points each.\n      Size = System::Drawing::Size( Size.Width + 5, Size.Height + 5 );\n      \n      // Call myBase.OnMouseHover to activate the delegate.\n      Button::OnMouseHover( e );\n   }\n\n   virtual void OnMouseMove( MouseEventArgs^ e ) override\n   {\n      \n      // Make the cursor the Hand cursor when the mouse moves \n      // over the button.\n      Cursor = Cursors::Hand;\n      \n      // Call MyBase.OnMouseMove to activate the delegate.\n      Button::OnMouseMove( e );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.ControlDefaultProperties#2\">public class FunButton:\n\tButton\n\n{\n\tprotected override void OnMouseHover(System.EventArgs e)\n\t{\n\n\t\t// Get the font size in Points, add one to the\n\t\t// size, and reset the button&#39;s font to the larger\n\t\t// size.\n\t\tfloat fontSize = Font.SizeInPoints;\n\t\tfontSize += 1;\n\t\tSystem.Drawing.Size buttonSize = Size;\n\t\tthis.Font = new System.Drawing.Font(\n\t\t\tFont.FontFamily, fontSize, Font.Style);\n\n\t\t// Increase the size width and height of the button \n\t\t// by 5 points each.\n\t\tSize = new System.Drawing.Size(Size.Width+5, Size.Height+5);\n\n\t\t// Call myBase.OnMouseHover to activate the delegate.\n\t\tbase.OnMouseHover(e);\n\t}\n\n\tprotected override void OnMouseMove(MouseEventArgs e)\n\t{\n\n\t\t// Make the cursor the Hand cursor when the mouse moves \n\t\t// over the button.\n\t\tCursor = Cursors.Hand;\n\n\t\t// Call MyBase.OnMouseMove to activate the delegate.\n\t\tbase.OnMouseMove(e);\n\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.ControlDefaultProperties#2\">Public Class FunButton\n    Inherits Button\n\n    Protected Overrides Sub OnMouseHover(ByVal e As System.EventArgs)\n\n        &#39; Get the font size in Points, add one to the\n        &#39; size, and reset the button&#39;s font to the larger\n        &#39; size.\n        Dim fontSize As Single = Font.SizeInPoints\n        fontSize += 1\n        Dim buttonSize As System.Drawing.Size = Size\n        Me.Font = New System.Drawing.Font _\n            (Font.FontFamily, fontSize, Font.Style)\n\n        &#39; Increase the size width and height of the button \n        &#39; by 5 points each.\n        Size = New System.Drawing.Size _\n            (Size.Width + 5, Size.Height + 5)\n\n        &#39; Call myBase.OnMouseHover to activate the delegate.\n        MyBase.OnMouseHover(e)\n    End Sub\n\n    Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)\n\n        &#39; Make the cursor the Hand cursor when the mouse moves \n        &#39; over the button.\n        Cursor = Cursors.Hand\n\n        &#39; Call MyBase.OnMouseMove to activate the delegate.\n        MyBase.OnMouseMove(e)\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnMouseLeave_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnMouseLeave_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnMouseLeave(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseLeave\" data-linktype=\"relative-path\">MouseLeave</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnMouseLeave (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnMouseLeave method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnMouseMove_System_Windows_Forms_MouseEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnMouseMove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnMouseMove(MouseEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseMove\" data-linktype=\"relative-path\">MouseMove</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnMouseMove (System.Windows.Forms.MouseEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnMouseMove method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to override the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnMouseHover_\" data-linktype=\"relative-path\">OnMouseHover</a> and OnMouseMove methods in a derived class. To run the example, paste the following code in a new form and paste this class, forming the same file, after the form. Add a button of type <code>FunButton</code> to the form.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.ControlDefaultProperties#2\">// To use this example create a new form and paste this class \n// forming the same file, after the form class in the same file.  \n// Add a button of type FunButton to the form. \npublic ref class FunButton: public Button\n{\nprotected:\n   virtual void OnMouseHover( System::EventArgs^ e ) override\n   {\n      \n      // Get the font size in Points, add one to the\n      // size, and reset the button&#39;s font to the larger\n      // size.\n      float fontSize = Font-&gt;SizeInPoints;\n      fontSize += 1;\n      System::Drawing::Size buttonSize = Size;\n      this-&gt;Font = gcnew System::Drawing::Font( Font-&gt;FontFamily,fontSize,Font-&gt;Style );\n      \n      // Increase the size width and height of the button \n      // by 5 points each.\n      Size = System::Drawing::Size( Size.Width + 5, Size.Height + 5 );\n      \n      // Call myBase.OnMouseHover to activate the delegate.\n      Button::OnMouseHover( e );\n   }\n\n   virtual void OnMouseMove( MouseEventArgs^ e ) override\n   {\n      \n      // Make the cursor the Hand cursor when the mouse moves \n      // over the button.\n      Cursor = Cursors::Hand;\n      \n      // Call MyBase.OnMouseMove to activate the delegate.\n      Button::OnMouseMove( e );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.ControlDefaultProperties#2\">public class FunButton:\n\tButton\n\n{\n\tprotected override void OnMouseHover(System.EventArgs e)\n\t{\n\n\t\t// Get the font size in Points, add one to the\n\t\t// size, and reset the button&#39;s font to the larger\n\t\t// size.\n\t\tfloat fontSize = Font.SizeInPoints;\n\t\tfontSize += 1;\n\t\tSystem.Drawing.Size buttonSize = Size;\n\t\tthis.Font = new System.Drawing.Font(\n\t\t\tFont.FontFamily, fontSize, Font.Style);\n\n\t\t// Increase the size width and height of the button \n\t\t// by 5 points each.\n\t\tSize = new System.Drawing.Size(Size.Width+5, Size.Height+5);\n\n\t\t// Call myBase.OnMouseHover to activate the delegate.\n\t\tbase.OnMouseHover(e);\n\t}\n\n\tprotected override void OnMouseMove(MouseEventArgs e)\n\t{\n\n\t\t// Make the cursor the Hand cursor when the mouse moves \n\t\t// over the button.\n\t\tCursor = Cursors.Hand;\n\n\t\t// Call MyBase.OnMouseMove to activate the delegate.\n\t\tbase.OnMouseMove(e);\n\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.ControlDefaultProperties#2\">Public Class FunButton\n    Inherits Button\n\n    Protected Overrides Sub OnMouseHover(ByVal e As System.EventArgs)\n\n        &#39; Get the font size in Points, add one to the\n        &#39; size, and reset the button&#39;s font to the larger\n        &#39; size.\n        Dim fontSize As Single = Font.SizeInPoints\n        fontSize += 1\n        Dim buttonSize As System.Drawing.Size = Size\n        Me.Font = New System.Drawing.Font _\n            (Font.FontFamily, fontSize, Font.Style)\n\n        &#39; Increase the size width and height of the button \n        &#39; by 5 points each.\n        Size = New System.Drawing.Size _\n            (Size.Width + 5, Size.Height + 5)\n\n        &#39; Call myBase.OnMouseHover to activate the delegate.\n        MyBase.OnMouseHover(e)\n    End Sub\n\n    Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)\n\n        &#39; Make the cursor the Hand cursor when the mouse moves \n        &#39; over the button.\n        Cursor = Cursors.Hand\n\n        &#39; Call MyBase.OnMouseMove to activate the delegate.\n        MyBase.OnMouseMove(e)\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnMouseUp_System_Windows_Forms_MouseEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnMouseUp_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnMouseUp(MouseEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseUp\" data-linktype=\"relative-path\">MouseUp</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnMouseUp (System.Windows.Forms.MouseEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnMouseUp method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnMouseWheel_System_Windows_Forms_MouseEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnMouseWheel_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnMouseWheel(MouseEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseWheel\" data-linktype=\"relative-path\">MouseWheel</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnMouseWheel (System.Windows.Forms.MouseEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnMouseWheel method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnMove_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnMove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnMove(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Move\" data-linktype=\"relative-path\">Move</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnMove (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnMove method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Move\" data-linktype=\"relative-path\">Move</a> event to display the location of the form in screen coordinates on the caption bar of the form.  </p>\n<pre><code class=\"lang-cpp\" name=\"Control.Move#1\">   // The following example displays the location of the form in screen coordinates\n   // on the caption bar of the form.\nprivate:\n   void Form1_Move( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      this-&gt;Text = String::Format( &quot;Form screen position = {0}&quot;, this-&gt;Location );\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Control.Move#1\">    &#39; The following example displays the location of the form in screen coordinates\n    &#39; on the caption bar of the form.\n    Private Sub Form1_Move(sender As Object, e As System.EventArgs) Handles MyBase.Move\n        Me.Text = &quot;Form screen position = &quot; + Me.Location.ToString()\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Control.Move#1\">        // The following example displays the location of the form in screen coordinates\n        // on the caption bar of the form.\n        private void Form1_Move(object sender, System.EventArgs e)\n        {\n            this.Text = &quot;Form screen position = &quot; + this.Location.ToString();\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnNotifyMessage_System_Windows_Forms_Message_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnNotifyMessage_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnNotifyMessage(Message)</div>        \r\n          </div>\r\n    \r\n            <p>Notifies the control of Windows messages.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnNotifyMessage (System.Windows.Forms.Message m);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>m</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.message\" data-linktype=\"relative-path\">Message</a> that represents the Windows message.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The OnNotifyMessage method is called if the control&#39;s <code>EnableNotifyMessage</code> style bit is set in <a class=\"xref\" href=\"system.windows.forms.controlstyles\" data-linktype=\"relative-path\">ControlStyles</a>. The <code>EnableNotifyMessage</code> style in <a class=\"xref\" href=\"system.windows.forms.controlstyles\" data-linktype=\"relative-path\">ControlStyles</a> enables the control to be notified when the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_WndProc_\" data-linktype=\"relative-path\">WndProc</a> method receives a Windows message. With this method, semi-trusted controls can listen for Windows messages without enabling them to modify the message.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnPaddingChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnPaddingChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPaddingChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_PaddingChanged\" data-linktype=\"relative-path\">PaddingChanged</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPaddingChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnPaddingChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnPaint_System_Windows_Forms_PaintEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnPaint_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPaint(PaintEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Paint\" data-linktype=\"relative-path\">Paint</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPaint (System.Windows.Forms.PaintEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.painteventargs\" data-linktype=\"relative-path\">PaintEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.painteventargs\" data-linktype=\"relative-path\">PaintEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnPaint method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example enables the user to drag an image or image file onto the form, and have it be displayed at the point on which it is dropped. The OnPaint method is overridden to repaint the image each time the form is painted; otherwise the image would only persist until the next repainting. The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragEnter\" data-linktype=\"relative-path\">DragEnter</a> event-handling method determines the type of data being dragged into the form and provides the appropriate feedback. The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragDrop\" data-linktype=\"relative-path\">DragDrop</a> event-handling method displays the image on the form, if an <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> can be created from the data. Because the <a class=\"xref\" href=\"system.windows.forms.drageventargs#System_Windows_Forms_DragEventArgs_X_\" data-linktype=\"relative-path\">X</a> and <a class=\"xref\" href=\"system.windows.forms.drageventargs#System_Windows_Forms_DragEventArgs_Y_\" data-linktype=\"relative-path\">Y</a> values are screen coordinates, the example uses the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_PointToClient_\" data-linktype=\"relative-path\">PointToClient</a> method to convert them to client coordinates.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control.DragOperations#1\">private Image picture;\nprivate Point pictureLocation;\n\npublic Form1()\n{\n   // Enable drag-and-drop operations and \n   // add handlers for DragEnter and DragDrop.\n   this.AllowDrop = true;\n   this.DragDrop += new DragEventHandler(this.Form1_DragDrop);\n   this.DragEnter += new DragEventHandler(this.Form1_DragEnter);\n}\n\nprotected override void OnPaint(PaintEventArgs e)\n{\n   // If there is an image and it has a location, \n   // paint it when the Form is repainted.\n   base.OnPaint(e);\n   if(this.picture != null &amp;&amp; this.pictureLocation != Point.Empty)\n   {\n      e.Graphics.DrawImage(this.picture, this.pictureLocation);\n   }\n}\n\nprivate void Form1_DragDrop(object sender, DragEventArgs e)\n{\n   // Handle FileDrop data.\n   if(e.Data.GetDataPresent(DataFormats.FileDrop) )\n   {\n      // Assign the file names to a string array, in \n      // case the user has selected multiple files.\n      string[] files = (string[])e.Data.GetData(DataFormats.FileDrop);\n      try\n      {\n         // Assign the first image to the picture variable.\n         this.picture = Image.FromFile(files[0]);\n         // Set the picture location equal to the drop point.\n         this.pictureLocation = this.PointToClient(new Point(e.X, e.Y) );\n      }\n      catch(Exception ex)\n      {\n         MessageBox.Show(ex.Message);\n         return;\n      }\n   }\n\n   // Handle Bitmap data.\n   if(e.Data.GetDataPresent(DataFormats.Bitmap) )\n   {\n      try\n      {\n         // Create an Image and assign it to the picture variable.\n         this.picture = (Image)e.Data.GetData(DataFormats.Bitmap);\n         // Set the picture location equal to the drop point.\n         this.pictureLocation = this.PointToClient(new Point(e.X, e.Y) );\n      }\n      catch(Exception ex)\n      {\n         MessageBox.Show(ex.Message);\n         return;\n      }\n   }\n   // Force the form to be redrawn with the image.\n   this.Invalidate();\n}\n\nprivate void Form1_DragEnter(object sender, DragEventArgs e)\n{\n   // If the data is a file or a bitmap, display the copy cursor.\n   if (e.Data.GetDataPresent(DataFormats.Bitmap) || \n      e.Data.GetDataPresent(DataFormats.FileDrop) ) \n   {\n      e.Effect = DragDropEffects.Copy;\n   }\n   else\n   {\n      e.Effect = DragDropEffects.None;\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control.DragOperations#1\">   private:\n      Image^ picture;\n      Point pictureLocation;\n\n   public:\n      Form1()\n      {\n         \n         // Enable drag-and-drop operations and\n         // add handlers for DragEnter and DragDrop.\n         this-&gt;AllowDrop = true;\n         this-&gt;DragDrop += gcnew DragEventHandler( this, &amp;Form1::Form1_DragDrop );\n         this-&gt;DragEnter += gcnew DragEventHandler( this, &amp;Form1::Form1_DragEnter );\n      }\n\n   protected:\n      virtual void OnPaint( PaintEventArgs^ e ) override\n      {\n         \n         // If there is an image and it has a location,\n         // paint it when the Form is repainted.\n         Form::OnPaint( e );\n         if ( this-&gt;picture != nullptr &amp;&amp; this-&gt;pictureLocation != Point::Empty )\n         {\n            e-&gt;Graphics-&gt;DrawImage( this-&gt;picture, this-&gt;pictureLocation );\n         }\n      }\n\n   private:\n      void Form1_DragDrop( Object^ /*sender*/, DragEventArgs^ e )\n      {\n         \n         // Handle FileDrop data.\n         if ( e-&gt;Data-&gt;GetDataPresent( DataFormats::FileDrop ) )\n         {\n            // Assign the file names to a String* array, in\n            // case the user has selected multiple files.\n            array&lt;String^&gt;^files = (array&lt;String^&gt;^)e-&gt;Data-&gt;GetData( DataFormats::FileDrop );\n            try\n            {\n               // Assign the first image to the picture variable.\n               this-&gt;picture = Image::FromFile( files[ 0 ] );\n               \n               // Set the picture location equal to the drop point.\n               this-&gt;pictureLocation = this-&gt;PointToClient( Point(e-&gt;X,e-&gt;Y) );\n            }\n            catch ( Exception^ ex ) \n            {\n               MessageBox::Show( ex-&gt;Message );\n               return;\n            }\n\n         }\n         \n         // Handle Bitmap data.\n         if ( e-&gt;Data-&gt;GetDataPresent( DataFormats::Bitmap ) )\n         {\n            try\n            {\n               // Create an Image and assign it to the picture variable.\n               this-&gt;picture = dynamic_cast&lt;Image^&gt;(e-&gt;Data-&gt;GetData( DataFormats::Bitmap ));\n\n               // Set the picture location equal to the drop point.\n               this-&gt;pictureLocation = this-&gt;PointToClient( Point(e-&gt;X,e-&gt;Y) );\n            }\n            catch ( Exception^ ex ) \n            {\n               MessageBox::Show( ex-&gt;Message );\n               return;\n            }\n         }\n         \n         // Force the form to be redrawn with the image.\n         this-&gt;Invalidate();\n      }\n\n      void Form1_DragEnter( Object^ /*sender*/, DragEventArgs^ e )\n      {\n         // If the data is a file or a bitmap, display the copy cursor.\n         if ( e-&gt;Data-&gt;GetDataPresent( DataFormats::Bitmap ) || e-&gt;Data-&gt;GetDataPresent( DataFormats::FileDrop ) )\n         {\n            e-&gt;Effect = DragDropEffects::Copy;\n         }\n         else\n         {\n            e-&gt;Effect = DragDropEffects::None;\n         }\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control.DragOperations#1\">Private picture As Image\nPrivate pictureLocation As Point\n\nPublic Sub New()\n   &#39; Enable drag-and-drop operations.\n   Me.AllowDrop = True\nEnd Sub\n\nProtected Overrides Sub OnPaint(ByVal e As PaintEventArgs)\n   MyBase.OnPaint(e)\n\n   &#39; If there is an image and it has a location, \n   &#39; paint it when the Form is repainted.\n   If (Me.picture IsNot Nothing) And _\n     Not (Me.pictureLocation.Equals(Point.Empty)) Then\n      e.Graphics.DrawImage(Me.picture, Me.pictureLocation)\n   End If\nEnd Sub\n\nPrivate Sub Form1_DragDrop(ByVal sender As Object, _\n  ByVal e As DragEventArgs) Handles MyBase.DragDrop\n   &#39; Handle FileDrop data.\n   If e.Data.GetDataPresent(DataFormats.FileDrop) Then\n      &#39; Assign the file names to a string array, in \n      &#39; case the user has selected multiple files.\n      Dim files As String() = CType(e.Data.GetData(DataFormats.FileDrop), String())\n      Try\n         &#39; Assign the first image to the &#39;picture&#39; variable.\n         Me.picture = Image.FromFile(files(0))\n         &#39; Set the picture location equal to the drop point.\n         Me.pictureLocation = Me.PointToClient(New Point(e.X, e.Y))\n      Catch ex As Exception\n         MessageBox.Show(ex.Message)\n         Return\n      End Try\n   End If\n\n   &#39; Handle Bitmap data.\n   If e.Data.GetDataPresent(DataFormats.Bitmap) Then\n      Try\n         &#39; Create an Image and assign it to the picture variable.\n         Me.picture = CType(e.Data.GetData(DataFormats.Bitmap), Image)\n         &#39; Set the picture location equal to the drop point.\n         Me.pictureLocation = Me.PointToClient(New Point(e.X, e.Y))\n      Catch ex As Exception\n         MessageBox.Show(ex.Message)\n         Return\n      End Try\n   End If\n\n   &#39; Force the form to be redrawn with the image.\n   Me.Invalidate()\nEnd Sub\n\nPrivate Sub Form1_DragEnter(ByVal sender As Object, _\n  ByVal e As DragEventArgs) Handles MyBase.DragEnter\n   &#39; If the data is a file or a bitmap, display the copy cursor.\n   If e.Data.GetDataPresent(DataFormats.Bitmap) _\n      Or e.Data.GetDataPresent(DataFormats.FileDrop) Then\n      e.Effect = DragDropEffects.Copy\n   Else\n      e.Effect = DragDropEffects.None\n   End If\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Control.Paint#1\">        // This example creates a PictureBox control on the form and draws to it.\n        // This example assumes that the Form_Load event handler method is\n        // connected to the Load event of the form.\n\n        private PictureBox pictureBox1 = new PictureBox();\n        private void Form1_Load(object sender, System.EventArgs e)\n        {\n            // Dock the PictureBox to the form and set its background to white.\n            pictureBox1.Dock = DockStyle.Fill;\n            pictureBox1.BackColor = Color.White;\n            // Connect the Paint event of the PictureBox to the event handler method.\n            pictureBox1.Paint += new System.Windows.Forms.PaintEventHandler(this.pictureBox1_Paint);\n\n            // Add the PictureBox control to the Form.\n            this.Controls.Add(pictureBox1);\n        }\n\n        private void pictureBox1_Paint(object sender, System.Windows.Forms.PaintEventArgs e)\n        {\n            // Create a local version of the graphics object for the PictureBox.\n            Graphics g = e.Graphics;\n\n            // Draw a string on the PictureBox.\n            g.DrawString(&quot;This is a diagonal line drawn on the control&quot;,\n                new Font(&quot;Arial&quot;,10), System.Drawing.Brushes.Blue, new Point(30,30));\n            // Draw a line in the PictureBox.\n            g.DrawLine(System.Drawing.Pens.Red, pictureBox1.Left, pictureBox1.Top,\n                pictureBox1.Right, pictureBox1.Bottom);\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Control.Paint#1\">   // This example creates a PictureBox control on the form and draws to it.\n   // This example assumes that the Form_Load event handler method is\n   // connected to the Load event of the form.\nprivate:\n   PictureBox^ pictureBox1;\n   void Form1_Load( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      pictureBox1 = gcnew PictureBox;\n\n      // Dock the PictureBox to the form and set its background to white.\n      pictureBox1-&gt;Dock = DockStyle::Fill;\n      pictureBox1-&gt;BackColor = Color::White;\n\n      // Connect the Paint event of the PictureBox to the event handler method.\n      pictureBox1-&gt;Paint += gcnew System::Windows::Forms::PaintEventHandler( this, &amp;Form1::pictureBox1_Paint );\n\n      // Add the PictureBox control to the Form.\n      this-&gt;Controls-&gt;Add( pictureBox1 );\n   }\n\n   void pictureBox1_Paint( Object^ /*sender*/, System::Windows::Forms::PaintEventArgs^ e )\n   {\n      // Create a local version of the graphics object for the PictureBox.\n      Graphics^ g = e-&gt;Graphics;\n\n      // Draw a string on the PictureBox.\n      g-&gt;DrawString( &quot;This is a diagonal line drawn on the control&quot;,\n         gcnew System::Drawing::Font( &quot;Arial&quot;,10 ), System::Drawing::Brushes::Blue, Point(30,30) );\n\n      // Draw a line in the PictureBox.\n      g-&gt;DrawLine( System::Drawing::Pens::Red, pictureBox1-&gt;Left, pictureBox1-&gt;Top,\n         pictureBox1-&gt;Right, pictureBox1-&gt;Bottom );\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Control.Paint#1\">    &#39; This example creates a PictureBox control on the form and draws to it. \n    &#39; This example assumes that the Form_Load event handler method is connected \n    &#39; to the Load event of the form.\n    Private pictureBox1 As New PictureBox()\n\n    Private Sub Form1_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Load\n        &#39; Dock the PictureBox to the form and set its background to white.\n        pictureBox1.Dock = DockStyle.Fill\n        pictureBox1.BackColor = Color.White\n        &#39; Connect the Paint event of the PictureBox to the event handler method.\n        AddHandler pictureBox1.Paint, AddressOf Me.pictureBox1_Paint\n\n        &#39; Add the PictureBox control to the Form.\n        Me.Controls.Add(pictureBox1)\n    End Sub &#39;Form1_Load\n\n\n    Private Sub pictureBox1_Paint(ByVal sender As Object, ByVal e As System.Windows.Forms.PaintEventArgs)\n        &#39; Create a local version of the graphics object for the PictureBox.\n        Dim g As Graphics = e.Graphics\n\n        &#39; Draw a string on the PictureBox.\n        g.DrawString(&quot;This is a diagonal line drawn on the control&quot;, _\n            New Font(&quot;Arial&quot;, 10), Brushes.Red, New PointF(30.0F, 30.0F))\n        &#39; Draw a line in the PictureBox.\n        g.DrawLine(System.Drawing.Pens.Red, pictureBox1.Left, _ \n            pictureBox1.Top, pictureBox1.Right, pictureBox1.Bottom)\n    End Sub &#39;pictureBox1_Paint\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnPaintBackground_System_Windows_Forms_PaintEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnPaintBackground_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPaintBackground(PaintEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Paints the background of the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPaintBackground (System.Windows.Forms.PaintEventArgs pevent);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pevent</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.painteventargs\" data-linktype=\"relative-path\">PaintEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.painteventargs\" data-linktype=\"relative-path\">PaintEventArgs</a> that contains information about the control to paint.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The OnPaintBackground method enables derived classes to handle Windows background erase requests.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnParentBackColorChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnParentBackColorChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnParentBackColorChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BackColorChanged\" data-linktype=\"relative-path\">BackColorChanged</a> event when the <span class=\"xref\">stem.Windows.Forms.Control.BackColor*</span> property value of the control&#39;s container changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnParentBackColorChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnParentBackColorChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example is an event-raising method that is executed when the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property value changes. The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class has several methods with the name pattern <code>On</code><em>PropertyName</em><code>Changed</code> that raise the corresponding <em>PropertyName</em><code>Changed</code> event when the <em>PropertyName</em> value changes (<em>PropertyName</em> represents the name of the corresponding property).  </p>\n<p> The following code example changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> of a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> derived class displaying currency data. The example converts the text to a decimal number and changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Red_\" data-linktype=\"relative-path\">Red</a> if the number is negative and to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Black_\" data-linktype=\"relative-path\">Black</a> if the number is positive. This example requires that you have a class that derives from the <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">   protected:\n      virtual void OnTextChanged( System::EventArgs^ e ) override\n      {\n         try\n         {\n            // Convert the text to a Double and determine\n            // if it is a negative number.\n            if ( Double::Parse( this-&gt;Text ) &lt; 0 )\n            {\n               // If the number is negative, display it in Red.\n               this-&gt;ForeColor = Color::Red;\n            }\n            else\n            {\n               // If the number is not negative, display it in Black.\n               this-&gt;ForeColor = Color::Black;\n            }\n         }\n         catch ( Exception^ ) \n         {\n            // If there is an error, display the\n            // text using the system colors.\n            this-&gt;ForeColor = SystemColors::ControlText;\n         }\n\n         TextBox::OnTextChanged( e );\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">protected override void OnTextChanged(System.EventArgs e)\n{\n   try\n   {\n      // Convert the text to a Double and determine\n      // if it is a negative number.\n      if(double.Parse(this.Text) &lt; 0)\n      {\n         // If the number is negative, display it in Red.\n         this.ForeColor = Color.Red;\n      }\n      else\n      {\n         // If the number is not negative, display it in Black.\n         this.ForeColor = Color.Black;\n      }\n   }\n   catch\n   {\n      // If there is an error, display the \n      // text using the system colors.\n      this.ForeColor = SystemColors.ControlText;\n   }\n   \n   base.OnTextChanged(e);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">Protected Overrides Sub OnTextChanged(e As System.EventArgs)\n   Try\n      &#39; Convert the text to a Double and determine\n      &#39; if it is a negative number.\n      If Double.Parse(Me.Text) &lt; 0 Then\n         &#39; If the number is negative, display it in Red.\n         Me.ForeColor = Color.Red\n      Else\n         &#39; If the number is not negative, display it in Black.\n         Me.ForeColor = Color.Black\n      End If\n   Catch\n      &#39; If there is an error, display the\n      &#39; text using the system colors.\n      Me.ForeColor = SystemColors.ControlText\n   End Try\n\n   MyBase.OnTextChanged(e)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnParentBackgroundImageChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnParentBackgroundImageChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnParentBackgroundImageChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BackgroundImageChanged\" data-linktype=\"relative-path\">BackgroundImageChanged</a> event when the <span class=\"xref\">stem.Windows.Forms.Control.BackgroundImage*</span> property value of the control&#39;s container changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnParentBackgroundImageChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnParentBackgroundImageChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example is an event-raising method that is executed when the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property value changes. The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class has several methods with the name pattern <code>On</code><em>PropertyName</em><code>Changed</code>that raise the corresponding <em>PropertyName</em><code>Changed</code> event when the <em>PropertyName</em> value changes (<em>PropertyName</em> represents the name of the corresponding property).  </p>\n<p> The following code example changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> of a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> derived class displaying currency data. The example converts the text to a decimal number and changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Red_\" data-linktype=\"relative-path\">Red</a> if the number is negative and to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Black_\" data-linktype=\"relative-path\">Black</a> if the number is positive. This example requires that you have a class that derives from the <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">   protected:\n      virtual void OnTextChanged( System::EventArgs^ e ) override\n      {\n         try\n         {\n            // Convert the text to a Double and determine\n            // if it is a negative number.\n            if ( Double::Parse( this-&gt;Text ) &lt; 0 )\n            {\n               // If the number is negative, display it in Red.\n               this-&gt;ForeColor = Color::Red;\n            }\n            else\n            {\n               // If the number is not negative, display it in Black.\n               this-&gt;ForeColor = Color::Black;\n            }\n         }\n         catch ( Exception^ ) \n         {\n            // If there is an error, display the\n            // text using the system colors.\n            this-&gt;ForeColor = SystemColors::ControlText;\n         }\n\n         TextBox::OnTextChanged( e );\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">protected override void OnTextChanged(System.EventArgs e)\n{\n   try\n   {\n      // Convert the text to a Double and determine\n      // if it is a negative number.\n      if(double.Parse(this.Text) &lt; 0)\n      {\n         // If the number is negative, display it in Red.\n         this.ForeColor = Color.Red;\n      }\n      else\n      {\n         // If the number is not negative, display it in Black.\n         this.ForeColor = Color.Black;\n      }\n   }\n   catch\n   {\n      // If there is an error, display the \n      // text using the system colors.\n      this.ForeColor = SystemColors.ControlText;\n   }\n   \n   base.OnTextChanged(e);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">Protected Overrides Sub OnTextChanged(e As System.EventArgs)\n   Try\n      &#39; Convert the text to a Double and determine\n      &#39; if it is a negative number.\n      If Double.Parse(Me.Text) &lt; 0 Then\n         &#39; If the number is negative, display it in Red.\n         Me.ForeColor = Color.Red\n      Else\n         &#39; If the number is not negative, display it in Black.\n         Me.ForeColor = Color.Black\n      End If\n   Catch\n      &#39; If there is an error, display the\n      &#39; text using the system colors.\n      Me.ForeColor = SystemColors.ControlText\n   End Try\n\n   MyBase.OnTextChanged(e)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnParentBindingContextChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnParentBindingContextChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnParentBindingContextChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BindingContextChanged\" data-linktype=\"relative-path\">BindingContextChanged</a> event when the <span class=\"xref\">stem.Windows.Forms.Control.BindingContext*</span> property value of the control&#39;s container changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnParentBindingContextChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnParentBindingContextChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example is an event-raising method that is executed when the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property value changes. The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class has several methods with the name pattern <code>On</code><em>PropertyName</em><code>Changed</code>that raise the corresponding <em>PropertyName</em><code>Changed</code> event when the <em>PropertyName</em> value changes (<em>PropertyName</em> represents the name of the corresponding property).  </p>\n<p> The following code example changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> of a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> derived class displaying currency data. The example converts the text to a decimal number and changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Red_\" data-linktype=\"relative-path\">Red</a> if the number is negative and to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Black_\" data-linktype=\"relative-path\">Black</a> if the number is positive. This example requires that you have a class that derives from the <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">   protected:\n      virtual void OnTextChanged( System::EventArgs^ e ) override\n      {\n         try\n         {\n            // Convert the text to a Double and determine\n            // if it is a negative number.\n            if ( Double::Parse( this-&gt;Text ) &lt; 0 )\n            {\n               // If the number is negative, display it in Red.\n               this-&gt;ForeColor = Color::Red;\n            }\n            else\n            {\n               // If the number is not negative, display it in Black.\n               this-&gt;ForeColor = Color::Black;\n            }\n         }\n         catch ( Exception^ ) \n         {\n            // If there is an error, display the\n            // text using the system colors.\n            this-&gt;ForeColor = SystemColors::ControlText;\n         }\n\n         TextBox::OnTextChanged( e );\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">protected override void OnTextChanged(System.EventArgs e)\n{\n   try\n   {\n      // Convert the text to a Double and determine\n      // if it is a negative number.\n      if(double.Parse(this.Text) &lt; 0)\n      {\n         // If the number is negative, display it in Red.\n         this.ForeColor = Color.Red;\n      }\n      else\n      {\n         // If the number is not negative, display it in Black.\n         this.ForeColor = Color.Black;\n      }\n   }\n   catch\n   {\n      // If there is an error, display the \n      // text using the system colors.\n      this.ForeColor = SystemColors.ControlText;\n   }\n   \n   base.OnTextChanged(e);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">Protected Overrides Sub OnTextChanged(e As System.EventArgs)\n   Try\n      &#39; Convert the text to a Double and determine\n      &#39; if it is a negative number.\n      If Double.Parse(Me.Text) &lt; 0 Then\n         &#39; If the number is negative, display it in Red.\n         Me.ForeColor = Color.Red\n      Else\n         &#39; If the number is not negative, display it in Black.\n         Me.ForeColor = Color.Black\n      End If\n   Catch\n      &#39; If there is an error, display the\n      &#39; text using the system colors.\n      Me.ForeColor = SystemColors.ControlText\n   End Try\n\n   MyBase.OnTextChanged(e)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnParentChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnParentChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnParentChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ParentChanged\" data-linktype=\"relative-path\">ParentChanged</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnParentChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnParentChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example is an event-raising method that is executed when the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property value changes. The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class has several methods with the name pattern <code>On</code><em>PropertyName</em><code>Changed</code> that raise the corresponding <em>PropertyName</em><code>Changed</code> event when the <em>PropertyName</em> value changes (<em>PropertyName</em> represents the name of the corresponding property).  </p>\n<p> The following code example changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> of a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> derived class displaying currency data. The example converts the text to a decimal number and changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Red_\" data-linktype=\"relative-path\">Red</a> if the number is negative and to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Black_\" data-linktype=\"relative-path\">Black</a> if the number is positive. This example requires that you have a class that derives from the <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">   protected:\n      virtual void OnTextChanged( System::EventArgs^ e ) override\n      {\n         try\n         {\n            // Convert the text to a Double and determine\n            // if it is a negative number.\n            if ( Double::Parse( this-&gt;Text ) &lt; 0 )\n            {\n               // If the number is negative, display it in Red.\n               this-&gt;ForeColor = Color::Red;\n            }\n            else\n            {\n               // If the number is not negative, display it in Black.\n               this-&gt;ForeColor = Color::Black;\n            }\n         }\n         catch ( Exception^ ) \n         {\n            // If there is an error, display the\n            // text using the system colors.\n            this-&gt;ForeColor = SystemColors::ControlText;\n         }\n\n         TextBox::OnTextChanged( e );\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">protected override void OnTextChanged(System.EventArgs e)\n{\n   try\n   {\n      // Convert the text to a Double and determine\n      // if it is a negative number.\n      if(double.Parse(this.Text) &lt; 0)\n      {\n         // If the number is negative, display it in Red.\n         this.ForeColor = Color.Red;\n      }\n      else\n      {\n         // If the number is not negative, display it in Black.\n         this.ForeColor = Color.Black;\n      }\n   }\n   catch\n   {\n      // If there is an error, display the \n      // text using the system colors.\n      this.ForeColor = SystemColors.ControlText;\n   }\n   \n   base.OnTextChanged(e);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">Protected Overrides Sub OnTextChanged(e As System.EventArgs)\n   Try\n      &#39; Convert the text to a Double and determine\n      &#39; if it is a negative number.\n      If Double.Parse(Me.Text) &lt; 0 Then\n         &#39; If the number is negative, display it in Red.\n         Me.ForeColor = Color.Red\n      Else\n         &#39; If the number is not negative, display it in Black.\n         Me.ForeColor = Color.Black\n      End If\n   Catch\n      &#39; If there is an error, display the\n      &#39; text using the system colors.\n      Me.ForeColor = SystemColors.ControlText\n   End Try\n\n   MyBase.OnTextChanged(e)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnParentCursorChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnParentCursorChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnParentCursorChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CursorChanged\" data-linktype=\"relative-path\">CursorChanged</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnParentCursorChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnParentCursorChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnParentEnabledChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnParentEnabledChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnParentEnabledChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_EnabledChanged\" data-linktype=\"relative-path\">EnabledChanged</a> event when the <span class=\"xref\">stem.Windows.Forms.Control.Enabled*</span> property value of the control&#39;s container changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnParentEnabledChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnParentEnabledChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example is an event-raising method that is executed when the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property value changes. The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class has several methods with the name pattern <code>On</code><em>PropertyName</em><code>Changed</code> that raise the corresponding <em>PropertyName</em><code>Changed</code> event when the <em>PropertyName</em> value changes (<em>PropertyName</em> represents the name of the corresponding property).  </p>\n<p> The following code example changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> of a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> derived class displaying currency data. The example converts the text to a decimal number and changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Red_\" data-linktype=\"relative-path\">Red</a> if the number is negative and to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Black_\" data-linktype=\"relative-path\">Black</a> if the number is positive. This example requires that you have a class that derives from the <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">   protected:\n      virtual void OnTextChanged( System::EventArgs^ e ) override\n      {\n         try\n         {\n            // Convert the text to a Double and determine\n            // if it is a negative number.\n            if ( Double::Parse( this-&gt;Text ) &lt; 0 )\n            {\n               // If the number is negative, display it in Red.\n               this-&gt;ForeColor = Color::Red;\n            }\n            else\n            {\n               // If the number is not negative, display it in Black.\n               this-&gt;ForeColor = Color::Black;\n            }\n         }\n         catch ( Exception^ ) \n         {\n            // If there is an error, display the\n            // text using the system colors.\n            this-&gt;ForeColor = SystemColors::ControlText;\n         }\n\n         TextBox::OnTextChanged( e );\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">protected override void OnTextChanged(System.EventArgs e)\n{\n   try\n   {\n      // Convert the text to a Double and determine\n      // if it is a negative number.\n      if(double.Parse(this.Text) &lt; 0)\n      {\n         // If the number is negative, display it in Red.\n         this.ForeColor = Color.Red;\n      }\n      else\n      {\n         // If the number is not negative, display it in Black.\n         this.ForeColor = Color.Black;\n      }\n   }\n   catch\n   {\n      // If there is an error, display the \n      // text using the system colors.\n      this.ForeColor = SystemColors.ControlText;\n   }\n   \n   base.OnTextChanged(e);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">Protected Overrides Sub OnTextChanged(e As System.EventArgs)\n   Try\n      &#39; Convert the text to a Double and determine\n      &#39; if it is a negative number.\n      If Double.Parse(Me.Text) &lt; 0 Then\n         &#39; If the number is negative, display it in Red.\n         Me.ForeColor = Color.Red\n      Else\n         &#39; If the number is not negative, display it in Black.\n         Me.ForeColor = Color.Black\n      End If\n   Catch\n      &#39; If there is an error, display the\n      &#39; text using the system colors.\n      Me.ForeColor = SystemColors.ControlText\n   End Try\n\n   MyBase.OnTextChanged(e)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnParentFontChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnParentFontChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnParentFontChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_FontChanged\" data-linktype=\"relative-path\">FontChanged</a> event when the <span class=\"xref\">stem.Windows.Forms.Control.Font*</span> property value of the control&#39;s container changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnParentFontChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnParentFontChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example is an event-raising method that is executed when the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property value changes. The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class has several methods with the name pattern <code>On</code><em>PropertyName</em><code>Changed</code> that raise the corresponding <em>PropertyName</em><code>Changed</code> event when the <em>PropertyName</em> value changes (<em>PropertyName</em> represents the name of the corresponding property).  </p>\n<p> The following code example changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> of a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> derived class displaying currency data. The example converts the text to a decimal number and changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Red_\" data-linktype=\"relative-path\">Red</a> if the number is negative and to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Black_\" data-linktype=\"relative-path\">Black</a> if the number is positive. This example requires that you have a class that derives from the <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">   protected:\n      virtual void OnTextChanged( System::EventArgs^ e ) override\n      {\n         try\n         {\n            // Convert the text to a Double and determine\n            // if it is a negative number.\n            if ( Double::Parse( this-&gt;Text ) &lt; 0 )\n            {\n               // If the number is negative, display it in Red.\n               this-&gt;ForeColor = Color::Red;\n            }\n            else\n            {\n               // If the number is not negative, display it in Black.\n               this-&gt;ForeColor = Color::Black;\n            }\n         }\n         catch ( Exception^ ) \n         {\n            // If there is an error, display the\n            // text using the system colors.\n            this-&gt;ForeColor = SystemColors::ControlText;\n         }\n\n         TextBox::OnTextChanged( e );\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">protected override void OnTextChanged(System.EventArgs e)\n{\n   try\n   {\n      // Convert the text to a Double and determine\n      // if it is a negative number.\n      if(double.Parse(this.Text) &lt; 0)\n      {\n         // If the number is negative, display it in Red.\n         this.ForeColor = Color.Red;\n      }\n      else\n      {\n         // If the number is not negative, display it in Black.\n         this.ForeColor = Color.Black;\n      }\n   }\n   catch\n   {\n      // If there is an error, display the \n      // text using the system colors.\n      this.ForeColor = SystemColors.ControlText;\n   }\n   \n   base.OnTextChanged(e);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">Protected Overrides Sub OnTextChanged(e As System.EventArgs)\n   Try\n      &#39; Convert the text to a Double and determine\n      &#39; if it is a negative number.\n      If Double.Parse(Me.Text) &lt; 0 Then\n         &#39; If the number is negative, display it in Red.\n         Me.ForeColor = Color.Red\n      Else\n         &#39; If the number is not negative, display it in Black.\n         Me.ForeColor = Color.Black\n      End If\n   Catch\n      &#39; If there is an error, display the\n      &#39; text using the system colors.\n      Me.ForeColor = SystemColors.ControlText\n   End Try\n\n   MyBase.OnTextChanged(e)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnParentForeColorChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnParentForeColorChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnParentForeColorChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColorChanged\" data-linktype=\"relative-path\">ForeColorChanged</a> event when the <span class=\"xref\">stem.Windows.Forms.Control.ForeColor*</span> property value of the control&#39;s container changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnParentForeColorChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnParentForeColorChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example is an event-raising method that is executed when the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property value changes. The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class has several methods with the name pattern <code>On</code><em>PropertyName</em><code>Changed</code> that raise the corresponding <em>PropertyName</em><code>Changed</code> event when the <em>PropertyName</em> value changes (<em>PropertyName</em> represents the name of the corresponding property).  </p>\n<p> The following code example changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> of a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> derived class displaying currency data. The example converts the text to a decimal number and changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Red_\" data-linktype=\"relative-path\">Red</a> if the number is negative and to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Black_\" data-linktype=\"relative-path\">Black</a> if the number is positive. This example requires that you have a class that derives from the <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">   protected:\n      virtual void OnTextChanged( System::EventArgs^ e ) override\n      {\n         try\n         {\n            // Convert the text to a Double and determine\n            // if it is a negative number.\n            if ( Double::Parse( this-&gt;Text ) &lt; 0 )\n            {\n               // If the number is negative, display it in Red.\n               this-&gt;ForeColor = Color::Red;\n            }\n            else\n            {\n               // If the number is not negative, display it in Black.\n               this-&gt;ForeColor = Color::Black;\n            }\n         }\n         catch ( Exception^ ) \n         {\n            // If there is an error, display the\n            // text using the system colors.\n            this-&gt;ForeColor = SystemColors::ControlText;\n         }\n\n         TextBox::OnTextChanged( e );\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">protected override void OnTextChanged(System.EventArgs e)\n{\n   try\n   {\n      // Convert the text to a Double and determine\n      // if it is a negative number.\n      if(double.Parse(this.Text) &lt; 0)\n      {\n         // If the number is negative, display it in Red.\n         this.ForeColor = Color.Red;\n      }\n      else\n      {\n         // If the number is not negative, display it in Black.\n         this.ForeColor = Color.Black;\n      }\n   }\n   catch\n   {\n      // If there is an error, display the \n      // text using the system colors.\n      this.ForeColor = SystemColors.ControlText;\n   }\n   \n   base.OnTextChanged(e);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">Protected Overrides Sub OnTextChanged(e As System.EventArgs)\n   Try\n      &#39; Convert the text to a Double and determine\n      &#39; if it is a negative number.\n      If Double.Parse(Me.Text) &lt; 0 Then\n         &#39; If the number is negative, display it in Red.\n         Me.ForeColor = Color.Red\n      Else\n         &#39; If the number is not negative, display it in Black.\n         Me.ForeColor = Color.Black\n      End If\n   Catch\n      &#39; If there is an error, display the\n      &#39; text using the system colors.\n      Me.ForeColor = SystemColors.ControlText\n   End Try\n\n   MyBase.OnTextChanged(e)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnParentRightToLeftChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnParentRightToLeftChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnParentRightToLeftChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RightToLeftChanged\" data-linktype=\"relative-path\">RightToLeftChanged</a> event when the <span class=\"xref\">stem.Windows.Forms.Control.RightToLeft*</span> property value of the control&#39;s container changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnParentRightToLeftChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnParentRightToLeftChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example is an event-raising method that is executed when the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property value changes. The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class has several methods with the name pattern <code>On</code><em>PropertyName</em><code>Changed</code> that raise the corresponding <em>PropertyName</em><code>Changed</code> event when the <em>PropertyName</em> value changes (<em>PropertyName</em> represents the name of the corresponding property).  </p>\n<p> The following code example changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> of a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> derived class displaying currency data. The example converts the text to a decimal number and changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Red_\" data-linktype=\"relative-path\">Red</a> if the number is negative and to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Black_\" data-linktype=\"relative-path\">Black</a> if the number is positive. This example requires that you have a class that derives from the <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">   protected:\n      virtual void OnTextChanged( System::EventArgs^ e ) override\n      {\n         try\n         {\n            // Convert the text to a Double and determine\n            // if it is a negative number.\n            if ( Double::Parse( this-&gt;Text ) &lt; 0 )\n            {\n               // If the number is negative, display it in Red.\n               this-&gt;ForeColor = Color::Red;\n            }\n            else\n            {\n               // If the number is not negative, display it in Black.\n               this-&gt;ForeColor = Color::Black;\n            }\n         }\n         catch ( Exception^ ) \n         {\n            // If there is an error, display the\n            // text using the system colors.\n            this-&gt;ForeColor = SystemColors::ControlText;\n         }\n\n         TextBox::OnTextChanged( e );\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">protected override void OnTextChanged(System.EventArgs e)\n{\n   try\n   {\n      // Convert the text to a Double and determine\n      // if it is a negative number.\n      if(double.Parse(this.Text) &lt; 0)\n      {\n         // If the number is negative, display it in Red.\n         this.ForeColor = Color.Red;\n      }\n      else\n      {\n         // If the number is not negative, display it in Black.\n         this.ForeColor = Color.Black;\n      }\n   }\n   catch\n   {\n      // If there is an error, display the \n      // text using the system colors.\n      this.ForeColor = SystemColors.ControlText;\n   }\n   \n   base.OnTextChanged(e);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">Protected Overrides Sub OnTextChanged(e As System.EventArgs)\n   Try\n      &#39; Convert the text to a Double and determine\n      &#39; if it is a negative number.\n      If Double.Parse(Me.Text) &lt; 0 Then\n         &#39; If the number is negative, display it in Red.\n         Me.ForeColor = Color.Red\n      Else\n         &#39; If the number is not negative, display it in Black.\n         Me.ForeColor = Color.Black\n      End If\n   Catch\n      &#39; If there is an error, display the\n      &#39; text using the system colors.\n      Me.ForeColor = SystemColors.ControlText\n   End Try\n\n   MyBase.OnTextChanged(e)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnParentVisibleChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnParentVisibleChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnParentVisibleChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_VisibleChanged\" data-linktype=\"relative-path\">VisibleChanged</a> event when the <span class=\"xref\">stem.Windows.Forms.Control.Visible*</span> property value of the control&#39;s container changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnParentVisibleChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnParentVisibleChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example is an event-raising method that is executed when the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property value changes. The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class has several methods with the name pattern <code>On</code><em>PropertyName</em><code>Changed</code> that raise the corresponding <em>PropertyName</em><code>Changed</code> event when the <em>PropertyName</em> value changes (<em>PropertyName</em> represents the name of the corresponding property).  </p>\n<p> The following code example changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> of a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> derived class displaying currency data. The example converts the text to a decimal number and changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Red_\" data-linktype=\"relative-path\">Red</a> if the number is negative and to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Black_\" data-linktype=\"relative-path\">Black</a> if the number is positive. This example requires that you have a class that derives from the <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">   protected:\n      virtual void OnTextChanged( System::EventArgs^ e ) override\n      {\n         try\n         {\n            // Convert the text to a Double and determine\n            // if it is a negative number.\n            if ( Double::Parse( this-&gt;Text ) &lt; 0 )\n            {\n               // If the number is negative, display it in Red.\n               this-&gt;ForeColor = Color::Red;\n            }\n            else\n            {\n               // If the number is not negative, display it in Black.\n               this-&gt;ForeColor = Color::Black;\n            }\n         }\n         catch ( Exception^ ) \n         {\n            // If there is an error, display the\n            // text using the system colors.\n            this-&gt;ForeColor = SystemColors::ControlText;\n         }\n\n         TextBox::OnTextChanged( e );\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">protected override void OnTextChanged(System.EventArgs e)\n{\n   try\n   {\n      // Convert the text to a Double and determine\n      // if it is a negative number.\n      if(double.Parse(this.Text) &lt; 0)\n      {\n         // If the number is negative, display it in Red.\n         this.ForeColor = Color.Red;\n      }\n      else\n      {\n         // If the number is not negative, display it in Black.\n         this.ForeColor = Color.Black;\n      }\n   }\n   catch\n   {\n      // If there is an error, display the \n      // text using the system colors.\n      this.ForeColor = SystemColors.ControlText;\n   }\n   \n   base.OnTextChanged(e);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">Protected Overrides Sub OnTextChanged(e As System.EventArgs)\n   Try\n      &#39; Convert the text to a Double and determine\n      &#39; if it is a negative number.\n      If Double.Parse(Me.Text) &lt; 0 Then\n         &#39; If the number is negative, display it in Red.\n         Me.ForeColor = Color.Red\n      Else\n         &#39; If the number is not negative, display it in Black.\n         Me.ForeColor = Color.Black\n      End If\n   Catch\n      &#39; If there is an error, display the\n      &#39; text using the system colors.\n      Me.ForeColor = SystemColors.ControlText\n   End Try\n\n   MyBase.OnTextChanged(e)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnPreviewKeyDown_System_Windows_Forms_PreviewKeyDownEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnPreviewKeyDown_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPreviewKeyDown(PreviewKeyDownEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_PreviewKeyDown\" data-linktype=\"relative-path\">PreviewKeyDown</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPreviewKeyDown (System.Windows.Forms.PreviewKeyDownEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.previewkeydowneventargs\" data-linktype=\"relative-path\">PreviewKeyDownEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.previewkeydowneventargs\" data-linktype=\"relative-path\">PreviewKeyDownEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnPreviewKeyDown method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnPrint_System_Windows_Forms_PaintEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnPrint_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnPrint(PaintEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Paint\" data-linktype=\"relative-path\">Paint</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnPrint (System.Windows.Forms.PaintEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.painteventargs\" data-linktype=\"relative-path\">PaintEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.painteventargs\" data-linktype=\"relative-path\">PaintEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>e</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <code>UserPaint</code> bit of the <a class=\"xref\" href=\"system.windows.forms.controlstyles\" data-linktype=\"relative-path\">ControlStyles</a> is set, you can override OnPrint to do layered painting. See <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SetStyle_\" data-linktype=\"relative-path\">SetStyle</a> for more information.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnQueryContinueDrag_System_Windows_Forms_QueryContinueDragEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnQueryContinueDrag_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnQueryContinueDrag(QueryContinueDragEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_QueryContinueDrag\" data-linktype=\"relative-path\">QueryContinueDrag</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnQueryContinueDrag (System.Windows.Forms.QueryContinueDragEventArgs qcdevent);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>qcdevent</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.querycontinuedrageventargs\" data-linktype=\"relative-path\">QueryContinueDragEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.querycontinuedrageventargs\" data-linktype=\"relative-path\">QueryContinueDragEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>After dragging has begun, this method is called repeatedly by the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnshort-md.md&quot; -->.NET Framework<!--END INCLUDE --> until the drag operation is either canceled or completed.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Override this method if you want to change the point at which dragging is canceled or at which a drop occurs.  </p>\n</div>\n<p> Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnQueryContinueDrag method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnRegionChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnRegionChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnRegionChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RegionChanged\" data-linktype=\"relative-path\">RegionChanged</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnRegionChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnRegionChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnResize_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnResize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnResize(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Resize\" data-linktype=\"relative-path\">Resize</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnResize (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnResize method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnRightToLeftChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnRightToLeftChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnRightToLeftChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RightToLeftChanged\" data-linktype=\"relative-path\">RightToLeftChanged</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnRightToLeftChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnRightToLeftChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example is an event-raising method that is executed when the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property value changes. The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class has several methods with the name pattern <code>On</code><em>PropertyName</em><code>Changed</code> that raise the corresponding <em>PropertyName</em><code>Changed</code> event when the <em>PropertyName</em> value changes (<em>PropertyName</em> represents the name of the corresponding property).  </p>\n<p> The following code example changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> of a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> derived class displaying currency data. The example converts the text to a decimal number and changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Red_\" data-linktype=\"relative-path\">Red</a> if the number is negative and to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Black_\" data-linktype=\"relative-path\">Black</a> if the number is positive. This example requires that you have a class that derives from the <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">   protected:\n      virtual void OnTextChanged( System::EventArgs^ e ) override\n      {\n         try\n         {\n            // Convert the text to a Double and determine\n            // if it is a negative number.\n            if ( Double::Parse( this-&gt;Text ) &lt; 0 )\n            {\n               // If the number is negative, display it in Red.\n               this-&gt;ForeColor = Color::Red;\n            }\n            else\n            {\n               // If the number is not negative, display it in Black.\n               this-&gt;ForeColor = Color::Black;\n            }\n         }\n         catch ( Exception^ ) \n         {\n            // If there is an error, display the\n            // text using the system colors.\n            this-&gt;ForeColor = SystemColors::ControlText;\n         }\n\n         TextBox::OnTextChanged( e );\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">protected override void OnTextChanged(System.EventArgs e)\n{\n   try\n   {\n      // Convert the text to a Double and determine\n      // if it is a negative number.\n      if(double.Parse(this.Text) &lt; 0)\n      {\n         // If the number is negative, display it in Red.\n         this.ForeColor = Color.Red;\n      }\n      else\n      {\n         // If the number is not negative, display it in Black.\n         this.ForeColor = Color.Black;\n      }\n   }\n   catch\n   {\n      // If there is an error, display the \n      // text using the system colors.\n      this.ForeColor = SystemColors.ControlText;\n   }\n   \n   base.OnTextChanged(e);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">Protected Overrides Sub OnTextChanged(e As System.EventArgs)\n   Try\n      &#39; Convert the text to a Double and determine\n      &#39; if it is a negative number.\n      If Double.Parse(Me.Text) &lt; 0 Then\n         &#39; If the number is negative, display it in Red.\n         Me.ForeColor = Color.Red\n      Else\n         &#39; If the number is not negative, display it in Black.\n         Me.ForeColor = Color.Black\n      End If\n   Catch\n      &#39; If there is an error, display the\n      &#39; text using the system colors.\n      Me.ForeColor = SystemColors.ControlText\n   End Try\n\n   MyBase.OnTextChanged(e)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnSizeChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnSizeChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnSizeChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SizeChanged\" data-linktype=\"relative-path\">SizeChanged</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnSizeChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnSizeChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnStyleChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnStyleChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnStyleChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_StyleChanged\" data-linktype=\"relative-path\">StyleChanged</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnStyleChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnStyleChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnSystemColorsChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnSystemColorsChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnSystemColorsChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SystemColorsChanged\" data-linktype=\"relative-path\">SystemColorsChanged</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnSystemColorsChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnSystemColorsChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnTabIndexChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnTabIndexChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnTabIndexChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_TabIndexChanged\" data-linktype=\"relative-path\">TabIndexChanged</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnTabIndexChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnTabIndexChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnTabStopChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnTabStopChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnTabStopChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_TabStopChanged\" data-linktype=\"relative-path\">TabStopChanged</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnTabStopChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnTabStopChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example is an event-raising method that is executed when the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property value changes. The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class has several methods with the name pattern <code>On</code><em>PropertyName</em><code>Changed</code> that raise the corresponding <em>PropertyName</em><code>Changed</code> event when the <em>PropertyName</em> value changes (<em>PropertyName</em> represents the name of the corresponding property).  </p>\n<p> The following code example changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> of a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> derived class displaying currency data. The example converts the text to a decimal number and changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Red_\" data-linktype=\"relative-path\">Red</a> if the number is negative and to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Black_\" data-linktype=\"relative-path\">Black</a> if the number is positive. This example requires that you have a class that derives from the <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">   protected:\n      virtual void OnTextChanged( System::EventArgs^ e ) override\n      {\n         try\n         {\n            // Convert the text to a Double and determine\n            // if it is a negative number.\n            if ( Double::Parse( this-&gt;Text ) &lt; 0 )\n            {\n               // If the number is negative, display it in Red.\n               this-&gt;ForeColor = Color::Red;\n            }\n            else\n            {\n               // If the number is not negative, display it in Black.\n               this-&gt;ForeColor = Color::Black;\n            }\n         }\n         catch ( Exception^ ) \n         {\n            // If there is an error, display the\n            // text using the system colors.\n            this-&gt;ForeColor = SystemColors::ControlText;\n         }\n\n         TextBox::OnTextChanged( e );\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">protected override void OnTextChanged(System.EventArgs e)\n{\n   try\n   {\n      // Convert the text to a Double and determine\n      // if it is a negative number.\n      if(double.Parse(this.Text) &lt; 0)\n      {\n         // If the number is negative, display it in Red.\n         this.ForeColor = Color.Red;\n      }\n      else\n      {\n         // If the number is not negative, display it in Black.\n         this.ForeColor = Color.Black;\n      }\n   }\n   catch\n   {\n      // If there is an error, display the \n      // text using the system colors.\n      this.ForeColor = SystemColors.ControlText;\n   }\n   \n   base.OnTextChanged(e);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">Protected Overrides Sub OnTextChanged(e As System.EventArgs)\n   Try\n      &#39; Convert the text to a Double and determine\n      &#39; if it is a negative number.\n      If Double.Parse(Me.Text) &lt; 0 Then\n         &#39; If the number is negative, display it in Red.\n         Me.ForeColor = Color.Red\n      Else\n         &#39; If the number is not negative, display it in Black.\n         Me.ForeColor = Color.Black\n      End If\n   Catch\n      &#39; If there is an error, display the\n      &#39; text using the system colors.\n      Me.ForeColor = SystemColors.ControlText\n   End Try\n\n   MyBase.OnTextChanged(e)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnTextChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnTextChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnTextChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_TextChanged\" data-linktype=\"relative-path\">TextChanged</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnTextChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnTextChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> of a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> derived class displaying currency data. The example converts the text to a decimal number and changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Red_\" data-linktype=\"relative-path\">Red</a> if the number is negative and to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Black_\" data-linktype=\"relative-path\">Black</a> if the number is positive. This example requires that you have a class that derives from the <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">   protected:\n      virtual void OnTextChanged( System::EventArgs^ e ) override\n      {\n         try\n         {\n            // Convert the text to a Double and determine\n            // if it is a negative number.\n            if ( Double::Parse( this-&gt;Text ) &lt; 0 )\n            {\n               // If the number is negative, display it in Red.\n               this-&gt;ForeColor = Color::Red;\n            }\n            else\n            {\n               // If the number is not negative, display it in Black.\n               this-&gt;ForeColor = Color::Black;\n            }\n         }\n         catch ( Exception^ ) \n         {\n            // If there is an error, display the\n            // text using the system colors.\n            this-&gt;ForeColor = SystemColors::ControlText;\n         }\n\n         TextBox::OnTextChanged( e );\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">protected override void OnTextChanged(System.EventArgs e)\n{\n   try\n   {\n      // Convert the text to a Double and determine\n      // if it is a negative number.\n      if(double.Parse(this.Text) &lt; 0)\n      {\n         // If the number is negative, display it in Red.\n         this.ForeColor = Color.Red;\n      }\n      else\n      {\n         // If the number is not negative, display it in Black.\n         this.ForeColor = Color.Black;\n      }\n   }\n   catch\n   {\n      // If there is an error, display the \n      // text using the system colors.\n      this.ForeColor = SystemColors.ControlText;\n   }\n   \n   base.OnTextChanged(e);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">Protected Overrides Sub OnTextChanged(e As System.EventArgs)\n   Try\n      &#39; Convert the text to a Double and determine\n      &#39; if it is a negative number.\n      If Double.Parse(Me.Text) &lt; 0 Then\n         &#39; If the number is negative, display it in Red.\n         Me.ForeColor = Color.Red\n      Else\n         &#39; If the number is not negative, display it in Black.\n         Me.ForeColor = Color.Black\n      End If\n   Catch\n      &#39; If there is an error, display the\n      &#39; text using the system colors.\n      Me.ForeColor = SystemColors.ControlText\n   End Try\n\n   MyBase.OnTextChanged(e)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnValidated_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnValidated_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnValidated(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validated\" data-linktype=\"relative-path\">Validated</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnValidated (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnValidated method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnValidating_System_ComponentModel_CancelEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnValidating_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnValidating(CancelEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validating\" data-linktype=\"relative-path\">Validating</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnValidating (System.ComponentModel.CancelEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.canceleventargs\" data-linktype=\"relative-path\">CancelEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.componentmodel.canceleventargs\" data-linktype=\"relative-path\">CancelEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnValidating method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_OnVisibleChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_OnVisibleChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnVisibleChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_VisibleChanged\" data-linktype=\"relative-path\">VisibleChanged</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnVisibleChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnVisibleChanged method also enables derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example is an event-raising method that is executed when the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property value changes. The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class has several methods with the name pattern <code>On</code><em>PropertyName</em><code>Changed</code> that raise the corresponding <em>PropertyName</em><code>Changed</code> event when the <em>PropertyName</em> value changes (<em>PropertyName</em> represents the name of the corresponding property).  </p>\n<p> The following code example changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> of a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> derived class displaying currency data. The example converts the text to a decimal number and changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Red_\" data-linktype=\"relative-path\">Red</a> if the number is negative and to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Black_\" data-linktype=\"relative-path\">Black</a> if the number is positive. This example requires that you have a class that derives from the <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">   protected:\n      virtual void OnTextChanged( System::EventArgs^ e ) override\n      {\n         try\n         {\n            // Convert the text to a Double and determine\n            // if it is a negative number.\n            if ( Double::Parse( this-&gt;Text ) &lt; 0 )\n            {\n               // If the number is negative, display it in Red.\n               this-&gt;ForeColor = Color::Red;\n            }\n            else\n            {\n               // If the number is not negative, display it in Black.\n               this-&gt;ForeColor = Color::Black;\n            }\n         }\n         catch ( Exception^ ) \n         {\n            // If there is an error, display the\n            // text using the system colors.\n            this-&gt;ForeColor = SystemColors::ControlText;\n         }\n\n         TextBox::OnTextChanged( e );\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">protected override void OnTextChanged(System.EventArgs e)\n{\n   try\n   {\n      // Convert the text to a Double and determine\n      // if it is a negative number.\n      if(double.Parse(this.Text) &lt; 0)\n      {\n         // If the number is negative, display it in Red.\n         this.ForeColor = Color.Red;\n      }\n      else\n      {\n         // If the number is not negative, display it in Black.\n         this.ForeColor = Color.Black;\n      }\n   }\n   catch\n   {\n      // If there is an error, display the \n      // text using the system colors.\n      this.ForeColor = SystemColors.ControlText;\n   }\n   \n   base.OnTextChanged(e);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control_OnPropertyChangedEvents#1\">Protected Overrides Sub OnTextChanged(e As System.EventArgs)\n   Try\n      &#39; Convert the text to a Double and determine\n      &#39; if it is a negative number.\n      If Double.Parse(Me.Text) &lt; 0 Then\n         &#39; If the number is negative, display it in Red.\n         Me.ForeColor = Color.Red\n      Else\n         &#39; If the number is not negative, display it in Black.\n         Me.ForeColor = Color.Black\n      End If\n   Catch\n      &#39; If there is an error, display the\n      &#39; text using the system colors.\n      Me.ForeColor = SystemColors.ControlText\n   End Try\n\n   MyBase.OnTextChanged(e)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_PerformLayout\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_PerformLayout_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PerformLayout()</div>        \r\n          </div>\r\n    \r\n            <p>Forces the control to apply layout logic to all its child controls.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void PerformLayout ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SuspendLayout_\" data-linktype=\"relative-path\">SuspendLayout</a> method was called before calling the PerformLayout method, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Layout\" data-linktype=\"relative-path\">Layout</a> event is suppressed.  </p>\n<p> The <a class=\"xref\" href=\"system.windows.forms.layouteventargs#System_Windows_Forms_LayoutEventArgs_AffectedControl_\" data-linktype=\"relative-path\">AffectedControl</a> and <a class=\"xref\" href=\"system.windows.forms.layouteventargs#System_Windows_Forms_LayoutEventArgs_AffectedProperty_\" data-linktype=\"relative-path\">AffectedProperty</a> properties of the <a class=\"xref\" href=\"system.windows.forms.layouteventargs\" data-linktype=\"relative-path\">LayoutEventArgs</a> created are set to <code>null</code> if no values were provided when the PerformLayout method was called.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the PerformLayout method. It also demonstrates ways in which the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Layout\" data-linktype=\"relative-path\">Layout</a> event is raised. In this example, the <code>Click</code> event handler for <code>Button1</code> explicitly calls PerformLayout. The <code>Click</code> event handler for <code>Button2</code> implicitly calls PerformLayout. PerformLayout is also called when the form is loaded. <code>Button3</code> returns the control to the state it was in when loaded. In each case, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Layout\" data-linktype=\"relative-path\">Layout</a> event is raised.  </p>\n<p> This is a complete example. To run the example, paste the following code in a blank form.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.Control.PerformLayout#1\">using namespace System;\nusing namespace System::Windows::Forms;\nusing namespace System::Drawing;\n\n// This custom control has the Layout event implented so that when \n// PerformLayout(AffectedControl, AffectedProperty) is called \n// on the control, where AffectedProperty equals &quot;Bounds&quot; the \n// textbox is centered on the control.\npublic ref class LayoutControl: public System::Windows::Forms::UserControl\n{\npublic private:\n   System::Windows::Forms::TextBox^ TextBox1;\n\npublic:\n   LayoutControl()\n      : UserControl()\n   {\n      InitializeComponent();\n   }\n\n\nprivate:\n   void InitializeComponent()\n   {\n      this-&gt;TextBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;SuspendLayout();\n      this-&gt;TextBox1-&gt;BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;\n      this-&gt;TextBox1-&gt;Name = &quot;TextBox1&quot;;\n      this-&gt;TextBox1-&gt;TabIndex = 0;\n      this-&gt;BackColor = System::Drawing::SystemColors::ControlDark;\n      this-&gt;Controls-&gt;Add( this-&gt;TextBox1 );\n      this-&gt;Name = &quot;LayoutControl&quot;;\n      this-&gt;ResumeLayout( false );\n      this-&gt;Layout += gcnew LayoutEventHandler( this, &amp;LayoutControl::LayoutControl_Layout );\n   }\n\n\n   // This method is called when the Layout event is fired. \n   // This happens by during the initial load, by calling PerformLayout\n   // or by resizing, adding or removing controls or other actions that \n   // affect how the control is laid out. This method checks the \n   // value of e.AffectedProperty and changes the look of the \n   // control accordingly. \n   void LayoutControl_Layout( Object^ /*sender*/, System::Windows::Forms::LayoutEventArgs^ e )\n   {\n      if ( e-&gt;AffectedProperty != nullptr )\n      {\n         if ( e-&gt;AffectedProperty-&gt;Equals( &quot;Bounds&quot; ) )\n         {\n            TextBox1-&gt;Left = (this-&gt;Width - TextBox1-&gt;Width) / 2;\n            TextBox1-&gt;Top = (this-&gt;Height - TextBox1-&gt;Height) / 2;\n         }\n      }\n      else\n      {\n         this-&gt;Size = System::Drawing::Size( 150, 160 );\n         TextBox1-&gt;Location = System::Drawing::Point( 16, 24 );\n      }\n\n      TextBox1-&gt;Text = String::Format( &quot;Left = {0} Top = {1}&quot;, TextBox1-&gt;Left, TextBox1-&gt;Top );\n   }\n\n};\n\npublic ref class LayoutForm: public System::Windows::Forms::Form\n{\npublic:\n   LayoutForm()\n      : Form()\n   {\n      InitializeComponent();\n   }\n\n\npublic private:\n   System::Windows::Forms::Button^ Button1;\n   System::Windows::Forms::Button^ Button2;\n   LayoutControl^ LayoutControl1;\n   System::Windows::Forms::Button^ Button3;\n\nprivate:\n   void InitializeComponent()\n   {\n      this-&gt;Button1 = gcnew System::Windows::Forms::Button;\n      this-&gt;Button2 = gcnew System::Windows::Forms::Button;\n      this-&gt;Button3 = gcnew System::Windows::Forms::Button;\n      this-&gt;LayoutControl1 = gcnew LayoutControl;\n      this-&gt;SuspendLayout();\n      this-&gt;Button1-&gt;Location = System::Drawing::Point( 16, 16 );\n      this-&gt;Button1-&gt;Name = &quot;Button1&quot;;\n      this-&gt;Button1-&gt;Size = System::Drawing::Size( 120, 32 );\n      this-&gt;Button1-&gt;TabIndex = 0;\n      this-&gt;Button1-&gt;Text = &quot;Center textbox on control&quot;;\n      this-&gt;Button2-&gt;Location = System::Drawing::Point( 152, 16 );\n      this-&gt;Button2-&gt;Name = &quot;Button2&quot;;\n      this-&gt;Button2-&gt;Size = System::Drawing::Size( 104, 32 );\n      this-&gt;Button2-&gt;TabIndex = 3;\n      this-&gt;Button2-&gt;Text = &quot;Shrink user control&quot;;\n      this-&gt;Button3-&gt;Location = System::Drawing::Point( 96, 232 );\n      this-&gt;Button3-&gt;Name = &quot;Button3&quot;;\n      this-&gt;Button3-&gt;TabIndex = 5;\n      this-&gt;Button3-&gt;Text = &quot;Reset&quot;;\n      this-&gt;LayoutControl1-&gt;BackColor = System::Drawing::SystemColors::ControlDark;\n      this-&gt;LayoutControl1-&gt;Location = System::Drawing::Point( 72, 64 );\n      this-&gt;LayoutControl1-&gt;Name = &quot;LayoutControl1&quot;;\n      this-&gt;LayoutControl1-&gt;Size = System::Drawing::Size( 150, 160 );\n      this-&gt;LayoutControl1-&gt;TabIndex = 6;\n      this-&gt;ClientSize = System::Drawing::Size( 292, 266 );\n      this-&gt;Controls-&gt;Add( this-&gt;Button3 );\n      this-&gt;Controls-&gt;Add( this-&gt;Button2 );\n      this-&gt;Controls-&gt;Add( this-&gt;Button1 );\n      this-&gt;Controls-&gt;Add( this-&gt;LayoutControl1 );\n      this-&gt;Name = &quot;Form1&quot;;\n      this-&gt;Text = &quot;Form1&quot;;\n      this-&gt;ResumeLayout( false );\n      this-&gt;Button1-&gt;Click += gcnew System::EventHandler( this,&amp;LayoutForm::Button1_Click );\n      this-&gt;Button2-&gt;Click += gcnew System::EventHandler( this,&amp;LayoutForm::Button2_Click );\n      this-&gt;Button3-&gt;Click += gcnew System::EventHandler( this,&amp;LayoutForm::Button3_Click );\n   }\n\n\n   // This method explicitly calls raises the layout event on \n   // LayoutControl1, changing the Bounds property.\n   void Button1_Click( System::Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      LayoutControl1-&gt;PerformLayout( LayoutControl1, &quot;Bounds&quot; );\n   }\n\n\n   // This resize of LayoutControl1 implicitly triggers the layout event. \n   //  Changing the size of the control affects its Bounds property.\n   void Button2_Click( System::Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      LayoutControl1-&gt;Size = System::Drawing::Size( 100, 100 );\n   }\n\n\n   // This method explicitly calls PerformLayout with no parameters, \n   // which raises the Layout event with the LayoutEventArgs properties\n   // equal to Nothing.\n   void Button3_Click( System::Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      LayoutControl1-&gt;PerformLayout();\n   }\n\n};\n\n\n[System::STAThread]\nint main()\n{\n   Application::Run( gcnew LayoutForm );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.Control.PerformLayout#1\">\nImports System.Windows.Forms\nImports System.Drawing\n\n\n\nPublic Class LayoutForm\n    Inherits System.Windows.Forms.Form\n\n    Public Sub New()\n        MyBase.New()\n        InitializeComponent()\n    End Sub\n\n    Friend WithEvents Button1 As System.Windows.Forms.Button\n    Friend WithEvents Button2 As System.Windows.Forms.Button\n    Friend WithEvents LayoutControl1 As LayoutControl\n    Friend WithEvents Button3 As System.Windows.Forms.Button\n\n    Private Sub InitializeComponent()\n        Me.Button1 = New System.Windows.Forms.Button\n        Me.Button2 = New System.Windows.Forms.Button\n        Me.Button3 = New System.Windows.Forms.Button\n        Me.LayoutControl1 = New LayoutControl\n        Me.SuspendLayout()\n        Me.Button1.Location = New System.Drawing.Point(16, 16)\n        Me.Button1.Name = &quot;Button1&quot;\n        Me.Button1.Size = New System.Drawing.Size(120, 32)\n        Me.Button1.TabIndex = 0\n        Me.Button1.Text = &quot;Center textbox on control&quot;\n        Me.Button2.Location = New System.Drawing.Point(152, 16)\n        Me.Button2.Name = &quot;Button2&quot;\n        Me.Button2.Size = New System.Drawing.Size(104, 32)\n        Me.Button2.TabIndex = 3\n        Me.Button2.Text = &quot;Shrink user control&quot;\n        Me.Button3.Location = New System.Drawing.Point(96, 232)\n        Me.Button3.Name = &quot;Button3&quot;\n        Me.Button3.TabIndex = 5\n        Me.Button3.Text = &quot;Reset&quot;\n        Me.LayoutControl1.BackColor = System.Drawing.SystemColors.ControlDark\n        Me.LayoutControl1.Location = New System.Drawing.Point(72, 64)\n        Me.LayoutControl1.Name = &quot;LayoutControl1&quot;\n        Me.LayoutControl1.Size = New System.Drawing.Size(150, 160)\n        Me.LayoutControl1.TabIndex = 6\n        Me.ClientSize = New System.Drawing.Size(292, 266)\n        Me.Controls.Add(Me.Button3)\n        Me.Controls.Add(Me.Button2)\n        Me.Controls.Add(Me.Button1)\n        Me.Controls.Add(Me.LayoutControl1)\n        Me.Name = &quot;Form1&quot;\n        Me.Text = &quot;Form1&quot;\n        Me.ResumeLayout(False)\n\n    End Sub\n\n    &lt;System.STAThread()&gt; Shared Sub Main()\n        Application.Run(New LayoutForm)\n    End Sub\n\n\n   \n    &#39; This method explicitly calls raises the layout event on \n    &#39; LayoutControl1, changing the Bounds property.\n    Private Sub Button1_Click(ByVal sender As System.Object, _\n        ByVal e As System.EventArgs) Handles Button1.Click\n        LayoutControl1.PerformLayout(LayoutControl1, &quot;Bounds&quot;)\n    End Sub\n\n    &#39; This resize of LayoutControl1 implicitly triggers the layout event. \n    &#39;   Changing the size of the control affects its Bounds property.\n    Private Sub Button2_Click(ByVal sender As System.Object, _\n        ByVal e As System.EventArgs) Handles Button2.Click\n        LayoutControl1.Size = New System.Drawing.Size(100, 100)\n    End Sub\n\n    &#39; This method explicitly calls PerformLayout with no parameters, \n    &#39; which raises the Layout event with the LayoutEventArgs properties\n    &#39; equal to Nothing.\n    Private Sub Button3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button3.Click\n        LayoutControl1.PerformLayout()\n    End Sub\n\nEnd Class\n\n\n&#39;This custom control has the Layout event implented so that when \n&#39;PerformLayout(AffectedControl, AffectedProperty) is called on the control, \n&#39;where AffectedProperty equals &quot;Bounds&quot; the textbox is centered on the control.\nPublic Class LayoutControl\n    Inherits System.Windows.Forms.UserControl\n    Friend WithEvents TextBox1 As System.Windows.Forms.TextBox\n\n    Public Sub New()\n        MyBase.New()\n        InitializeComponent()\n    End Sub\n\n    Private Sub InitializeComponent()\n        Me.TextBox1 = New System.Windows.Forms.TextBox\n        Me.SuspendLayout()\n        Me.TextBox1.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle\n        Me.TextBox1.Name = &quot;TextBox1&quot;\n        Me.TextBox1.TabIndex = 0\n        Me.BackColor = System.Drawing.SystemColors.ControlDark\n        Me.Controls.Add(Me.TextBox1)\n        Me.Name = &quot;LayoutControl&quot;\n        Me.ResumeLayout(False)\n\n    End Sub\n\n    &#39;This method is called when the Layout event is fired. This happens by during the initial load,\n    &#39;by calling PerformLayout or by resizing, adding or removing controls or other actions that \n    &#39;affect how the control is laid out. This method checks the value of e.AffectedProperty\n    &#39;and changes the look of the control accordingly. \n    Private Sub LayoutControl_Layout(ByVal sender As Object, ByVal e As System.Windows.Forms.LayoutEventArgs) Handles MyBase.Layout\n        If e.AffectedProperty IsNot Nothing Then\n            If e.AffectedProperty.Equals(&quot;Bounds&quot;) Then\n                TextBox1.Left = (Me.Width - TextBox1.Width) / 2\n                TextBox1.Top = (Me.Height - TextBox1.Height) / 2\n            End If\n        Else\n            Me.Size = New System.Drawing.Size(150, 160)\n            TextBox1.Location = New System.Drawing.Point(16, 24)\n        End If\n        TextBox1.Text = &quot;Left = &quot; &amp; TextBox1.Left &amp; &quot; Top = &quot; &amp; TextBox1.Top\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.Control.PerformLayout#1\">\nusing System.Windows.Forms;\nusing System.Drawing;\n\n\n\npublic class LayoutForm:\n\tSystem.Windows.Forms.Form\n\n{\n\tpublic LayoutForm() : base()\n\t{        \n\t\tInitializeComponent();\n\t}\n\n\tinternal System.Windows.Forms.Button Button1;\n\tinternal System.Windows.Forms.Button Button2;\n\tinternal LayoutControl LayoutControl1;\n\tinternal System.Windows.Forms.Button Button3;\n\n\tprivate void InitializeComponent()\n\t{\n\t\tthis.Button1 = new System.Windows.Forms.Button();\n\t\tthis.Button2 = new System.Windows.Forms.Button();\n\t\tthis.Button3 = new System.Windows.Forms.Button();\n\t\tthis.LayoutControl1 = new LayoutControl();\n\t\tthis.SuspendLayout();\n\t\tthis.Button1.Location = new System.Drawing.Point(16, 16);\n\t\tthis.Button1.Name = &quot;Button1&quot;;\n\t\tthis.Button1.Size = new System.Drawing.Size(120, 32);\n\t\tthis.Button1.TabIndex = 0;\n\t\tthis.Button1.Text = &quot;Center textbox on control&quot;;\n\t\tthis.Button2.Location = new System.Drawing.Point(152, 16);\n\t\tthis.Button2.Name = &quot;Button2&quot;;\n\t\tthis.Button2.Size = new System.Drawing.Size(104, 32);\n\t\tthis.Button2.TabIndex = 3;\n\t\tthis.Button2.Text = &quot;Shrink user control&quot;;\n\t\tthis.Button3.Location = new System.Drawing.Point(96, 232);\n\t\tthis.Button3.Name = &quot;Button3&quot;;\n\t\tthis.Button3.TabIndex = 5;\n\t\tthis.Button3.Text = &quot;Reset&quot;;\n\t\tthis.LayoutControl1.BackColor = System.Drawing.SystemColors.ControlDark;\n\t\tthis.LayoutControl1.Location = new System.Drawing.Point(72, 64);\n\t\tthis.LayoutControl1.Name = &quot;LayoutControl1&quot;;\n\t\tthis.LayoutControl1.Size = new System.Drawing.Size(150, 160);\n\t\tthis.LayoutControl1.TabIndex = 6;\n\t\tthis.ClientSize = new System.Drawing.Size(292, 266);\n\t\tthis.Controls.Add(this.Button3);\n\t\tthis.Controls.Add(this.Button2);\n\t\tthis.Controls.Add(this.Button1);\n\t\tthis.Controls.Add(this.LayoutControl1);\n\t\tthis.Name = &quot;Form1&quot;;\n\t\tthis.Text = &quot;Form1&quot;;\n\t\tthis.ResumeLayout(false);\n\t\tthis.Button1.Click += new System.EventHandler(Button1_Click);\n\t\tthis.Button2.Click += new System.EventHandler(Button2_Click);\n\t\tthis.Button3.Click += new System.EventHandler(Button3_Click);\n\n\t}\n\n\t[System.STAThread]\n\tpublic static void Main()\n\t{\n\t\tApplication.Run(new LayoutForm());\n\t}\n\n\n\t// This method explicitly calls raises the layout event on \n\t// LayoutControl1, changing the Bounds property.\n\tprivate void Button1_Click(System.Object sender, System.EventArgs e)\n\t{\n\t\tLayoutControl1.PerformLayout(LayoutControl1, &quot;Bounds&quot;);\n\t}\n\n\t// This resize of LayoutControl1 implicitly triggers the layout event. \n\t//  Changing the size of the control affects its Bounds property.\n\tprivate void Button2_Click(System.Object sender, System.EventArgs e)\n\t{\n\t\tLayoutControl1.Size = new System.Drawing.Size(100, 100);\n\t}\n\n\t// This method explicitly calls PerformLayout with no parameters, \n\t// which raises the Layout event with the LayoutEventArgs properties\n\t// equal to Nothing.\n\tprivate void Button3_Click(System.Object sender, System.EventArgs e)\n\t{\n\t\tLayoutControl1.PerformLayout();\n\t}\n\n}\n\n\n// This custom control has the Layout event implented so that when \n// PerformLayout(AffectedControl, AffectedProperty) is called \n// on the control, where AffectedProperty equals &quot;Bounds&quot; the \n// textbox is centered on the control.\npublic class LayoutControl:\n\tSystem.Windows.Forms.UserControl\n{\n\tinternal System.Windows.Forms.TextBox TextBox1;\n\n\tpublic LayoutControl() : base()\n\t{        \n\t\tInitializeComponent();\n\t}\n\n\tprivate void InitializeComponent()\n\t{\n\t\tthis.TextBox1 = new System.Windows.Forms.TextBox();\n\t\tthis.SuspendLayout();\n\t\tthis.TextBox1.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;\n\t\tthis.TextBox1.Name = &quot;TextBox1&quot;;\n\t\tthis.TextBox1.TabIndex = 0;\n\t\tthis.BackColor = System.Drawing.SystemColors.ControlDark;\n\t\tthis.Controls.Add(this.TextBox1);\n\t\tthis.Name = &quot;LayoutControl&quot;;\n\t\tthis.ResumeLayout(false);\n\t\tthis.Layout += new LayoutEventHandler(LayoutControl_Layout);\n\n\t}\n\n\t// This method is called when the Layout event is fired. \n\t// This happens by during the initial load, by calling PerformLayout\n\t// or by resizing, adding or removing controls or other actions that \n\t// affect how the control is laid out. This method checks the \n\t// value of e.AffectedProperty and changes the look of the \n\t// control accordingly. \n\tprivate void LayoutControl_Layout(object sender, \n\t\tSystem.Windows.Forms.LayoutEventArgs e)\n\t{\n\t\tif (e.AffectedProperty != null)\n\t\t{\n\t\t\tif (e.AffectedProperty.Equals(&quot;Bounds&quot;))\n\t\t\t{\n\t\t\t\tTextBox1.Left = (this.Width-TextBox1.Width)/2;\n\t\t\t\tTextBox1.Top = (this.Height-TextBox1.Height)/2;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.Size = new System.Drawing.Size(150, 160);\n\t\t\tTextBox1.Location = new System.Drawing.Point(16, 24);\n\t\t}\n\t\tTextBox1.Text = &quot;Left = &quot;+TextBox1.Left+&quot; Top = &quot;+TextBox1.Top;\n\t}\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_PerformLayout_System_Windows_Forms_Control_System_String_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_PerformLayout_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PerformLayout(Control,String)</div>        \r\n          </div>\r\n    \r\n            <p>Forces the control to apply layout logic to all its child controls.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void PerformLayout (System.Windows.Forms.Control affectedControl, string affectedProperty);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>affectedControl</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> that represents the most recently changed control.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>affectedProperty</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the most recently changed property on the control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SuspendLayout_\" data-linktype=\"relative-path\">SuspendLayout</a> method was called before calling the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_PerformLayout_\" data-linktype=\"relative-path\">PerformLayout</a> method, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Layout\" data-linktype=\"relative-path\">Layout</a> event is suppressed.  </p>\n<p> The <code>affectedControl</code> and <code>affectedProperty</code> parameters can both be set to <code>null</code>. Doing so causes the <a class=\"xref\" href=\"system.windows.forms.layouteventargs#System_Windows_Forms_LayoutEventArgs_AffectedControl_\" data-linktype=\"relative-path\">AffectedControl</a> and <a class=\"xref\" href=\"system.windows.forms.layouteventargs#System_Windows_Forms_LayoutEventArgs_AffectedProperty_\" data-linktype=\"relative-path\">AffectedProperty</a> properties of the <a class=\"xref\" href=\"system.windows.forms.layouteventargs\" data-linktype=\"relative-path\">LayoutEventArgs</a> created to be set to <code>null</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_PerformLayout_\" data-linktype=\"relative-path\">PerformLayout</a> method. It also demonstrates ways in which the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Layout\" data-linktype=\"relative-path\">Layout</a> event is raised. In this example, the <code>Click</code> event handler for <code>Button1</code> explicitly calls <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_PerformLayout_\" data-linktype=\"relative-path\">PerformLayout</a>. The <code>Click</code> event handler for <code>Button2</code> implicitly calls <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_PerformLayout_\" data-linktype=\"relative-path\">PerformLayout</a>. <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_PerformLayout_\" data-linktype=\"relative-path\">PerformLayout</a> is also called when the form is loaded. <code>Button3</code> returns the control to the state it was in when loaded. In each case, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Layout\" data-linktype=\"relative-path\">Layout</a> event is raised.  </p>\n<p> This is a complete example. To run the example, paste the following code in a blank form.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.Control.PerformLayout#1\">using namespace System;\nusing namespace System::Windows::Forms;\nusing namespace System::Drawing;\n\n// This custom control has the Layout event implented so that when \n// PerformLayout(AffectedControl, AffectedProperty) is called \n// on the control, where AffectedProperty equals &quot;Bounds&quot; the \n// textbox is centered on the control.\npublic ref class LayoutControl: public System::Windows::Forms::UserControl\n{\npublic private:\n   System::Windows::Forms::TextBox^ TextBox1;\n\npublic:\n   LayoutControl()\n      : UserControl()\n   {\n      InitializeComponent();\n   }\n\n\nprivate:\n   void InitializeComponent()\n   {\n      this-&gt;TextBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;SuspendLayout();\n      this-&gt;TextBox1-&gt;BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;\n      this-&gt;TextBox1-&gt;Name = &quot;TextBox1&quot;;\n      this-&gt;TextBox1-&gt;TabIndex = 0;\n      this-&gt;BackColor = System::Drawing::SystemColors::ControlDark;\n      this-&gt;Controls-&gt;Add( this-&gt;TextBox1 );\n      this-&gt;Name = &quot;LayoutControl&quot;;\n      this-&gt;ResumeLayout( false );\n      this-&gt;Layout += gcnew LayoutEventHandler( this, &amp;LayoutControl::LayoutControl_Layout );\n   }\n\n\n   // This method is called when the Layout event is fired. \n   // This happens by during the initial load, by calling PerformLayout\n   // or by resizing, adding or removing controls or other actions that \n   // affect how the control is laid out. This method checks the \n   // value of e.AffectedProperty and changes the look of the \n   // control accordingly. \n   void LayoutControl_Layout( Object^ /*sender*/, System::Windows::Forms::LayoutEventArgs^ e )\n   {\n      if ( e-&gt;AffectedProperty != nullptr )\n      {\n         if ( e-&gt;AffectedProperty-&gt;Equals( &quot;Bounds&quot; ) )\n         {\n            TextBox1-&gt;Left = (this-&gt;Width - TextBox1-&gt;Width) / 2;\n            TextBox1-&gt;Top = (this-&gt;Height - TextBox1-&gt;Height) / 2;\n         }\n      }\n      else\n      {\n         this-&gt;Size = System::Drawing::Size( 150, 160 );\n         TextBox1-&gt;Location = System::Drawing::Point( 16, 24 );\n      }\n\n      TextBox1-&gt;Text = String::Format( &quot;Left = {0} Top = {1}&quot;, TextBox1-&gt;Left, TextBox1-&gt;Top );\n   }\n\n};\n\npublic ref class LayoutForm: public System::Windows::Forms::Form\n{\npublic:\n   LayoutForm()\n      : Form()\n   {\n      InitializeComponent();\n   }\n\n\npublic private:\n   System::Windows::Forms::Button^ Button1;\n   System::Windows::Forms::Button^ Button2;\n   LayoutControl^ LayoutControl1;\n   System::Windows::Forms::Button^ Button3;\n\nprivate:\n   void InitializeComponent()\n   {\n      this-&gt;Button1 = gcnew System::Windows::Forms::Button;\n      this-&gt;Button2 = gcnew System::Windows::Forms::Button;\n      this-&gt;Button3 = gcnew System::Windows::Forms::Button;\n      this-&gt;LayoutControl1 = gcnew LayoutControl;\n      this-&gt;SuspendLayout();\n      this-&gt;Button1-&gt;Location = System::Drawing::Point( 16, 16 );\n      this-&gt;Button1-&gt;Name = &quot;Button1&quot;;\n      this-&gt;Button1-&gt;Size = System::Drawing::Size( 120, 32 );\n      this-&gt;Button1-&gt;TabIndex = 0;\n      this-&gt;Button1-&gt;Text = &quot;Center textbox on control&quot;;\n      this-&gt;Button2-&gt;Location = System::Drawing::Point( 152, 16 );\n      this-&gt;Button2-&gt;Name = &quot;Button2&quot;;\n      this-&gt;Button2-&gt;Size = System::Drawing::Size( 104, 32 );\n      this-&gt;Button2-&gt;TabIndex = 3;\n      this-&gt;Button2-&gt;Text = &quot;Shrink user control&quot;;\n      this-&gt;Button3-&gt;Location = System::Drawing::Point( 96, 232 );\n      this-&gt;Button3-&gt;Name = &quot;Button3&quot;;\n      this-&gt;Button3-&gt;TabIndex = 5;\n      this-&gt;Button3-&gt;Text = &quot;Reset&quot;;\n      this-&gt;LayoutControl1-&gt;BackColor = System::Drawing::SystemColors::ControlDark;\n      this-&gt;LayoutControl1-&gt;Location = System::Drawing::Point( 72, 64 );\n      this-&gt;LayoutControl1-&gt;Name = &quot;LayoutControl1&quot;;\n      this-&gt;LayoutControl1-&gt;Size = System::Drawing::Size( 150, 160 );\n      this-&gt;LayoutControl1-&gt;TabIndex = 6;\n      this-&gt;ClientSize = System::Drawing::Size( 292, 266 );\n      this-&gt;Controls-&gt;Add( this-&gt;Button3 );\n      this-&gt;Controls-&gt;Add( this-&gt;Button2 );\n      this-&gt;Controls-&gt;Add( this-&gt;Button1 );\n      this-&gt;Controls-&gt;Add( this-&gt;LayoutControl1 );\n      this-&gt;Name = &quot;Form1&quot;;\n      this-&gt;Text = &quot;Form1&quot;;\n      this-&gt;ResumeLayout( false );\n      this-&gt;Button1-&gt;Click += gcnew System::EventHandler( this,&amp;LayoutForm::Button1_Click );\n      this-&gt;Button2-&gt;Click += gcnew System::EventHandler( this,&amp;LayoutForm::Button2_Click );\n      this-&gt;Button3-&gt;Click += gcnew System::EventHandler( this,&amp;LayoutForm::Button3_Click );\n   }\n\n\n   // This method explicitly calls raises the layout event on \n   // LayoutControl1, changing the Bounds property.\n   void Button1_Click( System::Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      LayoutControl1-&gt;PerformLayout( LayoutControl1, &quot;Bounds&quot; );\n   }\n\n\n   // This resize of LayoutControl1 implicitly triggers the layout event. \n   //  Changing the size of the control affects its Bounds property.\n   void Button2_Click( System::Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      LayoutControl1-&gt;Size = System::Drawing::Size( 100, 100 );\n   }\n\n\n   // This method explicitly calls PerformLayout with no parameters, \n   // which raises the Layout event with the LayoutEventArgs properties\n   // equal to Nothing.\n   void Button3_Click( System::Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      LayoutControl1-&gt;PerformLayout();\n   }\n\n};\n\n\n[System::STAThread]\nint main()\n{\n   Application::Run( gcnew LayoutForm );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.Control.PerformLayout#1\">\nImports System.Windows.Forms\nImports System.Drawing\n\n\n\nPublic Class LayoutForm\n    Inherits System.Windows.Forms.Form\n\n    Public Sub New()\n        MyBase.New()\n        InitializeComponent()\n    End Sub\n\n    Friend WithEvents Button1 As System.Windows.Forms.Button\n    Friend WithEvents Button2 As System.Windows.Forms.Button\n    Friend WithEvents LayoutControl1 As LayoutControl\n    Friend WithEvents Button3 As System.Windows.Forms.Button\n\n    Private Sub InitializeComponent()\n        Me.Button1 = New System.Windows.Forms.Button\n        Me.Button2 = New System.Windows.Forms.Button\n        Me.Button3 = New System.Windows.Forms.Button\n        Me.LayoutControl1 = New LayoutControl\n        Me.SuspendLayout()\n        Me.Button1.Location = New System.Drawing.Point(16, 16)\n        Me.Button1.Name = &quot;Button1&quot;\n        Me.Button1.Size = New System.Drawing.Size(120, 32)\n        Me.Button1.TabIndex = 0\n        Me.Button1.Text = &quot;Center textbox on control&quot;\n        Me.Button2.Location = New System.Drawing.Point(152, 16)\n        Me.Button2.Name = &quot;Button2&quot;\n        Me.Button2.Size = New System.Drawing.Size(104, 32)\n        Me.Button2.TabIndex = 3\n        Me.Button2.Text = &quot;Shrink user control&quot;\n        Me.Button3.Location = New System.Drawing.Point(96, 232)\n        Me.Button3.Name = &quot;Button3&quot;\n        Me.Button3.TabIndex = 5\n        Me.Button3.Text = &quot;Reset&quot;\n        Me.LayoutControl1.BackColor = System.Drawing.SystemColors.ControlDark\n        Me.LayoutControl1.Location = New System.Drawing.Point(72, 64)\n        Me.LayoutControl1.Name = &quot;LayoutControl1&quot;\n        Me.LayoutControl1.Size = New System.Drawing.Size(150, 160)\n        Me.LayoutControl1.TabIndex = 6\n        Me.ClientSize = New System.Drawing.Size(292, 266)\n        Me.Controls.Add(Me.Button3)\n        Me.Controls.Add(Me.Button2)\n        Me.Controls.Add(Me.Button1)\n        Me.Controls.Add(Me.LayoutControl1)\n        Me.Name = &quot;Form1&quot;\n        Me.Text = &quot;Form1&quot;\n        Me.ResumeLayout(False)\n\n    End Sub\n\n    &lt;System.STAThread()&gt; Shared Sub Main()\n        Application.Run(New LayoutForm)\n    End Sub\n\n\n   \n    &#39; This method explicitly calls raises the layout event on \n    &#39; LayoutControl1, changing the Bounds property.\n    Private Sub Button1_Click(ByVal sender As System.Object, _\n        ByVal e As System.EventArgs) Handles Button1.Click\n        LayoutControl1.PerformLayout(LayoutControl1, &quot;Bounds&quot;)\n    End Sub\n\n    &#39; This resize of LayoutControl1 implicitly triggers the layout event. \n    &#39;   Changing the size of the control affects its Bounds property.\n    Private Sub Button2_Click(ByVal sender As System.Object, _\n        ByVal e As System.EventArgs) Handles Button2.Click\n        LayoutControl1.Size = New System.Drawing.Size(100, 100)\n    End Sub\n\n    &#39; This method explicitly calls PerformLayout with no parameters, \n    &#39; which raises the Layout event with the LayoutEventArgs properties\n    &#39; equal to Nothing.\n    Private Sub Button3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button3.Click\n        LayoutControl1.PerformLayout()\n    End Sub\n\nEnd Class\n\n\n&#39;This custom control has the Layout event implented so that when \n&#39;PerformLayout(AffectedControl, AffectedProperty) is called on the control, \n&#39;where AffectedProperty equals &quot;Bounds&quot; the textbox is centered on the control.\nPublic Class LayoutControl\n    Inherits System.Windows.Forms.UserControl\n    Friend WithEvents TextBox1 As System.Windows.Forms.TextBox\n\n    Public Sub New()\n        MyBase.New()\n        InitializeComponent()\n    End Sub\n\n    Private Sub InitializeComponent()\n        Me.TextBox1 = New System.Windows.Forms.TextBox\n        Me.SuspendLayout()\n        Me.TextBox1.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle\n        Me.TextBox1.Name = &quot;TextBox1&quot;\n        Me.TextBox1.TabIndex = 0\n        Me.BackColor = System.Drawing.SystemColors.ControlDark\n        Me.Controls.Add(Me.TextBox1)\n        Me.Name = &quot;LayoutControl&quot;\n        Me.ResumeLayout(False)\n\n    End Sub\n\n    &#39;This method is called when the Layout event is fired. This happens by during the initial load,\n    &#39;by calling PerformLayout or by resizing, adding or removing controls or other actions that \n    &#39;affect how the control is laid out. This method checks the value of e.AffectedProperty\n    &#39;and changes the look of the control accordingly. \n    Private Sub LayoutControl_Layout(ByVal sender As Object, ByVal e As System.Windows.Forms.LayoutEventArgs) Handles MyBase.Layout\n        If e.AffectedProperty IsNot Nothing Then\n            If e.AffectedProperty.Equals(&quot;Bounds&quot;) Then\n                TextBox1.Left = (Me.Width - TextBox1.Width) / 2\n                TextBox1.Top = (Me.Height - TextBox1.Height) / 2\n            End If\n        Else\n            Me.Size = New System.Drawing.Size(150, 160)\n            TextBox1.Location = New System.Drawing.Point(16, 24)\n        End If\n        TextBox1.Text = &quot;Left = &quot; &amp; TextBox1.Left &amp; &quot; Top = &quot; &amp; TextBox1.Top\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.Control.PerformLayout#1\">\nusing System.Windows.Forms;\nusing System.Drawing;\n\n\n\npublic class LayoutForm:\n\tSystem.Windows.Forms.Form\n\n{\n\tpublic LayoutForm() : base()\n\t{        \n\t\tInitializeComponent();\n\t}\n\n\tinternal System.Windows.Forms.Button Button1;\n\tinternal System.Windows.Forms.Button Button2;\n\tinternal LayoutControl LayoutControl1;\n\tinternal System.Windows.Forms.Button Button3;\n\n\tprivate void InitializeComponent()\n\t{\n\t\tthis.Button1 = new System.Windows.Forms.Button();\n\t\tthis.Button2 = new System.Windows.Forms.Button();\n\t\tthis.Button3 = new System.Windows.Forms.Button();\n\t\tthis.LayoutControl1 = new LayoutControl();\n\t\tthis.SuspendLayout();\n\t\tthis.Button1.Location = new System.Drawing.Point(16, 16);\n\t\tthis.Button1.Name = &quot;Button1&quot;;\n\t\tthis.Button1.Size = new System.Drawing.Size(120, 32);\n\t\tthis.Button1.TabIndex = 0;\n\t\tthis.Button1.Text = &quot;Center textbox on control&quot;;\n\t\tthis.Button2.Location = new System.Drawing.Point(152, 16);\n\t\tthis.Button2.Name = &quot;Button2&quot;;\n\t\tthis.Button2.Size = new System.Drawing.Size(104, 32);\n\t\tthis.Button2.TabIndex = 3;\n\t\tthis.Button2.Text = &quot;Shrink user control&quot;;\n\t\tthis.Button3.Location = new System.Drawing.Point(96, 232);\n\t\tthis.Button3.Name = &quot;Button3&quot;;\n\t\tthis.Button3.TabIndex = 5;\n\t\tthis.Button3.Text = &quot;Reset&quot;;\n\t\tthis.LayoutControl1.BackColor = System.Drawing.SystemColors.ControlDark;\n\t\tthis.LayoutControl1.Location = new System.Drawing.Point(72, 64);\n\t\tthis.LayoutControl1.Name = &quot;LayoutControl1&quot;;\n\t\tthis.LayoutControl1.Size = new System.Drawing.Size(150, 160);\n\t\tthis.LayoutControl1.TabIndex = 6;\n\t\tthis.ClientSize = new System.Drawing.Size(292, 266);\n\t\tthis.Controls.Add(this.Button3);\n\t\tthis.Controls.Add(this.Button2);\n\t\tthis.Controls.Add(this.Button1);\n\t\tthis.Controls.Add(this.LayoutControl1);\n\t\tthis.Name = &quot;Form1&quot;;\n\t\tthis.Text = &quot;Form1&quot;;\n\t\tthis.ResumeLayout(false);\n\t\tthis.Button1.Click += new System.EventHandler(Button1_Click);\n\t\tthis.Button2.Click += new System.EventHandler(Button2_Click);\n\t\tthis.Button3.Click += new System.EventHandler(Button3_Click);\n\n\t}\n\n\t[System.STAThread]\n\tpublic static void Main()\n\t{\n\t\tApplication.Run(new LayoutForm());\n\t}\n\n\n\t// This method explicitly calls raises the layout event on \n\t// LayoutControl1, changing the Bounds property.\n\tprivate void Button1_Click(System.Object sender, System.EventArgs e)\n\t{\n\t\tLayoutControl1.PerformLayout(LayoutControl1, &quot;Bounds&quot;);\n\t}\n\n\t// This resize of LayoutControl1 implicitly triggers the layout event. \n\t//  Changing the size of the control affects its Bounds property.\n\tprivate void Button2_Click(System.Object sender, System.EventArgs e)\n\t{\n\t\tLayoutControl1.Size = new System.Drawing.Size(100, 100);\n\t}\n\n\t// This method explicitly calls PerformLayout with no parameters, \n\t// which raises the Layout event with the LayoutEventArgs properties\n\t// equal to Nothing.\n\tprivate void Button3_Click(System.Object sender, System.EventArgs e)\n\t{\n\t\tLayoutControl1.PerformLayout();\n\t}\n\n}\n\n\n// This custom control has the Layout event implented so that when \n// PerformLayout(AffectedControl, AffectedProperty) is called \n// on the control, where AffectedProperty equals &quot;Bounds&quot; the \n// textbox is centered on the control.\npublic class LayoutControl:\n\tSystem.Windows.Forms.UserControl\n{\n\tinternal System.Windows.Forms.TextBox TextBox1;\n\n\tpublic LayoutControl() : base()\n\t{        \n\t\tInitializeComponent();\n\t}\n\n\tprivate void InitializeComponent()\n\t{\n\t\tthis.TextBox1 = new System.Windows.Forms.TextBox();\n\t\tthis.SuspendLayout();\n\t\tthis.TextBox1.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;\n\t\tthis.TextBox1.Name = &quot;TextBox1&quot;;\n\t\tthis.TextBox1.TabIndex = 0;\n\t\tthis.BackColor = System.Drawing.SystemColors.ControlDark;\n\t\tthis.Controls.Add(this.TextBox1);\n\t\tthis.Name = &quot;LayoutControl&quot;;\n\t\tthis.ResumeLayout(false);\n\t\tthis.Layout += new LayoutEventHandler(LayoutControl_Layout);\n\n\t}\n\n\t// This method is called when the Layout event is fired. \n\t// This happens by during the initial load, by calling PerformLayout\n\t// or by resizing, adding or removing controls or other actions that \n\t// affect how the control is laid out. This method checks the \n\t// value of e.AffectedProperty and changes the look of the \n\t// control accordingly. \n\tprivate void LayoutControl_Layout(object sender, \n\t\tSystem.Windows.Forms.LayoutEventArgs e)\n\t{\n\t\tif (e.AffectedProperty != null)\n\t\t{\n\t\t\tif (e.AffectedProperty.Equals(&quot;Bounds&quot;))\n\t\t\t{\n\t\t\t\tTextBox1.Left = (this.Width-TextBox1.Width)/2;\n\t\t\t\tTextBox1.Top = (this.Height-TextBox1.Height)/2;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.Size = new System.Drawing.Size(150, 160);\n\t\t\tTextBox1.Location = new System.Drawing.Point(16, 24);\n\t\t}\n\t\tTextBox1.Text = &quot;Left = &quot;+TextBox1.Left+&quot; Top = &quot;+TextBox1.Top;\n\t}\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_PointToClient_System_Drawing_Point_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_PointToClient_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PointToClient(Point)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the location of the specified screen point into client coordinates.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Drawing.Point PointToClient (System.Drawing.Point p);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>p</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The screen coordinate <a class=\"xref\" href=\"system.drawing.point\" data-linktype=\"relative-path\">Point</a> to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.point\" data-linktype=\"relative-path\">Point</a> that represents the converted <a class=\"xref\" href=\"system.drawing.point\" data-linktype=\"relative-path\">Point</a>, <code>p</code>, in client coordinates.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example enables the user to drag an image or image file onto the form, and have it be displayed at the point on it is dropped. The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnPaint_\" data-linktype=\"relative-path\">OnPaint</a> method is overridden to repaint the image each time the form is painted; otherwise the image would only persist until the next repainting. The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragEnter\" data-linktype=\"relative-path\">DragEnter</a> event-handling method determines the type of data being dragged into the form and provides the appropriate feedback. The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragDrop\" data-linktype=\"relative-path\">DragDrop</a> event-handling method displays the image on the form, if an <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> can be created from the data. Because the <a class=\"xref\" href=\"system.windows.forms.drageventargs#System_Windows_Forms_DragEventArgs_X_\" data-linktype=\"relative-path\">X</a> and <a class=\"xref\" href=\"system.windows.forms.drageventargs#System_Windows_Forms_DragEventArgs_Y_\" data-linktype=\"relative-path\">Y</a> values are screen coordinates, the example uses the PointToClient method to convert them to client coordinates.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control.DragOperations#1\">private Image picture;\nprivate Point pictureLocation;\n\npublic Form1()\n{\n   // Enable drag-and-drop operations and \n   // add handlers for DragEnter and DragDrop.\n   this.AllowDrop = true;\n   this.DragDrop += new DragEventHandler(this.Form1_DragDrop);\n   this.DragEnter += new DragEventHandler(this.Form1_DragEnter);\n}\n\nprotected override void OnPaint(PaintEventArgs e)\n{\n   // If there is an image and it has a location, \n   // paint it when the Form is repainted.\n   base.OnPaint(e);\n   if(this.picture != null &amp;&amp; this.pictureLocation != Point.Empty)\n   {\n      e.Graphics.DrawImage(this.picture, this.pictureLocation);\n   }\n}\n\nprivate void Form1_DragDrop(object sender, DragEventArgs e)\n{\n   // Handle FileDrop data.\n   if(e.Data.GetDataPresent(DataFormats.FileDrop) )\n   {\n      // Assign the file names to a string array, in \n      // case the user has selected multiple files.\n      string[] files = (string[])e.Data.GetData(DataFormats.FileDrop);\n      try\n      {\n         // Assign the first image to the picture variable.\n         this.picture = Image.FromFile(files[0]);\n         // Set the picture location equal to the drop point.\n         this.pictureLocation = this.PointToClient(new Point(e.X, e.Y) );\n      }\n      catch(Exception ex)\n      {\n         MessageBox.Show(ex.Message);\n         return;\n      }\n   }\n\n   // Handle Bitmap data.\n   if(e.Data.GetDataPresent(DataFormats.Bitmap) )\n   {\n      try\n      {\n         // Create an Image and assign it to the picture variable.\n         this.picture = (Image)e.Data.GetData(DataFormats.Bitmap);\n         // Set the picture location equal to the drop point.\n         this.pictureLocation = this.PointToClient(new Point(e.X, e.Y) );\n      }\n      catch(Exception ex)\n      {\n         MessageBox.Show(ex.Message);\n         return;\n      }\n   }\n   // Force the form to be redrawn with the image.\n   this.Invalidate();\n}\n\nprivate void Form1_DragEnter(object sender, DragEventArgs e)\n{\n   // If the data is a file or a bitmap, display the copy cursor.\n   if (e.Data.GetDataPresent(DataFormats.Bitmap) || \n      e.Data.GetDataPresent(DataFormats.FileDrop) ) \n   {\n      e.Effect = DragDropEffects.Copy;\n   }\n   else\n   {\n      e.Effect = DragDropEffects.None;\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control.DragOperations#1\">   private:\n      Image^ picture;\n      Point pictureLocation;\n\n   public:\n      Form1()\n      {\n         \n         // Enable drag-and-drop operations and\n         // add handlers for DragEnter and DragDrop.\n         this-&gt;AllowDrop = true;\n         this-&gt;DragDrop += gcnew DragEventHandler( this, &amp;Form1::Form1_DragDrop );\n         this-&gt;DragEnter += gcnew DragEventHandler( this, &amp;Form1::Form1_DragEnter );\n      }\n\n   protected:\n      virtual void OnPaint( PaintEventArgs^ e ) override\n      {\n         \n         // If there is an image and it has a location,\n         // paint it when the Form is repainted.\n         Form::OnPaint( e );\n         if ( this-&gt;picture != nullptr &amp;&amp; this-&gt;pictureLocation != Point::Empty )\n         {\n            e-&gt;Graphics-&gt;DrawImage( this-&gt;picture, this-&gt;pictureLocation );\n         }\n      }\n\n   private:\n      void Form1_DragDrop( Object^ /*sender*/, DragEventArgs^ e )\n      {\n         \n         // Handle FileDrop data.\n         if ( e-&gt;Data-&gt;GetDataPresent( DataFormats::FileDrop ) )\n         {\n            // Assign the file names to a String* array, in\n            // case the user has selected multiple files.\n            array&lt;String^&gt;^files = (array&lt;String^&gt;^)e-&gt;Data-&gt;GetData( DataFormats::FileDrop );\n            try\n            {\n               // Assign the first image to the picture variable.\n               this-&gt;picture = Image::FromFile( files[ 0 ] );\n               \n               // Set the picture location equal to the drop point.\n               this-&gt;pictureLocation = this-&gt;PointToClient( Point(e-&gt;X,e-&gt;Y) );\n            }\n            catch ( Exception^ ex ) \n            {\n               MessageBox::Show( ex-&gt;Message );\n               return;\n            }\n\n         }\n         \n         // Handle Bitmap data.\n         if ( e-&gt;Data-&gt;GetDataPresent( DataFormats::Bitmap ) )\n         {\n            try\n            {\n               // Create an Image and assign it to the picture variable.\n               this-&gt;picture = dynamic_cast&lt;Image^&gt;(e-&gt;Data-&gt;GetData( DataFormats::Bitmap ));\n\n               // Set the picture location equal to the drop point.\n               this-&gt;pictureLocation = this-&gt;PointToClient( Point(e-&gt;X,e-&gt;Y) );\n            }\n            catch ( Exception^ ex ) \n            {\n               MessageBox::Show( ex-&gt;Message );\n               return;\n            }\n         }\n         \n         // Force the form to be redrawn with the image.\n         this-&gt;Invalidate();\n      }\n\n      void Form1_DragEnter( Object^ /*sender*/, DragEventArgs^ e )\n      {\n         // If the data is a file or a bitmap, display the copy cursor.\n         if ( e-&gt;Data-&gt;GetDataPresent( DataFormats::Bitmap ) || e-&gt;Data-&gt;GetDataPresent( DataFormats::FileDrop ) )\n         {\n            e-&gt;Effect = DragDropEffects::Copy;\n         }\n         else\n         {\n            e-&gt;Effect = DragDropEffects::None;\n         }\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control.DragOperations#1\">Private picture As Image\nPrivate pictureLocation As Point\n\nPublic Sub New()\n   &#39; Enable drag-and-drop operations.\n   Me.AllowDrop = True\nEnd Sub\n\nProtected Overrides Sub OnPaint(ByVal e As PaintEventArgs)\n   MyBase.OnPaint(e)\n\n   &#39; If there is an image and it has a location, \n   &#39; paint it when the Form is repainted.\n   If (Me.picture IsNot Nothing) And _\n     Not (Me.pictureLocation.Equals(Point.Empty)) Then\n      e.Graphics.DrawImage(Me.picture, Me.pictureLocation)\n   End If\nEnd Sub\n\nPrivate Sub Form1_DragDrop(ByVal sender As Object, _\n  ByVal e As DragEventArgs) Handles MyBase.DragDrop\n   &#39; Handle FileDrop data.\n   If e.Data.GetDataPresent(DataFormats.FileDrop) Then\n      &#39; Assign the file names to a string array, in \n      &#39; case the user has selected multiple files.\n      Dim files As String() = CType(e.Data.GetData(DataFormats.FileDrop), String())\n      Try\n         &#39; Assign the first image to the &#39;picture&#39; variable.\n         Me.picture = Image.FromFile(files(0))\n         &#39; Set the picture location equal to the drop point.\n         Me.pictureLocation = Me.PointToClient(New Point(e.X, e.Y))\n      Catch ex As Exception\n         MessageBox.Show(ex.Message)\n         Return\n      End Try\n   End If\n\n   &#39; Handle Bitmap data.\n   If e.Data.GetDataPresent(DataFormats.Bitmap) Then\n      Try\n         &#39; Create an Image and assign it to the picture variable.\n         Me.picture = CType(e.Data.GetData(DataFormats.Bitmap), Image)\n         &#39; Set the picture location equal to the drop point.\n         Me.pictureLocation = Me.PointToClient(New Point(e.X, e.Y))\n      Catch ex As Exception\n         MessageBox.Show(ex.Message)\n         Return\n      End Try\n   End If\n\n   &#39; Force the form to be redrawn with the image.\n   Me.Invalidate()\nEnd Sub\n\nPrivate Sub Form1_DragEnter(ByVal sender As Object, _\n  ByVal e As DragEventArgs) Handles MyBase.DragEnter\n   &#39; If the data is a file or a bitmap, display the copy cursor.\n   If e.Data.GetDataPresent(DataFormats.Bitmap) _\n      Or e.Data.GetDataPresent(DataFormats.FileDrop) Then\n      e.Effect = DragDropEffects.Copy\n   Else\n      e.Effect = DragDropEffects.None\n   End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_PointToScreen_System_Drawing_Point_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_PointToScreen_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PointToScreen(Point)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the location of the specified client point into screen coordinates.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Drawing.Point PointToScreen (System.Drawing.Point p);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>p</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The client coordinate <a class=\"xref\" href=\"system.drawing.point\" data-linktype=\"relative-path\">Point</a> to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.point\" data-linktype=\"relative-path\">Point</a> that represents the converted <a class=\"xref\" href=\"system.drawing.point\" data-linktype=\"relative-path\">Point</a>, <code>p</code>, in screen coordinates.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BackColor_\" data-linktype=\"relative-path\">BackColor</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RectangleToScreen_\" data-linktype=\"relative-path\">RectangleToScreen</a>, PointToScreen, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseButtons_\" data-linktype=\"relative-path\">MouseButtons</a>, <a class=\"xref\" href=\"system.windows.forms.controlpaint#System_Windows_Forms_ControlPaint_DrawReversibleFrame_\" data-linktype=\"relative-path\">DrawReversibleFrame</a>, and <a class=\"xref\" href=\"system.drawing.rectangle#System_Drawing_Rectangle_IntersectsWith_\" data-linktype=\"relative-path\">IntersectsWith</a> members. To run the example, paste the following code in a form called Form1 containing several controls. This example requires that the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseMove\" data-linktype=\"relative-path\">MouseMove</a>, and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseUp\" data-linktype=\"relative-path\">MouseUp</a> events are connected to the event handlers defined in the example.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.RectangleToScreen#2\">    // The following three methods will draw a rectangle and allow \n    // the user to use the mouse to resize the rectangle.  If the \n    // rectangle intersects a control&#39;s client rectangle, the \n    // control&#39;s color will change.\n\n    bool isDrag = false;\n    Rectangle theRectangle = new Rectangle\n\t\t(new Point(0, 0), new Size(0, 0));\n    Point startPoint;\n\n    private void Form1_MouseDown(object sender, \n\t\tSystem.Windows.Forms.MouseEventArgs e)\n    {\n\n        // Set the isDrag variable to true and get the starting point \n        // by using the PointToScreen method to convert form \n\t\t// coordinates to screen coordinates.\n        if (e.Button==MouseButtons.Left)\n        {\n            isDrag = true;\n        }\n\n        Control control = (Control) sender;\n\n        // Calculate the startPoint by using the PointToScreen \n        // method.\n        startPoint = control.PointToScreen(new Point(e.X, e.Y));\n    }\n\n    private void Form1_MouseMove(object sender, \n\t\tSystem.Windows.Forms.MouseEventArgs e)\n    {\n\n        // If the mouse is being dragged, \n\t\t// undraw and redraw the rectangle as the mouse moves.\n        if (isDrag)\n\n            // Hide the previous rectangle by calling the \n\t\t\t// DrawReversibleFrame method with the same parameters.\n        {\n            ControlPaint.DrawReversibleFrame(theRectangle, \n\t\t\t\tthis.BackColor, FrameStyle.Dashed);\n\n            // Calculate the endpoint and dimensions for the new \n\t        // rectangle, again using the PointToScreen method.\n            Point endPoint = ((Control) sender).PointToScreen(new Point(e.X, e.Y));\n\n            int width = endPoint.X-startPoint.X;\n            int height = endPoint.Y-startPoint.Y;\n            theRectangle = new Rectangle(startPoint.X, \n\t\t\t\tstartPoint.Y, width, height);\n\n            // Draw the new rectangle by calling DrawReversibleFrame\n\t\t\t// again.  \n            ControlPaint.DrawReversibleFrame(theRectangle, \n\t\t\t\tthis.BackColor, FrameStyle.Dashed);\n        }\n    }\n\n    private void Form1_MouseUp(object sender, \n\t\tSystem.Windows.Forms.MouseEventArgs e)\n    {\n\n        // If the MouseUp event occurs, the user is not dragging.\n        isDrag = false;\n\n        // Draw the rectangle to be evaluated. Set a dashed frame style \n        // using the FrameStyle enumeration.\n        ControlPaint.DrawReversibleFrame(theRectangle, \n\t\t\tthis.BackColor, FrameStyle.Dashed);\n\n        // Find out which controls intersect the rectangle and \n        // change their color. The method uses the RectangleToScreen  \n        // method to convert the Control&#39;s client coordinates \n\t\t// to screen coordinates.\n\t    Rectangle controlRectangle;\n        for(int i = 0; i &lt; Controls.Count; i++)\n        {\n            controlRectangle = Controls[i].RectangleToScreen\n\t\t\t\t(Controls[i].ClientRectangle);\n            if (controlRectangle.IntersectsWith(theRectangle))\n            {\n                Controls[i].BackColor = Color.BurlyWood;\n            }\n        }\n\n        // Reset the rectangle.\n        theRectangle = new Rectangle(0, 0, 0, 0);\n    }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.RectangleToScreen#2\">private:\n   // The following three methods will draw a rectangle and allow \n   // the user to use the mouse to resize the rectangle.  If the \n   // rectangle intersects a control&#39;s client rectangle, the \n   // control&#39;s color will change.\n   bool isDrag;\n   Rectangle theRectangle;\n   Point startPoint;\n   void Form1_MouseDown( Object^ sender, System::Windows::Forms::MouseEventArgs^ e )\n   {\n      \n      // Set the isDrag variable to true and get the starting point \n      // by using the PointToScreen method to convert form \n      // coordinates to screen coordinates.\n      if ( e-&gt;Button == ::MouseButtons::Left )\n      {\n         isDrag = true;\n      }\n\n      Control^ control = dynamic_cast&lt;Control^&gt;(sender);\n      \n      // Calculate the startPoint by using the PointToScreen \n      // method.\n      startPoint = control-&gt;PointToScreen( Point(e-&gt;X,e-&gt;Y) );\n   }\n\n   void Form1_MouseMove( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n   {\n      \n      // If the mouse is being dragged, \n      // undraw and redraw the rectangle as the mouse moves.\n      if ( isDrag )\n      {\n         ControlPaint::DrawReversibleFrame( theRectangle, this-&gt;BackColor, FrameStyle::Dashed );\n         \n         // Calculate the endpoint and dimensions for the new \n         // rectangle, again using the PointToScreen method.\n         Point endPoint = this-&gt;PointToScreen( Point(e-&gt;X,e-&gt;Y) );\n         int width = endPoint.X - startPoint.X;\n         int height = endPoint.Y - startPoint.Y;\n         theRectangle = Rectangle(startPoint.X,startPoint.Y,width,height);\n         \n         // Draw the new rectangle by calling DrawReversibleFrame\n         // again.  \n         ControlPaint::DrawReversibleFrame( theRectangle, this-&gt;BackColor, FrameStyle::Dashed );\n      }\n   }\n\n   void Form1_MouseUp( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ /*e*/ )\n   {\n      \n      // If the MouseUp event occurs, the user is not dragging.\n      isDrag = false;\n      \n      // Draw the rectangle to be evaluated. Set a dashed frame style \n      // using the FrameStyle enumeration.\n      ControlPaint::DrawReversibleFrame( theRectangle, this-&gt;BackColor, FrameStyle::Dashed );\n      \n      // Find out which controls intersect the rectangle and \n      // change their color. The method uses the RectangleToScreen  \n      // method to convert the Control&#39;s client coordinates \n      // to screen coordinates.\n      Rectangle controlRectangle;\n      for ( int i = 0; i &lt; Controls-&gt;Count; i++ )\n      {\n         controlRectangle = Controls[ i ]-&gt;RectangleToScreen( Controls[ i ]-&gt;ClientRectangle );\n         if ( controlRectangle.IntersectsWith( theRectangle ) )\n         {\n            Controls[ i ]-&gt;BackColor = Color::BurlyWood;\n         }\n\n      }\n      \n      // Reset the rectangle.\n      theRectangle = Rectangle(0,0,0,0);\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.RectangleToScreen#2\">    &#39; The following three methods will draw a rectangle and allow \n    &#39; the user to use the mouse to resize the rectangle.  If the \n    &#39; rectangle intersects a control&#39;s client rectangle, the \n    &#39; control&#39;s color will change.\n\n    Dim isDrag As Boolean = False\n    Dim theRectangle As New rectangle(New Point(0, 0), New Size(0, 0))\n    Dim startPoint As Point\n\n    Private Sub Form1_MouseDown(ByVal sender As Object, ByVal e As _\n        System.Windows.Forms.MouseEventArgs) Handles MyBase.MouseDown\n\n        &#39; Set the isDrag variable to true and get the starting point \n        &#39; by using the PointToScreen method to convert form coordinates to\n        &#39; screen coordinates.\n        If (e.Button = MouseButtons.Left) Then\n            isDrag = True\n        End If\n\n        Dim control As Control = CType(sender, Control)\n\n        &#39; Calculate the startPoint by using the PointToScreen \n        &#39; method.\n        startPoint = control.PointToScreen(New Point(e.X, e.Y))\n    End Sub\n\n    Private Sub Form1_MouseMove(ByVal sender As Object, ByVal e As _\n    System.Windows.Forms.MouseEventArgs) Handles MyBase.MouseMove\n\n        &#39; If the mouse is being dragged, undraw and redraw the rectangle\n        &#39; as the mouse moves.\n        If (isDrag) Then\n\n            &#39; Hide the previous rectangle by calling the DrawReversibleFrame \n            &#39; method with the same parameters.\n            ControlPaint.DrawReversibleFrame(theRectangle, Me.BackColor, _\n                FrameStyle.Dashed)\n\n            &#39; Calculate the endpoint and dimensions for the new rectangle, \n            &#39; again using the PointToScreen method.\n            Dim endPoint As Point = CType(sender, Control).PointToScreen(New Point(e.X, e.Y))\n            Dim width As Integer = endPoint.X - startPoint.X\n            Dim height As Integer = endPoint.Y - startPoint.Y\n            theRectangle = New Rectangle(startPoint.X, startPoint.Y, _\n                width, height)\n\n            &#39; Draw the new rectangle by calling DrawReversibleFrame again.  \n            ControlPaint.DrawReversibleFrame(theRectangle, Me.BackColor, _\n                 FrameStyle.Dashed)\n        End If\n    End Sub\n\n    Private Sub Form1_MouseUp(ByVal sender As Object, ByVal e As _\n    System.Windows.Forms.MouseEventArgs) Handles MyBase.MouseUp\n\n        &#39; If the MouseUp event occurs, the user is not dragging.\n        isDrag = False\n\n        &#39; Draw the rectangle to be evaluated. Set a dashed frame style \n        &#39; using the FrameStyle enumeration.\n        ControlPaint.DrawReversibleFrame(theRectangle, Me.BackColor, _\n            FrameStyle.Dashed)\n\n        &#39; Find out which controls intersect the rectangle and change their color.\n        &#39; The method uses the RectangleToScreen method to convert the \n        &#39; Control&#39;s client coordinates to screen coordinates.\n        Dim i As Integer\n        Dim controlRectangle As Rectangle\n        For i = 0 To Controls.Count - 1\n            controlRectangle = Controls(i).RectangleToScreen _\n                (Controls(i).ClientRectangle)\n            If controlRectangle.IntersectsWith(theRectangle) Then\n                Controls(i).BackColor = Color.BurlyWood\n            End If\n        Next\n\n        &#39; Reset the rectangle.\n        theRectangle = New Rectangle(0, 0, 0, 0)\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_PreProcessControlMessage_System_Windows_Forms_Message__\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_PreProcessControlMessage_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreProcessControlMessage(Message)</div>        \r\n          </div>\r\n    \r\n            <p>Preprocesses keyboard or input messages within the message loop before they are dispatched.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.PreProcessControlState PreProcessControlMessage (ref System.Windows.Forms.Message msg);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>msg</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.message\" data-linktype=\"relative-path\">Message</a> that represents the message to process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.preprocesscontrolstate\" data-linktype=\"relative-path\">PreProcessControlState</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.windows.forms.preprocesscontrolstate\" data-linktype=\"relative-path\">PreProcessControlState</a> values, depending on whether <span class=\"xref\">stem.Windows.Forms.Control.PreProcessMessage*</span> is <code>true</code> or <code>false</code> and whether <span class=\"xref\">stem.Windows.Forms.Control.IsInputKey*</span> or <span class=\"xref\">stem.Windows.Forms.Control.IsInputChar*</span> are <code>true</code> or <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_PreProcessMessage_System_Windows_Forms_Message__\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_PreProcessMessage_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreProcessMessage(Message)</div>        \r\n          </div>\r\n    \r\n            <p>Preprocesses keyboard or input messages within the message loop before they are dispatched.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool PreProcessMessage (ref System.Windows.Forms.Message msg);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>msg</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.message\" data-linktype=\"relative-path\">Message</a>, passed by reference, that represents the message to process. The possible values are WM_KEYDOWN, WM_SYSKEYDOWN, WM_CHAR, and WM_SYSCHAR.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the message was processed by the control; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>PreProcessMessage is called by the application&#39;s message loop to preprocess input messages before they are dispatched. Possible values for the <code>msg</code> parameter are WM_KEYDOWN, WM_SYSKEYDOWN, WM_CHAR, and WM_SYSCHAR.  </p>\n<p> When overriding PreProcessMessage, a control should return <code>true</code> to indicate that it has processed the message. For messages that are not processed by the control, the result of <code>base.PreProcessMessage</code> should be returned. Controls will typically override one of the more specialized methods such as <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_IsInputChar_\" data-linktype=\"relative-path\">IsInputChar</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_IsInputKey_\" data-linktype=\"relative-path\">IsInputKey</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ProcessCmdKey_\" data-linktype=\"relative-path\">ProcessCmdKey</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ProcessDialogChar_\" data-linktype=\"relative-path\">ProcessDialogChar</a>, or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ProcessDialogKey_\" data-linktype=\"relative-path\">ProcessDialogKey</a> instead of overriding PreProcessMessage.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ProcessCmdKey_System_Windows_Forms_Message__System_Windows_Forms_Keys_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_ProcessCmdKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ProcessCmdKey(Message,Keys)</div>        \r\n          </div>\r\n    \r\n            <p>Processes a command key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual bool ProcessCmdKey (ref System.Windows.Forms.Message msg, System.Windows.Forms.Keys keyData);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>msg</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.message\" data-linktype=\"relative-path\">Message</a>, passed by reference, that represents the window message to process.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keyData</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.keys\" data-linktype=\"relative-path\">Keys</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.windows.forms.keys\" data-linktype=\"relative-path\">Keys</a> values that represents the key to process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the character was processed by the control; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is called during message preprocessing to handle command keys. Command keys are keys that always take precedence over regular input keys. Examples of command keys include accelerators and menu shortcuts. The method must return <code>true</code> to indicate that it has processed the command key, or <code>false</code> to indicate that the key is not a command key. This method is only called when the control is hosted in a Windows Forms application or as an ActiveX control.  </p>\n<p> The ProcessCmdKey method first determines whether the control has a <a class=\"xref\" href=\"system.windows.forms.contextmenu\" data-linktype=\"relative-path\">ContextMenu</a>, and if so, enables the <a class=\"xref\" href=\"system.windows.forms.contextmenu\" data-linktype=\"relative-path\">ContextMenu</a> to process the command key. If the command key is not a menu shortcut and the control has a parent, the key is passed to the parent&#39;s ProcessCmdKey method. The net effect is that command keys are &quot;bubbled&quot; up the control hierarchy. In addition to the key the user pressed, the key data also indicates which, if any, modifier keys were pressed at the same time as the key. Modifier keys include the SHIFT, CTRL, and ALT keys.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ProcessDialogChar_System_Char_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_ProcessDialogChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ProcessDialogChar(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Processes a dialog character.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual bool ProcessDialogChar (char charCode);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>charCode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character to process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the character was processed by the control; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is called during message preprocessing to handle dialog characters, such as control mnemonics. This method is called only if the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_IsInputChar_\" data-linktype=\"relative-path\">IsInputChar</a> method indicates that the control is not processing the character. The ProcessDialogChar method simply sends the character to the parent&#39;s ProcessDialogChar method, or returns <code>false</code> if the control has no parent. The <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> class overrides this method to perform actual processing of dialog characters. This method is only called when the control is hosted in a Windows Forms application or as an ActiveX control.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ProcessDialogKey_System_Windows_Forms_Keys_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_ProcessDialogKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ProcessDialogKey(Keys)</div>        \r\n          </div>\r\n    \r\n            <p>Processes a dialog key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual bool ProcessDialogKey (System.Windows.Forms.Keys keyData);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>keyData</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.keys\" data-linktype=\"relative-path\">Keys</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.windows.forms.keys\" data-linktype=\"relative-path\">Keys</a> values that represents the key to process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the key was processed by the control; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is called during message preprocessing to handle dialog characters, such as TAB, RETURN, ESC, and arrow keys. This method is called only if the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_IsInputKey_\" data-linktype=\"relative-path\">IsInputKey</a> method indicates that the control is not processing the key. The ProcessDialogKey simply sends the character to the parent&#39;s ProcessDialogKey method, or returns <code>false</code>if the control has no parent. The <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> class overrides this method to perform actual processing of dialog keys. This method is only called when the control is hosted in a Windows Forms application or as an ActiveX control.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ProcessKeyEventArgs_System_Windows_Forms_Message__\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_ProcessKeyEventArgs_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ProcessKeyEventArgs(Message)</div>        \r\n          </div>\r\n    \r\n            <p>Processes a key message and generates the appropriate control events.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual bool ProcessKeyEventArgs (ref System.Windows.Forms.Message m);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>m</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.message\" data-linktype=\"relative-path\">Message</a>, passed by reference, that represents the window message to process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the message was processed by the control; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is called when a control receives a keyboard message. The method is responsible for generating the appropriate key events for the message by calling the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnKeyPress_\" data-linktype=\"relative-path\">OnKeyPress</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnKeyDown_\" data-linktype=\"relative-path\">OnKeyDown</a>, or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnKeyUp_\" data-linktype=\"relative-path\">OnKeyUp</a> methods. The <code>m</code> parameter contains the window message that must be processed. Possible values for the <a class=\"xref\" href=\"system.windows.forms.message#System_Windows_Forms_Message_Msg_\" data-linktype=\"relative-path\">Msg</a> property are WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, WM_SYSKEYUP, and WM_IME_CHAR.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ProcessKeyMessage_System_Windows_Forms_Message__\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_ProcessKeyMessage_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ProcessKeyMessage(Message)</div>        \r\n          </div>\r\n    \r\n            <p>Processes a keyboard message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual bool ProcessKeyMessage (ref System.Windows.Forms.Message m);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>m</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.message\" data-linktype=\"relative-path\">Message</a>, passed by reference, that represents the window message to process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the message was processed by the control; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is called when a control receives a keyboard message. The method first determines whether the control has a parent; if so, it calls the parent&#39;s <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ProcessKeyPreview_\" data-linktype=\"relative-path\">ProcessKeyPreview</a> method. If the parent&#39;s <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ProcessKeyPreview_\" data-linktype=\"relative-path\">ProcessKeyPreview</a> method does not process the message then the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ProcessKeyEventArgs_\" data-linktype=\"relative-path\">ProcessKeyEventArgs</a> method is called to generate the appropriate keyboard events. The <code>m</code> parameter contains the window message that must be processed. Possible values for the <a class=\"xref\" href=\"system.windows.forms.message#System_Windows_Forms_Message_Msg_\" data-linktype=\"relative-path\">Msg</a> property are WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, and WM_SYSKEYUP.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ProcessKeyPreview_System_Windows_Forms_Message__\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_ProcessKeyPreview_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ProcessKeyPreview(Message)</div>        \r\n          </div>\r\n    \r\n            <p>Previews a keyboard message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual bool ProcessKeyPreview (ref System.Windows.Forms.Message m);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>m</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.message\" data-linktype=\"relative-path\">Message</a>, passed by reference, that represents the window message to process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the message was processed by the control; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is called by a child control when the child control receives a keyboard message. The child control calls this method before generating any keyboard events for the message. If this method returns <code>true</code>, the child control considers the message processed and does not generate any keyboard events. The <code>m</code> parameter contains the window message to preview. Possible values for the <a class=\"xref\" href=\"system.windows.forms.message#System_Windows_Forms_Message_Msg_\" data-linktype=\"relative-path\">Msg</a> property are WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, and WM_SYSKEYUP. The ProcessKeyPreview method simply sends the character to the parent&#39;s ProcessKeyPreview method, or returns <code>false</code> if the control has no parent. The <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> class overrides this method to perform actual processing of dialog keys.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ProcessMnemonic_System_Char_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_ProcessMnemonic_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ProcessMnemonic(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Processes a mnemonic character.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual bool ProcessMnemonic (char charCode);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>charCode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character to process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the character was processed as a mnemonic by the control; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is called to give a control the opportunity to process a mnemonic character. The method should determine whether the control is in a state to process mnemonics and if whether the given character represents a mnemonic. If so, the method should perform the action associated with the mnemonic and return <code>true</code>. If not, the method should return <code>false</code>. Implementations of this method often use the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_IsMnemonic_\" data-linktype=\"relative-path\">IsMnemonic</a> method to determine whether the given character matches a mnemonic in the control&#39;s text.  </p>\n<p> For example:  </p>\n<pre><code class=\"lang-c#\">if (CanSelect &amp;&amp; IsMnemonic(charCode, MyControl.Text) {  \n      // Perform action associated with mnemonic.  \n       }\n</code></pre><p> This default implementation of the ProcessMnemonic method simply returns <code>false</code> to indicate that the control has no mnemonic.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates an extension of the button class that overrides the ProcessMnemonic method to exhibit custom behavior. The example also demonstrates the use of the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CanSelect_\" data-linktype=\"relative-path\">CanSelect</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_IsMnemonic_\" data-linktype=\"relative-path\">IsMnemonic</a> properties. To run this example paste the following code after a form class, in the same file. Add a button of type <code>MnemonicButton</code> to the form.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.ProcessMnemonic#1\">// This button is a simple extension of the button class that overrides\n// the ProcessMnemonic method.  If the mnemonic is correctly entered,  \n// the message box will appear and the click event will be raised.  \npublic class MyMnemonicButton:Button\n\n\t// This method makes sure the control is selectable and the \n\t// mneumonic is correct before displaying the message box\n\t// and triggering the click event.\n{\n\t[UIPermission(\n        SecurityAction.Demand, Window = UIPermissionWindow.AllWindows)]\n        protected override bool ProcessMnemonic(char inputChar)\n\t{\n\n\t\tif (CanSelect&amp;&amp;IsMnemonic(inputChar, this.Text))\n\t\t{\n\t\t\tMessageBox.Show(&quot;You&#39;ve raised the click event &quot; +\n\t\t\t\t&quot;using the mnemonic.&quot;);\n\t\t\tthis.PerformClick();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.ProcessMnemonic#1\">// This button is a simple extension of the button class that overrides\n// the ProcessMnemonic method.  If the mnemonic is correctly entered,  \n// the message box will appear and the click event will be raised.  \n// This method makes sure the control is selectable and the \n// mnemonic is correct before displaying the message box\n// and triggering the click event.\npublic ref class MyMnemonicButton: public Button\n{\nprotected:\n   bool ProcessMnemonic( char inputChar )\n   {\n      if ( CanSelect &amp;&amp; IsMnemonic( inputChar, this-&gt;Text ) )\n      {\n         MessageBox::Show( &quot;You&#39;ve raised the click event &quot;\n         &quot;using the mnemonic.&quot; );\n         this-&gt;PerformClick();\n         return true;\n      }\n\n      return false;\n   }\n\n};\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.ProcessMnemonic#1\">&#39; This button is a simple extension of the button class that overrides\n&#39; the ProcessMnemonic method.  If the mnemonic is correctly entered,  \n&#39; the message box will appear and the click event will be raised.  \nPublic Class MyMnemonicButton\n    Inherits Button\n\n    &#39; This method makes sure the control is selectable and the \n    &#39; mneumonic is correct before displaying the message box\n    &#39; and triggering the click event.\n    &lt;System.Security.Permissions.UIPermission( _\n    System.Security.Permissions.SecurityAction.Demand, Window:=UIPermissionWindow.AllWindows)&gt; _\n    Protected Overrides Function ProcessMnemonic( _\n        ByVal inputChar As Char) As Boolean\n\n        If (CanSelect And IsMnemonic(inputChar, Me.Text)) Then\n            MessageBox.Show(&quot;You&#39;ve raised the click event &quot; _\n                &amp; &quot;using the mnemonic.&quot;)\n            Me.PerformClick()\n            Return True\n        End If\n        Return False\n    End Function\n\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_RaiseDragEvent_System_Object_System_Windows_Forms_DragEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_RaiseDragEvent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RaiseDragEvent(Object,DragEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the appropriate drag event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void RaiseDragEvent (object key, System.Windows.Forms.DragEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The event to raise.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_RaiseKeyEvent_System_Object_System_Windows_Forms_KeyEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_RaiseKeyEvent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RaiseKeyEvent(Object,KeyEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the appropriate key event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void RaiseKeyEvent (object key, System.Windows.Forms.KeyEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The event to raise.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_RaiseMouseEvent_System_Object_System_Windows_Forms_MouseEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_RaiseMouseEvent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RaiseMouseEvent(Object,MouseEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the appropriate mouse event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void RaiseMouseEvent (object key, System.Windows.Forms.MouseEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The event to raise.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.mouseeventargs\" data-linktype=\"relative-path\">MouseEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_RaisePaintEvent_System_Object_System_Windows_Forms_PaintEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_RaisePaintEvent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RaisePaintEvent(Object,PaintEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the appropriate paint event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void RaisePaintEvent (object key, System.Windows.Forms.PaintEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The event to raise.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.painteventargs\" data-linktype=\"relative-path\">PaintEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.painteventargs\" data-linktype=\"relative-path\">PaintEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_RecreateHandle\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_RecreateHandle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RecreateHandle()</div>        \r\n          </div>\r\n    \r\n            <p>Forces the re-creation of the handle for the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void RecreateHandle ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The RecreateHandle method is called whenever parameters are needed for a new control, but using a call from <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_UpdateStyles_\" data-linktype=\"relative-path\">UpdateStyles</a> to <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CreateParams_\" data-linktype=\"relative-path\">CreateParams</a> is insufficient. This method also calls <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DestroyHandle_\" data-linktype=\"relative-path\">DestroyHandle</a> and<a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CreateHandle_\" data-linktype=\"relative-path\">CreateHandle</a> and sets <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RecreatingHandle_\" data-linktype=\"relative-path\">RecreatingHandle</a> to <code>true</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_RectangleToClient_System_Drawing_Rectangle_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_RectangleToClient_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RectangleToClient(Rectangle)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the size and location of the specified screen rectangle in client coordinates.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Drawing.Rectangle RectangleToClient (System.Drawing.Rectangle r);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>r</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The screen coordinate <a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a> to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a> that represents the converted <a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a>, <code>r</code>, in client coordinates.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_RectangleToScreen_System_Drawing_Rectangle_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_RectangleToScreen_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RectangleToScreen(Rectangle)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the size and location of the specified client rectangle in screen coordinates.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Drawing.Rectangle RectangleToScreen (System.Drawing.Rectangle r);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>r</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The client coordinate <a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a> to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a> that represents the converted <a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a>, <code>p</code>, in screen coordinates.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BackColor_\" data-linktype=\"relative-path\">BackColor</a>, RectangleToScreen, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_PointToScreen_\" data-linktype=\"relative-path\">PointToScreen</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseButtons_\" data-linktype=\"relative-path\">MouseButtons</a>, <a class=\"xref\" href=\"system.windows.forms.controlpaint#System_Windows_Forms_ControlPaint_DrawReversibleFrame_\" data-linktype=\"relative-path\">DrawReversibleFrame</a>, and <a class=\"xref\" href=\"system.drawing.rectangle#System_Drawing_Rectangle_IntersectsWith_\" data-linktype=\"relative-path\">IntersectsWith</a> members. To run the example, paste the following code in a form called <strong>Form1</strong> containing several controls. This example requires that the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseMove\" data-linktype=\"relative-path\">MouseMove</a>, and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseUp\" data-linktype=\"relative-path\">MouseUp</a> events are connected to the event handlers defined in the example.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.RectangleToScreen#2\">    // The following three methods will draw a rectangle and allow \n    // the user to use the mouse to resize the rectangle.  If the \n    // rectangle intersects a control&#39;s client rectangle, the \n    // control&#39;s color will change.\n\n    bool isDrag = false;\n    Rectangle theRectangle = new Rectangle\n\t\t(new Point(0, 0), new Size(0, 0));\n    Point startPoint;\n\n    private void Form1_MouseDown(object sender, \n\t\tSystem.Windows.Forms.MouseEventArgs e)\n    {\n\n        // Set the isDrag variable to true and get the starting point \n        // by using the PointToScreen method to convert form \n\t\t// coordinates to screen coordinates.\n        if (e.Button==MouseButtons.Left)\n        {\n            isDrag = true;\n        }\n\n        Control control = (Control) sender;\n\n        // Calculate the startPoint by using the PointToScreen \n        // method.\n        startPoint = control.PointToScreen(new Point(e.X, e.Y));\n    }\n\n    private void Form1_MouseMove(object sender, \n\t\tSystem.Windows.Forms.MouseEventArgs e)\n    {\n\n        // If the mouse is being dragged, \n\t\t// undraw and redraw the rectangle as the mouse moves.\n        if (isDrag)\n\n            // Hide the previous rectangle by calling the \n\t\t\t// DrawReversibleFrame method with the same parameters.\n        {\n            ControlPaint.DrawReversibleFrame(theRectangle, \n\t\t\t\tthis.BackColor, FrameStyle.Dashed);\n\n            // Calculate the endpoint and dimensions for the new \n\t        // rectangle, again using the PointToScreen method.\n            Point endPoint = ((Control) sender).PointToScreen(new Point(e.X, e.Y));\n\n            int width = endPoint.X-startPoint.X;\n            int height = endPoint.Y-startPoint.Y;\n            theRectangle = new Rectangle(startPoint.X, \n\t\t\t\tstartPoint.Y, width, height);\n\n            // Draw the new rectangle by calling DrawReversibleFrame\n\t\t\t// again.  \n            ControlPaint.DrawReversibleFrame(theRectangle, \n\t\t\t\tthis.BackColor, FrameStyle.Dashed);\n        }\n    }\n\n    private void Form1_MouseUp(object sender, \n\t\tSystem.Windows.Forms.MouseEventArgs e)\n    {\n\n        // If the MouseUp event occurs, the user is not dragging.\n        isDrag = false;\n\n        // Draw the rectangle to be evaluated. Set a dashed frame style \n        // using the FrameStyle enumeration.\n        ControlPaint.DrawReversibleFrame(theRectangle, \n\t\t\tthis.BackColor, FrameStyle.Dashed);\n\n        // Find out which controls intersect the rectangle and \n        // change their color. The method uses the RectangleToScreen  \n        // method to convert the Control&#39;s client coordinates \n\t\t// to screen coordinates.\n\t    Rectangle controlRectangle;\n        for(int i = 0; i &lt; Controls.Count; i++)\n        {\n            controlRectangle = Controls[i].RectangleToScreen\n\t\t\t\t(Controls[i].ClientRectangle);\n            if (controlRectangle.IntersectsWith(theRectangle))\n            {\n                Controls[i].BackColor = Color.BurlyWood;\n            }\n        }\n\n        // Reset the rectangle.\n        theRectangle = new Rectangle(0, 0, 0, 0);\n    }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.RectangleToScreen#2\">private:\n   // The following three methods will draw a rectangle and allow \n   // the user to use the mouse to resize the rectangle.  If the \n   // rectangle intersects a control&#39;s client rectangle, the \n   // control&#39;s color will change.\n   bool isDrag;\n   Rectangle theRectangle;\n   Point startPoint;\n   void Form1_MouseDown( Object^ sender, System::Windows::Forms::MouseEventArgs^ e )\n   {\n      \n      // Set the isDrag variable to true and get the starting point \n      // by using the PointToScreen method to convert form \n      // coordinates to screen coordinates.\n      if ( e-&gt;Button == ::MouseButtons::Left )\n      {\n         isDrag = true;\n      }\n\n      Control^ control = dynamic_cast&lt;Control^&gt;(sender);\n      \n      // Calculate the startPoint by using the PointToScreen \n      // method.\n      startPoint = control-&gt;PointToScreen( Point(e-&gt;X,e-&gt;Y) );\n   }\n\n   void Form1_MouseMove( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n   {\n      \n      // If the mouse is being dragged, \n      // undraw and redraw the rectangle as the mouse moves.\n      if ( isDrag )\n      {\n         ControlPaint::DrawReversibleFrame( theRectangle, this-&gt;BackColor, FrameStyle::Dashed );\n         \n         // Calculate the endpoint and dimensions for the new \n         // rectangle, again using the PointToScreen method.\n         Point endPoint = this-&gt;PointToScreen( Point(e-&gt;X,e-&gt;Y) );\n         int width = endPoint.X - startPoint.X;\n         int height = endPoint.Y - startPoint.Y;\n         theRectangle = Rectangle(startPoint.X,startPoint.Y,width,height);\n         \n         // Draw the new rectangle by calling DrawReversibleFrame\n         // again.  \n         ControlPaint::DrawReversibleFrame( theRectangle, this-&gt;BackColor, FrameStyle::Dashed );\n      }\n   }\n\n   void Form1_MouseUp( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ /*e*/ )\n   {\n      \n      // If the MouseUp event occurs, the user is not dragging.\n      isDrag = false;\n      \n      // Draw the rectangle to be evaluated. Set a dashed frame style \n      // using the FrameStyle enumeration.\n      ControlPaint::DrawReversibleFrame( theRectangle, this-&gt;BackColor, FrameStyle::Dashed );\n      \n      // Find out which controls intersect the rectangle and \n      // change their color. The method uses the RectangleToScreen  \n      // method to convert the Control&#39;s client coordinates \n      // to screen coordinates.\n      Rectangle controlRectangle;\n      for ( int i = 0; i &lt; Controls-&gt;Count; i++ )\n      {\n         controlRectangle = Controls[ i ]-&gt;RectangleToScreen( Controls[ i ]-&gt;ClientRectangle );\n         if ( controlRectangle.IntersectsWith( theRectangle ) )\n         {\n            Controls[ i ]-&gt;BackColor = Color::BurlyWood;\n         }\n\n      }\n      \n      // Reset the rectangle.\n      theRectangle = Rectangle(0,0,0,0);\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.RectangleToScreen#2\">    &#39; The following three methods will draw a rectangle and allow \n    &#39; the user to use the mouse to resize the rectangle.  If the \n    &#39; rectangle intersects a control&#39;s client rectangle, the \n    &#39; control&#39;s color will change.\n\n    Dim isDrag As Boolean = False\n    Dim theRectangle As New rectangle(New Point(0, 0), New Size(0, 0))\n    Dim startPoint As Point\n\n    Private Sub Form1_MouseDown(ByVal sender As Object, ByVal e As _\n        System.Windows.Forms.MouseEventArgs) Handles MyBase.MouseDown\n\n        &#39; Set the isDrag variable to true and get the starting point \n        &#39; by using the PointToScreen method to convert form coordinates to\n        &#39; screen coordinates.\n        If (e.Button = MouseButtons.Left) Then\n            isDrag = True\n        End If\n\n        Dim control As Control = CType(sender, Control)\n\n        &#39; Calculate the startPoint by using the PointToScreen \n        &#39; method.\n        startPoint = control.PointToScreen(New Point(e.X, e.Y))\n    End Sub\n\n    Private Sub Form1_MouseMove(ByVal sender As Object, ByVal e As _\n    System.Windows.Forms.MouseEventArgs) Handles MyBase.MouseMove\n\n        &#39; If the mouse is being dragged, undraw and redraw the rectangle\n        &#39; as the mouse moves.\n        If (isDrag) Then\n\n            &#39; Hide the previous rectangle by calling the DrawReversibleFrame \n            &#39; method with the same parameters.\n            ControlPaint.DrawReversibleFrame(theRectangle, Me.BackColor, _\n                FrameStyle.Dashed)\n\n            &#39; Calculate the endpoint and dimensions for the new rectangle, \n            &#39; again using the PointToScreen method.\n            Dim endPoint As Point = CType(sender, Control).PointToScreen(New Point(e.X, e.Y))\n            Dim width As Integer = endPoint.X - startPoint.X\n            Dim height As Integer = endPoint.Y - startPoint.Y\n            theRectangle = New Rectangle(startPoint.X, startPoint.Y, _\n                width, height)\n\n            &#39; Draw the new rectangle by calling DrawReversibleFrame again.  \n            ControlPaint.DrawReversibleFrame(theRectangle, Me.BackColor, _\n                 FrameStyle.Dashed)\n        End If\n    End Sub\n\n    Private Sub Form1_MouseUp(ByVal sender As Object, ByVal e As _\n    System.Windows.Forms.MouseEventArgs) Handles MyBase.MouseUp\n\n        &#39; If the MouseUp event occurs, the user is not dragging.\n        isDrag = False\n\n        &#39; Draw the rectangle to be evaluated. Set a dashed frame style \n        &#39; using the FrameStyle enumeration.\n        ControlPaint.DrawReversibleFrame(theRectangle, Me.BackColor, _\n            FrameStyle.Dashed)\n\n        &#39; Find out which controls intersect the rectangle and change their color.\n        &#39; The method uses the RectangleToScreen method to convert the \n        &#39; Control&#39;s client coordinates to screen coordinates.\n        Dim i As Integer\n        Dim controlRectangle As Rectangle\n        For i = 0 To Controls.Count - 1\n            controlRectangle = Controls(i).RectangleToScreen _\n                (Controls(i).ClientRectangle)\n            If controlRectangle.IntersectsWith(theRectangle) Then\n                Controls(i).BackColor = Color.BurlyWood\n            End If\n        Next\n\n        &#39; Reset the rectangle.\n        theRectangle = New Rectangle(0, 0, 0, 0)\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ReflectMessage_System_IntPtr_System_Windows_Forms_Message__\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_ReflectMessage_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReflectMessage(IntPtr,Message)</div>        \r\n          </div>\r\n    \r\n            <p>Reflects the specified message to the control that is bound to the specified handle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected static bool ReflectMessage (IntPtr hWnd, ref System.Windows.Forms.Message m);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>hWnd</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> representing the handle of the control to reflect the message to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>m</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.message\" data-linktype=\"relative-path\">Message</a> representing the Windows message to reflect.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the message was reflected; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ReflectMessage method is an infrastructure method and typically should not be called from your code.  </p>\n<p> If the <code>hWnd</code> parameter does not represent a valid control, the ReflectMessage method returns <code>false</code>.  </p>\n<p> Because Windows messages are returned to the top-level window, the ReflectMessage method is used to propagate the return message to the control that sent the message.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Refresh\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Refresh_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Refresh()</div>        \r\n          </div>\r\n    \r\n            <p>Forces the control to invalidate its client area and immediately redraw itself and any child controls.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Refresh ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ResetBackColor\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_ResetBackColor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResetBackColor()</div>        \r\n          </div>\r\n    \r\n            <p>Resets the <span class=\"xref\">stem.Windows.Forms.Control.BackColor*</span> property to its default value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void ResetBackColor ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is not relevant for this class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ResetBindings\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_ResetBindings_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResetBindings()</div>        \r\n          </div>\r\n    \r\n            <p>Causes a control bound to the <a class=\"xref\" href=\"system.windows.forms.bindingsource\" data-linktype=\"relative-path\">BindingSource</a> to reread all the items in the list and refresh their displayed values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ResetBindings ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is not relevant for this class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ResetCursor\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_ResetCursor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResetCursor()</div>        \r\n          </div>\r\n    \r\n            <p>Resets the <span class=\"xref\">stem.Windows.Forms.Control.Cursor*</span> property to its default value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void ResetCursor ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is not relevant for this class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ResetFont\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_ResetFont_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResetFont()</div>        \r\n          </div>\r\n    \r\n            <p>Resets the <span class=\"xref\">stem.Windows.Forms.Control.Font*</span> property to its default value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void ResetFont ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is not relevant for this class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ResetForeColor\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_ResetForeColor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResetForeColor()</div>        \r\n          </div>\r\n    \r\n            <p>Resets the <span class=\"xref\">stem.Windows.Forms.Control.ForeColor*</span> property to its default value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void ResetForeColor ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is not relevant for this class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ResetImeMode\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_ResetImeMode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResetImeMode()</div>        \r\n          </div>\r\n    \r\n            <p>Resets the <span class=\"xref\">stem.Windows.Forms.Control.ImeMode*</span> property to its default value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ResetImeMode ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is not relevant for this class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ResetMouseEventArgs\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_ResetMouseEventArgs_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResetMouseEventArgs()</div>        \r\n          </div>\r\n    \r\n            <p>Resets the control to handle the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseLeave\" data-linktype=\"relative-path\">MouseLeave</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void ResetMouseEventArgs ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ResetRightToLeft\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_ResetRightToLeft_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResetRightToLeft()</div>        \r\n          </div>\r\n    \r\n            <p>Resets the <span class=\"xref\">stem.Windows.Forms.Control.RightToLeft*</span> property to its default value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void ResetRightToLeft ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is not relevant for this class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ResetText\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_ResetText_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResetText()</div>        \r\n          </div>\r\n    \r\n            <p>Resets the <span class=\"xref\">stem.Windows.Forms.Control.Text*</span> property to its default value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void ResetText ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You typically use this method if you are either creating a designer for the <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> or creating your own control incorporating the <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ResumeLayout\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_ResumeLayout_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResumeLayout()</div>        \r\n          </div>\r\n    \r\n            <p>Resumes usual layout logic.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ResumeLayout ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling the ResumeLayout method forces an immediate layout if there are any pending layout requests.  </p>\n<p> The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SuspendLayout_\" data-linktype=\"relative-path\">SuspendLayout</a> and ResumeLayout methods are used in tandem to suppress multiple <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Layout\" data-linktype=\"relative-path\">Layout</a> events while you adjust multiple attributes of the control. For example, you would typically call the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SuspendLayout_\" data-linktype=\"relative-path\">SuspendLayout</a> method, then set the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Size_\" data-linktype=\"relative-path\">Size</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Location_\" data-linktype=\"relative-path\">Location</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Anchor_\" data-linktype=\"relative-path\">Anchor</a>, or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Dock_\" data-linktype=\"relative-path\">Dock</a> properties of the control, and then call the ResumeLayout method to enable the changes to take effect.  </p>\n<p> There must be no pending calls to <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SuspendLayout_\" data-linktype=\"relative-path\">SuspendLayout</a> for ResumeLayout to be successfully called.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example adds two buttons to a form. The example transactions the addition of the buttons by using the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SuspendLayout_\" data-linktype=\"relative-path\">SuspendLayout</a> and ResumeLayout methods.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control Members2#2\">private void AddButtons()\n{\n   // Suspend the form layout and add two buttons.\n   this.SuspendLayout();\n   Button buttonOK = new Button();\n   buttonOK.Location = new Point(10, 10);\n   buttonOK.Size = new Size(75, 25);\n   buttonOK.Text = &quot;OK&quot;;\n\n   Button buttonCancel = new Button();\n   buttonCancel.Location = new Point(90, 10);\n   buttonCancel.Size = new Size(75, 25);\n   buttonCancel.Text = &quot;Cancel&quot;;\n      \n   this.Controls.AddRange(new Control[]{buttonOK, buttonCancel});\n   this.ResumeLayout();\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control Members2#2\">   private:\n      void AddButtons()\n      {\n         // Suspend the form layout and add two buttons.\n         this-&gt;SuspendLayout();\n         Button^ buttonOK = gcnew Button;\n         buttonOK-&gt;Location = Point(10,10);\n         buttonOK-&gt;Size = System::Drawing::Size( 75, 25 );\n         buttonOK-&gt;Text = &quot;OK&quot;;\n         Button^ buttonCancel = gcnew Button;\n         buttonCancel-&gt;Location = Point(90,10);\n         buttonCancel-&gt;Size = System::Drawing::Size( 75, 25 );\n         buttonCancel-&gt;Text = &quot;Cancel&quot;;\n         array&lt;Control^&gt;^temp5 = {buttonOK,buttonCancel};\n         this-&gt;Controls-&gt;AddRange( temp5 );\n         this-&gt;ResumeLayout();\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control Members2#2\">Private Sub AddButtons()\n   &#39; Suspend the form layout and add two buttons.\n   Me.SuspendLayout()\n   Dim buttonOK As New Button()\n   buttonOK.Location = New Point(10, 10)\n   buttonOK.Size = New Size(75, 25)\n   buttonOK.Text = &quot;OK&quot;\n   \n   Dim buttonCancel As New Button()\n   buttonCancel.Location = New Point(90, 10)\n   buttonCancel.Size = New Size(75, 25)\n   buttonCancel.Text = &quot;Cancel&quot;\n   \n   Me.Controls.AddRange(New Control() {buttonOK, buttonCancel})\n   Me.ResumeLayout()\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ResumeLayout_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_ResumeLayout_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResumeLayout(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Resumes usual layout logic, optionally forcing an immediate layout of pending layout requests.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ResumeLayout (bool performLayout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>performLayout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to execute pending layout requests; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ResumeLayout_\" data-linktype=\"relative-path\">ResumeLayout</a> method forces an immediate layout if there are any pending layout requests. When the <code>performLayout</code> parameter is set to <code>true</code>, an immediate layout occurs if there are any pending layout requests.  </p>\n<p> The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SuspendLayout_\" data-linktype=\"relative-path\">SuspendLayout</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ResumeLayout_\" data-linktype=\"relative-path\">ResumeLayout</a> methods are used in tandem to suppress multiple <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Layout\" data-linktype=\"relative-path\">Layout</a> events while you adjust multiple attributes of the control. For example, you would typically call the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SuspendLayout_\" data-linktype=\"relative-path\">SuspendLayout</a> method, then set the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Size_\" data-linktype=\"relative-path\">Size</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Location_\" data-linktype=\"relative-path\">Location</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Anchor_\" data-linktype=\"relative-path\">Anchor</a>, or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Dock_\" data-linktype=\"relative-path\">Dock</a> properties of the control, and then call the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ResumeLayout_\" data-linktype=\"relative-path\">ResumeLayout</a> method to enable the changes to take effect.  </p>\n<p> There must be no pending calls to <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SuspendLayout_\" data-linktype=\"relative-path\">SuspendLayout</a> for <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ResumeLayout_\" data-linktype=\"relative-path\">ResumeLayout</a> to be successfully called.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When adding several controls to a parent control, it is recommended that you call the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SuspendLayout_\" data-linktype=\"relative-path\">SuspendLayout</a> method before initializing the controls to be added. After adding the controls to the parent control, call the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ResumeLayout_\" data-linktype=\"relative-path\">ResumeLayout</a> method. This will increase the performance of applications with many controls.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_RtlTranslateAlignment_System_Drawing_ContentAlignment_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_RtlTranslateAlignment_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RtlTranslateAlignment(ContentAlignment)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified <a class=\"xref\" href=\"system.drawing.contentalignment\" data-linktype=\"relative-path\">ContentAlignment</a> to the appropriate <a class=\"xref\" href=\"system.drawing.contentalignment\" data-linktype=\"relative-path\">ContentAlignment</a> to support right-to-left text.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected System.Drawing.ContentAlignment RtlTranslateAlignment (System.Drawing.ContentAlignment align);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>align</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.contentalignment\" data-linktype=\"relative-path\">ContentAlignment</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.drawing.contentalignment\" data-linktype=\"relative-path\">ContentAlignment</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.contentalignment\" data-linktype=\"relative-path\">ContentAlignment</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.drawing.contentalignment\" data-linktype=\"relative-path\">ContentAlignment</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RightToLeft_\" data-linktype=\"relative-path\">RightToLeft</a> property of <a class=\"xref\" href=\"system.windows.forms.righttoleft\" data-linktype=\"relative-path\">RightToLeft</a> is set to <code>No</code>, the return value is equal to the <code>align</code> parameter passed in.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_RtlTranslateAlignment_System_Windows_Forms_HorizontalAlignment_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_RtlTranslateAlignment_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RtlTranslateAlignment(HorizontalAlignment)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified <a class=\"xref\" href=\"system.windows.forms.horizontalalignment\" data-linktype=\"relative-path\">HorizontalAlignment</a> to the appropriate <a class=\"xref\" href=\"system.windows.forms.horizontalalignment\" data-linktype=\"relative-path\">HorizontalAlignment</a> to support right-to-left text.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected System.Windows.Forms.HorizontalAlignment RtlTranslateAlignment (System.Windows.Forms.HorizontalAlignment align);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>align</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.horizontalalignment\" data-linktype=\"relative-path\">HorizontalAlignment</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.windows.forms.horizontalalignment\" data-linktype=\"relative-path\">HorizontalAlignment</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.horizontalalignment\" data-linktype=\"relative-path\">HorizontalAlignment</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.windows.forms.horizontalalignment\" data-linktype=\"relative-path\">HorizontalAlignment</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RightToLeft_\" data-linktype=\"relative-path\">RightToLeft</a> property of <a class=\"xref\" href=\"system.windows.forms.righttoleft\" data-linktype=\"relative-path\">RightToLeft</a> is set to <code>No</code>, the return value is equal to the <code>align</code> parameter passed in.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_RtlTranslateAlignment_System_Windows_Forms_LeftRightAlignment_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_RtlTranslateAlignment_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RtlTranslateAlignment(LeftRightAlignment)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified <a class=\"xref\" href=\"system.windows.forms.leftrightalignment\" data-linktype=\"relative-path\">LeftRightAlignment</a> to the appropriate <a class=\"xref\" href=\"system.windows.forms.leftrightalignment\" data-linktype=\"relative-path\">LeftRightAlignment</a> to support right-to-left text.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected System.Windows.Forms.LeftRightAlignment RtlTranslateAlignment (System.Windows.Forms.LeftRightAlignment align);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>align</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.leftrightalignment\" data-linktype=\"relative-path\">LeftRightAlignment</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.windows.forms.leftrightalignment\" data-linktype=\"relative-path\">LeftRightAlignment</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.leftrightalignment\" data-linktype=\"relative-path\">LeftRightAlignment</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.windows.forms.leftrightalignment\" data-linktype=\"relative-path\">LeftRightAlignment</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RightToLeft_\" data-linktype=\"relative-path\">RightToLeft</a> property of <a class=\"xref\" href=\"system.windows.forms.righttoleft\" data-linktype=\"relative-path\">RightToLeft</a> is set to <code>No</code>, the return value is equal to the <code>align</code> parameter passed in.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_RtlTranslateContent_System_Drawing_ContentAlignment_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_RtlTranslateContent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RtlTranslateContent(ContentAlignment)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified <a class=\"xref\" href=\"system.drawing.contentalignment\" data-linktype=\"relative-path\">ContentAlignment</a> to the appropriate <a class=\"xref\" href=\"system.drawing.contentalignment\" data-linktype=\"relative-path\">ContentAlignment</a> to support right-to-left text.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected System.Drawing.ContentAlignment RtlTranslateContent (System.Drawing.ContentAlignment align);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>align</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.contentalignment\" data-linktype=\"relative-path\">ContentAlignment</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.drawing.contentalignment\" data-linktype=\"relative-path\">ContentAlignment</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.contentalignment\" data-linktype=\"relative-path\">ContentAlignment</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.drawing.contentalignment\" data-linktype=\"relative-path\">ContentAlignment</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RightToLeft_\" data-linktype=\"relative-path\">RightToLeft</a> property of <a class=\"xref\" href=\"system.windows.forms.righttoleft\" data-linktype=\"relative-path\">RightToLeft</a> is set to <code>No</code>, the return value is equal to the <code>align</code> parameter passed in.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_RtlTranslateHorizontal_System_Windows_Forms_HorizontalAlignment_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_RtlTranslateHorizontal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RtlTranslateHorizontal(HorizontalAlignment)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified <a class=\"xref\" href=\"system.windows.forms.horizontalalignment\" data-linktype=\"relative-path\">HorizontalAlignment</a> to the appropriate <a class=\"xref\" href=\"system.windows.forms.horizontalalignment\" data-linktype=\"relative-path\">HorizontalAlignment</a> to support right-to-left text.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected System.Windows.Forms.HorizontalAlignment RtlTranslateHorizontal (System.Windows.Forms.HorizontalAlignment align);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>align</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.horizontalalignment\" data-linktype=\"relative-path\">HorizontalAlignment</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.windows.forms.horizontalalignment\" data-linktype=\"relative-path\">HorizontalAlignment</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.horizontalalignment\" data-linktype=\"relative-path\">HorizontalAlignment</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.windows.forms.horizontalalignment\" data-linktype=\"relative-path\">HorizontalAlignment</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RightToLeft_\" data-linktype=\"relative-path\">RightToLeft</a> property of <a class=\"xref\" href=\"system.windows.forms.righttoleft\" data-linktype=\"relative-path\">RightToLeft</a> is set to <code>No</code>, the return value is equal to the <code>align</code> parameter passed in.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_RtlTranslateLeftRight_System_Windows_Forms_LeftRightAlignment_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_RtlTranslateLeftRight_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RtlTranslateLeftRight(LeftRightAlignment)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified <a class=\"xref\" href=\"system.windows.forms.leftrightalignment\" data-linktype=\"relative-path\">LeftRightAlignment</a> to the appropriate <a class=\"xref\" href=\"system.windows.forms.leftrightalignment\" data-linktype=\"relative-path\">LeftRightAlignment</a> to support right-to-left text.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected System.Windows.Forms.LeftRightAlignment RtlTranslateLeftRight (System.Windows.Forms.LeftRightAlignment align);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>align</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.leftrightalignment\" data-linktype=\"relative-path\">LeftRightAlignment</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.windows.forms.leftrightalignment\" data-linktype=\"relative-path\">LeftRightAlignment</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.leftrightalignment\" data-linktype=\"relative-path\">LeftRightAlignment</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.windows.forms.leftrightalignment\" data-linktype=\"relative-path\">LeftRightAlignment</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RightToLeft_\" data-linktype=\"relative-path\">RightToLeft</a> property of <a class=\"xref\" href=\"system.windows.forms.righttoleft\" data-linktype=\"relative-path\">RightToLeft</a> is set to <code>No</code>, the return value is equal to the <code>align</code> parameter passed in.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Scale_System_Drawing_SizeF_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Scale_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Scale(SizeF)</div>        \r\n          </div>\r\n    \r\n            <p>Scales the control and all child controls by the specified scaling factor.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Scale (System.Drawing.SizeF factor);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>factor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.sizef\" data-linktype=\"relative-path\">SizeF</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.sizef\" data-linktype=\"relative-path\">SizeF</a> containing the horizontal and vertical scaling factors.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Scale method scales the control by the specified scaling <code>factor</code>. It also recursively scales all child controls if the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ScaleChildren_\" data-linktype=\"relative-path\">ScaleChildren</a> property is <code>true</code>. Internally, this method calls <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ScaleControl_\" data-linktype=\"relative-path\">ScaleControl</a> to scale each control.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Scale_System_Single_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Scale_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Scale(Single)</div>        \r\n          </div>\r\n    \r\n            <p>Scales the control and any child controls.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Scale (float ratio);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ratio</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The ratio to use for scaling.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Scale_System_Single_System_Single_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Scale_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Scale(Single,Single)</div>        \r\n          </div>\r\n    \r\n            <p>Scales the entire control and any child controls.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Scale (float dx, float dy);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dx</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The horizontal scaling factor.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>dy</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The vertical scaling factor.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ScaleControl_System_Drawing_SizeF_System_Windows_Forms_BoundsSpecified_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_ScaleControl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ScaleControl(SizeF,BoundsSpecified)</div>        \r\n          </div>\r\n    \r\n            <p>Scales a control&#39;s location, size, padding and margin.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void ScaleControl (System.Drawing.SizeF factor, System.Windows.Forms.BoundsSpecified specified);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>factor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.sizef\" data-linktype=\"relative-path\">SizeF</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The factor by which the height and width of the control will be scaled.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>specified</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.boundsspecified\" data-linktype=\"relative-path\">BoundsSpecified</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.boundsspecified\" data-linktype=\"relative-path\">BoundsSpecified</a> value that specifies the bounds of the control to use when defining its size and position.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the control is top level, this will not scale the control&#39;s location. This does not scale children or the size of automatically sized controls. You can omit scaling in any direction by changing the value of the <code>specified</code> parameter.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <a class=\"xref\" href=\"system.windows.forms.boundsspecified\" data-linktype=\"relative-path\">BoundsSpecified</a>  \n\n <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Scale_\" data-linktype=\"relative-path\">Scale</a>  \n\n <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GetScaledBounds_\" data-linktype=\"relative-path\">GetScaledBounds</a>  \n\n <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SetBoundsCore_\" data-linktype=\"relative-path\">SetBoundsCore</a>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ScaleCore_System_Single_System_Single_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_ScaleCore_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ScaleCore(Single,Single)</div>        \r\n          </div>\r\n    \r\n            <p>This method is not relevant for this class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void ScaleCore (float dx, float dy);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dx</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The horizontal scaling factor.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>dy</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The vertical scaling factor.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is not relevant for this class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Select\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Select_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Select()</div>        \r\n          </div>\r\n    \r\n            <p>Activates the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Select ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Select method activates the control if the control&#39;s <code>Selectable</code> style bit is set to <code>true</code> in <a class=\"xref\" href=\"system.windows.forms.controlstyles\" data-linktype=\"relative-path\">ControlStyles</a>, it is contained in another control, and all its parent controls are both visible and enabled.  </p>\n<p> The Windows Forms controls in the following list are not selectable. Controls derived from controls in the list will also not be selectable.  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.windows.forms.label\" data-linktype=\"relative-path\">Label</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.panel\" data-linktype=\"relative-path\">Panel</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.groupbox\" data-linktype=\"relative-path\">GroupBox</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.picturebox\" data-linktype=\"relative-path\">PictureBox</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.progressbar\" data-linktype=\"relative-path\">ProgressBar</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.splitter\" data-linktype=\"relative-path\">Splitter</a>  \n</li>\n<li><p><a class=\"xref\" href=\"system.windows.forms.linklabel\" data-linktype=\"relative-path\">LinkLabel</a> (when there is no link present in the control)</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example selects the specified <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a>, if it is selectable.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.ControlMembers6#2\">   public:\n      void ControlSelect( Control^ control )\n      {\n         \n         // Select the control, if it can be selected.\n         if ( control-&gt;CanSelect )\n         {\n            control-&gt;Select(  );\n         }\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.ControlMembers6#2\">public void ControlSelect(Control control)\n{\n   // Select the control, if it can be selected.\n   if(control.CanSelect)\n   {\n      control.Select();\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.ControlMembers6#2\">Public Sub ControlSelect(control As Control)\n   &#39; Select the control, if it can be selected.\n   If control.CanSelect Then\n      control.Select()\n   End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Select_System_Boolean_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Select_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Select(Boolean,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Activates a child control. Optionally specifies the direction in the tab order to select the control from.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void Select (bool directed, bool forward);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>directed</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to specify the direction of the control to select; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>forward</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to move forward in the tab order; <code>false</code> to move backward in the tab order.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>directed</code> and <code>forward</code> parameters are used by container-style controls. When the <code>directed</code> parameter is set to <code>true</code>, the <code>forward</code> parameter is evaluated to determine which control to select. When <code>forward</code> is set to <code>true</code>, the next control in the tab order is selected; when <code>false</code>, the previous control in the tab order is selected.  </p>\n<p> The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Select_\" data-linktype=\"relative-path\">Select</a> method activates the control if the control&#39;s <code>Selectable</code> style bit is set to <code>true</code> in <a class=\"xref\" href=\"system.windows.forms.controlstyles\" data-linktype=\"relative-path\">ControlStyles</a>, it is contained in another control, and all its parent controls are both visible and enabled.  </p>\n<p> The Windows Forms controls in the following list are not selectable. Controls derived from controls in the list will also not be selectable.  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.windows.forms.label\" data-linktype=\"relative-path\">Label</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.panel\" data-linktype=\"relative-path\">Panel</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.groupbox\" data-linktype=\"relative-path\">GroupBox</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.picturebox\" data-linktype=\"relative-path\">PictureBox</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.progressbar\" data-linktype=\"relative-path\">ProgressBar</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.splitter\" data-linktype=\"relative-path\">Splitter</a>  \n</li>\n<li><p><a class=\"xref\" href=\"system.windows.forms.linklabel\" data-linktype=\"relative-path\">LinkLabel</a> (when there is no link present in the control)</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_SelectNextControl_System_Windows_Forms_Control_System_Boolean_System_Boolean_System_Boolean_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_SelectNextControl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectNextControl(Control,Boolean,Boolean,Boolean,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Activates the next control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool SelectNextControl (System.Windows.Forms.Control ctl, bool forward, bool tabStopOnly, bool nested, bool wrap);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ctl</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> at which to start the search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>forward</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to move forward in the tab order; <code>false</code> to move backward in the tab order.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>tabStopOnly</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to ignore the controls with the <span class=\"xref\">stem.Windows.Forms.Control.TabStop*</span> property set to <code>false</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>nested</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to include nested (children of child controls) child controls; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>wrap</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to continue searching from the first control in the tab order after the last control has been reached; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a control was activated; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The SelectNextControl method activates the next control in the tab order if the control&#39;s <code>Selectable</code> style bit is set to <code>true</code> in <a class=\"xref\" href=\"system.windows.forms.controlstyles\" data-linktype=\"relative-path\">ControlStyles</a>, it is contained in another control, and all its parent controls are both visible and enabled.  </p>\n<p> The Windows Forms controls in the following list are not selectable. Controls derived from controls in the list will also not be selectable.  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.windows.forms.label\" data-linktype=\"relative-path\">Label</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.panel\" data-linktype=\"relative-path\">Panel</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.groupbox\" data-linktype=\"relative-path\">GroupBox</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.picturebox\" data-linktype=\"relative-path\">PictureBox</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.progressbar\" data-linktype=\"relative-path\">ProgressBar</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.splitter\" data-linktype=\"relative-path\">Splitter</a>  \n</li>\n<li><p><a class=\"xref\" href=\"system.windows.forms.linklabel\" data-linktype=\"relative-path\">LinkLabel</a> (when there is no link present in the control)  </p>\n<p>When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Select_\" data-linktype=\"relative-path\">Select</a> or SelectNextControl methods, or by setting the <a class=\"xref\" href=\"system.windows.forms.containercontrol#System_Windows_Forms_ContainerControl_ActiveControl_\" data-linktype=\"relative-path\">ActiveControl</a> property to the current form, focus events occur in the following order:  </p>\n</li>\n</ul>\n<ol>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Enter\" data-linktype=\"relative-path\">Enter</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GotFocus\" data-linktype=\"relative-path\">GotFocus</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Leave\" data-linktype=\"relative-path\">Leave</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validating\" data-linktype=\"relative-path\">Validating</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validated\" data-linktype=\"relative-path\">Validated</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_LostFocus\" data-linktype=\"relative-path\">LostFocus</a>  \n\n<p>If the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CausesValidation_\" data-linktype=\"relative-path\">CausesValidation</a> property is set to <code>false</code>, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validating\" data-linktype=\"relative-path\">Validating</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validated\" data-linktype=\"relative-path\">Validated</a> events are suppressed.</p>\n</li>\n</ol>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code exampleshows theSelectNextControl method being used in a form that has some controls. Each time that you click the form, the next control is activated. The <a class=\"xref\" href=\"system.windows.forms.containercontrol#System_Windows_Forms_ContainerControl_ActiveControl_\" data-linktype=\"relative-path\">ActiveControl</a> property gets the currently active control in the container control.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.Control.SelectNextControl#1\">        private void Form1_Click(object sender, EventArgs e)\n        {\n            Control ctl;\n            ctl = (Control)sender;\n            ctl.SelectNextControl(ActiveControl, true, true, true, true);\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.Control.SelectNextControl#1\">    Private Sub Form1_Click(ByVal sender As System.Object, _\n    ByVal e As System.EventArgs) Handles MyBase.Click\n        Dim ctl As Control\n        ctl = CType(sender, Control)\n        ctl.SelectNextControl(ActiveControl, True, True, True, True)\n    End Sub\n</code></pre><p> The following code example shows the SelectNextControl method being used in a form that has a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> and some other controls. When you click the <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a>, the next control after the <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> is activated. Notice that you have to get the parent of the <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> control. Since <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> is not a container, calling SelectNextControl directly on the <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> would not change the activation.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.Control.SelectNextControl#2\">        private void button1_Click(object sender, EventArgs e)\n        {\n            Control p;\n            p = ((Button) sender).Parent;\n            p.SelectNextControl(ActiveControl, true, true, true, true);\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.Control.SelectNextControl#2\">    Private Sub Button1_Click(ByVal sender As System.Object, _\n    ByVal e As System.EventArgs) Handles Button1.Click\n        Dim p As Control\n        p = CType(sender, Button).Parent\n        p.SelectNextControl(ActiveControl, True, True, True, True)\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_SendToBack\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_SendToBack_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SendToBack()</div>        \r\n          </div>\r\n    \r\n            <p>Sends the control to the back of the z-order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SendToBack ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The control is moved to the back of the z-order. If the control is a child of another control, the child control is moved to the back of the z-order. If the control is a top-level control, this method will not work correctly unless the control is active. A top-level control is a control, such as a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>, that is not a child of another control. An active control is a visible control that has input focus. To use the SendToBack method with an inactive, top-level control, first call the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BringToFront_\" data-linktype=\"relative-path\">BringToFront</a> method on the control.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_SetAutoSizeMode_System_Windows_Forms_AutoSizeMode_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_SetAutoSizeMode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetAutoSizeMode(AutoSizeMode)</div>        \r\n          </div>\r\n    \r\n            <p>Sets a value indicating how a control will behave when its <span class=\"xref\">stem.Windows.Forms.Control.AutoSize*</span> property is enabled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void SetAutoSizeMode (System.Windows.Forms.AutoSizeMode mode);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>mode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.autosizemode\" data-linktype=\"relative-path\">AutoSizeMode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.windows.forms.autosizemode\" data-linktype=\"relative-path\">AutoSizeMode</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_SetBounds_System_Int32_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_SetBounds_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetBounds(Int32,Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the bounds of the control to the specified location and size.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetBounds (int x, int y, int width, int height);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>x</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new <span class=\"xref\">stem.Windows.Forms.Control.Left*</span> property value of the control.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>y</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new <span class=\"xref\">stem.Windows.Forms.Control.Top*</span> property value of the control.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>width</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new <span class=\"xref\">stem.Windows.Forms.Control.Width*</span> property value of the control.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>height</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new <span class=\"xref\">stem.Windows.Forms.Control.Height*</span> property value of the control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_SetBounds_System_Int32_System_Int32_System_Int32_System_Int32_System_Windows_Forms_BoundsSpecified_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_SetBounds_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetBounds(Int32,Int32,Int32,Int32,BoundsSpecified)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the specified bounds of the control to the specified location and size.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetBounds (int x, int y, int width, int height, System.Windows.Forms.BoundsSpecified specified);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>x</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new <span class=\"xref\">stem.Windows.Forms.Control.Left*</span> property value of the control.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>y</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new <span class=\"xref\">stem.Windows.Forms.Control.Top*</span> property value of the control.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>width</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new <span class=\"xref\">stem.Windows.Forms.Control.Width*</span> property value of the control.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>height</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new <span class=\"xref\">stem.Windows.Forms.Control.Height*</span> property value of the control.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>specified</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.boundsspecified\" data-linktype=\"relative-path\">BoundsSpecified</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of the <a class=\"xref\" href=\"system.windows.forms.boundsspecified\" data-linktype=\"relative-path\">BoundsSpecified</a> values. For any parameter not specified, the current value will be used.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example centers a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> on the screen in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Layout\" data-linktype=\"relative-path\">Layout</a> event. This will keep the form centered as the user resizes it. This example requires that you have created a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> control.  </p>\n<pre><code class=\"lang-cs\" name=\"Control.Layout#1\">   private void MyForm_Layout(object sender, System.Windows.Forms.LayoutEventArgs e)\n   {\n      // Center the Form on the user&#39;s screen everytime it requires a Layout.\n      this.SetBounds((Screen.GetBounds(this).Width/2) - (this.Width/2),\n          (Screen.GetBounds(this).Height/2) - (this.Height/2),\n\t\t  this.Width, this.Height, BoundsSpecified.Location);\t\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Control.Layout#1\">\n    Private Sub MyForm_Layout(ByVal sender As Object, _\n        ByVal e As System.Windows.Forms.LayoutEventArgs) Handles MyBase.Layout\n\n        &#39; Center the Form on the user&#39;s screen everytime it requires a Layout.\n        Me.SetBounds((System.Windows.Forms.Screen.GetBounds(Me).Width / 2) - (Me.Width / 2), _\n            (System.Windows.Forms.Screen.GetBounds(Me).Height / 2) - (Me.Height / 2), _\n            Me.Width, Me.Height, System.Windows.Forms.BoundsSpecified.Location)\n    End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"Control.Layout#1\">private:\n   void MyForm_Layout( Object^ /*sender*/, System::Windows::Forms::LayoutEventArgs^ /*e*/ )\n   {\n      // Center the Form on the user&#39;s screen everytime it requires a Layout.\n      this-&gt;SetBounds( (Screen::GetBounds( this ).Width / 2) - (this-&gt;Width / 2), (Screen::GetBounds( this ).Height / 2) - (this-&gt;Height / 2), this-&gt;Width, this-&gt;Height, BoundsSpecified::Location );\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_SetBoundsCore_System_Int32_System_Int32_System_Int32_System_Int32_System_Windows_Forms_BoundsSpecified_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_SetBoundsCore_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetBoundsCore(Int32,Int32,Int32,Int32,BoundsSpecified)</div>        \r\n          </div>\r\n    \r\n            <p>Performs the work of setting the specified bounds of this control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void SetBoundsCore (int x, int y, int width, int height, System.Windows.Forms.BoundsSpecified specified);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>x</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new <span class=\"xref\">stem.Windows.Forms.Control.Left*</span> property value of the control.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>y</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new <span class=\"xref\">stem.Windows.Forms.Control.Top*</span> property value of the control.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>width</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new <span class=\"xref\">stem.Windows.Forms.Control.Width*</span> property value of the control.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>height</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new <span class=\"xref\">stem.Windows.Forms.Control.Height*</span> property value of the control.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>specified</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.boundsspecified\" data-linktype=\"relative-path\">BoundsSpecified</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of the <a class=\"xref\" href=\"system.windows.forms.boundsspecified\" data-linktype=\"relative-path\">BoundsSpecified</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Typically, the parameters that correspond to the bounds not included in the <code>specified</code> parameter are passed in with their current values. For example, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Height_\" data-linktype=\"relative-path\">Height</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Width_\" data-linktype=\"relative-path\">Width</a>, or the <a class=\"xref\" href=\"system.drawing.point#System_Drawing_Point_X_\" data-linktype=\"relative-path\">X</a> or <a class=\"xref\" href=\"system.drawing.point#System_Drawing_Point_Y_\" data-linktype=\"relative-path\">Y</a> properties of the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Location_\" data-linktype=\"relative-path\">Location</a> property can be passed in with a reference to the current instance of the control. However all values passed in are honored and applied to the control.  </p>\n<p> The <code>boundsSpecified</code> parameter represents the elements of the controls <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Bounds_\" data-linktype=\"relative-path\">Bounds</a> changed by your application. For example, if you change the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Size_\" data-linktype=\"relative-path\">Size</a> of the control, the <code>boundsSpecified</code> parameter value is the <code>Size</code> value of <a class=\"xref\" href=\"system.windows.forms.boundsspecified\" data-linktype=\"relative-path\">BoundsSpecified</a>. However, if the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Size_\" data-linktype=\"relative-path\">Size</a> is adjusted in response to the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Dock_\" data-linktype=\"relative-path\">Dock</a> property being set, the <code>boundsSpecified</code> parameter value is the <code>None</code> value of <a class=\"xref\" href=\"system.windows.forms.boundsspecified\" data-linktype=\"relative-path\">BoundsSpecified</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> On Windows Server 2003 systems, the size of a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> is restricted by the maximum pixel width and height of the monitor.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example overrides the SetBoundsCore method to ensure that the control remains a fixed size. This example requires that you have a class that is either directly or indirectly derived from the <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control_Methods#1\">protected override void SetBoundsCore(int x, int y, \n   int width, int height, BoundsSpecified specified)\n{\n   // Set a fixed height and width for the control.\n   base.SetBoundsCore(x, y, 150, 75, specified);\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control_Methods#1\">   protected:\n      virtual void SetBoundsCore( int x, int y, int width, int height, BoundsSpecified specified ) override\n      {\n         // Set a fixed height and width for the control.\n         UserControl::SetBoundsCore( x, y, 150, 75, specified );\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control_Methods#1\">Protected Overrides Sub SetBoundsCore(x As Integer, _\n  y As Integer, width As Integer, _\n  height As Integer, specified As BoundsSpecified)\n   &#39; Set a fixed height and width for the control.\n   MyBase.SetBoundsCore(x, y, 150, 75, specified)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_SetClientSizeCore_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_SetClientSizeCore_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetClientSizeCore(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the size of the client area of the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void SetClientSizeCore (int x, int y);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>x</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The client area width, in pixels.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>y</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The client area height, in pixels.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The client area starts at the (0, 0) location and extends to the (<code>x</code>, <code>y</code>) location.  </p>\n<p> Typically, you should not set the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ClientSize_\" data-linktype=\"relative-path\">ClientSize</a> of the control.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example overrides the SetClientSizeCore method to ensure that the control remains square. This example requires that you have a class that is either directly or indirectly derived from the <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control_Methods#2\">protected override void SetClientSizeCore(int x, int y)\n{\n   // Keep the client size square.\n   if(x &gt; y)\n   {\n      base.SetClientSizeCore(x, x);\n   }\n   else\n   {\n      base.SetClientSizeCore(y, y);\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control_Methods#2\">   protected:\n      virtual void SetClientSizeCore( int x, int y ) override\n      {\n         // Keep the client size square.\n         if ( x &gt; y )\n         {\n            UserControl::SetClientSizeCore( x, x );\n         }\n         else\n         {\n            UserControl::SetClientSizeCore( y, y );\n         }\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control_Methods#2\">Protected Overrides Sub SetClientSizeCore(x As Integer, y As Integer)\n   &#39; Keep the client size square.\n   If x &gt; y Then\n      MyBase.SetClientSizeCore(x, x)\n   Else\n      MyBase.SetClientSizeCore(y, y)\n   End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_SetStyle_System_Windows_Forms_ControlStyles_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_SetStyle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetStyle(ControlStyles,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Sets a specified <a class=\"xref\" href=\"system.windows.forms.controlstyles\" data-linktype=\"relative-path\">ControlStyles</a> flag to either <code>true</code> or <code>false</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void SetStyle (System.Windows.Forms.ControlStyles flag, bool value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>flag</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.controlstyles\" data-linktype=\"relative-path\">ControlStyles</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.controlstyles\" data-linktype=\"relative-path\">ControlStyles</a> bit to set.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to apply the specified style to the control; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Control style bit flags are used to categorize supported behavior. A control can enable a style by calling the SetStyle method and passing in the appropriate <a class=\"xref\" href=\"system.windows.forms.controlstyles\" data-linktype=\"relative-path\">ControlStyles</a> bit (or bits) and the Boolean value to set the bit(s) to. To determine the value assigned to a specified <a class=\"xref\" href=\"system.windows.forms.controlstyles\" data-linktype=\"relative-path\">ControlStyles</a> bit, use the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GetStyle_\" data-linktype=\"relative-path\">GetStyle</a> method and pass in the <a class=\"xref\" href=\"system.windows.forms.controlstyles\" data-linktype=\"relative-path\">ControlStyles</a> member to evaluate.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Setting the control style bits can substantially change the behavior of the control. Review the <a class=\"xref\" href=\"system.windows.forms.controlstyles\" data-linktype=\"relative-path\">ControlStyles</a> enumeration documentation to understand the effects of changing the control style bits before calling the SetStyle method.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example enables double-buffering on a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> and updates the styles to reflect the changes.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.ControlMembers6#3\">   public:\n      void EnableDoubleBuffering()\n      {\n         // Set the value of the double-buffering style bits to true.\n         this-&gt;SetStyle( static_cast&lt;ControlStyles&gt;(ControlStyles::DoubleBuffer | ControlStyles::UserPaint | ControlStyles::AllPaintingInWmPaint), true );\n         this-&gt;UpdateStyles();\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.ControlMembers6#3\">public void EnableDoubleBuffering()\n{\n   // Set the value of the double-buffering style bits to true.\n   this.SetStyle(ControlStyles.DoubleBuffer | \n      ControlStyles.UserPaint | \n      ControlStyles.AllPaintingInWmPaint,\n      true);\n   this.UpdateStyles();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.ControlMembers6#3\">Public Sub EnableDoubleBuffering()\n   &#39; Set the value of the double-buffering style bits to true.\n   Me.SetStyle(ControlStyles.DoubleBuffer _\n     Or ControlStyles.UserPaint _\n     Or ControlStyles.AllPaintingInWmPaint, _\n     True)\n   Me.UpdateStyles()\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_SetTopLevel_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_SetTopLevel_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetTopLevel(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the control as the top-level control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void SetTopLevel (bool value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to set the control as the top-level control; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <code>value</code> parameter is set to <code>true</code> and the control is an ActiveX control.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Windows.Forms.Control.GetTopLevel*</span> return value is not equal to the <code>value</code> parameter and the <span class=\"xref\">stem.Windows.Forms.Control.Parent*</span> property is not <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you call the SetTopLevel method of a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> and pass in a value of <code>false</code>, the form will not be visible until you call SetTopLevelagain, passing in a value of <code>true</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_SetVisibleCore_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_SetVisibleCore_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetVisibleCore(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the control to the specified visible state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void SetVisibleCore (bool value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to make the control visible; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You would typically override this method to change the visibility behavior of the control.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Show\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Show_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Show()</div>        \r\n          </div>\r\n    \r\n            <p>Displays the control to the user.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Show ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Showing the control is equivalent to setting the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Visible_\" data-linktype=\"relative-path\">Visible</a> property to <code>true</code>. After the Show method is called, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Visible_\" data-linktype=\"relative-path\">Visible</a> property returns a value of <code>true</code> until the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Hide_\" data-linktype=\"relative-path\">Hide</a> method is called.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays an about dialog box and temporarily draws a blue square on its surface. This example requires that you have defined a class that derives from <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> named <code>AboutDialog</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control Members2#1\">private void menuItemHelpAbout_Click(object sender, EventArgs e)\n{\n   // Create and display a modless about dialog box.\n   AboutDialog about = new AboutDialog();\n   about.Show();\n\n   // Draw a blue square on the form.\n   /* NOTE: This is not a persistent object, it will no longer be\n      * visible after the next call to OnPaint. To make it persistent, \n      * override the OnPaint method and draw the square there */\n   Graphics g = about.CreateGraphics();\n   g.FillRectangle(Brushes.Blue, 10, 10, 50, 50);\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control Members2#1\">   private:\n      void menuItemHelpAbout_Click( Object^ /*sender*/, EventArgs^ /*e*/ )\n      {\n         // Create and display a modeless about dialog box.\n         AboutDialog^ about = gcnew AboutDialog;\n         about-&gt;Show();\n         \n         // Draw a blue square on the form.\n         /* NOTE: This is not a persistent object, it will no longer be\n                     * visible after the next call to OnPaint. To make it persistent,\n                     * override the OnPaint method and draw the square there */\n         Graphics^ g = about-&gt;CreateGraphics();\n         g-&gt;FillRectangle( Brushes::Blue, 10, 10, 50, 50 );\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control Members2#1\">Private Sub menuItemHelpAbout_Click(sender As Object, _\n  e As EventArgs) Handles menuItemHelpAbout.Click\n   &#39; Create and display a modless about dialog box.\n   Dim about As New AboutDialog()\n   about.Show()\n   \n   &#39; Draw a blue square on the form.\n   &#39; NOTE: This is not a persistent object, it will no longer be\n   &#39; visible after the next call to OnPaint. To make it persistent, \n   &#39; override the OnPaint method and draw the square there \n   Dim g As Graphics = about.CreateGraphics()\n   g.FillRectangle(Brushes.Blue, 10, 10, 50, 50)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_SizeFromClientSize_System_Drawing_Size_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_SizeFromClientSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SizeFromClientSize(Size)</div>        \r\n          </div>\r\n    \r\n            <p>Determines the size of the entire control from the height and width of its client area.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual System.Drawing.Size SizeFromClientSize (System.Drawing.Size clientSize);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>clientSize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> value representing the height and width of the control&#39;s client area.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> value representing the height and width of the entire control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_SuspendLayout\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_SuspendLayout_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SuspendLayout()</div>        \r\n          </div>\r\n    \r\n            <p>Temporarily suspends the layout logic for the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SuspendLayout ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The layout logic of the control is suspended until the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ResumeLayout_\" data-linktype=\"relative-path\">ResumeLayout</a> method is called.  </p>\n<p> The SuspendLayout and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ResumeLayout_\" data-linktype=\"relative-path\">ResumeLayout</a> methods are used in tandem to suppress multiple <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Layout\" data-linktype=\"relative-path\">Layout</a> events while you adjust multiple attributes of the control. For example, you would typically call the SuspendLayout method, then set the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Size_\" data-linktype=\"relative-path\">Size</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Location_\" data-linktype=\"relative-path\">Location</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Anchor_\" data-linktype=\"relative-path\">Anchor</a>, or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Dock_\" data-linktype=\"relative-path\">Dock</a> properties of the control, and then call the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ResumeLayout_\" data-linktype=\"relative-path\">ResumeLayout</a> method to enable the changes to take effect.  </p>\n<p> There must be no pending calls to SuspendLayout for <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ResumeLayout_\" data-linktype=\"relative-path\">ResumeLayout</a> to be successfully called.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When adding several controls to a parent control, it is recommended that you call the SuspendLayout method before initializing the controls to be added. After adding the controls to the parent control, call the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ResumeLayout_\" data-linktype=\"relative-path\">ResumeLayout</a> method. This will increase the performance of applications with many controls.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example adds two buttons to a form. The example transactions the addition of the buttons by using the SuspendLayout and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ResumeLayout_\" data-linktype=\"relative-path\">ResumeLayout</a> methods.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control Members2#2\">private void AddButtons()\n{\n   // Suspend the form layout and add two buttons.\n   this.SuspendLayout();\n   Button buttonOK = new Button();\n   buttonOK.Location = new Point(10, 10);\n   buttonOK.Size = new Size(75, 25);\n   buttonOK.Text = &quot;OK&quot;;\n\n   Button buttonCancel = new Button();\n   buttonCancel.Location = new Point(90, 10);\n   buttonCancel.Size = new Size(75, 25);\n   buttonCancel.Text = &quot;Cancel&quot;;\n      \n   this.Controls.AddRange(new Control[]{buttonOK, buttonCancel});\n   this.ResumeLayout();\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control Members2#2\">   private:\n      void AddButtons()\n      {\n         // Suspend the form layout and add two buttons.\n         this-&gt;SuspendLayout();\n         Button^ buttonOK = gcnew Button;\n         buttonOK-&gt;Location = Point(10,10);\n         buttonOK-&gt;Size = System::Drawing::Size( 75, 25 );\n         buttonOK-&gt;Text = &quot;OK&quot;;\n         Button^ buttonCancel = gcnew Button;\n         buttonCancel-&gt;Location = Point(90,10);\n         buttonCancel-&gt;Size = System::Drawing::Size( 75, 25 );\n         buttonCancel-&gt;Text = &quot;Cancel&quot;;\n         array&lt;Control^&gt;^temp5 = {buttonOK,buttonCancel};\n         this-&gt;Controls-&gt;AddRange( temp5 );\n         this-&gt;ResumeLayout();\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control Members2#2\">Private Sub AddButtons()\n   &#39; Suspend the form layout and add two buttons.\n   Me.SuspendLayout()\n   Dim buttonOK As New Button()\n   buttonOK.Location = New Point(10, 10)\n   buttonOK.Size = New Size(75, 25)\n   buttonOK.Text = &quot;OK&quot;\n   \n   Dim buttonCancel As New Button()\n   buttonCancel.Location = New Point(90, 10)\n   buttonCancel.Size = New Size(75, 25)\n   buttonCancel.Text = &quot;Cancel&quot;\n   \n   Me.Controls.AddRange(New Control() {buttonOK, buttonCancel})\n   Me.ResumeLayout()\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Update\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_Update_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Update()</div>        \r\n          </div>\r\n    \r\n            <p>Causes the control to redraw the invalidated regions within its client area.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Update ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Executes any pending requests for painting.  </p>\n<p> There are two ways to repaint a form and its contents:  </p>\n<ul>\n<li><p>You can use one of the overloads of the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invalidate_\" data-linktype=\"relative-path\">Invalidate</a> method with the Update method.  </p>\n</li>\n<li><p>You can call the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Refresh_\" data-linktype=\"relative-path\">Refresh</a> method, which forces the control to redraw itself and all its children. This is equivalent to setting the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invalidate_\" data-linktype=\"relative-path\">Invalidate</a> method to <code>true</code> and using it with Update.  </p>\n<p>The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invalidate_\" data-linktype=\"relative-path\">Invalidate</a> method governs what gets painted or repainted. The Update method governs when the painting or repainting occurs. If you use the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invalidate_\" data-linktype=\"relative-path\">Invalidate</a> and Update methods together rather than calling <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Refresh_\" data-linktype=\"relative-path\">Refresh</a>, what gets repainted depends on which overload of <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invalidate_\" data-linktype=\"relative-path\">Invalidate</a> you use. The Update method just forces the control to be painted immediately, but the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invalidate_\" data-linktype=\"relative-path\">Invalidate</a> method governs what gets painted when you call the Update method.  </p>\n<p>For more information, see the<a href=\"http://msdn.microsoft.com/library/dd145213(v=vs.85).aspx\" data-linktype=\"external\">WM_PAINT</a>topic.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_UpdateBounds\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_UpdateBounds_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UpdateBounds()</div>        \r\n          </div>\r\n    \r\n            <p>Updates the bounds of the control with the current size and location.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void UpdateBounds ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the new <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Size_\" data-linktype=\"relative-path\">Size</a> of the control is different from the previous <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a>, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SizeChanged\" data-linktype=\"relative-path\">SizeChanged</a> event is raised. Likewise, if the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Location_\" data-linktype=\"relative-path\">Location</a> of the control changes, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_LocationChanged\" data-linktype=\"relative-path\">LocationChanged</a> event is raised.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_UpdateBounds_System_Int32_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_UpdateBounds_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UpdateBounds(Int32,Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Updates the bounds of the control with the specified size and location.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void UpdateBounds (int x, int y, int width, int height);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>x</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Drawing.Point.X*</span> coordinate of the control.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>y</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Drawing.Point.Y*</span> coordinate of the control.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>width</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Drawing.Size.Width*</span> of the control.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>height</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Drawing.Size.Height*</span> of the control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the new <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Size_\" data-linktype=\"relative-path\">Size</a> of the control if different from the previous <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a>, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SizeChanged\" data-linktype=\"relative-path\">SizeChanged</a> event is raised. Likewise, is the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Location_\" data-linktype=\"relative-path\">Location</a> of the control changes, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_LocationChanged\" data-linktype=\"relative-path\">LocationChanged</a> event is raised.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_UpdateBounds_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_UpdateBounds_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UpdateBounds(Int32,Int32,Int32,Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Updates the bounds of the control with the specified size, location, and client size.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void UpdateBounds (int x, int y, int width, int height, int clientWidth, int clientHeight);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>x</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Drawing.Point.X*</span> coordinate of the control.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>y</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Drawing.Point.Y*</span> coordinate of the control.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>width</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Drawing.Size.Width*</span> of the control.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>height</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Drawing.Size.Height*</span> of the control.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>clientWidth</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The client <span class=\"xref\">stem.Drawing.Size.Width*</span> of the control.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>clientHeight</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The client <span class=\"xref\">stem.Drawing.Size.Height*</span> of the control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the new <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Size_\" data-linktype=\"relative-path\">Size</a> of the control is different from the previous <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a>, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SizeChanged\" data-linktype=\"relative-path\">SizeChanged</a> event is raised. Likewise, if the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Location_\" data-linktype=\"relative-path\">Location</a> of the control changes, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_LocationChanged\" data-linktype=\"relative-path\">LocationChanged</a> event is raised.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_UpdateStyles\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_UpdateStyles_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UpdateStyles()</div>        \r\n          </div>\r\n    \r\n            <p>Forces the assigned styles to be reapplied to the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void UpdateStyles ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method calls the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CreateParams_\" data-linktype=\"relative-path\">CreateParams</a> method to get the styles to apply. The styles assigned to the <a class=\"xref\" href=\"system.windows.forms.createparams#System_Windows_Forms_CreateParams_Style_\" data-linktype=\"relative-path\">Style</a> and <a class=\"xref\" href=\"system.windows.forms.createparams#System_Windows_Forms_CreateParams_ExStyle_\" data-linktype=\"relative-path\">ExStyle</a> properties of the <a class=\"xref\" href=\"system.windows.forms.createparams\" data-linktype=\"relative-path\">CreateParams</a> assigned to the control&#39;s <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CreateParams_\" data-linktype=\"relative-path\">CreateParams</a> property are reapplied. The control is repainted to reflect the style changes if necessary.  </p>\n<p> The UpdateStyles method has no effect if the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_IsHandleCreated_\" data-linktype=\"relative-path\">IsHandleCreated</a> property value is <code>false</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example enables double-buffering on a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> and updates the styles to reflect the changes.  </p>\n<pre><code class=\"lang-cpp\" name=\"Windows.Forms.ControlMembers6#3\">   public:\n      void EnableDoubleBuffering()\n      {\n         // Set the value of the double-buffering style bits to true.\n         this-&gt;SetStyle( static_cast&lt;ControlStyles&gt;(ControlStyles::DoubleBuffer | ControlStyles::UserPaint | ControlStyles::AllPaintingInWmPaint), true );\n         this-&gt;UpdateStyles();\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.ControlMembers6#3\">public void EnableDoubleBuffering()\n{\n   // Set the value of the double-buffering style bits to true.\n   this.SetStyle(ControlStyles.DoubleBuffer | \n      ControlStyles.UserPaint | \n      ControlStyles.AllPaintingInWmPaint,\n      true);\n   this.UpdateStyles();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.ControlMembers6#3\">Public Sub EnableDoubleBuffering()\n   &#39; Set the value of the double-buffering style bits to true.\n   Me.SetStyle(ControlStyles.DoubleBuffer _\n     Or ControlStyles.UserPaint _\n     Or ControlStyles.AllPaintingInWmPaint, _\n     True)\n   Me.UpdateStyles()\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_UpdateZOrder\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_UpdateZOrder_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UpdateZOrder()</div>        \r\n          </div>\r\n    \r\n            <p>Updates the control in its parent&#39;s z-order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void UpdateZOrder ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The UpdateZOrder method updates the position of the control in its parent control&#39;s z-order. For example, if this control is a newly created control that was added to a <a class=\"xref\" href=\"system.windows.forms.control.controlcollection\" data-linktype=\"relative-path\">Control+ControlCollection</a>, the z-order is updated with the new control added to the back.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_WndProc_System_Windows_Forms_Message__\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_WndProc_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WndProc(Message)</div>        \r\n          </div>\r\n    \r\n            <p>Processes Windows messages.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void WndProc (ref System.Windows.Forms.Message m);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>m</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Windows <a class=\"xref\" href=\"system.windows.forms.message\" data-linktype=\"relative-path\">Message</a> to process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>All messages are sent to the WndProc method after getting filtered through the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_PreProcessMessage_\" data-linktype=\"relative-path\">PreProcessMessage</a> method.  </p>\n<p> The WndProc method corresponds exactly to the Windows <code>WindowProc</code> function. For more information about processing Windows messages, see the <a href=\"http://go.microsoft.com/fwlink/?LinkId=181565\" data-linktype=\"external\">WindowProc function</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates overriding the WndProc method to handle operating system messages identified in the <a class=\"xref\" href=\"system.windows.forms.message\" data-linktype=\"relative-path\">Message</a> structure. The<a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms632614(v=vs.85).aspx\" data-linktype=\"external\">WM_ACTIVATEAPP</a>operating system message is handled in this example to know when another application is becoming active. See the following topics to understand the available <a class=\"xref\" href=\"system.windows.forms.message#System_Windows_Forms_Message_Msg_\" data-linktype=\"relative-path\">Msg</a>, <a class=\"xref\" href=\"system.windows.forms.message#System_Windows_Forms_Message_LParam_\" data-linktype=\"relative-path\">LParam</a>, and <a class=\"xref\" href=\"system.windows.forms.message#System_Windows_Forms_Message_WParam_\" data-linktype=\"relative-path\">WParam</a> values. Actual constant values can be found in the Windows.h header file.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.Control.WndProc#1\">using System;\nusing System.Drawing;\nusing System.Windows.Forms;\n\nnamespace csTempWindowsApplication1\n{\n    public class Form1 : System.Windows.Forms.Form\n    {\n        // Constant value was found in the &quot;windows.h&quot; header file.\n        private const int WM_ACTIVATEAPP = 0x001C;\n        private bool appActive = true;\n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new Form1());\n        }\n        \n        public Form1()\n        {\n            this.Size = new System.Drawing.Size(300,300);\n            this.Text = &quot;Form1&quot;;\n            this.Font = new System.Drawing.Font(&quot;Microsoft Sans Serif&quot;, 18F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));\n        }\n\n        protected override void OnPaint(PaintEventArgs e) \n        {\n            // Paint a string in different styles depending on whether the\n            // application is active.\n            if (appActive) \n            {\n                e.Graphics.FillRectangle(SystemBrushes.ActiveCaption,20,20,260,50);\n                e.Graphics.DrawString(&quot;Application is active&quot;, this.Font, SystemBrushes.ActiveCaptionText, 20,20);\n            }\n            else \n            {\n                e.Graphics.FillRectangle(SystemBrushes.InactiveCaption,20,20,260,50);\n                e.Graphics.DrawString(&quot;Application is Inactive&quot;, this.Font, SystemBrushes.ActiveCaptionText, 20,20);\n            }\n        }\n\n\t[System.Security.Permissions.PermissionSet(System.Security.Permissions.SecurityAction.Demand, Name=&quot;FullTrust&quot;)]\n        protected override void WndProc(ref Message m) \n        {\n            // Listen for operating system messages.\n            switch (m.Msg)\n            {\n                // The WM_ACTIVATEAPP message occurs when the application\n                // becomes the active application or becomes inactive.\n                case WM_ACTIVATEAPP:\n\n                    // The WParam value identifies what is occurring.\n                    appActive = (((int)m.WParam != 0));\n\n                    // Invalidate to get new text painted.\n                    this.Invalidate();\n\n                    break;                \n            }\n            base.WndProc(ref m);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.Control.WndProc#1\">Imports System\nImports System.Drawing\nImports System.Windows.Forms\n\nNamespace csTempWindowsApplication1\n\n    Public Class Form1\n        Inherits System.Windows.Forms.Form\n\n        &#39; Constant value was found in the &quot;windows.h&quot; header file.\n        Private Const WM_ACTIVATEAPP As Integer = &amp;H1C\n        Private appActive As Boolean = True\n\n        &lt;STAThread()&gt; _\n        Shared Sub Main()\n            Application.Run(New Form1())\n        End Sub &#39;Main\n\n        Public Sub New()\n            MyBase.New()\n\n            Me.Size = New System.Drawing.Size(300, 300)\n            Me.Text = &quot;Form1&quot;\n            Me.Font = New System.Drawing.Font(&quot;Microsoft Sans Serif&quot;, 18.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))\n        End Sub\n\n        Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)\n\n            &#39; Paint a string in different styles depending on whether the\n            &#39; application is active.\n            If (appActive) Then\n                e.Graphics.FillRectangle(SystemBrushes.ActiveCaption, 20, 20, 260, 50)\n                e.Graphics.DrawString(&quot;Application is active&quot;, Me.Font, SystemBrushes.ActiveCaptionText, 20, 20)\n            Else\n                e.Graphics.FillRectangle(SystemBrushes.InactiveCaption, 20, 20, 260, 50)\n                e.Graphics.DrawString(&quot;Application is Inactive&quot;, Me.Font, SystemBrushes.ActiveCaptionText, 20, 20)\n            End If\n        End Sub\n\t&lt;System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.Demand, Name:=&quot;FullTrust&quot;)&gt; _\n        Protected Overrides Sub WndProc(ByRef m As Message)\n            &#39; Listen for operating system messages\n            Select Case (m.Msg)\n                &#39; The WM_ACTIVATEAPP message occurs when the application\n                &#39; becomes the active application or becomes inactive.\n            Case WM_ACTIVATEAPP\n\n                    &#39; The WParam value identifies what is occurring.\n                    appActive = (m.WParam.ToInt32() &lt;&gt; 0)\n\n                    &#39; Invalidate to get new text painted.\n                    Me.Invalidate()\n\n            End Select\n            MyBase.WndProc(m)\n        End Sub\n    End Class\nEnd Namespace\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.Control.WndProc#1\">using namespace System;\nusing namespace System::Drawing;\nusing namespace System::Windows::Forms;\nusing namespace System::Security::Permissions;\n\nnamespace csTempWindowsApplication1\n{\n   public ref class Form1: public System::Windows::Forms::Form\n   {\n   private:\n\n      // Constant value was found in the &quot;windows.h&quot; header file.\n      static const Int32 WM_ACTIVATEAPP = 0x001C;\n      Boolean appActive;\n\n   public:\n      Form1()\n      {\n         appActive = true;\n         this-&gt;Size = System::Drawing::Size( 300, 300 );\n         this-&gt;Text = &quot;Form1&quot;;\n         this-&gt;Font = gcnew System::Drawing::Font( &quot;Microsoft Sans Serif&quot;,18.0F,System::Drawing::FontStyle::Bold,System::Drawing::GraphicsUnit::Point,((System::Byte)(0)) );\n      }\n\n\n   protected:\n      virtual void OnPaint( PaintEventArgs^ e ) override\n      {\n         \n         // Paint a string in different styles depending on whether the\n         // application is active.\n         if ( appActive )\n         {\n            e-&gt;Graphics-&gt;FillRectangle( SystemBrushes::ActiveCaption, 20, 20, 260, 50 );\n            e-&gt;Graphics-&gt;DrawString( &quot;Application is active&quot;, this-&gt;Font, SystemBrushes::ActiveCaptionText, 20, 20 );\n         }\n         else\n         {\n            e-&gt;Graphics-&gt;FillRectangle( SystemBrushes::InactiveCaption, 20, 20, 260, 50 );\n            e-&gt;Graphics-&gt;DrawString( &quot;Application is Inactive&quot;, this-&gt;Font, SystemBrushes::ActiveCaptionText, 20, 20 );\n         }\n      }\n\n\n      [SecurityPermission(SecurityAction::Demand, Flags=SecurityPermissionFlag::UnmanagedCode)]\n      virtual void WndProc( Message% m ) override\n      {\n         \n         // Listen for operating system messages.\n         switch ( m.Msg )\n         {\n            case WM_ACTIVATEAPP:\n               \n               // The WParam value identifies what is occurring.\n               appActive = (int)m.WParam != 0;\n               \n               // Invalidate to get new text painted.\n               this-&gt;Invalidate();\n               break;\n         }\n         Form::WndProc( m );\n      }\n\n   };\n\n}\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew csTempWindowsApplication1::Form1 );\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"events\">\r\n        <h2>Events\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_AutoSizeChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AutoSizeChanged</div>        \r\n          </div>\r\n    \r\n            <p>This event is not relevant for this class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler AutoSizeChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event is not relevant for this class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_BackColorChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BackColorChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.Forms.Control.BackColor*</span> property changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler BackColorChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event is raised if the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BackColor_\" data-linktype=\"relative-path\">BackColor</a> property is changed by either a programmatic modification or user interaction.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example is an event handler that is executed when the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property value changes. The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class has several methods with the name pattern <em>PropertyName</em><code>Changed</code> that are raised when the corresponding <em>PropertyName</em> value changes (<em>PropertyName</em> represents the name of the corresponding property).  </p>\n<p> The following code example changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> of a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> displaying currency data. The example converts the text to a decimal number and changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Red_\" data-linktype=\"relative-path\">Red</a> if the number is negative and to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Black_\" data-linktype=\"relative-path\">Black</a> if the number is positive. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>that contains a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"Windows.Forms.Control_PropertyChangedEvents#1\">Private Sub currencyTextBox_TextChanged(sender As Object, _ \n  e As EventArgs) Handles currencyTextBox.TextChanged\n   Try\n      &#39; Convert the text to a Double and determine if it is a negative number.\n      If Double.Parse(currencyTextBox.Text) &lt; 0 Then\n         &#39; If the number is negative, display it in Red.\n         currencyTextBox.ForeColor = Color.Red\n      Else\n         &#39; If the number is not negative, display it in Black.\n         currencyTextBox.ForeColor = Color.Black\n      End If\n   Catch\n      &#39; If there is an error, display the text using the system colors.\n      currencyTextBox.ForeColor = SystemColors.ControlText\n   End Try\nEnd Sub \n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.Control_PropertyChangedEvents#1\">private void currencyTextBox_TextChanged(object sender, EventArgs e)\n{\n   try\n   {\n      // Convert the text to a Double and determine if it is a negative number.\n      if(double.Parse(currencyTextBox.Text) &lt; 0)\n      {\n         // If the number is negative, display it in Red.\n         currencyTextBox.ForeColor = Color.Red;\n      }\n      else\n      {\n         // If the number is not negative, display it in Black.\n         currencyTextBox.ForeColor = Color.Black;\n      }\n   }\n   catch\n   {\n      // If there is an error, display the text using the system colors.\n      currencyTextBox.ForeColor = SystemColors.ControlText;\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control_PropertyChangedEvents#1\">   private:\n      void currencyTextBox_TextChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n      {\n         try\n         {\n            // Convert the text to a Double and determine if it is a negative number.\n            if ( Double::Parse( currencyTextBox-&gt;Text ) &lt; 0 )\n            {\n               // If the number is negative, display it in Red.\n               currencyTextBox-&gt;ForeColor = Color::Red;\n            }\n            else\n            {\n               // If the number is not negative, display it in Black.\n               currencyTextBox-&gt;ForeColor = Color::Black;\n            }\n         }\n         catch ( Exception^ ) \n         {\n            // If there is an error, display the text using the system colors.\n            currencyTextBox-&gt;ForeColor = SystemColors::ControlText;\n         }\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_BackgroundImageChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BackgroundImageChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.Forms.Control.BackgroundImage*</span> property changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler BackgroundImageChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event is raised if the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BackgroundImage_\" data-linktype=\"relative-path\">BackgroundImage</a> property is changed by either a programmatic modification or user interaction.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example is an event handler that is executed when the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property value changes. The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class has several methods with the name pattern <em>PropertyName</em><code>Changed</code> that are raised when the corresponding <em>PropertyName</em> value changes (<em>PropertyName</em> represents the name of the corresponding property).  </p>\n<p> The following code example changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> of a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> displaying currency data. The example converts the text to a decimal number and changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Red_\" data-linktype=\"relative-path\">Red</a> if the number is negative and to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Black_\" data-linktype=\"relative-path\">Black</a> if the number is positive. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> that contains a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"Windows.Forms.Control_PropertyChangedEvents#1\">Private Sub currencyTextBox_TextChanged(sender As Object, _ \n  e As EventArgs) Handles currencyTextBox.TextChanged\n   Try\n      &#39; Convert the text to a Double and determine if it is a negative number.\n      If Double.Parse(currencyTextBox.Text) &lt; 0 Then\n         &#39; If the number is negative, display it in Red.\n         currencyTextBox.ForeColor = Color.Red\n      Else\n         &#39; If the number is not negative, display it in Black.\n         currencyTextBox.ForeColor = Color.Black\n      End If\n   Catch\n      &#39; If there is an error, display the text using the system colors.\n      currencyTextBox.ForeColor = SystemColors.ControlText\n   End Try\nEnd Sub \n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.Control_PropertyChangedEvents#1\">private void currencyTextBox_TextChanged(object sender, EventArgs e)\n{\n   try\n   {\n      // Convert the text to a Double and determine if it is a negative number.\n      if(double.Parse(currencyTextBox.Text) &lt; 0)\n      {\n         // If the number is negative, display it in Red.\n         currencyTextBox.ForeColor = Color.Red;\n      }\n      else\n      {\n         // If the number is not negative, display it in Black.\n         currencyTextBox.ForeColor = Color.Black;\n      }\n   }\n   catch\n   {\n      // If there is an error, display the text using the system colors.\n      currencyTextBox.ForeColor = SystemColors.ControlText;\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control_PropertyChangedEvents#1\">   private:\n      void currencyTextBox_TextChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n      {\n         try\n         {\n            // Convert the text to a Double and determine if it is a negative number.\n            if ( Double::Parse( currencyTextBox-&gt;Text ) &lt; 0 )\n            {\n               // If the number is negative, display it in Red.\n               currencyTextBox-&gt;ForeColor = Color::Red;\n            }\n            else\n            {\n               // If the number is not negative, display it in Black.\n               currencyTextBox-&gt;ForeColor = Color::Black;\n            }\n         }\n         catch ( Exception^ ) \n         {\n            // If there is an error, display the text using the system colors.\n            currencyTextBox-&gt;ForeColor = SystemColors::ControlText;\n         }\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_BackgroundImageLayoutChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BackgroundImageLayoutChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the <span class=\"xref\">stem.Windows.Forms.Control.BackgroundImageLayout*</span> property changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler BackgroundImageLayoutChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event is raised if the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BackgroundImageLayout_\" data-linktype=\"relative-path\">BackgroundImageLayout</a> property changes either programmatically or by user interaction.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the BackgroundImageLayoutChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of a type that inherits from <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a>, such as a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> or <a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a>. Then name the instance <code>Control1</code> and ensure that the event handler is associated with the BackgroundImageLayoutChanged event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#9\">private void Control1_BackgroundImageLayoutChanged(Object sender, EventArgs e) {\n\n   MessageBox.Show(&quot;You are in the Control.BackgroundImageLayoutChanged event.&quot;);\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#9\">Private Sub Control1_BackgroundImageLayoutChanged(sender as Object, e as EventArgs) _ \n     Handles Control1.BackgroundImageLayoutChanged\n\n   MessageBox.Show(&quot;You are in the Control.BackgroundImageLayoutChanged event.&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_BindingContextChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BindingContextChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the value of the <a class=\"xref\" href=\"system.windows.forms.bindingcontext\" data-linktype=\"relative-path\">BindingContext</a> property changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler BindingContextChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To add a new <a class=\"xref\" href=\"system.windows.forms.bindingcontext\" data-linktype=\"relative-path\">BindingContext</a> to the <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> through the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BindingContext_\" data-linktype=\"relative-path\">BindingContext</a> property, see the <a class=\"xref\" href=\"system.windows.forms.bindingcontext#System_Windows_Forms_BindingContext__ctor_\" data-linktype=\"relative-path\">BindingContext</a> constructor.  </p>\n<p> This event is raised if the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BindingContext_\" data-linktype=\"relative-path\">BindingContext</a> property is changed is changed by either a programmatic modification or user interaction.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example adds an <a class=\"xref\" href=\"system.eventhandler\" data-linktype=\"relative-path\">EventHandler</a> delegate to the BindingContextChanged event of a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> control.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic Control.BindingContextChanged Example#1\"> Private Sub AddEventHandler()\n     AddHandler textBox1.BindingContextChanged, _\n        AddressOf BindingContext_Changed\n End Sub    \n    \n Private Sub BindingContext_Changed(sender As Object, e As EventArgs)\n     Console.WriteLine(&quot;BindingContext changed&quot;)\n End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Control.BindingContextChanged Example#1\">private void AddEventHandler()\n{\n   textBox1.BindingContextChanged += new EventHandler(BindingContext_Changed);\n}\n\nprivate void BindingContext_Changed(object sender, EventArgs e)\n{\n   Console.WriteLine(&quot;BindingContext changed&quot;);\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Control.BindingContextChanged Example#1\">private:\n   void AddEventHandler()\n   {\n      textBox1-&gt;BindingContextChanged += gcnew EventHandler(\n         this, &amp;Form1::BindingContext_Changed );\n   }\n\n   void BindingContext_Changed( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      Console::WriteLine( &quot;BindingContext changed&quot; );\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_CausesValidationChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CausesValidationChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.Forms.Control.CausesValidation*</span> property changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler CausesValidationChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event is raised if the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CausesValidation_\" data-linktype=\"relative-path\">CausesValidation</a> property is changed by either a programmatic modification or user interaction.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ChangeUICues\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ChangeUICues</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the focus or keyboard user interface (UI) cues change.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.UICuesEventHandler ChangeUICues;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the ChangeUICues event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of a type that inherits from <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a>, such as a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> or <a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a>. Then name the instance <code>Control1</code> and ensure that the event handler is associated with the ChangeUICues event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#67\">private void Control1_ChangeUICues(Object sender, UICuesEventArgs e) {\n\nSystem.Text.StringBuilder messageBoxCS = new System.Text.StringBuilder();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShowFocus&quot;, e.ShowFocus );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShowKeyboard&quot;, e.ShowKeyboard );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ChangeFocus&quot;, e.ChangeFocus );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ChangeKeyboard&quot;, e.ChangeKeyboard );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;Changed&quot;, e.Changed );\nmessageBoxCS.AppendLine();\nMessageBox.Show(messageBoxCS.ToString(), &quot;ChangeUICues Event&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#67\">Private Sub Control1_ChangeUICues(sender as Object, e as UICuesEventArgs) _ \n     Handles Control1.ChangeUICues\n\n    Dim messageBoxVB as New System.Text.StringBuilder()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShowFocus&quot;, e.ShowFocus)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ShowKeyboard&quot;, e.ShowKeyboard)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ChangeFocus&quot;, e.ChangeFocus)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ChangeKeyboard&quot;, e.ChangeKeyboard)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;Changed&quot;, e.Changed)\n    messageBoxVB.AppendLine()\n    MessageBox.Show(messageBoxVB.ToString(),&quot;ChangeUICues Event&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Click\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Click</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the control is clicked.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler Click;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Click event passes an <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> to its event handler, so it only indicates that a click has occurred. If you need more specific mouse information (button, number of clicks, wheel rotation, or location), use the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseClick\" data-linktype=\"relative-path\">MouseClick</a> event. However, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseClick\" data-linktype=\"relative-path\">MouseClick</a> event will not be raised if the click is caused by action other than that of the mouse, such as pressing the ENTER key.  </p>\n<p> A double-click is determined by the mouse settings of the user&#39;s operating system. The user can set the time between clicks of a mouse button that should be considered a double-click rather than two clicks. The Click event is raised every time a control is double-clicked. For example, if you have event handlers for the Click and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoubleClick\" data-linktype=\"relative-path\">DoubleClick</a> events of a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>, the Click and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoubleClick\" data-linktype=\"relative-path\">DoubleClick</a> events are raised when the form is double-clicked and both methods are called. If a control is double-clicked and that control does not support the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoubleClick\" data-linktype=\"relative-path\">DoubleClick</a> event, the Click event might be raised twice.  </p>\n<p> You must set the <code>StandardClick</code> value of<a class=\"xref\" href=\"system.windows.forms.controlstyles\" data-linktype=\"relative-path\">ControlStyles</a> to <code>true</code> for this event to be raised.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following events are not raised for the <a class=\"xref\" href=\"system.windows.forms.tabcontrol\" data-linktype=\"relative-path\">TabControl</a> class unless there is at least one <a class=\"xref\" href=\"system.windows.forms.tabpage\" data-linktype=\"relative-path\">TabPage</a> in the <a class=\"xref\" href=\"system.windows.forms.tabcontrol#System_Windows_Forms_TabControl_TabPages_\" data-linktype=\"relative-path\">TabPages</a> collection: Click, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoubleClick\" data-linktype=\"relative-path\">DoubleClick</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseUp\" data-linktype=\"relative-path\">MouseUp</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseHover\" data-linktype=\"relative-path\">MouseHover</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseEnter\" data-linktype=\"relative-path\">MouseEnter</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseLeave\" data-linktype=\"relative-path\">MouseLeave</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseMove\" data-linktype=\"relative-path\">MouseMove</a>. If there is at least one <a class=\"xref\" href=\"system.windows.forms.tabpage\" data-linktype=\"relative-path\">TabPage</a> in the collection, and the user interacts with the tab control&#39;s header (where the <a class=\"xref\" href=\"system.windows.forms.tabpage\" data-linktype=\"relative-path\">TabPage</a> names appear), the <a class=\"xref\" href=\"system.windows.forms.tabcontrol\" data-linktype=\"relative-path\">TabControl</a> raises the appropriate event. However, if the user interaction is within the client area of the tab page, the <a class=\"xref\" href=\"system.windows.forms.tabpage\" data-linktype=\"relative-path\">TabPage</a> raises the appropriate event.  </p>\n</div>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows the Click event in an event handler.  </p>\n<pre><code class=\"lang-cpp\" name=\"Control.FindForm#1\">   // This example uses the Parent property and the Find method of Control to set\n   // properties on the parent control of a Button and its Form. The example assumes\n   // that a Button control named button1 is located within a GroupBox control. The \n   // example also assumes that the Click event of the Button control is connected to\n   // the event handler method defined in the example.\nprivate:\n   void button1_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // Get the control the Button control is located in. In this case a GroupBox.\n      Control^ control = button1-&gt;Parent;\n      \n      // Set the text and backcolor of the parent control.\n      control-&gt;Text = &quot;My Groupbox&quot;;\n      control-&gt;BackColor = Color::Blue;\n      \n      // Get the form that the Button control is contained within.\n      Form^ myForm = button1-&gt;FindForm();\n      \n      // Set the text and color of the form containing the Button.\n      myForm-&gt;Text = &quot;The Form of My Control&quot;;\n      myForm-&gt;BackColor = Color::Red;\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Control.FindForm#1\">   &#39; This example uses the Parent property and the Find method of Control to set\n   &#39; properties on the parent control of a Button and its Form. The example assumes\n   &#39; that a Button control named button1 is located within a GroupBox control. The \n   &#39; example also assumes that the Click event of the Button control is connected to\n   &#39; the event handler method defined in the example.\n   Private Sub button1_Click(sender As Object, e As System.EventArgs) Handles button1.Click\n      &#39; Get the control the Button control is located in. In this case a GroupBox.\n      Dim control As Control = button1.Parent\n      &#39; Set the text and backcolor of the parent control.\n      control.Text = &quot;My Groupbox&quot;\n      control.BackColor = Color.Blue\n      &#39; Get the form that the Button control is contained within.\n      Dim myForm As Form = button1.FindForm()\n      &#39; Set the text and color of the form containing the Button.\n      myForm.Text = &quot;The Form of My Control&quot;\n      myForm.BackColor = Color.Red\n   End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Control.FindForm#1\">      // This example uses the Parent property and the Find method of Control to set\n      // properties on the parent control of a Button and its Form. The example assumes\n      // that a Button control named button1 is located within a GroupBox control. The \n      // example also assumes that the Click event of the Button control is connected to\n      // the event handler method defined in the example.\n      private void button1_Click(object sender, System.EventArgs e)\n      {\n         // Get the control the Button control is located in. In this case a GroupBox.\n         Control control = button1.Parent;\n         // Set the text and backcolor of the parent control.\n         control.Text = &quot;My Groupbox&quot;;\n         control.BackColor = Color.Blue;\n         // Get the form that the Button control is contained within.\n         Form myForm = button1.FindForm();\n         // Set the text and color of the form containing the Button.\n         myForm.Text = &quot;The Form of My Control&quot;;\n         myForm.BackColor = Color.Red;\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ClientSizeChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ClientSizeChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.Forms.Control.ClientSize*</span> property changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler ClientSizeChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the ClientSizeChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of a type that inherits from <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a>, such as a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> or <a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a>. Then name the instance <code>Control1</code> and ensure that the event handler is associated with the ClientSizeChanged event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#12\">private void Control1_ClientSizeChanged(Object sender, EventArgs e) {\n\n   MessageBox.Show(&quot;You are in the Control.ClientSizeChanged event.&quot;);\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#12\">Private Sub Control1_ClientSizeChanged(sender as Object, e as EventArgs) _ \n     Handles Control1.ClientSizeChanged\n\n   MessageBox.Show(&quot;You are in the Control.ClientSizeChanged event.&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ContextMenuChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContextMenuChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.Forms.Control.ContextMenu*</span> property changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler ContextMenuChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event is raised if the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ContextMenu_\" data-linktype=\"relative-path\">ContextMenu</a> property is changed by either a programmatic modification or user interaction.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays a message when a change occurs to the shortcut menu.  </p>\n<pre><code class=\"lang-cpp\" name=\"Control_ContextMenu_CreateGraphics#2\">   private:\n      void AddContextMenuChangedHandler()\n      {\n         this-&gt;myTextBox-&gt;ContextMenuChanged += gcnew EventHandler( this, &amp;MyForm::TextBox_ContextMenuChanged );\n      }\n\n      void TextBox_ContextMenuChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n      {\n         MessageBox::Show( L&quot;Shortcut menu of TextBox is changed.&quot; );\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Control_ContextMenu_CreateGraphics#2\">      private void AddContextMenuChangedHandler()\n      {\n         this.myTextBox.ContextMenuChanged += new EventHandler(TextBox_ContextMenuChanged);\n      }\n\n      private void TextBox_ContextMenuChanged(object sender, EventArgs e)\n      {\n         MessageBox.Show(&quot;Shortcut menu of TextBox is changed.&quot;);\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"Control_ContextMenu_CreateGraphics#2\">      Private Sub AddContextMenuChangedHandler()\n         AddHandler Me.myTextBox.ContextMenuChanged, AddressOf TextBox_ContextMenuChanged\n      End Sub &#39;AddContextMenuChangedHandler\n\n      Private Sub TextBox_ContextMenuChanged(sender As Object, e As EventArgs)\n         MessageBox.Show(&quot;Shortcut menu of TextBox is changed.&quot;)\n      End Sub &#39;TextBox_ContextMenuChanged\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ContextMenuStripChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContextMenuStripChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.Forms.Control.ContextMenuStrip*</span> property changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler ContextMenuStripChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the ContextMenuStripChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of a type that inherits from <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a>, such as a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> or <a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a>. Then name the instance <code>Control1</code> and ensure that the event handler is associated with the ContextMenuStripChanged event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#14\">private void Control1_ContextMenuStripChanged(Object sender, EventArgs e) {\n\n   MessageBox.Show(&quot;You are in the Control.ContextMenuStripChanged event.&quot;);\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#14\">Private Sub Control1_ContextMenuStripChanged(sender as Object, e as EventArgs) _ \n     Handles Control1.ContextMenuStripChanged\n\n   MessageBox.Show(&quot;You are in the Control.ContextMenuStripChanged event.&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ControlAdded\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ControlAdded</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a new control is added to the <a class=\"xref\" href=\"system.windows.forms.control.controlcollection\" data-linktype=\"relative-path\">Control+ControlCollection</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.ControlEventHandler ControlAdded;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses ControlAdded to add a control to a form and displays the name of the added control in a <a class=\"xref\" href=\"system.windows.forms.messagebox\" data-linktype=\"relative-path\">MessageBox</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Control.ControlRemoved#1\">   // This example demonstrates the use of the ControlAdded and\n   // ControlRemoved events. This example assumes that two Button controls\n   // are added to the form and connected to the addControl_Click and\n   // removeControl_Click event-handler methods.\nprivate:\n   void Form1_Load( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // Connect the ControlRemoved and ControlAdded event handlers\n      // to the event-handler methods.\n      // ControlRemoved and ControlAdded are not available at design time.\n      this-&gt;ControlRemoved += gcnew System::Windows::Forms::ControlEventHandler( this, &amp;Form1::Control_Removed );\n      this-&gt;ControlAdded += gcnew System::Windows::Forms::ControlEventHandler( this, &amp;Form1::Control_Added );\n   }\n\n   void Control_Added( Object^ /*sender*/, System::Windows::Forms::ControlEventArgs^ e )\n   {\n      MessageBox::Show( String::Format( &quot;The control named {0} has been added to the form.&quot;, e-&gt;Control-&gt;Name ) );\n   }\n\n   void Control_Removed( Object^ /*sender*/, System::Windows::Forms::ControlEventArgs^ e )\n   {\n      MessageBox::Show( String::Format( &quot;The control named {0} has been removed from the form.&quot;, e-&gt;Control-&gt;Name ) );\n   }\n\n   // Click event handler for a Button control. Adds a TextBox to the form.\n   void addControl_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // Create a new TextBox control and add it to the form.\n      TextBox^ textBox1 = gcnew TextBox;\n      textBox1-&gt;Size = System::Drawing::Size( 100, 10 );\n      textBox1-&gt;Location = Point(10,10);\n\n      // Name the control in order to remove it later. The name must be specified\n      // if a control is added at run time.\n      textBox1-&gt;Name = &quot;textBox1&quot;;\n\n      // Add the control to the form&#39;s control collection.\n      this-&gt;Controls-&gt;Add( textBox1 );\n   }\n\n   // Click event handler for a Button control.\n   // Removes the previously added TextBox from the form.\n   void removeControl_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // Loop through all controls in the form&#39;s control collection.\n      IEnumerator^ myEnum = this-&gt;Controls-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         Control^ tempCtrl = safe_cast&lt;Control^&gt;(myEnum-&gt;Current);\n         \n         // Determine whether the control is textBox1,\n         // and if it is, remove it.\n         if ( tempCtrl-&gt;Name-&gt;Equals( &quot;textBox1&quot; ) )\n         {\n            this-&gt;Controls-&gt;Remove( tempCtrl );\n         }\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Control.ControlRemoved#1\">    &#39; This example demonstrates the use of the ControlAdded and\n    &#39; ControlRemoved events. This example assumes that two Button controls \n    &#39; are added to the form and connected to the addControl_Click and \n    &#39; removeControl_Click event-handler methods.\n    Private Sub Form1_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Load\n        &#39; Connect the ControlRemoved and ControlAdded event handlers to the event-handler methods.\n        &#39; ControlRemoved and ControlAdded are not available at design time.\n        AddHandler Me.ControlRemoved, AddressOf Me.Control_Removed\n        AddHandler Me.ControlAdded, AddressOf Me.Control_Added\n    End Sub &#39;Form1_Load\n\n\n    Private Sub Control_Added(ByVal sender As Object, ByVal e As System.Windows.Forms.ControlEventArgs)\n        MessageBox.Show((&quot;The control named &quot; + e.Control.Name + &quot; has been added to the form.&quot;))\n    End Sub\n\n\n    Private Sub Control_Removed(ByVal sender As Object, ByVal e As System.Windows.Forms.ControlEventArgs)\n        MessageBox.Show((&quot;The control named &quot; + e.Control.Name + &quot; has been removed from the form.&quot;))\n    End Sub\n\n\n    &#39; Click event handler for a Button control. Adds a TextBox to the form.\n    Private Sub addControl_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles button1.Click\n        &#39; Create a new TextBox control and add it to the form.\n        Dim textBox1 As New TextBox()\n        textBox1.Size = New Size(100, 10)\n        textBox1.Location = New Point(10, 10)\n        &#39; Name the control in order to remove it later. \n        &#39; The name must be specified if a control is added at run time.\n        textBox1.Name = &quot;textBox1&quot;\n\n        &#39; Add the control to the form&#39;s control collection.\n        Me.Controls.Add(textBox1)\n    End Sub\n\n\n    &#39; Click event handler for a Button control.\n    &#39; Removes the previously added TextBox from the form.\n    Private Sub removeControl_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles button2.Click\n        &#39; Loop through all controls in the form&#39;s control collection.\n        Dim tempCtrl As Control\n        For Each tempCtrl In Me.Controls\n            &#39; Determine whether the control is textBox1,\n            &#39; and if it is, remove it.\n            If tempCtrl.Name = &quot;textBox1&quot; Then\n                Me.Controls.Remove(tempCtrl)\n            End If\n        Next tempCtrl\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Control.ControlRemoved#1\">        // This example demonstrates the use of the ControlAdded and\n        // ControlRemoved events. This example assumes that two Button controls\n        // are added to the form and connected to the addControl_Click and\n        // removeControl_Click event-handler methods.\n        private void Form1_Load(object sender, System.EventArgs e)\n        {\n            // Connect the ControlRemoved and ControlAdded event handlers\n            // to the event-handler methods.\n            // ControlRemoved and ControlAdded are not available at design time.\n            this.ControlRemoved += new System.Windows.Forms.ControlEventHandler(this.Control_Removed);\n            this.ControlAdded += new System.Windows.Forms.ControlEventHandler(this.Control_Added);\n        }\n\n        private void Control_Added(object sender, System.Windows.Forms.ControlEventArgs e)\n        {\n            MessageBox.Show(&quot;The control named &quot; + e.Control.Name + &quot; has been added to the form.&quot;);\n        }\n\n        private void Control_Removed(object sender, System.Windows.Forms.ControlEventArgs e)\n        {\n            MessageBox.Show(&quot;The control named &quot; + e.Control.Name + &quot; has been removed from the form.&quot;);\n        }\n\n        // Click event handler for a Button control. Adds a TextBox to the form.\n        private void addControl_Click(object sender, System.EventArgs e)\n        {\n            // Create a new TextBox control and add it to the form.\n            TextBox textBox1 = new TextBox();\n            textBox1.Size = new Size(100,10);\n            textBox1.Location = new Point(10,10);\n            // Name the control in order to remove it later. The name must be specified\n            // if a control is added at run time.\n            textBox1.Name = &quot;textBox1&quot;;\n\n            // Add the control to the form&#39;s control collection.\n            this.Controls.Add(textBox1);\n        }\n\n        // Click event handler for a Button control.\n        // Removes the previously added TextBox from the form.\n        private void removeControl_Click(object sender, System.EventArgs e)\n        {\n            // Loop through all controls in the form&#39;s control collection.\n            foreach (Control tempCtrl in this.Controls)\n            {\n                // Determine whether the control is textBox1,\n                // and if it is, remove it.\n                if (tempCtrl.Name == &quot;textBox1&quot;)\n                {\n                    this.Controls.Remove(tempCtrl);\n                }\n            }\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ControlRemoved\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ControlRemoved</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a control is removed from the <a class=\"xref\" href=\"system.windows.forms.control.controlcollection\" data-linktype=\"relative-path\">Control+ControlCollection</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.ControlEventHandler ControlRemoved;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses ControlRemoved to remove a control from a form and displays the name of the removed control in a <a class=\"xref\" href=\"system.windows.forms.messagebox\" data-linktype=\"relative-path\">MessageBox</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Control.ControlRemoved#1\">   // This example demonstrates the use of the ControlAdded and\n   // ControlRemoved events. This example assumes that two Button controls\n   // are added to the form and connected to the addControl_Click and\n   // removeControl_Click event-handler methods.\nprivate:\n   void Form1_Load( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // Connect the ControlRemoved and ControlAdded event handlers\n      // to the event-handler methods.\n      // ControlRemoved and ControlAdded are not available at design time.\n      this-&gt;ControlRemoved += gcnew System::Windows::Forms::ControlEventHandler( this, &amp;Form1::Control_Removed );\n      this-&gt;ControlAdded += gcnew System::Windows::Forms::ControlEventHandler( this, &amp;Form1::Control_Added );\n   }\n\n   void Control_Added( Object^ /*sender*/, System::Windows::Forms::ControlEventArgs^ e )\n   {\n      MessageBox::Show( String::Format( &quot;The control named {0} has been added to the form.&quot;, e-&gt;Control-&gt;Name ) );\n   }\n\n   void Control_Removed( Object^ /*sender*/, System::Windows::Forms::ControlEventArgs^ e )\n   {\n      MessageBox::Show( String::Format( &quot;The control named {0} has been removed from the form.&quot;, e-&gt;Control-&gt;Name ) );\n   }\n\n   // Click event handler for a Button control. Adds a TextBox to the form.\n   void addControl_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // Create a new TextBox control and add it to the form.\n      TextBox^ textBox1 = gcnew TextBox;\n      textBox1-&gt;Size = System::Drawing::Size( 100, 10 );\n      textBox1-&gt;Location = Point(10,10);\n\n      // Name the control in order to remove it later. The name must be specified\n      // if a control is added at run time.\n      textBox1-&gt;Name = &quot;textBox1&quot;;\n\n      // Add the control to the form&#39;s control collection.\n      this-&gt;Controls-&gt;Add( textBox1 );\n   }\n\n   // Click event handler for a Button control.\n   // Removes the previously added TextBox from the form.\n   void removeControl_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // Loop through all controls in the form&#39;s control collection.\n      IEnumerator^ myEnum = this-&gt;Controls-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         Control^ tempCtrl = safe_cast&lt;Control^&gt;(myEnum-&gt;Current);\n         \n         // Determine whether the control is textBox1,\n         // and if it is, remove it.\n         if ( tempCtrl-&gt;Name-&gt;Equals( &quot;textBox1&quot; ) )\n         {\n            this-&gt;Controls-&gt;Remove( tempCtrl );\n         }\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Control.ControlRemoved#1\">    &#39; This example demonstrates the use of the ControlAdded and\n    &#39; ControlRemoved events. This example assumes that two Button controls \n    &#39; are added to the form and connected to the addControl_Click and \n    &#39; removeControl_Click event-handler methods.\n    Private Sub Form1_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Load\n        &#39; Connect the ControlRemoved and ControlAdded event handlers to the event-handler methods.\n        &#39; ControlRemoved and ControlAdded are not available at design time.\n        AddHandler Me.ControlRemoved, AddressOf Me.Control_Removed\n        AddHandler Me.ControlAdded, AddressOf Me.Control_Added\n    End Sub &#39;Form1_Load\n\n\n    Private Sub Control_Added(ByVal sender As Object, ByVal e As System.Windows.Forms.ControlEventArgs)\n        MessageBox.Show((&quot;The control named &quot; + e.Control.Name + &quot; has been added to the form.&quot;))\n    End Sub\n\n\n    Private Sub Control_Removed(ByVal sender As Object, ByVal e As System.Windows.Forms.ControlEventArgs)\n        MessageBox.Show((&quot;The control named &quot; + e.Control.Name + &quot; has been removed from the form.&quot;))\n    End Sub\n\n\n    &#39; Click event handler for a Button control. Adds a TextBox to the form.\n    Private Sub addControl_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles button1.Click\n        &#39; Create a new TextBox control and add it to the form.\n        Dim textBox1 As New TextBox()\n        textBox1.Size = New Size(100, 10)\n        textBox1.Location = New Point(10, 10)\n        &#39; Name the control in order to remove it later. \n        &#39; The name must be specified if a control is added at run time.\n        textBox1.Name = &quot;textBox1&quot;\n\n        &#39; Add the control to the form&#39;s control collection.\n        Me.Controls.Add(textBox1)\n    End Sub\n\n\n    &#39; Click event handler for a Button control.\n    &#39; Removes the previously added TextBox from the form.\n    Private Sub removeControl_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles button2.Click\n        &#39; Loop through all controls in the form&#39;s control collection.\n        Dim tempCtrl As Control\n        For Each tempCtrl In Me.Controls\n            &#39; Determine whether the control is textBox1,\n            &#39; and if it is, remove it.\n            If tempCtrl.Name = &quot;textBox1&quot; Then\n                Me.Controls.Remove(tempCtrl)\n            End If\n        Next tempCtrl\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Control.ControlRemoved#1\">        // This example demonstrates the use of the ControlAdded and\n        // ControlRemoved events. This example assumes that two Button controls\n        // are added to the form and connected to the addControl_Click and\n        // removeControl_Click event-handler methods.\n        private void Form1_Load(object sender, System.EventArgs e)\n        {\n            // Connect the ControlRemoved and ControlAdded event handlers\n            // to the event-handler methods.\n            // ControlRemoved and ControlAdded are not available at design time.\n            this.ControlRemoved += new System.Windows.Forms.ControlEventHandler(this.Control_Removed);\n            this.ControlAdded += new System.Windows.Forms.ControlEventHandler(this.Control_Added);\n        }\n\n        private void Control_Added(object sender, System.Windows.Forms.ControlEventArgs e)\n        {\n            MessageBox.Show(&quot;The control named &quot; + e.Control.Name + &quot; has been added to the form.&quot;);\n        }\n\n        private void Control_Removed(object sender, System.Windows.Forms.ControlEventArgs e)\n        {\n            MessageBox.Show(&quot;The control named &quot; + e.Control.Name + &quot; has been removed from the form.&quot;);\n        }\n\n        // Click event handler for a Button control. Adds a TextBox to the form.\n        private void addControl_Click(object sender, System.EventArgs e)\n        {\n            // Create a new TextBox control and add it to the form.\n            TextBox textBox1 = new TextBox();\n            textBox1.Size = new Size(100,10);\n            textBox1.Location = new Point(10,10);\n            // Name the control in order to remove it later. The name must be specified\n            // if a control is added at run time.\n            textBox1.Name = &quot;textBox1&quot;;\n\n            // Add the control to the form&#39;s control collection.\n            this.Controls.Add(textBox1);\n        }\n\n        // Click event handler for a Button control.\n        // Removes the previously added TextBox from the form.\n        private void removeControl_Click(object sender, System.EventArgs e)\n        {\n            // Loop through all controls in the form&#39;s control collection.\n            foreach (Control tempCtrl in this.Controls)\n            {\n                // Determine whether the control is textBox1,\n                // and if it is, remove it.\n                if (tempCtrl.Name == &quot;textBox1&quot;)\n                {\n                    this.Controls.Remove(tempCtrl);\n                }\n            }\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_CursorChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CursorChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.Forms.Control.Cursor*</span> property changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler CursorChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event is raised if the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Cursor_\" data-linktype=\"relative-path\">Cursor</a> property is changed by either a programmatic modification or user interaction.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates changing the mouse cursor using the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Cursor_\" data-linktype=\"relative-path\">Cursor</a> property, the <a class=\"xref\" href=\"system.windows.forms.cursor\" data-linktype=\"relative-path\">Cursor</a> class, and the <a class=\"xref\" href=\"system.windows.forms.cursors\" data-linktype=\"relative-path\">Cursors</a> class. The example creates a form that contains a <a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a> control, a <a class=\"xref\" href=\"system.windows.forms.panel\" data-linktype=\"relative-path\">Panel</a> control, and a <a class=\"xref\" href=\"system.windows.forms.listview\" data-linktype=\"relative-path\">ListView</a> control. The<a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a> contains all cursors provided by the <a class=\"xref\" href=\"system.windows.forms.cursors\" data-linktype=\"relative-path\">Cursors</a> class. When the user selects a mouse cursor in the <a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a>, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Cursor_\" data-linktype=\"relative-path\">Cursor</a> property is set to the selected cursor, which updates the cursor for the <a class=\"xref\" href=\"system.windows.forms.panel\" data-linktype=\"relative-path\">Panel</a>. The <a class=\"xref\" href=\"system.windows.forms.listview\" data-linktype=\"relative-path\">ListView</a> is updated every time the CursorChanged event occurs.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.Cursors#1\">#using &lt;System.dll&gt;\n#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n\nusing namespace System;\nusing namespace System::Drawing;\nusing namespace System::Windows::Forms;\n\nnamespace MCursor\n{\n   public ref class Form1: public System::Windows::Forms::Form\n   {\n   private:\n      System::Windows::Forms::ComboBox^ cursorSelectionComboBox;\n      System::Windows::Forms::Panel^ testPanel;\n      System::Windows::Forms::Label ^ label1;\n      System::Windows::Forms::Label ^ label2;\n      System::Windows::Forms::ListView^ cursorEventViewer;\n      System::Windows::Forms::Label ^ label3;\n\n   public:\n      Form1()\n      {\n         this-&gt;cursorSelectionComboBox = gcnew System::Windows::Forms::ComboBox;\n         this-&gt;testPanel = gcnew System::Windows::Forms::Panel;\n         this-&gt;label1 = gcnew System::Windows::Forms::Label;\n         this-&gt;label2 = gcnew System::Windows::Forms::Label;\n         this-&gt;cursorEventViewer = gcnew System::Windows::Forms::ListView;\n         this-&gt;label3 = gcnew System::Windows::Forms::Label;\n         \n         // Select Cursor Label\n         this-&gt;label2-&gt;Location = System::Drawing::Point( 24, 16 );\n         this-&gt;label2-&gt;Size = System::Drawing::Size( 80, 16 );\n         this-&gt;label2-&gt;Text = &quot;Select cursor:&quot;;\n         \n         // Cursor Testing Panel Label\n         this-&gt;label1-&gt;Location = System::Drawing::Point( 24, 80 );\n         this-&gt;label1-&gt;Size = System::Drawing::Size( 144, 23 );\n         this-&gt;label1-&gt;Text = &quot;Cursor testing panel:&quot;;\n         \n         // Cursor Changed Events Label\n         this-&gt;label3-&gt;Location = System::Drawing::Point( 184, 16 );\n         this-&gt;label3-&gt;Size = System::Drawing::Size( 128, 16 );\n         this-&gt;label3-&gt;Text = &quot;Cursor changed events:&quot;;\n         \n         // Cursor Selection ComboBox\n         this-&gt;cursorSelectionComboBox-&gt;Location = System::Drawing::Point( 24, 40 );\n         this-&gt;cursorSelectionComboBox-&gt;Size = System::Drawing::Size( 152, 21 );\n         this-&gt;cursorSelectionComboBox-&gt;TabIndex = 0;\n         this-&gt;cursorSelectionComboBox-&gt;SelectedIndexChanged += gcnew System::EventHandler( this, &amp;Form1::cursorSelectionComboBox_SelectedIndexChanged );\n         \n         // Cursor Test Panel\n         this-&gt;testPanel-&gt;BackColor = System::Drawing::SystemColors::ControlDark;\n         this-&gt;testPanel-&gt;Location = System::Drawing::Point( 24, 104 );\n         this-&gt;testPanel-&gt;Size = System::Drawing::Size( 152, 160 );\n         this-&gt;testPanel-&gt;CursorChanged += gcnew System::EventHandler( this, &amp;Form1::testPanel_CursorChanged );\n         \n         // Cursor Event ListView\n         this-&gt;cursorEventViewer-&gt;Location = System::Drawing::Point( 184, 40 );\n         this-&gt;cursorEventViewer-&gt;Size = System::Drawing::Size( 256, 224 );\n         this-&gt;cursorEventViewer-&gt;TabIndex = 4;\n         this-&gt;cursorEventViewer-&gt;View = System::Windows::Forms::View::List;\n         \n         // Set up how the form should be displayed and add the controls to the form.\n         this-&gt;ClientSize = System::Drawing::Size( 456, 286 );\n         array&lt;System::Windows::Forms::Control^&gt;^temp0 = {this-&gt;label3,this-&gt;cursorEventViewer,this-&gt;label2,this-&gt;label1,this-&gt;testPanel,this-&gt;cursorSelectionComboBox};\n         this-&gt;Controls-&gt;AddRange( temp0 );\n         this-&gt;Text = &quot;Cursors Example&quot;;\n         \n         // Add all the cursor types to the combobox.\n         System::Collections::IEnumerator^ myEnum = CursorList()-&gt;GetEnumerator();\n         while ( myEnum-&gt;MoveNext() )\n         {\n            System::Windows::Forms::Cursor^ cursor = safe_cast&lt;System::Windows::Forms::Cursor^&gt;(myEnum-&gt;Current);\n            cursorSelectionComboBox-&gt;Items-&gt;Add( cursor );\n         }\n      }\n\n\n   private:\n      array&lt;System::Windows::Forms::Cursor^&gt;^ CursorList()\n      {\n         \n         // Make an array of all the types of cursors in Windows Forms.\n         array&lt;System::Windows::Forms::Cursor^&gt;^temp1 = {Cursors::AppStarting,Cursors::Arrow,Cursors::Cross,Cursors::Default,Cursors::Hand,Cursors::Help,Cursors::HSplit,Cursors::IBeam,Cursors::No,Cursors::NoMove2D,Cursors::NoMoveHoriz,Cursors::NoMoveVert,Cursors::PanEast,Cursors::PanNE,Cursors::PanNorth,Cursors::PanNW,Cursors::PanSE,Cursors::PanSouth,Cursors::PanSW,Cursors::PanWest,Cursors::SizeAll,Cursors::SizeNESW,Cursors::SizeNS,Cursors::SizeNWSE,Cursors::SizeWE,Cursors::UpArrow,Cursors::VSplit,Cursors::WaitCursor};\n         return temp1;\n      }\n\n      void cursorSelectionComboBox_SelectedIndexChanged( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n      {\n         \n         // Set the cursor in the test panel to be the selected cursor style.\n         testPanel-&gt;Cursor = dynamic_cast&lt;System::Windows::Forms::Cursor^&gt;(cursorSelectionComboBox-&gt;SelectedItem);\n      }\n\n      void testPanel_CursorChanged( Object^ sender, System::EventArgs^ /*e*/ )\n      {\n         \n         // Build up a String* containing the type of Object* sending the event, and the event.\n         String^ cursorEvent = String::Format( &quot;[{0}]: {1}&quot;, sender-&gt;GetType(), &quot;Cursor changed&quot; );\n         \n         // Record this event in the list view.\n         this-&gt;cursorEventViewer-&gt;Items-&gt;Add( cursorEvent );\n      }\n\n   };\n\n}\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew MCursor::Form1 );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.Cursors#1\">Imports System\nImports System.Drawing\nImports System.Windows.Forms\n\nNamespace MCursor\n    \n    &#39; Summary description for Form1.\n    Public NotInheritable Class Form1\n        Inherits System.Windows.Forms.Form\n\n        Friend WithEvents cursorSelectionComboBox As System.Windows.Forms.ComboBox\n        Friend WithEvents testPanel As System.Windows.Forms.Panel\n\n        Private label1 As System.Windows.Forms.Label\n        Private label2 As System.Windows.Forms.Label\n        Private cursorEventViewer As System.Windows.Forms.ListView\n        Private label3 As System.Windows.Forms.Label\n\n        &lt;System.STAThread()&gt; _\n        Public Shared Sub Main()\n            System.Windows.Forms.Application.Run(New Form1)\n        End Sub &#39;Main\n\n        Public Sub New()\n\n            Me.cursorSelectionComboBox = New System.Windows.Forms.ComboBox\n            Me.testPanel = New System.Windows.Forms.Panel\n            Me.label1 = New System.Windows.Forms.Label\n            Me.label2 = New System.Windows.Forms.Label\n            Me.cursorEventViewer = New System.Windows.Forms.ListView\n            Me.label3 = New System.Windows.Forms.Label\n\n            &#39; Select Cursor Label\n            Me.label2.Location = New System.Drawing.Point(24, 16)\n            Me.label2.Size = New System.Drawing.Size(80, 16)\n            Me.label2.Text = &quot;Select cursor:&quot;            &#39;\n\n            &#39; Cursor Testing Panel Label\n            Me.label1.Location = New System.Drawing.Point(24, 80)\n            Me.label1.Size = New System.Drawing.Size(144, 23)\n            Me.label1.Text = &quot;Cursor testing panel:&quot;\n\n            &#39; Cursor Changed Events Label\n            Me.label3.Location = New System.Drawing.Point(184, 16)\n            Me.label3.Size = New System.Drawing.Size(128, 16)\n            Me.label3.Text = &quot;Cursor changed events:&quot;\n\n            &#39; Cursor Selection ComboBox\n            Me.cursorSelectionComboBox.Location = New System.Drawing.Point(24, 40)\n            Me.cursorSelectionComboBox.Size = New System.Drawing.Size(152, 21)\n            Me.cursorSelectionComboBox.TabIndex = 0\n\n            &#39; Cursor Test Panel\n            Me.testPanel.BackColor = System.Drawing.SystemColors.ControlDark\n            Me.testPanel.Location = New System.Drawing.Point(24, 104)\n            Me.testPanel.Size = New System.Drawing.Size(152, 160)\n\n            &#39; Cursor Event ListView\n            Me.cursorEventViewer.Location = New System.Drawing.Point(184, 40)\n            Me.cursorEventViewer.Size = New System.Drawing.Size(256, 224)\n            Me.cursorEventViewer.TabIndex = 4\n            Me.cursorEventViewer.View = System.Windows.Forms.View.List\n\n            &#39; Set up how the form should be displayed and add the controls to the form.\n            Me.ClientSize = New System.Drawing.Size(456, 286)\n            Me.Controls.AddRange(New System.Windows.Forms.Control() {Me.label3, _\n                                    Me.cursorEventViewer, Me.label2, Me.label1, _\n                                    Me.testPanel, Me.cursorSelectionComboBox})\n\n            Me.Text = &quot;Cursors Example&quot;\n\n            &#39; Add all the cursor types to the combobox.\n            Dim cursor As Cursor\n            For Each cursor In CursorList()\n                cursorSelectionComboBox.Items.Add(cursor)\n            Next cursor\n        End Sub &#39;New \n\n        Private Function CursorList() As Cursor()\n            &#39; Make an array of all the types of cursors in Windows Forms.\n            return New Cursor() {Cursors.AppStarting, Cursors.Arrow, Cursors.Cross, _\n                                 Cursors.Default, Cursors.Hand, Cursors.Help, _\n                                 Cursors.HSplit, Cursors.IBeam, Cursors.No, _\n                                 Cursors.NoMove2D, Cursors.NoMoveHoriz, Cursors.NoMoveVert, _\n                                 Cursors.PanEast, Cursors.PanNE, Cursors.PanNorth, _\n                                 Cursors.PanNW, Cursors.PanSE, Cursors.PanSouth, _\n                                 Cursors.PanSW, Cursors.PanWest, Cursors.SizeAll, _\n                                 Cursors.SizeNESW, Cursors.SizeNS, Cursors.SizeNWSE, _\n                                 Cursors.SizeWE, Cursors.UpArrow, Cursors.VSplit, Cursors.WaitCursor}\n        End Function\n\n        Private Sub cursorSelectionComboBox_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cursorSelectionComboBox.SelectedIndexChanged\n            &#39; Set the cursor in the test panel to be the selected cursor style.\n            testPanel.Cursor = CType(cursorSelectionComboBox.SelectedItem, Cursor)\n\n        End Sub \n\n        Private Sub testPanel_CursorChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles testPanel.CursorChanged\n            &#39; Build up a string containing the type of object sending the event, and the event.\n            Dim cursorEvent As String = String.Format(&quot;[{0}]: {1}&quot;, sender.GetType().ToString(), &quot;Cursor changed&quot;)\n\n            &#39; Records this event in the list view.\n            Me.cursorEventViewer.Items.Add(cursorEvent)\n\n        End Sub \n\n    End Class &#39;Form1\nEnd Namespace &#39;MCursor\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.Cursors#1\">using System;\nusing System.Drawing;\nusing System.Windows.Forms;\n\nnamespace MCursor\n{\n    public class Form1 : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ComboBox cursorSelectionComboBox;\n\n        private System.Windows.Forms.Panel testPanel;\n        private System.Windows.Forms.Label label1;\n        private System.Windows.Forms.Label label2;\n        private System.Windows.Forms.ListView cursorEventViewer;\n        private System.Windows.Forms.Label label3;\n        \n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new Form1());\n        }\n\n        public Form1()\n        {\n            this.cursorSelectionComboBox = new System.Windows.Forms.ComboBox();\n            this.testPanel = new System.Windows.Forms.Panel();\n            this.label1 = new System.Windows.Forms.Label();\n            this.label2 = new System.Windows.Forms.Label();\n            this.cursorEventViewer = new System.Windows.Forms.ListView();\n            this.label3 = new System.Windows.Forms.Label();\n\n            // Select Cursor Label\n            this.label2.Location = new System.Drawing.Point(24, 16);\n            this.label2.Size = new System.Drawing.Size(80, 16);\n            this.label2.Text = &quot;Select cursor:&quot;;\n\n            // Cursor Testing Panel Label\n            this.label1.Location = new System.Drawing.Point(24, 80);\n            this.label1.Size = new System.Drawing.Size(144, 23);\n            this.label1.Text = &quot;Cursor testing panel:&quot;;\n\n            // Cursor Changed Events Label\n            this.label3.Location = new System.Drawing.Point(184, 16);\n            this.label3.Size = new System.Drawing.Size(128, 16);\n            this.label3.Text = &quot;Cursor changed events:&quot;;\n            \n            // Cursor Selection ComboBox\n            this.cursorSelectionComboBox.Location = new System.Drawing.Point(24, 40);\n            this.cursorSelectionComboBox.Size = new System.Drawing.Size(152, 21);\n            this.cursorSelectionComboBox.TabIndex = 0;\n            this.cursorSelectionComboBox.SelectedIndexChanged += \n                 new System.EventHandler(this.cursorSelectionComboBox_SelectedIndexChanged);\n\n            // Cursor Test Panel\n            this.testPanel.BackColor = System.Drawing.SystemColors.ControlDark;\n            this.testPanel.Location = new System.Drawing.Point(24, 104);\n            this.testPanel.Size = new System.Drawing.Size(152, 160);\n            this.testPanel.CursorChanged += new System.EventHandler(this.testPanel_CursorChanged);\n\n            // Cursor Event ListView\n            this.cursorEventViewer.Location = new System.Drawing.Point(184, 40);\n            this.cursorEventViewer.Size = new System.Drawing.Size(256, 224);\n            this.cursorEventViewer.TabIndex = 4;\n            this.cursorEventViewer.View = System.Windows.Forms.View.List;\n\n            // Set up how the form should be displayed and add the controls to the form.\n            this.ClientSize = new System.Drawing.Size(456, 286);\n            this.Controls.AddRange(new System.Windows.Forms.Control[] {\n                                        this.label3, this.cursorEventViewer,\n                                        this.label2, this.label1,\n                                        this.testPanel, this.cursorSelectionComboBox});\n\n            this.Text = &quot;Cursors Example&quot;;\n\n            // Add all the cursor types to the combobox.\n            foreach (Cursor cursor in CursorList())\n            {\n                cursorSelectionComboBox.Items.Add(cursor);\n            }\n        \n        }\n\n        private Cursor [] CursorList()\n        {\n\n            // Make an array of all the types of cursors in Windows Forms.\n            return new Cursor [] {\n                                     Cursors.AppStarting, Cursors.Arrow, Cursors.Cross,\n                                     Cursors.Default, Cursors.Hand, Cursors.Help,\n                                     Cursors.HSplit, Cursors.IBeam, Cursors.No,\n                                     Cursors.NoMove2D, Cursors.NoMoveHoriz, Cursors.NoMoveVert,\n                                     Cursors.PanEast, Cursors.PanNE, Cursors.PanNorth,\n                                     Cursors.PanNW, Cursors.PanSE, Cursors.PanSouth,\n                                     Cursors.PanSW, Cursors.PanWest, Cursors.SizeAll,\n                                     Cursors.SizeNESW, Cursors.SizeNS, Cursors.SizeNWSE,\n                                     Cursors.SizeWE, Cursors.UpArrow, Cursors.VSplit, Cursors.WaitCursor};\n\n        }\n\n        private void cursorSelectionComboBox_SelectedIndexChanged(object sender, System.EventArgs e)\n        {\n            // Set the cursor in the test panel to be the selected cursor style.\n            testPanel.Cursor = (Cursor)cursorSelectionComboBox.SelectedItem;\n        }\n\n        private void testPanel_CursorChanged(object sender, System.EventArgs e)\n        {\n            // Build up a string containing the type of object sending the event, and the event.\n            string cursorEvent = string.Format(&quot;[{0}]: {1}&quot;, sender.GetType().ToString(), &quot;Cursor changed&quot;);                \n        \n            // Record this event in the list view.\n            this.cursorEventViewer.Items.Add(cursorEvent);\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_DockChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DockChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.Forms.Control.Dock*</span> property changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler DockChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event is raised if the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Dock_\" data-linktype=\"relative-path\">Dock</a> property is changed by either a programmatic modification or user interaction.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example is an event handler that is executed when the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property value changes. The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class has several methods with the name pattern <em>PropertyName</em><code>Changed</code> that are raised when the corresponding <em>PropertyName</em> value changes(<em>PropertyName</em> represents the name of the corresponding property).  </p>\n<p> The following code example changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> of a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> displaying currency data. The example converts the text to a decimal number and changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Red_\" data-linktype=\"relative-path\">Red</a> if the number is negative and to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Black_\" data-linktype=\"relative-path\">Black</a> if the number is positive. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> that contains a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"Windows.Forms.Control_PropertyChangedEvents#1\">Private Sub currencyTextBox_TextChanged(sender As Object, _ \n  e As EventArgs) Handles currencyTextBox.TextChanged\n   Try\n      &#39; Convert the text to a Double and determine if it is a negative number.\n      If Double.Parse(currencyTextBox.Text) &lt; 0 Then\n         &#39; If the number is negative, display it in Red.\n         currencyTextBox.ForeColor = Color.Red\n      Else\n         &#39; If the number is not negative, display it in Black.\n         currencyTextBox.ForeColor = Color.Black\n      End If\n   Catch\n      &#39; If there is an error, display the text using the system colors.\n      currencyTextBox.ForeColor = SystemColors.ControlText\n   End Try\nEnd Sub \n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.Control_PropertyChangedEvents#1\">private void currencyTextBox_TextChanged(object sender, EventArgs e)\n{\n   try\n   {\n      // Convert the text to a Double and determine if it is a negative number.\n      if(double.Parse(currencyTextBox.Text) &lt; 0)\n      {\n         // If the number is negative, display it in Red.\n         currencyTextBox.ForeColor = Color.Red;\n      }\n      else\n      {\n         // If the number is not negative, display it in Black.\n         currencyTextBox.ForeColor = Color.Black;\n      }\n   }\n   catch\n   {\n      // If there is an error, display the text using the system colors.\n      currencyTextBox.ForeColor = SystemColors.ControlText;\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control_PropertyChangedEvents#1\">   private:\n      void currencyTextBox_TextChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n      {\n         try\n         {\n            // Convert the text to a Double and determine if it is a negative number.\n            if ( Double::Parse( currencyTextBox-&gt;Text ) &lt; 0 )\n            {\n               // If the number is negative, display it in Red.\n               currencyTextBox-&gt;ForeColor = Color::Red;\n            }\n            else\n            {\n               // If the number is not negative, display it in Black.\n               currencyTextBox-&gt;ForeColor = Color::Black;\n            }\n         }\n         catch ( Exception^ ) \n         {\n            // If there is an error, display the text using the system colors.\n            currencyTextBox-&gt;ForeColor = SystemColors::ControlText;\n         }\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_DoubleClick\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DoubleClick</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the control is double-clicked.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler DoubleClick;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A double-click is determined by the mouse settings of the user&#39;s operating system. The user can set the time between clicks of a mouse button that should be considered a double-click rather than two clicks. The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Click\" data-linktype=\"relative-path\">Click</a> event is raised every time a control is double-clicked. For example, if you have event handlers for the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Click\" data-linktype=\"relative-path\">Click</a> and DoubleClick events of a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Click\" data-linktype=\"relative-path\">Click</a> and DoubleClick events are raised when the form is double-clicked and both methods are called. If a control is double-clicked and that control does not support the DoubleClick event, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Click\" data-linktype=\"relative-path\">Click</a> event might be raised twice.  </p>\n<p> You must set the <code>StandardDoubleClick</code> and <code>StandardClick</code> values of <a class=\"xref\" href=\"system.windows.forms.controlstyles\" data-linktype=\"relative-path\">ControlStyles</a> to <code>true</code> for this event to be raised. These values might already be set to <code>true</code> if you are inheriting from existing Windows Forms controls.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following events are not raised for the <a class=\"xref\" href=\"system.windows.forms.tabcontrol\" data-linktype=\"relative-path\">TabControl</a> class unless there is at least one <a class=\"xref\" href=\"system.windows.forms.tabpage\" data-linktype=\"relative-path\">TabPage</a> in the <a class=\"xref\" href=\"system.windows.forms.tabcontrol#System_Windows_Forms_TabControl_TabPages_\" data-linktype=\"relative-path\">TabPages</a> collection: <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Click\" data-linktype=\"relative-path\">Click</a>, DoubleClick, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseUp\" data-linktype=\"relative-path\">MouseUp</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseHover\" data-linktype=\"relative-path\">MouseHover</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseEnter\" data-linktype=\"relative-path\">MouseEnter</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseLeave\" data-linktype=\"relative-path\">MouseLeave</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseMove\" data-linktype=\"relative-path\">MouseMove</a>. If there is at least one <a class=\"xref\" href=\"system.windows.forms.tabpage\" data-linktype=\"relative-path\">TabPage</a> in the collection, and the user interacts with the tab control&#39;s header (where the <a class=\"xref\" href=\"system.windows.forms.tabpage\" data-linktype=\"relative-path\">TabPage</a> names appear), the <a class=\"xref\" href=\"system.windows.forms.tabcontrol\" data-linktype=\"relative-path\">TabControl</a> raises the appropriate event. However, if the user interaction is within the client area of the tab page, the <a class=\"xref\" href=\"system.windows.forms.tabpage\" data-linktype=\"relative-path\">TabPage</a> raises the appropriate event.  </p>\n</div>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the DoubleClick event of a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> to load text files listed in the <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> into a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> control.  </p>\n<pre><code class=\"lang-cs\" name=\"Control.DoubleClick#1\">        // This example uses the DoubleClick event of a ListBox to load text files\n        // listed in the ListBox into a TextBox control. This example\n        // assumes that the ListBox, named listBox1, contains a list of valid file\n        // names with path and that this event handler method\n        // is connected to the DoublClick event of a ListBox control named listBox1.\n        // This example requires code access permission to access files.\n        private void listBox1_DoubleClick(object sender, System.EventArgs e)\n        {\n            // Get the name of the file to open from the ListBox.\n            String file = listBox1.SelectedItem.ToString();\n\n            try\n            {\n                // Determine if the file exists before loading.\n                if (System.IO.File.Exists(file))\n                {\n                    // Open the file and use a TextReader to read the contents into the TextBox.\n                    System.IO.FileInfo myFile = new System.IO.FileInfo(listBox1.SelectedItem.ToString());\n                    System.IO.TextReader myData = myFile.OpenText();;\n\n                    textBox1.Text = myData.ReadToEnd();\n                    myData.Close();\n                }\n            }\n                // Exception is thrown by the OpenText method of the FileInfo class.\n            catch(System.IO.FileNotFoundException)\n            {\n                MessageBox.Show(&quot;The file you specified does not exist.&quot;);\n            }\n                // Exception is thrown by the ReadToEnd method of the TextReader class.\n            catch(System.IO.IOException)\n            {\n                MessageBox.Show(&quot;There was a problem loading the file into the TextBox. Ensure that the file is a valid text file.&quot;);\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Control.DoubleClick#1\">    &#39; This example uses the DoubleClick event of a ListBox to load text files  \n    &#39; listed in the ListBox into a TextBox control. This example\n    &#39; assumes that the ListBox, named listBox1, contains a list of valid file \n    &#39; names with path and that this event handler method\n    &#39; is connected to the DoublClick event of a ListBox control named listBox1.\n    &#39; This example requires code access permission to access files.\n    Private Sub listBox1_DoubleClick(ByVal sender As Object, ByVal e As System.EventArgs) Handles listBox1.DoubleClick\n        &#39; Get the name of the file to open from the ListBox.\n        Dim file As [String] = listBox1.SelectedItem.ToString()\n\n        Try\n            &#39; Determine if the file exists before loading.\n            If System.IO.File.Exists(file) Then\n                &#39; Open the file and use a TextReader to read the contents into the TextBox.\n                Dim myFile As New System.IO.FileInfo(listBox1.SelectedItem.ToString())\n                Dim myData As System.IO.TextReader = myFile.OpenText()\n\n                textBox1.Text = myData.ReadToEnd()\n                myData.Close()\n            End If\n            &#39; Exception is thrown by the OpenText method of the FileInfo class.\n        Catch\n            MessageBox.Show(&quot;The file you specified does not exist.&quot;)\n            &#39; Exception is thrown by the ReadToEnd method of the TextReader class.\n        Catch\n         MessageBox.Show(&quot;There was a problem loading the file into the TextBox. Ensure that the file is a valid text file.&quot;)\n        End Try\n    End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"Control.DoubleClick#1\">   // This example uses the DoubleClick event of a ListBox to load text files\n   // listed in the ListBox into a TextBox control. This example\n   // assumes that the ListBox, named listBox1, contains a list of valid file\n   // names with path and that this event handler method\n   // is connected to the DoublClick event of a ListBox control named listBox1.\n   // This example requires code access permission to access files.\nprivate:\n   void listBox1_DoubleClick( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // Get the name of the file to open from the ListBox.\n      String^ file = listBox1-&gt;SelectedItem-&gt;ToString();\n      try\n      {\n         // Determine if the file exists before loading.\n         if ( System::IO::File::Exists( file ) )\n         {\n            \n            // Open the file and use a TextReader to read the contents into the TextBox.\n            System::IO::FileInfo^ myFile = gcnew System::IO::FileInfo( listBox1-&gt;SelectedItem-&gt;ToString() );\n            System::IO::TextReader^ myData = myFile-&gt;OpenText();\n            ;\n            textBox1-&gt;Text = myData-&gt;ReadToEnd();\n            myData-&gt;Close();\n         }\n      }\n      // Exception is thrown by the OpenText method of the FileInfo class.\n      catch ( System::IO::FileNotFoundException^ ) \n      {\n         MessageBox::Show( &quot;The file you specified does not exist.&quot; );\n      }\n      // Exception is thrown by the ReadToEnd method of the TextReader class.\n      catch ( System::IO::IOException^ ) \n      {\n         MessageBox::Show( &quot;There was a problem loading the file into the TextBox. Ensure that the file is a valid text file.&quot; );\n      }\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_DragDrop\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DragDrop</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a drag-and-drop operation is completed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.DragEventHandler DragDrop;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.windows.forms.drageventargs#System_Windows_Forms_DragEventArgs_X_\" data-linktype=\"relative-path\">X</a> and <a class=\"xref\" href=\"system.windows.forms.drageventargs#System_Windows_Forms_DragEventArgs_Y_\" data-linktype=\"relative-path\">Y</a> properties of the <a class=\"xref\" href=\"system.windows.forms.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a> are in screen coordinates, not client coordinates. The following line of <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/csprcs-md.md&quot; -->Visual C#<!--END INCLUDE --> code converts the properties to a client <a class=\"xref\" href=\"system.drawing.point\" data-linktype=\"relative-path\">Point</a>.  </p>\n<pre><code>Point clientPoint = targetControl.PointToClient(new Point(de.X, de.Y));\n</code></pre><div class=\"NOTE\"><h5>Note</h5><p> In versions earlier than <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->, if you put a <a class=\"xref\" href=\"system.windows.forms.usercontrol\" data-linktype=\"relative-path\">UserControl</a> with <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragEnter\" data-linktype=\"relative-path\">DragEnter</a> and DragDrop events on a Windows Form and drag and drop something onto the <a class=\"xref\" href=\"system.windows.forms.usercontrol\" data-linktype=\"relative-path\">UserControl</a> at design time, the <code>DropDrop</code> and <code>DropEnter</code> events are raised. However, when you close and reopen the solution, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragEnter\" data-linktype=\"relative-path\">DragEnter</a> and DragDrop events are not raised again.  </p>\n</div>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This code excerpt demonstrates using the DragDrop event. See the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoDragDrop_\" data-linktype=\"relative-path\">DoDragDrop</a> method for the complete code example.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.Control.DoDragDrop#5\">      void ListDragTarget_DragDrop( Object^ /*sender*/, System::Windows::Forms::DragEventArgs^ e )\n      {\n         // Ensure that the list item index is contained in the data.\n         if ( e-&gt;Data-&gt;GetDataPresent( System::String::typeid ) )\n         {\n            Object^ item = dynamic_cast&lt;Object^&gt;(e-&gt;Data-&gt;GetData( System::String::typeid ));\n            \n            // Perform drag-and-drop, depending upon the effect.\n            if ( e-&gt;Effect == DragDropEffects::Copy || e-&gt;Effect == DragDropEffects::Move )\n            {\n               // Insert the item.\n               if ( indexOfItemUnderMouseToDrop != ListBox::NoMatches )\n                              ListDragTarget-&gt;Items-&gt;Insert( indexOfItemUnderMouseToDrop, item );\n               else\n                              ListDragTarget-&gt;Items-&gt;Add( item );\n            }\n         }\n\n         // Reset the label text.\n         DropLocationLabel-&gt;Text = &quot;None&quot;;\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.Control.DoDragDrop#5\">    Private Sub ListDragTarget_DragDrop(ByVal sender As Object, ByVal e As DragEventArgs) Handles ListDragTarget.DragDrop\n        &#39; Ensures that the list item index is contained in the data.\n\n        If (e.Data.GetDataPresent(GetType(System.String))) Then\n\n            Dim item As Object = CType(e.Data.GetData(GetType(System.String)), System.Object)\n\n            &#39; Perform drag-and-drop, depending upon the effect.\n            If (e.Effect = DragDropEffects.Copy Or _\n                e.Effect = DragDropEffects.Move) Then\n\n                &#39; Insert the item.\n                If (indexOfItemUnderMouseToDrop &lt;&gt; ListBox.NoMatches) Then\n                    ListDragTarget.Items.Insert(indexOfItemUnderMouseToDrop, item)\n                Else\n                    ListDragTarget.Items.Add(item)\n\n                End If\n            End If\n            &#39; Reset the label text.\n            DropLocationLabel.Text = &quot;None&quot;\n        End If\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.Control.DoDragDrop#5\">        private void ListDragTarget_DragDrop(object sender, System.Windows.Forms.DragEventArgs e) \n        {\n            // Ensure that the list item index is contained in the data.\n            if (e.Data.GetDataPresent(typeof(System.String))) {\n\n                Object item = (object)e.Data.GetData(typeof(System.String));\n\n                // Perform drag-and-drop, depending upon the effect.\n                if (e.Effect == DragDropEffects.Copy ||\n                    e.Effect == DragDropEffects.Move) {\n                \n                    // Insert the item.\n                    if (indexOfItemUnderMouseToDrop != ListBox.NoMatches)\n                        ListDragTarget.Items.Insert(indexOfItemUnderMouseToDrop, item);\n                    else\n                        ListDragTarget.Items.Add(item);\n                    \n                }\n            }\n            // Reset the label text.\n            DropLocationLabel.Text = &quot;None&quot;;\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_DragEnter\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DragEnter</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when an object is dragged into the control&#39;s bounds.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.DragEventHandler DragEnter;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The DragEnter event is raised when the user first drags the mouse cursor over the control during a drag-and-drop operation.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In versions earlier than <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnext-md.md&quot; -->.NET Framework 2.0<!--END INCLUDE -->, if you put a <a class=\"xref\" href=\"system.windows.forms.usercontrol\" data-linktype=\"relative-path\">UserControl</a> with DragEnter and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragDrop\" data-linktype=\"relative-path\">DragDrop</a> events on a Windows Form and drag and drop something onto the <a class=\"xref\" href=\"system.windows.forms.usercontrol\" data-linktype=\"relative-path\">UserControl</a> at design time, the <code>DropDrop</code> and <code>DropEnter</code> events are raised. However, when you close and reopen the solution, the DragEnter and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragDrop\" data-linktype=\"relative-path\">DragDrop</a> events are not raised again.  </p>\n</div>\n<p> The following describes how and when events related to drag-and-drop operations are raised.  </p>\n<p> The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoDragDrop_\" data-linktype=\"relative-path\">DoDragDrop</a> method determines the control under the current cursor location. It then checks to see if the control is a valid drop target.  </p>\n<p> If the control is a valid drop target, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GiveFeedback\" data-linktype=\"relative-path\">GiveFeedback</a> event is raised with the drag-and-drop effect specified. For a list of drag-and-drop effects, see the <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a> enumeration.  </p>\n<p> Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.  </p>\n<ul>\n<li><p>If the user moves out of a window, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragLeave\" data-linktype=\"relative-path\">DragLeave</a> event is raised.  </p>\n</li>\n<li><p>If the mouse enters another control, the DragEnter for that control is raised.  </p>\n</li>\n<li><p>If the mouse moves but stays within the same control, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> event is raised.  </p>\n<p>If there is a change in the keyboard or mouse button state, the<a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_QueryContinueDrag\" data-linktype=\"relative-path\">QueryContinueDrag</a> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <a class=\"xref\" href=\"system.windows.forms.querycontinuedrageventargs#System_Windows_Forms_QueryContinueDragEventArgs_Action_\" data-linktype=\"relative-path\">Action</a> property of the event&#39;s <a class=\"xref\" href=\"system.windows.forms.querycontinuedrageventargs\" data-linktype=\"relative-path\">QueryContinueDragEventArgs</a>.  </p>\n</li>\n<li><p>If the value of <a class=\"xref\" href=\"system.windows.forms.dragaction\" data-linktype=\"relative-path\">DragAction</a> is <code>Continue</code>, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> event is raised to continue the operation and the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GiveFeedback\" data-linktype=\"relative-path\">GiveFeedback</a> event is raised with the new effect so appropriate visual feedback can be set. For a list of valid drop effects, see the <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a> enumeration.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GiveFeedback\" data-linktype=\"relative-path\">GiveFeedback</a> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse&#39;s position.  </p>\n</div>\n</li>\n<li><p>If the value of <a class=\"xref\" href=\"system.windows.forms.dragaction\" data-linktype=\"relative-path\">DragAction</a> is <code>Drop</code>, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.  </p>\n</li>\n<li><p>If the value of <a class=\"xref\" href=\"system.windows.forms.dragaction\" data-linktype=\"relative-path\">DragAction</a> is <code>Cancel</code>, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragLeave\" data-linktype=\"relative-path\">DragLeave</a> event is raised.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.windows.forms.drageventargs#System_Windows_Forms_DragEventArgs_X_\" data-linktype=\"relative-path\">X</a> and <a class=\"xref\" href=\"system.windows.forms.drageventargs#System_Windows_Forms_DragEventArgs_Y_\" data-linktype=\"relative-path\">Y</a> properties of the <a class=\"xref\" href=\"system.windows.forms.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a> are in screen coordinates, not client coordinates. The following line of <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/csprcs-md.md&quot; -->Visual C#<!--END INCLUDE --> code converts the properties to a client <a class=\"xref\" href=\"system.drawing.point\" data-linktype=\"relative-path\">Point</a>.  </p>\n</div>\n<pre><code>Point clientPoint = targetControl.PointToClient(new Point(de.X, de.Y));\n</code></pre><p>For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates a drag-and-drop operation between two <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> controls. The example calls the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoDragDrop_\" data-linktype=\"relative-path\">DoDragDrop</a> method when the drag action starts. The drag action starts if the mouse has moved more than <a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_DragSize_\" data-linktype=\"relative-path\">DragSize</a> from the mouse location during the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> event. The <a class=\"xref\" href=\"system.windows.forms.listbox#System_Windows_Forms_ListBox_IndexFromPoint_\" data-linktype=\"relative-path\">IndexFromPoint</a> method is used to determine the index of the item to drag during the <code>MouseDown</code> event.  </p>\n<p> The example also demonstrates using custom cursors for the drag-and-drop operation. The example requires that two cursor files, <code>3dwarro.cur</code> and <code>3dwno.cur</code>, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the <code>UseCustomCursorsCheck</code><a class=\"xref\" href=\"system.windows.forms.checkbox\" data-linktype=\"relative-path\">CheckBox</a> is checked. The custom cursors are set in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GiveFeedback\" data-linktype=\"relative-path\">GiveFeedback</a> event handler.  </p>\n<p> The keyboard state is evaluated in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> event handler for the right <code>ListBox</code>, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the <code>ListBox</code> where the drop would occur is also determined during the <code>DragOver</code> event. If the data to drop is not a <code>String</code>, then the <a class=\"xref\" href=\"system.windows.forms.drageventargs#System_Windows_Forms_DragEventArgs_Effect_\" data-linktype=\"relative-path\">Effect</a> is set to <code>None</code> in <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a>. Finally, the status of the drop is displayed in the <code>DropLocationLabel</code><a class=\"xref\" href=\"system.windows.forms.label\" data-linktype=\"relative-path\">Label</a>.  </p>\n<p> The data to drop for the right <code>ListBox</code> is determined in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragDrop\" data-linktype=\"relative-path\">DragDrop</a> event handler and the <code>String</code> value is added at the appropriate place in the <code>ListBox</code>. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_QueryContinueDrag\" data-linktype=\"relative-path\">QueryContinueDrag</a> event handler.  </p>\n<p> This code excerpt demonstrates using the DragEnter event. See the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoDragDrop_\" data-linktype=\"relative-path\">DoDragDrop</a> method for the complete code example.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.Control.DoDragDrop#7\">      void ListDragTarget_DragEnter( Object^ /*sender*/, System::Windows::Forms::DragEventArgs^ /*e*/ )\n      {\n         // Reset the label text.\n         DropLocationLabel-&gt;Text = &quot;None&quot;;\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.Control.DoDragDrop#7\">    Private Sub ListDragTarget_DragEnter(ByVal sender As Object, ByVal e As DragEventArgs) Handles ListDragTarget.DragEnter\n\n        &#39; Reset the label text.\n        DropLocationLabel.Text = &quot;None&quot;\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.Control.DoDragDrop#7\">        private void ListDragTarget_DragEnter(object sender, System.Windows.Forms.DragEventArgs e) {\n            // Reset the label text.\n            DropLocationLabel.Text = &quot;None&quot;;\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_DragLeave\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DragLeave</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when an object is dragged out of the control&#39;s bounds.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler DragLeave;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The DragLeave event is raised when the user drags the cursor out of the control or the user cancels the current drag-and-drop operation.  </p>\n<p> The following describes how and when events related to drag-and-drop operations are raised.  </p>\n<p> The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoDragDrop_\" data-linktype=\"relative-path\">DoDragDrop</a> method determines the control under the current cursor location. It then checks to see if the control is a valid drop target.  </p>\n<p> If the control is a valid drop target, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GiveFeedback\" data-linktype=\"relative-path\">GiveFeedback</a> event is raised with the drag-and-drop effect specified. For a list of drag-and-drop effects, see the <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a> enumeration.  </p>\n<p> Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.  </p>\n<ul>\n<li><p>If the user moves out of a window, the DragLeave event is raised.  </p>\n</li>\n<li><p>If the mouse enters another control, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragEnter\" data-linktype=\"relative-path\">DragEnter</a> for that control is raised.  </p>\n</li>\n<li><p>If the mouse moves but stays within the same control, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> event is raised.  </p>\n<p>If there is a change in the keyboard or mouse button state, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_QueryContinueDrag\" data-linktype=\"relative-path\">QueryContinueDrag</a> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <a class=\"xref\" href=\"system.windows.forms.querycontinuedrageventargs#System_Windows_Forms_QueryContinueDragEventArgs_Action_\" data-linktype=\"relative-path\">Action</a> property of the event&#39;s <a class=\"xref\" href=\"system.windows.forms.querycontinuedrageventargs\" data-linktype=\"relative-path\">QueryContinueDragEventArgs</a>.  </p>\n</li>\n<li><p>If the value of <a class=\"xref\" href=\"system.windows.forms.dragaction\" data-linktype=\"relative-path\">DragAction</a> is <code>Continue</code>, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> event is raised to continue the operation and the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GiveFeedback\" data-linktype=\"relative-path\">GiveFeedback</a> event is raised with the new effect so appropriate visual feedback can be set. For a list of valid drop effects, see the <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a> enumeration.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GiveFeedback\" data-linktype=\"relative-path\">GiveFeedback</a> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse&#39;s position.  </p>\n</div>\n</li>\n<li><p>If the value of <a class=\"xref\" href=\"system.windows.forms.dragaction\" data-linktype=\"relative-path\">DragAction</a> is <code>Drop</code>, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.  </p>\n</li>\n<li><p>If the value of <a class=\"xref\" href=\"system.windows.forms.dragaction\" data-linktype=\"relative-path\">DragAction</a> is <code>Cancel</code>, the DragLeave event is raised.  </p>\n<p>For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates a drag-and-drop operation between two <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> controls. The example calls the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoDragDrop_\" data-linktype=\"relative-path\">DoDragDrop</a> method when the drag action starts. The drag action starts if the mouse has moved more than <a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_DragSize_\" data-linktype=\"relative-path\">DragSize</a> from the mouse location during the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> event. The <a class=\"xref\" href=\"system.windows.forms.listbox#System_Windows_Forms_ListBox_IndexFromPoint_\" data-linktype=\"relative-path\">IndexFromPoint</a> method is used to determine the index of the item to drag during the <code>MouseDown</code> event.  </p>\n<p> The example also demonstrates using custom cursors for the drag-and-drop operation. The example requires that two cursor files, <code>3dwarro.cur</code> and <code>3dwno.cur</code>, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the <code>UseCustomCursorsCheck</code><a class=\"xref\" href=\"system.windows.forms.checkbox\" data-linktype=\"relative-path\">CheckBox</a> is checked. The custom cursors are set in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GiveFeedback\" data-linktype=\"relative-path\">GiveFeedback</a> event handler.  </p>\n<p> The keyboard state is evaluated in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> event handler for the right <code>ListBox</code>, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the <code>ListBox</code> where the drop would occur is also determined during the <code>DragOver</code> event. If the data to drop is not a <code>String</code>, then the <a class=\"xref\" href=\"system.windows.forms.drageventargs#System_Windows_Forms_DragEventArgs_Effect_\" data-linktype=\"relative-path\">Effect</a> is set to <code>None</code> in <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a>. Finally, the status of the drop is displayed in the <code>DropLocationLabel</code><a class=\"xref\" href=\"system.windows.forms.label\" data-linktype=\"relative-path\">Label</a>.  </p>\n<p> The data to drop for the right <code>ListBox</code> is determined in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragDrop\" data-linktype=\"relative-path\">DragDrop</a> event handler and the <code>String</code> value is added at the appropriate place in the <code>ListBox</code>. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_QueryContinueDrag\" data-linktype=\"relative-path\">QueryContinueDrag</a> event handler.  </p>\n<p> This code excerpt demonstrates using the DragLeave event. See the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoDragDrop_\" data-linktype=\"relative-path\">DoDragDrop</a> method for the complete code example.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.Control.DoDragDrop#8\">      void ListDragTarget_DragLeave( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n      {\n        // Reset the label text.\n         DropLocationLabel-&gt;Text = &quot;None&quot;;\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.Control.DoDragDrop#8\">    Private Sub ListDragTarget_DragLeave(ByVal sender As Object, ByVal e As System.EventArgs) Handles ListDragTarget.DragLeave\n\n        &#39; Reset the label text.\n        DropLocationLabel.Text = &quot;None&quot;\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.Control.DoDragDrop#8\">        private void ListDragTarget_DragLeave(object sender, System.EventArgs e) {\n            // Reset the label text.\n            DropLocationLabel.Text = &quot;None&quot;;\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_DragOver\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DragOver</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when an object is dragged over the control&#39;s bounds.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.DragEventHandler DragOver;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The DragOver event is raised when the mouse cursor moves within the bounds of the control during a drag-and-drop operation.  </p>\n<p> The following describes how and when events related to drag-and-drop operations are raised.  </p>\n<p> The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoDragDrop_\" data-linktype=\"relative-path\">DoDragDrop</a> method determines the control under the current cursor location. It then checks to see if the control is a valid drop target.  </p>\n<p> If the control is a valid drop target, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GiveFeedback\" data-linktype=\"relative-path\">GiveFeedback</a> event is raised with the drag-and-drop effect specified. For a list of drag-and-drop effects, see the <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a> enumeration.  </p>\n<p> Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.  </p>\n<ul>\n<li><p>If the user moves out of a window, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragLeave\" data-linktype=\"relative-path\">DragLeave</a> event is raised.  </p>\n</li>\n<li><p>If the mouse enters another control, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragEnter\" data-linktype=\"relative-path\">DragEnter</a> for that control is raised.  </p>\n</li>\n<li><p>If the mouse moves but stays within the same control, the DragOver event is raised.  </p>\n<p>If there is a change in the keyboard or mouse button state, the<a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_QueryContinueDrag\" data-linktype=\"relative-path\">QueryContinueDrag</a> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <a class=\"xref\" href=\"system.windows.forms.querycontinuedrageventargs#System_Windows_Forms_QueryContinueDragEventArgs_Action_\" data-linktype=\"relative-path\">Action</a> property of the event&#39;s <a class=\"xref\" href=\"system.windows.forms.querycontinuedrageventargs\" data-linktype=\"relative-path\">QueryContinueDragEventArgs</a>.  </p>\n</li>\n<li><p>If the value of <a class=\"xref\" href=\"system.windows.forms.dragaction\" data-linktype=\"relative-path\">DragAction</a> value is <code>Continue</code>, the DragOver event is raised to continue the operation and the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GiveFeedback\" data-linktype=\"relative-path\">GiveFeedback</a> event is raised with the new effect so appropriate visual feedback can be set. For a list of valid drop effects, see the <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a> enumeration.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The DragOver and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GiveFeedback\" data-linktype=\"relative-path\">GiveFeedback</a> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse&#39;s position.  </p>\n</div>\n</li>\n<li><p>If the value of <a class=\"xref\" href=\"system.windows.forms.dragaction\" data-linktype=\"relative-path\">DragAction</a> is <code>Drop</code>, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.  </p>\n</li>\n<li><p>If the value of <a class=\"xref\" href=\"system.windows.forms.dragaction\" data-linktype=\"relative-path\">DragAction</a> is <code>Cancel</code>, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragLeave\" data-linktype=\"relative-path\">DragLeave</a> event is raised.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.windows.forms.drageventargs#System_Windows_Forms_DragEventArgs_X_\" data-linktype=\"relative-path\">X</a> and <a class=\"xref\" href=\"system.windows.forms.drageventargs#System_Windows_Forms_DragEventArgs_Y_\" data-linktype=\"relative-path\">Y</a> properties of the <a class=\"xref\" href=\"system.windows.forms.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a> are in screen coordinates, not client coordinates. The following line of C# code converts the properties to a client <a class=\"xref\" href=\"system.drawing.point\" data-linktype=\"relative-path\">Point</a>:  </p>\n<p> Point clientPoint = targetControl.PointToClient(new Point(de.X, de.Y));  </p>\n</div>\n<p>For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates a drag-and-drop operation between two <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> controls. The example calls the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoDragDrop_\" data-linktype=\"relative-path\">DoDragDrop</a> method when the drag action starts. The drag action starts if the mouse has moved more than <a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_DragSize_\" data-linktype=\"relative-path\">DragSize</a> from the mouse location during the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> event. The <a class=\"xref\" href=\"system.windows.forms.listbox#System_Windows_Forms_ListBox_IndexFromPoint_\" data-linktype=\"relative-path\">IndexFromPoint</a> method is used to determine the index of the item to drag during the <code>MouseDown</code> event.  </p>\n<p> The example also demonstrates using custom cursors for the drag-and-drop operation. The example requires that two cursor files, <code>3dwarro.cur</code> and <code>3dwno.cur</code>, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the <code>UseCustomCursorsCheck</code><a class=\"xref\" href=\"system.windows.forms.checkbox\" data-linktype=\"relative-path\">CheckBox</a> is checked. The custom cursors are set in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GiveFeedback\" data-linktype=\"relative-path\">GiveFeedback</a> event handler.  </p>\n<p> The keyboard state is evaluated in the DragOver event handler for the right <code>ListBox</code>, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the <code>ListBox</code> where the drop would occur is also determined during the <code>DragOver</code> event. If the data to drop is not a <code>String</code>, then the <a class=\"xref\" href=\"system.windows.forms.drageventargs#System_Windows_Forms_DragEventArgs_Effect_\" data-linktype=\"relative-path\">Effect</a> is set to <code>None</code> in <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a>. Finally, the status of the drop is displayed in the <code>DropLocationLabel</code><a class=\"xref\" href=\"system.windows.forms.label\" data-linktype=\"relative-path\">Label</a>.  </p>\n<p> The data to drop for the right <code>ListBox</code> is determined in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragDrop\" data-linktype=\"relative-path\">DragDrop</a> event handler and the <code>String</code> value is added at the appropriate place in the <code>ListBox</code>. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_QueryContinueDrag\" data-linktype=\"relative-path\">QueryContinueDrag</a> event handler.  </p>\n<p> This code excerpt demonstrates using the DragOver event. See the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoDragDrop_\" data-linktype=\"relative-path\">DoDragDrop</a> method for the complete code example.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.Control.DoDragDrop#4\">      void ListDragTarget_DragOver( Object^ /*sender*/, System::Windows::Forms::DragEventArgs^ e )\n      {\n         // Determine whether string data exists in the drop data. If not, then\n         // the drop effect reflects that the drop cannot occur.\n         if (  !e-&gt;Data-&gt;GetDataPresent( System::String::typeid ) )\n         {\n            e-&gt;Effect = DragDropEffects::None;\n            DropLocationLabel-&gt;Text = &quot;None - no string data.&quot;;\n            return;\n         }\n\n         // Set the effect based upon the KeyState.\n         if ( (e-&gt;KeyState &amp; (8 + 32)) == (8 + 32) &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Link) == DragDropEffects::Link) )\n         {\n            // KeyState 8 + 32 = CTL + ALT\n            // Link drag-and-drop effect.\n            e-&gt;Effect = DragDropEffects::Link;\n         }\n         else\n         if ( (e-&gt;KeyState &amp; 32) == 32 &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Link) == DragDropEffects::Link) )\n         {\n            // ALT KeyState for link.\n            e-&gt;Effect = DragDropEffects::Link;\n         }\n         else\n         if ( (e-&gt;KeyState &amp; 4) == 4 &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Move) == DragDropEffects::Move) )\n         {\n            // SHIFT KeyState for move.\n            e-&gt;Effect = DragDropEffects::Move;\n         }\n         else\n         if ( (e-&gt;KeyState &amp; 8) == 8 &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Copy) == DragDropEffects::Copy) )\n         {\n            // CTL KeyState for copy.\n            e-&gt;Effect = DragDropEffects::Copy;\n         }\n         else\n         if ( (e-&gt;AllowedEffect &amp; DragDropEffects::Move) == DragDropEffects::Move )\n         {\n            // By default, the drop action should be move, if allowed.\n            e-&gt;Effect = DragDropEffects::Move;\n         }\n         else\n                  e-&gt;Effect = DragDropEffects::None;\n\n\n\n\n\n         \n         // Get the index of the item the mouse is below.\n         // The mouse locations are relative to the screen, so they must be\n         // converted to client coordinates.\n         indexOfItemUnderMouseToDrop = ListDragTarget-&gt;IndexFromPoint( ListDragTarget-&gt;PointToClient( Point(e-&gt;X,e-&gt;Y) ) );\n         \n         // Updates the label text.\n         if ( indexOfItemUnderMouseToDrop != ListBox::NoMatches )\n         {\n            DropLocationLabel-&gt;Text = String::Concat( &quot;Drops before item # &quot;, (indexOfItemUnderMouseToDrop + 1) );\n         }\n         else\n                  DropLocationLabel-&gt;Text = &quot;Drops at the end.&quot;;\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.Control.DoDragDrop#4\">    Private Sub ListDragTarget_DragOver(ByVal sender As Object, ByVal e As DragEventArgs) Handles ListDragTarget.DragOver\n        &#39; Determine whether string data exists in the drop data. If not, then\n        &#39; the drop effect reflects that the drop cannot occur.\n        If Not (e.Data.GetDataPresent(GetType(System.String))) Then\n\n            e.Effect = DragDropEffects.None\n            DropLocationLabel.Text = &quot;None - no string data.&quot;\n            Return\n        End If\n\n        &#39; Set the effect based upon the KeyState.\n        If ((e.KeyState And (8 + 32)) = (8 + 32) And _\n            (e.AllowedEffect And DragDropEffects.Link) = DragDropEffects.Link) Then\n            &#39; KeyState 8 + 32 = CTL + ALT\n\n            &#39; Link drag-and-drop effect.\n            e.Effect = DragDropEffects.Link\n\n        ElseIf ((e.KeyState And 32) = 32 And _\n            (e.AllowedEffect And DragDropEffects.Link) = DragDropEffects.Link) Then\n\n            &#39; ALT KeyState for link.\n            e.Effect = DragDropEffects.Link\n\n        ElseIf ((e.KeyState And 4) = 4 And _\n            (e.AllowedEffect And DragDropEffects.Move) = DragDropEffects.Move) Then\n\n            &#39; SHIFT KeyState for move.\n            e.Effect = DragDropEffects.Move\n\n        ElseIf ((e.KeyState And 8) = 8 And _\n            (e.AllowedEffect And DragDropEffects.Copy) = DragDropEffects.Copy) Then\n\n            &#39; CTL KeyState for copy.\n            e.Effect = DragDropEffects.Copy\n\n        ElseIf ((e.AllowedEffect And DragDropEffects.Move) = DragDropEffects.Move) Then\n\n            &#39; By default, the drop action should be move, if allowed.\n            e.Effect = DragDropEffects.Move\n\n        Else\n            e.Effect = DragDropEffects.None\n        End If\n\n        &#39; Gets the index of the item the mouse is below. \n\n        &#39; The mouse locations are relative to the screen, so they must be \n        &#39; converted to client coordinates.\n\n        indexOfItemUnderMouseToDrop = _\n            ListDragTarget.IndexFromPoint(ListDragTarget.PointToClient(New Point(e.X, e.Y)))\n\n        &#39; Updates the label text.\n        If (indexOfItemUnderMouseToDrop &lt;&gt; ListBox.NoMatches) Then\n\n            DropLocationLabel.Text = &quot;Drops before item #&quot; &amp; (indexOfItemUnderMouseToDrop + 1)\n        Else\n            DropLocationLabel.Text = &quot;Drops at the end.&quot;\n        End If\n\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.Control.DoDragDrop#4\">        private void ListDragTarget_DragOver(object sender, System.Windows.Forms.DragEventArgs e) \n        {\n\n            // Determine whether string data exists in the drop data. If not, then\n            // the drop effect reflects that the drop cannot occur.\n            if (!e.Data.GetDataPresent(typeof(System.String))) {\n\n                e.Effect = DragDropEffects.None;\n                DropLocationLabel.Text = &quot;None - no string data.&quot;;\n                return;\n            }\n\n            // Set the effect based upon the KeyState.\n            if ((e.KeyState &amp; (8+32)) == (8+32) &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Link) == DragDropEffects.Link) {\n                // KeyState 8 + 32 = CTL + ALT\n\n                // Link drag-and-drop effect.\n                e.Effect = DragDropEffects.Link;\n\n            } else if ((e.KeyState &amp; 32) == 32 &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Link) == DragDropEffects.Link) {\n\n                // ALT KeyState for link.\n                e.Effect = DragDropEffects.Link;\n\n            } else if ((e.KeyState &amp; 4) == 4 &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Move) == DragDropEffects.Move) {\n\n                // SHIFT KeyState for move.\n                e.Effect = DragDropEffects.Move;\n\n            } else if ((e.KeyState &amp; 8) == 8 &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Copy) == DragDropEffects.Copy) {\n\n                // CTL KeyState for copy.\n                e.Effect = DragDropEffects.Copy;\n\n            } else if ((e.AllowedEffect &amp; DragDropEffects.Move) == DragDropEffects.Move)  {\n\n                // By default, the drop action should be move, if allowed.\n                e.Effect = DragDropEffects.Move;\n\n            } else\n                e.Effect = DragDropEffects.None;\n                \n            // Get the index of the item the mouse is below. \n\n            // The mouse locations are relative to the screen, so they must be \n            // converted to client coordinates.\n\n            indexOfItemUnderMouseToDrop = \n                ListDragTarget.IndexFromPoint(ListDragTarget.PointToClient(new Point(e.X, e.Y)));\n\n            // Updates the label text.\n            if (indexOfItemUnderMouseToDrop != ListBox.NoMatches){\n\n                DropLocationLabel.Text = &quot;Drops before item #&quot; + (indexOfItemUnderMouseToDrop + 1);\n            } else\n                DropLocationLabel.Text = &quot;Drops at the end.&quot;;\n\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_EnabledChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnabledChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the <span class=\"xref\">stem.Windows.Forms.Control.Enabled*</span> property value has changed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler EnabledChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event is raised if the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Enabled_\" data-linktype=\"relative-path\">Enabled</a> property is changed by either a programmatic modification or user interaction.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses two <a class=\"xref\" href=\"system.windows.forms.radiobutton\" data-linktype=\"relative-path\">RadioButton</a> controls to demonstrate the EnabledChanged event. Clicking one button changes the value of the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Enabled_\" data-linktype=\"relative-path\">Enabled</a> property of the other button to <code>false</code> and displays a <a class=\"xref\" href=\"system.windows.forms.messagebox\" data-linktype=\"relative-path\">MessageBox</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.Control.EnabledChanged#1\">Imports System\nImports System.Collections.Generic\nImports System.ComponentModel\nImports System.Data\nImports System.Drawing\nImports System.Text\nImports System.Windows.Forms\n\n\n\nPublic Class Form1\n   Inherits Form\n   Private WithEvents radioButton1 As RadioButton\n   Private WithEvents radioButton2 As RadioButton\n   \n   \n   Public Sub New()\n      InitializeComponent()\n   End Sub\n   \n   &lt;STAThread()&gt;  _\n   Shared Sub Main()\n      Application.EnableVisualStyles()\n      Application.SetCompatibleTextRenderingDefault(False)\n      Application.Run(New Form1())\n   End Sub\n   \n   \n   Private Sub InitializeComponent()\n      Me.radioButton1 = New System.Windows.Forms.RadioButton()\n      Me.radioButton2 = New System.Windows.Forms.RadioButton()\n      Me.SuspendLayout()\n      &#39; \n      &#39; radioButton1\n      &#39; \n      Me.radioButton1.AutoSize = True\n      Me.radioButton1.Location = New System.Drawing.Point(0, 0)\n      Me.radioButton1.Name = &quot;radioButton1&quot;\n      Me.radioButton1.Size = New System.Drawing.Size(62, 17)\n      Me.radioButton1.TabIndex = 0\n      Me.radioButton1.TabStop = True\n      Me.radioButton1.Text = &quot;Button1&quot;\n      Me.radioButton1.UseVisualStyleBackColor = True\n      &#39; \n      &#39; radioButton2\n      &#39; \n      Me.radioButton2.AutoSize = True\n      Me.radioButton2.Location = New System.Drawing.Point(0, 39)\n      Me.radioButton2.Name = &quot;radioButton2&quot;\n      Me.radioButton2.Size = New System.Drawing.Size(100, 17)\n      Me.radioButton2.TabIndex = 1\n      Me.radioButton2.TabStop = True\n      Me.radioButton2.Text = &quot;Disable Button1&quot;\n      Me.radioButton2.UseVisualStyleBackColor = True\n      &#39; \n      &#39; Form1\n      &#39; \n      Me.ClientSize = New System.Drawing.Size(292, 273)\n      Me.Controls.Add(radioButton2)\n      Me.Controls.Add(radioButton1)\n      Me.Name = &quot;Form1&quot;\n      Me.ResumeLayout(False)\n      Me.PerformLayout()\n   End Sub\n    \n   \n   Private Sub radioButton2_CheckedChanged(sender As Object, e As EventArgs) Handles radioButton2.CheckedChanged\n      radioButton1.Enabled = False\n   End Sub\n   \n   \n   Private Sub radioButton1_EnabledChanged(sender As Object, e As EventArgs) Handles radioButton1.EnabledChanged\n      MessageBox.Show(&quot;This button has been disabled.&quot;)\n   End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.Control.EnabledChanged#1\">using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Text;\nusing System.Windows.Forms;\n\npublic class Form1 : Form\n{\n    private RadioButton radioButton1;\n    private RadioButton radioButton2;\n\n    public Form1()\n    {\n        InitializeComponent();\n    }\n    [STAThread]\n    static void Main()\n    {\n        Application.EnableVisualStyles();\n        Application.SetCompatibleTextRenderingDefault(false);\n        Application.Run(new Form1());\n    }\n\n    private void InitializeComponent()\n    {\n        this.radioButton1 = new System.Windows.Forms.RadioButton();\n        this.radioButton2 = new System.Windows.Forms.RadioButton();\n        this.SuspendLayout();\n        // \n        // radioButton1\n        // \n        this.radioButton1.AutoSize = true;\n        this.radioButton1.Location = new System.Drawing.Point(0, 0);\n        this.radioButton1.Name = &quot;radioButton1&quot;;\n        this.radioButton1.Size = new System.Drawing.Size(62, 17);\n        this.radioButton1.TabIndex = 0;\n        this.radioButton1.TabStop = true;\n        this.radioButton1.Text = &quot;Button1&quot;;\n        this.radioButton1.UseVisualStyleBackColor = true;\n        this.radioButton1.EnabledChanged += new System.EventHandler(this.radioButton1_EnabledChanged);\n        // \n        // radioButton2\n        // \n        this.radioButton2.AutoSize = true;\n        this.radioButton2.Location = new System.Drawing.Point(0, 39);\n        this.radioButton2.Name = &quot;radioButton2&quot;;\n        this.radioButton2.Size = new System.Drawing.Size(100, 17);\n        this.radioButton2.TabIndex = 1;\n        this.radioButton2.TabStop = true;\n        this.radioButton2.Text = &quot;Disable Button1&quot;;\n        this.radioButton2.UseVisualStyleBackColor = true;\n        this.radioButton2.CheckedChanged += new System.EventHandler(this.radioButton2_CheckedChanged);\n        // \n        // Form1\n        // \n        this.ClientSize = new System.Drawing.Size(292, 273);\n        this.Controls.Add(this.radioButton2);\n        this.Controls.Add(this.radioButton1);\n        this.Name = &quot;Form1&quot;;\n        this.ResumeLayout(false);\n        this.PerformLayout();\n\n    }\n\n    private void radioButton2_CheckedChanged(object sender, EventArgs e)\n    {\n        radioButton1.Enabled = false;\n    }\n\n    private void radioButton1_EnabledChanged(object sender, EventArgs e)\n    {\n        MessageBox.Show(&quot;This button has been disabled.&quot;);\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Enter\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Enter</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the control is entered.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler Enter;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Select_\" data-linktype=\"relative-path\">Select</a> or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SelectNextControl_\" data-linktype=\"relative-path\">SelectNextControl</a> methods, or by setting the <a class=\"xref\" href=\"system.windows.forms.containercontrol#System_Windows_Forms_ContainerControl_ActiveControl_\" data-linktype=\"relative-path\">ActiveControl</a> property to the current form, focus events occur in the following order:  </p>\n<ol>\n<li><p>Enter  </p>\n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GotFocus\" data-linktype=\"relative-path\">GotFocus</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Leave\" data-linktype=\"relative-path\">Leave</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validating\" data-linktype=\"relative-path\">Validating</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validated\" data-linktype=\"relative-path\">Validated</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_LostFocus\" data-linktype=\"relative-path\">LostFocus</a>  \n\n<p>When you change the focus by using the mouse or by calling the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Focus_\" data-linktype=\"relative-path\">Focus</a> method, focus events occur in the following order:  </p>\n</li>\n<li><p>Enter  </p>\n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GotFocus\" data-linktype=\"relative-path\">GotFocus</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_LostFocus\" data-linktype=\"relative-path\">LostFocus</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Leave\" data-linktype=\"relative-path\">Leave</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validating\" data-linktype=\"relative-path\">Validating</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validated\" data-linktype=\"relative-path\">Validated</a>  \n\n<p>If the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CausesValidation_\" data-linktype=\"relative-path\">CausesValidation</a> property is set to <code>false</code>, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validating\" data-linktype=\"relative-path\">Validating</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validated\" data-linktype=\"relative-path\">Validated</a> events are suppressed.  </p>\n</li>\n</ol>\n<div class=\"NOTE\"><h5>Note</h5><p> The Enter and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Leave\" data-linktype=\"relative-path\">Leave</a> events are suppressed by the <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> class. The equivalent events in the <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> class are the <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_Activated\" data-linktype=\"relative-path\">Activated</a> and <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_Deactivate\" data-linktype=\"relative-path\">Deactivate</a> events. The Enter and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Leave\" data-linktype=\"relative-path\">Leave</a> events are hierarchical and will cascade up and down the parent chain until the appropriate control is reached. For example, assume you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with two <a class=\"xref\" href=\"system.windows.forms.groupbox\" data-linktype=\"relative-path\">GroupBox</a> controls, and each <a class=\"xref\" href=\"system.windows.forms.groupbox\" data-linktype=\"relative-path\">GroupBox</a> control has one <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> control. When the caret is moved from one <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> to the other, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Leave\" data-linktype=\"relative-path\">Leave</a> event is raised for the <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> and <a class=\"xref\" href=\"system.windows.forms.groupbox\" data-linktype=\"relative-path\">GroupBox</a>, and the Enter event is raised for the other <a class=\"xref\" href=\"system.windows.forms.groupbox\" data-linktype=\"relative-path\">GroupBox</a> and <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n</div>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Do not attempt to set focus from within the Enter, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GotFocus\" data-linktype=\"relative-path\">GotFocus</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Leave\" data-linktype=\"relative-path\">Leave</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_LostFocus\" data-linktype=\"relative-path\">LostFocus</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validating\" data-linktype=\"relative-path\">Validating</a>, or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validated\" data-linktype=\"relative-path\">Validated</a> event handlers. Doing so can cause your application or the operating system to stop responding. For more information, see the <code>WM_KILLFOCUS</code> topic in the &quot;Keyboard Input Reference&quot; section and the &quot;Message Deadlocks&quot; section of the<a href=\"http://msdn.microsoft.com/library/windows/desktop/ms644927(v=vs.85).aspx\" data-linktype=\"external\">About Messages and Message Queues</a>topic.  </p>\n</div>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the Enter event to change the foreground and background colors of a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> under particular conditions.  </p>\n<pre><code class=\"lang-cs\" name=\"Control.Enter#1\">        private void textBox1_Enter(object sender, System.EventArgs e)\n        {\n            // If the TextBox contains text, change its foreground and background colors.\n            if (textBox1.Text != String.Empty)\n            {\n                textBox1.ForeColor = Color.Red;\n                textBox1.BackColor = Color.Black;\n                // Move the selection pointer to the end of the text of the control.\n                textBox1.Select(textBox1.Text.Length, 0);\n            }\n        }\n\n        private void textBox1_Leave(object sender, System.EventArgs e)\n        {\n            // Reset the colors and selection of the TextBox after focus is lost.\n            textBox1.ForeColor = Color.Black;\n            textBox1.BackColor = Color.White;\n            textBox1.Select(0,0);\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Control.Enter#1\">private:\n   void textBox1_Enter( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // If the TextBox contains text, change its foreground and background colors.\n      if ( textBox1-&gt;Text != String::Empty )\n      {\n         textBox1-&gt;ForeColor = Color::Red;\n         textBox1-&gt;BackColor = Color::Black;\n\n         // Move the selection pointer to the end of the text of the control.\n         textBox1-&gt;Select(textBox1-&gt;Text-&gt;Length,0);\n      }\n   }\n\n   void textBox1_Leave( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // Reset the colors and selection of the TextBox after focus is lost.\n      textBox1-&gt;ForeColor = Color::Black;\n      textBox1-&gt;BackColor = Color::White;\n      textBox1-&gt;Select(0,0);\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Control.Enter#1\">    Private Sub textBox1_Enter(sender As Object, e As System.EventArgs) Handles textBox1.Enter\n        &#39; If the TextBox contains text, change its foreground and background colors.\n        If textBox1.Text &lt;&gt; [String].Empty Then\n            textBox1.ForeColor = Color.Red\n            textBox1.BackColor = Color.Black\n            &#39; Move the selection pointer to the end of the text of the control.\n            textBox1.Select(textBox1.Text.Length, 0)\n        End If\n    End Sub &#39;textBox1_Enter\n   \n   \n    Private Sub textBox1_Leave(sender As Object, e As System.EventArgs) Handles textBox1.Leave\n        &#39; Reset the colors and selection of the TextBox after focus is lost.\n        textBox1.ForeColor = Color.Black\n        textBox1.BackColor = Color.White\n        textBox1.Select(0, 0)\n    End Sub &#39;textBox1_Leave\nEnd Class &#39;Form1 \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_FontChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FontChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the <span class=\"xref\">stem.Windows.Forms.Control.Font*</span> property value changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler FontChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event is raised if the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Font_\" data-linktype=\"relative-path\">Font</a> property is changed by either a programmatic modification or through interaction.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the FontChanged event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.Control.FontChanged#1\">using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Text;\nusing System.Windows.Forms;\n\npublic class Form1 : Form\n{\n    private RadioButton radioButton1;\n    private RadioButton radioButton2;\n\n    public Form1()\n    {\n        InitializeComponent();\n    }\n    [STAThread]\n    static void Main()\n    {\n        Application.EnableVisualStyles();\n        Application.SetCompatibleTextRenderingDefault(false);\n        Application.Run(new Form1());\n    }\n\n    private void InitializeComponent()\n    {\n        this.radioButton1 = new System.Windows.Forms.RadioButton();\n        this.radioButton2 = new System.Windows.Forms.RadioButton();\n        this.SuspendLayout();\n        // \n        // radioButton1\n        // \n        this.radioButton1.AutoSize = true;\n        this.radioButton1.Location = new System.Drawing.Point(0, 0);\n        this.radioButton1.Name = &quot;radioButton1&quot;;\n        this.radioButton1.Size = new System.Drawing.Size(62, 17);\n        this.radioButton1.TabIndex = 0;\n        this.radioButton1.TabStop = true;\n        this.radioButton1.Text = &quot;Button1&quot;;\n        this.radioButton1.UseVisualStyleBackColor = true;\n        this.radioButton1.FontChanged += new System.EventHandler(this.radioButton1_FontChanged);\n        // \n        // radioButton2\n        // \n        this.radioButton2.AutoSize = true;\n        this.radioButton2.Location = new System.Drawing.Point(0, 39);\n        this.radioButton2.Name = &quot;radioButton2&quot;;\n        this.radioButton2.Size = new System.Drawing.Size(126, 17);\n        this.radioButton2.TabIndex = 1;\n        this.radioButton2.TabStop = true;\n        this.radioButton2.Text = &quot;Change Button1 font.&quot;;\n        this.radioButton2.UseVisualStyleBackColor = true;\n        this.radioButton2.CheckedChanged += new System.EventHandler(this.radioButton2_CheckedChanged);\n        // \n        // Form1\n        // \n        this.ClientSize = new System.Drawing.Size(292, 273);\n        this.Controls.Add(this.radioButton2);\n        this.Controls.Add(this.radioButton1);\n        this.Name = &quot;Form1&quot;;\n        this.ResumeLayout(false);\n        this.PerformLayout();\n\n    }\n\n    private void radioButton2_CheckedChanged(object sender, EventArgs e)\n    {\n        radioButton1.Font = new System.Drawing.Font(&quot;Microsoft Sans Serif&quot;, 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));\n    }\n\n    private void radioButton1_FontChanged(object sender, EventArgs e)\n    {\n        MessageBox.Show(&quot;The font has been changed.&quot;);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.Control.FontChanged#1\">Imports System\nImports System.Collections.Generic\nImports System.ComponentModel\nImports System.Data\nImports System.Drawing\nImports System.Text\nImports System.Windows.Forms\n\nPublic Class Form1\n   Inherits Form\n   Private WithEvents radioButton1 As RadioButton\n   Private WithEvents radioButton2 As RadioButton\n   \n   \n   Public Sub New()\n      InitializeComponent()\n   End Sub\n   \n   &lt;STAThread()&gt;  _\n   Shared Sub Main()\n      Application.EnableVisualStyles()\n      Application.SetCompatibleTextRenderingDefault(False)\n      Application.Run(New Form1())\n   End Sub\n   \n   \n   Private Sub InitializeComponent()\n      Me.radioButton1 = New System.Windows.Forms.RadioButton()\n      Me.radioButton2 = New System.Windows.Forms.RadioButton()\n      Me.SuspendLayout()\n      &#39; \n      &#39; radioButton1\n      &#39; \n      Me.radioButton1.AutoSize = True\n      Me.radioButton1.Location = New System.Drawing.Point(0, 0)\n      Me.radioButton1.Name = &quot;radioButton1&quot;\n      Me.radioButton1.Size = New System.Drawing.Size(62, 17)\n      Me.radioButton1.TabIndex = 0\n      Me.radioButton1.TabStop = True\n      Me.radioButton1.Text = &quot;Button1&quot;\n      Me.radioButton1.UseVisualStyleBackColor = True\n      &#39; \n      &#39; radioButton2\n      &#39; \n      Me.radioButton2.AutoSize = True\n      Me.radioButton2.Location = New System.Drawing.Point(0, 39)\n      Me.radioButton2.Name = &quot;radioButton2&quot;\n      Me.radioButton2.Size = New System.Drawing.Size(126, 17)\n      Me.radioButton2.TabIndex = 1\n      Me.radioButton2.TabStop = True\n      Me.radioButton2.Text = &quot;Change Button1 font.&quot;\n      Me.radioButton2.UseVisualStyleBackColor = True\n      &#39; \n      &#39; Form1\n      &#39; \n      Me.ClientSize = New System.Drawing.Size(292, 273)\n      Me.Controls.Add(radioButton2)\n      Me.Controls.Add(radioButton1)\n      Me.Name = &quot;Form1&quot;\n      Me.ResumeLayout(False)\n      Me.PerformLayout()\n   End Sub\n    \n   \n   Private Sub radioButton2_CheckedChanged(sender As Object, e As EventArgs) Handles radioButton2.CheckedChanged\n      radioButton1.Font = New System.Drawing.Font(&quot;Microsoft Sans Serif&quot;, 9.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))\n   End Sub\n   \n   \n   Private Sub radioButton1_FontChanged(sender As Object, e As EventArgs) Handles radioButton1.FontChanged\n      MessageBox.Show(&quot;The font has been changed.&quot;)\n   End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ForeColorChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ForeColorChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the <span class=\"xref\">stem.Windows.Forms.Control.ForeColor*</span> property value changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler ForeColorChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event is raised if the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> property is changed by either a programmatic modification or through interaction.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example is an event handler that is executed when the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property value changes. The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class has several methods with the name pattern <em>PropertyName</em><code>Changed</code> that are raised when the corresponding <em>PropertyName</em> value changes (<em>PropertyName</em> represents the name of the corresponding property).  </p>\n<p> The following code example changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> of a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> displaying currency data. The example converts the text to a decimal number and changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Red_\" data-linktype=\"relative-path\">Red</a> if the number is negative and to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Black_\" data-linktype=\"relative-path\">Black</a> if the number is positive. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> that contains a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"Windows.Forms.Control_PropertyChangedEvents#1\">Private Sub currencyTextBox_TextChanged(sender As Object, _ \n  e As EventArgs) Handles currencyTextBox.TextChanged\n   Try\n      &#39; Convert the text to a Double and determine if it is a negative number.\n      If Double.Parse(currencyTextBox.Text) &lt; 0 Then\n         &#39; If the number is negative, display it in Red.\n         currencyTextBox.ForeColor = Color.Red\n      Else\n         &#39; If the number is not negative, display it in Black.\n         currencyTextBox.ForeColor = Color.Black\n      End If\n   Catch\n      &#39; If there is an error, display the text using the system colors.\n      currencyTextBox.ForeColor = SystemColors.ControlText\n   End Try\nEnd Sub \n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.Control_PropertyChangedEvents#1\">private void currencyTextBox_TextChanged(object sender, EventArgs e)\n{\n   try\n   {\n      // Convert the text to a Double and determine if it is a negative number.\n      if(double.Parse(currencyTextBox.Text) &lt; 0)\n      {\n         // If the number is negative, display it in Red.\n         currencyTextBox.ForeColor = Color.Red;\n      }\n      else\n      {\n         // If the number is not negative, display it in Black.\n         currencyTextBox.ForeColor = Color.Black;\n      }\n   }\n   catch\n   {\n      // If there is an error, display the text using the system colors.\n      currencyTextBox.ForeColor = SystemColors.ControlText;\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control_PropertyChangedEvents#1\">   private:\n      void currencyTextBox_TextChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n      {\n         try\n         {\n            // Convert the text to a Double and determine if it is a negative number.\n            if ( Double::Parse( currencyTextBox-&gt;Text ) &lt; 0 )\n            {\n               // If the number is negative, display it in Red.\n               currencyTextBox-&gt;ForeColor = Color::Red;\n            }\n            else\n            {\n               // If the number is not negative, display it in Black.\n               currencyTextBox-&gt;ForeColor = Color::Black;\n            }\n         }\n         catch ( Exception^ ) \n         {\n            // If there is an error, display the text using the system colors.\n            currencyTextBox-&gt;ForeColor = SystemColors::ControlText;\n         }\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_GiveFeedback\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GiveFeedback</div>        \r\n          </div>\r\n    \r\n            <p>Occurs during a drag operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.GiveFeedbackEventHandler GiveFeedback;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GiveFeedback event is raised when a drag-and-drop operation is started. With the GiveFeedback event, the source of a drag event can modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation.  </p>\n<p> The following describes how and when events related to drag-and-drop operations are raised.  </p>\n<p> The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoDragDrop_\" data-linktype=\"relative-path\">DoDragDrop</a> method determines the control under the current cursor location. It then checks to see if the control is a valid drop target.  </p>\n<p> If the control is a valid drop target, the GiveFeedback event is raised with the drag-and-drop effect specified. For a list of drag-and-drop effects, see the <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a> enumeration.  </p>\n<p> Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.  </p>\n<ul>\n<li><p>If the user moves out of a window, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragLeave\" data-linktype=\"relative-path\">DragLeave</a> event is raised.  </p>\n</li>\n<li><p>If the mouse enters another control, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragEnter\" data-linktype=\"relative-path\">DragEnter</a> for that control is raised.  </p>\n</li>\n<li><p>If the mouse moves but stays within the same control, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> event is raised.  </p>\n<p>If there is a change in the keyboard or mouse button state, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_QueryContinueDrag\" data-linktype=\"relative-path\">QueryContinueDrag</a> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <a class=\"xref\" href=\"system.windows.forms.querycontinuedrageventargs#System_Windows_Forms_QueryContinueDragEventArgs_Action_\" data-linktype=\"relative-path\">Action</a> property of the event&#39;s <a class=\"xref\" href=\"system.windows.forms.querycontinuedrageventargs\" data-linktype=\"relative-path\">QueryContinueDragEventArgs</a>.  </p>\n</li>\n<li><p>If the value of <a class=\"xref\" href=\"system.windows.forms.dragaction\" data-linktype=\"relative-path\">DragAction</a> is <code>Continue</code>, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> event is raised to continue the operation and the GiveFeedback event is raised with the new effect so appropriate visual feedback can be set. For a list of valid drop effects, see the <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a> enumeration.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> and GiveFeedback events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse&#39;s position.  </p>\n</div>\n</li>\n<li><p>If the value of <a class=\"xref\" href=\"system.windows.forms.dragaction\" data-linktype=\"relative-path\">DragAction</a> is <code>Drop</code>, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.  </p>\n</li>\n<li><p>If the value of <a class=\"xref\" href=\"system.windows.forms.dragaction\" data-linktype=\"relative-path\">DragAction</a> is <code>Cancel</code>, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragLeave\" data-linktype=\"relative-path\">DragLeave</a> event is raised.  </p>\n<p>For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates a drag-and-drop operation between two <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> controls. The example calls the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoDragDrop_\" data-linktype=\"relative-path\">DoDragDrop</a> method when the drag action starts. The drag action starts if the mouse has moved more than <a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_DragSize_\" data-linktype=\"relative-path\">DragSize</a> from the mouse location during the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> event. The <a class=\"xref\" href=\"system.windows.forms.listbox#System_Windows_Forms_ListBox_IndexFromPoint_\" data-linktype=\"relative-path\">IndexFromPoint</a> method is used to determine the index of the item to drag during the <code>MouseDown</code> event.  </p>\n<p> The example also demonstrates using custom cursors for the drag-and-drop operation. The example requires that two cursor files, <code>3dwarro.cur</code> and <code>3dwno.cur</code>, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the <code>UseCustomCursorsCheck</code><a class=\"xref\" href=\"system.windows.forms.checkbox\" data-linktype=\"relative-path\">CheckBox</a> is checked. The custom cursors are set in the GiveFeedback event handler.  </p>\n<p> The keyboard state is evaluated in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> event handler for the right <code>ListBox</code>, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the <code>ListBox</code>where the drop would occur is also determined during the <code>DragOver</code> event. If the data to drop is not a <code>String</code>, then the <a class=\"xref\" href=\"system.windows.forms.drageventargs#System_Windows_Forms_DragEventArgs_Effect_\" data-linktype=\"relative-path\">Effect</a> is set to <code>None</code> in <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a>. Finally, the status of the drop is displayed in the <code>DropLocationLabel</code><a class=\"xref\" href=\"system.windows.forms.label\" data-linktype=\"relative-path\">Label</a>.  </p>\n<p> The data to drop for the right <code>ListBox</code> is determined in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragDrop\" data-linktype=\"relative-path\">DragDrop</a> event handler and the <code>String</code> value is added at the appropriate place in the <code>ListBox</code>. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_QueryContinueDrag\" data-linktype=\"relative-path\">QueryContinueDrag</a> event handler.  </p>\n<p> This code excerpt demonstrates using the GiveFeedback event. See the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoDragDrop_\" data-linktype=\"relative-path\">DoDragDrop</a> method for the complete code example.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.Control.DoDragDrop#3\">      void ListDragSource_GiveFeedback( Object^ /*sender*/, System::Windows::Forms::GiveFeedbackEventArgs^ e )\n      {\n         // Use custom cursors if the check box is checked.\n         if ( UseCustomCursorsCheck-&gt;Checked )\n         {\n            // Sets the custom cursor based upon the effect.\n            e-&gt;UseDefaultCursors = false;\n            if ( (e-&gt;Effect &amp; DragDropEffects::Move) == DragDropEffects::Move )\n                        ::Cursor::Current = MyNormalCursor;\n            else\n                        ::Cursor::Current = MyNoDropCursor;\n         }\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.Control.DoDragDrop#3\">    Private Sub ListDragSource_GiveFeedback(ByVal sender As Object, ByVal e As GiveFeedbackEventArgs) Handles ListDragSource.GiveFeedback\n\n        &#39; Use custom cursors if the check box is checked.\n        If (UseCustomCursorsCheck.Checked) Then\n\n            &#39; Set the custom cursor based upon the effect.\n            e.UseDefaultCursors = False\n            If ((e.Effect And DragDropEffects.Move) = DragDropEffects.Move) Then\n                Cursor.Current = MyNormalCursor\n            Else\n                Cursor.Current = MyNoDropCursor\n            End If\n        End If\n\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.Control.DoDragDrop#3\">        private void ListDragSource_GiveFeedback(object sender, System.Windows.Forms.GiveFeedbackEventArgs e) \n        {\n            // Use custom cursors if the check box is checked.\n            if (UseCustomCursorsCheck.Checked) {\n\n                // Sets the custom cursor based upon the effect.\n                e.UseDefaultCursors = false;\n                if ((e.Effect &amp; DragDropEffects.Move) == DragDropEffects.Move)\n                    Cursor.Current = MyNormalCursor;\n                else \n                    Cursor.Current = MyNoDropCursor;\n            }\n        \n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_GotFocus\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GotFocus</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the control receives focus.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler GotFocus;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Select_\" data-linktype=\"relative-path\">Select</a> or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SelectNextControl_\" data-linktype=\"relative-path\">SelectNextControl</a> methods, or by setting the <a class=\"xref\" href=\"system.windows.forms.containercontrol#System_Windows_Forms_ContainerControl_ActiveControl_\" data-linktype=\"relative-path\">ActiveControl</a> property to the current form, focus events occur in the following order:  </p>\n<ol>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Enter\" data-linktype=\"relative-path\">Enter</a>  \n</li>\n<li><p>GotFocus  </p>\n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Leave\" data-linktype=\"relative-path\">Leave</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validating\" data-linktype=\"relative-path\">Validating</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validated\" data-linktype=\"relative-path\">Validated</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_LostFocus\" data-linktype=\"relative-path\">LostFocus</a>  \n\n<p>When you change the focus by using the mouse or by calling the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Focus_\" data-linktype=\"relative-path\">Focus</a> method, focus events occur in the following order:  </p>\n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Enter\" data-linktype=\"relative-path\">Enter</a>  \n</li>\n<li><p>GotFocus  </p>\n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_LostFocus\" data-linktype=\"relative-path\">LostFocus</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Leave\" data-linktype=\"relative-path\">Leave</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validating\" data-linktype=\"relative-path\">Validating</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validated\" data-linktype=\"relative-path\">Validated</a>  \n\n<p>If the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CausesValidation_\" data-linktype=\"relative-path\">CausesValidation</a> property is set to <code>false</code>, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validating\" data-linktype=\"relative-path\">Validating</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validated\" data-linktype=\"relative-path\">Validated</a> events are suppressed.  </p>\n<p><strong>Note</strong> The GotFocus and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_LostFocus\" data-linktype=\"relative-path\">LostFocus</a> events are low-level focus events that are tied to the WM_KILLFOCUS and WM_SETFOCUS Windows messages. Typically, the GotFocus and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_LostFocus\" data-linktype=\"relative-path\">LostFocus</a> events are only used when updating <a class=\"xref\" href=\"system.windows.forms.uicues\" data-linktype=\"relative-path\">UICues</a> or when writing custom controls. Instead the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Enter\" data-linktype=\"relative-path\">Enter</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Leave\" data-linktype=\"relative-path\">Leave</a> events should be used for all controls except the <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> class, which uses the <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_Activated\" data-linktype=\"relative-path\">Activated</a> and <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_Deactivate\" data-linktype=\"relative-path\">Deactivate</a> events. For more information about the GotFocus and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_LostFocus\" data-linktype=\"relative-path\">LostFocus</a> events, see the <a href=\"http://msdn.microsoft.com/library/windows/desktop/ms646283(v=vs.85).aspx\" data-linktype=\"external\">WM_SETFOCUS</a>and<a href=\"http://msdn.microsoft.com/library/windows/desktop/ms646282(v=vs.85).aspx\" data-linktype=\"external\">WM_KILLFOCUS</a> topics.  </p>\n</li>\n</ol>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Do not attempt to set focus from within the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Enter\" data-linktype=\"relative-path\">Enter</a>, GotFocus, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Leave\" data-linktype=\"relative-path\">Leave</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_LostFocus\" data-linktype=\"relative-path\">LostFocus</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validating\" data-linktype=\"relative-path\">Validating</a>, or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validated\" data-linktype=\"relative-path\">Validated</a> event handlers. Doing so can cause your application or the operating system to stop responding. For more information, see the <a href=\"http://msdn.microsoft.com/library/windows/desktop/ms646282(v=vs.85).aspx\" data-linktype=\"external\">WM_KILLFOCUS</a> topic.  </p>\n</div>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the GotFocus event. This report helps you to learn when the event occurs and can assist you in debugging.  </p>\n<p> To run the example code, paste it into a project that contains an instance of a type that inherits from <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a>, such as a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> or <a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a>. Then name the instance <code>Control1</code> and ensure that the event handler is associated with the GotFocus event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#47\">private void Control1_GotFocus(Object sender, EventArgs e) {\n\n   MessageBox.Show(&quot;You are in the Control.GotFocus event.&quot;);\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#47\">Private Sub Control1_GotFocus(sender as Object, e as EventArgs) _ \n     Handles Control1.GotFocus\n\nConsole.WriteLine(&quot;You are in the Control.GotFocus event.&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_HandleCreated\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HandleCreated</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a handle is created for the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler HandleCreated;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A handle is created when the <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> is displayed for the first time. For example, if a <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> is created that has <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Visible_\" data-linktype=\"relative-path\">Visible</a> set to <code>false</code>, the HandleCreated event will not be raised until <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Visible_\" data-linktype=\"relative-path\">Visible</a> is set to <code>true</code>.  </p>\n<p> For more information about handling events, see<a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the HandleCreated event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of a type that inherits from <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a>, such as a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a>or <a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a>. Then name the instance <code>Control1</code> and ensure that the event handler is associated with the HandleCreated event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#37\">private void Control1_HandleCreated(Object sender, EventArgs e) {\n\n   MessageBox.Show(&quot;You are in the Control.HandleCreated event.&quot;);\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#37\">Private Sub Control1_HandleCreated(sender as Object, e as EventArgs) _ \n     Handles Control1.HandleCreated\n\n   MessageBox.Show(&quot;You are in the Control.HandleCreated event.&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_HandleDestroyed\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HandleDestroyed</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the control&#39;s handle is in the process of being destroyed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler HandleDestroyed;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>During the HandleDestroyed event, the control is still a valid Windows control and the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Handle_\" data-linktype=\"relative-path\">Handle</a> can be recreated by calling the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RecreateHandle_\" data-linktype=\"relative-path\">RecreateHandle</a> method.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the HandleDestroyed event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of a type that inherits from <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a>, such as a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> or <a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a>. Then name the instance <code>Control1</code> and ensure that the event handler is associated with the HandleDestroyed event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#38\">private void Control1_HandleDestroyed(Object sender, EventArgs e) {\n\n   MessageBox.Show(&quot;You are in the Control.HandleDestroyed event.&quot;);\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#38\">Private Sub Control1_HandleDestroyed(sender as Object, e as EventArgs) _ \n     Handles Control1.HandleDestroyed\n\n   MessageBox.Show(&quot;You are in the Control.HandleDestroyed event.&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_HelpRequested\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HelpRequested</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the user requests help for a control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.HelpEventHandler HelpRequested;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The HelpRequested event is commonly raised when the user presses the F1 key or an associated context-sensitive help button is clicked.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates handling the HelpRequested event to display custom Help content on a form containing four address fields. The HelpRequested event is raised either by pressing the F1 key with the focus in an address field, or by the using the context-sensitive Help button and clicking the Help cursor on an address field. The <a class=\"xref\" href=\"system.windows.forms.helpeventargs#System_Windows_Forms_HelpEventArgs_Handled_\" data-linktype=\"relative-path\">Handled</a> property is set to true to indicate that the <code>HelpRequested</code> event is handled. The example also demonstrates storing the Help text in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Tag_\" data-linktype=\"relative-path\">Tag</a> property.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.HelpEventHandler#1\">#using &lt;System.dll&gt;\n#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n\nusing namespace System;\nusing namespace System::Drawing;\nusing namespace System::Windows::Forms;\npublic ref class Form1: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::TextBox^ addressTextBox;\n   System::Windows::Forms::Label ^ label2;\n   System::Windows::Forms::TextBox^ cityTextBox;\n   System::Windows::Forms::Label ^ label3;\n   System::Windows::Forms::TextBox^ stateTextBox;\n   System::Windows::Forms::TextBox^ zipTextBox;\n   System::Windows::Forms::Label ^ helpLabel;\n\npublic:\n   Form1()\n   {\n      this-&gt;addressTextBox = gcnew System::Windows::Forms::TextBox;\n      this-&gt;helpLabel = gcnew System::Windows::Forms::Label;\n      this-&gt;label2 = gcnew System::Windows::Forms::Label;\n      this-&gt;cityTextBox = gcnew System::Windows::Forms::TextBox;\n      this-&gt;label3 = gcnew System::Windows::Forms::Label;\n      this-&gt;stateTextBox = gcnew System::Windows::Forms::TextBox;\n      this-&gt;zipTextBox = gcnew System::Windows::Forms::TextBox;\n      \n      // Help Label\n      this-&gt;helpLabel-&gt;BorderStyle = System::Windows::Forms::BorderStyle::Fixed3D;\n      this-&gt;helpLabel-&gt;Location = System::Drawing::Point( 8, 80 );\n      this-&gt;helpLabel-&gt;Size = System::Drawing::Size( 272, 72 );\n      this-&gt;helpLabel-&gt;Text = &quot;Click on any control to give it focus, and then press F1 to display help for that control.  Alternately, you can click the help button at the top of the dialog and then click on a control.&quot;;\n      \n      // Address Label\n      this-&gt;label2-&gt;Location = System::Drawing::Point( 16, 8 );\n      this-&gt;label2-&gt;Size = System::Drawing::Size( 100, 16 );\n      this-&gt;label2-&gt;Text = &quot;Address:&quot;;\n      \n      // Comma Label\n      this-&gt;label3-&gt;Location = System::Drawing::Point( 136, 56 );\n      this-&gt;label3-&gt;Size = System::Drawing::Size( 16, 16 );\n      this-&gt;label3-&gt;Text = &quot;, &quot;;\n      \n      // Address TextBox\n      this-&gt;addressTextBox-&gt;Location = System::Drawing::Point( 16, 24 );\n      this-&gt;addressTextBox-&gt;Size = System::Drawing::Size( 264, 20 );\n      this-&gt;addressTextBox-&gt;TabIndex = 0;\n      this-&gt;addressTextBox-&gt;Tag = &quot;Enter the street address in this text box.&quot;;\n      this-&gt;addressTextBox-&gt;Text = &quot;&quot;;\n      this-&gt;addressTextBox-&gt;HelpRequested += gcnew System::Windows::Forms::HelpEventHandler( this, &amp;Form1::textBox_HelpRequested );\n      \n      // City TextBox\n      this-&gt;cityTextBox-&gt;Location = System::Drawing::Point( 16, 48 );\n      this-&gt;cityTextBox-&gt;Size = System::Drawing::Size( 120, 20 );\n      this-&gt;cityTextBox-&gt;TabIndex = 3;\n      this-&gt;cityTextBox-&gt;Tag = &quot;Enter the city here.&quot;;\n      this-&gt;cityTextBox-&gt;Text = &quot;&quot;;\n      this-&gt;cityTextBox-&gt;HelpRequested += gcnew System::Windows::Forms::HelpEventHandler( this, &amp;Form1::textBox_HelpRequested );\n      \n      // State TextBox\n      this-&gt;stateTextBox-&gt;Location = System::Drawing::Point( 152, 48 );\n      this-&gt;stateTextBox-&gt;MaxLength = 2;\n      this-&gt;stateTextBox-&gt;Size = System::Drawing::Size( 32, 20 );\n      this-&gt;stateTextBox-&gt;TabIndex = 5;\n      this-&gt;stateTextBox-&gt;Tag = &quot;Enter the state in this text box.&quot;;\n      this-&gt;stateTextBox-&gt;Text = &quot;&quot;;\n      this-&gt;stateTextBox-&gt;HelpRequested += gcnew System::Windows::Forms::HelpEventHandler( this, &amp;Form1::textBox_HelpRequested );\n      \n      // Zip TextBox\n      this-&gt;zipTextBox-&gt;Location = System::Drawing::Point( 192, 48 );\n      this-&gt;zipTextBox-&gt;Name = &quot;zipTextBox&quot;;\n      this-&gt;zipTextBox-&gt;Size = System::Drawing::Size( 88, 20 );\n      this-&gt;zipTextBox-&gt;TabIndex = 6;\n      this-&gt;zipTextBox-&gt;Tag = &quot;Enter the zip code here.&quot;;\n      this-&gt;zipTextBox-&gt;Text = &quot;&quot;;\n      this-&gt;zipTextBox-&gt;HelpRequested += gcnew System::Windows::Forms::HelpEventHandler( this, &amp;Form1::textBox_HelpRequested );\n      \n      // Set up how the form should be displayed and add the controls to the form.\n      this-&gt;ClientSize = System::Drawing::Size( 292, 160 );\n      array&lt;System::Windows::Forms::Control^&gt;^temp0 = {this-&gt;zipTextBox,this-&gt;stateTextBox,this-&gt;label3,this-&gt;cityTextBox,this-&gt;label2,this-&gt;helpLabel,this-&gt;addressTextBox};\n      this-&gt;Controls-&gt;AddRange( temp0 );\n      this-&gt;FormBorderStyle = System::Windows::Forms::FormBorderStyle::FixedDialog;\n      this-&gt;HelpButton = true;\n      this-&gt;MaximizeBox = false;\n      this-&gt;MinimizeBox = false;\n      this-&gt;Text = &quot;Help Event Demonstration&quot;;\n   }\n\n\nprivate:\n   void textBox_HelpRequested( Object^ sender, System::Windows::Forms::HelpEventArgs^ hlpevent )\n   {\n      \n      // This event is raised when the F1 key is pressed or the\n      // Help cursor is clicked on any of the address fields.\n      // The Help text for the field is in the control&#39;s\n      // Tag property. It is retrieved and displayed in the label.\n      Control^ requestingControl = dynamic_cast&lt;Control^&gt;(sender);\n      helpLabel-&gt;Text = dynamic_cast&lt;String^&gt;(requestingControl-&gt;Tag);\n      hlpevent-&gt;Handled = true;\n   }\n\n};\n\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew Form1 );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.HelpEventHandler#1\">Imports System\nImports System.Drawing\nImports System.Windows.Forms\n\nPublic Class Form1\n    Inherits System.Windows.Forms.Form\n    Private WithEvents addressTextBox As System.Windows.Forms.TextBox\n    Private WithEvents label2 As System.Windows.Forms.Label\n    Private WithEvents cityTextBox As System.Windows.Forms.TextBox\n    Private WithEvents label3 As System.Windows.Forms.Label\n    Private WithEvents stateTextBox As System.Windows.Forms.TextBox\n    Private WithEvents zipTextBox As System.Windows.Forms.TextBox\n    Private WithEvents helpLabel As System.Windows.Forms.Label\n\n    &lt;STAThread()&gt; _\n    Shared Sub Main()\n        Application.Run(New Form1)\n    End Sub &#39;Main\n\n    Public Sub New()\n        Me.addressTextBox = New System.Windows.Forms.TextBox\n        Me.helpLabel = New System.Windows.Forms.Label\n        Me.label2 = New System.Windows.Forms.Label\n        Me.cityTextBox = New System.Windows.Forms.TextBox\n        Me.label3 = New System.Windows.Forms.Label\n        Me.stateTextBox = New System.Windows.Forms.TextBox\n        Me.zipTextBox = New System.Windows.Forms.TextBox\n\n        &#39; Help Label\n        Me.helpLabel.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D\n        Me.helpLabel.Location = New System.Drawing.Point(8, 80)\n        Me.helpLabel.Size = New System.Drawing.Size(272, 72)\n        Me.helpLabel.Text = &quot;Click on any control to give it focus, and then &quot; &amp; _\n            &quot;press F1 to display help for that&quot; + &quot; control.  Alternately, you can &quot; &amp; _\n            &quot;click the help button at the top of the dialog and then click on a control.&quot;\n\n        &#39; Address Label\n        Me.label2.Location = New System.Drawing.Point(16, 8)\n        Me.label2.Size = New System.Drawing.Size(100, 16)\n        Me.label2.Text = &quot;Address:&quot;\n\n        &#39; Comma Label\n        Me.label3.Location = New System.Drawing.Point(136, 56)\n        Me.label3.Size = New System.Drawing.Size(16, 16)\n        Me.label3.Text = &quot;,&quot;\n\n        &#39; Address TextBox\n        Me.addressTextBox.Location = New System.Drawing.Point(16, 24)\n        Me.addressTextBox.Size = New System.Drawing.Size(264, 20)\n        Me.addressTextBox.TabIndex = 0\n        Me.addressTextBox.Tag = &quot;Enter the stree address in this text box.&quot;\n        Me.addressTextBox.Text = &quot;&quot;\n\n        &#39; City TextBox\n        Me.cityTextBox.Location = New System.Drawing.Point(16, 48)\n        Me.cityTextBox.Size = New System.Drawing.Size(120, 20)\n        Me.cityTextBox.TabIndex = 3\n        Me.cityTextBox.Tag = &quot;Enter the city here.&quot;\n        Me.cityTextBox.Text = &quot;&quot;\n\n        &#39; State TextBox\n        Me.stateTextBox.Location = New System.Drawing.Point(152, 48)\n        Me.stateTextBox.MaxLength = 2\n        Me.stateTextBox.Size = New System.Drawing.Size(32, 20)\n        Me.stateTextBox.TabIndex = 5\n        Me.stateTextBox.Tag = &quot;Enter the state in this text box.&quot;\n        Me.stateTextBox.Text = &quot;&quot;\n\n        &#39; Zip TextBox\n        Me.zipTextBox.Location = New System.Drawing.Point(192, 48)\n        Me.zipTextBox.Size = New System.Drawing.Size(88, 20)\n        Me.zipTextBox.TabIndex = 6\n        Me.zipTextBox.Tag = &quot;Enter the zip code here.&quot;\n        Me.zipTextBox.Text = &quot;&quot;\n\n        &#39; Set up how the form should be displayed and add the controls to the form.\n        Me.ClientSize = New System.Drawing.Size(292, 160)\n        Me.Controls.AddRange(New System.Windows.Forms.Control() {Me.zipTextBox, _\n                                Me.stateTextBox, Me.label3, Me.cityTextBox, _\n                                Me.label2, Me.helpLabel, Me.addressTextBox})\n        Me.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog\n        Me.HelpButton = True\n        Me.MaximizeBox = False\n        Me.MinimizeBox = False\n        Me.Text = &quot;Help Event Demonstration&quot;\n    End Sub &#39;New\n\n    Private Sub textBox_HelpRequested(ByVal sender As Object, ByVal hlpevent As System.Windows.Forms.HelpEventArgs) Handles addressTextBox.HelpRequested, cityTextBox.HelpRequested, stateTextBox.HelpRequested, zipTextBox.HelpRequested\n        &#39; This event is raised when the F1 key is pressed or the\n        &#39; Help cursor is clicked on any of the address fields.\n        &#39; The Help text for the field is in the control&#39;s\n        &#39; Tag property. It is retrieved and displayed in the label.\n\n        Dim requestingControl As Control = CType(sender, Control)\n        helpLabel.Text = CStr(requestingControl.Tag)\n        hlpevent.Handled = True\n\n    End Sub &#39;textBox_HelpRequested\nEnd Class &#39;Form1\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.HelpEventHandler#1\">using System;\nusing System.Drawing;\nusing System.Windows.Forms;\n\npublic class Form1 : System.Windows.Forms.Form\n{\n    private System.Windows.Forms.TextBox addressTextBox;\n    private System.Windows.Forms.Label label2;\n    private System.Windows.Forms.TextBox cityTextBox;\n    private System.Windows.Forms.Label label3;\n    private System.Windows.Forms.TextBox stateTextBox;\n    private System.Windows.Forms.TextBox zipTextBox;\n    private System.Windows.Forms.Label helpLabel;\n\n    [STAThread]\n    static void Main() \n    {\n        Application.Run(new Form1());\n    }\n\n    public Form1()\n    {\n        this.addressTextBox = new System.Windows.Forms.TextBox();\n        this.helpLabel = new System.Windows.Forms.Label();\n        this.label2 = new System.Windows.Forms.Label();\n        this.cityTextBox = new System.Windows.Forms.TextBox();\n        this.label3 = new System.Windows.Forms.Label();\n        this.stateTextBox = new System.Windows.Forms.TextBox();\n        this.zipTextBox = new System.Windows.Forms.TextBox();\n\n        // Help Label\n        this.helpLabel.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;\n        this.helpLabel.Location = new System.Drawing.Point(8, 80);\n        this.helpLabel.Size = new System.Drawing.Size(272, 72);\n        this.helpLabel.Text = &quot;Click on any control to give it focus, and then &quot; +\n            &quot;press F1 to display help for that control.  Alternately, you can &quot; +\n            &quot;click the help button at the top of the dialog and then click on a control.&quot;;\n\n        // Address Label\n        this.label2.Location = new System.Drawing.Point(16, 8);\n        this.label2.Size = new System.Drawing.Size(100, 16);\n        this.label2.Text = &quot;Address:&quot;;\n\n        // Comma Label\n        this.label3.Location = new System.Drawing.Point(136, 56);\n        this.label3.Size = new System.Drawing.Size(16, 16);\n        this.label3.Text = &quot;,&quot;;\n\n        // Address TextBox\n        this.addressTextBox.Location = new System.Drawing.Point(16, 24);\n        this.addressTextBox.Size = new System.Drawing.Size(264, 20);\n        this.addressTextBox.TabIndex = 0;\n        this.addressTextBox.Tag = &quot;Enter the street address in this text box.&quot;;\n        this.addressTextBox.Text = &quot;&quot;;\n        this.addressTextBox.HelpRequested += new System.Windows.Forms.HelpEventHandler(this.textBox_HelpRequested);\n\n        // City TextBox\n        this.cityTextBox.Location = new System.Drawing.Point(16, 48);\n        this.cityTextBox.Size = new System.Drawing.Size(120, 20);\n        this.cityTextBox.TabIndex = 3;\n        this.cityTextBox.Tag = &quot;Enter the city here.&quot;;\n        this.cityTextBox.Text = &quot;&quot;;\n        this.cityTextBox.HelpRequested += new System.Windows.Forms.HelpEventHandler(this.textBox_HelpRequested);\n\n        // State TextBox\n        this.stateTextBox.Location = new System.Drawing.Point(152, 48);\n        this.stateTextBox.MaxLength = 2;\n        this.stateTextBox.Size = new System.Drawing.Size(32, 20);\n        this.stateTextBox.TabIndex = 5;\n        this.stateTextBox.Tag = &quot;Enter the state in this text box.&quot;;\n        this.stateTextBox.Text = &quot;&quot;;\n        this.stateTextBox.HelpRequested += new System.Windows.Forms.HelpEventHandler(this.textBox_HelpRequested);\n\n        // Zip TextBox\n        this.zipTextBox.Location = new System.Drawing.Point(192, 48);\n        this.zipTextBox.Name = &quot;zipTextBox&quot;;\n        this.zipTextBox.Size = new System.Drawing.Size(88, 20);\n        this.zipTextBox.TabIndex = 6;\n        this.zipTextBox.Tag = &quot;Enter the zip code here.&quot;;\n        this.zipTextBox.Text = &quot;&quot;;\n        this.zipTextBox.HelpRequested += new System.Windows.Forms.HelpEventHandler(this.textBox_HelpRequested);\n\n        // Set up how the form should be displayed and add the controls to the form.\n        this.ClientSize = new System.Drawing.Size(292, 160);\n        this.Controls.AddRange(new System.Windows.Forms.Control[] { this.zipTextBox, \n                                this.stateTextBox, this.label3, this.cityTextBox,  \n                                this.label2, this.helpLabel, this.addressTextBox});\n\n        this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;\n        this.HelpButton = true;\n        this.MaximizeBox = false;\n        this.MinimizeBox = false;\n        this.Text = &quot;Help Event Demonstration&quot;;    \n    }\n\n    private void textBox_HelpRequested(object sender, System.Windows.Forms.HelpEventArgs hlpevent)\n    {\n        // This event is raised when the F1 key is pressed or the\n        // Help cursor is clicked on any of the address fields.\n        // The Help text for the field is in the control&#39;s\n        // Tag property. It is retrieved and displayed in the label.\n\n        Control requestingControl = (Control)sender;\n        helpLabel.Text = (string)requestingControl.Tag;\n        hlpevent.Handled = true;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ImeModeChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ImeModeChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the <span class=\"xref\">stem.Windows.Forms.Control.ImeMode*</span> property has changed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler ImeModeChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event is raised if the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ImeMode_\" data-linktype=\"relative-path\">ImeMode</a> property is changed by either a programmatic modification or through interaction.  </p>\n<p> Controls that do not support Input Method Managers will never raise this event.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example is an event handler that is executed when the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property value changes. The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class has several methods with the name pattern <em>PropertyName</em><code>Changed</code> that are raised when the corresponding <em>PropertyName</em> value changes (<em>PropertyName</em> represents the name of the corresponding property).  </p>\n<p> The following code example changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> of a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> displaying currency data. The example converts the text to a decimal number and changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Red_\" data-linktype=\"relative-path\">Red</a> if the number is negative and to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Black_\" data-linktype=\"relative-path\">Black</a> if the number is positive. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> that contains a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"Windows.Forms.Control_PropertyChangedEvents#1\">Private Sub currencyTextBox_TextChanged(sender As Object, _ \n  e As EventArgs) Handles currencyTextBox.TextChanged\n   Try\n      &#39; Convert the text to a Double and determine if it is a negative number.\n      If Double.Parse(currencyTextBox.Text) &lt; 0 Then\n         &#39; If the number is negative, display it in Red.\n         currencyTextBox.ForeColor = Color.Red\n      Else\n         &#39; If the number is not negative, display it in Black.\n         currencyTextBox.ForeColor = Color.Black\n      End If\n   Catch\n      &#39; If there is an error, display the text using the system colors.\n      currencyTextBox.ForeColor = SystemColors.ControlText\n   End Try\nEnd Sub \n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.Control_PropertyChangedEvents#1\">private void currencyTextBox_TextChanged(object sender, EventArgs e)\n{\n   try\n   {\n      // Convert the text to a Double and determine if it is a negative number.\n      if(double.Parse(currencyTextBox.Text) &lt; 0)\n      {\n         // If the number is negative, display it in Red.\n         currencyTextBox.ForeColor = Color.Red;\n      }\n      else\n      {\n         // If the number is not negative, display it in Black.\n         currencyTextBox.ForeColor = Color.Black;\n      }\n   }\n   catch\n   {\n      // If there is an error, display the text using the system colors.\n      currencyTextBox.ForeColor = SystemColors.ControlText;\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control_PropertyChangedEvents#1\">   private:\n      void currencyTextBox_TextChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n      {\n         try\n         {\n            // Convert the text to a Double and determine if it is a negative number.\n            if ( Double::Parse( currencyTextBox-&gt;Text ) &lt; 0 )\n            {\n               // If the number is negative, display it in Red.\n               currencyTextBox-&gt;ForeColor = Color::Red;\n            }\n            else\n            {\n               // If the number is not negative, display it in Black.\n               currencyTextBox-&gt;ForeColor = Color::Black;\n            }\n         }\n         catch ( Exception^ ) \n         {\n            // If there is an error, display the text using the system colors.\n            currencyTextBox-&gt;ForeColor = SystemColors::ControlText;\n         }\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Invalidated\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Invalidated</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a control&#39;s display requires redrawing.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.InvalidateEventHandler Invalidated;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the Invalidated event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of a type that inherits from <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a>, such as a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> or <a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a>. Then name the instance <code>Control1</code> and ensure that the event handler is associated with the Invalidated event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#40\">private void Control1_Invalidated(Object sender, InvalidateEventArgs e) {\n\nSystem.Text.StringBuilder messageBoxCS = new System.Text.StringBuilder();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;InvalidRect&quot;, e.InvalidRect );\nmessageBoxCS.AppendLine();\nMessageBox.Show(messageBoxCS.ToString(), &quot;Invalidated Event&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#40\">Private Sub Control1_Invalidated(sender as Object, e as InvalidateEventArgs) _ \n     Handles Control1.Invalidated\n\n    Dim messageBoxVB as New System.Text.StringBuilder()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;InvalidRect&quot;, e.InvalidRect)\n    messageBoxVB.AppendLine()\n    MessageBox.Show(messageBoxVB.ToString(),&quot;Invalidated Event&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_KeyDown\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeyDown</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a key is pressed while the control has focus.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.KeyEventHandler KeyDown;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Key events occur in the following order:  </p>\n<ol>\n<li><p>KeyDown  </p>\n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyPress\" data-linktype=\"relative-path\">KeyPress</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyUp\" data-linktype=\"relative-path\">KeyUp</a>  \n\n<p>To handle keyboard events only at the form level and not enable other controls to receive keyboard events, set the <a class=\"xref\" href=\"system.windows.forms.keypresseventargs#System_Windows_Forms_KeyPressEventArgs_Handled_\" data-linktype=\"relative-path\">Handled</a> property in your form&#39;s <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyPress\" data-linktype=\"relative-path\">KeyPress</a> event-handling method to <code>true</code>. Certain keys, such as the TAB, RETURN, ESC, and arrow keys are handled by controls automatically. To have these keys raise the KeyDown event, you must override the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_IsInputKey_\" data-linktype=\"relative-path\">IsInputKey</a> method in each control on your form. The code for the override of the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_IsInputKey_\" data-linktype=\"relative-path\">IsInputKey</a> would need to determine if one of the special keys is pressed and return a value of <code>true</code>. Instead of overriding the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_IsInputKey_\" data-linktype=\"relative-path\">IsInputKey</a> method, you can handle the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_PreviewKeyDown\" data-linktype=\"relative-path\">PreviewKeyDown</a> event and set the <a class=\"xref\" href=\"system.windows.forms.previewkeydowneventargs#System_Windows_Forms_PreviewKeyDownEventArgs_IsInputKey_\" data-linktype=\"relative-path\">IsInputKey</a>property to <code>true</code>. For a code example, see the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_PreviewKeyDown\" data-linktype=\"relative-path\">PreviewKeyDown</a> event.  </p>\n<p>For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n</li>\n</ol>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the KeyDown event to determine the type of character entered into the control.  </p>\n<pre><code class=\"lang-vb\" name=\"Control.KeyDown#1\">    &#39; Boolean flag used to determine when a character other than a number is entered.\n    Private nonNumberEntered As Boolean = False\n   \n   \n    &#39; Handle the KeyDown event to determine the type of character entered into the control.\n    Private Sub textBox1_KeyDown(sender As Object, e As System.Windows.Forms.KeyEventArgs) _\n         Handles textBox1.KeyDown\n        &#39; Initialize the flag to false.\n        nonNumberEntered = False\n      \n        &#39; Determine whether the keystroke is a number from the top of the keyboard.\n        If e.KeyCode &lt; Keys.D0 OrElse e.KeyCode &gt; Keys.D9 Then\n            &#39; Determine whether the keystroke is a number from the keypad.\n            If e.KeyCode &lt; Keys.NumPad0 OrElse e.KeyCode &gt; Keys.NumPad9 Then\n                &#39; Determine whether the keystroke is a backspace.\n                If e.KeyCode &lt;&gt; Keys.Back Then\n                    &#39; A non-numerical keystroke was pressed. \n                    &#39; Set the flag to true and evaluate in KeyPress event.\n                    nonNumberEntered = True\n                End If\n            End If\n        End If\n        &#39;If shift key was pressed, it&#39;s not a number.\n        If Control.ModifierKeys = Keys.Shift Then\n            nonNumberEntered = true\n        End If\n    End Sub &#39;textBox1_KeyDown\n   \n   \n    &#39; This event occurs after the KeyDown event and can be used \n    &#39; to prevent characters from entering the control.\n    Private Sub textBox1_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) _\n        Handles textBox1.KeyPress\n        &#39; Check for the flag being set in the KeyDown event.\n        If nonNumberEntered = True Then\n            &#39; Stop the character from being entered into the control since it is non-numerical.\n            e.Handled = True\n        End If\n    End Sub &#39;textBox1_KeyPress\n</code></pre><pre><code class=\"lang-cpp\" name=\"Control.KeyDown#1\">   // Boolean flag used to determine when a character other than a number is entered.\nprivate:\n   bool nonNumberEntered;\n\n   // Handle the KeyDown event to determine the type of character entered into the control.\n   void textBox1_KeyDown( Object^ /*sender*/, System::Windows::Forms::KeyEventArgs^ e )\n   {\n      // Initialize the flag to false.\n      nonNumberEntered = false;\n\n      // Determine whether the keystroke is a number from the top of the keyboard.\n      if ( e-&gt;KeyCode &lt; Keys::D0 || e-&gt;KeyCode &gt; Keys::D9 )\n      {\n         // Determine whether the keystroke is a number from the keypad.\n         if ( e-&gt;KeyCode &lt; Keys::NumPad0 || e-&gt;KeyCode &gt; Keys::NumPad9 )\n         {\n            // Determine whether the keystroke is a backspace.\n            if ( e-&gt;KeyCode != Keys::Back )\n            {\n               // A non-numerical keystroke was pressed.\n               // Set the flag to true and evaluate in KeyPress event.\n               nonNumberEntered = true;\n            }\n         }\n      }\n      //If shift key was pressed, it&#39;s not a number.\n      if (Control::ModifierKeys == Keys::Shift) {\n         nonNumberEntered = true;\n      }\n   }\n\n   // This event occurs after the KeyDown event and can be used to prevent\n   // characters from entering the control.\n   void textBox1_KeyPress( Object^ /*sender*/, System::Windows::Forms::KeyPressEventArgs^ e )\n   {\n      // Check for the flag being set in the KeyDown event.\n      if ( nonNumberEntered == true )\n      {         // Stop the character from being entered into the control since it is non-numerical.\n         e-&gt;Handled = true;\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"Control.KeyDown#1\">        // Boolean flag used to determine when a character other than a number is entered.\n        private bool nonNumberEntered = false;\n\n        // Handle the KeyDown event to determine the type of character entered into the control.\n        private void textBox1_KeyDown(object sender, System.Windows.Forms.KeyEventArgs e)\n        {\n            // Initialize the flag to false.\n            nonNumberEntered = false;\n\n            // Determine whether the keystroke is a number from the top of the keyboard.\n            if (e.KeyCode &lt; Keys.D0 || e.KeyCode &gt; Keys.D9)\n            {\n                // Determine whether the keystroke is a number from the keypad.\n                if (e.KeyCode &lt; Keys.NumPad0 || e.KeyCode &gt; Keys.NumPad9)\n                {\n                    // Determine whether the keystroke is a backspace.\n                    if(e.KeyCode != Keys.Back)\n                    {\n                        // A non-numerical keystroke was pressed.\n                        // Set the flag to true and evaluate in KeyPress event.\n                        nonNumberEntered = true;\n                    }\n                }\n            }\n            //If shift key was pressed, it&#39;s not a number.\n            if (Control.ModifierKeys == Keys.Shift) {\n                nonNumberEntered = true;\n            }\n        }\n\n        // This event occurs after the KeyDown event and can be used to prevent\n        // characters from entering the control.\n        private void textBox1_KeyPress(object sender, System.Windows.Forms.KeyPressEventArgs e)\n        {\n            // Check for the flag being set in the KeyDown event.\n            if (nonNumberEntered == true)\n            {\n                // Stop the character from being entered into the control since it is non-numerical.\n                e.Handled = true;\n            }\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_KeyPress\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeyPress</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a character. space or backspace key is pressed while the control has focus.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.KeyPressEventHandler KeyPress;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Key events occur in the following order:  </p>\n<ol>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyDown\" data-linktype=\"relative-path\">KeyDown</a>  \n</li>\n<li><p>KeyPress  </p>\n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyUp\" data-linktype=\"relative-path\">KeyUp</a>  \n\n<p>The KeyPress event is not raised by non-character keys other than space and backspace; however, the non-character keys do raise the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyDown\" data-linktype=\"relative-path\">KeyDown</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyUp\" data-linktype=\"relative-path\">KeyUp</a> events.  </p>\n<p>Use the <a class=\"xref\" href=\"system.windows.forms.keypresseventargs#System_Windows_Forms_KeyPressEventArgs_KeyChar_\" data-linktype=\"relative-path\">KeyChar</a> property to sample keystrokes at run time and to consume or modify a subset of common keystrokes.  </p>\n<p>To handle keyboard events only at the form level and not enable other controls to receive keyboard events, set the <a class=\"xref\" href=\"system.windows.forms.keypresseventargs#System_Windows_Forms_KeyPressEventArgs_Handled_\" data-linktype=\"relative-path\">Handled</a> property in your form&#39;s KeyPress event-handling method to <code>true</code>.  </p>\n<p>For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n</li>\n</ol>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the KeyPress event to prevent characters from entering the control.  </p>\n<pre><code class=\"lang-vb\" name=\"Control.KeyDown#1\">    &#39; Boolean flag used to determine when a character other than a number is entered.\n    Private nonNumberEntered As Boolean = False\n   \n   \n    &#39; Handle the KeyDown event to determine the type of character entered into the control.\n    Private Sub textBox1_KeyDown(sender As Object, e As System.Windows.Forms.KeyEventArgs) _\n         Handles textBox1.KeyDown\n        &#39; Initialize the flag to false.\n        nonNumberEntered = False\n      \n        &#39; Determine whether the keystroke is a number from the top of the keyboard.\n        If e.KeyCode &lt; Keys.D0 OrElse e.KeyCode &gt; Keys.D9 Then\n            &#39; Determine whether the keystroke is a number from the keypad.\n            If e.KeyCode &lt; Keys.NumPad0 OrElse e.KeyCode &gt; Keys.NumPad9 Then\n                &#39; Determine whether the keystroke is a backspace.\n                If e.KeyCode &lt;&gt; Keys.Back Then\n                    &#39; A non-numerical keystroke was pressed. \n                    &#39; Set the flag to true and evaluate in KeyPress event.\n                    nonNumberEntered = True\n                End If\n            End If\n        End If\n        &#39;If shift key was pressed, it&#39;s not a number.\n        If Control.ModifierKeys = Keys.Shift Then\n            nonNumberEntered = true\n        End If\n    End Sub &#39;textBox1_KeyDown\n   \n   \n    &#39; This event occurs after the KeyDown event and can be used \n    &#39; to prevent characters from entering the control.\n    Private Sub textBox1_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) _\n        Handles textBox1.KeyPress\n        &#39; Check for the flag being set in the KeyDown event.\n        If nonNumberEntered = True Then\n            &#39; Stop the character from being entered into the control since it is non-numerical.\n            e.Handled = True\n        End If\n    End Sub &#39;textBox1_KeyPress\n</code></pre><pre><code class=\"lang-cpp\" name=\"Control.KeyDown#1\">   // Boolean flag used to determine when a character other than a number is entered.\nprivate:\n   bool nonNumberEntered;\n\n   // Handle the KeyDown event to determine the type of character entered into the control.\n   void textBox1_KeyDown( Object^ /*sender*/, System::Windows::Forms::KeyEventArgs^ e )\n   {\n      // Initialize the flag to false.\n      nonNumberEntered = false;\n\n      // Determine whether the keystroke is a number from the top of the keyboard.\n      if ( e-&gt;KeyCode &lt; Keys::D0 || e-&gt;KeyCode &gt; Keys::D9 )\n      {\n         // Determine whether the keystroke is a number from the keypad.\n         if ( e-&gt;KeyCode &lt; Keys::NumPad0 || e-&gt;KeyCode &gt; Keys::NumPad9 )\n         {\n            // Determine whether the keystroke is a backspace.\n            if ( e-&gt;KeyCode != Keys::Back )\n            {\n               // A non-numerical keystroke was pressed.\n               // Set the flag to true and evaluate in KeyPress event.\n               nonNumberEntered = true;\n            }\n         }\n      }\n      //If shift key was pressed, it&#39;s not a number.\n      if (Control::ModifierKeys == Keys::Shift) {\n         nonNumberEntered = true;\n      }\n   }\n\n   // This event occurs after the KeyDown event and can be used to prevent\n   // characters from entering the control.\n   void textBox1_KeyPress( Object^ /*sender*/, System::Windows::Forms::KeyPressEventArgs^ e )\n   {\n      // Check for the flag being set in the KeyDown event.\n      if ( nonNumberEntered == true )\n      {         // Stop the character from being entered into the control since it is non-numerical.\n         e-&gt;Handled = true;\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"Control.KeyDown#1\">        // Boolean flag used to determine when a character other than a number is entered.\n        private bool nonNumberEntered = false;\n\n        // Handle the KeyDown event to determine the type of character entered into the control.\n        private void textBox1_KeyDown(object sender, System.Windows.Forms.KeyEventArgs e)\n        {\n            // Initialize the flag to false.\n            nonNumberEntered = false;\n\n            // Determine whether the keystroke is a number from the top of the keyboard.\n            if (e.KeyCode &lt; Keys.D0 || e.KeyCode &gt; Keys.D9)\n            {\n                // Determine whether the keystroke is a number from the keypad.\n                if (e.KeyCode &lt; Keys.NumPad0 || e.KeyCode &gt; Keys.NumPad9)\n                {\n                    // Determine whether the keystroke is a backspace.\n                    if(e.KeyCode != Keys.Back)\n                    {\n                        // A non-numerical keystroke was pressed.\n                        // Set the flag to true and evaluate in KeyPress event.\n                        nonNumberEntered = true;\n                    }\n                }\n            }\n            //If shift key was pressed, it&#39;s not a number.\n            if (Control.ModifierKeys == Keys.Shift) {\n                nonNumberEntered = true;\n            }\n        }\n\n        // This event occurs after the KeyDown event and can be used to prevent\n        // characters from entering the control.\n        private void textBox1_KeyPress(object sender, System.Windows.Forms.KeyPressEventArgs e)\n        {\n            // Check for the flag being set in the KeyDown event.\n            if (nonNumberEntered == true)\n            {\n                // Stop the character from being entered into the control since it is non-numerical.\n                e.Handled = true;\n            }\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_KeyUp\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeyUp</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a key is released while the control has focus.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.KeyEventHandler KeyUp;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Key events occur in the following order:  </p>\n<ol>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyDown\" data-linktype=\"relative-path\">KeyDown</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyPress\" data-linktype=\"relative-path\">KeyPress</a>  \n</li>\n<li><p>KeyUp  </p>\n<p>To handle keyboard events only at the form level and not enable other controls to receive keyboard events, set the <a class=\"xref\" href=\"system.windows.forms.keypresseventargs#System_Windows_Forms_KeyPressEventArgs_Handled_\" data-linktype=\"relative-path\">Handled</a> property in your form&#39;s <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyPress\" data-linktype=\"relative-path\">KeyPress</a> event-handling method to <code>true</code>. Certain keys, such as the TAB, RETURN, ESC, and arrow keys are handled by controls automatically. To have these keys raise the KeyUp event, you must override the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_IsInputKey_\" data-linktype=\"relative-path\">IsInputKey</a> method in each control on your form. The code for the override of <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_IsInputKey_\" data-linktype=\"relative-path\">IsInputKey</a> would need to determine if one of the special keys is pressed and return a value of <code>true</code>.  </p>\n<p>For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n</li>\n</ol>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the KeyUp event with the <a class=\"xref\" href=\"system.windows.forms.help\" data-linktype=\"relative-path\">Help</a> class to display pop-up style help to the user.  </p>\n<pre><code class=\"lang-cpp\" name=\"Control.KeyUp#1\">   // This example demonstrates how to use the KeyUp event with the Help class to display\n   // pop-up style help to the user of the application. When the user presses F1, the Help\n   // class displays a pop-up window, similar to a ToolTip, near the control. This example assumes\n   // that a TextBox control, named textBox1, has been added to the form and its KeyUp\n   // event has been connected to this event handler method.\nprivate:\n   void textBox1_KeyUp( Object^ /*sender*/, System::Windows::Forms::KeyEventArgs^ e )\n   {\n      \n      // Determine whether the key entered is the F1 key. Display help if it is.\n      if ( e-&gt;KeyCode == Keys::F1 )\n      {\n         \n         // Display a pop-up help topic to assist the user.\n         Help::ShowPopup( textBox1, &quot;Enter your first name&quot;, Point(textBox1-&gt;Right,this-&gt;textBox1-&gt;Bottom) );\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Control.KeyUp#1\">    &#39; This example demonstrates how to use the KeyUp event with the Help class to display\n    &#39; pop-up style help to the user of the application. When the user presses F1, the Help\n    &#39; class displays a pop-up window, similar to a ToolTip, near the control. This example assumes\n    &#39; that a TextBox control, named textBox1, has been added to the form and its KeyUp\n    &#39; event has been contected to this event handler method.\n    Private Sub textBox1_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles textBox1.KeyUp\n        &#39; Determine whether the key entered is the F1 key. Display help if it is.\n        If e.KeyCode = Keys.F1 Then\n            &#39; Display a pop-up help topic to assist the user.\n            Help.ShowPopup(textBox1, &quot;Enter your first name&quot;, New Point(textBox1.Right, Me.textBox1.Bottom))\n        End If\n    End Sub &#39;textBox1_KeyUp\n</code></pre><pre><code class=\"lang-cs\" name=\"Control.KeyUp#1\">        // This example demonstrates how to use the KeyUp event with the Help class to display\n        // pop-up style help to the user of the application. When the user presses F1, the Help\n        // class displays a pop-up window, similar to a ToolTip, near the control. This example assumes\n        // that a TextBox control, named textBox1, has been added to the form and its KeyUp\n        // event has been contected to this event handler method.\n        private void textBox1_KeyUp(object sender, System.Windows.Forms.KeyEventArgs e)\n        {\n            // Determine whether the key entered is the F1 key. Display help if it is.\n            if(e.KeyCode == Keys.F1)\n            {\n                // Display a pop-up help topic to assist the user.\n                Help.ShowPopup(textBox1, &quot;Enter your first name&quot;, new Point(textBox1.Right, this.textBox1.Bottom));\n            }\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Layout\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Layout</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a control should reposition its child controls.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.LayoutEventHandler Layout;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Layout event occurs when child controls are added or removed, when the bounds of the control changes, and when other changes occur that can affect the layout of the control. The layout event can be suppressed using the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SuspendLayout_\" data-linktype=\"relative-path\">SuspendLayout</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ResumeLayout_\" data-linktype=\"relative-path\">ResumeLayout</a> methods. Suspending layout enables you to perform multiple actions on a control without having to perform a layout for each change. For example, if you resize and move a control, each operation would raise a Layout event.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example centers a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> on the screen in the Layout event. This will keep the form centered as the user resizes it. This example requires that you have created a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> control.  </p>\n<pre><code class=\"lang-cs\" name=\"Control.Layout#1\">   private void MyForm_Layout(object sender, System.Windows.Forms.LayoutEventArgs e)\n   {\n      // Center the Form on the user&#39;s screen everytime it requires a Layout.\n      this.SetBounds((Screen.GetBounds(this).Width/2) - (this.Width/2),\n          (Screen.GetBounds(this).Height/2) - (this.Height/2),\n\t\t  this.Width, this.Height, BoundsSpecified.Location);\t\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Control.Layout#1\">\n    Private Sub MyForm_Layout(ByVal sender As Object, _\n        ByVal e As System.Windows.Forms.LayoutEventArgs) Handles MyBase.Layout\n\n        &#39; Center the Form on the user&#39;s screen everytime it requires a Layout.\n        Me.SetBounds((System.Windows.Forms.Screen.GetBounds(Me).Width / 2) - (Me.Width / 2), _\n            (System.Windows.Forms.Screen.GetBounds(Me).Height / 2) - (Me.Height / 2), _\n            Me.Width, Me.Height, System.Windows.Forms.BoundsSpecified.Location)\n    End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"Control.Layout#1\">private:\n   void MyForm_Layout( Object^ /*sender*/, System::Windows::Forms::LayoutEventArgs^ /*e*/ )\n   {\n      // Center the Form on the user&#39;s screen everytime it requires a Layout.\n      this-&gt;SetBounds( (Screen::GetBounds( this ).Width / 2) - (this-&gt;Width / 2), (Screen::GetBounds( this ).Height / 2) - (this-&gt;Height / 2), this-&gt;Width, this-&gt;Height, BoundsSpecified::Location );\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Leave\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Leave</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the input focus leaves the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler Leave;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Select_\" data-linktype=\"relative-path\">Select</a> or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SelectNextControl_\" data-linktype=\"relative-path\">SelectNextControl</a> methods, or by setting the <a class=\"xref\" href=\"system.windows.forms.containercontrol#System_Windows_Forms_ContainerControl_ActiveControl_\" data-linktype=\"relative-path\">ActiveControl</a> property to the current form, focus events occur in the following order:  </p>\n<ol>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Enter\" data-linktype=\"relative-path\">Enter</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GotFocus\" data-linktype=\"relative-path\">GotFocus</a>  \n</li>\n<li><p>Leave  </p>\n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validating\" data-linktype=\"relative-path\">Validating</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validated\" data-linktype=\"relative-path\">Validated</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_LostFocus\" data-linktype=\"relative-path\">LostFocus</a>  \n\n<p>When you change the focus by using the mouse or by calling the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Focus_\" data-linktype=\"relative-path\">Focus</a> method, focus events occur in the following order:  </p>\n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Enter\" data-linktype=\"relative-path\">Enter</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GotFocus\" data-linktype=\"relative-path\">GotFocus</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_LostFocus\" data-linktype=\"relative-path\">LostFocus</a>  \n</li>\n<li><p>Leave  </p>\n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validating\" data-linktype=\"relative-path\">Validating</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validated\" data-linktype=\"relative-path\">Validated</a>  \n\n<p>If the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CausesValidation_\" data-linktype=\"relative-path\">CausesValidation</a> property is set to <code>false</code>, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validating\" data-linktype=\"relative-path\">Validating</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validated\" data-linktype=\"relative-path\">Validated</a> events are suppressed.  </p>\n</li>\n</ol>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Enter\" data-linktype=\"relative-path\">Enter</a> and Leave events are suppressed by the <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> class. The equivalent events in the <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> class are the <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_Activated\" data-linktype=\"relative-path\">Activated</a> and <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_Deactivate\" data-linktype=\"relative-path\">Deactivate</a> events. The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Enter\" data-linktype=\"relative-path\">Enter</a> and Leave events are hierarchical and will cascade up and down the parent chain until the appropriate control is reached. For example, assume you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with two <a class=\"xref\" href=\"system.windows.forms.groupbox\" data-linktype=\"relative-path\">GroupBox</a> controls, and each <a class=\"xref\" href=\"system.windows.forms.groupbox\" data-linktype=\"relative-path\">GroupBox</a> control has one <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> control. When the caret is moved from one <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> to the other, the Leave event is raised for the <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> and <a class=\"xref\" href=\"system.windows.forms.groupbox\" data-linktype=\"relative-path\">GroupBox</a>, and the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Enter\" data-linktype=\"relative-path\">Enter</a> event is raised for the other <a class=\"xref\" href=\"system.windows.forms.groupbox\" data-linktype=\"relative-path\">GroupBox</a> and <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n</div>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Do not attempt to set focus from within the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Enter\" data-linktype=\"relative-path\">Enter</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GotFocus\" data-linktype=\"relative-path\">GotFocus</a>, Leave, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_LostFocus\" data-linktype=\"relative-path\">LostFocus</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validating\" data-linktype=\"relative-path\">Validating</a>, or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validated\" data-linktype=\"relative-path\">Validated</a> event handlers. Doing so can cause your application or the operating system to stop responding. For more information, see the <a href=\"http://msdn.microsoft.com/library/windows/desktop/ms646282(v=vs.85).aspx\" data-linktype=\"external\">WM_KILLFOCUS</a> topic.  </p>\n</div>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the Leave event to reset a control to its former state.  </p>\n<pre><code class=\"lang-cs\" name=\"Control.Enter#1\">        private void textBox1_Enter(object sender, System.EventArgs e)\n        {\n            // If the TextBox contains text, change its foreground and background colors.\n            if (textBox1.Text != String.Empty)\n            {\n                textBox1.ForeColor = Color.Red;\n                textBox1.BackColor = Color.Black;\n                // Move the selection pointer to the end of the text of the control.\n                textBox1.Select(textBox1.Text.Length, 0);\n            }\n        }\n\n        private void textBox1_Leave(object sender, System.EventArgs e)\n        {\n            // Reset the colors and selection of the TextBox after focus is lost.\n            textBox1.ForeColor = Color.Black;\n            textBox1.BackColor = Color.White;\n            textBox1.Select(0,0);\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Control.Enter#1\">private:\n   void textBox1_Enter( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // If the TextBox contains text, change its foreground and background colors.\n      if ( textBox1-&gt;Text != String::Empty )\n      {\n         textBox1-&gt;ForeColor = Color::Red;\n         textBox1-&gt;BackColor = Color::Black;\n\n         // Move the selection pointer to the end of the text of the control.\n         textBox1-&gt;Select(textBox1-&gt;Text-&gt;Length,0);\n      }\n   }\n\n   void textBox1_Leave( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // Reset the colors and selection of the TextBox after focus is lost.\n      textBox1-&gt;ForeColor = Color::Black;\n      textBox1-&gt;BackColor = Color::White;\n      textBox1-&gt;Select(0,0);\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Control.Enter#1\">    Private Sub textBox1_Enter(sender As Object, e As System.EventArgs) Handles textBox1.Enter\n        &#39; If the TextBox contains text, change its foreground and background colors.\n        If textBox1.Text &lt;&gt; [String].Empty Then\n            textBox1.ForeColor = Color.Red\n            textBox1.BackColor = Color.Black\n            &#39; Move the selection pointer to the end of the text of the control.\n            textBox1.Select(textBox1.Text.Length, 0)\n        End If\n    End Sub &#39;textBox1_Enter\n   \n   \n    Private Sub textBox1_Leave(sender As Object, e As System.EventArgs) Handles textBox1.Leave\n        &#39; Reset the colors and selection of the TextBox after focus is lost.\n        textBox1.ForeColor = Color.Black\n        textBox1.BackColor = Color.White\n        textBox1.Select(0, 0)\n    End Sub &#39;textBox1_Leave\nEnd Class &#39;Form1 \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_LocationChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LocationChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the <span class=\"xref\">stem.Windows.Forms.Control.Location*</span> property value has changed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler LocationChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event is raised if the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Location_\" data-linktype=\"relative-path\">Location</a> property is changed by either a programmatic modification or through interaction.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example raises the LocationChanged event on a <a class=\"xref\" href=\"system.windows.forms.statusstrip\" data-linktype=\"relative-path\">StatusStrip</a> when the form is resized.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.LocationChanged#1\">using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Text;\nusing System.Windows.Forms;\n\n\npublic class Form1 : Form\n{\n    private StatusStrip statusStrip1;\n\n    public Form1()\n    {\n        InitializeComponent();\n    }\n    [STAThread]\n    static void Main()\n    {\n        Application.EnableVisualStyles();\n        Application.SetCompatibleTextRenderingDefault(false);\n        Application.Run(new Form1());\n    }\n\n    private void InitializeComponent()\n    {\n        this.statusStrip1 = new System.Windows.Forms.StatusStrip();\n        this.SuspendLayout();\n        // \n        // statusStrip1\n        // \n        this.statusStrip1.Location = new System.Drawing.Point(0, 251);\n        this.statusStrip1.Name = &quot;statusStrip1&quot;;\n        this.statusStrip1.Size = new System.Drawing.Size(292, 22);\n        this.statusStrip1.TabIndex = 0;\n        this.statusStrip1.Text = &quot;statusStrip1&quot;;\n        this.statusStrip1.LocationChanged += new System.EventHandler(this.statusStrip1_LocationChanged);\n        // \n        // Form1\n        // \n        this.ClientSize = new System.Drawing.Size(292, 273);\n        this.Controls.Add(this.statusStrip1);\n        this.Name = &quot;Form1&quot;;\n        this.ResumeLayout(false);\n        this.PerformLayout();\n\n    }\n\n    private void statusStrip1_LocationChanged(object sender, EventArgs e)\n    {\n        MessageBox.Show(&quot;The form has been resized.&quot;);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.LocationChanged#1\">Imports System\nImports System.Collections.Generic\nImports System.ComponentModel\nImports System.Data\nImports System.Drawing\nImports System.Text\nImports System.Windows.Forms\n\nPublic Class Form1\n   Inherits Form\n   Private WithEvents statusStrip1 As StatusStrip\n   \n   Public Sub New()\n      InitializeComponent()\n   End Sub\n   \n   &lt;STAThread()&gt;  _\n   Shared Sub Main()\n      Application.EnableVisualStyles()\n      Application.SetCompatibleTextRenderingDefault(False)\n      Application.Run(New Form1())\n   End Sub\n   \n   \n   Private Sub InitializeComponent()\n      Me.statusStrip1 = New System.Windows.Forms.StatusStrip()\n      Me.SuspendLayout()\n      &#39; \n      &#39; statusStrip1\n      &#39; \n      Me.statusStrip1.Location = New System.Drawing.Point(0, 251)\n      Me.statusStrip1.Name = &quot;statusStrip1&quot;\n      Me.statusStrip1.Size = New System.Drawing.Size(292, 22)\n      Me.statusStrip1.TabIndex = 0\n      Me.statusStrip1.Text = &quot;statusStrip1&quot;\n      &#39; \n      &#39; Form1\n      &#39; \n      Me.ClientSize = New System.Drawing.Size(292, 273)\n      Me.Controls.Add(statusStrip1)\n      Me.Name = &quot;Form1&quot;\n      Me.ResumeLayout(False)\n      Me.PerformLayout()\n   End Sub\n    \n   \n   Private Sub statusStrip1_LocationChanged(sender As Object, e As EventArgs) Handles statusStrip1.LocationChanged\n      MessageBox.Show(&quot;The form has been resized.&quot;)\n   End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_LostFocus\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LostFocus</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the control loses focus.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler LostFocus;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Select_\" data-linktype=\"relative-path\">Select</a> or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SelectNextControl_\" data-linktype=\"relative-path\">SelectNextControl</a> methods, or by setting the <a class=\"xref\" href=\"system.windows.forms.containercontrol#System_Windows_Forms_ContainerControl_ActiveControl_\" data-linktype=\"relative-path\">ActiveControl</a> property to the current form, focus events occur in the following order:  </p>\n<ol>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Enter\" data-linktype=\"relative-path\">Enter</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GotFocus\" data-linktype=\"relative-path\">GotFocus</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Leave\" data-linktype=\"relative-path\">Leave</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validating\" data-linktype=\"relative-path\">Validating</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validated\" data-linktype=\"relative-path\">Validated</a>  \n</li>\n<li><p>LostFocus  </p>\n<p>When you change the focus by using the mouse or by calling the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Focus_\" data-linktype=\"relative-path\">Focus</a> method, focus events occur in the following order:  </p>\n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Enter\" data-linktype=\"relative-path\">Enter</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GotFocus\" data-linktype=\"relative-path\">GotFocus</a>  \n</li>\n<li><p>LostFocus  </p>\n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Leave\" data-linktype=\"relative-path\">Leave</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validating\" data-linktype=\"relative-path\">Validating</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validated\" data-linktype=\"relative-path\">Validated</a>  \n\n<p>If the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CausesValidation_\" data-linktype=\"relative-path\">CausesValidation</a> property is set to <code>false</code>, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validating\" data-linktype=\"relative-path\">Validating</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validated\" data-linktype=\"relative-path\">Validated</a> events are suppressed.  </p>\n<p>If the <a class=\"xref\" href=\"system.componentmodel.canceleventargs#System_ComponentModel_CancelEventArgs_Cancel_\" data-linktype=\"relative-path\">Cancel</a> property of the <a class=\"xref\" href=\"system.componentmodel.canceleventargs\" data-linktype=\"relative-path\">CancelEventArgs</a> is set to <code>true</code> in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validating\" data-linktype=\"relative-path\">Validating</a> event delegate, all events that would usually occur after the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validating\" data-linktype=\"relative-path\">Validating</a> event are suppressed.  </p>\n</li>\n</ol>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GotFocus\" data-linktype=\"relative-path\">GotFocus</a> and LostFocus events are low-level focus events that are tied to the WM_KILLFOCUS and WM_SETFOCUS Windows messages. Typically, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GotFocus\" data-linktype=\"relative-path\">GotFocus</a> and LostFocus events are only used when updating <a class=\"xref\" href=\"system.windows.forms.uicues\" data-linktype=\"relative-path\">UICues</a> or when writing custom controls. Instead the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Enter\" data-linktype=\"relative-path\">Enter</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Leave\" data-linktype=\"relative-path\">Leave</a> events should be used for all controls except the <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> class, which uses the <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_Activated\" data-linktype=\"relative-path\">Activated</a> and <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_Deactivate\" data-linktype=\"relative-path\">Deactivate</a> events. For more information about the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GotFocus\" data-linktype=\"relative-path\">GotFocus</a> and LostFocus events, see the <a href=\"http://msdn.microsoft.com/library/windows/desktop/ms646282(v=vs.85).aspx\" data-linktype=\"external\">WM_KILLFOCUS</a> and <a href=\"http://msdn.microsoft.com/library/windows/desktop/ms646282(v=vs.85).aspx\" data-linktype=\"external\">WM_KILLFOCUS</a> topics.  </p>\n</div>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Do not attempt to set focus from within the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Enter\" data-linktype=\"relative-path\">Enter</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GotFocus\" data-linktype=\"relative-path\">GotFocus</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Leave\" data-linktype=\"relative-path\">Leave</a>, LostFocus, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validating\" data-linktype=\"relative-path\">Validating</a>, or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validated\" data-linktype=\"relative-path\">Validated</a> event handlers. Doing so can cause your application or the operating system to stop responding. For more information, see the <a href=\"http://msdn.microsoft.com/library/windows/desktop/ms646282(v=vs.85).aspx\" data-linktype=\"external\">WM_KILLFOCUS</a> topic.  </p>\n</div>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates validating the text for TextBox1. It also demonstrates handling the LostFocus event by setting the <a class=\"xref\" href=\"system.windows.forms.filedialog#System_Windows_Forms_FileDialog_InitialDirectory_\" data-linktype=\"relative-path\">InitialDirectory</a> property to the text in TextBox1. The code example used the <a class=\"xref\" href=\"system.windows.forms.errorprovider#System_Windows_Forms_ErrorProvider_GetError_\" data-linktype=\"relative-path\">GetError</a> method to check for an error before opening the file dialog box. To run this example, paste the following code into a form containing a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> named <code>TextBox1</code>, an <a class=\"xref\" href=\"system.windows.forms.openfiledialog\" data-linktype=\"relative-path\">OpenFileDialog</a> named <code>OpenFileDialog1</code>, a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> named <code>Button1</code>, and an <a class=\"xref\" href=\"system.windows.forms.errorprovider\" data-linktype=\"relative-path\">ErrorProvider</a> named <code>ErrorProvider1</code>. Ensure all events are associated with their event handlers.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.FileDialog#2\">\tprivate void textBox1_Validating(object sender, \n\t\tSystem.ComponentModel.CancelEventArgs e)\n\t{\n\t\t// If nothing is entered,\n\t\t// an ArgumentException is caught; if an invalid directory is entered, \n\t\t// a DirectoryNotFoundException is caught. An appropriate error message \n\t\t// is displayed in either case.\n\t\ttry\n\t\t{\n\t\t\tSystem.IO.DirectoryInfo directory = \n\t\t\t\tnew System.IO.DirectoryInfo(textBox1.Text);\n\t\t\tdirectory.GetFiles();\n\t\t\terrorProvider1.SetError(textBox1, &quot;&quot;);\n\n\t\t}\n\t\tcatch(System.ArgumentException ex1)\n\t\t{\n\t\t\terrorProvider1.SetError(textBox1, &quot;Please enter a directory&quot;);\n\n\t\t}\n\t\tcatch(System.IO.DirectoryNotFoundException ex2)\n\t\t{\n\t\t\terrorProvider1.SetError(textBox1, &quot;The directory does not exist.&quot; +\n\t\t\t\t&quot;Try again with a different directory.&quot;);\n\t\t}\n\n\t}\n\n\t// This method handles the LostFocus event for textBox1 by setting the \n\t// dialog&#39;s InitialDirectory property to the text in textBox1.\n\tprivate void textBox1_LostFocus(object sender, System.EventArgs e)\n\t{\n\t\topenFileDialog1.InitialDirectory = textBox1.Text;\n\t}\n\n\t// This method demonstrates using the ErrorProvider.GetError method \n\t// to check for an error before opening the dialog box.\n\tprivate void button1_Click(System.Object sender, System.EventArgs e)\n\t{\n\t\t//If there is no error, then open the dialog box.\n\t\tif (errorProvider1.GetError(textBox1)==&quot;&quot;)\n\t\t{\n\t\t\tDialogResult dialogResult = openFileDialog1.ShowDialog();\n\t\t}\n\t}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.FileDialog#2\">private:\n   void TextBox1_Validating( Object^ sender,\n      System::ComponentModel::CancelEventArgs^ e )\n   {\n      // If nothing is entered,\n      // an ArgumentException is caught; if an invalid directory is entered, \n      // a DirectoryNotFoundException is caught. An appropriate error message \n      // is displayed in either case.\n      try\n      {\n         System::IO::DirectoryInfo^ directory = gcnew System::IO::DirectoryInfo( TextBox1-&gt;Text );\n         directory-&gt;GetFiles();\n         ErrorProvider1-&gt;SetError( TextBox1, &quot;&quot; );\n      }\n      catch ( System::ArgumentException^ ) \n      {\n         ErrorProvider1-&gt;SetError( TextBox1, &quot;Please enter a directory&quot; );\n      }\n      catch ( System::IO::DirectoryNotFoundException^ ) \n      {\n         ErrorProvider1-&gt;SetError( TextBox1, &quot;The directory does not exist.&quot;\n         &quot;Try again with a different directory.&quot; );\n      }\n   }\n\n   // This method handles the LostFocus event for TextBox1 by setting the \n   // dialog&#39;s InitialDirectory property to the text in TextBox1.\n   void TextBox1_LostFocus( Object^ sender, System::EventArgs^ e )\n   {\n      OpenFileDialog1-&gt;InitialDirectory = TextBox1-&gt;Text;\n   }\n\n   // This method demonstrates using the ErrorProvider.GetError method \n   // to check for an error before opening the dialog box.\n   void Button1_Click( System::Object^ sender, System::EventArgs^ e )\n   {\n      //If there is no error, then open the dialog box.\n      if ( ErrorProvider1-&gt;GetError( TextBox1 )-&gt;Equals( &quot;&quot; ) )\n      {\n         ::DialogResult dialogResult = OpenFileDialog1-&gt;ShowDialog();\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.FileDialog#2\">    Private Sub TextBox1_Validating(ByVal sender As Object, _\n    ByVal e As System.ComponentModel.CancelEventArgs) _\n    Handles TextBox1.Validating\n\n        &#39; If nothing is entered,\n        &#39; an ArgumentException is caught; if an invalid directory is entered, \n        &#39; a DirectoryNotFoundException is caught. An appropriate error message \n        &#39; is displayed in either case.\n        Try\n            Dim directory As New System.IO.DirectoryInfo(TextBox1.Text)\n            directory.GetFiles()\n            ErrorProvider1.SetError(TextBox1, &quot;&quot;)\n\n        Catch ex1 As System.ArgumentException\n            ErrorProvider1.SetError(TextBox1, &quot;Please enter a directory&quot;)\n\n        Catch ex2 As System.IO.DirectoryNotFoundException\n            ErrorProvider1.SetError(TextBox1, _\n            &quot;The directory does not exist.&quot; &amp; _\n            &quot;Try again with a different directory.&quot;)\n        End Try\n\n    End Sub\n\n    &#39; This method handles the LostFocus event for TextBox1 by setting the \n    &#39; dialog&#39;s InitialDirectory property to the text in TextBox1.\n    Private Sub TextBox1_LostFocus(ByVal sender As Object, _\n        ByVal e As System.EventArgs) Handles TextBox1.LostFocus\n        OpenFileDialog1.InitialDirectory = TextBox1.Text\n    End Sub\n\n\n    &#39; This method demonstrates using the ErrorProvider.GetError method \n    &#39; to check for an error before opening the dialog box.\n    Private Sub Button1_Click(ByVal sender As System.Object, _\n    ByVal e As System.EventArgs) Handles Button1.Click\n\n        &#39;If there is no error, then open the dialog box.\n        If ErrorProvider1.GetError(TextBox1) = &quot;&quot; Then\n            Dim dialogResult As DialogResult = OpenFileDialog1.ShowDialog()\n        End If\n\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_MarginChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MarginChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the control&#39;s margin changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler MarginChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MarginChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of a type that inherits from <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a>, such as a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> or <a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a>. Then name the instance <code>Control1</code> and ensure that the event handler is associated with the MarginChanged event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#21\">private void Control1_MarginChanged(Object sender, EventArgs e) {\n\n   MessageBox.Show(&quot;You are in the Control.MarginChanged event.&quot;);\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#21\">Private Sub Control1_MarginChanged(sender as Object, e as EventArgs) _ \n     Handles Control1.MarginChanged\n\n   MessageBox.Show(&quot;You are in the Control.MarginChanged event.&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_MouseCaptureChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseCaptureChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the control loses mouse capture.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler MouseCaptureChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In rare scenarios, you might need to detect unexpected input. For example, consider the following scenarios.  </p>\n<ul>\n<li><p>During a mouse operation, the user opens the Start menu by pressing the Windows key or CTRL+ESC.  </p>\n</li>\n<li><p>During a mouse operation, the user switches to another program by pressing ALT+TAB.  </p>\n</li>\n<li><p>During a mouse operation, another program displays a window or a message box that takes focus away from the current application.  </p>\n<p>Mouse operations can include clicking and holding the mouse on a form or a control, or performing a mouse drag operation. If you have to detect when a form or a control loses mouse capture for these and related unexpected scenarios, you can use the MouseCaptureChanged event.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the MouseCaptureChanged event for a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> control.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.Control.MouseCaptureChanged#1\">private void button1_MouseDown(object sender, MouseEventArgs e)\n{\n    System.Diagnostics.Debug.WriteLine(&quot;button1_MouseDown&quot;);\n}\n\nprivate void button1_MouseUp(object sender, MouseEventArgs e)\n{\n    System.Diagnostics.Debug.WriteLine(&quot;button1_MouseUp&quot;);\n}\n\nprivate void button1_MouseCaptureChanged(object sender, EventArgs e)\n{\n    System.Diagnostics.Debug.WriteLine(&quot;button1_MouseCaptureChanged&quot;);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.Control.MouseCaptureChanged#1\">Private Sub Button1_MouseDown(ByVal sender As System.Object, _\nByVal e As MouseEventArgs) Handles Button1.MouseDown\n    Debug.WriteLine(&quot;Button1_MouseDown&quot;)\nEnd Sub\n\nPrivate Sub Button1_MouseUp(ByVal sender As System.Object, _\nByVal e As MouseEventArgs) Handles Button1.MouseUp\n    Debug.WriteLine(&quot;Button1_MouseUp&quot;)\nEnd Sub\n\nPrivate Sub Button1_MouseCaptureChanged(ByVal sender As System.Object, _\nByVal e As EventArgs) Handles Button1.MouseCaptureChanged\n    Debug.WriteLine(&quot;Button1_MouseCaptureChanged&quot;)\nEnd Sub\n</code></pre><p> To test this example, run it in the debugger by pressing F5. Open the <strong>Output</strong> window in Visual Studio so that you can see when events are raised. Click the <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> and notice the following output.  </p>\n<p> <code>button1_MouseDown</code>  </p>\n<p> <code>button1_MouseUp</code>  </p>\n<p> <code>button1_MouseCaptureChanged</code>  </p>\n<p> Now, click and hold the left mouse button on the <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> control. While still clicking the mouse, press ALT+TAB to switch to another program. Notice that the MouseCaptureChanged event is raised enabling you to potentially handle this scenario. Depending on your actions, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseUp\" data-linktype=\"relative-path\">MouseUp</a> event might not be raised. You can also try this test with the Windows key or CTRL+ESC.  </p>\n<p> <code>button1_MouseDown</code>  </p>\n<p> <code>button1_MouseCaptureChanged</code></p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_MouseClick\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseClick</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the control is clicked by the mouse.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.MouseEventHandler MouseClick;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Depressing a mouse button when the cursor is over a control typically raises the following series of events from the control:  </p>\n<ol>\n<li><p><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> event.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Click\" data-linktype=\"relative-path\">Click</a> event.  </p>\n</li>\n<li><p>MouseClick event.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseUp\" data-linktype=\"relative-path\">MouseUp</a> event.  </p>\n<p>For this to occur, the various events cannot be disabled in the control&#39;s class.  </p>\n<p>Two single clicks that occur close enough in time, as determined by the mouse settings of the user&#39;s operating system, will generate a <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDoubleClick\" data-linktype=\"relative-path\">MouseDoubleClick</a> event instead of the second MouseClick event.  </p>\n</li>\n</ol>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Click\" data-linktype=\"relative-path\">Click</a> events are logically higher-level events of a control. They are often raised by other actions, such as pressing the ENTER key when the control has focus.  </p>\n</div>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseClick event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of a type that inherits from <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a>, such as a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> or <a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a>. Then name the instance <code>Control1</code> and ensure that the event handler is associated with the MouseClick event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#54\">private void Control1_MouseClick(Object sender, MouseEventArgs e) {\n\nSystem.Text.StringBuilder messageBoxCS = new System.Text.StringBuilder();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;Button&quot;, e.Button );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;Clicks&quot;, e.Clicks );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;X&quot;, e.X );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;Y&quot;, e.Y );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;Delta&quot;, e.Delta );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;Location&quot;, e.Location );\nmessageBoxCS.AppendLine();\nMessageBox.Show(messageBoxCS.ToString(), &quot;MouseClick Event&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#54\">Private Sub Control1_MouseClick(sender as Object, e as MouseEventArgs) _ \n     Handles Control1.MouseClick\n\n    Dim messageBoxVB as New System.Text.StringBuilder()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;Button&quot;, e.Button)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;Clicks&quot;, e.Clicks)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;X&quot;, e.X)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;Y&quot;, e.Y)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;Delta&quot;, e.Delta)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;Location&quot;, e.Location)\n    messageBoxVB.AppendLine()\n    MessageBox.Show(messageBoxVB.ToString(),&quot;MouseClick Event&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_MouseDoubleClick\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseDoubleClick</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the control is double clicked by the mouse.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.MouseEventHandler MouseDoubleClick;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MouseDoubleClick event occurs when the user depresses a mouse button twice in quick succession when the cursor is over the control. The time interval that separates two single clicks from a double-click is determined by the mouse settings of the user&#39;s operating system.  </p>\n<p> The following series of events is raised by the control when such a user action takes place:  </p>\n<ol>\n<li><p><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> event.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Click\" data-linktype=\"relative-path\">Click</a> event.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseClick\" data-linktype=\"relative-path\">MouseClick</a> event.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseUp\" data-linktype=\"relative-path\">MouseUp</a> event.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> event.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoubleClick\" data-linktype=\"relative-path\">DoubleClick</a> event.  </p>\n</li>\n<li><p>MouseDoubleClick event.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseUp\" data-linktype=\"relative-path\">MouseUp</a> event.  </p>\n<p>For this to occur, the various events cannot be disabled in the control&#39;s class.  </p>\n</li>\n</ol>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoubleClick\" data-linktype=\"relative-path\">DoubleClick</a> events are logically higher-level events of a control. They may be raised by other user actions, such as shortcut key combinations.  </p>\n</div>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseDoubleClick event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of a type that inherits from <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a>, such as a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> or <a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a>. Then name the instance <code>Control1</code> and ensure that the event handler is associated with the MouseDoubleClick event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#55\">private void Control1_MouseDoubleClick(Object sender, MouseEventArgs e) {\n\nSystem.Text.StringBuilder messageBoxCS = new System.Text.StringBuilder();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;Button&quot;, e.Button );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;Clicks&quot;, e.Clicks );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;X&quot;, e.X );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;Y&quot;, e.Y );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;Delta&quot;, e.Delta );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;Location&quot;, e.Location );\nmessageBoxCS.AppendLine();\nMessageBox.Show(messageBoxCS.ToString(), &quot;MouseDoubleClick Event&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#55\">Private Sub Control1_MouseDoubleClick(sender as Object, e as MouseEventArgs) _ \n     Handles Control1.MouseDoubleClick\n\n    Dim messageBoxVB as New System.Text.StringBuilder()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;Button&quot;, e.Button)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;Clicks&quot;, e.Clicks)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;X&quot;, e.X)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;Y&quot;, e.Y)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;Delta&quot;, e.Delta)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;Location&quot;, e.Location)\n    messageBoxVB.AppendLine()\n    MessageBox.Show(messageBoxVB.ToString(),&quot;MouseDoubleClick Event&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_MouseDown\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseDown</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the mouse pointer is over the control and a mouse button is pressed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.MouseEventHandler MouseDown;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Mouse events occur in the following order:  </p>\n<ol>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseEnter\" data-linktype=\"relative-path\">MouseEnter</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseMove\" data-linktype=\"relative-path\">MouseMove</a>  \n</li>\n<li><p><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseHover\" data-linktype=\"relative-path\">MouseHover</a> / MouseDown / <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseWheel\" data-linktype=\"relative-path\">MouseWheel</a>  </p>\n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseUp\" data-linktype=\"relative-path\">MouseUp</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseLeave\" data-linktype=\"relative-path\">MouseLeave</a>  \n\n</li>\n</ol>\n<div class=\"NOTE\"><h5>Note</h5><p> The following events are not raised for the <a class=\"xref\" href=\"system.windows.forms.tabcontrol\" data-linktype=\"relative-path\">TabControl</a> class unless there is at least one <a class=\"xref\" href=\"system.windows.forms.tabpage\" data-linktype=\"relative-path\">TabPage</a> in the <a class=\"xref\" href=\"system.windows.forms.tabcontrol#System_Windows_Forms_TabControl_TabPages_\" data-linktype=\"relative-path\">TabPages</a> collection: <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Click\" data-linktype=\"relative-path\">Click</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoubleClick\" data-linktype=\"relative-path\">DoubleClick</a>, MouseDown, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseUp\" data-linktype=\"relative-path\">MouseUp</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseHover\" data-linktype=\"relative-path\">MouseHover</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseEnter\" data-linktype=\"relative-path\">MouseEnter</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseLeave\" data-linktype=\"relative-path\">MouseLeave</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseMove\" data-linktype=\"relative-path\">MouseMove</a>. If there is at least one <a class=\"xref\" href=\"system.windows.forms.tabpage\" data-linktype=\"relative-path\">TabPage</a> in the collection, and the user interacts with the tab control&#39;s header (where the <a class=\"xref\" href=\"system.windows.forms.tabpage\" data-linktype=\"relative-path\">TabPage</a> names appear), the <a class=\"xref\" href=\"system.windows.forms.tabcontrol\" data-linktype=\"relative-path\">TabControl</a> raises the appropriate event. However, if the user interaction is within the client area of the tab page, the <a class=\"xref\" href=\"system.windows.forms.tabpage\" data-linktype=\"relative-path\">TabPage</a> raises the appropriate event.  </p>\n</div>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using different mouse events to draw the path of the mouse on a <a class=\"xref\" href=\"system.windows.forms.panel\" data-linktype=\"relative-path\">Panel</a>. A line segment is added to the <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath\" data-linktype=\"relative-path\">GraphicsPath</a> for each <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseMove\" data-linktype=\"relative-path\">MouseMove</a> and MouseDown events that occur. To update the graphics, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invalidate_\" data-linktype=\"relative-path\">Invalidate</a> method is called for the <a class=\"xref\" href=\"system.windows.forms.panel\" data-linktype=\"relative-path\">Panel</a> on each <code>MouseDown</code> and <code>MouseUp</code> event. In addition, the graphic path is scrolled up or down when the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseWheel\" data-linktype=\"relative-path\">MouseWheel</a> event occurs. Additional mouse events, like <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseHover\" data-linktype=\"relative-path\">MouseHover</a>, are identified on screen as well. Also displayed on the screen is additional information about the mouse from the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.MouseEvent#1\">#using &lt;System.dll&gt;\n#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n\nusing namespace System;\nusing namespace System::Drawing;\nusing namespace System::Windows::Forms;\n\nnamespace MouseEvent\n{\n   public ref class Form1: public System::Windows::Forms::Form\n   {\n   private:\n      System::Windows::Forms::Panel^ panel1;\n      System::Windows::Forms::Label ^ label1;\n      System::Windows::Forms::Label ^ label2;\n      System::Windows::Forms::Label ^ label3;\n      System::Windows::Forms::Label ^ label4;\n      System::Windows::Forms::Label ^ label5;\n      System::Windows::Forms::Label ^ label6;\n      System::Windows::Forms::Label ^ label7;\n      System::Windows::Forms::Label ^ label8;\n      System::Windows::Forms::Label ^ label9;\n      System::Windows::Forms::Button^ clearButton;\n      System::Drawing::Drawing2D::GraphicsPath^ mousePath;\n      System::Windows::Forms::GroupBox^ groupBox1;\n      int fontSize;\n\n   public:\n      Form1()\n      {\n         fontSize = 20;\n         mousePath = gcnew System::Drawing::Drawing2D::GraphicsPath;\n         this-&gt;panel1 = gcnew System::Windows::Forms::Panel;\n         this-&gt;label1 = gcnew System::Windows::Forms::Label;\n         this-&gt;clearButton = gcnew System::Windows::Forms::Button;\n         this-&gt;label2 = gcnew System::Windows::Forms::Label;\n         this-&gt;label3 = gcnew System::Windows::Forms::Label;\n         this-&gt;label4 = gcnew System::Windows::Forms::Label;\n         this-&gt;label5 = gcnew System::Windows::Forms::Label;\n         this-&gt;label6 = gcnew System::Windows::Forms::Label;\n         this-&gt;label7 = gcnew System::Windows::Forms::Label;\n         this-&gt;label8 = gcnew System::Windows::Forms::Label;\n         this-&gt;label9 = gcnew System::Windows::Forms::Label;\n         this-&gt;groupBox1 = gcnew System::Windows::Forms::GroupBox;\n         \n         // Mouse Events Label\n         this-&gt;label1-&gt;Location = System::Drawing::Point( 24, 504 );\n         this-&gt;label1-&gt;Size = System::Drawing::Size( 392, 23 );\n         \n         // DoubleClickSize Label\n         this-&gt;label2-&gt;AutoSize = true;\n         this-&gt;label2-&gt;Location = System::Drawing::Point( 24, 48 );\n         this-&gt;label2-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // DoubleClickTime Label\n         this-&gt;label3-&gt;AutoSize = true;\n         this-&gt;label3-&gt;Location = System::Drawing::Point( 24, 72 );\n         this-&gt;label3-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // MousePresent Label\n         this-&gt;label4-&gt;AutoSize = true;\n         this-&gt;label4-&gt;Location = System::Drawing::Point( 24, 96 );\n         this-&gt;label4-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // MouseButtons Label\n         this-&gt;label5-&gt;AutoSize = true;\n         this-&gt;label5-&gt;Location = System::Drawing::Point( 24, 120 );\n         this-&gt;label5-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // MouseButtonsSwapped Label\n         this-&gt;label6-&gt;AutoSize = true;\n         this-&gt;label6-&gt;Location = System::Drawing::Point( 320, 48 );\n         this-&gt;label6-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // MouseWheelPresent Label\n         this-&gt;label7-&gt;AutoSize = true;\n         this-&gt;label7-&gt;Location = System::Drawing::Point( 320, 72 );\n         this-&gt;label7-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // MouseWheelScrollLines Label\n         this-&gt;label8-&gt;AutoSize = true;\n         this-&gt;label8-&gt;Location = System::Drawing::Point( 320, 96 );\n         this-&gt;label8-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // NativeMouseWheelSupport Label\n         this-&gt;label9-&gt;AutoSize = true;\n         this-&gt;label9-&gt;Location = System::Drawing::Point( 320, 120 );\n         this-&gt;label9-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // Mouse Panel\n         this-&gt;panel1-&gt;Anchor = static_cast&lt;System::Windows::Forms::AnchorStyles&gt;(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n         this-&gt;panel1-&gt;BackColor = System::Drawing::SystemColors::ControlDark;\n         this-&gt;panel1-&gt;Location = System::Drawing::Point( 16, 160 );\n         this-&gt;panel1-&gt;Size = System::Drawing::Size( 664, 320 );\n         this-&gt;panel1-&gt;MouseUp += gcnew System::Windows::Forms::MouseEventHandler( this, &amp;Form1::panel1_MouseUp );\n         this-&gt;panel1-&gt;Paint += gcnew System::Windows::Forms::PaintEventHandler( this, &amp;Form1::panel1_Paint );\n         this-&gt;panel1-&gt;MouseEnter += gcnew System::EventHandler( this, &amp;Form1::panel1_MouseEnter );\n         this-&gt;panel1-&gt;MouseHover += gcnew System::EventHandler( this, &amp;Form1::panel1_MouseHover );\n         this-&gt;panel1-&gt;MouseMove += gcnew System::Windows::Forms::MouseEventHandler( this, &amp;Form1::panel1_MouseMove );\n         this-&gt;panel1-&gt;MouseLeave += gcnew System::EventHandler( this, &amp;Form1::panel1_MouseLeave );\n         this-&gt;panel1-&gt;MouseDown += gcnew System::Windows::Forms::MouseEventHandler( this, &amp;Form1::panel1_MouseDown );\n         this-&gt;panel1-&gt;MouseWheel += gcnew System::Windows::Forms::MouseEventHandler( this, &amp;Form1::panel1_MouseWheel );\n         \n         // Clear Button\n         this-&gt;clearButton-&gt;Anchor = static_cast&lt;System::Windows::Forms::AnchorStyles&gt;(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Right);\n         this-&gt;clearButton-&gt;Location = System::Drawing::Point( 592, 504 );\n         this-&gt;clearButton-&gt;TabIndex = 1;\n         this-&gt;clearButton-&gt;Text = &quot;Clear&quot;;\n         this-&gt;clearButton-&gt;Click += gcnew System::EventHandler( this, &amp;Form1::clearButton_Click );\n         \n         // GroupBox\n         this-&gt;groupBox1-&gt;Anchor = static_cast&lt;System::Windows::Forms::AnchorStyles&gt;(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n         this-&gt;groupBox1-&gt;Location = System::Drawing::Point( 16, 24 );\n         this-&gt;groupBox1-&gt;Size = System::Drawing::Size( 664, 128 );\n         this-&gt;groupBox1-&gt;Text = &quot;System::Windows::Forms::SystemInformation&quot;;\n         \n         // Set up how the form should be displayed and add the controls to the form.\n         this-&gt;ClientSize = System::Drawing::Size( 696, 534 );\n         array&lt;System::Windows::Forms::Control^&gt;^temp0 = {this-&gt;label9,this-&gt;label8,this-&gt;label7,this-&gt;label6,this-&gt;label5,this-&gt;label4,this-&gt;label3,this-&gt;label2,this-&gt;clearButton,this-&gt;panel1,this-&gt;label1,this-&gt;groupBox1};\n         this-&gt;Controls-&gt;AddRange( temp0 );\n         this-&gt;Text = &quot;Mouse Event Example&quot;;\n         \n         // Displays information about the system mouse.\n         label2-&gt;Text = &quot;SystemInformation::DoubleClickSize: {0}&quot;,SystemInformation::DoubleClickSize;\n         label3-&gt;Text = &quot;SystemInformation::DoubleClickTime: {0}&quot;,SystemInformation::DoubleClickTime;\n         label4-&gt;Text = &quot;SystemInformation::MousePresent: {0}&quot;,SystemInformation::MousePresent;\n         label5-&gt;Text = &quot;SystemInformation::MouseButtons: {0}&quot;,SystemInformation::MouseButtons;\n         label6-&gt;Text = &quot;SystemInformation::MouseButtonsSwapped: {0}&quot;,SystemInformation::MouseButtonsSwapped;\n         label7-&gt;Text = &quot;SystemInformation::MouseWheelPresent: {0}&quot;,SystemInformation::MouseWheelPresent;\n         label8-&gt;Text = &quot;SystemInformation::MouseWheelScrollLines: {0}&quot;,SystemInformation::MouseWheelScrollLines;\n         label9-&gt;Text = &quot;SystemInformation::NativeMouseWheelSupport: {0}&quot;,SystemInformation::NativeMouseWheelSupport;\n      }\n\n   private:\n      void panel1_MouseDown( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n      {\n         // Update the mouse path with the mouse information\n         Point mouseDownLocation = Point(e-&gt;X,e-&gt;Y);\n         String^ eventString = nullptr;\n         switch ( e-&gt;Button )\n         {\n            case ::MouseButtons::Left:\n               eventString = &quot;L&quot;;\n               break;\n\n            case ::MouseButtons::Right:\n               eventString = &quot;R&quot;;\n               break;\n\n            case ::MouseButtons::Middle:\n               eventString = &quot;M&quot;;\n               break;\n\n            case ::MouseButtons::XButton1:\n               eventString = &quot;X1&quot;;\n               break;\n\n            case ::MouseButtons::XButton2:\n               eventString = &quot;X2&quot;;\n               break;\n\n            case ::MouseButtons::None:\n            default:\n               break;\n         }\n         if ( eventString != nullptr )\n         {\n            mousePath-&gt;AddString( eventString, FontFamily::GenericSerif, (int)FontStyle::Bold, (float)fontSize, mouseDownLocation, StringFormat::GenericDefault );\n         }\n         else\n         {\n            mousePath-&gt;AddLine( mouseDownLocation, mouseDownLocation );\n         }\n\n         panel1-&gt;Focus();\n         panel1-&gt;Invalidate();\n      }\n\n      void panel1_MouseEnter( Object^ sender, System::EventArgs^ /*e*/ )\n      {\n         \n         // Update the mouse event label to indicate the MouseEnter event occurred.\n         label1-&gt;Text = String::Concat( sender-&gt;GetType(), &quot;: MouseEnter&quot; );\n      }\n\n      void panel1_MouseHover( Object^ sender, System::EventArgs^ /*e*/ )\n      {\n         \n         // Update the mouse event label to indicate the MouseHover event occurred.\n         label1-&gt;Text = String::Concat( sender-&gt;GetType(), &quot;: MouseHover&quot; );\n      }\n\n      void panel1_MouseLeave( Object^ sender, System::EventArgs^ /*e*/ )\n      {\n         \n         // Update the mouse event label to indicate the MouseLeave event occurred.\n         label1-&gt;Text = String::Concat( sender-&gt;GetType(), &quot;: MouseLeave&quot; );\n      }\n\n      void panel1_MouseMove( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n      {\n         // Update the mouse path that is drawn onto the Panel.\n         int mouseX = e-&gt;X;\n         int mouseY = e-&gt;Y;\n         mousePath-&gt;AddLine( mouseX, mouseY, mouseX, mouseY );\n      }\n\n      void panel1_MouseWheel( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n      {\n         // Update the drawing based upon the mouse wheel scrolling.\n         int numberOfTextLinesToMove = e-&gt;Delta * SystemInformation::MouseWheelScrollLines / 120;\n         int numberOfPixelsToMove = numberOfTextLinesToMove * fontSize;\n         if ( numberOfPixelsToMove != 0 )\n         {\n            System::Drawing::Drawing2D::Matrix^ translateMatrix = gcnew System::Drawing::Drawing2D::Matrix;\n            translateMatrix-&gt;Translate( 0, (float)numberOfPixelsToMove );\n            mousePath-&gt;Transform(translateMatrix);\n         }\n\n         panel1-&gt;Invalidate();\n      }\n\n      void panel1_MouseUp( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n      {\n         Point mouseUpLocation = System::Drawing::Point( e-&gt;X, e-&gt;Y );\n         \n         // Show the number of clicks in the path graphic.\n         int numberOfClicks = e-&gt;Clicks;\n         mousePath-&gt;AddString( String::Format( &quot;   {0}&quot;, numberOfClicks ), FontFamily::GenericSerif, (int)FontStyle::Bold, (float)fontSize, mouseUpLocation, StringFormat::GenericDefault );\n         panel1-&gt;Invalidate();\n      }\n\n      void panel1_Paint( Object^ /*sender*/, System::Windows::Forms::PaintEventArgs^ e )\n      {\n         // Perform the painting of the Panel.\n         e-&gt;Graphics-&gt;DrawPath( System::Drawing::Pens::DarkRed, mousePath );\n      }\n\n      void clearButton_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n      {\n         // Clear the Panel display.\n         delete mousePath;\n         mousePath = gcnew System::Drawing::Drawing2D::GraphicsPath;\n         panel1-&gt;Invalidate();\n      }\n   };\n}\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew MouseEvent::Form1 );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.MouseEvent#1\">using System;\nusing System.Drawing;\nusing System.Windows.Forms;\n\nnamespace MouseEvent\n{\n    public class Form1 : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.Panel panel1;\n        private System.Windows.Forms.Label label1;\n        private System.Windows.Forms.Label label2;\n        private System.Windows.Forms.Label label3;\n        private System.Windows.Forms.Label label4;\n        private System.Windows.Forms.Label label5;\n        private System.Windows.Forms.Label label6;\n        private System.Windows.Forms.Label label7;\n        private System.Windows.Forms.Label label8;\n        private System.Windows.Forms.Label label9;\n        private System.Windows.Forms.Button clearButton;\n        private System.Drawing.Drawing2D.GraphicsPath mousePath;\n        private System.Windows.Forms.GroupBox groupBox1;\n\n        private int fontSize = 20;        \n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new Form1());\n        }\n\n        public Form1()\n        {            \n            mousePath = new System.Drawing.Drawing2D.GraphicsPath();\n\n            this.panel1 = new System.Windows.Forms.Panel();\n            this.label1 = new System.Windows.Forms.Label();\n            this.clearButton = new System.Windows.Forms.Button();\n            this.label2 = new System.Windows.Forms.Label();\n            this.label3 = new System.Windows.Forms.Label();\n            this.label4 = new System.Windows.Forms.Label();\n            this.label5 = new System.Windows.Forms.Label();\n            this.label6 = new System.Windows.Forms.Label();\n            this.label7 = new System.Windows.Forms.Label();\n            this.label8 = new System.Windows.Forms.Label();\n            this.label9 = new System.Windows.Forms.Label();\n            this.groupBox1 = new System.Windows.Forms.GroupBox();\n\n            // Mouse Events Label\n            this.label1.Location = new System.Drawing.Point(24, 504);\n            this.label1.Size = new System.Drawing.Size(392, 23);\n            // DoubleClickSize Label\n            this.label2.AutoSize = true;\n            this.label2.Location = new System.Drawing.Point(24, 48);\n            this.label2.Size = new System.Drawing.Size(35, 13);\n            // DoubleClickTime Label\n            this.label3.AutoSize = true;\n            this.label3.Location = new System.Drawing.Point(24, 72);\n            this.label3.Size = new System.Drawing.Size(35, 13);\n            // MousePresent Label\n            this.label4.AutoSize = true;\n            this.label4.Location = new System.Drawing.Point(24, 96);\n            this.label4.Size = new System.Drawing.Size(35, 13);\n            // MouseButtons Label\n            this.label5.AutoSize = true;\n            this.label5.Location = new System.Drawing.Point(24, 120);\n            this.label5.Size = new System.Drawing.Size(35, 13);\n            // MouseButtonsSwapped Label\n            this.label6.AutoSize = true;\n            this.label6.Location = new System.Drawing.Point(320, 48);\n            this.label6.Size = new System.Drawing.Size(35, 13);\n            // MouseWheelPresent Label\n            this.label7.AutoSize = true;\n            this.label7.Location = new System.Drawing.Point(320, 72);\n            this.label7.Size = new System.Drawing.Size(35, 13);\n            // MouseWheelScrollLines Label\n            this.label8.AutoSize = true;\n            this.label8.Location = new System.Drawing.Point(320, 96);\n            this.label8.Size = new System.Drawing.Size(35, 13);\n            // NativeMouseWheelSupport Label\n            this.label9.AutoSize = true;\n            this.label9.Location = new System.Drawing.Point(320, 120);\n            this.label9.Size = new System.Drawing.Size(35, 13);\n\n            // Mouse Panel\n            this.panel1.Anchor = ((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) \n                | System.Windows.Forms.AnchorStyles.Right);\n            this.panel1.BackColor = System.Drawing.SystemColors.ControlDark;\n            this.panel1.Location = new System.Drawing.Point(16, 160);\n            this.panel1.Size = new System.Drawing.Size(664, 320);\n            this.panel1.MouseUp += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseUp);\n            this.panel1.Paint += new System.Windows.Forms.PaintEventHandler(this.panel1_Paint);\n            this.panel1.MouseEnter += new System.EventHandler(this.panel1_MouseEnter);\n            this.panel1.MouseHover += new System.EventHandler(this.panel1_MouseHover);\n            this.panel1.MouseMove += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseMove);\n            this.panel1.MouseLeave += new System.EventHandler(this.panel1_MouseLeave);\n            this.panel1.MouseDown += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseDown);\n            this.panel1.MouseWheel += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseWheel);\n\n            // Clear Button\n            this.clearButton.Anchor = (System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right);\n            this.clearButton.Location = new System.Drawing.Point(592, 504);\n            this.clearButton.TabIndex = 1;\n            this.clearButton.Text = &quot;Clear&quot;;\n            this.clearButton.Click += new System.EventHandler(this.clearButton_Click);\n            \n            // GroupBox\n            this.groupBox1.Anchor = ((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) \n                | System.Windows.Forms.AnchorStyles.Right);\n            this.groupBox1.Location = new System.Drawing.Point(16, 24);\n            this.groupBox1.Size = new System.Drawing.Size(664, 128);\n            this.groupBox1.Text = &quot;System.Windows.Forms.SystemInformation&quot;;\n\n            // Set up how the form should be displayed and add the controls to the form.\n            this.ClientSize = new System.Drawing.Size(696, 534);\n            this.Controls.AddRange(new System.Windows.Forms.Control[] {\n                                        this.label9,this.label8,this.label7,this.label6,\n                                        this.label5,this.label4,this.label3,this.label2,\n                                        this.clearButton,this.panel1,this.label1,this.groupBox1});\n            this.Text = &quot;Mouse Event Example&quot;;\n\n            // Displays information about the system mouse.\n            label2.Text = &quot;SystemInformation.DoubleClickSize: &quot; + SystemInformation.DoubleClickSize.ToString();\n            label3.Text = &quot;SystemInformation.DoubleClickTime: &quot; + SystemInformation.DoubleClickTime.ToString();\n            label4.Text = &quot;SystemInformation.MousePresent: &quot; + SystemInformation.MousePresent.ToString();\n            label5.Text = &quot;SystemInformation.MouseButtons: &quot; + SystemInformation.MouseButtons.ToString();\n            label6.Text = &quot;SystemInformation.MouseButtonsSwapped: &quot; + SystemInformation.MouseButtonsSwapped.ToString();\n            label7.Text = &quot;SystemInformation.MouseWheelPresent: &quot; + SystemInformation.MouseWheelPresent.ToString();\n            label8.Text = &quot;SystemInformation.MouseWheelScrollLines: &quot; + SystemInformation.MouseWheelScrollLines.ToString();\n            label9.Text = &quot;SystemInformation.NativeMouseWheelSupport: &quot; + SystemInformation.NativeMouseWheelSupport.ToString();\n\n        }\n\n        private void panel1_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e) \n        {\n            // Update the mouse path with the mouse information\n            Point mouseDownLocation = new Point(e.X, e.Y);\n\n            string eventString = null;\n            switch (e.Button) {\n                case MouseButtons.Left:\n                    eventString = &quot;L&quot;;\n                    break;\n                case MouseButtons.Right:\n                    eventString = &quot;R&quot;;\n                    break;\n                case MouseButtons.Middle:\n                    eventString = &quot;M&quot;;\n                    break;\n                case MouseButtons.XButton1:\n                    eventString = &quot;X1&quot;;\n                    break;\n                case MouseButtons.XButton2:\n                    eventString = &quot;X2&quot;;\n                    break;\n                case MouseButtons.None:\n                default:\n                    break;\n            }\n\n            if (eventString != null) \n            {\n                mousePath.AddString(eventString, FontFamily.GenericSerif, (int)FontStyle.Bold, fontSize, mouseDownLocation, StringFormat.GenericDefault);\n            }\n            else \n            {\n                mousePath.AddLine(mouseDownLocation,mouseDownLocation);\n            }\n            panel1.Focus();\n            panel1.Invalidate();\n        }\n\n        private void panel1_MouseEnter(object sender, System.EventArgs e) \n        {\n            // Update the mouse event label to indicate the MouseEnter event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseEnter&quot;;\n        }\n\n        private void panel1_MouseHover(object sender, System.EventArgs e) \n        {\n            // Update the mouse event label to indicate the MouseHover event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseHover&quot;;\n        }\n\n        private void panel1_MouseLeave(object sender, System.EventArgs e) \n        {\n            // Update the mouse event label to indicate the MouseLeave event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseLeave&quot;;\n        }\n\n        private void panel1_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)\n        {\n            // Update the mouse path that is drawn onto the Panel.\n            int mouseX = e.X;\n            int mouseY = e.Y;\n            \n            mousePath.AddLine(mouseX,mouseY,mouseX,mouseY);\n        }\n\n        private void panel1_MouseWheel(object sender, System.Windows.Forms.MouseEventArgs e)\n        {\n            // Update the drawing based upon the mouse wheel scrolling.\n      \n            int numberOfTextLinesToMove = e.Delta * SystemInformation.MouseWheelScrollLines / 120;\n            int numberOfPixelsToMove = numberOfTextLinesToMove * fontSize;\n\n            if (numberOfPixelsToMove != 0) {\n                System.Drawing.Drawing2D.Matrix translateMatrix = new  System.Drawing.Drawing2D.Matrix();\n                translateMatrix.Translate(0, numberOfPixelsToMove);\n                mousePath.Transform(translateMatrix);\n            }\n            panel1.Invalidate();\n        }\n        private void panel1_MouseUp(object sender, System.Windows.Forms.MouseEventArgs e) \n        {\n            Point mouseUpLocation = new System.Drawing.Point(e.X, e.Y);\n        \n            // Show the number of clicks in the path graphic.\n            int numberOfClicks = e.Clicks;\n            mousePath.AddString(&quot;    &quot; + numberOfClicks.ToString(), \n                        FontFamily.GenericSerif, (int)FontStyle.Bold, \n                        fontSize, mouseUpLocation, StringFormat.GenericDefault);\n\n            panel1.Invalidate();\n        }\n\n        private void panel1_Paint(object sender, System.Windows.Forms.PaintEventArgs e) \n        {    \n            // Perform the painting of the Panel.\n            e.Graphics.DrawPath(System.Drawing.Pens.DarkRed, mousePath);\n        }\n\n        private void clearButton_Click(object sender, System.EventArgs e)\n        {\n            // Clear the Panel display.\n            mousePath.Dispose();\n            mousePath = new System.Drawing.Drawing2D.GraphicsPath();\n            panel1.Invalidate();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.MouseEvent#1\">Imports System\nImports System.Drawing\nImports System.Windows.Forms\n\nNamespace MouseEvent\n    &#39; Summary description for Form1.\n    Public NotInheritable Class Form1\n        Inherits System.Windows.Forms.Form\n\n        Friend WithEvents panel1 As System.Windows.Forms.Panel\n        Private label1 As System.Windows.Forms.Label\n        Private label2 As System.Windows.Forms.Label\n        Private label3 As System.Windows.Forms.Label\n        Private label4 As System.Windows.Forms.Label\n        Private label5 As System.Windows.Forms.Label\n        Private label6 As System.Windows.Forms.Label\n        Private label7 As System.Windows.Forms.Label\n        Private label8 As System.Windows.Forms.Label\n        Private label9 As System.Windows.Forms.Label\n        Friend WithEvents clearButton As System.Windows.Forms.Button\n        Private mousePath As System.Drawing.Drawing2D.GraphicsPath\n        Private groupBox1 As System.Windows.Forms.GroupBox\n\n        Private fontSize As Integer = 20\n        \n        &lt;System.STAThread()&gt;  _\n        Public Shared Sub Main()\n            System.Windows.Forms.Application.Run(New Form1())\n        End Sub &#39;Main\n\n        Public Sub New()\n\n            mousePath = New System.Drawing.Drawing2D.GraphicsPath()\n\n            Me.panel1 = New System.Windows.Forms.Panel()\n            Me.label1 = New System.Windows.Forms.Label()\n            Me.clearButton = New System.Windows.Forms.Button()\n            Me.label2 = New System.Windows.Forms.Label()\n            Me.label3 = New System.Windows.Forms.Label()\n            Me.label4 = New System.Windows.Forms.Label()\n            Me.label5 = New System.Windows.Forms.Label()\n            Me.label6 = New System.Windows.Forms.Label()\n            Me.label7 = New System.Windows.Forms.Label()\n            Me.label8 = New System.Windows.Forms.Label()\n            Me.label9 = New System.Windows.Forms.Label()\n            Me.groupBox1 = New System.Windows.Forms.GroupBox()\n\n            &#39; Mouse Events Label\n            Me.label1.Location = New System.Drawing.Point(24, 504) \n            Me.label1.Size = New System.Drawing.Size(392, 23) \n            &#39; DoubleClickSize Label\n            Me.label2.AutoSize = True \n            Me.label2.Location = New System.Drawing.Point(24, 48) \n            Me.label2.Size = New System.Drawing.Size(35, 13) \n            &#39; DoubleClickTime Label\n            Me.label3.AutoSize = True \n            Me.label3.Location = New System.Drawing.Point(24, 72) \n            Me.label3.Size = New System.Drawing.Size(35, 13) \n            &#39; MousePresent Label\n            Me.label4.AutoSize = True \n            Me.label4.Location = New System.Drawing.Point(24, 96) \n            Me.label4.Size = New System.Drawing.Size(35, 13) \n            &#39; MouseButtons Label\n            Me.label5.AutoSize = True \n            Me.label5.Location = New System.Drawing.Point(24, 120) \n            Me.label5.Size = New System.Drawing.Size(35, 13) \n            &#39; MouseButtonsSwapped Label\n            Me.label6.AutoSize = True \n            Me.label6.Location = New System.Drawing.Point(320, 48) \n            Me.label6.Size = New System.Drawing.Size(35, 13) \n            &#39; MouseWheelPresent Label\n            Me.label7.AutoSize = True \n            Me.label7.Location = New System.Drawing.Point(320, 72) \n            Me.label7.Size = New System.Drawing.Size(35, 13) \n            &#39; MouseWheelScrollLines Label\n            Me.label8.AutoSize = True \n            Me.label8.Location = New System.Drawing.Point(320, 96) \n            Me.label8.Size = New System.Drawing.Size(35, 13) \n            &#39; NativeMouseWheelSupport Label\n            Me.label9.AutoSize = True \n            Me.label9.Location = New System.Drawing.Point(320, 120) \n            Me.label9.Size = New System.Drawing.Size(35, 13) \n\n            &#39; Mouse Panel\n            Me.panel1.Anchor = System.Windows.Forms.AnchorStyles.Top Or _\n                                    System.Windows.Forms.AnchorStyles.Left Or _\n                                    System.Windows.Forms.AnchorStyles.Right\n            Me.panel1.BackColor = System.Drawing.SystemColors.ControlDark\n            Me.panel1.Location = New System.Drawing.Point(16, 160)\n            Me.panel1.Size = New System.Drawing.Size(664, 320)\n\n            &#39; Clear Button\n            Me.clearButton.Anchor = System.Windows.Forms.AnchorStyles.Top Or _\n                                    System.Windows.Forms.AnchorStyles.Right\n            Me.clearButton.Location = New System.Drawing.Point(592, 504)\n            Me.clearButton.TabIndex = 1\n            Me.clearButton.Text = &quot;Clear&quot;\n\n            &#39; GroupBox\n            Me.groupBox1.Anchor = System.Windows.Forms.AnchorStyles.Top Or _\n                                  System.Windows.Forms.AnchorStyles.Left Or _\n                                  System.Windows.Forms.AnchorStyles.Right\n            Me.groupBox1.Location = New System.Drawing.Point(16, 24)\n            Me.groupBox1.Size = New System.Drawing.Size(664, 128)\n            Me.groupBox1.Text = &quot;System.Windows.Forms.SystemInformation&quot;\n\n            &#39; Set up how the form should be displayed and add the controls to the form.\n            Me.ClientSize = New System.Drawing.Size(696, 534)\n            Me.Controls.AddRange(New System.Windows.Forms.Control() {Me.label9, _\n                            Me.label8, Me.label7, Me.label6, Me.label5, Me.label4, _\n                            Me.label3, Me.label2, Me.clearButton, Me.panel1, Me.label1, Me.groupBox1})\n\n            Me.Text = &quot;Mouse Event Example&quot;\n\n            &#39; Display information about the system mouse.\n            label2.Text = &quot;SystemInformation.DoubleClickSize: &quot; + SystemInformation.DoubleClickSize.ToString()\n            label3.Text = &quot;SystemInformation.DoubleClickTime: &quot; + SystemInformation.DoubleClickTime.ToString()\n            label4.Text = &quot;SystemInformation.MousePresent: &quot; + SystemInformation.MousePresent.ToString()\n            label5.Text = &quot;SystemInformation.MouseButtons: &quot; + SystemInformation.MouseButtons.ToString()\n            label6.Text = &quot;SystemInformation.MouseButtonsSwapped: &quot; + SystemInformation.MouseButtonsSwapped.ToString()\n            label7.Text = &quot;SystemInformation.MouseWheelPresent: &quot; + SystemInformation.MouseWheelPresent.ToString()\n            label8.Text = &quot;SystemInformation.MouseWheelScrollLines: &quot; + SystemInformation.MouseWheelScrollLines.ToString()\n            label9.Text = &quot;SystemInformation.NativeMouseWheelSupport: &quot; + SystemInformation.NativeMouseWheelSupport.ToString()\n        End Sub &#39;New\n\n        Private Sub panel1_MouseDown(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles panel1.MouseDown\n            &#39; Update the mouse path with the mouse information\n            Dim mouseDownLocation As New Point(e.X, e.Y)\n            \n            Dim eventString As String = Nothing\n            Select Case e.Button\n                Case MouseButtons.Left\n                    eventString = &quot;L&quot;\n                Case MouseButtons.Right\n                    eventString = &quot;R&quot;\n                Case MouseButtons.Middle\n                    eventString = &quot;M&quot;\n                Case MouseButtons.XButton1\n                    eventString = &quot;X1&quot;\n                Case MouseButtons.XButton2\n                    eventString = &quot;X2&quot;\n                Case MouseButtons.None:\n                     eventString = Nothing              \n            End Select\n            \n            If (eventString IsNot Nothing) Then\n                mousePath.AddString(eventString, FontFamily.GenericSerif, CInt(FontStyle.Bold), fontSize, mouseDownLocation, StringFormat.GenericDefault)\n            Else\n                mousePath.AddLine(mouseDownLocation, mouseDownLocation)\n            End If\n\n            panel1.Focus()\n            panel1.Invalidate()\n        End Sub \n        \n        Private Sub panel1_MouseEnter(sender As Object, e As System.EventArgs) Handles panel1.MouseEnter\n            &#39; Update the mouse event label to indicate the MouseEnter event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseEnter&quot;\n        End Sub\n        \n        Private Sub panel1_MouseHover(sender As Object, e As System.EventArgs) Handles panel1.MouseHover\n            &#39; Update the mouse event label to indicate the MouseHover event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseHover&quot;\n        End Sub\n        \n        Private Sub panel1_MouseLeave(sender As Object, e As System.EventArgs) Handles panel1.MouseLeave\n            &#39; Update the mouse event label to indicate the MouseLeave event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseLeave&quot;\n        End Sub\n        \n        Private Sub panel1_MouseMove(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles panel1.MouseMove\n            &#39; Update the mouse path that is drawn onto the Panel.\n            Dim mouseX As Integer = e.X\n            Dim mouseY As Integer = e.Y\n            \n            mousePath.AddLine(mouseX, mouseY, mouseX, mouseY)\n        End Sub\n        Private Sub panel1_MouseWheel(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles panel1.MouseWheel\n            &#39; Update the drawing based upon the mouse wheel scrolling.\n            Dim numberOfTextLinesToMove As Integer = CInt(e.Delta * SystemInformation.MouseWheelScrollLines / 120) \n            Dim numberOfPixelsToMove As Integer = numberOfTextLinesToMove * fontSize\n            \n            If numberOfPixelsToMove &lt;&gt; 0 Then\n                Dim translateMatrix As New System.Drawing.Drawing2D.Matrix()\n                translateMatrix.Translate(0, numberOfPixelsToMove)\n                mousePath.Transform(translateMatrix)\n            End If\n\n            panel1.Invalidate()\n        End Sub\n        Private Sub panel1_MouseUp(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles panel1.MouseUp\n            Dim mouseUpLocation As New System.Drawing.Point(e.X, e.Y)\n            \n            &#39; Show the number of clicks in the path graphic.\n            Dim numberOfClicks As Integer = e.Clicks\n            mousePath.AddString(&quot;     &quot; + numberOfClicks.ToString(), _\n                                FontFamily.GenericSerif, CInt(FontStyle.Bold), _\n                                fontSize, mouseUpLocation, StringFormat.GenericDefault)\n\n            panel1.Invalidate()\n        End Sub\n        \n        Private Sub panel1_Paint(sender As Object, e As System.Windows.Forms.PaintEventArgs) Handles panel1.Paint\n            &#39; Perform the painting of the Panel.\n            e.Graphics.DrawPath(System.Drawing.Pens.DarkRed, mousePath)\n        End Sub\n        \n        Private Sub clearButton_Click(sender As Object, e As System.EventArgs) Handles clearButton.Click\n            &#39; Clear the Panel display.\n            mousePath.Dispose()\n            mousePath = New System.Drawing.Drawing2D.GraphicsPath()\n            panel1.Invalidate()\n        End Sub\n        \n    End Class &#39;Form1\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_MouseEnter\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseEnter</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the mouse pointer enters the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler MouseEnter;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Mouse events occur in the following order:  </p>\n<ol>\n<li><p>MouseEnter  </p>\n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseMove\" data-linktype=\"relative-path\">MouseMove</a>  \n</li>\n<li><p><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseHover\" data-linktype=\"relative-path\">MouseHover</a> / <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> / <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseWheel\" data-linktype=\"relative-path\">MouseWheel</a>  </p>\n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseUp\" data-linktype=\"relative-path\">MouseUp</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseLeave\" data-linktype=\"relative-path\">MouseLeave</a>  \n\n</li>\n</ol>\n<div class=\"NOTE\"><h5>Note</h5><p> The following events are not raised for the <a class=\"xref\" href=\"system.windows.forms.tabcontrol\" data-linktype=\"relative-path\">TabControl</a> class unless there is at least one <a class=\"xref\" href=\"system.windows.forms.tabpage\" data-linktype=\"relative-path\">TabPage</a> in the <a class=\"xref\" href=\"system.windows.forms.tabcontrol#System_Windows_Forms_TabControl_TabPages_\" data-linktype=\"relative-path\">TabPages</a> collection: <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Click\" data-linktype=\"relative-path\">Click</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoubleClick\" data-linktype=\"relative-path\">DoubleClick</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseUp\" data-linktype=\"relative-path\">MouseUp</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseHover\" data-linktype=\"relative-path\">MouseHover</a>, MouseEnter, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseLeave\" data-linktype=\"relative-path\">MouseLeave</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseMove\" data-linktype=\"relative-path\">MouseMove</a>. If there is at least one <a class=\"xref\" href=\"system.windows.forms.tabpage\" data-linktype=\"relative-path\">TabPage</a> in the collection, and the user interacts with the tab control&#39;s header (where the <a class=\"xref\" href=\"system.windows.forms.tabpage\" data-linktype=\"relative-path\">TabPage</a> names appear), the <a class=\"xref\" href=\"system.windows.forms.tabcontrol\" data-linktype=\"relative-path\">TabControl</a> raises the appropriate event. However, if the user interaction is within the client area of the tab page, the <a class=\"xref\" href=\"system.windows.forms.tabpage\" data-linktype=\"relative-path\">TabPage</a> raises the appropriate event.  </p>\n</div>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using different mouse events to draw the path of the mouse on a <a class=\"xref\" href=\"system.windows.forms.panel\" data-linktype=\"relative-path\">Panel</a>. A line segment is added to the <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath\" data-linktype=\"relative-path\">GraphicsPath</a> for each <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseMove\" data-linktype=\"relative-path\">MouseMove</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> events that occur. To update the graphics, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invalidate_\" data-linktype=\"relative-path\">Invalidate</a> method is called for the <a class=\"xref\" href=\"system.windows.forms.panel\" data-linktype=\"relative-path\">Panel</a> on each <code>MouseDown</code> and <code>MouseUp</code> event. In addition, the graphic path is scrolled up or down when the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseWheel\" data-linktype=\"relative-path\">MouseWheel</a> event occurs. Additional mouse events, like <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseHover\" data-linktype=\"relative-path\">MouseHover</a>, are identified on screen as well. Also displayed on the screen is additional information about the mouse from the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.MouseEvent#1\">#using &lt;System.dll&gt;\n#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n\nusing namespace System;\nusing namespace System::Drawing;\nusing namespace System::Windows::Forms;\n\nnamespace MouseEvent\n{\n   public ref class Form1: public System::Windows::Forms::Form\n   {\n   private:\n      System::Windows::Forms::Panel^ panel1;\n      System::Windows::Forms::Label ^ label1;\n      System::Windows::Forms::Label ^ label2;\n      System::Windows::Forms::Label ^ label3;\n      System::Windows::Forms::Label ^ label4;\n      System::Windows::Forms::Label ^ label5;\n      System::Windows::Forms::Label ^ label6;\n      System::Windows::Forms::Label ^ label7;\n      System::Windows::Forms::Label ^ label8;\n      System::Windows::Forms::Label ^ label9;\n      System::Windows::Forms::Button^ clearButton;\n      System::Drawing::Drawing2D::GraphicsPath^ mousePath;\n      System::Windows::Forms::GroupBox^ groupBox1;\n      int fontSize;\n\n   public:\n      Form1()\n      {\n         fontSize = 20;\n         mousePath = gcnew System::Drawing::Drawing2D::GraphicsPath;\n         this-&gt;panel1 = gcnew System::Windows::Forms::Panel;\n         this-&gt;label1 = gcnew System::Windows::Forms::Label;\n         this-&gt;clearButton = gcnew System::Windows::Forms::Button;\n         this-&gt;label2 = gcnew System::Windows::Forms::Label;\n         this-&gt;label3 = gcnew System::Windows::Forms::Label;\n         this-&gt;label4 = gcnew System::Windows::Forms::Label;\n         this-&gt;label5 = gcnew System::Windows::Forms::Label;\n         this-&gt;label6 = gcnew System::Windows::Forms::Label;\n         this-&gt;label7 = gcnew System::Windows::Forms::Label;\n         this-&gt;label8 = gcnew System::Windows::Forms::Label;\n         this-&gt;label9 = gcnew System::Windows::Forms::Label;\n         this-&gt;groupBox1 = gcnew System::Windows::Forms::GroupBox;\n         \n         // Mouse Events Label\n         this-&gt;label1-&gt;Location = System::Drawing::Point( 24, 504 );\n         this-&gt;label1-&gt;Size = System::Drawing::Size( 392, 23 );\n         \n         // DoubleClickSize Label\n         this-&gt;label2-&gt;AutoSize = true;\n         this-&gt;label2-&gt;Location = System::Drawing::Point( 24, 48 );\n         this-&gt;label2-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // DoubleClickTime Label\n         this-&gt;label3-&gt;AutoSize = true;\n         this-&gt;label3-&gt;Location = System::Drawing::Point( 24, 72 );\n         this-&gt;label3-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // MousePresent Label\n         this-&gt;label4-&gt;AutoSize = true;\n         this-&gt;label4-&gt;Location = System::Drawing::Point( 24, 96 );\n         this-&gt;label4-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // MouseButtons Label\n         this-&gt;label5-&gt;AutoSize = true;\n         this-&gt;label5-&gt;Location = System::Drawing::Point( 24, 120 );\n         this-&gt;label5-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // MouseButtonsSwapped Label\n         this-&gt;label6-&gt;AutoSize = true;\n         this-&gt;label6-&gt;Location = System::Drawing::Point( 320, 48 );\n         this-&gt;label6-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // MouseWheelPresent Label\n         this-&gt;label7-&gt;AutoSize = true;\n         this-&gt;label7-&gt;Location = System::Drawing::Point( 320, 72 );\n         this-&gt;label7-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // MouseWheelScrollLines Label\n         this-&gt;label8-&gt;AutoSize = true;\n         this-&gt;label8-&gt;Location = System::Drawing::Point( 320, 96 );\n         this-&gt;label8-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // NativeMouseWheelSupport Label\n         this-&gt;label9-&gt;AutoSize = true;\n         this-&gt;label9-&gt;Location = System::Drawing::Point( 320, 120 );\n         this-&gt;label9-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // Mouse Panel\n         this-&gt;panel1-&gt;Anchor = static_cast&lt;System::Windows::Forms::AnchorStyles&gt;(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n         this-&gt;panel1-&gt;BackColor = System::Drawing::SystemColors::ControlDark;\n         this-&gt;panel1-&gt;Location = System::Drawing::Point( 16, 160 );\n         this-&gt;panel1-&gt;Size = System::Drawing::Size( 664, 320 );\n         this-&gt;panel1-&gt;MouseUp += gcnew System::Windows::Forms::MouseEventHandler( this, &amp;Form1::panel1_MouseUp );\n         this-&gt;panel1-&gt;Paint += gcnew System::Windows::Forms::PaintEventHandler( this, &amp;Form1::panel1_Paint );\n         this-&gt;panel1-&gt;MouseEnter += gcnew System::EventHandler( this, &amp;Form1::panel1_MouseEnter );\n         this-&gt;panel1-&gt;MouseHover += gcnew System::EventHandler( this, &amp;Form1::panel1_MouseHover );\n         this-&gt;panel1-&gt;MouseMove += gcnew System::Windows::Forms::MouseEventHandler( this, &amp;Form1::panel1_MouseMove );\n         this-&gt;panel1-&gt;MouseLeave += gcnew System::EventHandler( this, &amp;Form1::panel1_MouseLeave );\n         this-&gt;panel1-&gt;MouseDown += gcnew System::Windows::Forms::MouseEventHandler( this, &amp;Form1::panel1_MouseDown );\n         this-&gt;panel1-&gt;MouseWheel += gcnew System::Windows::Forms::MouseEventHandler( this, &amp;Form1::panel1_MouseWheel );\n         \n         // Clear Button\n         this-&gt;clearButton-&gt;Anchor = static_cast&lt;System::Windows::Forms::AnchorStyles&gt;(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Right);\n         this-&gt;clearButton-&gt;Location = System::Drawing::Point( 592, 504 );\n         this-&gt;clearButton-&gt;TabIndex = 1;\n         this-&gt;clearButton-&gt;Text = &quot;Clear&quot;;\n         this-&gt;clearButton-&gt;Click += gcnew System::EventHandler( this, &amp;Form1::clearButton_Click );\n         \n         // GroupBox\n         this-&gt;groupBox1-&gt;Anchor = static_cast&lt;System::Windows::Forms::AnchorStyles&gt;(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n         this-&gt;groupBox1-&gt;Location = System::Drawing::Point( 16, 24 );\n         this-&gt;groupBox1-&gt;Size = System::Drawing::Size( 664, 128 );\n         this-&gt;groupBox1-&gt;Text = &quot;System::Windows::Forms::SystemInformation&quot;;\n         \n         // Set up how the form should be displayed and add the controls to the form.\n         this-&gt;ClientSize = System::Drawing::Size( 696, 534 );\n         array&lt;System::Windows::Forms::Control^&gt;^temp0 = {this-&gt;label9,this-&gt;label8,this-&gt;label7,this-&gt;label6,this-&gt;label5,this-&gt;label4,this-&gt;label3,this-&gt;label2,this-&gt;clearButton,this-&gt;panel1,this-&gt;label1,this-&gt;groupBox1};\n         this-&gt;Controls-&gt;AddRange( temp0 );\n         this-&gt;Text = &quot;Mouse Event Example&quot;;\n         \n         // Displays information about the system mouse.\n         label2-&gt;Text = &quot;SystemInformation::DoubleClickSize: {0}&quot;,SystemInformation::DoubleClickSize;\n         label3-&gt;Text = &quot;SystemInformation::DoubleClickTime: {0}&quot;,SystemInformation::DoubleClickTime;\n         label4-&gt;Text = &quot;SystemInformation::MousePresent: {0}&quot;,SystemInformation::MousePresent;\n         label5-&gt;Text = &quot;SystemInformation::MouseButtons: {0}&quot;,SystemInformation::MouseButtons;\n         label6-&gt;Text = &quot;SystemInformation::MouseButtonsSwapped: {0}&quot;,SystemInformation::MouseButtonsSwapped;\n         label7-&gt;Text = &quot;SystemInformation::MouseWheelPresent: {0}&quot;,SystemInformation::MouseWheelPresent;\n         label8-&gt;Text = &quot;SystemInformation::MouseWheelScrollLines: {0}&quot;,SystemInformation::MouseWheelScrollLines;\n         label9-&gt;Text = &quot;SystemInformation::NativeMouseWheelSupport: {0}&quot;,SystemInformation::NativeMouseWheelSupport;\n      }\n\n   private:\n      void panel1_MouseDown( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n      {\n         // Update the mouse path with the mouse information\n         Point mouseDownLocation = Point(e-&gt;X,e-&gt;Y);\n         String^ eventString = nullptr;\n         switch ( e-&gt;Button )\n         {\n            case ::MouseButtons::Left:\n               eventString = &quot;L&quot;;\n               break;\n\n            case ::MouseButtons::Right:\n               eventString = &quot;R&quot;;\n               break;\n\n            case ::MouseButtons::Middle:\n               eventString = &quot;M&quot;;\n               break;\n\n            case ::MouseButtons::XButton1:\n               eventString = &quot;X1&quot;;\n               break;\n\n            case ::MouseButtons::XButton2:\n               eventString = &quot;X2&quot;;\n               break;\n\n            case ::MouseButtons::None:\n            default:\n               break;\n         }\n         if ( eventString != nullptr )\n         {\n            mousePath-&gt;AddString( eventString, FontFamily::GenericSerif, (int)FontStyle::Bold, (float)fontSize, mouseDownLocation, StringFormat::GenericDefault );\n         }\n         else\n         {\n            mousePath-&gt;AddLine( mouseDownLocation, mouseDownLocation );\n         }\n\n         panel1-&gt;Focus();\n         panel1-&gt;Invalidate();\n      }\n\n      void panel1_MouseEnter( Object^ sender, System::EventArgs^ /*e*/ )\n      {\n         \n         // Update the mouse event label to indicate the MouseEnter event occurred.\n         label1-&gt;Text = String::Concat( sender-&gt;GetType(), &quot;: MouseEnter&quot; );\n      }\n\n      void panel1_MouseHover( Object^ sender, System::EventArgs^ /*e*/ )\n      {\n         \n         // Update the mouse event label to indicate the MouseHover event occurred.\n         label1-&gt;Text = String::Concat( sender-&gt;GetType(), &quot;: MouseHover&quot; );\n      }\n\n      void panel1_MouseLeave( Object^ sender, System::EventArgs^ /*e*/ )\n      {\n         \n         // Update the mouse event label to indicate the MouseLeave event occurred.\n         label1-&gt;Text = String::Concat( sender-&gt;GetType(), &quot;: MouseLeave&quot; );\n      }\n\n      void panel1_MouseMove( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n      {\n         // Update the mouse path that is drawn onto the Panel.\n         int mouseX = e-&gt;X;\n         int mouseY = e-&gt;Y;\n         mousePath-&gt;AddLine( mouseX, mouseY, mouseX, mouseY );\n      }\n\n      void panel1_MouseWheel( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n      {\n         // Update the drawing based upon the mouse wheel scrolling.\n         int numberOfTextLinesToMove = e-&gt;Delta * SystemInformation::MouseWheelScrollLines / 120;\n         int numberOfPixelsToMove = numberOfTextLinesToMove * fontSize;\n         if ( numberOfPixelsToMove != 0 )\n         {\n            System::Drawing::Drawing2D::Matrix^ translateMatrix = gcnew System::Drawing::Drawing2D::Matrix;\n            translateMatrix-&gt;Translate( 0, (float)numberOfPixelsToMove );\n            mousePath-&gt;Transform(translateMatrix);\n         }\n\n         panel1-&gt;Invalidate();\n      }\n\n      void panel1_MouseUp( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n      {\n         Point mouseUpLocation = System::Drawing::Point( e-&gt;X, e-&gt;Y );\n         \n         // Show the number of clicks in the path graphic.\n         int numberOfClicks = e-&gt;Clicks;\n         mousePath-&gt;AddString( String::Format( &quot;   {0}&quot;, numberOfClicks ), FontFamily::GenericSerif, (int)FontStyle::Bold, (float)fontSize, mouseUpLocation, StringFormat::GenericDefault );\n         panel1-&gt;Invalidate();\n      }\n\n      void panel1_Paint( Object^ /*sender*/, System::Windows::Forms::PaintEventArgs^ e )\n      {\n         // Perform the painting of the Panel.\n         e-&gt;Graphics-&gt;DrawPath( System::Drawing::Pens::DarkRed, mousePath );\n      }\n\n      void clearButton_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n      {\n         // Clear the Panel display.\n         delete mousePath;\n         mousePath = gcnew System::Drawing::Drawing2D::GraphicsPath;\n         panel1-&gt;Invalidate();\n      }\n   };\n}\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew MouseEvent::Form1 );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.MouseEvent#1\">using System;\nusing System.Drawing;\nusing System.Windows.Forms;\n\nnamespace MouseEvent\n{\n    public class Form1 : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.Panel panel1;\n        private System.Windows.Forms.Label label1;\n        private System.Windows.Forms.Label label2;\n        private System.Windows.Forms.Label label3;\n        private System.Windows.Forms.Label label4;\n        private System.Windows.Forms.Label label5;\n        private System.Windows.Forms.Label label6;\n        private System.Windows.Forms.Label label7;\n        private System.Windows.Forms.Label label8;\n        private System.Windows.Forms.Label label9;\n        private System.Windows.Forms.Button clearButton;\n        private System.Drawing.Drawing2D.GraphicsPath mousePath;\n        private System.Windows.Forms.GroupBox groupBox1;\n\n        private int fontSize = 20;        \n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new Form1());\n        }\n\n        public Form1()\n        {            \n            mousePath = new System.Drawing.Drawing2D.GraphicsPath();\n\n            this.panel1 = new System.Windows.Forms.Panel();\n            this.label1 = new System.Windows.Forms.Label();\n            this.clearButton = new System.Windows.Forms.Button();\n            this.label2 = new System.Windows.Forms.Label();\n            this.label3 = new System.Windows.Forms.Label();\n            this.label4 = new System.Windows.Forms.Label();\n            this.label5 = new System.Windows.Forms.Label();\n            this.label6 = new System.Windows.Forms.Label();\n            this.label7 = new System.Windows.Forms.Label();\n            this.label8 = new System.Windows.Forms.Label();\n            this.label9 = new System.Windows.Forms.Label();\n            this.groupBox1 = new System.Windows.Forms.GroupBox();\n\n            // Mouse Events Label\n            this.label1.Location = new System.Drawing.Point(24, 504);\n            this.label1.Size = new System.Drawing.Size(392, 23);\n            // DoubleClickSize Label\n            this.label2.AutoSize = true;\n            this.label2.Location = new System.Drawing.Point(24, 48);\n            this.label2.Size = new System.Drawing.Size(35, 13);\n            // DoubleClickTime Label\n            this.label3.AutoSize = true;\n            this.label3.Location = new System.Drawing.Point(24, 72);\n            this.label3.Size = new System.Drawing.Size(35, 13);\n            // MousePresent Label\n            this.label4.AutoSize = true;\n            this.label4.Location = new System.Drawing.Point(24, 96);\n            this.label4.Size = new System.Drawing.Size(35, 13);\n            // MouseButtons Label\n            this.label5.AutoSize = true;\n            this.label5.Location = new System.Drawing.Point(24, 120);\n            this.label5.Size = new System.Drawing.Size(35, 13);\n            // MouseButtonsSwapped Label\n            this.label6.AutoSize = true;\n            this.label6.Location = new System.Drawing.Point(320, 48);\n            this.label6.Size = new System.Drawing.Size(35, 13);\n            // MouseWheelPresent Label\n            this.label7.AutoSize = true;\n            this.label7.Location = new System.Drawing.Point(320, 72);\n            this.label7.Size = new System.Drawing.Size(35, 13);\n            // MouseWheelScrollLines Label\n            this.label8.AutoSize = true;\n            this.label8.Location = new System.Drawing.Point(320, 96);\n            this.label8.Size = new System.Drawing.Size(35, 13);\n            // NativeMouseWheelSupport Label\n            this.label9.AutoSize = true;\n            this.label9.Location = new System.Drawing.Point(320, 120);\n            this.label9.Size = new System.Drawing.Size(35, 13);\n\n            // Mouse Panel\n            this.panel1.Anchor = ((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) \n                | System.Windows.Forms.AnchorStyles.Right);\n            this.panel1.BackColor = System.Drawing.SystemColors.ControlDark;\n            this.panel1.Location = new System.Drawing.Point(16, 160);\n            this.panel1.Size = new System.Drawing.Size(664, 320);\n            this.panel1.MouseUp += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseUp);\n            this.panel1.Paint += new System.Windows.Forms.PaintEventHandler(this.panel1_Paint);\n            this.panel1.MouseEnter += new System.EventHandler(this.panel1_MouseEnter);\n            this.panel1.MouseHover += new System.EventHandler(this.panel1_MouseHover);\n            this.panel1.MouseMove += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseMove);\n            this.panel1.MouseLeave += new System.EventHandler(this.panel1_MouseLeave);\n            this.panel1.MouseDown += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseDown);\n            this.panel1.MouseWheel += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseWheel);\n\n            // Clear Button\n            this.clearButton.Anchor = (System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right);\n            this.clearButton.Location = new System.Drawing.Point(592, 504);\n            this.clearButton.TabIndex = 1;\n            this.clearButton.Text = &quot;Clear&quot;;\n            this.clearButton.Click += new System.EventHandler(this.clearButton_Click);\n            \n            // GroupBox\n            this.groupBox1.Anchor = ((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) \n                | System.Windows.Forms.AnchorStyles.Right);\n            this.groupBox1.Location = new System.Drawing.Point(16, 24);\n            this.groupBox1.Size = new System.Drawing.Size(664, 128);\n            this.groupBox1.Text = &quot;System.Windows.Forms.SystemInformation&quot;;\n\n            // Set up how the form should be displayed and add the controls to the form.\n            this.ClientSize = new System.Drawing.Size(696, 534);\n            this.Controls.AddRange(new System.Windows.Forms.Control[] {\n                                        this.label9,this.label8,this.label7,this.label6,\n                                        this.label5,this.label4,this.label3,this.label2,\n                                        this.clearButton,this.panel1,this.label1,this.groupBox1});\n            this.Text = &quot;Mouse Event Example&quot;;\n\n            // Displays information about the system mouse.\n            label2.Text = &quot;SystemInformation.DoubleClickSize: &quot; + SystemInformation.DoubleClickSize.ToString();\n            label3.Text = &quot;SystemInformation.DoubleClickTime: &quot; + SystemInformation.DoubleClickTime.ToString();\n            label4.Text = &quot;SystemInformation.MousePresent: &quot; + SystemInformation.MousePresent.ToString();\n            label5.Text = &quot;SystemInformation.MouseButtons: &quot; + SystemInformation.MouseButtons.ToString();\n            label6.Text = &quot;SystemInformation.MouseButtonsSwapped: &quot; + SystemInformation.MouseButtonsSwapped.ToString();\n            label7.Text = &quot;SystemInformation.MouseWheelPresent: &quot; + SystemInformation.MouseWheelPresent.ToString();\n            label8.Text = &quot;SystemInformation.MouseWheelScrollLines: &quot; + SystemInformation.MouseWheelScrollLines.ToString();\n            label9.Text = &quot;SystemInformation.NativeMouseWheelSupport: &quot; + SystemInformation.NativeMouseWheelSupport.ToString();\n\n        }\n\n        private void panel1_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e) \n        {\n            // Update the mouse path with the mouse information\n            Point mouseDownLocation = new Point(e.X, e.Y);\n\n            string eventString = null;\n            switch (e.Button) {\n                case MouseButtons.Left:\n                    eventString = &quot;L&quot;;\n                    break;\n                case MouseButtons.Right:\n                    eventString = &quot;R&quot;;\n                    break;\n                case MouseButtons.Middle:\n                    eventString = &quot;M&quot;;\n                    break;\n                case MouseButtons.XButton1:\n                    eventString = &quot;X1&quot;;\n                    break;\n                case MouseButtons.XButton2:\n                    eventString = &quot;X2&quot;;\n                    break;\n                case MouseButtons.None:\n                default:\n                    break;\n            }\n\n            if (eventString != null) \n            {\n                mousePath.AddString(eventString, FontFamily.GenericSerif, (int)FontStyle.Bold, fontSize, mouseDownLocation, StringFormat.GenericDefault);\n            }\n            else \n            {\n                mousePath.AddLine(mouseDownLocation,mouseDownLocation);\n            }\n            panel1.Focus();\n            panel1.Invalidate();\n        }\n\n        private void panel1_MouseEnter(object sender, System.EventArgs e) \n        {\n            // Update the mouse event label to indicate the MouseEnter event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseEnter&quot;;\n        }\n\n        private void panel1_MouseHover(object sender, System.EventArgs e) \n        {\n            // Update the mouse event label to indicate the MouseHover event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseHover&quot;;\n        }\n\n        private void panel1_MouseLeave(object sender, System.EventArgs e) \n        {\n            // Update the mouse event label to indicate the MouseLeave event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseLeave&quot;;\n        }\n\n        private void panel1_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)\n        {\n            // Update the mouse path that is drawn onto the Panel.\n            int mouseX = e.X;\n            int mouseY = e.Y;\n            \n            mousePath.AddLine(mouseX,mouseY,mouseX,mouseY);\n        }\n\n        private void panel1_MouseWheel(object sender, System.Windows.Forms.MouseEventArgs e)\n        {\n            // Update the drawing based upon the mouse wheel scrolling.\n      \n            int numberOfTextLinesToMove = e.Delta * SystemInformation.MouseWheelScrollLines / 120;\n            int numberOfPixelsToMove = numberOfTextLinesToMove * fontSize;\n\n            if (numberOfPixelsToMove != 0) {\n                System.Drawing.Drawing2D.Matrix translateMatrix = new  System.Drawing.Drawing2D.Matrix();\n                translateMatrix.Translate(0, numberOfPixelsToMove);\n                mousePath.Transform(translateMatrix);\n            }\n            panel1.Invalidate();\n        }\n        private void panel1_MouseUp(object sender, System.Windows.Forms.MouseEventArgs e) \n        {\n            Point mouseUpLocation = new System.Drawing.Point(e.X, e.Y);\n        \n            // Show the number of clicks in the path graphic.\n            int numberOfClicks = e.Clicks;\n            mousePath.AddString(&quot;    &quot; + numberOfClicks.ToString(), \n                        FontFamily.GenericSerif, (int)FontStyle.Bold, \n                        fontSize, mouseUpLocation, StringFormat.GenericDefault);\n\n            panel1.Invalidate();\n        }\n\n        private void panel1_Paint(object sender, System.Windows.Forms.PaintEventArgs e) \n        {    \n            // Perform the painting of the Panel.\n            e.Graphics.DrawPath(System.Drawing.Pens.DarkRed, mousePath);\n        }\n\n        private void clearButton_Click(object sender, System.EventArgs e)\n        {\n            // Clear the Panel display.\n            mousePath.Dispose();\n            mousePath = new System.Drawing.Drawing2D.GraphicsPath();\n            panel1.Invalidate();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.MouseEvent#1\">Imports System\nImports System.Drawing\nImports System.Windows.Forms\n\nNamespace MouseEvent\n    &#39; Summary description for Form1.\n    Public NotInheritable Class Form1\n        Inherits System.Windows.Forms.Form\n\n        Friend WithEvents panel1 As System.Windows.Forms.Panel\n        Private label1 As System.Windows.Forms.Label\n        Private label2 As System.Windows.Forms.Label\n        Private label3 As System.Windows.Forms.Label\n        Private label4 As System.Windows.Forms.Label\n        Private label5 As System.Windows.Forms.Label\n        Private label6 As System.Windows.Forms.Label\n        Private label7 As System.Windows.Forms.Label\n        Private label8 As System.Windows.Forms.Label\n        Private label9 As System.Windows.Forms.Label\n        Friend WithEvents clearButton As System.Windows.Forms.Button\n        Private mousePath As System.Drawing.Drawing2D.GraphicsPath\n        Private groupBox1 As System.Windows.Forms.GroupBox\n\n        Private fontSize As Integer = 20\n        \n        &lt;System.STAThread()&gt;  _\n        Public Shared Sub Main()\n            System.Windows.Forms.Application.Run(New Form1())\n        End Sub &#39;Main\n\n        Public Sub New()\n\n            mousePath = New System.Drawing.Drawing2D.GraphicsPath()\n\n            Me.panel1 = New System.Windows.Forms.Panel()\n            Me.label1 = New System.Windows.Forms.Label()\n            Me.clearButton = New System.Windows.Forms.Button()\n            Me.label2 = New System.Windows.Forms.Label()\n            Me.label3 = New System.Windows.Forms.Label()\n            Me.label4 = New System.Windows.Forms.Label()\n            Me.label5 = New System.Windows.Forms.Label()\n            Me.label6 = New System.Windows.Forms.Label()\n            Me.label7 = New System.Windows.Forms.Label()\n            Me.label8 = New System.Windows.Forms.Label()\n            Me.label9 = New System.Windows.Forms.Label()\n            Me.groupBox1 = New System.Windows.Forms.GroupBox()\n\n            &#39; Mouse Events Label\n            Me.label1.Location = New System.Drawing.Point(24, 504) \n            Me.label1.Size = New System.Drawing.Size(392, 23) \n            &#39; DoubleClickSize Label\n            Me.label2.AutoSize = True \n            Me.label2.Location = New System.Drawing.Point(24, 48) \n            Me.label2.Size = New System.Drawing.Size(35, 13) \n            &#39; DoubleClickTime Label\n            Me.label3.AutoSize = True \n            Me.label3.Location = New System.Drawing.Point(24, 72) \n            Me.label3.Size = New System.Drawing.Size(35, 13) \n            &#39; MousePresent Label\n            Me.label4.AutoSize = True \n            Me.label4.Location = New System.Drawing.Point(24, 96) \n            Me.label4.Size = New System.Drawing.Size(35, 13) \n            &#39; MouseButtons Label\n            Me.label5.AutoSize = True \n            Me.label5.Location = New System.Drawing.Point(24, 120) \n            Me.label5.Size = New System.Drawing.Size(35, 13) \n            &#39; MouseButtonsSwapped Label\n            Me.label6.AutoSize = True \n            Me.label6.Location = New System.Drawing.Point(320, 48) \n            Me.label6.Size = New System.Drawing.Size(35, 13) \n            &#39; MouseWheelPresent Label\n            Me.label7.AutoSize = True \n            Me.label7.Location = New System.Drawing.Point(320, 72) \n            Me.label7.Size = New System.Drawing.Size(35, 13) \n            &#39; MouseWheelScrollLines Label\n            Me.label8.AutoSize = True \n            Me.label8.Location = New System.Drawing.Point(320, 96) \n            Me.label8.Size = New System.Drawing.Size(35, 13) \n            &#39; NativeMouseWheelSupport Label\n            Me.label9.AutoSize = True \n            Me.label9.Location = New System.Drawing.Point(320, 120) \n            Me.label9.Size = New System.Drawing.Size(35, 13) \n\n            &#39; Mouse Panel\n            Me.panel1.Anchor = System.Windows.Forms.AnchorStyles.Top Or _\n                                    System.Windows.Forms.AnchorStyles.Left Or _\n                                    System.Windows.Forms.AnchorStyles.Right\n            Me.panel1.BackColor = System.Drawing.SystemColors.ControlDark\n            Me.panel1.Location = New System.Drawing.Point(16, 160)\n            Me.panel1.Size = New System.Drawing.Size(664, 320)\n\n            &#39; Clear Button\n            Me.clearButton.Anchor = System.Windows.Forms.AnchorStyles.Top Or _\n                                    System.Windows.Forms.AnchorStyles.Right\n            Me.clearButton.Location = New System.Drawing.Point(592, 504)\n            Me.clearButton.TabIndex = 1\n            Me.clearButton.Text = &quot;Clear&quot;\n\n            &#39; GroupBox\n            Me.groupBox1.Anchor = System.Windows.Forms.AnchorStyles.Top Or _\n                                  System.Windows.Forms.AnchorStyles.Left Or _\n                                  System.Windows.Forms.AnchorStyles.Right\n            Me.groupBox1.Location = New System.Drawing.Point(16, 24)\n            Me.groupBox1.Size = New System.Drawing.Size(664, 128)\n            Me.groupBox1.Text = &quot;System.Windows.Forms.SystemInformation&quot;\n\n            &#39; Set up how the form should be displayed and add the controls to the form.\n            Me.ClientSize = New System.Drawing.Size(696, 534)\n            Me.Controls.AddRange(New System.Windows.Forms.Control() {Me.label9, _\n                            Me.label8, Me.label7, Me.label6, Me.label5, Me.label4, _\n                            Me.label3, Me.label2, Me.clearButton, Me.panel1, Me.label1, Me.groupBox1})\n\n            Me.Text = &quot;Mouse Event Example&quot;\n\n            &#39; Display information about the system mouse.\n            label2.Text = &quot;SystemInformation.DoubleClickSize: &quot; + SystemInformation.DoubleClickSize.ToString()\n            label3.Text = &quot;SystemInformation.DoubleClickTime: &quot; + SystemInformation.DoubleClickTime.ToString()\n            label4.Text = &quot;SystemInformation.MousePresent: &quot; + SystemInformation.MousePresent.ToString()\n            label5.Text = &quot;SystemInformation.MouseButtons: &quot; + SystemInformation.MouseButtons.ToString()\n            label6.Text = &quot;SystemInformation.MouseButtonsSwapped: &quot; + SystemInformation.MouseButtonsSwapped.ToString()\n            label7.Text = &quot;SystemInformation.MouseWheelPresent: &quot; + SystemInformation.MouseWheelPresent.ToString()\n            label8.Text = &quot;SystemInformation.MouseWheelScrollLines: &quot; + SystemInformation.MouseWheelScrollLines.ToString()\n            label9.Text = &quot;SystemInformation.NativeMouseWheelSupport: &quot; + SystemInformation.NativeMouseWheelSupport.ToString()\n        End Sub &#39;New\n\n        Private Sub panel1_MouseDown(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles panel1.MouseDown\n            &#39; Update the mouse path with the mouse information\n            Dim mouseDownLocation As New Point(e.X, e.Y)\n            \n            Dim eventString As String = Nothing\n            Select Case e.Button\n                Case MouseButtons.Left\n                    eventString = &quot;L&quot;\n                Case MouseButtons.Right\n                    eventString = &quot;R&quot;\n                Case MouseButtons.Middle\n                    eventString = &quot;M&quot;\n                Case MouseButtons.XButton1\n                    eventString = &quot;X1&quot;\n                Case MouseButtons.XButton2\n                    eventString = &quot;X2&quot;\n                Case MouseButtons.None:\n                     eventString = Nothing              \n            End Select\n            \n            If (eventString IsNot Nothing) Then\n                mousePath.AddString(eventString, FontFamily.GenericSerif, CInt(FontStyle.Bold), fontSize, mouseDownLocation, StringFormat.GenericDefault)\n            Else\n                mousePath.AddLine(mouseDownLocation, mouseDownLocation)\n            End If\n\n            panel1.Focus()\n            panel1.Invalidate()\n        End Sub \n        \n        Private Sub panel1_MouseEnter(sender As Object, e As System.EventArgs) Handles panel1.MouseEnter\n            &#39; Update the mouse event label to indicate the MouseEnter event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseEnter&quot;\n        End Sub\n        \n        Private Sub panel1_MouseHover(sender As Object, e As System.EventArgs) Handles panel1.MouseHover\n            &#39; Update the mouse event label to indicate the MouseHover event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseHover&quot;\n        End Sub\n        \n        Private Sub panel1_MouseLeave(sender As Object, e As System.EventArgs) Handles panel1.MouseLeave\n            &#39; Update the mouse event label to indicate the MouseLeave event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseLeave&quot;\n        End Sub\n        \n        Private Sub panel1_MouseMove(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles panel1.MouseMove\n            &#39; Update the mouse path that is drawn onto the Panel.\n            Dim mouseX As Integer = e.X\n            Dim mouseY As Integer = e.Y\n            \n            mousePath.AddLine(mouseX, mouseY, mouseX, mouseY)\n        End Sub\n        Private Sub panel1_MouseWheel(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles panel1.MouseWheel\n            &#39; Update the drawing based upon the mouse wheel scrolling.\n            Dim numberOfTextLinesToMove As Integer = CInt(e.Delta * SystemInformation.MouseWheelScrollLines / 120) \n            Dim numberOfPixelsToMove As Integer = numberOfTextLinesToMove * fontSize\n            \n            If numberOfPixelsToMove &lt;&gt; 0 Then\n                Dim translateMatrix As New System.Drawing.Drawing2D.Matrix()\n                translateMatrix.Translate(0, numberOfPixelsToMove)\n                mousePath.Transform(translateMatrix)\n            End If\n\n            panel1.Invalidate()\n        End Sub\n        Private Sub panel1_MouseUp(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles panel1.MouseUp\n            Dim mouseUpLocation As New System.Drawing.Point(e.X, e.Y)\n            \n            &#39; Show the number of clicks in the path graphic.\n            Dim numberOfClicks As Integer = e.Clicks\n            mousePath.AddString(&quot;     &quot; + numberOfClicks.ToString(), _\n                                FontFamily.GenericSerif, CInt(FontStyle.Bold), _\n                                fontSize, mouseUpLocation, StringFormat.GenericDefault)\n\n            panel1.Invalidate()\n        End Sub\n        \n        Private Sub panel1_Paint(sender As Object, e As System.Windows.Forms.PaintEventArgs) Handles panel1.Paint\n            &#39; Perform the painting of the Panel.\n            e.Graphics.DrawPath(System.Drawing.Pens.DarkRed, mousePath)\n        End Sub\n        \n        Private Sub clearButton_Click(sender As Object, e As System.EventArgs) Handles clearButton.Click\n            &#39; Clear the Panel display.\n            mousePath.Dispose()\n            mousePath = New System.Drawing.Drawing2D.GraphicsPath()\n            panel1.Invalidate()\n        End Sub\n        \n    End Class &#39;Form1\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_MouseHover\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseHover</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the mouse pointer rests on the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler MouseHover;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A typical use of MouseHover is to display a tool tip when the mouse pauses on a control within a specified area around the control (the &quot;hover rectangle&quot;). The pause required for this event to be raised is specified in milliseconds by the <a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_MouseHoverTime_\" data-linktype=\"relative-path\">MouseHoverTime</a> property.  </p>\n<p> The MouseHover event is defined and detected in connection with the <a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_MouseHoverSize_\" data-linktype=\"relative-path\">MouseHoverSize</a> and <a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_MouseHoverTime_\" data-linktype=\"relative-path\">MouseHoverTime</a> properties.  </p>\n<p> Mouse events occur in the following order:  </p>\n<ol>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseEnter\" data-linktype=\"relative-path\">MouseEnter</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseMove\" data-linktype=\"relative-path\">MouseMove</a>  \n</li>\n<li><p>MouseHover / <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> / <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseWheel\" data-linktype=\"relative-path\">MouseWheel</a>  </p>\n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseUp\" data-linktype=\"relative-path\">MouseUp</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseLeave\" data-linktype=\"relative-path\">MouseLeave</a>  \n\n</li>\n</ol>\n<div class=\"NOTE\"><h5>Note</h5><p> The following events are not raised for the <a class=\"xref\" href=\"system.windows.forms.tabcontrol\" data-linktype=\"relative-path\">TabControl</a> class unless there is at least one <a class=\"xref\" href=\"system.windows.forms.tabpage\" data-linktype=\"relative-path\">TabPage</a> in the <a class=\"xref\" href=\"system.windows.forms.tabcontrol#System_Windows_Forms_TabControl_TabPages_\" data-linktype=\"relative-path\">TabPages</a> collection: <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Click\" data-linktype=\"relative-path\">Click</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoubleClick\" data-linktype=\"relative-path\">DoubleClick</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseUp\" data-linktype=\"relative-path\">MouseUp</a>, MouseHover, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseEnter\" data-linktype=\"relative-path\">MouseEnter</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseLeave\" data-linktype=\"relative-path\">MouseLeave</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseMove\" data-linktype=\"relative-path\">MouseMove</a>. If there is at least one <a class=\"xref\" href=\"system.windows.forms.tabpage\" data-linktype=\"relative-path\">TabPage</a> in the collection, and the user interacts with the tab control&#39;s header (where the <a class=\"xref\" href=\"system.windows.forms.tabpage\" data-linktype=\"relative-path\">TabPage</a> names appear), the <a class=\"xref\" href=\"system.windows.forms.tabcontrol\" data-linktype=\"relative-path\">TabControl</a> raises the appropriate event. However, if the user interaction is within the client area of the tab page, the <a class=\"xref\" href=\"system.windows.forms.tabpage\" data-linktype=\"relative-path\">TabPage</a> raises the appropriate event.  </p>\n</div>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using different mouse events to draw the path of the mouse on a <a class=\"xref\" href=\"system.windows.forms.panel\" data-linktype=\"relative-path\">Panel</a>. A line segment is added to the <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath\" data-linktype=\"relative-path\">GraphicsPath</a> for each <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseMove\" data-linktype=\"relative-path\">MouseMove</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> events that occur. To update the graphics, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invalidate_\" data-linktype=\"relative-path\">Invalidate</a> method is called for the <a class=\"xref\" href=\"system.windows.forms.panel\" data-linktype=\"relative-path\">Panel</a> on each <code>MouseDown</code> and <code>MouseUp</code> event. In addition, the graphic path is scrolled up or down when the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseWheel\" data-linktype=\"relative-path\">MouseWheel</a> event occurs. Additional mouse events, like MouseHover, are identified on screen as well. Also displayed on the screen is additional information about the mouse from the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.MouseEvent#1\">#using &lt;System.dll&gt;\n#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n\nusing namespace System;\nusing namespace System::Drawing;\nusing namespace System::Windows::Forms;\n\nnamespace MouseEvent\n{\n   public ref class Form1: public System::Windows::Forms::Form\n   {\n   private:\n      System::Windows::Forms::Panel^ panel1;\n      System::Windows::Forms::Label ^ label1;\n      System::Windows::Forms::Label ^ label2;\n      System::Windows::Forms::Label ^ label3;\n      System::Windows::Forms::Label ^ label4;\n      System::Windows::Forms::Label ^ label5;\n      System::Windows::Forms::Label ^ label6;\n      System::Windows::Forms::Label ^ label7;\n      System::Windows::Forms::Label ^ label8;\n      System::Windows::Forms::Label ^ label9;\n      System::Windows::Forms::Button^ clearButton;\n      System::Drawing::Drawing2D::GraphicsPath^ mousePath;\n      System::Windows::Forms::GroupBox^ groupBox1;\n      int fontSize;\n\n   public:\n      Form1()\n      {\n         fontSize = 20;\n         mousePath = gcnew System::Drawing::Drawing2D::GraphicsPath;\n         this-&gt;panel1 = gcnew System::Windows::Forms::Panel;\n         this-&gt;label1 = gcnew System::Windows::Forms::Label;\n         this-&gt;clearButton = gcnew System::Windows::Forms::Button;\n         this-&gt;label2 = gcnew System::Windows::Forms::Label;\n         this-&gt;label3 = gcnew System::Windows::Forms::Label;\n         this-&gt;label4 = gcnew System::Windows::Forms::Label;\n         this-&gt;label5 = gcnew System::Windows::Forms::Label;\n         this-&gt;label6 = gcnew System::Windows::Forms::Label;\n         this-&gt;label7 = gcnew System::Windows::Forms::Label;\n         this-&gt;label8 = gcnew System::Windows::Forms::Label;\n         this-&gt;label9 = gcnew System::Windows::Forms::Label;\n         this-&gt;groupBox1 = gcnew System::Windows::Forms::GroupBox;\n         \n         // Mouse Events Label\n         this-&gt;label1-&gt;Location = System::Drawing::Point( 24, 504 );\n         this-&gt;label1-&gt;Size = System::Drawing::Size( 392, 23 );\n         \n         // DoubleClickSize Label\n         this-&gt;label2-&gt;AutoSize = true;\n         this-&gt;label2-&gt;Location = System::Drawing::Point( 24, 48 );\n         this-&gt;label2-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // DoubleClickTime Label\n         this-&gt;label3-&gt;AutoSize = true;\n         this-&gt;label3-&gt;Location = System::Drawing::Point( 24, 72 );\n         this-&gt;label3-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // MousePresent Label\n         this-&gt;label4-&gt;AutoSize = true;\n         this-&gt;label4-&gt;Location = System::Drawing::Point( 24, 96 );\n         this-&gt;label4-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // MouseButtons Label\n         this-&gt;label5-&gt;AutoSize = true;\n         this-&gt;label5-&gt;Location = System::Drawing::Point( 24, 120 );\n         this-&gt;label5-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // MouseButtonsSwapped Label\n         this-&gt;label6-&gt;AutoSize = true;\n         this-&gt;label6-&gt;Location = System::Drawing::Point( 320, 48 );\n         this-&gt;label6-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // MouseWheelPresent Label\n         this-&gt;label7-&gt;AutoSize = true;\n         this-&gt;label7-&gt;Location = System::Drawing::Point( 320, 72 );\n         this-&gt;label7-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // MouseWheelScrollLines Label\n         this-&gt;label8-&gt;AutoSize = true;\n         this-&gt;label8-&gt;Location = System::Drawing::Point( 320, 96 );\n         this-&gt;label8-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // NativeMouseWheelSupport Label\n         this-&gt;label9-&gt;AutoSize = true;\n         this-&gt;label9-&gt;Location = System::Drawing::Point( 320, 120 );\n         this-&gt;label9-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // Mouse Panel\n         this-&gt;panel1-&gt;Anchor = static_cast&lt;System::Windows::Forms::AnchorStyles&gt;(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n         this-&gt;panel1-&gt;BackColor = System::Drawing::SystemColors::ControlDark;\n         this-&gt;panel1-&gt;Location = System::Drawing::Point( 16, 160 );\n         this-&gt;panel1-&gt;Size = System::Drawing::Size( 664, 320 );\n         this-&gt;panel1-&gt;MouseUp += gcnew System::Windows::Forms::MouseEventHandler( this, &amp;Form1::panel1_MouseUp );\n         this-&gt;panel1-&gt;Paint += gcnew System::Windows::Forms::PaintEventHandler( this, &amp;Form1::panel1_Paint );\n         this-&gt;panel1-&gt;MouseEnter += gcnew System::EventHandler( this, &amp;Form1::panel1_MouseEnter );\n         this-&gt;panel1-&gt;MouseHover += gcnew System::EventHandler( this, &amp;Form1::panel1_MouseHover );\n         this-&gt;panel1-&gt;MouseMove += gcnew System::Windows::Forms::MouseEventHandler( this, &amp;Form1::panel1_MouseMove );\n         this-&gt;panel1-&gt;MouseLeave += gcnew System::EventHandler( this, &amp;Form1::panel1_MouseLeave );\n         this-&gt;panel1-&gt;MouseDown += gcnew System::Windows::Forms::MouseEventHandler( this, &amp;Form1::panel1_MouseDown );\n         this-&gt;panel1-&gt;MouseWheel += gcnew System::Windows::Forms::MouseEventHandler( this, &amp;Form1::panel1_MouseWheel );\n         \n         // Clear Button\n         this-&gt;clearButton-&gt;Anchor = static_cast&lt;System::Windows::Forms::AnchorStyles&gt;(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Right);\n         this-&gt;clearButton-&gt;Location = System::Drawing::Point( 592, 504 );\n         this-&gt;clearButton-&gt;TabIndex = 1;\n         this-&gt;clearButton-&gt;Text = &quot;Clear&quot;;\n         this-&gt;clearButton-&gt;Click += gcnew System::EventHandler( this, &amp;Form1::clearButton_Click );\n         \n         // GroupBox\n         this-&gt;groupBox1-&gt;Anchor = static_cast&lt;System::Windows::Forms::AnchorStyles&gt;(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n         this-&gt;groupBox1-&gt;Location = System::Drawing::Point( 16, 24 );\n         this-&gt;groupBox1-&gt;Size = System::Drawing::Size( 664, 128 );\n         this-&gt;groupBox1-&gt;Text = &quot;System::Windows::Forms::SystemInformation&quot;;\n         \n         // Set up how the form should be displayed and add the controls to the form.\n         this-&gt;ClientSize = System::Drawing::Size( 696, 534 );\n         array&lt;System::Windows::Forms::Control^&gt;^temp0 = {this-&gt;label9,this-&gt;label8,this-&gt;label7,this-&gt;label6,this-&gt;label5,this-&gt;label4,this-&gt;label3,this-&gt;label2,this-&gt;clearButton,this-&gt;panel1,this-&gt;label1,this-&gt;groupBox1};\n         this-&gt;Controls-&gt;AddRange( temp0 );\n         this-&gt;Text = &quot;Mouse Event Example&quot;;\n         \n         // Displays information about the system mouse.\n         label2-&gt;Text = &quot;SystemInformation::DoubleClickSize: {0}&quot;,SystemInformation::DoubleClickSize;\n         label3-&gt;Text = &quot;SystemInformation::DoubleClickTime: {0}&quot;,SystemInformation::DoubleClickTime;\n         label4-&gt;Text = &quot;SystemInformation::MousePresent: {0}&quot;,SystemInformation::MousePresent;\n         label5-&gt;Text = &quot;SystemInformation::MouseButtons: {0}&quot;,SystemInformation::MouseButtons;\n         label6-&gt;Text = &quot;SystemInformation::MouseButtonsSwapped: {0}&quot;,SystemInformation::MouseButtonsSwapped;\n         label7-&gt;Text = &quot;SystemInformation::MouseWheelPresent: {0}&quot;,SystemInformation::MouseWheelPresent;\n         label8-&gt;Text = &quot;SystemInformation::MouseWheelScrollLines: {0}&quot;,SystemInformation::MouseWheelScrollLines;\n         label9-&gt;Text = &quot;SystemInformation::NativeMouseWheelSupport: {0}&quot;,SystemInformation::NativeMouseWheelSupport;\n      }\n\n   private:\n      void panel1_MouseDown( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n      {\n         // Update the mouse path with the mouse information\n         Point mouseDownLocation = Point(e-&gt;X,e-&gt;Y);\n         String^ eventString = nullptr;\n         switch ( e-&gt;Button )\n         {\n            case ::MouseButtons::Left:\n               eventString = &quot;L&quot;;\n               break;\n\n            case ::MouseButtons::Right:\n               eventString = &quot;R&quot;;\n               break;\n\n            case ::MouseButtons::Middle:\n               eventString = &quot;M&quot;;\n               break;\n\n            case ::MouseButtons::XButton1:\n               eventString = &quot;X1&quot;;\n               break;\n\n            case ::MouseButtons::XButton2:\n               eventString = &quot;X2&quot;;\n               break;\n\n            case ::MouseButtons::None:\n            default:\n               break;\n         }\n         if ( eventString != nullptr )\n         {\n            mousePath-&gt;AddString( eventString, FontFamily::GenericSerif, (int)FontStyle::Bold, (float)fontSize, mouseDownLocation, StringFormat::GenericDefault );\n         }\n         else\n         {\n            mousePath-&gt;AddLine( mouseDownLocation, mouseDownLocation );\n         }\n\n         panel1-&gt;Focus();\n         panel1-&gt;Invalidate();\n      }\n\n      void panel1_MouseEnter( Object^ sender, System::EventArgs^ /*e*/ )\n      {\n         \n         // Update the mouse event label to indicate the MouseEnter event occurred.\n         label1-&gt;Text = String::Concat( sender-&gt;GetType(), &quot;: MouseEnter&quot; );\n      }\n\n      void panel1_MouseHover( Object^ sender, System::EventArgs^ /*e*/ )\n      {\n         \n         // Update the mouse event label to indicate the MouseHover event occurred.\n         label1-&gt;Text = String::Concat( sender-&gt;GetType(), &quot;: MouseHover&quot; );\n      }\n\n      void panel1_MouseLeave( Object^ sender, System::EventArgs^ /*e*/ )\n      {\n         \n         // Update the mouse event label to indicate the MouseLeave event occurred.\n         label1-&gt;Text = String::Concat( sender-&gt;GetType(), &quot;: MouseLeave&quot; );\n      }\n\n      void panel1_MouseMove( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n      {\n         // Update the mouse path that is drawn onto the Panel.\n         int mouseX = e-&gt;X;\n         int mouseY = e-&gt;Y;\n         mousePath-&gt;AddLine( mouseX, mouseY, mouseX, mouseY );\n      }\n\n      void panel1_MouseWheel( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n      {\n         // Update the drawing based upon the mouse wheel scrolling.\n         int numberOfTextLinesToMove = e-&gt;Delta * SystemInformation::MouseWheelScrollLines / 120;\n         int numberOfPixelsToMove = numberOfTextLinesToMove * fontSize;\n         if ( numberOfPixelsToMove != 0 )\n         {\n            System::Drawing::Drawing2D::Matrix^ translateMatrix = gcnew System::Drawing::Drawing2D::Matrix;\n            translateMatrix-&gt;Translate( 0, (float)numberOfPixelsToMove );\n            mousePath-&gt;Transform(translateMatrix);\n         }\n\n         panel1-&gt;Invalidate();\n      }\n\n      void panel1_MouseUp( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n      {\n         Point mouseUpLocation = System::Drawing::Point( e-&gt;X, e-&gt;Y );\n         \n         // Show the number of clicks in the path graphic.\n         int numberOfClicks = e-&gt;Clicks;\n         mousePath-&gt;AddString( String::Format( &quot;   {0}&quot;, numberOfClicks ), FontFamily::GenericSerif, (int)FontStyle::Bold, (float)fontSize, mouseUpLocation, StringFormat::GenericDefault );\n         panel1-&gt;Invalidate();\n      }\n\n      void panel1_Paint( Object^ /*sender*/, System::Windows::Forms::PaintEventArgs^ e )\n      {\n         // Perform the painting of the Panel.\n         e-&gt;Graphics-&gt;DrawPath( System::Drawing::Pens::DarkRed, mousePath );\n      }\n\n      void clearButton_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n      {\n         // Clear the Panel display.\n         delete mousePath;\n         mousePath = gcnew System::Drawing::Drawing2D::GraphicsPath;\n         panel1-&gt;Invalidate();\n      }\n   };\n}\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew MouseEvent::Form1 );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.MouseEvent#1\">using System;\nusing System.Drawing;\nusing System.Windows.Forms;\n\nnamespace MouseEvent\n{\n    public class Form1 : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.Panel panel1;\n        private System.Windows.Forms.Label label1;\n        private System.Windows.Forms.Label label2;\n        private System.Windows.Forms.Label label3;\n        private System.Windows.Forms.Label label4;\n        private System.Windows.Forms.Label label5;\n        private System.Windows.Forms.Label label6;\n        private System.Windows.Forms.Label label7;\n        private System.Windows.Forms.Label label8;\n        private System.Windows.Forms.Label label9;\n        private System.Windows.Forms.Button clearButton;\n        private System.Drawing.Drawing2D.GraphicsPath mousePath;\n        private System.Windows.Forms.GroupBox groupBox1;\n\n        private int fontSize = 20;        \n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new Form1());\n        }\n\n        public Form1()\n        {            \n            mousePath = new System.Drawing.Drawing2D.GraphicsPath();\n\n            this.panel1 = new System.Windows.Forms.Panel();\n            this.label1 = new System.Windows.Forms.Label();\n            this.clearButton = new System.Windows.Forms.Button();\n            this.label2 = new System.Windows.Forms.Label();\n            this.label3 = new System.Windows.Forms.Label();\n            this.label4 = new System.Windows.Forms.Label();\n            this.label5 = new System.Windows.Forms.Label();\n            this.label6 = new System.Windows.Forms.Label();\n            this.label7 = new System.Windows.Forms.Label();\n            this.label8 = new System.Windows.Forms.Label();\n            this.label9 = new System.Windows.Forms.Label();\n            this.groupBox1 = new System.Windows.Forms.GroupBox();\n\n            // Mouse Events Label\n            this.label1.Location = new System.Drawing.Point(24, 504);\n            this.label1.Size = new System.Drawing.Size(392, 23);\n            // DoubleClickSize Label\n            this.label2.AutoSize = true;\n            this.label2.Location = new System.Drawing.Point(24, 48);\n            this.label2.Size = new System.Drawing.Size(35, 13);\n            // DoubleClickTime Label\n            this.label3.AutoSize = true;\n            this.label3.Location = new System.Drawing.Point(24, 72);\n            this.label3.Size = new System.Drawing.Size(35, 13);\n            // MousePresent Label\n            this.label4.AutoSize = true;\n            this.label4.Location = new System.Drawing.Point(24, 96);\n            this.label4.Size = new System.Drawing.Size(35, 13);\n            // MouseButtons Label\n            this.label5.AutoSize = true;\n            this.label5.Location = new System.Drawing.Point(24, 120);\n            this.label5.Size = new System.Drawing.Size(35, 13);\n            // MouseButtonsSwapped Label\n            this.label6.AutoSize = true;\n            this.label6.Location = new System.Drawing.Point(320, 48);\n            this.label6.Size = new System.Drawing.Size(35, 13);\n            // MouseWheelPresent Label\n            this.label7.AutoSize = true;\n            this.label7.Location = new System.Drawing.Point(320, 72);\n            this.label7.Size = new System.Drawing.Size(35, 13);\n            // MouseWheelScrollLines Label\n            this.label8.AutoSize = true;\n            this.label8.Location = new System.Drawing.Point(320, 96);\n            this.label8.Size = new System.Drawing.Size(35, 13);\n            // NativeMouseWheelSupport Label\n            this.label9.AutoSize = true;\n            this.label9.Location = new System.Drawing.Point(320, 120);\n            this.label9.Size = new System.Drawing.Size(35, 13);\n\n            // Mouse Panel\n            this.panel1.Anchor = ((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) \n                | System.Windows.Forms.AnchorStyles.Right);\n            this.panel1.BackColor = System.Drawing.SystemColors.ControlDark;\n            this.panel1.Location = new System.Drawing.Point(16, 160);\n            this.panel1.Size = new System.Drawing.Size(664, 320);\n            this.panel1.MouseUp += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseUp);\n            this.panel1.Paint += new System.Windows.Forms.PaintEventHandler(this.panel1_Paint);\n            this.panel1.MouseEnter += new System.EventHandler(this.panel1_MouseEnter);\n            this.panel1.MouseHover += new System.EventHandler(this.panel1_MouseHover);\n            this.panel1.MouseMove += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseMove);\n            this.panel1.MouseLeave += new System.EventHandler(this.panel1_MouseLeave);\n            this.panel1.MouseDown += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseDown);\n            this.panel1.MouseWheel += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseWheel);\n\n            // Clear Button\n            this.clearButton.Anchor = (System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right);\n            this.clearButton.Location = new System.Drawing.Point(592, 504);\n            this.clearButton.TabIndex = 1;\n            this.clearButton.Text = &quot;Clear&quot;;\n            this.clearButton.Click += new System.EventHandler(this.clearButton_Click);\n            \n            // GroupBox\n            this.groupBox1.Anchor = ((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) \n                | System.Windows.Forms.AnchorStyles.Right);\n            this.groupBox1.Location = new System.Drawing.Point(16, 24);\n            this.groupBox1.Size = new System.Drawing.Size(664, 128);\n            this.groupBox1.Text = &quot;System.Windows.Forms.SystemInformation&quot;;\n\n            // Set up how the form should be displayed and add the controls to the form.\n            this.ClientSize = new System.Drawing.Size(696, 534);\n            this.Controls.AddRange(new System.Windows.Forms.Control[] {\n                                        this.label9,this.label8,this.label7,this.label6,\n                                        this.label5,this.label4,this.label3,this.label2,\n                                        this.clearButton,this.panel1,this.label1,this.groupBox1});\n            this.Text = &quot;Mouse Event Example&quot;;\n\n            // Displays information about the system mouse.\n            label2.Text = &quot;SystemInformation.DoubleClickSize: &quot; + SystemInformation.DoubleClickSize.ToString();\n            label3.Text = &quot;SystemInformation.DoubleClickTime: &quot; + SystemInformation.DoubleClickTime.ToString();\n            label4.Text = &quot;SystemInformation.MousePresent: &quot; + SystemInformation.MousePresent.ToString();\n            label5.Text = &quot;SystemInformation.MouseButtons: &quot; + SystemInformation.MouseButtons.ToString();\n            label6.Text = &quot;SystemInformation.MouseButtonsSwapped: &quot; + SystemInformation.MouseButtonsSwapped.ToString();\n            label7.Text = &quot;SystemInformation.MouseWheelPresent: &quot; + SystemInformation.MouseWheelPresent.ToString();\n            label8.Text = &quot;SystemInformation.MouseWheelScrollLines: &quot; + SystemInformation.MouseWheelScrollLines.ToString();\n            label9.Text = &quot;SystemInformation.NativeMouseWheelSupport: &quot; + SystemInformation.NativeMouseWheelSupport.ToString();\n\n        }\n\n        private void panel1_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e) \n        {\n            // Update the mouse path with the mouse information\n            Point mouseDownLocation = new Point(e.X, e.Y);\n\n            string eventString = null;\n            switch (e.Button) {\n                case MouseButtons.Left:\n                    eventString = &quot;L&quot;;\n                    break;\n                case MouseButtons.Right:\n                    eventString = &quot;R&quot;;\n                    break;\n                case MouseButtons.Middle:\n                    eventString = &quot;M&quot;;\n                    break;\n                case MouseButtons.XButton1:\n                    eventString = &quot;X1&quot;;\n                    break;\n                case MouseButtons.XButton2:\n                    eventString = &quot;X2&quot;;\n                    break;\n                case MouseButtons.None:\n                default:\n                    break;\n            }\n\n            if (eventString != null) \n            {\n                mousePath.AddString(eventString, FontFamily.GenericSerif, (int)FontStyle.Bold, fontSize, mouseDownLocation, StringFormat.GenericDefault);\n            }\n            else \n            {\n                mousePath.AddLine(mouseDownLocation,mouseDownLocation);\n            }\n            panel1.Focus();\n            panel1.Invalidate();\n        }\n\n        private void panel1_MouseEnter(object sender, System.EventArgs e) \n        {\n            // Update the mouse event label to indicate the MouseEnter event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseEnter&quot;;\n        }\n\n        private void panel1_MouseHover(object sender, System.EventArgs e) \n        {\n            // Update the mouse event label to indicate the MouseHover event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseHover&quot;;\n        }\n\n        private void panel1_MouseLeave(object sender, System.EventArgs e) \n        {\n            // Update the mouse event label to indicate the MouseLeave event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseLeave&quot;;\n        }\n\n        private void panel1_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)\n        {\n            // Update the mouse path that is drawn onto the Panel.\n            int mouseX = e.X;\n            int mouseY = e.Y;\n            \n            mousePath.AddLine(mouseX,mouseY,mouseX,mouseY);\n        }\n\n        private void panel1_MouseWheel(object sender, System.Windows.Forms.MouseEventArgs e)\n        {\n            // Update the drawing based upon the mouse wheel scrolling.\n      \n            int numberOfTextLinesToMove = e.Delta * SystemInformation.MouseWheelScrollLines / 120;\n            int numberOfPixelsToMove = numberOfTextLinesToMove * fontSize;\n\n            if (numberOfPixelsToMove != 0) {\n                System.Drawing.Drawing2D.Matrix translateMatrix = new  System.Drawing.Drawing2D.Matrix();\n                translateMatrix.Translate(0, numberOfPixelsToMove);\n                mousePath.Transform(translateMatrix);\n            }\n            panel1.Invalidate();\n        }\n        private void panel1_MouseUp(object sender, System.Windows.Forms.MouseEventArgs e) \n        {\n            Point mouseUpLocation = new System.Drawing.Point(e.X, e.Y);\n        \n            // Show the number of clicks in the path graphic.\n            int numberOfClicks = e.Clicks;\n            mousePath.AddString(&quot;    &quot; + numberOfClicks.ToString(), \n                        FontFamily.GenericSerif, (int)FontStyle.Bold, \n                        fontSize, mouseUpLocation, StringFormat.GenericDefault);\n\n            panel1.Invalidate();\n        }\n\n        private void panel1_Paint(object sender, System.Windows.Forms.PaintEventArgs e) \n        {    \n            // Perform the painting of the Panel.\n            e.Graphics.DrawPath(System.Drawing.Pens.DarkRed, mousePath);\n        }\n\n        private void clearButton_Click(object sender, System.EventArgs e)\n        {\n            // Clear the Panel display.\n            mousePath.Dispose();\n            mousePath = new System.Drawing.Drawing2D.GraphicsPath();\n            panel1.Invalidate();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.MouseEvent#1\">Imports System\nImports System.Drawing\nImports System.Windows.Forms\n\nNamespace MouseEvent\n    &#39; Summary description for Form1.\n    Public NotInheritable Class Form1\n        Inherits System.Windows.Forms.Form\n\n        Friend WithEvents panel1 As System.Windows.Forms.Panel\n        Private label1 As System.Windows.Forms.Label\n        Private label2 As System.Windows.Forms.Label\n        Private label3 As System.Windows.Forms.Label\n        Private label4 As System.Windows.Forms.Label\n        Private label5 As System.Windows.Forms.Label\n        Private label6 As System.Windows.Forms.Label\n        Private label7 As System.Windows.Forms.Label\n        Private label8 As System.Windows.Forms.Label\n        Private label9 As System.Windows.Forms.Label\n        Friend WithEvents clearButton As System.Windows.Forms.Button\n        Private mousePath As System.Drawing.Drawing2D.GraphicsPath\n        Private groupBox1 As System.Windows.Forms.GroupBox\n\n        Private fontSize As Integer = 20\n        \n        &lt;System.STAThread()&gt;  _\n        Public Shared Sub Main()\n            System.Windows.Forms.Application.Run(New Form1())\n        End Sub &#39;Main\n\n        Public Sub New()\n\n            mousePath = New System.Drawing.Drawing2D.GraphicsPath()\n\n            Me.panel1 = New System.Windows.Forms.Panel()\n            Me.label1 = New System.Windows.Forms.Label()\n            Me.clearButton = New System.Windows.Forms.Button()\n            Me.label2 = New System.Windows.Forms.Label()\n            Me.label3 = New System.Windows.Forms.Label()\n            Me.label4 = New System.Windows.Forms.Label()\n            Me.label5 = New System.Windows.Forms.Label()\n            Me.label6 = New System.Windows.Forms.Label()\n            Me.label7 = New System.Windows.Forms.Label()\n            Me.label8 = New System.Windows.Forms.Label()\n            Me.label9 = New System.Windows.Forms.Label()\n            Me.groupBox1 = New System.Windows.Forms.GroupBox()\n\n            &#39; Mouse Events Label\n            Me.label1.Location = New System.Drawing.Point(24, 504) \n            Me.label1.Size = New System.Drawing.Size(392, 23) \n            &#39; DoubleClickSize Label\n            Me.label2.AutoSize = True \n            Me.label2.Location = New System.Drawing.Point(24, 48) \n            Me.label2.Size = New System.Drawing.Size(35, 13) \n            &#39; DoubleClickTime Label\n            Me.label3.AutoSize = True \n            Me.label3.Location = New System.Drawing.Point(24, 72) \n            Me.label3.Size = New System.Drawing.Size(35, 13) \n            &#39; MousePresent Label\n            Me.label4.AutoSize = True \n            Me.label4.Location = New System.Drawing.Point(24, 96) \n            Me.label4.Size = New System.Drawing.Size(35, 13) \n            &#39; MouseButtons Label\n            Me.label5.AutoSize = True \n            Me.label5.Location = New System.Drawing.Point(24, 120) \n            Me.label5.Size = New System.Drawing.Size(35, 13) \n            &#39; MouseButtonsSwapped Label\n            Me.label6.AutoSize = True \n            Me.label6.Location = New System.Drawing.Point(320, 48) \n            Me.label6.Size = New System.Drawing.Size(35, 13) \n            &#39; MouseWheelPresent Label\n            Me.label7.AutoSize = True \n            Me.label7.Location = New System.Drawing.Point(320, 72) \n            Me.label7.Size = New System.Drawing.Size(35, 13) \n            &#39; MouseWheelScrollLines Label\n            Me.label8.AutoSize = True \n            Me.label8.Location = New System.Drawing.Point(320, 96) \n            Me.label8.Size = New System.Drawing.Size(35, 13) \n            &#39; NativeMouseWheelSupport Label\n            Me.label9.AutoSize = True \n            Me.label9.Location = New System.Drawing.Point(320, 120) \n            Me.label9.Size = New System.Drawing.Size(35, 13) \n\n            &#39; Mouse Panel\n            Me.panel1.Anchor = System.Windows.Forms.AnchorStyles.Top Or _\n                                    System.Windows.Forms.AnchorStyles.Left Or _\n                                    System.Windows.Forms.AnchorStyles.Right\n            Me.panel1.BackColor = System.Drawing.SystemColors.ControlDark\n            Me.panel1.Location = New System.Drawing.Point(16, 160)\n            Me.panel1.Size = New System.Drawing.Size(664, 320)\n\n            &#39; Clear Button\n            Me.clearButton.Anchor = System.Windows.Forms.AnchorStyles.Top Or _\n                                    System.Windows.Forms.AnchorStyles.Right\n            Me.clearButton.Location = New System.Drawing.Point(592, 504)\n            Me.clearButton.TabIndex = 1\n            Me.clearButton.Text = &quot;Clear&quot;\n\n            &#39; GroupBox\n            Me.groupBox1.Anchor = System.Windows.Forms.AnchorStyles.Top Or _\n                                  System.Windows.Forms.AnchorStyles.Left Or _\n                                  System.Windows.Forms.AnchorStyles.Right\n            Me.groupBox1.Location = New System.Drawing.Point(16, 24)\n            Me.groupBox1.Size = New System.Drawing.Size(664, 128)\n            Me.groupBox1.Text = &quot;System.Windows.Forms.SystemInformation&quot;\n\n            &#39; Set up how the form should be displayed and add the controls to the form.\n            Me.ClientSize = New System.Drawing.Size(696, 534)\n            Me.Controls.AddRange(New System.Windows.Forms.Control() {Me.label9, _\n                            Me.label8, Me.label7, Me.label6, Me.label5, Me.label4, _\n                            Me.label3, Me.label2, Me.clearButton, Me.panel1, Me.label1, Me.groupBox1})\n\n            Me.Text = &quot;Mouse Event Example&quot;\n\n            &#39; Display information about the system mouse.\n            label2.Text = &quot;SystemInformation.DoubleClickSize: &quot; + SystemInformation.DoubleClickSize.ToString()\n            label3.Text = &quot;SystemInformation.DoubleClickTime: &quot; + SystemInformation.DoubleClickTime.ToString()\n            label4.Text = &quot;SystemInformation.MousePresent: &quot; + SystemInformation.MousePresent.ToString()\n            label5.Text = &quot;SystemInformation.MouseButtons: &quot; + SystemInformation.MouseButtons.ToString()\n            label6.Text = &quot;SystemInformation.MouseButtonsSwapped: &quot; + SystemInformation.MouseButtonsSwapped.ToString()\n            label7.Text = &quot;SystemInformation.MouseWheelPresent: &quot; + SystemInformation.MouseWheelPresent.ToString()\n            label8.Text = &quot;SystemInformation.MouseWheelScrollLines: &quot; + SystemInformation.MouseWheelScrollLines.ToString()\n            label9.Text = &quot;SystemInformation.NativeMouseWheelSupport: &quot; + SystemInformation.NativeMouseWheelSupport.ToString()\n        End Sub &#39;New\n\n        Private Sub panel1_MouseDown(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles panel1.MouseDown\n            &#39; Update the mouse path with the mouse information\n            Dim mouseDownLocation As New Point(e.X, e.Y)\n            \n            Dim eventString As String = Nothing\n            Select Case e.Button\n                Case MouseButtons.Left\n                    eventString = &quot;L&quot;\n                Case MouseButtons.Right\n                    eventString = &quot;R&quot;\n                Case MouseButtons.Middle\n                    eventString = &quot;M&quot;\n                Case MouseButtons.XButton1\n                    eventString = &quot;X1&quot;\n                Case MouseButtons.XButton2\n                    eventString = &quot;X2&quot;\n                Case MouseButtons.None:\n                     eventString = Nothing              \n            End Select\n            \n            If (eventString IsNot Nothing) Then\n                mousePath.AddString(eventString, FontFamily.GenericSerif, CInt(FontStyle.Bold), fontSize, mouseDownLocation, StringFormat.GenericDefault)\n            Else\n                mousePath.AddLine(mouseDownLocation, mouseDownLocation)\n            End If\n\n            panel1.Focus()\n            panel1.Invalidate()\n        End Sub \n        \n        Private Sub panel1_MouseEnter(sender As Object, e As System.EventArgs) Handles panel1.MouseEnter\n            &#39; Update the mouse event label to indicate the MouseEnter event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseEnter&quot;\n        End Sub\n        \n        Private Sub panel1_MouseHover(sender As Object, e As System.EventArgs) Handles panel1.MouseHover\n            &#39; Update the mouse event label to indicate the MouseHover event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseHover&quot;\n        End Sub\n        \n        Private Sub panel1_MouseLeave(sender As Object, e As System.EventArgs) Handles panel1.MouseLeave\n            &#39; Update the mouse event label to indicate the MouseLeave event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseLeave&quot;\n        End Sub\n        \n        Private Sub panel1_MouseMove(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles panel1.MouseMove\n            &#39; Update the mouse path that is drawn onto the Panel.\n            Dim mouseX As Integer = e.X\n            Dim mouseY As Integer = e.Y\n            \n            mousePath.AddLine(mouseX, mouseY, mouseX, mouseY)\n        End Sub\n        Private Sub panel1_MouseWheel(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles panel1.MouseWheel\n            &#39; Update the drawing based upon the mouse wheel scrolling.\n            Dim numberOfTextLinesToMove As Integer = CInt(e.Delta * SystemInformation.MouseWheelScrollLines / 120) \n            Dim numberOfPixelsToMove As Integer = numberOfTextLinesToMove * fontSize\n            \n            If numberOfPixelsToMove &lt;&gt; 0 Then\n                Dim translateMatrix As New System.Drawing.Drawing2D.Matrix()\n                translateMatrix.Translate(0, numberOfPixelsToMove)\n                mousePath.Transform(translateMatrix)\n            End If\n\n            panel1.Invalidate()\n        End Sub\n        Private Sub panel1_MouseUp(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles panel1.MouseUp\n            Dim mouseUpLocation As New System.Drawing.Point(e.X, e.Y)\n            \n            &#39; Show the number of clicks in the path graphic.\n            Dim numberOfClicks As Integer = e.Clicks\n            mousePath.AddString(&quot;     &quot; + numberOfClicks.ToString(), _\n                                FontFamily.GenericSerif, CInt(FontStyle.Bold), _\n                                fontSize, mouseUpLocation, StringFormat.GenericDefault)\n\n            panel1.Invalidate()\n        End Sub\n        \n        Private Sub panel1_Paint(sender As Object, e As System.Windows.Forms.PaintEventArgs) Handles panel1.Paint\n            &#39; Perform the painting of the Panel.\n            e.Graphics.DrawPath(System.Drawing.Pens.DarkRed, mousePath)\n        End Sub\n        \n        Private Sub clearButton_Click(sender As Object, e As System.EventArgs) Handles clearButton.Click\n            &#39; Clear the Panel display.\n            mousePath.Dispose()\n            mousePath = New System.Drawing.Drawing2D.GraphicsPath()\n            panel1.Invalidate()\n        End Sub\n        \n    End Class &#39;Form1\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_MouseLeave\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseLeave</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the mouse pointer leaves the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler MouseLeave;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Mouse events occur in the following order:  </p>\n<ol>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseEnter\" data-linktype=\"relative-path\">MouseEnter</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseMove\" data-linktype=\"relative-path\">MouseMove</a>  \n</li>\n<li><p><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseHover\" data-linktype=\"relative-path\">MouseHover</a> / <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> / <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseWheel\" data-linktype=\"relative-path\">MouseWheel</a>  </p>\n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseUp\" data-linktype=\"relative-path\">MouseUp</a>  \n</li>\n<li><p>MouseLeave  </p>\n</li>\n</ol>\n<div class=\"NOTE\"><h5>Note</h5><p> The following events are not raised for the <a class=\"xref\" href=\"system.windows.forms.tabcontrol\" data-linktype=\"relative-path\">TabControl</a> class unless there is at least one <a class=\"xref\" href=\"system.windows.forms.tabpage\" data-linktype=\"relative-path\">TabPage</a> in the <a class=\"xref\" href=\"system.windows.forms.tabcontrol#System_Windows_Forms_TabControl_TabPages_\" data-linktype=\"relative-path\">TabPages</a> collection: <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Click\" data-linktype=\"relative-path\">Click</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoubleClick\" data-linktype=\"relative-path\">DoubleClick</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseUp\" data-linktype=\"relative-path\">MouseUp</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseHover\" data-linktype=\"relative-path\">MouseHover</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseEnter\" data-linktype=\"relative-path\">MouseEnter</a>, MouseLeave and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseMove\" data-linktype=\"relative-path\">MouseMove</a>. If there is at least one <a class=\"xref\" href=\"system.windows.forms.tabpage\" data-linktype=\"relative-path\">TabPage</a> in the collection, and the user interacts with the tab control&#39;s header (where the <a class=\"xref\" href=\"system.windows.forms.tabpage\" data-linktype=\"relative-path\">TabPage</a> names appear), the <a class=\"xref\" href=\"system.windows.forms.tabcontrol\" data-linktype=\"relative-path\">TabControl</a> raises the appropriate event. However, if the user interaction is within the client area of the tab page, the <a class=\"xref\" href=\"system.windows.forms.tabpage\" data-linktype=\"relative-path\">TabPage</a> raises the appropriate event.  </p>\n</div>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using different mouse events to draw the path of the mouse on a <a class=\"xref\" href=\"system.windows.forms.panel\" data-linktype=\"relative-path\">Panel</a>. A line segment is added to the <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath\" data-linktype=\"relative-path\">GraphicsPath</a> for each <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseMove\" data-linktype=\"relative-path\">MouseMove</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> events that occur. To update the graphics, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invalidate_\" data-linktype=\"relative-path\">Invalidate</a> method is called for the <a class=\"xref\" href=\"system.windows.forms.panel\" data-linktype=\"relative-path\">Panel</a> on each <code>MouseDown</code> and <code>MouseUp</code> event. In addition, the graphic path is scrolled up or down when the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseWheel\" data-linktype=\"relative-path\">MouseWheel</a> event occurs. Additional mouse events, like <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseHover\" data-linktype=\"relative-path\">MouseHover</a>, are identified on screen as well. Also displayed on the screen is additional information about the mouse from the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.MouseEvent#1\">#using &lt;System.dll&gt;\n#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n\nusing namespace System;\nusing namespace System::Drawing;\nusing namespace System::Windows::Forms;\n\nnamespace MouseEvent\n{\n   public ref class Form1: public System::Windows::Forms::Form\n   {\n   private:\n      System::Windows::Forms::Panel^ panel1;\n      System::Windows::Forms::Label ^ label1;\n      System::Windows::Forms::Label ^ label2;\n      System::Windows::Forms::Label ^ label3;\n      System::Windows::Forms::Label ^ label4;\n      System::Windows::Forms::Label ^ label5;\n      System::Windows::Forms::Label ^ label6;\n      System::Windows::Forms::Label ^ label7;\n      System::Windows::Forms::Label ^ label8;\n      System::Windows::Forms::Label ^ label9;\n      System::Windows::Forms::Button^ clearButton;\n      System::Drawing::Drawing2D::GraphicsPath^ mousePath;\n      System::Windows::Forms::GroupBox^ groupBox1;\n      int fontSize;\n\n   public:\n      Form1()\n      {\n         fontSize = 20;\n         mousePath = gcnew System::Drawing::Drawing2D::GraphicsPath;\n         this-&gt;panel1 = gcnew System::Windows::Forms::Panel;\n         this-&gt;label1 = gcnew System::Windows::Forms::Label;\n         this-&gt;clearButton = gcnew System::Windows::Forms::Button;\n         this-&gt;label2 = gcnew System::Windows::Forms::Label;\n         this-&gt;label3 = gcnew System::Windows::Forms::Label;\n         this-&gt;label4 = gcnew System::Windows::Forms::Label;\n         this-&gt;label5 = gcnew System::Windows::Forms::Label;\n         this-&gt;label6 = gcnew System::Windows::Forms::Label;\n         this-&gt;label7 = gcnew System::Windows::Forms::Label;\n         this-&gt;label8 = gcnew System::Windows::Forms::Label;\n         this-&gt;label9 = gcnew System::Windows::Forms::Label;\n         this-&gt;groupBox1 = gcnew System::Windows::Forms::GroupBox;\n         \n         // Mouse Events Label\n         this-&gt;label1-&gt;Location = System::Drawing::Point( 24, 504 );\n         this-&gt;label1-&gt;Size = System::Drawing::Size( 392, 23 );\n         \n         // DoubleClickSize Label\n         this-&gt;label2-&gt;AutoSize = true;\n         this-&gt;label2-&gt;Location = System::Drawing::Point( 24, 48 );\n         this-&gt;label2-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // DoubleClickTime Label\n         this-&gt;label3-&gt;AutoSize = true;\n         this-&gt;label3-&gt;Location = System::Drawing::Point( 24, 72 );\n         this-&gt;label3-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // MousePresent Label\n         this-&gt;label4-&gt;AutoSize = true;\n         this-&gt;label4-&gt;Location = System::Drawing::Point( 24, 96 );\n         this-&gt;label4-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // MouseButtons Label\n         this-&gt;label5-&gt;AutoSize = true;\n         this-&gt;label5-&gt;Location = System::Drawing::Point( 24, 120 );\n         this-&gt;label5-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // MouseButtonsSwapped Label\n         this-&gt;label6-&gt;AutoSize = true;\n         this-&gt;label6-&gt;Location = System::Drawing::Point( 320, 48 );\n         this-&gt;label6-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // MouseWheelPresent Label\n         this-&gt;label7-&gt;AutoSize = true;\n         this-&gt;label7-&gt;Location = System::Drawing::Point( 320, 72 );\n         this-&gt;label7-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // MouseWheelScrollLines Label\n         this-&gt;label8-&gt;AutoSize = true;\n         this-&gt;label8-&gt;Location = System::Drawing::Point( 320, 96 );\n         this-&gt;label8-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // NativeMouseWheelSupport Label\n         this-&gt;label9-&gt;AutoSize = true;\n         this-&gt;label9-&gt;Location = System::Drawing::Point( 320, 120 );\n         this-&gt;label9-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // Mouse Panel\n         this-&gt;panel1-&gt;Anchor = static_cast&lt;System::Windows::Forms::AnchorStyles&gt;(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n         this-&gt;panel1-&gt;BackColor = System::Drawing::SystemColors::ControlDark;\n         this-&gt;panel1-&gt;Location = System::Drawing::Point( 16, 160 );\n         this-&gt;panel1-&gt;Size = System::Drawing::Size( 664, 320 );\n         this-&gt;panel1-&gt;MouseUp += gcnew System::Windows::Forms::MouseEventHandler( this, &amp;Form1::panel1_MouseUp );\n         this-&gt;panel1-&gt;Paint += gcnew System::Windows::Forms::PaintEventHandler( this, &amp;Form1::panel1_Paint );\n         this-&gt;panel1-&gt;MouseEnter += gcnew System::EventHandler( this, &amp;Form1::panel1_MouseEnter );\n         this-&gt;panel1-&gt;MouseHover += gcnew System::EventHandler( this, &amp;Form1::panel1_MouseHover );\n         this-&gt;panel1-&gt;MouseMove += gcnew System::Windows::Forms::MouseEventHandler( this, &amp;Form1::panel1_MouseMove );\n         this-&gt;panel1-&gt;MouseLeave += gcnew System::EventHandler( this, &amp;Form1::panel1_MouseLeave );\n         this-&gt;panel1-&gt;MouseDown += gcnew System::Windows::Forms::MouseEventHandler( this, &amp;Form1::panel1_MouseDown );\n         this-&gt;panel1-&gt;MouseWheel += gcnew System::Windows::Forms::MouseEventHandler( this, &amp;Form1::panel1_MouseWheel );\n         \n         // Clear Button\n         this-&gt;clearButton-&gt;Anchor = static_cast&lt;System::Windows::Forms::AnchorStyles&gt;(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Right);\n         this-&gt;clearButton-&gt;Location = System::Drawing::Point( 592, 504 );\n         this-&gt;clearButton-&gt;TabIndex = 1;\n         this-&gt;clearButton-&gt;Text = &quot;Clear&quot;;\n         this-&gt;clearButton-&gt;Click += gcnew System::EventHandler( this, &amp;Form1::clearButton_Click );\n         \n         // GroupBox\n         this-&gt;groupBox1-&gt;Anchor = static_cast&lt;System::Windows::Forms::AnchorStyles&gt;(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n         this-&gt;groupBox1-&gt;Location = System::Drawing::Point( 16, 24 );\n         this-&gt;groupBox1-&gt;Size = System::Drawing::Size( 664, 128 );\n         this-&gt;groupBox1-&gt;Text = &quot;System::Windows::Forms::SystemInformation&quot;;\n         \n         // Set up how the form should be displayed and add the controls to the form.\n         this-&gt;ClientSize = System::Drawing::Size( 696, 534 );\n         array&lt;System::Windows::Forms::Control^&gt;^temp0 = {this-&gt;label9,this-&gt;label8,this-&gt;label7,this-&gt;label6,this-&gt;label5,this-&gt;label4,this-&gt;label3,this-&gt;label2,this-&gt;clearButton,this-&gt;panel1,this-&gt;label1,this-&gt;groupBox1};\n         this-&gt;Controls-&gt;AddRange( temp0 );\n         this-&gt;Text = &quot;Mouse Event Example&quot;;\n         \n         // Displays information about the system mouse.\n         label2-&gt;Text = &quot;SystemInformation::DoubleClickSize: {0}&quot;,SystemInformation::DoubleClickSize;\n         label3-&gt;Text = &quot;SystemInformation::DoubleClickTime: {0}&quot;,SystemInformation::DoubleClickTime;\n         label4-&gt;Text = &quot;SystemInformation::MousePresent: {0}&quot;,SystemInformation::MousePresent;\n         label5-&gt;Text = &quot;SystemInformation::MouseButtons: {0}&quot;,SystemInformation::MouseButtons;\n         label6-&gt;Text = &quot;SystemInformation::MouseButtonsSwapped: {0}&quot;,SystemInformation::MouseButtonsSwapped;\n         label7-&gt;Text = &quot;SystemInformation::MouseWheelPresent: {0}&quot;,SystemInformation::MouseWheelPresent;\n         label8-&gt;Text = &quot;SystemInformation::MouseWheelScrollLines: {0}&quot;,SystemInformation::MouseWheelScrollLines;\n         label9-&gt;Text = &quot;SystemInformation::NativeMouseWheelSupport: {0}&quot;,SystemInformation::NativeMouseWheelSupport;\n      }\n\n   private:\n      void panel1_MouseDown( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n      {\n         // Update the mouse path with the mouse information\n         Point mouseDownLocation = Point(e-&gt;X,e-&gt;Y);\n         String^ eventString = nullptr;\n         switch ( e-&gt;Button )\n         {\n            case ::MouseButtons::Left:\n               eventString = &quot;L&quot;;\n               break;\n\n            case ::MouseButtons::Right:\n               eventString = &quot;R&quot;;\n               break;\n\n            case ::MouseButtons::Middle:\n               eventString = &quot;M&quot;;\n               break;\n\n            case ::MouseButtons::XButton1:\n               eventString = &quot;X1&quot;;\n               break;\n\n            case ::MouseButtons::XButton2:\n               eventString = &quot;X2&quot;;\n               break;\n\n            case ::MouseButtons::None:\n            default:\n               break;\n         }\n         if ( eventString != nullptr )\n         {\n            mousePath-&gt;AddString( eventString, FontFamily::GenericSerif, (int)FontStyle::Bold, (float)fontSize, mouseDownLocation, StringFormat::GenericDefault );\n         }\n         else\n         {\n            mousePath-&gt;AddLine( mouseDownLocation, mouseDownLocation );\n         }\n\n         panel1-&gt;Focus();\n         panel1-&gt;Invalidate();\n      }\n\n      void panel1_MouseEnter( Object^ sender, System::EventArgs^ /*e*/ )\n      {\n         \n         // Update the mouse event label to indicate the MouseEnter event occurred.\n         label1-&gt;Text = String::Concat( sender-&gt;GetType(), &quot;: MouseEnter&quot; );\n      }\n\n      void panel1_MouseHover( Object^ sender, System::EventArgs^ /*e*/ )\n      {\n         \n         // Update the mouse event label to indicate the MouseHover event occurred.\n         label1-&gt;Text = String::Concat( sender-&gt;GetType(), &quot;: MouseHover&quot; );\n      }\n\n      void panel1_MouseLeave( Object^ sender, System::EventArgs^ /*e*/ )\n      {\n         \n         // Update the mouse event label to indicate the MouseLeave event occurred.\n         label1-&gt;Text = String::Concat( sender-&gt;GetType(), &quot;: MouseLeave&quot; );\n      }\n\n      void panel1_MouseMove( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n      {\n         // Update the mouse path that is drawn onto the Panel.\n         int mouseX = e-&gt;X;\n         int mouseY = e-&gt;Y;\n         mousePath-&gt;AddLine( mouseX, mouseY, mouseX, mouseY );\n      }\n\n      void panel1_MouseWheel( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n      {\n         // Update the drawing based upon the mouse wheel scrolling.\n         int numberOfTextLinesToMove = e-&gt;Delta * SystemInformation::MouseWheelScrollLines / 120;\n         int numberOfPixelsToMove = numberOfTextLinesToMove * fontSize;\n         if ( numberOfPixelsToMove != 0 )\n         {\n            System::Drawing::Drawing2D::Matrix^ translateMatrix = gcnew System::Drawing::Drawing2D::Matrix;\n            translateMatrix-&gt;Translate( 0, (float)numberOfPixelsToMove );\n            mousePath-&gt;Transform(translateMatrix);\n         }\n\n         panel1-&gt;Invalidate();\n      }\n\n      void panel1_MouseUp( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n      {\n         Point mouseUpLocation = System::Drawing::Point( e-&gt;X, e-&gt;Y );\n         \n         // Show the number of clicks in the path graphic.\n         int numberOfClicks = e-&gt;Clicks;\n         mousePath-&gt;AddString( String::Format( &quot;   {0}&quot;, numberOfClicks ), FontFamily::GenericSerif, (int)FontStyle::Bold, (float)fontSize, mouseUpLocation, StringFormat::GenericDefault );\n         panel1-&gt;Invalidate();\n      }\n\n      void panel1_Paint( Object^ /*sender*/, System::Windows::Forms::PaintEventArgs^ e )\n      {\n         // Perform the painting of the Panel.\n         e-&gt;Graphics-&gt;DrawPath( System::Drawing::Pens::DarkRed, mousePath );\n      }\n\n      void clearButton_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n      {\n         // Clear the Panel display.\n         delete mousePath;\n         mousePath = gcnew System::Drawing::Drawing2D::GraphicsPath;\n         panel1-&gt;Invalidate();\n      }\n   };\n}\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew MouseEvent::Form1 );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.MouseEvent#1\">using System;\nusing System.Drawing;\nusing System.Windows.Forms;\n\nnamespace MouseEvent\n{\n    public class Form1 : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.Panel panel1;\n        private System.Windows.Forms.Label label1;\n        private System.Windows.Forms.Label label2;\n        private System.Windows.Forms.Label label3;\n        private System.Windows.Forms.Label label4;\n        private System.Windows.Forms.Label label5;\n        private System.Windows.Forms.Label label6;\n        private System.Windows.Forms.Label label7;\n        private System.Windows.Forms.Label label8;\n        private System.Windows.Forms.Label label9;\n        private System.Windows.Forms.Button clearButton;\n        private System.Drawing.Drawing2D.GraphicsPath mousePath;\n        private System.Windows.Forms.GroupBox groupBox1;\n\n        private int fontSize = 20;        \n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new Form1());\n        }\n\n        public Form1()\n        {            \n            mousePath = new System.Drawing.Drawing2D.GraphicsPath();\n\n            this.panel1 = new System.Windows.Forms.Panel();\n            this.label1 = new System.Windows.Forms.Label();\n            this.clearButton = new System.Windows.Forms.Button();\n            this.label2 = new System.Windows.Forms.Label();\n            this.label3 = new System.Windows.Forms.Label();\n            this.label4 = new System.Windows.Forms.Label();\n            this.label5 = new System.Windows.Forms.Label();\n            this.label6 = new System.Windows.Forms.Label();\n            this.label7 = new System.Windows.Forms.Label();\n            this.label8 = new System.Windows.Forms.Label();\n            this.label9 = new System.Windows.Forms.Label();\n            this.groupBox1 = new System.Windows.Forms.GroupBox();\n\n            // Mouse Events Label\n            this.label1.Location = new System.Drawing.Point(24, 504);\n            this.label1.Size = new System.Drawing.Size(392, 23);\n            // DoubleClickSize Label\n            this.label2.AutoSize = true;\n            this.label2.Location = new System.Drawing.Point(24, 48);\n            this.label2.Size = new System.Drawing.Size(35, 13);\n            // DoubleClickTime Label\n            this.label3.AutoSize = true;\n            this.label3.Location = new System.Drawing.Point(24, 72);\n            this.label3.Size = new System.Drawing.Size(35, 13);\n            // MousePresent Label\n            this.label4.AutoSize = true;\n            this.label4.Location = new System.Drawing.Point(24, 96);\n            this.label4.Size = new System.Drawing.Size(35, 13);\n            // MouseButtons Label\n            this.label5.AutoSize = true;\n            this.label5.Location = new System.Drawing.Point(24, 120);\n            this.label5.Size = new System.Drawing.Size(35, 13);\n            // MouseButtonsSwapped Label\n            this.label6.AutoSize = true;\n            this.label6.Location = new System.Drawing.Point(320, 48);\n            this.label6.Size = new System.Drawing.Size(35, 13);\n            // MouseWheelPresent Label\n            this.label7.AutoSize = true;\n            this.label7.Location = new System.Drawing.Point(320, 72);\n            this.label7.Size = new System.Drawing.Size(35, 13);\n            // MouseWheelScrollLines Label\n            this.label8.AutoSize = true;\n            this.label8.Location = new System.Drawing.Point(320, 96);\n            this.label8.Size = new System.Drawing.Size(35, 13);\n            // NativeMouseWheelSupport Label\n            this.label9.AutoSize = true;\n            this.label9.Location = new System.Drawing.Point(320, 120);\n            this.label9.Size = new System.Drawing.Size(35, 13);\n\n            // Mouse Panel\n            this.panel1.Anchor = ((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) \n                | System.Windows.Forms.AnchorStyles.Right);\n            this.panel1.BackColor = System.Drawing.SystemColors.ControlDark;\n            this.panel1.Location = new System.Drawing.Point(16, 160);\n            this.panel1.Size = new System.Drawing.Size(664, 320);\n            this.panel1.MouseUp += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseUp);\n            this.panel1.Paint += new System.Windows.Forms.PaintEventHandler(this.panel1_Paint);\n            this.panel1.MouseEnter += new System.EventHandler(this.panel1_MouseEnter);\n            this.panel1.MouseHover += new System.EventHandler(this.panel1_MouseHover);\n            this.panel1.MouseMove += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseMove);\n            this.panel1.MouseLeave += new System.EventHandler(this.panel1_MouseLeave);\n            this.panel1.MouseDown += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseDown);\n            this.panel1.MouseWheel += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseWheel);\n\n            // Clear Button\n            this.clearButton.Anchor = (System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right);\n            this.clearButton.Location = new System.Drawing.Point(592, 504);\n            this.clearButton.TabIndex = 1;\n            this.clearButton.Text = &quot;Clear&quot;;\n            this.clearButton.Click += new System.EventHandler(this.clearButton_Click);\n            \n            // GroupBox\n            this.groupBox1.Anchor = ((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) \n                | System.Windows.Forms.AnchorStyles.Right);\n            this.groupBox1.Location = new System.Drawing.Point(16, 24);\n            this.groupBox1.Size = new System.Drawing.Size(664, 128);\n            this.groupBox1.Text = &quot;System.Windows.Forms.SystemInformation&quot;;\n\n            // Set up how the form should be displayed and add the controls to the form.\n            this.ClientSize = new System.Drawing.Size(696, 534);\n            this.Controls.AddRange(new System.Windows.Forms.Control[] {\n                                        this.label9,this.label8,this.label7,this.label6,\n                                        this.label5,this.label4,this.label3,this.label2,\n                                        this.clearButton,this.panel1,this.label1,this.groupBox1});\n            this.Text = &quot;Mouse Event Example&quot;;\n\n            // Displays information about the system mouse.\n            label2.Text = &quot;SystemInformation.DoubleClickSize: &quot; + SystemInformation.DoubleClickSize.ToString();\n            label3.Text = &quot;SystemInformation.DoubleClickTime: &quot; + SystemInformation.DoubleClickTime.ToString();\n            label4.Text = &quot;SystemInformation.MousePresent: &quot; + SystemInformation.MousePresent.ToString();\n            label5.Text = &quot;SystemInformation.MouseButtons: &quot; + SystemInformation.MouseButtons.ToString();\n            label6.Text = &quot;SystemInformation.MouseButtonsSwapped: &quot; + SystemInformation.MouseButtonsSwapped.ToString();\n            label7.Text = &quot;SystemInformation.MouseWheelPresent: &quot; + SystemInformation.MouseWheelPresent.ToString();\n            label8.Text = &quot;SystemInformation.MouseWheelScrollLines: &quot; + SystemInformation.MouseWheelScrollLines.ToString();\n            label9.Text = &quot;SystemInformation.NativeMouseWheelSupport: &quot; + SystemInformation.NativeMouseWheelSupport.ToString();\n\n        }\n\n        private void panel1_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e) \n        {\n            // Update the mouse path with the mouse information\n            Point mouseDownLocation = new Point(e.X, e.Y);\n\n            string eventString = null;\n            switch (e.Button) {\n                case MouseButtons.Left:\n                    eventString = &quot;L&quot;;\n                    break;\n                case MouseButtons.Right:\n                    eventString = &quot;R&quot;;\n                    break;\n                case MouseButtons.Middle:\n                    eventString = &quot;M&quot;;\n                    break;\n                case MouseButtons.XButton1:\n                    eventString = &quot;X1&quot;;\n                    break;\n                case MouseButtons.XButton2:\n                    eventString = &quot;X2&quot;;\n                    break;\n                case MouseButtons.None:\n                default:\n                    break;\n            }\n\n            if (eventString != null) \n            {\n                mousePath.AddString(eventString, FontFamily.GenericSerif, (int)FontStyle.Bold, fontSize, mouseDownLocation, StringFormat.GenericDefault);\n            }\n            else \n            {\n                mousePath.AddLine(mouseDownLocation,mouseDownLocation);\n            }\n            panel1.Focus();\n            panel1.Invalidate();\n        }\n\n        private void panel1_MouseEnter(object sender, System.EventArgs e) \n        {\n            // Update the mouse event label to indicate the MouseEnter event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseEnter&quot;;\n        }\n\n        private void panel1_MouseHover(object sender, System.EventArgs e) \n        {\n            // Update the mouse event label to indicate the MouseHover event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseHover&quot;;\n        }\n\n        private void panel1_MouseLeave(object sender, System.EventArgs e) \n        {\n            // Update the mouse event label to indicate the MouseLeave event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseLeave&quot;;\n        }\n\n        private void panel1_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)\n        {\n            // Update the mouse path that is drawn onto the Panel.\n            int mouseX = e.X;\n            int mouseY = e.Y;\n            \n            mousePath.AddLine(mouseX,mouseY,mouseX,mouseY);\n        }\n\n        private void panel1_MouseWheel(object sender, System.Windows.Forms.MouseEventArgs e)\n        {\n            // Update the drawing based upon the mouse wheel scrolling.\n      \n            int numberOfTextLinesToMove = e.Delta * SystemInformation.MouseWheelScrollLines / 120;\n            int numberOfPixelsToMove = numberOfTextLinesToMove * fontSize;\n\n            if (numberOfPixelsToMove != 0) {\n                System.Drawing.Drawing2D.Matrix translateMatrix = new  System.Drawing.Drawing2D.Matrix();\n                translateMatrix.Translate(0, numberOfPixelsToMove);\n                mousePath.Transform(translateMatrix);\n            }\n            panel1.Invalidate();\n        }\n        private void panel1_MouseUp(object sender, System.Windows.Forms.MouseEventArgs e) \n        {\n            Point mouseUpLocation = new System.Drawing.Point(e.X, e.Y);\n        \n            // Show the number of clicks in the path graphic.\n            int numberOfClicks = e.Clicks;\n            mousePath.AddString(&quot;    &quot; + numberOfClicks.ToString(), \n                        FontFamily.GenericSerif, (int)FontStyle.Bold, \n                        fontSize, mouseUpLocation, StringFormat.GenericDefault);\n\n            panel1.Invalidate();\n        }\n\n        private void panel1_Paint(object sender, System.Windows.Forms.PaintEventArgs e) \n        {    \n            // Perform the painting of the Panel.\n            e.Graphics.DrawPath(System.Drawing.Pens.DarkRed, mousePath);\n        }\n\n        private void clearButton_Click(object sender, System.EventArgs e)\n        {\n            // Clear the Panel display.\n            mousePath.Dispose();\n            mousePath = new System.Drawing.Drawing2D.GraphicsPath();\n            panel1.Invalidate();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.MouseEvent#1\">Imports System\nImports System.Drawing\nImports System.Windows.Forms\n\nNamespace MouseEvent\n    &#39; Summary description for Form1.\n    Public NotInheritable Class Form1\n        Inherits System.Windows.Forms.Form\n\n        Friend WithEvents panel1 As System.Windows.Forms.Panel\n        Private label1 As System.Windows.Forms.Label\n        Private label2 As System.Windows.Forms.Label\n        Private label3 As System.Windows.Forms.Label\n        Private label4 As System.Windows.Forms.Label\n        Private label5 As System.Windows.Forms.Label\n        Private label6 As System.Windows.Forms.Label\n        Private label7 As System.Windows.Forms.Label\n        Private label8 As System.Windows.Forms.Label\n        Private label9 As System.Windows.Forms.Label\n        Friend WithEvents clearButton As System.Windows.Forms.Button\n        Private mousePath As System.Drawing.Drawing2D.GraphicsPath\n        Private groupBox1 As System.Windows.Forms.GroupBox\n\n        Private fontSize As Integer = 20\n        \n        &lt;System.STAThread()&gt;  _\n        Public Shared Sub Main()\n            System.Windows.Forms.Application.Run(New Form1())\n        End Sub &#39;Main\n\n        Public Sub New()\n\n            mousePath = New System.Drawing.Drawing2D.GraphicsPath()\n\n            Me.panel1 = New System.Windows.Forms.Panel()\n            Me.label1 = New System.Windows.Forms.Label()\n            Me.clearButton = New System.Windows.Forms.Button()\n            Me.label2 = New System.Windows.Forms.Label()\n            Me.label3 = New System.Windows.Forms.Label()\n            Me.label4 = New System.Windows.Forms.Label()\n            Me.label5 = New System.Windows.Forms.Label()\n            Me.label6 = New System.Windows.Forms.Label()\n            Me.label7 = New System.Windows.Forms.Label()\n            Me.label8 = New System.Windows.Forms.Label()\n            Me.label9 = New System.Windows.Forms.Label()\n            Me.groupBox1 = New System.Windows.Forms.GroupBox()\n\n            &#39; Mouse Events Label\n            Me.label1.Location = New System.Drawing.Point(24, 504) \n            Me.label1.Size = New System.Drawing.Size(392, 23) \n            &#39; DoubleClickSize Label\n            Me.label2.AutoSize = True \n            Me.label2.Location = New System.Drawing.Point(24, 48) \n            Me.label2.Size = New System.Drawing.Size(35, 13) \n            &#39; DoubleClickTime Label\n            Me.label3.AutoSize = True \n            Me.label3.Location = New System.Drawing.Point(24, 72) \n            Me.label3.Size = New System.Drawing.Size(35, 13) \n            &#39; MousePresent Label\n            Me.label4.AutoSize = True \n            Me.label4.Location = New System.Drawing.Point(24, 96) \n            Me.label4.Size = New System.Drawing.Size(35, 13) \n            &#39; MouseButtons Label\n            Me.label5.AutoSize = True \n            Me.label5.Location = New System.Drawing.Point(24, 120) \n            Me.label5.Size = New System.Drawing.Size(35, 13) \n            &#39; MouseButtonsSwapped Label\n            Me.label6.AutoSize = True \n            Me.label6.Location = New System.Drawing.Point(320, 48) \n            Me.label6.Size = New System.Drawing.Size(35, 13) \n            &#39; MouseWheelPresent Label\n            Me.label7.AutoSize = True \n            Me.label7.Location = New System.Drawing.Point(320, 72) \n            Me.label7.Size = New System.Drawing.Size(35, 13) \n            &#39; MouseWheelScrollLines Label\n            Me.label8.AutoSize = True \n            Me.label8.Location = New System.Drawing.Point(320, 96) \n            Me.label8.Size = New System.Drawing.Size(35, 13) \n            &#39; NativeMouseWheelSupport Label\n            Me.label9.AutoSize = True \n            Me.label9.Location = New System.Drawing.Point(320, 120) \n            Me.label9.Size = New System.Drawing.Size(35, 13) \n\n            &#39; Mouse Panel\n            Me.panel1.Anchor = System.Windows.Forms.AnchorStyles.Top Or _\n                                    System.Windows.Forms.AnchorStyles.Left Or _\n                                    System.Windows.Forms.AnchorStyles.Right\n            Me.panel1.BackColor = System.Drawing.SystemColors.ControlDark\n            Me.panel1.Location = New System.Drawing.Point(16, 160)\n            Me.panel1.Size = New System.Drawing.Size(664, 320)\n\n            &#39; Clear Button\n            Me.clearButton.Anchor = System.Windows.Forms.AnchorStyles.Top Or _\n                                    System.Windows.Forms.AnchorStyles.Right\n            Me.clearButton.Location = New System.Drawing.Point(592, 504)\n            Me.clearButton.TabIndex = 1\n            Me.clearButton.Text = &quot;Clear&quot;\n\n            &#39; GroupBox\n            Me.groupBox1.Anchor = System.Windows.Forms.AnchorStyles.Top Or _\n                                  System.Windows.Forms.AnchorStyles.Left Or _\n                                  System.Windows.Forms.AnchorStyles.Right\n            Me.groupBox1.Location = New System.Drawing.Point(16, 24)\n            Me.groupBox1.Size = New System.Drawing.Size(664, 128)\n            Me.groupBox1.Text = &quot;System.Windows.Forms.SystemInformation&quot;\n\n            &#39; Set up how the form should be displayed and add the controls to the form.\n            Me.ClientSize = New System.Drawing.Size(696, 534)\n            Me.Controls.AddRange(New System.Windows.Forms.Control() {Me.label9, _\n                            Me.label8, Me.label7, Me.label6, Me.label5, Me.label4, _\n                            Me.label3, Me.label2, Me.clearButton, Me.panel1, Me.label1, Me.groupBox1})\n\n            Me.Text = &quot;Mouse Event Example&quot;\n\n            &#39; Display information about the system mouse.\n            label2.Text = &quot;SystemInformation.DoubleClickSize: &quot; + SystemInformation.DoubleClickSize.ToString()\n            label3.Text = &quot;SystemInformation.DoubleClickTime: &quot; + SystemInformation.DoubleClickTime.ToString()\n            label4.Text = &quot;SystemInformation.MousePresent: &quot; + SystemInformation.MousePresent.ToString()\n            label5.Text = &quot;SystemInformation.MouseButtons: &quot; + SystemInformation.MouseButtons.ToString()\n            label6.Text = &quot;SystemInformation.MouseButtonsSwapped: &quot; + SystemInformation.MouseButtonsSwapped.ToString()\n            label7.Text = &quot;SystemInformation.MouseWheelPresent: &quot; + SystemInformation.MouseWheelPresent.ToString()\n            label8.Text = &quot;SystemInformation.MouseWheelScrollLines: &quot; + SystemInformation.MouseWheelScrollLines.ToString()\n            label9.Text = &quot;SystemInformation.NativeMouseWheelSupport: &quot; + SystemInformation.NativeMouseWheelSupport.ToString()\n        End Sub &#39;New\n\n        Private Sub panel1_MouseDown(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles panel1.MouseDown\n            &#39; Update the mouse path with the mouse information\n            Dim mouseDownLocation As New Point(e.X, e.Y)\n            \n            Dim eventString As String = Nothing\n            Select Case e.Button\n                Case MouseButtons.Left\n                    eventString = &quot;L&quot;\n                Case MouseButtons.Right\n                    eventString = &quot;R&quot;\n                Case MouseButtons.Middle\n                    eventString = &quot;M&quot;\n                Case MouseButtons.XButton1\n                    eventString = &quot;X1&quot;\n                Case MouseButtons.XButton2\n                    eventString = &quot;X2&quot;\n                Case MouseButtons.None:\n                     eventString = Nothing              \n            End Select\n            \n            If (eventString IsNot Nothing) Then\n                mousePath.AddString(eventString, FontFamily.GenericSerif, CInt(FontStyle.Bold), fontSize, mouseDownLocation, StringFormat.GenericDefault)\n            Else\n                mousePath.AddLine(mouseDownLocation, mouseDownLocation)\n            End If\n\n            panel1.Focus()\n            panel1.Invalidate()\n        End Sub \n        \n        Private Sub panel1_MouseEnter(sender As Object, e As System.EventArgs) Handles panel1.MouseEnter\n            &#39; Update the mouse event label to indicate the MouseEnter event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseEnter&quot;\n        End Sub\n        \n        Private Sub panel1_MouseHover(sender As Object, e As System.EventArgs) Handles panel1.MouseHover\n            &#39; Update the mouse event label to indicate the MouseHover event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseHover&quot;\n        End Sub\n        \n        Private Sub panel1_MouseLeave(sender As Object, e As System.EventArgs) Handles panel1.MouseLeave\n            &#39; Update the mouse event label to indicate the MouseLeave event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseLeave&quot;\n        End Sub\n        \n        Private Sub panel1_MouseMove(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles panel1.MouseMove\n            &#39; Update the mouse path that is drawn onto the Panel.\n            Dim mouseX As Integer = e.X\n            Dim mouseY As Integer = e.Y\n            \n            mousePath.AddLine(mouseX, mouseY, mouseX, mouseY)\n        End Sub\n        Private Sub panel1_MouseWheel(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles panel1.MouseWheel\n            &#39; Update the drawing based upon the mouse wheel scrolling.\n            Dim numberOfTextLinesToMove As Integer = CInt(e.Delta * SystemInformation.MouseWheelScrollLines / 120) \n            Dim numberOfPixelsToMove As Integer = numberOfTextLinesToMove * fontSize\n            \n            If numberOfPixelsToMove &lt;&gt; 0 Then\n                Dim translateMatrix As New System.Drawing.Drawing2D.Matrix()\n                translateMatrix.Translate(0, numberOfPixelsToMove)\n                mousePath.Transform(translateMatrix)\n            End If\n\n            panel1.Invalidate()\n        End Sub\n        Private Sub panel1_MouseUp(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles panel1.MouseUp\n            Dim mouseUpLocation As New System.Drawing.Point(e.X, e.Y)\n            \n            &#39; Show the number of clicks in the path graphic.\n            Dim numberOfClicks As Integer = e.Clicks\n            mousePath.AddString(&quot;     &quot; + numberOfClicks.ToString(), _\n                                FontFamily.GenericSerif, CInt(FontStyle.Bold), _\n                                fontSize, mouseUpLocation, StringFormat.GenericDefault)\n\n            panel1.Invalidate()\n        End Sub\n        \n        Private Sub panel1_Paint(sender As Object, e As System.Windows.Forms.PaintEventArgs) Handles panel1.Paint\n            &#39; Perform the painting of the Panel.\n            e.Graphics.DrawPath(System.Drawing.Pens.DarkRed, mousePath)\n        End Sub\n        \n        Private Sub clearButton_Click(sender As Object, e As System.EventArgs) Handles clearButton.Click\n            &#39; Clear the Panel display.\n            mousePath.Dispose()\n            mousePath = New System.Drawing.Drawing2D.GraphicsPath()\n            panel1.Invalidate()\n        End Sub\n        \n    End Class &#39;Form1\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_MouseMove\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseMove</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the mouse pointer is moved over the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.MouseEventHandler MouseMove;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Typical uses of MouseMove are to change the control&#39;s color or to paint a raised rectangle around the control.  </p>\n<p> Mouse events occur in the following order:  </p>\n<ol>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseEnter\" data-linktype=\"relative-path\">MouseEnter</a>  \n</li>\n<li><p>MouseMove  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseHover\" data-linktype=\"relative-path\">MouseHover</a> / <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> / <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseWheel\" data-linktype=\"relative-path\">MouseWheel</a>  </p>\n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseUp\" data-linktype=\"relative-path\">MouseUp</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseLeave\" data-linktype=\"relative-path\">MouseLeave</a>  \n\n</li>\n</ol>\n<div class=\"NOTE\"><h5>Note</h5><p> The following events are not raised for the <a class=\"xref\" href=\"system.windows.forms.tabcontrol\" data-linktype=\"relative-path\">TabControl</a> class unless there is at least one <a class=\"xref\" href=\"system.windows.forms.tabpage\" data-linktype=\"relative-path\">TabPage</a> in the <a class=\"xref\" href=\"system.windows.forms.tabcontrol#System_Windows_Forms_TabControl_TabPages_\" data-linktype=\"relative-path\">TabPages</a> collection: <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Click\" data-linktype=\"relative-path\">Click</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoubleClick\" data-linktype=\"relative-path\">DoubleClick</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseUp\" data-linktype=\"relative-path\">MouseUp</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseHover\" data-linktype=\"relative-path\">MouseHover</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseEnter\" data-linktype=\"relative-path\">MouseEnter</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseLeave\" data-linktype=\"relative-path\">MouseLeave</a> and MouseMove. If there is at least one <a class=\"xref\" href=\"system.windows.forms.tabpage\" data-linktype=\"relative-path\">TabPage</a> in the collection, and the user interacts with the tab control&#39;s header (where the <a class=\"xref\" href=\"system.windows.forms.tabpage\" data-linktype=\"relative-path\">TabPage</a> names appear), the <a class=\"xref\" href=\"system.windows.forms.tabcontrol\" data-linktype=\"relative-path\">TabControl</a> raises the appropriate event. However, if the user interaction is within the client area of the tab page, the <a class=\"xref\" href=\"system.windows.forms.tabpage\" data-linktype=\"relative-path\">TabPage</a> raises the appropriate event.  </p>\n</div>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using different mouse events to draw the path of the mouse on a <a class=\"xref\" href=\"system.windows.forms.panel\" data-linktype=\"relative-path\">Panel</a>. A line segment is added to the <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath\" data-linktype=\"relative-path\">GraphicsPath</a> for each MouseMove and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> events that occur. To update the graphics, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invalidate_\" data-linktype=\"relative-path\">Invalidate</a> method is called for the <a class=\"xref\" href=\"system.windows.forms.panel\" data-linktype=\"relative-path\">Panel</a> on each <code>MouseDown</code> and <code>MouseUp</code> event. In addition, the graphic path is scrolled up or down when the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseWheel\" data-linktype=\"relative-path\">MouseWheel</a> event occurs. Additional mouse events, like <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseHover\" data-linktype=\"relative-path\">MouseHover</a>, are identified on screen as well. Also displayed on the screen is additional information about the mouse from the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.MouseEvent#1\">#using &lt;System.dll&gt;\n#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n\nusing namespace System;\nusing namespace System::Drawing;\nusing namespace System::Windows::Forms;\n\nnamespace MouseEvent\n{\n   public ref class Form1: public System::Windows::Forms::Form\n   {\n   private:\n      System::Windows::Forms::Panel^ panel1;\n      System::Windows::Forms::Label ^ label1;\n      System::Windows::Forms::Label ^ label2;\n      System::Windows::Forms::Label ^ label3;\n      System::Windows::Forms::Label ^ label4;\n      System::Windows::Forms::Label ^ label5;\n      System::Windows::Forms::Label ^ label6;\n      System::Windows::Forms::Label ^ label7;\n      System::Windows::Forms::Label ^ label8;\n      System::Windows::Forms::Label ^ label9;\n      System::Windows::Forms::Button^ clearButton;\n      System::Drawing::Drawing2D::GraphicsPath^ mousePath;\n      System::Windows::Forms::GroupBox^ groupBox1;\n      int fontSize;\n\n   public:\n      Form1()\n      {\n         fontSize = 20;\n         mousePath = gcnew System::Drawing::Drawing2D::GraphicsPath;\n         this-&gt;panel1 = gcnew System::Windows::Forms::Panel;\n         this-&gt;label1 = gcnew System::Windows::Forms::Label;\n         this-&gt;clearButton = gcnew System::Windows::Forms::Button;\n         this-&gt;label2 = gcnew System::Windows::Forms::Label;\n         this-&gt;label3 = gcnew System::Windows::Forms::Label;\n         this-&gt;label4 = gcnew System::Windows::Forms::Label;\n         this-&gt;label5 = gcnew System::Windows::Forms::Label;\n         this-&gt;label6 = gcnew System::Windows::Forms::Label;\n         this-&gt;label7 = gcnew System::Windows::Forms::Label;\n         this-&gt;label8 = gcnew System::Windows::Forms::Label;\n         this-&gt;label9 = gcnew System::Windows::Forms::Label;\n         this-&gt;groupBox1 = gcnew System::Windows::Forms::GroupBox;\n         \n         // Mouse Events Label\n         this-&gt;label1-&gt;Location = System::Drawing::Point( 24, 504 );\n         this-&gt;label1-&gt;Size = System::Drawing::Size( 392, 23 );\n         \n         // DoubleClickSize Label\n         this-&gt;label2-&gt;AutoSize = true;\n         this-&gt;label2-&gt;Location = System::Drawing::Point( 24, 48 );\n         this-&gt;label2-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // DoubleClickTime Label\n         this-&gt;label3-&gt;AutoSize = true;\n         this-&gt;label3-&gt;Location = System::Drawing::Point( 24, 72 );\n         this-&gt;label3-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // MousePresent Label\n         this-&gt;label4-&gt;AutoSize = true;\n         this-&gt;label4-&gt;Location = System::Drawing::Point( 24, 96 );\n         this-&gt;label4-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // MouseButtons Label\n         this-&gt;label5-&gt;AutoSize = true;\n         this-&gt;label5-&gt;Location = System::Drawing::Point( 24, 120 );\n         this-&gt;label5-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // MouseButtonsSwapped Label\n         this-&gt;label6-&gt;AutoSize = true;\n         this-&gt;label6-&gt;Location = System::Drawing::Point( 320, 48 );\n         this-&gt;label6-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // MouseWheelPresent Label\n         this-&gt;label7-&gt;AutoSize = true;\n         this-&gt;label7-&gt;Location = System::Drawing::Point( 320, 72 );\n         this-&gt;label7-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // MouseWheelScrollLines Label\n         this-&gt;label8-&gt;AutoSize = true;\n         this-&gt;label8-&gt;Location = System::Drawing::Point( 320, 96 );\n         this-&gt;label8-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // NativeMouseWheelSupport Label\n         this-&gt;label9-&gt;AutoSize = true;\n         this-&gt;label9-&gt;Location = System::Drawing::Point( 320, 120 );\n         this-&gt;label9-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // Mouse Panel\n         this-&gt;panel1-&gt;Anchor = static_cast&lt;System::Windows::Forms::AnchorStyles&gt;(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n         this-&gt;panel1-&gt;BackColor = System::Drawing::SystemColors::ControlDark;\n         this-&gt;panel1-&gt;Location = System::Drawing::Point( 16, 160 );\n         this-&gt;panel1-&gt;Size = System::Drawing::Size( 664, 320 );\n         this-&gt;panel1-&gt;MouseUp += gcnew System::Windows::Forms::MouseEventHandler( this, &amp;Form1::panel1_MouseUp );\n         this-&gt;panel1-&gt;Paint += gcnew System::Windows::Forms::PaintEventHandler( this, &amp;Form1::panel1_Paint );\n         this-&gt;panel1-&gt;MouseEnter += gcnew System::EventHandler( this, &amp;Form1::panel1_MouseEnter );\n         this-&gt;panel1-&gt;MouseHover += gcnew System::EventHandler( this, &amp;Form1::panel1_MouseHover );\n         this-&gt;panel1-&gt;MouseMove += gcnew System::Windows::Forms::MouseEventHandler( this, &amp;Form1::panel1_MouseMove );\n         this-&gt;panel1-&gt;MouseLeave += gcnew System::EventHandler( this, &amp;Form1::panel1_MouseLeave );\n         this-&gt;panel1-&gt;MouseDown += gcnew System::Windows::Forms::MouseEventHandler( this, &amp;Form1::panel1_MouseDown );\n         this-&gt;panel1-&gt;MouseWheel += gcnew System::Windows::Forms::MouseEventHandler( this, &amp;Form1::panel1_MouseWheel );\n         \n         // Clear Button\n         this-&gt;clearButton-&gt;Anchor = static_cast&lt;System::Windows::Forms::AnchorStyles&gt;(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Right);\n         this-&gt;clearButton-&gt;Location = System::Drawing::Point( 592, 504 );\n         this-&gt;clearButton-&gt;TabIndex = 1;\n         this-&gt;clearButton-&gt;Text = &quot;Clear&quot;;\n         this-&gt;clearButton-&gt;Click += gcnew System::EventHandler( this, &amp;Form1::clearButton_Click );\n         \n         // GroupBox\n         this-&gt;groupBox1-&gt;Anchor = static_cast&lt;System::Windows::Forms::AnchorStyles&gt;(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n         this-&gt;groupBox1-&gt;Location = System::Drawing::Point( 16, 24 );\n         this-&gt;groupBox1-&gt;Size = System::Drawing::Size( 664, 128 );\n         this-&gt;groupBox1-&gt;Text = &quot;System::Windows::Forms::SystemInformation&quot;;\n         \n         // Set up how the form should be displayed and add the controls to the form.\n         this-&gt;ClientSize = System::Drawing::Size( 696, 534 );\n         array&lt;System::Windows::Forms::Control^&gt;^temp0 = {this-&gt;label9,this-&gt;label8,this-&gt;label7,this-&gt;label6,this-&gt;label5,this-&gt;label4,this-&gt;label3,this-&gt;label2,this-&gt;clearButton,this-&gt;panel1,this-&gt;label1,this-&gt;groupBox1};\n         this-&gt;Controls-&gt;AddRange( temp0 );\n         this-&gt;Text = &quot;Mouse Event Example&quot;;\n         \n         // Displays information about the system mouse.\n         label2-&gt;Text = &quot;SystemInformation::DoubleClickSize: {0}&quot;,SystemInformation::DoubleClickSize;\n         label3-&gt;Text = &quot;SystemInformation::DoubleClickTime: {0}&quot;,SystemInformation::DoubleClickTime;\n         label4-&gt;Text = &quot;SystemInformation::MousePresent: {0}&quot;,SystemInformation::MousePresent;\n         label5-&gt;Text = &quot;SystemInformation::MouseButtons: {0}&quot;,SystemInformation::MouseButtons;\n         label6-&gt;Text = &quot;SystemInformation::MouseButtonsSwapped: {0}&quot;,SystemInformation::MouseButtonsSwapped;\n         label7-&gt;Text = &quot;SystemInformation::MouseWheelPresent: {0}&quot;,SystemInformation::MouseWheelPresent;\n         label8-&gt;Text = &quot;SystemInformation::MouseWheelScrollLines: {0}&quot;,SystemInformation::MouseWheelScrollLines;\n         label9-&gt;Text = &quot;SystemInformation::NativeMouseWheelSupport: {0}&quot;,SystemInformation::NativeMouseWheelSupport;\n      }\n\n   private:\n      void panel1_MouseDown( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n      {\n         // Update the mouse path with the mouse information\n         Point mouseDownLocation = Point(e-&gt;X,e-&gt;Y);\n         String^ eventString = nullptr;\n         switch ( e-&gt;Button )\n         {\n            case ::MouseButtons::Left:\n               eventString = &quot;L&quot;;\n               break;\n\n            case ::MouseButtons::Right:\n               eventString = &quot;R&quot;;\n               break;\n\n            case ::MouseButtons::Middle:\n               eventString = &quot;M&quot;;\n               break;\n\n            case ::MouseButtons::XButton1:\n               eventString = &quot;X1&quot;;\n               break;\n\n            case ::MouseButtons::XButton2:\n               eventString = &quot;X2&quot;;\n               break;\n\n            case ::MouseButtons::None:\n            default:\n               break;\n         }\n         if ( eventString != nullptr )\n         {\n            mousePath-&gt;AddString( eventString, FontFamily::GenericSerif, (int)FontStyle::Bold, (float)fontSize, mouseDownLocation, StringFormat::GenericDefault );\n         }\n         else\n         {\n            mousePath-&gt;AddLine( mouseDownLocation, mouseDownLocation );\n         }\n\n         panel1-&gt;Focus();\n         panel1-&gt;Invalidate();\n      }\n\n      void panel1_MouseEnter( Object^ sender, System::EventArgs^ /*e*/ )\n      {\n         \n         // Update the mouse event label to indicate the MouseEnter event occurred.\n         label1-&gt;Text = String::Concat( sender-&gt;GetType(), &quot;: MouseEnter&quot; );\n      }\n\n      void panel1_MouseHover( Object^ sender, System::EventArgs^ /*e*/ )\n      {\n         \n         // Update the mouse event label to indicate the MouseHover event occurred.\n         label1-&gt;Text = String::Concat( sender-&gt;GetType(), &quot;: MouseHover&quot; );\n      }\n\n      void panel1_MouseLeave( Object^ sender, System::EventArgs^ /*e*/ )\n      {\n         \n         // Update the mouse event label to indicate the MouseLeave event occurred.\n         label1-&gt;Text = String::Concat( sender-&gt;GetType(), &quot;: MouseLeave&quot; );\n      }\n\n      void panel1_MouseMove( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n      {\n         // Update the mouse path that is drawn onto the Panel.\n         int mouseX = e-&gt;X;\n         int mouseY = e-&gt;Y;\n         mousePath-&gt;AddLine( mouseX, mouseY, mouseX, mouseY );\n      }\n\n      void panel1_MouseWheel( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n      {\n         // Update the drawing based upon the mouse wheel scrolling.\n         int numberOfTextLinesToMove = e-&gt;Delta * SystemInformation::MouseWheelScrollLines / 120;\n         int numberOfPixelsToMove = numberOfTextLinesToMove * fontSize;\n         if ( numberOfPixelsToMove != 0 )\n         {\n            System::Drawing::Drawing2D::Matrix^ translateMatrix = gcnew System::Drawing::Drawing2D::Matrix;\n            translateMatrix-&gt;Translate( 0, (float)numberOfPixelsToMove );\n            mousePath-&gt;Transform(translateMatrix);\n         }\n\n         panel1-&gt;Invalidate();\n      }\n\n      void panel1_MouseUp( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n      {\n         Point mouseUpLocation = System::Drawing::Point( e-&gt;X, e-&gt;Y );\n         \n         // Show the number of clicks in the path graphic.\n         int numberOfClicks = e-&gt;Clicks;\n         mousePath-&gt;AddString( String::Format( &quot;   {0}&quot;, numberOfClicks ), FontFamily::GenericSerif, (int)FontStyle::Bold, (float)fontSize, mouseUpLocation, StringFormat::GenericDefault );\n         panel1-&gt;Invalidate();\n      }\n\n      void panel1_Paint( Object^ /*sender*/, System::Windows::Forms::PaintEventArgs^ e )\n      {\n         // Perform the painting of the Panel.\n         e-&gt;Graphics-&gt;DrawPath( System::Drawing::Pens::DarkRed, mousePath );\n      }\n\n      void clearButton_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n      {\n         // Clear the Panel display.\n         delete mousePath;\n         mousePath = gcnew System::Drawing::Drawing2D::GraphicsPath;\n         panel1-&gt;Invalidate();\n      }\n   };\n}\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew MouseEvent::Form1 );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.MouseEvent#1\">using System;\nusing System.Drawing;\nusing System.Windows.Forms;\n\nnamespace MouseEvent\n{\n    public class Form1 : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.Panel panel1;\n        private System.Windows.Forms.Label label1;\n        private System.Windows.Forms.Label label2;\n        private System.Windows.Forms.Label label3;\n        private System.Windows.Forms.Label label4;\n        private System.Windows.Forms.Label label5;\n        private System.Windows.Forms.Label label6;\n        private System.Windows.Forms.Label label7;\n        private System.Windows.Forms.Label label8;\n        private System.Windows.Forms.Label label9;\n        private System.Windows.Forms.Button clearButton;\n        private System.Drawing.Drawing2D.GraphicsPath mousePath;\n        private System.Windows.Forms.GroupBox groupBox1;\n\n        private int fontSize = 20;        \n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new Form1());\n        }\n\n        public Form1()\n        {            \n            mousePath = new System.Drawing.Drawing2D.GraphicsPath();\n\n            this.panel1 = new System.Windows.Forms.Panel();\n            this.label1 = new System.Windows.Forms.Label();\n            this.clearButton = new System.Windows.Forms.Button();\n            this.label2 = new System.Windows.Forms.Label();\n            this.label3 = new System.Windows.Forms.Label();\n            this.label4 = new System.Windows.Forms.Label();\n            this.label5 = new System.Windows.Forms.Label();\n            this.label6 = new System.Windows.Forms.Label();\n            this.label7 = new System.Windows.Forms.Label();\n            this.label8 = new System.Windows.Forms.Label();\n            this.label9 = new System.Windows.Forms.Label();\n            this.groupBox1 = new System.Windows.Forms.GroupBox();\n\n            // Mouse Events Label\n            this.label1.Location = new System.Drawing.Point(24, 504);\n            this.label1.Size = new System.Drawing.Size(392, 23);\n            // DoubleClickSize Label\n            this.label2.AutoSize = true;\n            this.label2.Location = new System.Drawing.Point(24, 48);\n            this.label2.Size = new System.Drawing.Size(35, 13);\n            // DoubleClickTime Label\n            this.label3.AutoSize = true;\n            this.label3.Location = new System.Drawing.Point(24, 72);\n            this.label3.Size = new System.Drawing.Size(35, 13);\n            // MousePresent Label\n            this.label4.AutoSize = true;\n            this.label4.Location = new System.Drawing.Point(24, 96);\n            this.label4.Size = new System.Drawing.Size(35, 13);\n            // MouseButtons Label\n            this.label5.AutoSize = true;\n            this.label5.Location = new System.Drawing.Point(24, 120);\n            this.label5.Size = new System.Drawing.Size(35, 13);\n            // MouseButtonsSwapped Label\n            this.label6.AutoSize = true;\n            this.label6.Location = new System.Drawing.Point(320, 48);\n            this.label6.Size = new System.Drawing.Size(35, 13);\n            // MouseWheelPresent Label\n            this.label7.AutoSize = true;\n            this.label7.Location = new System.Drawing.Point(320, 72);\n            this.label7.Size = new System.Drawing.Size(35, 13);\n            // MouseWheelScrollLines Label\n            this.label8.AutoSize = true;\n            this.label8.Location = new System.Drawing.Point(320, 96);\n            this.label8.Size = new System.Drawing.Size(35, 13);\n            // NativeMouseWheelSupport Label\n            this.label9.AutoSize = true;\n            this.label9.Location = new System.Drawing.Point(320, 120);\n            this.label9.Size = new System.Drawing.Size(35, 13);\n\n            // Mouse Panel\n            this.panel1.Anchor = ((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) \n                | System.Windows.Forms.AnchorStyles.Right);\n            this.panel1.BackColor = System.Drawing.SystemColors.ControlDark;\n            this.panel1.Location = new System.Drawing.Point(16, 160);\n            this.panel1.Size = new System.Drawing.Size(664, 320);\n            this.panel1.MouseUp += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseUp);\n            this.panel1.Paint += new System.Windows.Forms.PaintEventHandler(this.panel1_Paint);\n            this.panel1.MouseEnter += new System.EventHandler(this.panel1_MouseEnter);\n            this.panel1.MouseHover += new System.EventHandler(this.panel1_MouseHover);\n            this.panel1.MouseMove += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseMove);\n            this.panel1.MouseLeave += new System.EventHandler(this.panel1_MouseLeave);\n            this.panel1.MouseDown += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseDown);\n            this.panel1.MouseWheel += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseWheel);\n\n            // Clear Button\n            this.clearButton.Anchor = (System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right);\n            this.clearButton.Location = new System.Drawing.Point(592, 504);\n            this.clearButton.TabIndex = 1;\n            this.clearButton.Text = &quot;Clear&quot;;\n            this.clearButton.Click += new System.EventHandler(this.clearButton_Click);\n            \n            // GroupBox\n            this.groupBox1.Anchor = ((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) \n                | System.Windows.Forms.AnchorStyles.Right);\n            this.groupBox1.Location = new System.Drawing.Point(16, 24);\n            this.groupBox1.Size = new System.Drawing.Size(664, 128);\n            this.groupBox1.Text = &quot;System.Windows.Forms.SystemInformation&quot;;\n\n            // Set up how the form should be displayed and add the controls to the form.\n            this.ClientSize = new System.Drawing.Size(696, 534);\n            this.Controls.AddRange(new System.Windows.Forms.Control[] {\n                                        this.label9,this.label8,this.label7,this.label6,\n                                        this.label5,this.label4,this.label3,this.label2,\n                                        this.clearButton,this.panel1,this.label1,this.groupBox1});\n            this.Text = &quot;Mouse Event Example&quot;;\n\n            // Displays information about the system mouse.\n            label2.Text = &quot;SystemInformation.DoubleClickSize: &quot; + SystemInformation.DoubleClickSize.ToString();\n            label3.Text = &quot;SystemInformation.DoubleClickTime: &quot; + SystemInformation.DoubleClickTime.ToString();\n            label4.Text = &quot;SystemInformation.MousePresent: &quot; + SystemInformation.MousePresent.ToString();\n            label5.Text = &quot;SystemInformation.MouseButtons: &quot; + SystemInformation.MouseButtons.ToString();\n            label6.Text = &quot;SystemInformation.MouseButtonsSwapped: &quot; + SystemInformation.MouseButtonsSwapped.ToString();\n            label7.Text = &quot;SystemInformation.MouseWheelPresent: &quot; + SystemInformation.MouseWheelPresent.ToString();\n            label8.Text = &quot;SystemInformation.MouseWheelScrollLines: &quot; + SystemInformation.MouseWheelScrollLines.ToString();\n            label9.Text = &quot;SystemInformation.NativeMouseWheelSupport: &quot; + SystemInformation.NativeMouseWheelSupport.ToString();\n\n        }\n\n        private void panel1_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e) \n        {\n            // Update the mouse path with the mouse information\n            Point mouseDownLocation = new Point(e.X, e.Y);\n\n            string eventString = null;\n            switch (e.Button) {\n                case MouseButtons.Left:\n                    eventString = &quot;L&quot;;\n                    break;\n                case MouseButtons.Right:\n                    eventString = &quot;R&quot;;\n                    break;\n                case MouseButtons.Middle:\n                    eventString = &quot;M&quot;;\n                    break;\n                case MouseButtons.XButton1:\n                    eventString = &quot;X1&quot;;\n                    break;\n                case MouseButtons.XButton2:\n                    eventString = &quot;X2&quot;;\n                    break;\n                case MouseButtons.None:\n                default:\n                    break;\n            }\n\n            if (eventString != null) \n            {\n                mousePath.AddString(eventString, FontFamily.GenericSerif, (int)FontStyle.Bold, fontSize, mouseDownLocation, StringFormat.GenericDefault);\n            }\n            else \n            {\n                mousePath.AddLine(mouseDownLocation,mouseDownLocation);\n            }\n            panel1.Focus();\n            panel1.Invalidate();\n        }\n\n        private void panel1_MouseEnter(object sender, System.EventArgs e) \n        {\n            // Update the mouse event label to indicate the MouseEnter event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseEnter&quot;;\n        }\n\n        private void panel1_MouseHover(object sender, System.EventArgs e) \n        {\n            // Update the mouse event label to indicate the MouseHover event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseHover&quot;;\n        }\n\n        private void panel1_MouseLeave(object sender, System.EventArgs e) \n        {\n            // Update the mouse event label to indicate the MouseLeave event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseLeave&quot;;\n        }\n\n        private void panel1_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)\n        {\n            // Update the mouse path that is drawn onto the Panel.\n            int mouseX = e.X;\n            int mouseY = e.Y;\n            \n            mousePath.AddLine(mouseX,mouseY,mouseX,mouseY);\n        }\n\n        private void panel1_MouseWheel(object sender, System.Windows.Forms.MouseEventArgs e)\n        {\n            // Update the drawing based upon the mouse wheel scrolling.\n      \n            int numberOfTextLinesToMove = e.Delta * SystemInformation.MouseWheelScrollLines / 120;\n            int numberOfPixelsToMove = numberOfTextLinesToMove * fontSize;\n\n            if (numberOfPixelsToMove != 0) {\n                System.Drawing.Drawing2D.Matrix translateMatrix = new  System.Drawing.Drawing2D.Matrix();\n                translateMatrix.Translate(0, numberOfPixelsToMove);\n                mousePath.Transform(translateMatrix);\n            }\n            panel1.Invalidate();\n        }\n        private void panel1_MouseUp(object sender, System.Windows.Forms.MouseEventArgs e) \n        {\n            Point mouseUpLocation = new System.Drawing.Point(e.X, e.Y);\n        \n            // Show the number of clicks in the path graphic.\n            int numberOfClicks = e.Clicks;\n            mousePath.AddString(&quot;    &quot; + numberOfClicks.ToString(), \n                        FontFamily.GenericSerif, (int)FontStyle.Bold, \n                        fontSize, mouseUpLocation, StringFormat.GenericDefault);\n\n            panel1.Invalidate();\n        }\n\n        private void panel1_Paint(object sender, System.Windows.Forms.PaintEventArgs e) \n        {    \n            // Perform the painting of the Panel.\n            e.Graphics.DrawPath(System.Drawing.Pens.DarkRed, mousePath);\n        }\n\n        private void clearButton_Click(object sender, System.EventArgs e)\n        {\n            // Clear the Panel display.\n            mousePath.Dispose();\n            mousePath = new System.Drawing.Drawing2D.GraphicsPath();\n            panel1.Invalidate();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.MouseEvent#1\">Imports System\nImports System.Drawing\nImports System.Windows.Forms\n\nNamespace MouseEvent\n    &#39; Summary description for Form1.\n    Public NotInheritable Class Form1\n        Inherits System.Windows.Forms.Form\n\n        Friend WithEvents panel1 As System.Windows.Forms.Panel\n        Private label1 As System.Windows.Forms.Label\n        Private label2 As System.Windows.Forms.Label\n        Private label3 As System.Windows.Forms.Label\n        Private label4 As System.Windows.Forms.Label\n        Private label5 As System.Windows.Forms.Label\n        Private label6 As System.Windows.Forms.Label\n        Private label7 As System.Windows.Forms.Label\n        Private label8 As System.Windows.Forms.Label\n        Private label9 As System.Windows.Forms.Label\n        Friend WithEvents clearButton As System.Windows.Forms.Button\n        Private mousePath As System.Drawing.Drawing2D.GraphicsPath\n        Private groupBox1 As System.Windows.Forms.GroupBox\n\n        Private fontSize As Integer = 20\n        \n        &lt;System.STAThread()&gt;  _\n        Public Shared Sub Main()\n            System.Windows.Forms.Application.Run(New Form1())\n        End Sub &#39;Main\n\n        Public Sub New()\n\n            mousePath = New System.Drawing.Drawing2D.GraphicsPath()\n\n            Me.panel1 = New System.Windows.Forms.Panel()\n            Me.label1 = New System.Windows.Forms.Label()\n            Me.clearButton = New System.Windows.Forms.Button()\n            Me.label2 = New System.Windows.Forms.Label()\n            Me.label3 = New System.Windows.Forms.Label()\n            Me.label4 = New System.Windows.Forms.Label()\n            Me.label5 = New System.Windows.Forms.Label()\n            Me.label6 = New System.Windows.Forms.Label()\n            Me.label7 = New System.Windows.Forms.Label()\n            Me.label8 = New System.Windows.Forms.Label()\n            Me.label9 = New System.Windows.Forms.Label()\n            Me.groupBox1 = New System.Windows.Forms.GroupBox()\n\n            &#39; Mouse Events Label\n            Me.label1.Location = New System.Drawing.Point(24, 504) \n            Me.label1.Size = New System.Drawing.Size(392, 23) \n            &#39; DoubleClickSize Label\n            Me.label2.AutoSize = True \n            Me.label2.Location = New System.Drawing.Point(24, 48) \n            Me.label2.Size = New System.Drawing.Size(35, 13) \n            &#39; DoubleClickTime Label\n            Me.label3.AutoSize = True \n            Me.label3.Location = New System.Drawing.Point(24, 72) \n            Me.label3.Size = New System.Drawing.Size(35, 13) \n            &#39; MousePresent Label\n            Me.label4.AutoSize = True \n            Me.label4.Location = New System.Drawing.Point(24, 96) \n            Me.label4.Size = New System.Drawing.Size(35, 13) \n            &#39; MouseButtons Label\n            Me.label5.AutoSize = True \n            Me.label5.Location = New System.Drawing.Point(24, 120) \n            Me.label5.Size = New System.Drawing.Size(35, 13) \n            &#39; MouseButtonsSwapped Label\n            Me.label6.AutoSize = True \n            Me.label6.Location = New System.Drawing.Point(320, 48) \n            Me.label6.Size = New System.Drawing.Size(35, 13) \n            &#39; MouseWheelPresent Label\n            Me.label7.AutoSize = True \n            Me.label7.Location = New System.Drawing.Point(320, 72) \n            Me.label7.Size = New System.Drawing.Size(35, 13) \n            &#39; MouseWheelScrollLines Label\n            Me.label8.AutoSize = True \n            Me.label8.Location = New System.Drawing.Point(320, 96) \n            Me.label8.Size = New System.Drawing.Size(35, 13) \n            &#39; NativeMouseWheelSupport Label\n            Me.label9.AutoSize = True \n            Me.label9.Location = New System.Drawing.Point(320, 120) \n            Me.label9.Size = New System.Drawing.Size(35, 13) \n\n            &#39; Mouse Panel\n            Me.panel1.Anchor = System.Windows.Forms.AnchorStyles.Top Or _\n                                    System.Windows.Forms.AnchorStyles.Left Or _\n                                    System.Windows.Forms.AnchorStyles.Right\n            Me.panel1.BackColor = System.Drawing.SystemColors.ControlDark\n            Me.panel1.Location = New System.Drawing.Point(16, 160)\n            Me.panel1.Size = New System.Drawing.Size(664, 320)\n\n            &#39; Clear Button\n            Me.clearButton.Anchor = System.Windows.Forms.AnchorStyles.Top Or _\n                                    System.Windows.Forms.AnchorStyles.Right\n            Me.clearButton.Location = New System.Drawing.Point(592, 504)\n            Me.clearButton.TabIndex = 1\n            Me.clearButton.Text = &quot;Clear&quot;\n\n            &#39; GroupBox\n            Me.groupBox1.Anchor = System.Windows.Forms.AnchorStyles.Top Or _\n                                  System.Windows.Forms.AnchorStyles.Left Or _\n                                  System.Windows.Forms.AnchorStyles.Right\n            Me.groupBox1.Location = New System.Drawing.Point(16, 24)\n            Me.groupBox1.Size = New System.Drawing.Size(664, 128)\n            Me.groupBox1.Text = &quot;System.Windows.Forms.SystemInformation&quot;\n\n            &#39; Set up how the form should be displayed and add the controls to the form.\n            Me.ClientSize = New System.Drawing.Size(696, 534)\n            Me.Controls.AddRange(New System.Windows.Forms.Control() {Me.label9, _\n                            Me.label8, Me.label7, Me.label6, Me.label5, Me.label4, _\n                            Me.label3, Me.label2, Me.clearButton, Me.panel1, Me.label1, Me.groupBox1})\n\n            Me.Text = &quot;Mouse Event Example&quot;\n\n            &#39; Display information about the system mouse.\n            label2.Text = &quot;SystemInformation.DoubleClickSize: &quot; + SystemInformation.DoubleClickSize.ToString()\n            label3.Text = &quot;SystemInformation.DoubleClickTime: &quot; + SystemInformation.DoubleClickTime.ToString()\n            label4.Text = &quot;SystemInformation.MousePresent: &quot; + SystemInformation.MousePresent.ToString()\n            label5.Text = &quot;SystemInformation.MouseButtons: &quot; + SystemInformation.MouseButtons.ToString()\n            label6.Text = &quot;SystemInformation.MouseButtonsSwapped: &quot; + SystemInformation.MouseButtonsSwapped.ToString()\n            label7.Text = &quot;SystemInformation.MouseWheelPresent: &quot; + SystemInformation.MouseWheelPresent.ToString()\n            label8.Text = &quot;SystemInformation.MouseWheelScrollLines: &quot; + SystemInformation.MouseWheelScrollLines.ToString()\n            label9.Text = &quot;SystemInformation.NativeMouseWheelSupport: &quot; + SystemInformation.NativeMouseWheelSupport.ToString()\n        End Sub &#39;New\n\n        Private Sub panel1_MouseDown(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles panel1.MouseDown\n            &#39; Update the mouse path with the mouse information\n            Dim mouseDownLocation As New Point(e.X, e.Y)\n            \n            Dim eventString As String = Nothing\n            Select Case e.Button\n                Case MouseButtons.Left\n                    eventString = &quot;L&quot;\n                Case MouseButtons.Right\n                    eventString = &quot;R&quot;\n                Case MouseButtons.Middle\n                    eventString = &quot;M&quot;\n                Case MouseButtons.XButton1\n                    eventString = &quot;X1&quot;\n                Case MouseButtons.XButton2\n                    eventString = &quot;X2&quot;\n                Case MouseButtons.None:\n                     eventString = Nothing              \n            End Select\n            \n            If (eventString IsNot Nothing) Then\n                mousePath.AddString(eventString, FontFamily.GenericSerif, CInt(FontStyle.Bold), fontSize, mouseDownLocation, StringFormat.GenericDefault)\n            Else\n                mousePath.AddLine(mouseDownLocation, mouseDownLocation)\n            End If\n\n            panel1.Focus()\n            panel1.Invalidate()\n        End Sub \n        \n        Private Sub panel1_MouseEnter(sender As Object, e As System.EventArgs) Handles panel1.MouseEnter\n            &#39; Update the mouse event label to indicate the MouseEnter event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseEnter&quot;\n        End Sub\n        \n        Private Sub panel1_MouseHover(sender As Object, e As System.EventArgs) Handles panel1.MouseHover\n            &#39; Update the mouse event label to indicate the MouseHover event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseHover&quot;\n        End Sub\n        \n        Private Sub panel1_MouseLeave(sender As Object, e As System.EventArgs) Handles panel1.MouseLeave\n            &#39; Update the mouse event label to indicate the MouseLeave event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseLeave&quot;\n        End Sub\n        \n        Private Sub panel1_MouseMove(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles panel1.MouseMove\n            &#39; Update the mouse path that is drawn onto the Panel.\n            Dim mouseX As Integer = e.X\n            Dim mouseY As Integer = e.Y\n            \n            mousePath.AddLine(mouseX, mouseY, mouseX, mouseY)\n        End Sub\n        Private Sub panel1_MouseWheel(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles panel1.MouseWheel\n            &#39; Update the drawing based upon the mouse wheel scrolling.\n            Dim numberOfTextLinesToMove As Integer = CInt(e.Delta * SystemInformation.MouseWheelScrollLines / 120) \n            Dim numberOfPixelsToMove As Integer = numberOfTextLinesToMove * fontSize\n            \n            If numberOfPixelsToMove &lt;&gt; 0 Then\n                Dim translateMatrix As New System.Drawing.Drawing2D.Matrix()\n                translateMatrix.Translate(0, numberOfPixelsToMove)\n                mousePath.Transform(translateMatrix)\n            End If\n\n            panel1.Invalidate()\n        End Sub\n        Private Sub panel1_MouseUp(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles panel1.MouseUp\n            Dim mouseUpLocation As New System.Drawing.Point(e.X, e.Y)\n            \n            &#39; Show the number of clicks in the path graphic.\n            Dim numberOfClicks As Integer = e.Clicks\n            mousePath.AddString(&quot;     &quot; + numberOfClicks.ToString(), _\n                                FontFamily.GenericSerif, CInt(FontStyle.Bold), _\n                                fontSize, mouseUpLocation, StringFormat.GenericDefault)\n\n            panel1.Invalidate()\n        End Sub\n        \n        Private Sub panel1_Paint(sender As Object, e As System.Windows.Forms.PaintEventArgs) Handles panel1.Paint\n            &#39; Perform the painting of the Panel.\n            e.Graphics.DrawPath(System.Drawing.Pens.DarkRed, mousePath)\n        End Sub\n        \n        Private Sub clearButton_Click(sender As Object, e As System.EventArgs) Handles clearButton.Click\n            &#39; Clear the Panel display.\n            mousePath.Dispose()\n            mousePath = New System.Drawing.Drawing2D.GraphicsPath()\n            panel1.Invalidate()\n        End Sub\n        \n    End Class &#39;Form1\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_MouseUp\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseUp</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the mouse pointer is over the control and a mouse button is released.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.MouseEventHandler MouseUp;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Mouse events occur in the following order:  </p>\n<ol>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseEnter\" data-linktype=\"relative-path\">MouseEnter</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseMove\" data-linktype=\"relative-path\">MouseMove</a>  \n</li>\n<li><p><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseHover\" data-linktype=\"relative-path\">MouseHover</a> / <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> / <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseWheel\" data-linktype=\"relative-path\">MouseWheel</a>  </p>\n</li>\n<li><p>MouseUp  </p>\n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseLeave\" data-linktype=\"relative-path\">MouseLeave</a>  \n\n</li>\n</ol>\n<div class=\"NOTE\"><h5>Note</h5><p> The following events are not raised for the <a class=\"xref\" href=\"system.windows.forms.tabcontrol\" data-linktype=\"relative-path\">TabControl</a> class unless there is at least one <a class=\"xref\" href=\"system.windows.forms.tabpage\" data-linktype=\"relative-path\">TabPage</a> in the <a class=\"xref\" href=\"system.windows.forms.tabcontrol#System_Windows_Forms_TabControl_TabPages_\" data-linktype=\"relative-path\">TabPages</a> collection: <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Click\" data-linktype=\"relative-path\">Click</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoubleClick\" data-linktype=\"relative-path\">DoubleClick</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a>, MouseUp, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseHover\" data-linktype=\"relative-path\">MouseHover</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseEnter\" data-linktype=\"relative-path\">MouseEnter</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseLeave\" data-linktype=\"relative-path\">MouseLeave</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseMove\" data-linktype=\"relative-path\">MouseMove</a>. If there is at least one <a class=\"xref\" href=\"system.windows.forms.tabpage\" data-linktype=\"relative-path\">TabPage</a> in the collection, and the user interacts with the tab control&#39;s header (where the <a class=\"xref\" href=\"system.windows.forms.tabpage\" data-linktype=\"relative-path\">TabPage</a> names appear), the <a class=\"xref\" href=\"system.windows.forms.tabcontrol\" data-linktype=\"relative-path\">TabControl</a> raises the appropriate event. However, if the user interaction is within the client area of the tab page, the <a class=\"xref\" href=\"system.windows.forms.tabpage\" data-linktype=\"relative-path\">TabPage</a> raises the appropriate event.  </p>\n</div>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using different mouse events to draw the path of the mouse on a <a class=\"xref\" href=\"system.windows.forms.panel\" data-linktype=\"relative-path\">Panel</a>. A line segment is added to the <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath\" data-linktype=\"relative-path\">GraphicsPath</a> for each <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseMove\" data-linktype=\"relative-path\">MouseMove</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> events that occur. To update the graphics, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invalidate_\" data-linktype=\"relative-path\">Invalidate</a> method is called for the <a class=\"xref\" href=\"system.windows.forms.panel\" data-linktype=\"relative-path\">Panel</a> on each <code>MouseDown</code> and <code>MouseUp</code> event. In addition, the graphic path is scrolled up or down when the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseWheel\" data-linktype=\"relative-path\">MouseWheel</a> event occurs. Additional mouse events, like <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseHover\" data-linktype=\"relative-path\">MouseHover</a>, are identified on screen as well. Also displayed on the screen is additional information about the mouse from the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.MouseEvent#1\">#using &lt;System.dll&gt;\n#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n\nusing namespace System;\nusing namespace System::Drawing;\nusing namespace System::Windows::Forms;\n\nnamespace MouseEvent\n{\n   public ref class Form1: public System::Windows::Forms::Form\n   {\n   private:\n      System::Windows::Forms::Panel^ panel1;\n      System::Windows::Forms::Label ^ label1;\n      System::Windows::Forms::Label ^ label2;\n      System::Windows::Forms::Label ^ label3;\n      System::Windows::Forms::Label ^ label4;\n      System::Windows::Forms::Label ^ label5;\n      System::Windows::Forms::Label ^ label6;\n      System::Windows::Forms::Label ^ label7;\n      System::Windows::Forms::Label ^ label8;\n      System::Windows::Forms::Label ^ label9;\n      System::Windows::Forms::Button^ clearButton;\n      System::Drawing::Drawing2D::GraphicsPath^ mousePath;\n      System::Windows::Forms::GroupBox^ groupBox1;\n      int fontSize;\n\n   public:\n      Form1()\n      {\n         fontSize = 20;\n         mousePath = gcnew System::Drawing::Drawing2D::GraphicsPath;\n         this-&gt;panel1 = gcnew System::Windows::Forms::Panel;\n         this-&gt;label1 = gcnew System::Windows::Forms::Label;\n         this-&gt;clearButton = gcnew System::Windows::Forms::Button;\n         this-&gt;label2 = gcnew System::Windows::Forms::Label;\n         this-&gt;label3 = gcnew System::Windows::Forms::Label;\n         this-&gt;label4 = gcnew System::Windows::Forms::Label;\n         this-&gt;label5 = gcnew System::Windows::Forms::Label;\n         this-&gt;label6 = gcnew System::Windows::Forms::Label;\n         this-&gt;label7 = gcnew System::Windows::Forms::Label;\n         this-&gt;label8 = gcnew System::Windows::Forms::Label;\n         this-&gt;label9 = gcnew System::Windows::Forms::Label;\n         this-&gt;groupBox1 = gcnew System::Windows::Forms::GroupBox;\n         \n         // Mouse Events Label\n         this-&gt;label1-&gt;Location = System::Drawing::Point( 24, 504 );\n         this-&gt;label1-&gt;Size = System::Drawing::Size( 392, 23 );\n         \n         // DoubleClickSize Label\n         this-&gt;label2-&gt;AutoSize = true;\n         this-&gt;label2-&gt;Location = System::Drawing::Point( 24, 48 );\n         this-&gt;label2-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // DoubleClickTime Label\n         this-&gt;label3-&gt;AutoSize = true;\n         this-&gt;label3-&gt;Location = System::Drawing::Point( 24, 72 );\n         this-&gt;label3-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // MousePresent Label\n         this-&gt;label4-&gt;AutoSize = true;\n         this-&gt;label4-&gt;Location = System::Drawing::Point( 24, 96 );\n         this-&gt;label4-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // MouseButtons Label\n         this-&gt;label5-&gt;AutoSize = true;\n         this-&gt;label5-&gt;Location = System::Drawing::Point( 24, 120 );\n         this-&gt;label5-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // MouseButtonsSwapped Label\n         this-&gt;label6-&gt;AutoSize = true;\n         this-&gt;label6-&gt;Location = System::Drawing::Point( 320, 48 );\n         this-&gt;label6-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // MouseWheelPresent Label\n         this-&gt;label7-&gt;AutoSize = true;\n         this-&gt;label7-&gt;Location = System::Drawing::Point( 320, 72 );\n         this-&gt;label7-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // MouseWheelScrollLines Label\n         this-&gt;label8-&gt;AutoSize = true;\n         this-&gt;label8-&gt;Location = System::Drawing::Point( 320, 96 );\n         this-&gt;label8-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // NativeMouseWheelSupport Label\n         this-&gt;label9-&gt;AutoSize = true;\n         this-&gt;label9-&gt;Location = System::Drawing::Point( 320, 120 );\n         this-&gt;label9-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // Mouse Panel\n         this-&gt;panel1-&gt;Anchor = static_cast&lt;System::Windows::Forms::AnchorStyles&gt;(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n         this-&gt;panel1-&gt;BackColor = System::Drawing::SystemColors::ControlDark;\n         this-&gt;panel1-&gt;Location = System::Drawing::Point( 16, 160 );\n         this-&gt;panel1-&gt;Size = System::Drawing::Size( 664, 320 );\n         this-&gt;panel1-&gt;MouseUp += gcnew System::Windows::Forms::MouseEventHandler( this, &amp;Form1::panel1_MouseUp );\n         this-&gt;panel1-&gt;Paint += gcnew System::Windows::Forms::PaintEventHandler( this, &amp;Form1::panel1_Paint );\n         this-&gt;panel1-&gt;MouseEnter += gcnew System::EventHandler( this, &amp;Form1::panel1_MouseEnter );\n         this-&gt;panel1-&gt;MouseHover += gcnew System::EventHandler( this, &amp;Form1::panel1_MouseHover );\n         this-&gt;panel1-&gt;MouseMove += gcnew System::Windows::Forms::MouseEventHandler( this, &amp;Form1::panel1_MouseMove );\n         this-&gt;panel1-&gt;MouseLeave += gcnew System::EventHandler( this, &amp;Form1::panel1_MouseLeave );\n         this-&gt;panel1-&gt;MouseDown += gcnew System::Windows::Forms::MouseEventHandler( this, &amp;Form1::panel1_MouseDown );\n         this-&gt;panel1-&gt;MouseWheel += gcnew System::Windows::Forms::MouseEventHandler( this, &amp;Form1::panel1_MouseWheel );\n         \n         // Clear Button\n         this-&gt;clearButton-&gt;Anchor = static_cast&lt;System::Windows::Forms::AnchorStyles&gt;(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Right);\n         this-&gt;clearButton-&gt;Location = System::Drawing::Point( 592, 504 );\n         this-&gt;clearButton-&gt;TabIndex = 1;\n         this-&gt;clearButton-&gt;Text = &quot;Clear&quot;;\n         this-&gt;clearButton-&gt;Click += gcnew System::EventHandler( this, &amp;Form1::clearButton_Click );\n         \n         // GroupBox\n         this-&gt;groupBox1-&gt;Anchor = static_cast&lt;System::Windows::Forms::AnchorStyles&gt;(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n         this-&gt;groupBox1-&gt;Location = System::Drawing::Point( 16, 24 );\n         this-&gt;groupBox1-&gt;Size = System::Drawing::Size( 664, 128 );\n         this-&gt;groupBox1-&gt;Text = &quot;System::Windows::Forms::SystemInformation&quot;;\n         \n         // Set up how the form should be displayed and add the controls to the form.\n         this-&gt;ClientSize = System::Drawing::Size( 696, 534 );\n         array&lt;System::Windows::Forms::Control^&gt;^temp0 = {this-&gt;label9,this-&gt;label8,this-&gt;label7,this-&gt;label6,this-&gt;label5,this-&gt;label4,this-&gt;label3,this-&gt;label2,this-&gt;clearButton,this-&gt;panel1,this-&gt;label1,this-&gt;groupBox1};\n         this-&gt;Controls-&gt;AddRange( temp0 );\n         this-&gt;Text = &quot;Mouse Event Example&quot;;\n         \n         // Displays information about the system mouse.\n         label2-&gt;Text = &quot;SystemInformation::DoubleClickSize: {0}&quot;,SystemInformation::DoubleClickSize;\n         label3-&gt;Text = &quot;SystemInformation::DoubleClickTime: {0}&quot;,SystemInformation::DoubleClickTime;\n         label4-&gt;Text = &quot;SystemInformation::MousePresent: {0}&quot;,SystemInformation::MousePresent;\n         label5-&gt;Text = &quot;SystemInformation::MouseButtons: {0}&quot;,SystemInformation::MouseButtons;\n         label6-&gt;Text = &quot;SystemInformation::MouseButtonsSwapped: {0}&quot;,SystemInformation::MouseButtonsSwapped;\n         label7-&gt;Text = &quot;SystemInformation::MouseWheelPresent: {0}&quot;,SystemInformation::MouseWheelPresent;\n         label8-&gt;Text = &quot;SystemInformation::MouseWheelScrollLines: {0}&quot;,SystemInformation::MouseWheelScrollLines;\n         label9-&gt;Text = &quot;SystemInformation::NativeMouseWheelSupport: {0}&quot;,SystemInformation::NativeMouseWheelSupport;\n      }\n\n   private:\n      void panel1_MouseDown( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n      {\n         // Update the mouse path with the mouse information\n         Point mouseDownLocation = Point(e-&gt;X,e-&gt;Y);\n         String^ eventString = nullptr;\n         switch ( e-&gt;Button )\n         {\n            case ::MouseButtons::Left:\n               eventString = &quot;L&quot;;\n               break;\n\n            case ::MouseButtons::Right:\n               eventString = &quot;R&quot;;\n               break;\n\n            case ::MouseButtons::Middle:\n               eventString = &quot;M&quot;;\n               break;\n\n            case ::MouseButtons::XButton1:\n               eventString = &quot;X1&quot;;\n               break;\n\n            case ::MouseButtons::XButton2:\n               eventString = &quot;X2&quot;;\n               break;\n\n            case ::MouseButtons::None:\n            default:\n               break;\n         }\n         if ( eventString != nullptr )\n         {\n            mousePath-&gt;AddString( eventString, FontFamily::GenericSerif, (int)FontStyle::Bold, (float)fontSize, mouseDownLocation, StringFormat::GenericDefault );\n         }\n         else\n         {\n            mousePath-&gt;AddLine( mouseDownLocation, mouseDownLocation );\n         }\n\n         panel1-&gt;Focus();\n         panel1-&gt;Invalidate();\n      }\n\n      void panel1_MouseEnter( Object^ sender, System::EventArgs^ /*e*/ )\n      {\n         \n         // Update the mouse event label to indicate the MouseEnter event occurred.\n         label1-&gt;Text = String::Concat( sender-&gt;GetType(), &quot;: MouseEnter&quot; );\n      }\n\n      void panel1_MouseHover( Object^ sender, System::EventArgs^ /*e*/ )\n      {\n         \n         // Update the mouse event label to indicate the MouseHover event occurred.\n         label1-&gt;Text = String::Concat( sender-&gt;GetType(), &quot;: MouseHover&quot; );\n      }\n\n      void panel1_MouseLeave( Object^ sender, System::EventArgs^ /*e*/ )\n      {\n         \n         // Update the mouse event label to indicate the MouseLeave event occurred.\n         label1-&gt;Text = String::Concat( sender-&gt;GetType(), &quot;: MouseLeave&quot; );\n      }\n\n      void panel1_MouseMove( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n      {\n         // Update the mouse path that is drawn onto the Panel.\n         int mouseX = e-&gt;X;\n         int mouseY = e-&gt;Y;\n         mousePath-&gt;AddLine( mouseX, mouseY, mouseX, mouseY );\n      }\n\n      void panel1_MouseWheel( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n      {\n         // Update the drawing based upon the mouse wheel scrolling.\n         int numberOfTextLinesToMove = e-&gt;Delta * SystemInformation::MouseWheelScrollLines / 120;\n         int numberOfPixelsToMove = numberOfTextLinesToMove * fontSize;\n         if ( numberOfPixelsToMove != 0 )\n         {\n            System::Drawing::Drawing2D::Matrix^ translateMatrix = gcnew System::Drawing::Drawing2D::Matrix;\n            translateMatrix-&gt;Translate( 0, (float)numberOfPixelsToMove );\n            mousePath-&gt;Transform(translateMatrix);\n         }\n\n         panel1-&gt;Invalidate();\n      }\n\n      void panel1_MouseUp( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n      {\n         Point mouseUpLocation = System::Drawing::Point( e-&gt;X, e-&gt;Y );\n         \n         // Show the number of clicks in the path graphic.\n         int numberOfClicks = e-&gt;Clicks;\n         mousePath-&gt;AddString( String::Format( &quot;   {0}&quot;, numberOfClicks ), FontFamily::GenericSerif, (int)FontStyle::Bold, (float)fontSize, mouseUpLocation, StringFormat::GenericDefault );\n         panel1-&gt;Invalidate();\n      }\n\n      void panel1_Paint( Object^ /*sender*/, System::Windows::Forms::PaintEventArgs^ e )\n      {\n         // Perform the painting of the Panel.\n         e-&gt;Graphics-&gt;DrawPath( System::Drawing::Pens::DarkRed, mousePath );\n      }\n\n      void clearButton_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n      {\n         // Clear the Panel display.\n         delete mousePath;\n         mousePath = gcnew System::Drawing::Drawing2D::GraphicsPath;\n         panel1-&gt;Invalidate();\n      }\n   };\n}\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew MouseEvent::Form1 );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.MouseEvent#1\">using System;\nusing System.Drawing;\nusing System.Windows.Forms;\n\nnamespace MouseEvent\n{\n    public class Form1 : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.Panel panel1;\n        private System.Windows.Forms.Label label1;\n        private System.Windows.Forms.Label label2;\n        private System.Windows.Forms.Label label3;\n        private System.Windows.Forms.Label label4;\n        private System.Windows.Forms.Label label5;\n        private System.Windows.Forms.Label label6;\n        private System.Windows.Forms.Label label7;\n        private System.Windows.Forms.Label label8;\n        private System.Windows.Forms.Label label9;\n        private System.Windows.Forms.Button clearButton;\n        private System.Drawing.Drawing2D.GraphicsPath mousePath;\n        private System.Windows.Forms.GroupBox groupBox1;\n\n        private int fontSize = 20;        \n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new Form1());\n        }\n\n        public Form1()\n        {            \n            mousePath = new System.Drawing.Drawing2D.GraphicsPath();\n\n            this.panel1 = new System.Windows.Forms.Panel();\n            this.label1 = new System.Windows.Forms.Label();\n            this.clearButton = new System.Windows.Forms.Button();\n            this.label2 = new System.Windows.Forms.Label();\n            this.label3 = new System.Windows.Forms.Label();\n            this.label4 = new System.Windows.Forms.Label();\n            this.label5 = new System.Windows.Forms.Label();\n            this.label6 = new System.Windows.Forms.Label();\n            this.label7 = new System.Windows.Forms.Label();\n            this.label8 = new System.Windows.Forms.Label();\n            this.label9 = new System.Windows.Forms.Label();\n            this.groupBox1 = new System.Windows.Forms.GroupBox();\n\n            // Mouse Events Label\n            this.label1.Location = new System.Drawing.Point(24, 504);\n            this.label1.Size = new System.Drawing.Size(392, 23);\n            // DoubleClickSize Label\n            this.label2.AutoSize = true;\n            this.label2.Location = new System.Drawing.Point(24, 48);\n            this.label2.Size = new System.Drawing.Size(35, 13);\n            // DoubleClickTime Label\n            this.label3.AutoSize = true;\n            this.label3.Location = new System.Drawing.Point(24, 72);\n            this.label3.Size = new System.Drawing.Size(35, 13);\n            // MousePresent Label\n            this.label4.AutoSize = true;\n            this.label4.Location = new System.Drawing.Point(24, 96);\n            this.label4.Size = new System.Drawing.Size(35, 13);\n            // MouseButtons Label\n            this.label5.AutoSize = true;\n            this.label5.Location = new System.Drawing.Point(24, 120);\n            this.label5.Size = new System.Drawing.Size(35, 13);\n            // MouseButtonsSwapped Label\n            this.label6.AutoSize = true;\n            this.label6.Location = new System.Drawing.Point(320, 48);\n            this.label6.Size = new System.Drawing.Size(35, 13);\n            // MouseWheelPresent Label\n            this.label7.AutoSize = true;\n            this.label7.Location = new System.Drawing.Point(320, 72);\n            this.label7.Size = new System.Drawing.Size(35, 13);\n            // MouseWheelScrollLines Label\n            this.label8.AutoSize = true;\n            this.label8.Location = new System.Drawing.Point(320, 96);\n            this.label8.Size = new System.Drawing.Size(35, 13);\n            // NativeMouseWheelSupport Label\n            this.label9.AutoSize = true;\n            this.label9.Location = new System.Drawing.Point(320, 120);\n            this.label9.Size = new System.Drawing.Size(35, 13);\n\n            // Mouse Panel\n            this.panel1.Anchor = ((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) \n                | System.Windows.Forms.AnchorStyles.Right);\n            this.panel1.BackColor = System.Drawing.SystemColors.ControlDark;\n            this.panel1.Location = new System.Drawing.Point(16, 160);\n            this.panel1.Size = new System.Drawing.Size(664, 320);\n            this.panel1.MouseUp += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseUp);\n            this.panel1.Paint += new System.Windows.Forms.PaintEventHandler(this.panel1_Paint);\n            this.panel1.MouseEnter += new System.EventHandler(this.panel1_MouseEnter);\n            this.panel1.MouseHover += new System.EventHandler(this.panel1_MouseHover);\n            this.panel1.MouseMove += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseMove);\n            this.panel1.MouseLeave += new System.EventHandler(this.panel1_MouseLeave);\n            this.panel1.MouseDown += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseDown);\n            this.panel1.MouseWheel += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseWheel);\n\n            // Clear Button\n            this.clearButton.Anchor = (System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right);\n            this.clearButton.Location = new System.Drawing.Point(592, 504);\n            this.clearButton.TabIndex = 1;\n            this.clearButton.Text = &quot;Clear&quot;;\n            this.clearButton.Click += new System.EventHandler(this.clearButton_Click);\n            \n            // GroupBox\n            this.groupBox1.Anchor = ((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) \n                | System.Windows.Forms.AnchorStyles.Right);\n            this.groupBox1.Location = new System.Drawing.Point(16, 24);\n            this.groupBox1.Size = new System.Drawing.Size(664, 128);\n            this.groupBox1.Text = &quot;System.Windows.Forms.SystemInformation&quot;;\n\n            // Set up how the form should be displayed and add the controls to the form.\n            this.ClientSize = new System.Drawing.Size(696, 534);\n            this.Controls.AddRange(new System.Windows.Forms.Control[] {\n                                        this.label9,this.label8,this.label7,this.label6,\n                                        this.label5,this.label4,this.label3,this.label2,\n                                        this.clearButton,this.panel1,this.label1,this.groupBox1});\n            this.Text = &quot;Mouse Event Example&quot;;\n\n            // Displays information about the system mouse.\n            label2.Text = &quot;SystemInformation.DoubleClickSize: &quot; + SystemInformation.DoubleClickSize.ToString();\n            label3.Text = &quot;SystemInformation.DoubleClickTime: &quot; + SystemInformation.DoubleClickTime.ToString();\n            label4.Text = &quot;SystemInformation.MousePresent: &quot; + SystemInformation.MousePresent.ToString();\n            label5.Text = &quot;SystemInformation.MouseButtons: &quot; + SystemInformation.MouseButtons.ToString();\n            label6.Text = &quot;SystemInformation.MouseButtonsSwapped: &quot; + SystemInformation.MouseButtonsSwapped.ToString();\n            label7.Text = &quot;SystemInformation.MouseWheelPresent: &quot; + SystemInformation.MouseWheelPresent.ToString();\n            label8.Text = &quot;SystemInformation.MouseWheelScrollLines: &quot; + SystemInformation.MouseWheelScrollLines.ToString();\n            label9.Text = &quot;SystemInformation.NativeMouseWheelSupport: &quot; + SystemInformation.NativeMouseWheelSupport.ToString();\n\n        }\n\n        private void panel1_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e) \n        {\n            // Update the mouse path with the mouse information\n            Point mouseDownLocation = new Point(e.X, e.Y);\n\n            string eventString = null;\n            switch (e.Button) {\n                case MouseButtons.Left:\n                    eventString = &quot;L&quot;;\n                    break;\n                case MouseButtons.Right:\n                    eventString = &quot;R&quot;;\n                    break;\n                case MouseButtons.Middle:\n                    eventString = &quot;M&quot;;\n                    break;\n                case MouseButtons.XButton1:\n                    eventString = &quot;X1&quot;;\n                    break;\n                case MouseButtons.XButton2:\n                    eventString = &quot;X2&quot;;\n                    break;\n                case MouseButtons.None:\n                default:\n                    break;\n            }\n\n            if (eventString != null) \n            {\n                mousePath.AddString(eventString, FontFamily.GenericSerif, (int)FontStyle.Bold, fontSize, mouseDownLocation, StringFormat.GenericDefault);\n            }\n            else \n            {\n                mousePath.AddLine(mouseDownLocation,mouseDownLocation);\n            }\n            panel1.Focus();\n            panel1.Invalidate();\n        }\n\n        private void panel1_MouseEnter(object sender, System.EventArgs e) \n        {\n            // Update the mouse event label to indicate the MouseEnter event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseEnter&quot;;\n        }\n\n        private void panel1_MouseHover(object sender, System.EventArgs e) \n        {\n            // Update the mouse event label to indicate the MouseHover event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseHover&quot;;\n        }\n\n        private void panel1_MouseLeave(object sender, System.EventArgs e) \n        {\n            // Update the mouse event label to indicate the MouseLeave event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseLeave&quot;;\n        }\n\n        private void panel1_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)\n        {\n            // Update the mouse path that is drawn onto the Panel.\n            int mouseX = e.X;\n            int mouseY = e.Y;\n            \n            mousePath.AddLine(mouseX,mouseY,mouseX,mouseY);\n        }\n\n        private void panel1_MouseWheel(object sender, System.Windows.Forms.MouseEventArgs e)\n        {\n            // Update the drawing based upon the mouse wheel scrolling.\n      \n            int numberOfTextLinesToMove = e.Delta * SystemInformation.MouseWheelScrollLines / 120;\n            int numberOfPixelsToMove = numberOfTextLinesToMove * fontSize;\n\n            if (numberOfPixelsToMove != 0) {\n                System.Drawing.Drawing2D.Matrix translateMatrix = new  System.Drawing.Drawing2D.Matrix();\n                translateMatrix.Translate(0, numberOfPixelsToMove);\n                mousePath.Transform(translateMatrix);\n            }\n            panel1.Invalidate();\n        }\n        private void panel1_MouseUp(object sender, System.Windows.Forms.MouseEventArgs e) \n        {\n            Point mouseUpLocation = new System.Drawing.Point(e.X, e.Y);\n        \n            // Show the number of clicks in the path graphic.\n            int numberOfClicks = e.Clicks;\n            mousePath.AddString(&quot;    &quot; + numberOfClicks.ToString(), \n                        FontFamily.GenericSerif, (int)FontStyle.Bold, \n                        fontSize, mouseUpLocation, StringFormat.GenericDefault);\n\n            panel1.Invalidate();\n        }\n\n        private void panel1_Paint(object sender, System.Windows.Forms.PaintEventArgs e) \n        {    \n            // Perform the painting of the Panel.\n            e.Graphics.DrawPath(System.Drawing.Pens.DarkRed, mousePath);\n        }\n\n        private void clearButton_Click(object sender, System.EventArgs e)\n        {\n            // Clear the Panel display.\n            mousePath.Dispose();\n            mousePath = new System.Drawing.Drawing2D.GraphicsPath();\n            panel1.Invalidate();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.MouseEvent#1\">Imports System\nImports System.Drawing\nImports System.Windows.Forms\n\nNamespace MouseEvent\n    &#39; Summary description for Form1.\n    Public NotInheritable Class Form1\n        Inherits System.Windows.Forms.Form\n\n        Friend WithEvents panel1 As System.Windows.Forms.Panel\n        Private label1 As System.Windows.Forms.Label\n        Private label2 As System.Windows.Forms.Label\n        Private label3 As System.Windows.Forms.Label\n        Private label4 As System.Windows.Forms.Label\n        Private label5 As System.Windows.Forms.Label\n        Private label6 As System.Windows.Forms.Label\n        Private label7 As System.Windows.Forms.Label\n        Private label8 As System.Windows.Forms.Label\n        Private label9 As System.Windows.Forms.Label\n        Friend WithEvents clearButton As System.Windows.Forms.Button\n        Private mousePath As System.Drawing.Drawing2D.GraphicsPath\n        Private groupBox1 As System.Windows.Forms.GroupBox\n\n        Private fontSize As Integer = 20\n        \n        &lt;System.STAThread()&gt;  _\n        Public Shared Sub Main()\n            System.Windows.Forms.Application.Run(New Form1())\n        End Sub &#39;Main\n\n        Public Sub New()\n\n            mousePath = New System.Drawing.Drawing2D.GraphicsPath()\n\n            Me.panel1 = New System.Windows.Forms.Panel()\n            Me.label1 = New System.Windows.Forms.Label()\n            Me.clearButton = New System.Windows.Forms.Button()\n            Me.label2 = New System.Windows.Forms.Label()\n            Me.label3 = New System.Windows.Forms.Label()\n            Me.label4 = New System.Windows.Forms.Label()\n            Me.label5 = New System.Windows.Forms.Label()\n            Me.label6 = New System.Windows.Forms.Label()\n            Me.label7 = New System.Windows.Forms.Label()\n            Me.label8 = New System.Windows.Forms.Label()\n            Me.label9 = New System.Windows.Forms.Label()\n            Me.groupBox1 = New System.Windows.Forms.GroupBox()\n\n            &#39; Mouse Events Label\n            Me.label1.Location = New System.Drawing.Point(24, 504) \n            Me.label1.Size = New System.Drawing.Size(392, 23) \n            &#39; DoubleClickSize Label\n            Me.label2.AutoSize = True \n            Me.label2.Location = New System.Drawing.Point(24, 48) \n            Me.label2.Size = New System.Drawing.Size(35, 13) \n            &#39; DoubleClickTime Label\n            Me.label3.AutoSize = True \n            Me.label3.Location = New System.Drawing.Point(24, 72) \n            Me.label3.Size = New System.Drawing.Size(35, 13) \n            &#39; MousePresent Label\n            Me.label4.AutoSize = True \n            Me.label4.Location = New System.Drawing.Point(24, 96) \n            Me.label4.Size = New System.Drawing.Size(35, 13) \n            &#39; MouseButtons Label\n            Me.label5.AutoSize = True \n            Me.label5.Location = New System.Drawing.Point(24, 120) \n            Me.label5.Size = New System.Drawing.Size(35, 13) \n            &#39; MouseButtonsSwapped Label\n            Me.label6.AutoSize = True \n            Me.label6.Location = New System.Drawing.Point(320, 48) \n            Me.label6.Size = New System.Drawing.Size(35, 13) \n            &#39; MouseWheelPresent Label\n            Me.label7.AutoSize = True \n            Me.label7.Location = New System.Drawing.Point(320, 72) \n            Me.label7.Size = New System.Drawing.Size(35, 13) \n            &#39; MouseWheelScrollLines Label\n            Me.label8.AutoSize = True \n            Me.label8.Location = New System.Drawing.Point(320, 96) \n            Me.label8.Size = New System.Drawing.Size(35, 13) \n            &#39; NativeMouseWheelSupport Label\n            Me.label9.AutoSize = True \n            Me.label9.Location = New System.Drawing.Point(320, 120) \n            Me.label9.Size = New System.Drawing.Size(35, 13) \n\n            &#39; Mouse Panel\n            Me.panel1.Anchor = System.Windows.Forms.AnchorStyles.Top Or _\n                                    System.Windows.Forms.AnchorStyles.Left Or _\n                                    System.Windows.Forms.AnchorStyles.Right\n            Me.panel1.BackColor = System.Drawing.SystemColors.ControlDark\n            Me.panel1.Location = New System.Drawing.Point(16, 160)\n            Me.panel1.Size = New System.Drawing.Size(664, 320)\n\n            &#39; Clear Button\n            Me.clearButton.Anchor = System.Windows.Forms.AnchorStyles.Top Or _\n                                    System.Windows.Forms.AnchorStyles.Right\n            Me.clearButton.Location = New System.Drawing.Point(592, 504)\n            Me.clearButton.TabIndex = 1\n            Me.clearButton.Text = &quot;Clear&quot;\n\n            &#39; GroupBox\n            Me.groupBox1.Anchor = System.Windows.Forms.AnchorStyles.Top Or _\n                                  System.Windows.Forms.AnchorStyles.Left Or _\n                                  System.Windows.Forms.AnchorStyles.Right\n            Me.groupBox1.Location = New System.Drawing.Point(16, 24)\n            Me.groupBox1.Size = New System.Drawing.Size(664, 128)\n            Me.groupBox1.Text = &quot;System.Windows.Forms.SystemInformation&quot;\n\n            &#39; Set up how the form should be displayed and add the controls to the form.\n            Me.ClientSize = New System.Drawing.Size(696, 534)\n            Me.Controls.AddRange(New System.Windows.Forms.Control() {Me.label9, _\n                            Me.label8, Me.label7, Me.label6, Me.label5, Me.label4, _\n                            Me.label3, Me.label2, Me.clearButton, Me.panel1, Me.label1, Me.groupBox1})\n\n            Me.Text = &quot;Mouse Event Example&quot;\n\n            &#39; Display information about the system mouse.\n            label2.Text = &quot;SystemInformation.DoubleClickSize: &quot; + SystemInformation.DoubleClickSize.ToString()\n            label3.Text = &quot;SystemInformation.DoubleClickTime: &quot; + SystemInformation.DoubleClickTime.ToString()\n            label4.Text = &quot;SystemInformation.MousePresent: &quot; + SystemInformation.MousePresent.ToString()\n            label5.Text = &quot;SystemInformation.MouseButtons: &quot; + SystemInformation.MouseButtons.ToString()\n            label6.Text = &quot;SystemInformation.MouseButtonsSwapped: &quot; + SystemInformation.MouseButtonsSwapped.ToString()\n            label7.Text = &quot;SystemInformation.MouseWheelPresent: &quot; + SystemInformation.MouseWheelPresent.ToString()\n            label8.Text = &quot;SystemInformation.MouseWheelScrollLines: &quot; + SystemInformation.MouseWheelScrollLines.ToString()\n            label9.Text = &quot;SystemInformation.NativeMouseWheelSupport: &quot; + SystemInformation.NativeMouseWheelSupport.ToString()\n        End Sub &#39;New\n\n        Private Sub panel1_MouseDown(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles panel1.MouseDown\n            &#39; Update the mouse path with the mouse information\n            Dim mouseDownLocation As New Point(e.X, e.Y)\n            \n            Dim eventString As String = Nothing\n            Select Case e.Button\n                Case MouseButtons.Left\n                    eventString = &quot;L&quot;\n                Case MouseButtons.Right\n                    eventString = &quot;R&quot;\n                Case MouseButtons.Middle\n                    eventString = &quot;M&quot;\n                Case MouseButtons.XButton1\n                    eventString = &quot;X1&quot;\n                Case MouseButtons.XButton2\n                    eventString = &quot;X2&quot;\n                Case MouseButtons.None:\n                     eventString = Nothing              \n            End Select\n            \n            If (eventString IsNot Nothing) Then\n                mousePath.AddString(eventString, FontFamily.GenericSerif, CInt(FontStyle.Bold), fontSize, mouseDownLocation, StringFormat.GenericDefault)\n            Else\n                mousePath.AddLine(mouseDownLocation, mouseDownLocation)\n            End If\n\n            panel1.Focus()\n            panel1.Invalidate()\n        End Sub \n        \n        Private Sub panel1_MouseEnter(sender As Object, e As System.EventArgs) Handles panel1.MouseEnter\n            &#39; Update the mouse event label to indicate the MouseEnter event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseEnter&quot;\n        End Sub\n        \n        Private Sub panel1_MouseHover(sender As Object, e As System.EventArgs) Handles panel1.MouseHover\n            &#39; Update the mouse event label to indicate the MouseHover event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseHover&quot;\n        End Sub\n        \n        Private Sub panel1_MouseLeave(sender As Object, e As System.EventArgs) Handles panel1.MouseLeave\n            &#39; Update the mouse event label to indicate the MouseLeave event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseLeave&quot;\n        End Sub\n        \n        Private Sub panel1_MouseMove(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles panel1.MouseMove\n            &#39; Update the mouse path that is drawn onto the Panel.\n            Dim mouseX As Integer = e.X\n            Dim mouseY As Integer = e.Y\n            \n            mousePath.AddLine(mouseX, mouseY, mouseX, mouseY)\n        End Sub\n        Private Sub panel1_MouseWheel(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles panel1.MouseWheel\n            &#39; Update the drawing based upon the mouse wheel scrolling.\n            Dim numberOfTextLinesToMove As Integer = CInt(e.Delta * SystemInformation.MouseWheelScrollLines / 120) \n            Dim numberOfPixelsToMove As Integer = numberOfTextLinesToMove * fontSize\n            \n            If numberOfPixelsToMove &lt;&gt; 0 Then\n                Dim translateMatrix As New System.Drawing.Drawing2D.Matrix()\n                translateMatrix.Translate(0, numberOfPixelsToMove)\n                mousePath.Transform(translateMatrix)\n            End If\n\n            panel1.Invalidate()\n        End Sub\n        Private Sub panel1_MouseUp(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles panel1.MouseUp\n            Dim mouseUpLocation As New System.Drawing.Point(e.X, e.Y)\n            \n            &#39; Show the number of clicks in the path graphic.\n            Dim numberOfClicks As Integer = e.Clicks\n            mousePath.AddString(&quot;     &quot; + numberOfClicks.ToString(), _\n                                FontFamily.GenericSerif, CInt(FontStyle.Bold), _\n                                fontSize, mouseUpLocation, StringFormat.GenericDefault)\n\n            panel1.Invalidate()\n        End Sub\n        \n        Private Sub panel1_Paint(sender As Object, e As System.Windows.Forms.PaintEventArgs) Handles panel1.Paint\n            &#39; Perform the painting of the Panel.\n            e.Graphics.DrawPath(System.Drawing.Pens.DarkRed, mousePath)\n        End Sub\n        \n        Private Sub clearButton_Click(sender As Object, e As System.EventArgs) Handles clearButton.Click\n            &#39; Clear the Panel display.\n            mousePath.Dispose()\n            mousePath = New System.Drawing.Drawing2D.GraphicsPath()\n            panel1.Invalidate()\n        End Sub\n        \n    End Class &#39;Form1\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_MouseWheel\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MouseWheel</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the mouse wheel moves while the control has focus.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.MouseEventHandler MouseWheel;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When handling the MouseWheel event it is important to follow the user interface (UI) standards associated with the mouse wheel. The <a class=\"xref\" href=\"system.windows.forms.mouseeventargs#System_Windows_Forms_MouseEventArgs_Delta_\" data-linktype=\"relative-path\">Delta</a> property value indicates the amount the mouse wheel has been moved. The UI should scroll when the accumulated delta is plus or minus 120. The UI should scroll the number of logical lines returned by the <a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_MouseWheelScrollLines_\" data-linktype=\"relative-path\">MouseWheelScrollLines</a> property for every delta value reached. You can also scroll more smoothly in smaller that 120 unit increments, however the ratio should remain constant, that is <a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_MouseWheelScrollLines_\" data-linktype=\"relative-path\">MouseWheelScrollLines</a> lines scrolled per 120 delta units of wheel movement.  </p>\n<p> For more information about handling mouse wheel messages, see the<a href=\"http://msdn.microsoft.com/library/windows/desktop/ms645617(v=vs.85).aspx\" data-linktype=\"external\">WM_MOUSEWHEEL</a>topic.  </p>\n<p> Mouse events occur in the following order:  </p>\n<ol>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseEnter\" data-linktype=\"relative-path\">MouseEnter</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseMove\" data-linktype=\"relative-path\">MouseMove</a>  \n</li>\n<li><p><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseHover\" data-linktype=\"relative-path\">MouseHover</a> / <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> / MouseWheel  </p>\n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseUp\" data-linktype=\"relative-path\">MouseUp</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseLeave\" data-linktype=\"relative-path\">MouseLeave</a>  \n\n<p>For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n</li>\n</ol>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using different mouse events to draw the path of the mouse on a <a class=\"xref\" href=\"system.windows.forms.panel\" data-linktype=\"relative-path\">Panel</a>. A line segment is added to the <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath\" data-linktype=\"relative-path\">GraphicsPath</a> for each <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseMove\" data-linktype=\"relative-path\">MouseMove</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> events that occur. To update the graphics, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invalidate_\" data-linktype=\"relative-path\">Invalidate</a> method is called for the <a class=\"xref\" href=\"system.windows.forms.panel\" data-linktype=\"relative-path\">Panel</a> on each <code>MouseDown</code> and <code>MouseUp</code> event. In addition, the graphic path is scrolled up or down when the MouseWheel event occurs. Additional mouse events, like <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseHover\" data-linktype=\"relative-path\">MouseHover</a>, are identified on screen as well. Also displayed on the screen is additional information about the mouse from the <a class=\"xref\" href=\"system.windows.forms.systeminformation\" data-linktype=\"relative-path\">SystemInformation</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.MouseEvent#1\">#using &lt;System.dll&gt;\n#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n\nusing namespace System;\nusing namespace System::Drawing;\nusing namespace System::Windows::Forms;\n\nnamespace MouseEvent\n{\n   public ref class Form1: public System::Windows::Forms::Form\n   {\n   private:\n      System::Windows::Forms::Panel^ panel1;\n      System::Windows::Forms::Label ^ label1;\n      System::Windows::Forms::Label ^ label2;\n      System::Windows::Forms::Label ^ label3;\n      System::Windows::Forms::Label ^ label4;\n      System::Windows::Forms::Label ^ label5;\n      System::Windows::Forms::Label ^ label6;\n      System::Windows::Forms::Label ^ label7;\n      System::Windows::Forms::Label ^ label8;\n      System::Windows::Forms::Label ^ label9;\n      System::Windows::Forms::Button^ clearButton;\n      System::Drawing::Drawing2D::GraphicsPath^ mousePath;\n      System::Windows::Forms::GroupBox^ groupBox1;\n      int fontSize;\n\n   public:\n      Form1()\n      {\n         fontSize = 20;\n         mousePath = gcnew System::Drawing::Drawing2D::GraphicsPath;\n         this-&gt;panel1 = gcnew System::Windows::Forms::Panel;\n         this-&gt;label1 = gcnew System::Windows::Forms::Label;\n         this-&gt;clearButton = gcnew System::Windows::Forms::Button;\n         this-&gt;label2 = gcnew System::Windows::Forms::Label;\n         this-&gt;label3 = gcnew System::Windows::Forms::Label;\n         this-&gt;label4 = gcnew System::Windows::Forms::Label;\n         this-&gt;label5 = gcnew System::Windows::Forms::Label;\n         this-&gt;label6 = gcnew System::Windows::Forms::Label;\n         this-&gt;label7 = gcnew System::Windows::Forms::Label;\n         this-&gt;label8 = gcnew System::Windows::Forms::Label;\n         this-&gt;label9 = gcnew System::Windows::Forms::Label;\n         this-&gt;groupBox1 = gcnew System::Windows::Forms::GroupBox;\n         \n         // Mouse Events Label\n         this-&gt;label1-&gt;Location = System::Drawing::Point( 24, 504 );\n         this-&gt;label1-&gt;Size = System::Drawing::Size( 392, 23 );\n         \n         // DoubleClickSize Label\n         this-&gt;label2-&gt;AutoSize = true;\n         this-&gt;label2-&gt;Location = System::Drawing::Point( 24, 48 );\n         this-&gt;label2-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // DoubleClickTime Label\n         this-&gt;label3-&gt;AutoSize = true;\n         this-&gt;label3-&gt;Location = System::Drawing::Point( 24, 72 );\n         this-&gt;label3-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // MousePresent Label\n         this-&gt;label4-&gt;AutoSize = true;\n         this-&gt;label4-&gt;Location = System::Drawing::Point( 24, 96 );\n         this-&gt;label4-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // MouseButtons Label\n         this-&gt;label5-&gt;AutoSize = true;\n         this-&gt;label5-&gt;Location = System::Drawing::Point( 24, 120 );\n         this-&gt;label5-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // MouseButtonsSwapped Label\n         this-&gt;label6-&gt;AutoSize = true;\n         this-&gt;label6-&gt;Location = System::Drawing::Point( 320, 48 );\n         this-&gt;label6-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // MouseWheelPresent Label\n         this-&gt;label7-&gt;AutoSize = true;\n         this-&gt;label7-&gt;Location = System::Drawing::Point( 320, 72 );\n         this-&gt;label7-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // MouseWheelScrollLines Label\n         this-&gt;label8-&gt;AutoSize = true;\n         this-&gt;label8-&gt;Location = System::Drawing::Point( 320, 96 );\n         this-&gt;label8-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // NativeMouseWheelSupport Label\n         this-&gt;label9-&gt;AutoSize = true;\n         this-&gt;label9-&gt;Location = System::Drawing::Point( 320, 120 );\n         this-&gt;label9-&gt;Size = System::Drawing::Size( 35, 13 );\n         \n         // Mouse Panel\n         this-&gt;panel1-&gt;Anchor = static_cast&lt;System::Windows::Forms::AnchorStyles&gt;(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n         this-&gt;panel1-&gt;BackColor = System::Drawing::SystemColors::ControlDark;\n         this-&gt;panel1-&gt;Location = System::Drawing::Point( 16, 160 );\n         this-&gt;panel1-&gt;Size = System::Drawing::Size( 664, 320 );\n         this-&gt;panel1-&gt;MouseUp += gcnew System::Windows::Forms::MouseEventHandler( this, &amp;Form1::panel1_MouseUp );\n         this-&gt;panel1-&gt;Paint += gcnew System::Windows::Forms::PaintEventHandler( this, &amp;Form1::panel1_Paint );\n         this-&gt;panel1-&gt;MouseEnter += gcnew System::EventHandler( this, &amp;Form1::panel1_MouseEnter );\n         this-&gt;panel1-&gt;MouseHover += gcnew System::EventHandler( this, &amp;Form1::panel1_MouseHover );\n         this-&gt;panel1-&gt;MouseMove += gcnew System::Windows::Forms::MouseEventHandler( this, &amp;Form1::panel1_MouseMove );\n         this-&gt;panel1-&gt;MouseLeave += gcnew System::EventHandler( this, &amp;Form1::panel1_MouseLeave );\n         this-&gt;panel1-&gt;MouseDown += gcnew System::Windows::Forms::MouseEventHandler( this, &amp;Form1::panel1_MouseDown );\n         this-&gt;panel1-&gt;MouseWheel += gcnew System::Windows::Forms::MouseEventHandler( this, &amp;Form1::panel1_MouseWheel );\n         \n         // Clear Button\n         this-&gt;clearButton-&gt;Anchor = static_cast&lt;System::Windows::Forms::AnchorStyles&gt;(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Right);\n         this-&gt;clearButton-&gt;Location = System::Drawing::Point( 592, 504 );\n         this-&gt;clearButton-&gt;TabIndex = 1;\n         this-&gt;clearButton-&gt;Text = &quot;Clear&quot;;\n         this-&gt;clearButton-&gt;Click += gcnew System::EventHandler( this, &amp;Form1::clearButton_Click );\n         \n         // GroupBox\n         this-&gt;groupBox1-&gt;Anchor = static_cast&lt;System::Windows::Forms::AnchorStyles&gt;(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n         this-&gt;groupBox1-&gt;Location = System::Drawing::Point( 16, 24 );\n         this-&gt;groupBox1-&gt;Size = System::Drawing::Size( 664, 128 );\n         this-&gt;groupBox1-&gt;Text = &quot;System::Windows::Forms::SystemInformation&quot;;\n         \n         // Set up how the form should be displayed and add the controls to the form.\n         this-&gt;ClientSize = System::Drawing::Size( 696, 534 );\n         array&lt;System::Windows::Forms::Control^&gt;^temp0 = {this-&gt;label9,this-&gt;label8,this-&gt;label7,this-&gt;label6,this-&gt;label5,this-&gt;label4,this-&gt;label3,this-&gt;label2,this-&gt;clearButton,this-&gt;panel1,this-&gt;label1,this-&gt;groupBox1};\n         this-&gt;Controls-&gt;AddRange( temp0 );\n         this-&gt;Text = &quot;Mouse Event Example&quot;;\n         \n         // Displays information about the system mouse.\n         label2-&gt;Text = &quot;SystemInformation::DoubleClickSize: {0}&quot;,SystemInformation::DoubleClickSize;\n         label3-&gt;Text = &quot;SystemInformation::DoubleClickTime: {0}&quot;,SystemInformation::DoubleClickTime;\n         label4-&gt;Text = &quot;SystemInformation::MousePresent: {0}&quot;,SystemInformation::MousePresent;\n         label5-&gt;Text = &quot;SystemInformation::MouseButtons: {0}&quot;,SystemInformation::MouseButtons;\n         label6-&gt;Text = &quot;SystemInformation::MouseButtonsSwapped: {0}&quot;,SystemInformation::MouseButtonsSwapped;\n         label7-&gt;Text = &quot;SystemInformation::MouseWheelPresent: {0}&quot;,SystemInformation::MouseWheelPresent;\n         label8-&gt;Text = &quot;SystemInformation::MouseWheelScrollLines: {0}&quot;,SystemInformation::MouseWheelScrollLines;\n         label9-&gt;Text = &quot;SystemInformation::NativeMouseWheelSupport: {0}&quot;,SystemInformation::NativeMouseWheelSupport;\n      }\n\n   private:\n      void panel1_MouseDown( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n      {\n         // Update the mouse path with the mouse information\n         Point mouseDownLocation = Point(e-&gt;X,e-&gt;Y);\n         String^ eventString = nullptr;\n         switch ( e-&gt;Button )\n         {\n            case ::MouseButtons::Left:\n               eventString = &quot;L&quot;;\n               break;\n\n            case ::MouseButtons::Right:\n               eventString = &quot;R&quot;;\n               break;\n\n            case ::MouseButtons::Middle:\n               eventString = &quot;M&quot;;\n               break;\n\n            case ::MouseButtons::XButton1:\n               eventString = &quot;X1&quot;;\n               break;\n\n            case ::MouseButtons::XButton2:\n               eventString = &quot;X2&quot;;\n               break;\n\n            case ::MouseButtons::None:\n            default:\n               break;\n         }\n         if ( eventString != nullptr )\n         {\n            mousePath-&gt;AddString( eventString, FontFamily::GenericSerif, (int)FontStyle::Bold, (float)fontSize, mouseDownLocation, StringFormat::GenericDefault );\n         }\n         else\n         {\n            mousePath-&gt;AddLine( mouseDownLocation, mouseDownLocation );\n         }\n\n         panel1-&gt;Focus();\n         panel1-&gt;Invalidate();\n      }\n\n      void panel1_MouseEnter( Object^ sender, System::EventArgs^ /*e*/ )\n      {\n         \n         // Update the mouse event label to indicate the MouseEnter event occurred.\n         label1-&gt;Text = String::Concat( sender-&gt;GetType(), &quot;: MouseEnter&quot; );\n      }\n\n      void panel1_MouseHover( Object^ sender, System::EventArgs^ /*e*/ )\n      {\n         \n         // Update the mouse event label to indicate the MouseHover event occurred.\n         label1-&gt;Text = String::Concat( sender-&gt;GetType(), &quot;: MouseHover&quot; );\n      }\n\n      void panel1_MouseLeave( Object^ sender, System::EventArgs^ /*e*/ )\n      {\n         \n         // Update the mouse event label to indicate the MouseLeave event occurred.\n         label1-&gt;Text = String::Concat( sender-&gt;GetType(), &quot;: MouseLeave&quot; );\n      }\n\n      void panel1_MouseMove( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n      {\n         // Update the mouse path that is drawn onto the Panel.\n         int mouseX = e-&gt;X;\n         int mouseY = e-&gt;Y;\n         mousePath-&gt;AddLine( mouseX, mouseY, mouseX, mouseY );\n      }\n\n      void panel1_MouseWheel( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n      {\n         // Update the drawing based upon the mouse wheel scrolling.\n         int numberOfTextLinesToMove = e-&gt;Delta * SystemInformation::MouseWheelScrollLines / 120;\n         int numberOfPixelsToMove = numberOfTextLinesToMove * fontSize;\n         if ( numberOfPixelsToMove != 0 )\n         {\n            System::Drawing::Drawing2D::Matrix^ translateMatrix = gcnew System::Drawing::Drawing2D::Matrix;\n            translateMatrix-&gt;Translate( 0, (float)numberOfPixelsToMove );\n            mousePath-&gt;Transform(translateMatrix);\n         }\n\n         panel1-&gt;Invalidate();\n      }\n\n      void panel1_MouseUp( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n      {\n         Point mouseUpLocation = System::Drawing::Point( e-&gt;X, e-&gt;Y );\n         \n         // Show the number of clicks in the path graphic.\n         int numberOfClicks = e-&gt;Clicks;\n         mousePath-&gt;AddString( String::Format( &quot;   {0}&quot;, numberOfClicks ), FontFamily::GenericSerif, (int)FontStyle::Bold, (float)fontSize, mouseUpLocation, StringFormat::GenericDefault );\n         panel1-&gt;Invalidate();\n      }\n\n      void panel1_Paint( Object^ /*sender*/, System::Windows::Forms::PaintEventArgs^ e )\n      {\n         // Perform the painting of the Panel.\n         e-&gt;Graphics-&gt;DrawPath( System::Drawing::Pens::DarkRed, mousePath );\n      }\n\n      void clearButton_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n      {\n         // Clear the Panel display.\n         delete mousePath;\n         mousePath = gcnew System::Drawing::Drawing2D::GraphicsPath;\n         panel1-&gt;Invalidate();\n      }\n   };\n}\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew MouseEvent::Form1 );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.MouseEvent#1\">using System;\nusing System.Drawing;\nusing System.Windows.Forms;\n\nnamespace MouseEvent\n{\n    public class Form1 : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.Panel panel1;\n        private System.Windows.Forms.Label label1;\n        private System.Windows.Forms.Label label2;\n        private System.Windows.Forms.Label label3;\n        private System.Windows.Forms.Label label4;\n        private System.Windows.Forms.Label label5;\n        private System.Windows.Forms.Label label6;\n        private System.Windows.Forms.Label label7;\n        private System.Windows.Forms.Label label8;\n        private System.Windows.Forms.Label label9;\n        private System.Windows.Forms.Button clearButton;\n        private System.Drawing.Drawing2D.GraphicsPath mousePath;\n        private System.Windows.Forms.GroupBox groupBox1;\n\n        private int fontSize = 20;        \n\n        [STAThread]\n        static void Main() \n        {\n            Application.Run(new Form1());\n        }\n\n        public Form1()\n        {            \n            mousePath = new System.Drawing.Drawing2D.GraphicsPath();\n\n            this.panel1 = new System.Windows.Forms.Panel();\n            this.label1 = new System.Windows.Forms.Label();\n            this.clearButton = new System.Windows.Forms.Button();\n            this.label2 = new System.Windows.Forms.Label();\n            this.label3 = new System.Windows.Forms.Label();\n            this.label4 = new System.Windows.Forms.Label();\n            this.label5 = new System.Windows.Forms.Label();\n            this.label6 = new System.Windows.Forms.Label();\n            this.label7 = new System.Windows.Forms.Label();\n            this.label8 = new System.Windows.Forms.Label();\n            this.label9 = new System.Windows.Forms.Label();\n            this.groupBox1 = new System.Windows.Forms.GroupBox();\n\n            // Mouse Events Label\n            this.label1.Location = new System.Drawing.Point(24, 504);\n            this.label1.Size = new System.Drawing.Size(392, 23);\n            // DoubleClickSize Label\n            this.label2.AutoSize = true;\n            this.label2.Location = new System.Drawing.Point(24, 48);\n            this.label2.Size = new System.Drawing.Size(35, 13);\n            // DoubleClickTime Label\n            this.label3.AutoSize = true;\n            this.label3.Location = new System.Drawing.Point(24, 72);\n            this.label3.Size = new System.Drawing.Size(35, 13);\n            // MousePresent Label\n            this.label4.AutoSize = true;\n            this.label4.Location = new System.Drawing.Point(24, 96);\n            this.label4.Size = new System.Drawing.Size(35, 13);\n            // MouseButtons Label\n            this.label5.AutoSize = true;\n            this.label5.Location = new System.Drawing.Point(24, 120);\n            this.label5.Size = new System.Drawing.Size(35, 13);\n            // MouseButtonsSwapped Label\n            this.label6.AutoSize = true;\n            this.label6.Location = new System.Drawing.Point(320, 48);\n            this.label6.Size = new System.Drawing.Size(35, 13);\n            // MouseWheelPresent Label\n            this.label7.AutoSize = true;\n            this.label7.Location = new System.Drawing.Point(320, 72);\n            this.label7.Size = new System.Drawing.Size(35, 13);\n            // MouseWheelScrollLines Label\n            this.label8.AutoSize = true;\n            this.label8.Location = new System.Drawing.Point(320, 96);\n            this.label8.Size = new System.Drawing.Size(35, 13);\n            // NativeMouseWheelSupport Label\n            this.label9.AutoSize = true;\n            this.label9.Location = new System.Drawing.Point(320, 120);\n            this.label9.Size = new System.Drawing.Size(35, 13);\n\n            // Mouse Panel\n            this.panel1.Anchor = ((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) \n                | System.Windows.Forms.AnchorStyles.Right);\n            this.panel1.BackColor = System.Drawing.SystemColors.ControlDark;\n            this.panel1.Location = new System.Drawing.Point(16, 160);\n            this.panel1.Size = new System.Drawing.Size(664, 320);\n            this.panel1.MouseUp += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseUp);\n            this.panel1.Paint += new System.Windows.Forms.PaintEventHandler(this.panel1_Paint);\n            this.panel1.MouseEnter += new System.EventHandler(this.panel1_MouseEnter);\n            this.panel1.MouseHover += new System.EventHandler(this.panel1_MouseHover);\n            this.panel1.MouseMove += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseMove);\n            this.panel1.MouseLeave += new System.EventHandler(this.panel1_MouseLeave);\n            this.panel1.MouseDown += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseDown);\n            this.panel1.MouseWheel += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseWheel);\n\n            // Clear Button\n            this.clearButton.Anchor = (System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right);\n            this.clearButton.Location = new System.Drawing.Point(592, 504);\n            this.clearButton.TabIndex = 1;\n            this.clearButton.Text = &quot;Clear&quot;;\n            this.clearButton.Click += new System.EventHandler(this.clearButton_Click);\n            \n            // GroupBox\n            this.groupBox1.Anchor = ((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) \n                | System.Windows.Forms.AnchorStyles.Right);\n            this.groupBox1.Location = new System.Drawing.Point(16, 24);\n            this.groupBox1.Size = new System.Drawing.Size(664, 128);\n            this.groupBox1.Text = &quot;System.Windows.Forms.SystemInformation&quot;;\n\n            // Set up how the form should be displayed and add the controls to the form.\n            this.ClientSize = new System.Drawing.Size(696, 534);\n            this.Controls.AddRange(new System.Windows.Forms.Control[] {\n                                        this.label9,this.label8,this.label7,this.label6,\n                                        this.label5,this.label4,this.label3,this.label2,\n                                        this.clearButton,this.panel1,this.label1,this.groupBox1});\n            this.Text = &quot;Mouse Event Example&quot;;\n\n            // Displays information about the system mouse.\n            label2.Text = &quot;SystemInformation.DoubleClickSize: &quot; + SystemInformation.DoubleClickSize.ToString();\n            label3.Text = &quot;SystemInformation.DoubleClickTime: &quot; + SystemInformation.DoubleClickTime.ToString();\n            label4.Text = &quot;SystemInformation.MousePresent: &quot; + SystemInformation.MousePresent.ToString();\n            label5.Text = &quot;SystemInformation.MouseButtons: &quot; + SystemInformation.MouseButtons.ToString();\n            label6.Text = &quot;SystemInformation.MouseButtonsSwapped: &quot; + SystemInformation.MouseButtonsSwapped.ToString();\n            label7.Text = &quot;SystemInformation.MouseWheelPresent: &quot; + SystemInformation.MouseWheelPresent.ToString();\n            label8.Text = &quot;SystemInformation.MouseWheelScrollLines: &quot; + SystemInformation.MouseWheelScrollLines.ToString();\n            label9.Text = &quot;SystemInformation.NativeMouseWheelSupport: &quot; + SystemInformation.NativeMouseWheelSupport.ToString();\n\n        }\n\n        private void panel1_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e) \n        {\n            // Update the mouse path with the mouse information\n            Point mouseDownLocation = new Point(e.X, e.Y);\n\n            string eventString = null;\n            switch (e.Button) {\n                case MouseButtons.Left:\n                    eventString = &quot;L&quot;;\n                    break;\n                case MouseButtons.Right:\n                    eventString = &quot;R&quot;;\n                    break;\n                case MouseButtons.Middle:\n                    eventString = &quot;M&quot;;\n                    break;\n                case MouseButtons.XButton1:\n                    eventString = &quot;X1&quot;;\n                    break;\n                case MouseButtons.XButton2:\n                    eventString = &quot;X2&quot;;\n                    break;\n                case MouseButtons.None:\n                default:\n                    break;\n            }\n\n            if (eventString != null) \n            {\n                mousePath.AddString(eventString, FontFamily.GenericSerif, (int)FontStyle.Bold, fontSize, mouseDownLocation, StringFormat.GenericDefault);\n            }\n            else \n            {\n                mousePath.AddLine(mouseDownLocation,mouseDownLocation);\n            }\n            panel1.Focus();\n            panel1.Invalidate();\n        }\n\n        private void panel1_MouseEnter(object sender, System.EventArgs e) \n        {\n            // Update the mouse event label to indicate the MouseEnter event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseEnter&quot;;\n        }\n\n        private void panel1_MouseHover(object sender, System.EventArgs e) \n        {\n            // Update the mouse event label to indicate the MouseHover event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseHover&quot;;\n        }\n\n        private void panel1_MouseLeave(object sender, System.EventArgs e) \n        {\n            // Update the mouse event label to indicate the MouseLeave event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseLeave&quot;;\n        }\n\n        private void panel1_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)\n        {\n            // Update the mouse path that is drawn onto the Panel.\n            int mouseX = e.X;\n            int mouseY = e.Y;\n            \n            mousePath.AddLine(mouseX,mouseY,mouseX,mouseY);\n        }\n\n        private void panel1_MouseWheel(object sender, System.Windows.Forms.MouseEventArgs e)\n        {\n            // Update the drawing based upon the mouse wheel scrolling.\n      \n            int numberOfTextLinesToMove = e.Delta * SystemInformation.MouseWheelScrollLines / 120;\n            int numberOfPixelsToMove = numberOfTextLinesToMove * fontSize;\n\n            if (numberOfPixelsToMove != 0) {\n                System.Drawing.Drawing2D.Matrix translateMatrix = new  System.Drawing.Drawing2D.Matrix();\n                translateMatrix.Translate(0, numberOfPixelsToMove);\n                mousePath.Transform(translateMatrix);\n            }\n            panel1.Invalidate();\n        }\n        private void panel1_MouseUp(object sender, System.Windows.Forms.MouseEventArgs e) \n        {\n            Point mouseUpLocation = new System.Drawing.Point(e.X, e.Y);\n        \n            // Show the number of clicks in the path graphic.\n            int numberOfClicks = e.Clicks;\n            mousePath.AddString(&quot;    &quot; + numberOfClicks.ToString(), \n                        FontFamily.GenericSerif, (int)FontStyle.Bold, \n                        fontSize, mouseUpLocation, StringFormat.GenericDefault);\n\n            panel1.Invalidate();\n        }\n\n        private void panel1_Paint(object sender, System.Windows.Forms.PaintEventArgs e) \n        {    \n            // Perform the painting of the Panel.\n            e.Graphics.DrawPath(System.Drawing.Pens.DarkRed, mousePath);\n        }\n\n        private void clearButton_Click(object sender, System.EventArgs e)\n        {\n            // Clear the Panel display.\n            mousePath.Dispose();\n            mousePath = new System.Drawing.Drawing2D.GraphicsPath();\n            panel1.Invalidate();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.MouseEvent#1\">Imports System\nImports System.Drawing\nImports System.Windows.Forms\n\nNamespace MouseEvent\n    &#39; Summary description for Form1.\n    Public NotInheritable Class Form1\n        Inherits System.Windows.Forms.Form\n\n        Friend WithEvents panel1 As System.Windows.Forms.Panel\n        Private label1 As System.Windows.Forms.Label\n        Private label2 As System.Windows.Forms.Label\n        Private label3 As System.Windows.Forms.Label\n        Private label4 As System.Windows.Forms.Label\n        Private label5 As System.Windows.Forms.Label\n        Private label6 As System.Windows.Forms.Label\n        Private label7 As System.Windows.Forms.Label\n        Private label8 As System.Windows.Forms.Label\n        Private label9 As System.Windows.Forms.Label\n        Friend WithEvents clearButton As System.Windows.Forms.Button\n        Private mousePath As System.Drawing.Drawing2D.GraphicsPath\n        Private groupBox1 As System.Windows.Forms.GroupBox\n\n        Private fontSize As Integer = 20\n        \n        &lt;System.STAThread()&gt;  _\n        Public Shared Sub Main()\n            System.Windows.Forms.Application.Run(New Form1())\n        End Sub &#39;Main\n\n        Public Sub New()\n\n            mousePath = New System.Drawing.Drawing2D.GraphicsPath()\n\n            Me.panel1 = New System.Windows.Forms.Panel()\n            Me.label1 = New System.Windows.Forms.Label()\n            Me.clearButton = New System.Windows.Forms.Button()\n            Me.label2 = New System.Windows.Forms.Label()\n            Me.label3 = New System.Windows.Forms.Label()\n            Me.label4 = New System.Windows.Forms.Label()\n            Me.label5 = New System.Windows.Forms.Label()\n            Me.label6 = New System.Windows.Forms.Label()\n            Me.label7 = New System.Windows.Forms.Label()\n            Me.label8 = New System.Windows.Forms.Label()\n            Me.label9 = New System.Windows.Forms.Label()\n            Me.groupBox1 = New System.Windows.Forms.GroupBox()\n\n            &#39; Mouse Events Label\n            Me.label1.Location = New System.Drawing.Point(24, 504) \n            Me.label1.Size = New System.Drawing.Size(392, 23) \n            &#39; DoubleClickSize Label\n            Me.label2.AutoSize = True \n            Me.label2.Location = New System.Drawing.Point(24, 48) \n            Me.label2.Size = New System.Drawing.Size(35, 13) \n            &#39; DoubleClickTime Label\n            Me.label3.AutoSize = True \n            Me.label3.Location = New System.Drawing.Point(24, 72) \n            Me.label3.Size = New System.Drawing.Size(35, 13) \n            &#39; MousePresent Label\n            Me.label4.AutoSize = True \n            Me.label4.Location = New System.Drawing.Point(24, 96) \n            Me.label4.Size = New System.Drawing.Size(35, 13) \n            &#39; MouseButtons Label\n            Me.label5.AutoSize = True \n            Me.label5.Location = New System.Drawing.Point(24, 120) \n            Me.label5.Size = New System.Drawing.Size(35, 13) \n            &#39; MouseButtonsSwapped Label\n            Me.label6.AutoSize = True \n            Me.label6.Location = New System.Drawing.Point(320, 48) \n            Me.label6.Size = New System.Drawing.Size(35, 13) \n            &#39; MouseWheelPresent Label\n            Me.label7.AutoSize = True \n            Me.label7.Location = New System.Drawing.Point(320, 72) \n            Me.label7.Size = New System.Drawing.Size(35, 13) \n            &#39; MouseWheelScrollLines Label\n            Me.label8.AutoSize = True \n            Me.label8.Location = New System.Drawing.Point(320, 96) \n            Me.label8.Size = New System.Drawing.Size(35, 13) \n            &#39; NativeMouseWheelSupport Label\n            Me.label9.AutoSize = True \n            Me.label9.Location = New System.Drawing.Point(320, 120) \n            Me.label9.Size = New System.Drawing.Size(35, 13) \n\n            &#39; Mouse Panel\n            Me.panel1.Anchor = System.Windows.Forms.AnchorStyles.Top Or _\n                                    System.Windows.Forms.AnchorStyles.Left Or _\n                                    System.Windows.Forms.AnchorStyles.Right\n            Me.panel1.BackColor = System.Drawing.SystemColors.ControlDark\n            Me.panel1.Location = New System.Drawing.Point(16, 160)\n            Me.panel1.Size = New System.Drawing.Size(664, 320)\n\n            &#39; Clear Button\n            Me.clearButton.Anchor = System.Windows.Forms.AnchorStyles.Top Or _\n                                    System.Windows.Forms.AnchorStyles.Right\n            Me.clearButton.Location = New System.Drawing.Point(592, 504)\n            Me.clearButton.TabIndex = 1\n            Me.clearButton.Text = &quot;Clear&quot;\n\n            &#39; GroupBox\n            Me.groupBox1.Anchor = System.Windows.Forms.AnchorStyles.Top Or _\n                                  System.Windows.Forms.AnchorStyles.Left Or _\n                                  System.Windows.Forms.AnchorStyles.Right\n            Me.groupBox1.Location = New System.Drawing.Point(16, 24)\n            Me.groupBox1.Size = New System.Drawing.Size(664, 128)\n            Me.groupBox1.Text = &quot;System.Windows.Forms.SystemInformation&quot;\n\n            &#39; Set up how the form should be displayed and add the controls to the form.\n            Me.ClientSize = New System.Drawing.Size(696, 534)\n            Me.Controls.AddRange(New System.Windows.Forms.Control() {Me.label9, _\n                            Me.label8, Me.label7, Me.label6, Me.label5, Me.label4, _\n                            Me.label3, Me.label2, Me.clearButton, Me.panel1, Me.label1, Me.groupBox1})\n\n            Me.Text = &quot;Mouse Event Example&quot;\n\n            &#39; Display information about the system mouse.\n            label2.Text = &quot;SystemInformation.DoubleClickSize: &quot; + SystemInformation.DoubleClickSize.ToString()\n            label3.Text = &quot;SystemInformation.DoubleClickTime: &quot; + SystemInformation.DoubleClickTime.ToString()\n            label4.Text = &quot;SystemInformation.MousePresent: &quot; + SystemInformation.MousePresent.ToString()\n            label5.Text = &quot;SystemInformation.MouseButtons: &quot; + SystemInformation.MouseButtons.ToString()\n            label6.Text = &quot;SystemInformation.MouseButtonsSwapped: &quot; + SystemInformation.MouseButtonsSwapped.ToString()\n            label7.Text = &quot;SystemInformation.MouseWheelPresent: &quot; + SystemInformation.MouseWheelPresent.ToString()\n            label8.Text = &quot;SystemInformation.MouseWheelScrollLines: &quot; + SystemInformation.MouseWheelScrollLines.ToString()\n            label9.Text = &quot;SystemInformation.NativeMouseWheelSupport: &quot; + SystemInformation.NativeMouseWheelSupport.ToString()\n        End Sub &#39;New\n\n        Private Sub panel1_MouseDown(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles panel1.MouseDown\n            &#39; Update the mouse path with the mouse information\n            Dim mouseDownLocation As New Point(e.X, e.Y)\n            \n            Dim eventString As String = Nothing\n            Select Case e.Button\n                Case MouseButtons.Left\n                    eventString = &quot;L&quot;\n                Case MouseButtons.Right\n                    eventString = &quot;R&quot;\n                Case MouseButtons.Middle\n                    eventString = &quot;M&quot;\n                Case MouseButtons.XButton1\n                    eventString = &quot;X1&quot;\n                Case MouseButtons.XButton2\n                    eventString = &quot;X2&quot;\n                Case MouseButtons.None:\n                     eventString = Nothing              \n            End Select\n            \n            If (eventString IsNot Nothing) Then\n                mousePath.AddString(eventString, FontFamily.GenericSerif, CInt(FontStyle.Bold), fontSize, mouseDownLocation, StringFormat.GenericDefault)\n            Else\n                mousePath.AddLine(mouseDownLocation, mouseDownLocation)\n            End If\n\n            panel1.Focus()\n            panel1.Invalidate()\n        End Sub \n        \n        Private Sub panel1_MouseEnter(sender As Object, e As System.EventArgs) Handles panel1.MouseEnter\n            &#39; Update the mouse event label to indicate the MouseEnter event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseEnter&quot;\n        End Sub\n        \n        Private Sub panel1_MouseHover(sender As Object, e As System.EventArgs) Handles panel1.MouseHover\n            &#39; Update the mouse event label to indicate the MouseHover event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseHover&quot;\n        End Sub\n        \n        Private Sub panel1_MouseLeave(sender As Object, e As System.EventArgs) Handles panel1.MouseLeave\n            &#39; Update the mouse event label to indicate the MouseLeave event occurred.\n            label1.Text = sender.GetType().ToString() + &quot;: MouseLeave&quot;\n        End Sub\n        \n        Private Sub panel1_MouseMove(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles panel1.MouseMove\n            &#39; Update the mouse path that is drawn onto the Panel.\n            Dim mouseX As Integer = e.X\n            Dim mouseY As Integer = e.Y\n            \n            mousePath.AddLine(mouseX, mouseY, mouseX, mouseY)\n        End Sub\n        Private Sub panel1_MouseWheel(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles panel1.MouseWheel\n            &#39; Update the drawing based upon the mouse wheel scrolling.\n            Dim numberOfTextLinesToMove As Integer = CInt(e.Delta * SystemInformation.MouseWheelScrollLines / 120) \n            Dim numberOfPixelsToMove As Integer = numberOfTextLinesToMove * fontSize\n            \n            If numberOfPixelsToMove &lt;&gt; 0 Then\n                Dim translateMatrix As New System.Drawing.Drawing2D.Matrix()\n                translateMatrix.Translate(0, numberOfPixelsToMove)\n                mousePath.Transform(translateMatrix)\n            End If\n\n            panel1.Invalidate()\n        End Sub\n        Private Sub panel1_MouseUp(sender As Object, e As System.Windows.Forms.MouseEventArgs) Handles panel1.MouseUp\n            Dim mouseUpLocation As New System.Drawing.Point(e.X, e.Y)\n            \n            &#39; Show the number of clicks in the path graphic.\n            Dim numberOfClicks As Integer = e.Clicks\n            mousePath.AddString(&quot;     &quot; + numberOfClicks.ToString(), _\n                                FontFamily.GenericSerif, CInt(FontStyle.Bold), _\n                                fontSize, mouseUpLocation, StringFormat.GenericDefault)\n\n            panel1.Invalidate()\n        End Sub\n        \n        Private Sub panel1_Paint(sender As Object, e As System.Windows.Forms.PaintEventArgs) Handles panel1.Paint\n            &#39; Perform the painting of the Panel.\n            e.Graphics.DrawPath(System.Drawing.Pens.DarkRed, mousePath)\n        End Sub\n        \n        Private Sub clearButton_Click(sender As Object, e As System.EventArgs) Handles clearButton.Click\n            &#39; Clear the Panel display.\n            mousePath.Dispose()\n            mousePath = New System.Drawing.Drawing2D.GraphicsPath()\n            panel1.Invalidate()\n        End Sub\n        \n    End Class &#39;Form1\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Move\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Move</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the control is moved.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler Move;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the Move event to display the location of the form in screen coordinates on the caption bar of the form.  </p>\n<pre><code class=\"lang-cpp\" name=\"Control.Move#1\">   // The following example displays the location of the form in screen coordinates\n   // on the caption bar of the form.\nprivate:\n   void Form1_Move( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      this-&gt;Text = String::Format( &quot;Form screen position = {0}&quot;, this-&gt;Location );\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Control.Move#1\">    &#39; The following example displays the location of the form in screen coordinates\n    &#39; on the caption bar of the form.\n    Private Sub Form1_Move(sender As Object, e As System.EventArgs) Handles MyBase.Move\n        Me.Text = &quot;Form screen position = &quot; + Me.Location.ToString()\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Control.Move#1\">        // The following example displays the location of the form in screen coordinates\n        // on the caption bar of the form.\n        private void Form1_Move(object sender, System.EventArgs e)\n        {\n            this.Text = &quot;Form screen position = &quot; + this.Location.ToString();\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_PaddingChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PaddingChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the control&#39;s padding changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler PaddingChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the PaddingChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of a type that inherits from <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a>, such as a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> or <a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a>. Then name the instance <code>Control1</code> and ensure that the event handler is associated with the PaddingChanged event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#41\">private void Control1_PaddingChanged(Object sender, EventArgs e) {\n\n   MessageBox.Show(&quot;You are in the Control.PaddingChanged event.&quot;);\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#41\">Private Sub Control1_PaddingChanged(sender as Object, e as EventArgs) _ \n     Handles Control1.PaddingChanged\n\n   MessageBox.Show(&quot;You are in the Control.PaddingChanged event.&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Paint\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Paint</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the control is redrawn.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.PaintEventHandler Paint;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Paint event is raised when the control is redrawn. It passes an instance of <a class=\"xref\" href=\"system.windows.forms.painteventargs\" data-linktype=\"relative-path\">PaintEventArgs</a> to the method(s) that handles the Paint event.  </p>\n<p> When creating a new custom control or an inherited control with a different visual appearance, you must provide code to render the control by overriding the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnPaint_\" data-linktype=\"relative-path\">OnPaint</a> method. For more information, see <a href=\"../Topic/Overriding%20the%20OnPaint%20Method.md\" data-linktype=\"relative-path\">Overriding the OnPaint Method</a> and <a href=\"../Topic/Custom%20Control%20Painting%20and%20Rendering.md\" data-linktype=\"relative-path\">Custom Control Painting and Rendering</a>.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a <a class=\"xref\" href=\"system.windows.forms.picturebox\" data-linktype=\"relative-path\">PictureBox</a> control on the form and uses the Paint event to draw to it.  </p>\n<pre><code class=\"lang-cs\" name=\"Control.Paint#1\">        // This example creates a PictureBox control on the form and draws to it.\n        // This example assumes that the Form_Load event handler method is\n        // connected to the Load event of the form.\n\n        private PictureBox pictureBox1 = new PictureBox();\n        private void Form1_Load(object sender, System.EventArgs e)\n        {\n            // Dock the PictureBox to the form and set its background to white.\n            pictureBox1.Dock = DockStyle.Fill;\n            pictureBox1.BackColor = Color.White;\n            // Connect the Paint event of the PictureBox to the event handler method.\n            pictureBox1.Paint += new System.Windows.Forms.PaintEventHandler(this.pictureBox1_Paint);\n\n            // Add the PictureBox control to the Form.\n            this.Controls.Add(pictureBox1);\n        }\n\n        private void pictureBox1_Paint(object sender, System.Windows.Forms.PaintEventArgs e)\n        {\n            // Create a local version of the graphics object for the PictureBox.\n            Graphics g = e.Graphics;\n\n            // Draw a string on the PictureBox.\n            g.DrawString(&quot;This is a diagonal line drawn on the control&quot;,\n                new Font(&quot;Arial&quot;,10), System.Drawing.Brushes.Blue, new Point(30,30));\n            // Draw a line in the PictureBox.\n            g.DrawLine(System.Drawing.Pens.Red, pictureBox1.Left, pictureBox1.Top,\n                pictureBox1.Right, pictureBox1.Bottom);\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Control.Paint#1\">   // This example creates a PictureBox control on the form and draws to it.\n   // This example assumes that the Form_Load event handler method is\n   // connected to the Load event of the form.\nprivate:\n   PictureBox^ pictureBox1;\n   void Form1_Load( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      pictureBox1 = gcnew PictureBox;\n\n      // Dock the PictureBox to the form and set its background to white.\n      pictureBox1-&gt;Dock = DockStyle::Fill;\n      pictureBox1-&gt;BackColor = Color::White;\n\n      // Connect the Paint event of the PictureBox to the event handler method.\n      pictureBox1-&gt;Paint += gcnew System::Windows::Forms::PaintEventHandler( this, &amp;Form1::pictureBox1_Paint );\n\n      // Add the PictureBox control to the Form.\n      this-&gt;Controls-&gt;Add( pictureBox1 );\n   }\n\n   void pictureBox1_Paint( Object^ /*sender*/, System::Windows::Forms::PaintEventArgs^ e )\n   {\n      // Create a local version of the graphics object for the PictureBox.\n      Graphics^ g = e-&gt;Graphics;\n\n      // Draw a string on the PictureBox.\n      g-&gt;DrawString( &quot;This is a diagonal line drawn on the control&quot;,\n         gcnew System::Drawing::Font( &quot;Arial&quot;,10 ), System::Drawing::Brushes::Blue, Point(30,30) );\n\n      // Draw a line in the PictureBox.\n      g-&gt;DrawLine( System::Drawing::Pens::Red, pictureBox1-&gt;Left, pictureBox1-&gt;Top,\n         pictureBox1-&gt;Right, pictureBox1-&gt;Bottom );\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Control.Paint#1\">    &#39; This example creates a PictureBox control on the form and draws to it. \n    &#39; This example assumes that the Form_Load event handler method is connected \n    &#39; to the Load event of the form.\n    Private pictureBox1 As New PictureBox()\n\n    Private Sub Form1_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Load\n        &#39; Dock the PictureBox to the form and set its background to white.\n        pictureBox1.Dock = DockStyle.Fill\n        pictureBox1.BackColor = Color.White\n        &#39; Connect the Paint event of the PictureBox to the event handler method.\n        AddHandler pictureBox1.Paint, AddressOf Me.pictureBox1_Paint\n\n        &#39; Add the PictureBox control to the Form.\n        Me.Controls.Add(pictureBox1)\n    End Sub &#39;Form1_Load\n\n\n    Private Sub pictureBox1_Paint(ByVal sender As Object, ByVal e As System.Windows.Forms.PaintEventArgs)\n        &#39; Create a local version of the graphics object for the PictureBox.\n        Dim g As Graphics = e.Graphics\n\n        &#39; Draw a string on the PictureBox.\n        g.DrawString(&quot;This is a diagonal line drawn on the control&quot;, _\n            New Font(&quot;Arial&quot;, 10), Brushes.Red, New PointF(30.0F, 30.0F))\n        &#39; Draw a line in the PictureBox.\n        g.DrawLine(System.Drawing.Pens.Red, pictureBox1.Left, _ \n            pictureBox1.Top, pictureBox1.Right, pictureBox1.Bottom)\n    End Sub &#39;pictureBox1_Paint\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_ParentChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ParentChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the <span class=\"xref\">stem.Windows.Forms.Control.Parent*</span> property value changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler ParentChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event is raised if the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Parent_\" data-linktype=\"relative-path\">Parent</a> property is changed by either a programmatic modification or user interaction.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_PreviewKeyDown\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PreviewKeyDown</div>        \r\n          </div>\r\n    \r\n            <p>Occurs before the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyDown\" data-linktype=\"relative-path\">KeyDown</a> event when a key is pressed while focus is on this control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.PreviewKeyDownEventHandler PreviewKeyDown;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Some key presses, such as the TAB, RETURN, ESC, and arrow keys, are typically ignored by some controls because they are not considered input key presses. For example, by default, a <a class=\"xref\" href=\"system.windows.controls.button\" data-linktype=\"relative-path\">Button</a> control ignores the arrow keys. Pressing the arrow keys typically causes the focus to move to the previous or next control. The arrow keys are considered navigation keys and pressing these keys typically do not raise the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyDown\" data-linktype=\"relative-path\">KeyDown</a> event for a<a class=\"xref\" href=\"system.windows.controls.button\" data-linktype=\"relative-path\">Button</a>. However, pressing the arrow keys for a <a class=\"xref\" href=\"system.windows.controls.button\" data-linktype=\"relative-path\">Button</a> does raise the PreviewKeyDown event. By handling the PreviewKeyDown event for a <a class=\"xref\" href=\"system.windows.controls.button\" data-linktype=\"relative-path\">Button</a> and setting the <a class=\"xref\" href=\"system.windows.forms.previewkeydowneventargs#System_Windows_Forms_PreviewKeyDownEventArgs_IsInputKey_\" data-linktype=\"relative-path\">IsInputKey</a> property to <code>true</code>, you can raise the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyDown\" data-linktype=\"relative-path\">KeyDown</a> event when the arrow keys are pressed. However, if you handle the arrow keys, the focus will no longer move to the previous or next control.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> that includes a <a class=\"xref\" href=\"system.windows.forms.contextmenustrip\" data-linktype=\"relative-path\">ContextMenuStrip</a>. When the <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> has the focus and you press the UP ARROW or DOWN ARROW keys, the <a class=\"xref\" href=\"system.windows.forms.contextmenustrip\" data-linktype=\"relative-path\">ContextMenuStrip</a> appears. The PreviewKeyDown event handler detects when the UP ARROW or DOWN ARROW keys are pressed and sets the <a class=\"xref\" href=\"system.windows.forms.previewkeydowneventargs#System_Windows_Forms_PreviewKeyDownEventArgs_IsInputKey_\" data-linktype=\"relative-path\">IsInputKey</a> property to <code>true</code>. This raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyDown\" data-linktype=\"relative-path\">KeyDown</a> event so that you can display the <a class=\"xref\" href=\"system.windows.forms.contextmenustrip\" data-linktype=\"relative-path\">ContextMenuStrip</a>. You should not put any logic in the PreviewKeyDown event handler, other than to set the <a class=\"xref\" href=\"system.windows.forms.previewkeydowneventargs#System_Windows_Forms_PreviewKeyDownEventArgs_IsInputKey_\" data-linktype=\"relative-path\">IsInputKey</a> property. Instead, you should put your logic in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyDown\" data-linktype=\"relative-path\">KeyDown</a> event handler.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.Control.PreviewKeyDown#1\">        public Form1()\n        {\n            InitializeComponent();\n\n            // Form that has a button on it\n            button1.PreviewKeyDown +=new PreviewKeyDownEventHandler(button1_PreviewKeyDown);\n            button1.KeyDown += new KeyEventHandler(button1_KeyDown);\n            button1.ContextMenuStrip = new ContextMenuStrip();\n            // Add items to ContextMenuStrip\n            button1.ContextMenuStrip.Items.Add(&quot;One&quot;);\n            button1.ContextMenuStrip.Items.Add(&quot;Two&quot;);\n            button1.ContextMenuStrip.Items.Add(&quot;Three&quot;);\n        }\n\n        // By default, KeyDown does not fire for the ARROW keys\n        void button1_KeyDown(object sender, KeyEventArgs e)\n        {\n            switch (e.KeyCode)\n            {\n                case Keys.Down:\n                case Keys.Up:\n                    if (button1.ContextMenuStrip != null)\n                    {\n                        button1.ContextMenuStrip.Show(button1,\n                            new Point(0, button1.Height), ToolStripDropDownDirection.BelowRight);\n                    }\n                    break;\n            }\n        }\n        \n        // PreviewKeyDown is where you preview the key.\n        // Do not put any logic here, instead use the\n        // KeyDown event after setting IsInputKey to true.\n        private void button1_PreviewKeyDown(object sender, PreviewKeyDownEventArgs e)\n        {\n            switch (e.KeyCode)\n            {\n                case Keys.Down:\n                case Keys.Up:\n                    e.IsInputKey = true;\n                    break;\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.Control.PreviewKeyDown#1\">Public Class Form1\n\n    Public Sub New()\n        InitializeComponent()\n        &#39; Form that has a button on it\n        AddHandler Button1.PreviewKeyDown, AddressOf Me.button1_PreviewKeyDown\n        AddHandler Button1.KeyDown, AddressOf Me.button1_KeyDown\n        Button1.ContextMenuStrip = New ContextMenuStrip\n        &#39; Add items to ContextMenuStrip\n        Button1.ContextMenuStrip.Items.Add(&quot;One&quot;)\n        Button1.ContextMenuStrip.Items.Add(&quot;Two&quot;)\n        Button1.ContextMenuStrip.Items.Add(&quot;Three&quot;)\n    End Sub\n\n    &#39; By default, KeyDown does not fire for the ARROW keys\n    Private Sub button1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs)\n        Select Case (e.KeyCode)\n            Case Keys.Down, Keys.Up\n                If (Not (Button1.ContextMenuStrip) Is Nothing) Then\n                    Button1.ContextMenuStrip.Show(Button1, _\n                        New Point(0, Button1.Height), ToolStripDropDownDirection.BelowRight)\n                End If\n        End Select\n    End Sub\n\n    &#39; PreviewKeyDown is where you preview the key.\n    &#39; Do not put any logic here, instead use the\n    &#39; KeyDown event after setting IsInputKey to true.\n    Private Sub button1_PreviewKeyDown(ByVal sender As Object, ByVal e As PreviewKeyDownEventArgs)\n        Select Case (e.KeyCode)\n            Case Keys.Down, Keys.Up\n                e.IsInputKey = True\n        End Select\n    End Sub\n\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_QueryAccessibilityHelp\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">QueryAccessibilityHelp</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when <a class=\"xref\" href=\"system.windows.forms.accessibleobject\" data-linktype=\"relative-path\">AccessibleObject</a> is providing help to accessibility applications.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.QueryAccessibilityHelpEventHandler QueryAccessibilityHelp;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You should use the <a class=\"xref\" href=\"system.windows.forms.helpprovider\" data-linktype=\"relative-path\">HelpProvider</a> class to enable users to invoke help on your accessible object by pressing the F1 key. Using the <a class=\"xref\" href=\"system.windows.forms.helpprovider\" data-linktype=\"relative-path\">HelpProvider</a> provides you with complete information in the <a class=\"xref\" href=\"system.windows.forms.queryaccessibilityhelpeventargs\" data-linktype=\"relative-path\">QueryAccessibilityHelpEventArgs</a>. For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the creation of an accessibility-aware chart control, using the <a class=\"xref\" href=\"system.windows.forms.accessibleobject\" data-linktype=\"relative-path\">AccessibleObject</a> and <a class=\"xref\" href=\"system.windows.forms.control.controlaccessibleobject\" data-linktype=\"relative-path\">Control+ControlAccessibleObject</a> classes to expose accessible information. The control plots two curves along with a legend. The <code>ChartControlAccessibleObject</code> class, which derives from <code>ControlAccessibleObject</code>, is used in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CreateAccessibilityInstance_\" data-linktype=\"relative-path\">CreateAccessibilityInstance</a> method to provide custom accessible information for the chart control. Since the chart legend is not an actual <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> -based control, but instead is drawn by the chart control, it does not any built-in accessible information. Because of this, the <code>ChartControlAccessibleObject</code> class overrides the <a class=\"xref\" href=\"system.windows.forms.accessibleobject#System_Windows_Forms_AccessibleObject_GetChild_\" data-linktype=\"relative-path\">GetChild</a> method to return the <code>CurveLegendAccessibleObject</code> that represents accessible information for each part of the legend. When an accessible-aware application uses this control, the control can provide the necessary accessible information.  </p>\n<p> This code excerpt demonstrates handling the QueryAccessibilityHelp event. See the <a class=\"xref\" href=\"system.windows.forms.accessibleobject\" data-linktype=\"relative-path\">AccessibleObject</a> class overview for the complete code example.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.AccessibleObject#3\">        &#39; Handle the QueryAccessibilityHelp event.\n        Private Sub ChartControl_QueryAccessibilityHelp(sender As Object, _\n                           e As System.Windows.Forms.QueryAccessibilityHelpEventArgs) Handles MyBase.QueryAccessibilityHelp\n            e.HelpString = &quot;Displays chart data&quot;\n        End Sub \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.AccessibleObject#3\">        // Handles the QueryAccessibilityHelp event.\n        private void ChartControl_QueryAccessibilityHelp(object sender, \n                                    System.Windows.Forms.QueryAccessibilityHelpEventArgs e)\n        {            \n            e.HelpString = &quot;Displays chart data&quot;;\n        }          \n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.AccessibleObject#3\">   // Handles the QueryAccessibilityHelp event.\n   void ChartControl_QueryAccessibilityHelp( Object^ /*sender*/, System::Windows::Forms::QueryAccessibilityHelpEventArgs^ e )\n   {\n      e-&gt;HelpString = &quot;Displays chart data&quot;;\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_QueryContinueDrag\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">QueryContinueDrag</div>        \r\n          </div>\r\n    \r\n            <p>Occurs during a drag-and-drop operation and enables the drag source to determine whether the drag-and-drop operation should be canceled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.QueryContinueDragEventHandler QueryContinueDrag;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The QueryContinueDrag event is raised when there is a change in the keyboard or mouse button state during a drag-and-drop operation. The QueryContinueDrag event enables the drag source to determine whether the drag-and-drop operation should be canceled.  </p>\n<p> The following describes how and when events related to drag-and-drop operations are raised.  </p>\n<p> The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoDragDrop_\" data-linktype=\"relative-path\">DoDragDrop</a> method determines the control under the current cursor location. It then checks to see if the control is a valid drop target.  </p>\n<p> If the control is a valid drop target, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GiveFeedback\" data-linktype=\"relative-path\">GiveFeedback</a> event is raised with the drag-and-drop effect specified. For a list of drag-and-drop effects, see the <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a> enumeration.  </p>\n<p> Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.  </p>\n<ul>\n<li><p>If the user moves out of a window, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragLeave\" data-linktype=\"relative-path\">DragLeave</a> event is raised.  </p>\n</li>\n<li><p>If the mouse enters another control, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragEnter\" data-linktype=\"relative-path\">DragEnter</a> for that control is raised.  </p>\n</li>\n<li><p>If the mouse moves but stays within the same control, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> event is raised.  </p>\n<p>If there is a change in the keyboard or mouse button state, theQueryContinueDrag event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <a class=\"xref\" href=\"system.windows.forms.querycontinuedrageventargs#System_Windows_Forms_QueryContinueDragEventArgs_Action_\" data-linktype=\"relative-path\">Action</a> property of the event&#39;s <a class=\"xref\" href=\"system.windows.forms.querycontinuedrageventargs\" data-linktype=\"relative-path\">QueryContinueDragEventArgs</a>.  </p>\n</li>\n<li><p>If the value of <a class=\"xref\" href=\"system.windows.forms.dragaction\" data-linktype=\"relative-path\">DragAction</a> is <code>Continue</code>, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> event is raised to continue the operation and the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GiveFeedback\" data-linktype=\"relative-path\">GiveFeedback</a> event is raised with the new effect so appropriate visual feedback can be set. For a list of valid drop effects, see the <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a> enumeration.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GiveFeedback\" data-linktype=\"relative-path\">GiveFeedback</a> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse&#39;s position.  </p>\n</div>\n</li>\n<li><p>If the value of <a class=\"xref\" href=\"system.windows.forms.dragaction\" data-linktype=\"relative-path\">DragAction</a> is <code>Drop</code>, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.  </p>\n</li>\n<li><p>If the value of <a class=\"xref\" href=\"system.windows.forms.dragaction\" data-linktype=\"relative-path\">DragAction</a> is <code>Cancel</code>, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragLeave\" data-linktype=\"relative-path\">DragLeave</a> event is raised.  </p>\n<p>By default, the QueryContinueDrag event sets <a class=\"xref\" href=\"system.windows.forms.querycontinuedrageventargs#System_Windows_Forms_QueryContinueDragEventArgs_Action_\" data-linktype=\"relative-path\">Action</a> to <code>Cancel</code> in <a class=\"xref\" href=\"system.windows.forms.dragaction\" data-linktype=\"relative-path\">DragAction</a> if the ESC key was pressed and sets <a class=\"xref\" href=\"system.windows.forms.querycontinuedrageventargs#System_Windows_Forms_QueryContinueDragEventArgs_Action_\" data-linktype=\"relative-path\">Action</a> to <code>Drop</code> in <a class=\"xref\" href=\"system.windows.forms.dragaction\" data-linktype=\"relative-path\">DragAction</a> if the left, middle, or right mouse button is pressed.  </p>\n<p>For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates a drag-and-drop operation between two <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> controls. The example calls the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoDragDrop_\" data-linktype=\"relative-path\">DoDragDrop</a> method when the drag action starts. The drag action starts if the mouse has moved more than <a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_DragSize_\" data-linktype=\"relative-path\">DragSize</a> from the mouse location during the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> event. The <a class=\"xref\" href=\"system.windows.forms.listbox#System_Windows_Forms_ListBox_IndexFromPoint_\" data-linktype=\"relative-path\">IndexFromPoint</a> method is used to determine the index of the item to drag during the <code>MouseDown</code> event.  </p>\n<p> The example also demonstrates using custom cursors for the drag-and-drop operation. The example requires that two cursor files,<code>3dwarro.cur</code> and <code>3dwno.cur</code>, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the <code>UseCustomCursorsCheck</code><a class=\"xref\" href=\"system.windows.forms.checkbox\" data-linktype=\"relative-path\">CheckBox</a> is checked. The custom cursors are set in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GiveFeedback\" data-linktype=\"relative-path\">GiveFeedback</a> event handler.  </p>\n<p> The keyboard state is evaluated in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> event handler for the right <code>ListBox</code>, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the <code>ListBox</code> where the drop would occur is also determined during the <code>DragOver</code> event. If the data to drop is not a <code>String</code>, then the <a class=\"xref\" href=\"system.windows.forms.drageventargs#System_Windows_Forms_DragEventArgs_Effect_\" data-linktype=\"relative-path\">Effect</a> is set to <code>None</code> in <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">DragDropEffects</a>. Finally, the status of the drop is displayed in the <code>DropLocationLabel</code><a class=\"xref\" href=\"system.windows.forms.label\" data-linktype=\"relative-path\">Label</a>.  </p>\n<p> The data to drop for the right <code>ListBox</code> is determined in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragDrop\" data-linktype=\"relative-path\">DragDrop</a> event handler and the <code>String</code> value is added at the appropriate place in the <code>ListBox</code>. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the QueryContinueDrag event handler.  </p>\n<p> This code excerpt demonstrates using the QueryContinueDrag event. See the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoDragDrop_\" data-linktype=\"relative-path\">DoDragDrop</a> method for the complete code example.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.Control.DoDragDrop#6\">      void ListDragSource_QueryContinueDrag( Object^ sender, System::Windows::Forms::QueryContinueDragEventArgs^ e )\n      {\n         // Cancel the drag if the mouse moves off the form.\n         ListBox^ lb = dynamic_cast&lt;ListBox^&gt;(sender);\n         if ( lb != nullptr )\n         {\n            Form^ f = lb-&gt;FindForm();\n\n            // Cancel the drag if the mouse moves off the form. The screenOffset\n            // takes into account any desktop bands that may be at the top or left\n            // side of the screen.\n            if ( ((Control::MousePosition.X - screenOffset.X) &lt; f-&gt;DesktopBounds.Left) || ((Control::MousePosition.X - screenOffset.X) &gt; f-&gt;DesktopBounds.Right) || ((Control::MousePosition.Y - screenOffset.Y) &lt; f-&gt;DesktopBounds.Top) || ((Control::MousePosition.Y - screenOffset.Y) &gt; f-&gt;DesktopBounds.Bottom) )\n            {\n               e-&gt;Action = DragAction::Cancel;\n            }\n         }\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.Control.DoDragDrop#6\">    Private Sub ListDragSource_QueryContinueDrag(ByVal sender As Object, ByVal e As QueryContinueDragEventArgs) Handles ListDragSource.QueryContinueDrag\n        &#39; Cancel the drag if the mouse moves off the form.\n        Dim lb as ListBox = CType(sender, System.Windows.Forms.ListBox)\n\n        If (lb isNot nothing) Then\n\n            Dim f as Form = lb.FindForm()\n\n            &#39; Cancel the drag if the mouse moves off the form. The screenOffset\n            &#39; takes into account any desktop bands that may be at the top or left\n            &#39; side of the screen.\n            If (((Control.MousePosition.X - screenOffset.X) &lt; f.DesktopBounds.Left) Or _\n                ((Control.MousePosition.X - screenOffset.X) &gt; f.DesktopBounds.Right) Or _\n                ((Control.MousePosition.Y - screenOffset.Y) &lt; f.DesktopBounds.Top) Or _\n                ((Control.MousePosition.Y - screenOffset.Y) &gt; f.DesktopBounds.Bottom)) Then\n\n                e.Action = DragAction.Cancel\n            End If\n        End if\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.Control.DoDragDrop#6\">        private void ListDragSource_QueryContinueDrag(object sender, System.Windows.Forms.QueryContinueDragEventArgs e) {\n            // Cancel the drag if the mouse moves off the form.\n            ListBox lb = sender as ListBox;\n\n            if (lb != null) {\n\n                Form f = lb.FindForm();\n\n                // Cancel the drag if the mouse moves off the form. The screenOffset\n                // takes into account any desktop bands that may be at the top or left\n                // side of the screen.\n                if (((Control.MousePosition.X - screenOffset.X) &lt; f.DesktopBounds.Left) ||\n                    ((Control.MousePosition.X - screenOffset.X) &gt; f.DesktopBounds.Right) ||\n                    ((Control.MousePosition.Y - screenOffset.Y) &lt; f.DesktopBounds.Top) ||\n                    ((Control.MousePosition.Y - screenOffset.Y) &gt; f.DesktopBounds.Bottom)) {\n\n                    e.Action = DragAction.Cancel;\n                }\n            }\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_RegionChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RegionChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.Forms.Control.Region*</span> property changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler RegionChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the RegionChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of a type that inherits from <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a>, such as a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> or <a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a>. Then name the instance <code>Control1</code> and ensure that the event handler is associated with the RegionChanged event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#22\">private void Control1_RegionChanged(Object sender, EventArgs e) {\n\n   MessageBox.Show(&quot;You are in the Control.RegionChanged event.&quot;);\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#22\">Private Sub Control1_RegionChanged(sender as Object, e as EventArgs) _ \n     Handles Control1.RegionChanged\n\n   MessageBox.Show(&quot;You are in the Control.RegionChanged event.&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Resize\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Resize</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the control is resized.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler Resize;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To determine the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Size_\" data-linktype=\"relative-path\">Size</a> of the resized control, you can cast the <code>sender</code> parameter of the registered <a class=\"xref\" href=\"system.windows.forms.controleventhandler\" data-linktype=\"relative-path\">ControlEventHandler</a> method  to a <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> and get its <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Size_\" data-linktype=\"relative-path\">Size</a> property (or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Height_\" data-linktype=\"relative-path\">Height</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Width_\" data-linktype=\"relative-path\">Width</a> properties individually).  </p>\n<p> To handle custom layouts, use the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Layout\" data-linktype=\"relative-path\">Layout</a> event instead of the Resize event. The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Layout\" data-linktype=\"relative-path\">Layout</a> event is raised in response to a Resize event, but also in response to other changes that affect the layout of the control.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example handles the Resize event of a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>. When the form is resized, the event handler ensures that the form stays square (its <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Height_\" data-linktype=\"relative-path\">Height</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Width_\" data-linktype=\"relative-path\">Width</a> remain equal). To run this example, make sure and associate this event-handling method with the formâ€™s Resize event.  </p>\n<pre><code class=\"lang-vb\" name=\"WinForms.Control.Resize#1\">Private Sub Form1_Resize(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Resize\n\n   Dim myControl As Control\n   myControl = sender\n\n   &#39; Ensure the Form remains square (Height = Width).\n   If myControl.Size.Height &lt;&gt; myControl.Size.Width Then\n      myControl.Size = New Size(myControl.Size.Width, myControl.Size.Width)\n   End If\nEnd Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"WinForms.Control.Resize#1\">   private:\n      void Form1_Resize( Object^ sender, System::EventArgs^ /*e*/ )\n      {\n         Control^ control = dynamic_cast&lt;Control^&gt;(sender);\n\n         // Ensure the Form remains square (Height = Width).\n         if ( control-&gt;Size.Height != control-&gt;Size.Width )\n         {\n            control-&gt;Size = System::Drawing::Size( control-&gt;Size.Width, control-&gt;Size.Width );\n         }\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"WinForms.Control.Resize#1\">private void Form1_Resize(object sender, System.EventArgs e)\n{\n   Control control = (Control)sender;\n\t\t\n   // Ensure the Form remains square (Height = Width).\n   if(control.Size.Height != control.Size.Width)\n   {\n      control.Size = new Size(control.Size.Width, control.Size.Width);\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_RightToLeftChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RightToLeftChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the <span class=\"xref\">stem.Windows.Forms.Control.RightToLeft*</span> property value changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler RightToLeftChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event is raised if the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RightToLeft_\" data-linktype=\"relative-path\">RightToLeft</a> property is changed by either a programmatic modification or user interaction.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example is an event handler that is executed when the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property value changes. The <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class has several methods with the name pattern <em>PropertyName</em><code>Changed</code> that are raised when the corresponding <em>PropertyName</em> value changes (<em>PropertyName</em> represents the name of the corresponding property).  </p>\n<p> The following code example changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> of a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> displaying currency data. The example converts the text to a decimal number and changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Red_\" data-linktype=\"relative-path\">Red</a> if the number is negative and to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Black_\" data-linktype=\"relative-path\">Black</a> if the number is positive. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> that contains a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"Windows.Forms.Control_PropertyChangedEvents#1\">Private Sub currencyTextBox_TextChanged(sender As Object, _ \n  e As EventArgs) Handles currencyTextBox.TextChanged\n   Try\n      &#39; Convert the text to a Double and determine if it is a negative number.\n      If Double.Parse(currencyTextBox.Text) &lt; 0 Then\n         &#39; If the number is negative, display it in Red.\n         currencyTextBox.ForeColor = Color.Red\n      Else\n         &#39; If the number is not negative, display it in Black.\n         currencyTextBox.ForeColor = Color.Black\n      End If\n   Catch\n      &#39; If there is an error, display the text using the system colors.\n      currencyTextBox.ForeColor = SystemColors.ControlText\n   End Try\nEnd Sub \n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.Control_PropertyChangedEvents#1\">private void currencyTextBox_TextChanged(object sender, EventArgs e)\n{\n   try\n   {\n      // Convert the text to a Double and determine if it is a negative number.\n      if(double.Parse(currencyTextBox.Text) &lt; 0)\n      {\n         // If the number is negative, display it in Red.\n         currencyTextBox.ForeColor = Color.Red;\n      }\n      else\n      {\n         // If the number is not negative, display it in Black.\n         currencyTextBox.ForeColor = Color.Black;\n      }\n   }\n   catch\n   {\n      // If there is an error, display the text using the system colors.\n      currencyTextBox.ForeColor = SystemColors.ControlText;\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control_PropertyChangedEvents#1\">   private:\n      void currencyTextBox_TextChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n      {\n         try\n         {\n            // Convert the text to a Double and determine if it is a negative number.\n            if ( Double::Parse( currencyTextBox-&gt;Text ) &lt; 0 )\n            {\n               // If the number is negative, display it in Red.\n               currencyTextBox-&gt;ForeColor = Color::Red;\n            }\n            else\n            {\n               // If the number is not negative, display it in Black.\n               currencyTextBox-&gt;ForeColor = Color::Black;\n            }\n         }\n         catch ( Exception^ ) \n         {\n            // If there is an error, display the text using the system colors.\n            currencyTextBox-&gt;ForeColor = SystemColors::ControlText;\n         }\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_SizeChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SizeChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the <span class=\"xref\">stem.Windows.Forms.Control.Size*</span> property value changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler SizeChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>It is preferable to use the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Layout\" data-linktype=\"relative-path\">Layout</a> event to handle custom layouts. The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Layout\" data-linktype=\"relative-path\">Layout</a> event is raised in response to <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Resize\" data-linktype=\"relative-path\">Resize</a> events, but also in other conditions when layout might need to be applied.  </p>\n<p> This event is raised if the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Size_\" data-linktype=\"relative-path\">Size</a> property is changed by either a programmatic modification or user interaction.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the SizeChanged event. An instance of a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> control has been provided that can be scaled both horizontally and vertically. A <a class=\"xref\" href=\"system.windows.forms.numericupdown\" data-linktype=\"relative-path\">NumericUpDown</a> instance provides the horizontal and vertical scale value. The <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> instance named <strong>OK</strong> is used to set the scale values for the <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> control instance. Whenever the size of the control changes, the event handler associated with the SizeChanged event of the control is called. This event handler displays a message box indicating that the size of the control has changed.  </p>\n<pre><code class=\"lang-cs\" name=\"Control_Scale1#2\">   private void RegisterEventHandler()\n   {\n      myButton1.SizeChanged += new EventHandler(this.MyButton1_SizeChanged);\n   }\n\n   private void MyButton2_Click(object sender, System.EventArgs e)\n   {\n      // Set the scale for the control to the value provided.\n      float scale = (float)myNumericUpDown1.Value;\n      myButton1.Scale(scale);\n   }\n\n   private void MyButton1_SizeChanged(object sender, System.EventArgs e)\n   {\n      MessageBox.Show(&quot;The size of the &#39;Button&#39; control has changed&quot;);\n   }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Control_Scale1#2\">private:\n   void RegisterEventHandler()\n   {\n      myButton1-&gt;SizeChanged += gcnew EventHandler( this, &amp;MyForm::MyButton1_SizeChanged );\n   }\n\n   void MyButton2_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // Set the scale for the control to the value provided.\n      float scale = (float)myNumericUpDown1-&gt;Value;\n      myButton1-&gt;Scale( scale );\n   }\n\n   void MyButton1_SizeChanged( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      MessageBox::Show( &quot;The size of the &#39;Button&#39; control has changed&quot; );\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Control_Scale1#2\">   Private Sub RegisterEventHandler()\n      AddHandler myButton1.SizeChanged, AddressOf MyButton1_SizeChanged\n   End Sub &#39;RegisterEventHandler\n\n   Private Sub MyButton2_Click(sender As Object, e As EventArgs) \n      &#39; Set the scale for the control to the value provided.\n      Dim scale As Single = CSng(myNumericUpDown1.Value)\n      myButton1.Scale(scale)\n   End Sub &#39;MyButton2_Click\n   \n   Private Sub MyButton1_SizeChanged(sender As Object, e As EventArgs)\n      MessageBox.Show(&quot;The size of the &#39;Button&#39; control has changed&quot;)\n   End Sub &#39;MyButton1_SizeChanged\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_StyleChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StyleChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the control style changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler StyleChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The StyleChanged event occurs when <a class=\"xref\" href=\"system.windows.forms.controlstyles\" data-linktype=\"relative-path\">ControlStyles</a> flags have been added or changed.  </p>\n<p> This event is raised if the control style is changed by either a programmatic modification or user interaction.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the StyleChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of a type that inherits from <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a>, such as a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> or <a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a>. Then name the instance <code>Control1</code> and ensure that the event handler is associated with the StyleChanged event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#68\">private void Control1_StyleChanged(Object sender, EventArgs e) {\n\n   MessageBox.Show(&quot;You are in the Control.StyleChanged event.&quot;);\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#68\">Private Sub Control1_StyleChanged(sender as Object, e as EventArgs) _ \n     Handles Control1.StyleChanged\n\n   MessageBox.Show(&quot;You are in the Control.StyleChanged event.&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_SystemColorsChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SystemColorsChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the system colors change.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler SystemColorsChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event is raised if the <a class=\"xref\" href=\"system.drawing.systemcolors\" data-linktype=\"relative-path\">SystemColors</a> is changed by either a programmatic modification or user interaction.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the SystemColorsChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of a type that inherits from <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a>, such as a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> or <a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a>. Then name the instance <code>Control1</code> and ensure that the event handler is associated with the SystemColorsChanged event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#69\">private void Control1_SystemColorsChanged(Object sender, EventArgs e) {\n\n   MessageBox.Show(&quot;You are in the Control.SystemColorsChanged event.&quot;);\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#69\">Private Sub Control1_SystemColorsChanged(sender as Object, e as EventArgs) _ \n     Handles Control1.SystemColorsChanged\n\n   MessageBox.Show(&quot;You are in the Control.SystemColorsChanged event.&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_TabIndexChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TabIndexChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the <span class=\"xref\">stem.Windows.Forms.Control.TabIndex*</span> property value changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler TabIndexChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event is raised if the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_TabIndex_\" data-linktype=\"relative-path\">TabIndex</a> property is changed by either a programmatic modification or user interaction.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the TabIndexChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of a type that inherits from <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a>, such as a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> or <a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a>. Then name the instance <code>Control1</code> and ensure that the event handler is associated with the TabIndexChanged event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#25\">private void Control1_TabIndexChanged(Object sender, EventArgs e) {\n\n   MessageBox.Show(&quot;You are in the Control.TabIndexChanged event.&quot;);\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#25\">Private Sub Control1_TabIndexChanged(sender as Object, e as EventArgs) _ \n     Handles Control1.TabIndexChanged\n\n   MessageBox.Show(&quot;You are in the Control.TabIndexChanged event.&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_TabStopChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TabStopChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the <span class=\"xref\">stem.Windows.Forms.Control.TabStop*</span> property value changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler TabStopChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event is raised if the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_TabStop_\" data-linktype=\"relative-path\">TabStop</a> property is changed by either a programmatic modification or user interaction.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the TabStopChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of a type that inherits from <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a>, such as a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> or <a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a>. Then name the instance <code>Control1</code> and ensure that the event handler is associated with the TabStopChanged event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#26\">private void Control1_TabStopChanged(Object sender, EventArgs e) {\n\n   MessageBox.Show(&quot;You are in the Control.TabStopChanged event.&quot;);\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#26\">Private Sub Control1_TabStopChanged(sender as Object, e as EventArgs) _ \n     Handles Control1.TabStopChanged\n\n   MessageBox.Show(&quot;You are in the Control.TabStopChanged event.&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_TextChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TextChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the <span class=\"xref\">stem.Windows.Forms.Control.Text*</span> property value changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler TextChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event is raised if the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Text_\" data-linktype=\"relative-path\">Text</a> property is changed by either a programmatic modification or user interaction.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> of a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> displaying currency data. The example converts the text to a decimal number and changes the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Red_\" data-linktype=\"relative-path\">Red</a> if the number is negative and to <a class=\"xref\" href=\"system.drawing.color#System_Drawing_Color_Black_\" data-linktype=\"relative-path\">Black</a> if the number is positive. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> that contains a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"Windows.Forms.Control_PropertyChangedEvents#1\">Private Sub currencyTextBox_TextChanged(sender As Object, _ \n  e As EventArgs) Handles currencyTextBox.TextChanged\n   Try\n      &#39; Convert the text to a Double and determine if it is a negative number.\n      If Double.Parse(currencyTextBox.Text) &lt; 0 Then\n         &#39; If the number is negative, display it in Red.\n         currencyTextBox.ForeColor = Color.Red\n      Else\n         &#39; If the number is not negative, display it in Black.\n         currencyTextBox.ForeColor = Color.Black\n      End If\n   Catch\n      &#39; If there is an error, display the text using the system colors.\n      currencyTextBox.ForeColor = SystemColors.ControlText\n   End Try\nEnd Sub \n</code></pre><pre><code class=\"lang-cs\" name=\"Windows.Forms.Control_PropertyChangedEvents#1\">private void currencyTextBox_TextChanged(object sender, EventArgs e)\n{\n   try\n   {\n      // Convert the text to a Double and determine if it is a negative number.\n      if(double.Parse(currencyTextBox.Text) &lt; 0)\n      {\n         // If the number is negative, display it in Red.\n         currencyTextBox.ForeColor = Color.Red;\n      }\n      else\n      {\n         // If the number is not negative, display it in Black.\n         currencyTextBox.ForeColor = Color.Black;\n      }\n   }\n   catch\n   {\n      // If there is an error, display the text using the system colors.\n      currencyTextBox.ForeColor = SystemColors.ControlText;\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control_PropertyChangedEvents#1\">   private:\n      void currencyTextBox_TextChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n      {\n         try\n         {\n            // Convert the text to a Double and determine if it is a negative number.\n            if ( Double::Parse( currencyTextBox-&gt;Text ) &lt; 0 )\n            {\n               // If the number is negative, display it in Red.\n               currencyTextBox-&gt;ForeColor = Color::Red;\n            }\n            else\n            {\n               // If the number is not negative, display it in Black.\n               currencyTextBox-&gt;ForeColor = Color::Black;\n            }\n         }\n         catch ( Exception^ ) \n         {\n            // If there is an error, display the text using the system colors.\n            currencyTextBox-&gt;ForeColor = SystemColors::ControlText;\n         }\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Validated\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Validated</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the control is finished validating.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler Validated;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Select_\" data-linktype=\"relative-path\">Select</a> or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SelectNextControl_\" data-linktype=\"relative-path\">SelectNextControl</a> methods, or by setting the <a class=\"xref\" href=\"system.windows.forms.containercontrol#System_Windows_Forms_ContainerControl_ActiveControl_\" data-linktype=\"relative-path\">ActiveControl</a> property to the current form, focus events occur in the following order:  </p>\n<ol>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Enter\" data-linktype=\"relative-path\">Enter</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GotFocus\" data-linktype=\"relative-path\">GotFocus</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Leave\" data-linktype=\"relative-path\">Leave</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validating\" data-linktype=\"relative-path\">Validating</a>  \n</li>\n<li><p>Validated  </p>\n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_LostFocus\" data-linktype=\"relative-path\">LostFocus</a>  \n\n<p>When you change the focus by using the mouse or by calling the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Focus_\" data-linktype=\"relative-path\">Focus</a> method, focus events occur in the following order:  </p>\n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Enter\" data-linktype=\"relative-path\">Enter</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GotFocus\" data-linktype=\"relative-path\">GotFocus</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_LostFocus\" data-linktype=\"relative-path\">LostFocus</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Leave\" data-linktype=\"relative-path\">Leave</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validating\" data-linktype=\"relative-path\">Validating</a>  \n</li>\n<li><p>Validated  </p>\n<p>If the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CausesValidation_\" data-linktype=\"relative-path\">CausesValidation</a> property is set to <code>false</code>, the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validating\" data-linktype=\"relative-path\">Validating</a> and Validated events are suppressed.  </p>\n<p>If the <a class=\"xref\" href=\"system.componentmodel.canceleventargs#System_ComponentModel_CancelEventArgs_Cancel_\" data-linktype=\"relative-path\">Cancel</a> property of the <a class=\"xref\" href=\"system.componentmodel.canceleventargs\" data-linktype=\"relative-path\">CancelEventArgs</a> is set to <code>true</code> in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validating\" data-linktype=\"relative-path\">Validating</a> event delegate, all events that would usually occur after the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validating\" data-linktype=\"relative-path\">Validating</a> event are suppressed.  </p>\n</li>\n</ol>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Do not attempt to set focus from within the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Enter\" data-linktype=\"relative-path\">Enter</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GotFocus\" data-linktype=\"relative-path\">GotFocus</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Leave\" data-linktype=\"relative-path\">Leave</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_LostFocus\" data-linktype=\"relative-path\">LostFocus</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validating\" data-linktype=\"relative-path\">Validating</a>, or Validated event handlers. Doing so can cause your application or the operating system to stop responding. For more information, see the<a href=\"http://msdn.microsoft.com/library/windows/desktop/ms632614(v=vs.85).aspx\" data-linktype=\"external\">WM_KILLFOCUS</a>topic, and the &quot;Message Deadlocks&quot; section of the <a href=\"http://msdn.microsoft.com/library/windows/desktop/ms644927(v=vs.85).aspx\" data-linktype=\"external\">About Messages and Message Queues</a> topic.  </p>\n</div>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the derived class <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> and validates an e-mail address that the user enters. If the e-mail address is not in the standard format (containing &quot;@&quot; and &quot;.&quot;), the validation fails, an <a class=\"xref\" href=\"system.windows.forms.errorprovider\" data-linktype=\"relative-path\">ErrorProvider</a> icon is displayed, and the event is canceled. This example requires that a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> and <a class=\"xref\" href=\"system.windows.forms.errorprovider\" data-linktype=\"relative-path\">ErrorProvider</a> control have been created on a form.  </p>\n<pre><code class=\"lang-cs\" name=\"Control.Validating#1\">private void textBox1_Validating(object sender, \n \t\t\t\tSystem.ComponentModel.CancelEventArgs e)\n{\n   string errorMsg;\n   if(!ValidEmailAddress(textBox1.Text, out errorMsg))\n   {\n      // Cancel the event and select the text to be corrected by the user.\n      e.Cancel = true;\n      textBox1.Select(0, textBox1.Text.Length);\n\n      // Set the ErrorProvider error with the text to display. \n      this.errorProvider1.SetError(textBox1, errorMsg);\n   }\n}\n\nprivate void textBox1_Validated(object sender, System.EventArgs e)\n{\n   // If all conditions have been met, clear the ErrorProvider of errors.\n   errorProvider1.SetError(textBox1, &quot;&quot;);\n}\npublic bool ValidEmailAddress(string emailAddress, out string errorMessage)\n{\n   // Confirm that the e-mail address string is not empty.\n   if(emailAddress.Length == 0)\n   {\n      errorMessage = &quot;e-mail address is required.&quot;;\n         return false;\n   }\n\n   // Confirm that there is an &quot;@&quot; and a &quot;.&quot; in the e-mail address, and in the correct order.\n   if(emailAddress.IndexOf(&quot;@&quot;) &gt; -1)\n   {\n      if(emailAddress.IndexOf(&quot;.&quot;, emailAddress.IndexOf(&quot;@&quot;) ) &gt; emailAddress.IndexOf(&quot;@&quot;) )\n      {\n         errorMessage = &quot;&quot;;\n         return true;\n      }\n   }\n   \n   errorMessage = &quot;e-mail address must be valid e-mail address format.<br>&quot; +\n      &quot;For example &#39;someone@example.com&#39; &quot;;\n      return false;\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Control.Validating#1\">private:\n   void textBox1_Validating( Object^ sender, System::ComponentModel::CancelEventArgs^ e )\n   {\n      String^ errorMsg;\n      if ( !ValidEmailAddress( textBox1-&gt;Text, &amp;errorMsg ) )\n      {\n         // Cancel the event and select the text to be corrected by the user.\n         e-&gt;Cancel = true;\n         textBox1-&gt;Select( 0, textBox1-&gt;Text-&gt;Length );\n         \n         // Set the ErrorProvider error with the text to display.\n         this-&gt;errorProvider1-&gt;SetError( textBox1, errorMsg );\n      }\n   }\n\n   void textBox1_Validated( Object^ sender, System::EventArgs^ e )\n   {\n      // If all conditions have been met, clear the ErrorProvider of errors.\n      errorProvider1-&gt;SetError( textBox1, &quot;&quot; );\n   }\n\npublic:\n   bool ValidEmailAddress( String^ emailAddress, [Out]interior_ptr&lt;String^&gt; errorMessage )\n   {\n      // Confirm that the e-mail address String* is not empty.\n      if ( emailAddress-&gt;Length == 0 )\n      {\n         *errorMessage = &quot;e-mail address is required.&quot;;\n         return false;\n      }\n\n      // Confirm that there is an &quot;@&quot; and a &quot;.&quot; in the e-mail address, and in the correct order.\n      if ( emailAddress-&gt;IndexOf( &quot;@&quot; ) &gt; -1 )\n      {\n         if ( emailAddress-&gt;IndexOf( &quot;.&quot;, emailAddress-&gt;IndexOf( &quot;@&quot; ) ) &gt; emailAddress-&gt;IndexOf( &quot;@&quot; ) )\n         {\n            *errorMessage = &quot;&quot;;\n            return true;\n         }\n      }\n\n      *errorMessage = &quot;e-mail address must be valid e-mail address format.<br>&quot; +\n         &quot;For example &#39;someone@example.com&#39; &quot;;\n      return false;\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Control.Validating#1\">   Private Function ValidEmailAddress(ByVal emailAddress As String, ByRef errorMessage As String) As Boolean\n      &#39; Confirm there is text in the control.\n      If textBox1.Text.Length = 0 Then\n         errorMessage = &quot;E-mail address is required.&quot;\n         Return False\n\n      End If\n\n      &#39; Confirm that there is an &quot;@&quot; and a &quot;.&quot; in the e-mail address, and in the correct order.\n      If emailAddress.IndexOf(&quot;@&quot;) &gt; -1 Then\n         If (emailAddress.IndexOf(&quot;.&quot;, emailAddress.IndexOf(&quot;@&quot;)) &gt; emailAddress.IndexOf(&quot;@&quot;)) Then\n            errorMessage = &quot;&quot;\n            Return True\n         End If\n      End If\n\n      errorMessage = &quot;E-mail address must be valid e-mail address format.&quot; + ControlChars.Cr + _\n        &quot;For example &#39;someone@example.com&#39; &quot;\n      Return False\nEnd Function\n\n   Private Sub textBox1_Validating(ByVal sender As Object, _\n   ByVal e As System.ComponentModel.CancelEventArgs) Handles textBox1.Validating\n\n      Dim errorMsg As String\n      If Not ValidEmailAddress(textBox1.Text, errorMsg) Then\n         &#39; Cancel the event and select the text to be corrected by the user.\n         e.Cancel = True\n         textBox1.Select(0, textBox1.Text.Length)\n\n         &#39; Set the ErrorProvider error with the text to display. \n         Me.errorProvider1.SetError(textBox1, errorMsg)\n      End If\n   End Sub\n\n\n   Private Sub textBox1_Validated(ByVal sender As Object, _\n   ByVal e As System.EventArgs) Handles textBox1.Validated\n      &#39; If all conditions have been met, clear the error provider of errors.\n      errorProvider1.SetError(textBox1, &quot;&quot;)\n   End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_Validating\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Validating</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the control is validating.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.ComponentModel.CancelEventHandler Validating;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Select_\" data-linktype=\"relative-path\">Select</a>or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SelectNextControl_\" data-linktype=\"relative-path\">SelectNextControl</a> methods, or by setting the <a class=\"xref\" href=\"system.windows.forms.containercontrol#System_Windows_Forms_ContainerControl_ActiveControl_\" data-linktype=\"relative-path\">ActiveControl</a> property to the current form, focus events occur in the following order:  </p>\n<ol>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Enter\" data-linktype=\"relative-path\">Enter</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GotFocus\" data-linktype=\"relative-path\">GotFocus</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Leave\" data-linktype=\"relative-path\">Leave</a>  \n</li>\n<li><p>Validating  </p>\n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validated\" data-linktype=\"relative-path\">Validated</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_LostFocus\" data-linktype=\"relative-path\">LostFocus</a>  \n\n<p>When you change the focus by using the mouse or by calling the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Focus_\" data-linktype=\"relative-path\">Focus</a> method, focus events occur in the following order:  </p>\n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Enter\" data-linktype=\"relative-path\">Enter</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GotFocus\" data-linktype=\"relative-path\">GotFocus</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_LostFocus\" data-linktype=\"relative-path\">LostFocus</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Leave\" data-linktype=\"relative-path\">Leave</a>  \n</li>\n<li><p>Validating  </p>\n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validated\" data-linktype=\"relative-path\">Validated</a>  \n\n<p>If the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CausesValidation_\" data-linktype=\"relative-path\">CausesValidation</a> property is set to <code>false</code>, the Validating and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validated\" data-linktype=\"relative-path\">Validated</a> events are suppressed.  </p>\n<p>If the <a class=\"xref\" href=\"system.componentmodel.canceleventargs#System_ComponentModel_CancelEventArgs_Cancel_\" data-linktype=\"relative-path\">Cancel</a> property of the <a class=\"xref\" href=\"system.componentmodel.canceleventargs\" data-linktype=\"relative-path\">CancelEventArgs</a> is set to <code>true</code> in the Validating event delegate, all events that would usually occur after the Validating event are suppressed.  </p>\n</li>\n</ol>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Do not attempt to set focus from within the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Enter\" data-linktype=\"relative-path\">Enter</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GotFocus\" data-linktype=\"relative-path\">GotFocus</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Leave\" data-linktype=\"relative-path\">Leave</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_LostFocus\" data-linktype=\"relative-path\">LostFocus</a>, Validating, or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validated\" data-linktype=\"relative-path\">Validated</a> event handlers. Doing so can cause your application or the operating system to stop responding. For more information, see the <code>WM_KILLFOCUS</code> topic in the &quot;Keyboard Input Reference&quot; section, and the &quot;Message Deadlocks&quot; section of the &quot;About Messages and Message Queues&quot; topic in the MSDN library at <a href=\"http://msdn.microsoft.com/library\" data-linktype=\"external\">http://msdn.microsoft.com/library</a>.  </p>\n</div>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the derived class <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> and validates an e-mail address that the user enters. If the e-mail address is not in the standard format (containing &quot;@&quot; and &quot;.&quot;), the validation fails, an <a class=\"xref\" href=\"system.windows.forms.errorprovider\" data-linktype=\"relative-path\">ErrorProvider</a> icon is displayed, and the event is canceled. This example requires that a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> and <a class=\"xref\" href=\"system.windows.forms.errorprovider\" data-linktype=\"relative-path\">ErrorProvider</a> control have been created on a form.  </p>\n<pre><code class=\"lang-cs\" name=\"Control.Validating#1\">private void textBox1_Validating(object sender, \n \t\t\t\tSystem.ComponentModel.CancelEventArgs e)\n{\n   string errorMsg;\n   if(!ValidEmailAddress(textBox1.Text, out errorMsg))\n   {\n      // Cancel the event and select the text to be corrected by the user.\n      e.Cancel = true;\n      textBox1.Select(0, textBox1.Text.Length);\n\n      // Set the ErrorProvider error with the text to display. \n      this.errorProvider1.SetError(textBox1, errorMsg);\n   }\n}\n\nprivate void textBox1_Validated(object sender, System.EventArgs e)\n{\n   // If all conditions have been met, clear the ErrorProvider of errors.\n   errorProvider1.SetError(textBox1, &quot;&quot;);\n}\npublic bool ValidEmailAddress(string emailAddress, out string errorMessage)\n{\n   // Confirm that the e-mail address string is not empty.\n   if(emailAddress.Length == 0)\n   {\n      errorMessage = &quot;e-mail address is required.&quot;;\n         return false;\n   }\n\n   // Confirm that there is an &quot;@&quot; and a &quot;.&quot; in the e-mail address, and in the correct order.\n   if(emailAddress.IndexOf(&quot;@&quot;) &gt; -1)\n   {\n      if(emailAddress.IndexOf(&quot;.&quot;, emailAddress.IndexOf(&quot;@&quot;) ) &gt; emailAddress.IndexOf(&quot;@&quot;) )\n      {\n         errorMessage = &quot;&quot;;\n         return true;\n      }\n   }\n   \n   errorMessage = &quot;e-mail address must be valid e-mail address format.<br>&quot; +\n      &quot;For example &#39;someone@example.com&#39; &quot;;\n      return false;\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Control.Validating#1\">private:\n   void textBox1_Validating( Object^ sender, System::ComponentModel::CancelEventArgs^ e )\n   {\n      String^ errorMsg;\n      if ( !ValidEmailAddress( textBox1-&gt;Text, &amp;errorMsg ) )\n      {\n         // Cancel the event and select the text to be corrected by the user.\n         e-&gt;Cancel = true;\n         textBox1-&gt;Select( 0, textBox1-&gt;Text-&gt;Length );\n         \n         // Set the ErrorProvider error with the text to display.\n         this-&gt;errorProvider1-&gt;SetError( textBox1, errorMsg );\n      }\n   }\n\n   void textBox1_Validated( Object^ sender, System::EventArgs^ e )\n   {\n      // If all conditions have been met, clear the ErrorProvider of errors.\n      errorProvider1-&gt;SetError( textBox1, &quot;&quot; );\n   }\n\npublic:\n   bool ValidEmailAddress( String^ emailAddress, [Out]interior_ptr&lt;String^&gt; errorMessage )\n   {\n      // Confirm that the e-mail address String* is not empty.\n      if ( emailAddress-&gt;Length == 0 )\n      {\n         *errorMessage = &quot;e-mail address is required.&quot;;\n         return false;\n      }\n\n      // Confirm that there is an &quot;@&quot; and a &quot;.&quot; in the e-mail address, and in the correct order.\n      if ( emailAddress-&gt;IndexOf( &quot;@&quot; ) &gt; -1 )\n      {\n         if ( emailAddress-&gt;IndexOf( &quot;.&quot;, emailAddress-&gt;IndexOf( &quot;@&quot; ) ) &gt; emailAddress-&gt;IndexOf( &quot;@&quot; ) )\n         {\n            *errorMessage = &quot;&quot;;\n            return true;\n         }\n      }\n\n      *errorMessage = &quot;e-mail address must be valid e-mail address format.<br>&quot; +\n         &quot;For example &#39;someone@example.com&#39; &quot;;\n      return false;\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Control.Validating#1\">   Private Function ValidEmailAddress(ByVal emailAddress As String, ByRef errorMessage As String) As Boolean\n      &#39; Confirm there is text in the control.\n      If textBox1.Text.Length = 0 Then\n         errorMessage = &quot;E-mail address is required.&quot;\n         Return False\n\n      End If\n\n      &#39; Confirm that there is an &quot;@&quot; and a &quot;.&quot; in the e-mail address, and in the correct order.\n      If emailAddress.IndexOf(&quot;@&quot;) &gt; -1 Then\n         If (emailAddress.IndexOf(&quot;.&quot;, emailAddress.IndexOf(&quot;@&quot;)) &gt; emailAddress.IndexOf(&quot;@&quot;)) Then\n            errorMessage = &quot;&quot;\n            Return True\n         End If\n      End If\n\n      errorMessage = &quot;E-mail address must be valid e-mail address format.&quot; + ControlChars.Cr + _\n        &quot;For example &#39;someone@example.com&#39; &quot;\n      Return False\nEnd Function\n\n   Private Sub textBox1_Validating(ByVal sender As Object, _\n   ByVal e As System.ComponentModel.CancelEventArgs) Handles textBox1.Validating\n\n      Dim errorMsg As String\n      If Not ValidEmailAddress(textBox1.Text, errorMsg) Then\n         &#39; Cancel the event and select the text to be corrected by the user.\n         e.Cancel = True\n         textBox1.Select(0, textBox1.Text.Length)\n\n         &#39; Set the ErrorProvider error with the text to display. \n         Me.errorProvider1.SetError(textBox1, errorMsg)\n      End If\n   End Sub\n\n\n   Private Sub textBox1_Validated(ByVal sender As Object, _\n   ByVal e As System.EventArgs) Handles textBox1.Validated\n      &#39; If all conditions have been met, clear the error provider of errors.\n      errorProvider1.SetError(textBox1, &quot;&quot;)\n   End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_VisibleChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">VisibleChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the <span class=\"xref\">stem.Windows.Forms.Control.Visible*</span> property value changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler VisibleChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event is raised if the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Visible_\" data-linktype=\"relative-path\">Visible</a> property is changed by either a programmatic modification or user interaction.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example raises the VisibleChanged event when the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Visible_\" data-linktype=\"relative-path\">Visible</a> property value of the <a class=\"xref\" href=\"system.windows.forms.label\" data-linktype=\"relative-path\">Label</a> control has changed.  </p>\n<pre><code class=\"lang-vb\" name=\"Control_VisibleChanged#1\">      Private Sub Button_HideLabel(ByVal sender As Object, ByVal e As EventArgs)\n         myLabel.Visible = False\n      End Sub &#39;Button_HideLabel\n\n\n      Private Sub AddVisibleChangedEventHandler()\n         AddHandler myLabel.VisibleChanged, AddressOf Label_VisibleChanged\n      End Sub &#39;AddVisibleChangedEventHandler\n\n\n      Private Sub Label_VisibleChanged(ByVal sender As Object, ByVal e As EventArgs)\n         MessageBox.Show(&quot;Visible change event raised!!!&quot;)\n      End Sub &#39;Label_VisibleChanged\n</code></pre><pre><code class=\"lang-cpp\" name=\"Control_VisibleChanged#1\">   private:\n      void Button_HideLabel( Object^ /*sender*/, EventArgs^ /*e*/ )\n      {\n         myLabel-&gt;Visible = false;\n      }\n\n      void AddVisibleChangedEventHandler()\n      {\n         myLabel-&gt;VisibleChanged += gcnew EventHandler( this, &amp;MyForm::Label_VisibleChanged );\n      }\n\n      void Label_VisibleChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n      {\n         MessageBox::Show( &quot;Visible change event raised!!!&quot; );\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Control_VisibleChanged#1\">      private void Button_HideLabel(object sender, EventArgs e)\n      {\n         myLabel.Visible = false;\n      }\n\n      private void AddVisibleChangedEventHandler()\n      {\n         myLabel.VisibleChanged += new EventHandler(this.Label_VisibleChanged);\n      }\n\n      private void Label_VisibleChanged(object sender, EventArgs e)\n      {\n         MessageBox.Show(&quot;Visible change event raised!!!&quot;);\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_System_Windows_Forms_IDropTarget_OnDragDrop_System_Windows_Forms_DragEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_System_Windows_Forms_IDropTarget_OnDragDrop_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IDropTarget.OnDragDrop(DragEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragDrop\" data-linktype=\"relative-path\">DragDrop</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IDropTarget.OnDragDrop (System.Windows.Forms.DragEventArgs drgEvent);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>drgEvent</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_System_Windows_Forms_IDropTarget_OnDragEnter_System_Windows_Forms_DragEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_System_Windows_Forms_IDropTarget_OnDragEnter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IDropTarget.OnDragEnter(DragEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragEnter\" data-linktype=\"relative-path\">DragEnter</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IDropTarget.OnDragEnter (System.Windows.Forms.DragEventArgs drgEvent);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>drgEvent</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_System_Windows_Forms_IDropTarget_OnDragLeave_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_System_Windows_Forms_IDropTarget_OnDragLeave_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IDropTarget.OnDragLeave(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragLeave\" data-linktype=\"relative-path\">DragLeave</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IDropTarget.OnDragLeave (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_Control_System_Windows_Forms_IDropTarget_OnDragOver_System_Windows_Forms_DragEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_Control_System_Windows_Forms_IDropTarget_OnDragOver_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IDropTarget.OnDragOver(DragEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IDropTarget.OnDragOver (System.Windows.Forms.DragEventArgs drgEvent);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>drgEvent</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Forms.Control.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Forms.Control.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.AccessibilityNotifyClients\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.AccessibilityObject\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.AccessibleDefaultActionDescription\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.AccessibleDescription\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.AccessibleName\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.AccessibleRole\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.AllowDrop\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Anchor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.AutoScrollOffset\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.AutoSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.AutoSizeChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_AutoSizeChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_AutoSizeChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.BackColor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.BackColorChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_BackColorChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_BackColorChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.BackgroundImage\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.BackgroundImageChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_BackgroundImageChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_BackgroundImageChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.BackgroundImageLayout\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.BackgroundImageLayoutChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_BackgroundImageLayoutChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_BackgroundImageLayoutChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.BindingContext\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.BindingContextChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_BindingContextChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_BindingContextChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Bottom\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Bounds\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.BringToFront\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.CanEnableIme\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.CanFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.CanRaiseEvents\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.CanSelect\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Capture\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.CausesValidation\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.CausesValidationChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_CausesValidationChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_CausesValidationChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ChangeUICues\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_ChangeUICues\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_ChangeUICues\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Click\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_Click\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_Click\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ClientRectangle\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ClientSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ClientSizeChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_ClientSizeChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_ClientSizeChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.CompanyName\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Contains\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ContainsFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ContextMenu\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ContextMenuChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_ContextMenuChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_ContextMenuChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ContextMenuStrip\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ContextMenuStripChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_ContextMenuStripChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_ContextMenuStripChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ControlAdded\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_ControlAdded\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_ControlAdded\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ControlRemoved\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_ControlRemoved\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_ControlRemoved\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Controls\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.CreateAccessibilityInstance\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.CreateControl\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.CreateControlsInstance\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Created\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.CreateGraphics\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.CreateHandle\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.CreateParams\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Cursor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.CursorChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_CursorChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_CursorChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.DataBindings\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.DefaultBackColor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.DefaultCursor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.DefaultFont\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.DefaultForeColor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.DefaultImeMode\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.DefaultMargin\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.DefaultMaximumSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.DefaultMinimumSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.DefaultPadding\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.DefaultSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.DefWndProc\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.DestroyHandle\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.DisplayRectangle\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Dispose\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Disposing\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Dock\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.DockChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_DockChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_DockChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.DoDragDrop\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.DoubleBuffered\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.DoubleClick\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_DoubleClick\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_DoubleClick\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.DragDrop\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_DragDrop\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_DragDrop\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.DragEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_DragEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_DragEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.DragLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_DragLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_DragLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.DragOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_DragOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_DragOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.DrawToBitmap\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Enabled\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.EnabledChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_EnabledChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_EnabledChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.EndInvoke\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Enter\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_Enter\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_Enter\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.FindForm\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Focus\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Focused\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Font\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.FontChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_FontChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_FontChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.FontHeight\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ForeColor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ForeColorChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_ForeColorChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_ForeColorChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.FromChildHandle\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.FromHandle\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.GetAccessibilityObjectById\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.GetAutoSizeMode\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.GetChildAtPoint\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.GetContainerControl\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.GetNextControl\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.GetPreferredSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.GetScaledBounds\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.GetStyle\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.GetTopLevel\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.GiveFeedback\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_GiveFeedback\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_GiveFeedback\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.GotFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_GotFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_GotFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Handle\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.HandleCreated\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_HandleCreated\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_HandleCreated\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.HandleDestroyed\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_HandleDestroyed\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_HandleDestroyed\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.HasChildren\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Height\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.HelpRequested\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_HelpRequested\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_HelpRequested\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Hide\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ImeMode\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ImeModeBase\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ImeModeChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_ImeModeChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_ImeModeChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.InitLayout\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Invalidate\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Invalidated\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_Invalidated\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_Invalidated\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.InvokeGotFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.InvokeLostFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.InvokeOnClick\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.InvokePaint\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.InvokePaintBackground\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.InvokeRequired\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.IsAccessible\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.IsDisposed\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.IsHandleCreated\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.IsInputChar\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.IsInputKey\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.IsKeyLocked\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.IsMirrored\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.IsMnemonic\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.KeyDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_KeyDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_KeyDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.KeyPress\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_KeyPress\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_KeyPress\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.KeyUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_KeyUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_KeyUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Layout\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_Layout\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_Layout\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.LayoutEngine\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Leave\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_Leave\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_Leave\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Left\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Location\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.LocationChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_LocationChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_LocationChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.LostFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_LostFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_LostFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Margin\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.MarginChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_MarginChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_MarginChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.MaximumSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.MinimumSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ModifierKeys\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.MouseButtons\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.MouseCaptureChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_MouseCaptureChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_MouseCaptureChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.MouseClick\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_MouseClick\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_MouseClick\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.MouseDoubleClick\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_MouseDoubleClick\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_MouseDoubleClick\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.MouseDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_MouseDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_MouseDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.MouseEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_MouseEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_MouseEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.MouseHover\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_MouseHover\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_MouseHover\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.MouseLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_MouseLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_MouseLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.MouseMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_MouseMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_MouseMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.MousePosition\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.MouseUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_MouseUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_MouseUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.MouseWheel\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_MouseWheel\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_MouseWheel\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Move\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_Move\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_Move\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Name\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.NotifyInvalidate\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnAutoSizeChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnBackColorChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnBackgroundImageChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnBackgroundImageLayoutChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnBindingContextChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnCausesValidationChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnChangeUICues\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnClick\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnClientSizeChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnContextMenuChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnContextMenuStripChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnControlAdded\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnControlRemoved\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnCreateControl\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnCursorChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnDockChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnDoubleClick\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnDragDrop\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnDragEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnDragLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnDragOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnEnabledChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnFontChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnForeColorChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnGiveFeedback\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnGotFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnHandleCreated\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnHandleDestroyed\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnHelpRequested\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnImeModeChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnInvalidated\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnKeyDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnKeyPress\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnKeyUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnLayout\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnLocationChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnLostFocus\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnMarginChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnMouseCaptureChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnMouseClick\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnMouseDoubleClick\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnMouseDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnMouseEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnMouseHover\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnMouseLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnMouseMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnMouseUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnMouseWheel\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnMove\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnNotifyMessage\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnPaddingChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnPaint\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnPaintBackground\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnParentBackColorChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnParentBackgroundImageChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnParentBindingContextChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnParentChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnParentCursorChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnParentEnabledChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnParentFontChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnParentForeColorChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnParentRightToLeftChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnParentVisibleChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnPreviewKeyDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnPrint\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnQueryContinueDrag\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnRegionChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnResize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnRightToLeftChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnSizeChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnStyleChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnSystemColorsChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnTabIndexChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnTabStopChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnTextChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnValidated\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnValidating\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.OnVisibleChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Padding\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.PaddingChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_PaddingChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_PaddingChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Paint\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_Paint\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_Paint\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Parent\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ParentChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_ParentChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_ParentChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.PerformLayout\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.PointToClient\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.PointToScreen\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.PreferredSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.PreProcessControlMessage\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.PreProcessMessage\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.PreviewKeyDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_PreviewKeyDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_PreviewKeyDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ProcessCmdKey\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ProcessDialogChar\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ProcessDialogKey\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ProcessKeyEventArgs\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ProcessKeyMessage\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ProcessKeyPreview\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ProcessMnemonic\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ProductName\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ProductVersion\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.PropagatingImeMode\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.QueryAccessibilityHelp\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_QueryAccessibilityHelp\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_QueryAccessibilityHelp\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.QueryContinueDrag\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_QueryContinueDrag\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_QueryContinueDrag\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.RaiseDragEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.RaiseKeyEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.RaiseMouseEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.RaisePaintEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.RecreateHandle\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.RecreatingHandle\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.RectangleToClient\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.RectangleToScreen\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ReflectMessage\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Refresh\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Region\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.RegionChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_RegionChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_RegionChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.RenderRightToLeft\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ResetBackColor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ResetBindings\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ResetCursor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ResetFont\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ResetForeColor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ResetImeMode\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ResetMouseEventArgs\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ResetRightToLeft\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ResetText\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Resize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_Resize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_Resize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ResizeRedraw\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ResumeLayout\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Right\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.RightToLeft\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.RightToLeftChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_RightToLeftChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_RightToLeftChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.RtlTranslateAlignment\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.RtlTranslateContent\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.RtlTranslateHorizontal\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.RtlTranslateLeftRight\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Scale\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ScaleChildren\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ScaleControl\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ScaleCore\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Select\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.SelectNextControl\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.SendToBack\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.SetAutoSizeMode\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.SetBounds\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.SetBoundsCore\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.SetClientSizeCore\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.SetStyle\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.SetTopLevel\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.SetVisibleCore\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Show\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ShowFocusCues\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.ShowKeyboardCues\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Site\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Size\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.SizeChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_SizeChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_SizeChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.SizeFromClientSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.StyleChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_StyleChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_StyleChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.SuspendLayout\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.IDropTarget.OnDragDrop\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.IDropTarget.OnDragEnter\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.IDropTarget.OnDragLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.IDropTarget.OnDragOver\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.SystemColorsChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_SystemColorsChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_SystemColorsChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.TabIndex\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.TabIndexChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_TabIndexChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_TabIndexChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.TabStop\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.TabStopChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_TabStopChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_TabStopChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Tag\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Text\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.TextChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_TextChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_TextChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Top\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.TopLevelControl\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Update\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.UpdateBounds\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.UpdateStyles\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.UpdateZOrder\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.UseWaitCursor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Validated\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_Validated\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_Validated\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Validating\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_Validating\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_Validating\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Visible\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.VisibleChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.add_VisibleChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.remove_VisibleChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.Width\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.WindowTarget\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.Control.WndProc\">\r\n<meta name=\"APILocation\" content=\"System.Windows.Forms.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"5d8df2ba-8e1d-9267-1c8c-7264fae78cc5\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Windows.Forms\\Control.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines the base class for controls, which are components with visual representation.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows.Forms/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.Control\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Forms.Control.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Forms.Control.yml","open_to_public_contributors":true,"api_name":["System.Windows.Forms.Control","System.Windows.Forms.Control..ctor","System.Windows.Forms.Control.AccessibilityNotifyClients","System.Windows.Forms.Control.AccessibilityObject","System.Windows.Forms.Control.AccessibleDefaultActionDescription","System.Windows.Forms.Control.AccessibleDescription","System.Windows.Forms.Control.AccessibleName","System.Windows.Forms.Control.AccessibleRole","System.Windows.Forms.Control.AllowDrop","System.Windows.Forms.Control.Anchor","System.Windows.Forms.Control.AutoScrollOffset","System.Windows.Forms.Control.AutoSize","System.Windows.Forms.Control.AutoSizeChanged","System.Windows.Forms.Control.add_AutoSizeChanged","System.Windows.Forms.Control.remove_AutoSizeChanged","System.Windows.Forms.Control.BackColor","System.Windows.Forms.Control.BackColorChanged","System.Windows.Forms.Control.add_BackColorChanged","System.Windows.Forms.Control.remove_BackColorChanged","System.Windows.Forms.Control.BackgroundImage","System.Windows.Forms.Control.BackgroundImageChanged","System.Windows.Forms.Control.add_BackgroundImageChanged","System.Windows.Forms.Control.remove_BackgroundImageChanged","System.Windows.Forms.Control.BackgroundImageLayout","System.Windows.Forms.Control.BackgroundImageLayoutChanged","System.Windows.Forms.Control.add_BackgroundImageLayoutChanged","System.Windows.Forms.Control.remove_BackgroundImageLayoutChanged","System.Windows.Forms.Control.BeginInvoke","System.Windows.Forms.Control.BindingContext","System.Windows.Forms.Control.BindingContextChanged","System.Windows.Forms.Control.add_BindingContextChanged","System.Windows.Forms.Control.remove_BindingContextChanged","System.Windows.Forms.Control.Bottom","System.Windows.Forms.Control.Bounds","System.Windows.Forms.Control.BringToFront","System.Windows.Forms.Control.CanEnableIme","System.Windows.Forms.Control.CanFocus","System.Windows.Forms.Control.CanRaiseEvents","System.Windows.Forms.Control.CanSelect","System.Windows.Forms.Control.Capture","System.Windows.Forms.Control.CausesValidation","System.Windows.Forms.Control.CausesValidationChanged","System.Windows.Forms.Control.add_CausesValidationChanged","System.Windows.Forms.Control.remove_CausesValidationChanged","System.Windows.Forms.Control.ChangeUICues","System.Windows.Forms.Control.add_ChangeUICues","System.Windows.Forms.Control.remove_ChangeUICues","System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls","System.Windows.Forms.Control.Click","System.Windows.Forms.Control.add_Click","System.Windows.Forms.Control.remove_Click","System.Windows.Forms.Control.ClientRectangle","System.Windows.Forms.Control.ClientSize","System.Windows.Forms.Control.ClientSizeChanged","System.Windows.Forms.Control.add_ClientSizeChanged","System.Windows.Forms.Control.remove_ClientSizeChanged","System.Windows.Forms.Control.CompanyName","System.Windows.Forms.Control.Contains","System.Windows.Forms.Control.ContainsFocus","System.Windows.Forms.Control.ContextMenu","System.Windows.Forms.Control.ContextMenuChanged","System.Windows.Forms.Control.add_ContextMenuChanged","System.Windows.Forms.Control.remove_ContextMenuChanged","System.Windows.Forms.Control.ContextMenuStrip","System.Windows.Forms.Control.ContextMenuStripChanged","System.Windows.Forms.Control.add_ContextMenuStripChanged","System.Windows.Forms.Control.remove_ContextMenuStripChanged","System.Windows.Forms.Control.ControlAdded","System.Windows.Forms.Control.add_ControlAdded","System.Windows.Forms.Control.remove_ControlAdded","System.Windows.Forms.Control.ControlRemoved","System.Windows.Forms.Control.add_ControlRemoved","System.Windows.Forms.Control.remove_ControlRemoved","System.Windows.Forms.Control.Controls","System.Windows.Forms.Control.CreateAccessibilityInstance","System.Windows.Forms.Control.CreateControl","System.Windows.Forms.Control.CreateControlsInstance","System.Windows.Forms.Control.Created","System.Windows.Forms.Control.CreateGraphics","System.Windows.Forms.Control.CreateHandle","System.Windows.Forms.Control.CreateParams","System.Windows.Forms.Control.Cursor","System.Windows.Forms.Control.CursorChanged","System.Windows.Forms.Control.add_CursorChanged","System.Windows.Forms.Control.remove_CursorChanged","System.Windows.Forms.Control.DataBindings","System.Windows.Forms.Control.DefaultBackColor","System.Windows.Forms.Control.DefaultCursor","System.Windows.Forms.Control.DefaultFont","System.Windows.Forms.Control.DefaultForeColor","System.Windows.Forms.Control.DefaultImeMode","System.Windows.Forms.Control.DefaultMargin","System.Windows.Forms.Control.DefaultMaximumSize","System.Windows.Forms.Control.DefaultMinimumSize","System.Windows.Forms.Control.DefaultPadding","System.Windows.Forms.Control.DefaultSize","System.Windows.Forms.Control.DefWndProc","System.Windows.Forms.Control.DestroyHandle","System.Windows.Forms.Control.DisplayRectangle","System.Windows.Forms.Control.Dispose","System.Windows.Forms.Control.Disposing","System.Windows.Forms.Control.Dock","System.Windows.Forms.Control.DockChanged","System.Windows.Forms.Control.add_DockChanged","System.Windows.Forms.Control.remove_DockChanged","System.Windows.Forms.Control.DoDragDrop","System.Windows.Forms.Control.DoubleBuffered","System.Windows.Forms.Control.DoubleClick","System.Windows.Forms.Control.add_DoubleClick","System.Windows.Forms.Control.remove_DoubleClick","System.Windows.Forms.Control.DragDrop","System.Windows.Forms.Control.add_DragDrop","System.Windows.Forms.Control.remove_DragDrop","System.Windows.Forms.Control.DragEnter","System.Windows.Forms.Control.add_DragEnter","System.Windows.Forms.Control.remove_DragEnter","System.Windows.Forms.Control.DragLeave","System.Windows.Forms.Control.add_DragLeave","System.Windows.Forms.Control.remove_DragLeave","System.Windows.Forms.Control.DragOver","System.Windows.Forms.Control.add_DragOver","System.Windows.Forms.Control.remove_DragOver","System.Windows.Forms.Control.DrawToBitmap","System.Windows.Forms.Control.Enabled","System.Windows.Forms.Control.EnabledChanged","System.Windows.Forms.Control.add_EnabledChanged","System.Windows.Forms.Control.remove_EnabledChanged","System.Windows.Forms.Control.EndInvoke","System.Windows.Forms.Control.Enter","System.Windows.Forms.Control.add_Enter","System.Windows.Forms.Control.remove_Enter","System.Windows.Forms.Control.FindForm","System.Windows.Forms.Control.Focus","System.Windows.Forms.Control.Focused","System.Windows.Forms.Control.Font","System.Windows.Forms.Control.FontChanged","System.Windows.Forms.Control.add_FontChanged","System.Windows.Forms.Control.remove_FontChanged","System.Windows.Forms.Control.FontHeight","System.Windows.Forms.Control.ForeColor","System.Windows.Forms.Control.ForeColorChanged","System.Windows.Forms.Control.add_ForeColorChanged","System.Windows.Forms.Control.remove_ForeColorChanged","System.Windows.Forms.Control.FromChildHandle","System.Windows.Forms.Control.FromHandle","System.Windows.Forms.Control.GetAccessibilityObjectById","System.Windows.Forms.Control.GetAutoSizeMode","System.Windows.Forms.Control.GetChildAtPoint","System.Windows.Forms.Control.GetContainerControl","System.Windows.Forms.Control.GetNextControl","System.Windows.Forms.Control.GetPreferredSize","System.Windows.Forms.Control.GetScaledBounds","System.Windows.Forms.Control.GetStyle","System.Windows.Forms.Control.GetTopLevel","System.Windows.Forms.Control.GiveFeedback","System.Windows.Forms.Control.add_GiveFeedback","System.Windows.Forms.Control.remove_GiveFeedback","System.Windows.Forms.Control.GotFocus","System.Windows.Forms.Control.add_GotFocus","System.Windows.Forms.Control.remove_GotFocus","System.Windows.Forms.Control.Handle","System.Windows.Forms.Control.HandleCreated","System.Windows.Forms.Control.add_HandleCreated","System.Windows.Forms.Control.remove_HandleCreated","System.Windows.Forms.Control.HandleDestroyed","System.Windows.Forms.Control.add_HandleDestroyed","System.Windows.Forms.Control.remove_HandleDestroyed","System.Windows.Forms.Control.HasChildren","System.Windows.Forms.Control.Height","System.Windows.Forms.Control.HelpRequested","System.Windows.Forms.Control.add_HelpRequested","System.Windows.Forms.Control.remove_HelpRequested","System.Windows.Forms.Control.Hide","System.Windows.Forms.Control.ImeMode","System.Windows.Forms.Control.ImeModeBase","System.Windows.Forms.Control.ImeModeChanged","System.Windows.Forms.Control.add_ImeModeChanged","System.Windows.Forms.Control.remove_ImeModeChanged","System.Windows.Forms.Control.InitLayout","System.Windows.Forms.Control.Invalidate","System.Windows.Forms.Control.Invalidated","System.Windows.Forms.Control.add_Invalidated","System.Windows.Forms.Control.remove_Invalidated","System.Windows.Forms.Control.Invoke","System.Windows.Forms.Control.InvokeGotFocus","System.Windows.Forms.Control.InvokeLostFocus","System.Windows.Forms.Control.InvokeOnClick","System.Windows.Forms.Control.InvokePaint","System.Windows.Forms.Control.InvokePaintBackground","System.Windows.Forms.Control.InvokeRequired","System.Windows.Forms.Control.IsAccessible","System.Windows.Forms.Control.IsDisposed","System.Windows.Forms.Control.IsHandleCreated","System.Windows.Forms.Control.IsInputChar","System.Windows.Forms.Control.IsInputKey","System.Windows.Forms.Control.IsKeyLocked","System.Windows.Forms.Control.IsMirrored","System.Windows.Forms.Control.IsMnemonic","System.Windows.Forms.Control.KeyDown","System.Windows.Forms.Control.add_KeyDown","System.Windows.Forms.Control.remove_KeyDown","System.Windows.Forms.Control.KeyPress","System.Windows.Forms.Control.add_KeyPress","System.Windows.Forms.Control.remove_KeyPress","System.Windows.Forms.Control.KeyUp","System.Windows.Forms.Control.add_KeyUp","System.Windows.Forms.Control.remove_KeyUp","System.Windows.Forms.Control.Layout","System.Windows.Forms.Control.add_Layout","System.Windows.Forms.Control.remove_Layout","System.Windows.Forms.Control.LayoutEngine","System.Windows.Forms.Control.Leave","System.Windows.Forms.Control.add_Leave","System.Windows.Forms.Control.remove_Leave","System.Windows.Forms.Control.Left","System.Windows.Forms.Control.Location","System.Windows.Forms.Control.LocationChanged","System.Windows.Forms.Control.add_LocationChanged","System.Windows.Forms.Control.remove_LocationChanged","System.Windows.Forms.Control.LostFocus","System.Windows.Forms.Control.add_LostFocus","System.Windows.Forms.Control.remove_LostFocus","System.Windows.Forms.Control.Margin","System.Windows.Forms.Control.MarginChanged","System.Windows.Forms.Control.add_MarginChanged","System.Windows.Forms.Control.remove_MarginChanged","System.Windows.Forms.Control.MaximumSize","System.Windows.Forms.Control.MinimumSize","System.Windows.Forms.Control.ModifierKeys","System.Windows.Forms.Control.MouseButtons","System.Windows.Forms.Control.MouseCaptureChanged","System.Windows.Forms.Control.add_MouseCaptureChanged","System.Windows.Forms.Control.remove_MouseCaptureChanged","System.Windows.Forms.Control.MouseClick","System.Windows.Forms.Control.add_MouseClick","System.Windows.Forms.Control.remove_MouseClick","System.Windows.Forms.Control.MouseDoubleClick","System.Windows.Forms.Control.add_MouseDoubleClick","System.Windows.Forms.Control.remove_MouseDoubleClick","System.Windows.Forms.Control.MouseDown","System.Windows.Forms.Control.add_MouseDown","System.Windows.Forms.Control.remove_MouseDown","System.Windows.Forms.Control.MouseEnter","System.Windows.Forms.Control.add_MouseEnter","System.Windows.Forms.Control.remove_MouseEnter","System.Windows.Forms.Control.MouseHover","System.Windows.Forms.Control.add_MouseHover","System.Windows.Forms.Control.remove_MouseHover","System.Windows.Forms.Control.MouseLeave","System.Windows.Forms.Control.add_MouseLeave","System.Windows.Forms.Control.remove_MouseLeave","System.Windows.Forms.Control.MouseMove","System.Windows.Forms.Control.add_MouseMove","System.Windows.Forms.Control.remove_MouseMove","System.Windows.Forms.Control.MousePosition","System.Windows.Forms.Control.MouseUp","System.Windows.Forms.Control.add_MouseUp","System.Windows.Forms.Control.remove_MouseUp","System.Windows.Forms.Control.MouseWheel","System.Windows.Forms.Control.add_MouseWheel","System.Windows.Forms.Control.remove_MouseWheel","System.Windows.Forms.Control.Move","System.Windows.Forms.Control.add_Move","System.Windows.Forms.Control.remove_Move","System.Windows.Forms.Control.Name","System.Windows.Forms.Control.NotifyInvalidate","System.Windows.Forms.Control.OnAutoSizeChanged","System.Windows.Forms.Control.OnBackColorChanged","System.Windows.Forms.Control.OnBackgroundImageChanged","System.Windows.Forms.Control.OnBackgroundImageLayoutChanged","System.Windows.Forms.Control.OnBindingContextChanged","System.Windows.Forms.Control.OnCausesValidationChanged","System.Windows.Forms.Control.OnChangeUICues","System.Windows.Forms.Control.OnClick","System.Windows.Forms.Control.OnClientSizeChanged","System.Windows.Forms.Control.OnContextMenuChanged","System.Windows.Forms.Control.OnContextMenuStripChanged","System.Windows.Forms.Control.OnControlAdded","System.Windows.Forms.Control.OnControlRemoved","System.Windows.Forms.Control.OnCreateControl","System.Windows.Forms.Control.OnCursorChanged","System.Windows.Forms.Control.OnDockChanged","System.Windows.Forms.Control.OnDoubleClick","System.Windows.Forms.Control.OnDragDrop","System.Windows.Forms.Control.OnDragEnter","System.Windows.Forms.Control.OnDragLeave","System.Windows.Forms.Control.OnDragOver","System.Windows.Forms.Control.OnEnabledChanged","System.Windows.Forms.Control.OnEnter","System.Windows.Forms.Control.OnFontChanged","System.Windows.Forms.Control.OnForeColorChanged","System.Windows.Forms.Control.OnGiveFeedback","System.Windows.Forms.Control.OnGotFocus","System.Windows.Forms.Control.OnHandleCreated","System.Windows.Forms.Control.OnHandleDestroyed","System.Windows.Forms.Control.OnHelpRequested","System.Windows.Forms.Control.OnImeModeChanged","System.Windows.Forms.Control.OnInvalidated","System.Windows.Forms.Control.OnKeyDown","System.Windows.Forms.Control.OnKeyPress","System.Windows.Forms.Control.OnKeyUp","System.Windows.Forms.Control.OnLayout","System.Windows.Forms.Control.OnLeave","System.Windows.Forms.Control.OnLocationChanged","System.Windows.Forms.Control.OnLostFocus","System.Windows.Forms.Control.OnMarginChanged","System.Windows.Forms.Control.OnMouseCaptureChanged","System.Windows.Forms.Control.OnMouseClick","System.Windows.Forms.Control.OnMouseDoubleClick","System.Windows.Forms.Control.OnMouseDown","System.Windows.Forms.Control.OnMouseEnter","System.Windows.Forms.Control.OnMouseHover","System.Windows.Forms.Control.OnMouseLeave","System.Windows.Forms.Control.OnMouseMove","System.Windows.Forms.Control.OnMouseUp","System.Windows.Forms.Control.OnMouseWheel","System.Windows.Forms.Control.OnMove","System.Windows.Forms.Control.OnNotifyMessage","System.Windows.Forms.Control.OnPaddingChanged","System.Windows.Forms.Control.OnPaint","System.Windows.Forms.Control.OnPaintBackground","System.Windows.Forms.Control.OnParentBackColorChanged","System.Windows.Forms.Control.OnParentBackgroundImageChanged","System.Windows.Forms.Control.OnParentBindingContextChanged","System.Windows.Forms.Control.OnParentChanged","System.Windows.Forms.Control.OnParentCursorChanged","System.Windows.Forms.Control.OnParentEnabledChanged","System.Windows.Forms.Control.OnParentFontChanged","System.Windows.Forms.Control.OnParentForeColorChanged","System.Windows.Forms.Control.OnParentRightToLeftChanged","System.Windows.Forms.Control.OnParentVisibleChanged","System.Windows.Forms.Control.OnPreviewKeyDown","System.Windows.Forms.Control.OnPrint","System.Windows.Forms.Control.OnQueryContinueDrag","System.Windows.Forms.Control.OnRegionChanged","System.Windows.Forms.Control.OnResize","System.Windows.Forms.Control.OnRightToLeftChanged","System.Windows.Forms.Control.OnSizeChanged","System.Windows.Forms.Control.OnStyleChanged","System.Windows.Forms.Control.OnSystemColorsChanged","System.Windows.Forms.Control.OnTabIndexChanged","System.Windows.Forms.Control.OnTabStopChanged","System.Windows.Forms.Control.OnTextChanged","System.Windows.Forms.Control.OnValidated","System.Windows.Forms.Control.OnValidating","System.Windows.Forms.Control.OnVisibleChanged","System.Windows.Forms.Control.Padding","System.Windows.Forms.Control.PaddingChanged","System.Windows.Forms.Control.add_PaddingChanged","System.Windows.Forms.Control.remove_PaddingChanged","System.Windows.Forms.Control.Paint","System.Windows.Forms.Control.add_Paint","System.Windows.Forms.Control.remove_Paint","System.Windows.Forms.Control.Parent","System.Windows.Forms.Control.ParentChanged","System.Windows.Forms.Control.add_ParentChanged","System.Windows.Forms.Control.remove_ParentChanged","System.Windows.Forms.Control.PerformLayout","System.Windows.Forms.Control.PointToClient","System.Windows.Forms.Control.PointToScreen","System.Windows.Forms.Control.PreferredSize","System.Windows.Forms.Control.PreProcessControlMessage","System.Windows.Forms.Control.PreProcessMessage","System.Windows.Forms.Control.PreviewKeyDown","System.Windows.Forms.Control.add_PreviewKeyDown","System.Windows.Forms.Control.remove_PreviewKeyDown","System.Windows.Forms.Control.ProcessCmdKey","System.Windows.Forms.Control.ProcessDialogChar","System.Windows.Forms.Control.ProcessDialogKey","System.Windows.Forms.Control.ProcessKeyEventArgs","System.Windows.Forms.Control.ProcessKeyMessage","System.Windows.Forms.Control.ProcessKeyPreview","System.Windows.Forms.Control.ProcessMnemonic","System.Windows.Forms.Control.ProductName","System.Windows.Forms.Control.ProductVersion","System.Windows.Forms.Control.PropagatingImeMode","System.Windows.Forms.Control.QueryAccessibilityHelp","System.Windows.Forms.Control.add_QueryAccessibilityHelp","System.Windows.Forms.Control.remove_QueryAccessibilityHelp","System.Windows.Forms.Control.QueryContinueDrag","System.Windows.Forms.Control.add_QueryContinueDrag","System.Windows.Forms.Control.remove_QueryContinueDrag","System.Windows.Forms.Control.RaiseDragEvent","System.Windows.Forms.Control.RaiseKeyEvent","System.Windows.Forms.Control.RaiseMouseEvent","System.Windows.Forms.Control.RaisePaintEvent","System.Windows.Forms.Control.RecreateHandle","System.Windows.Forms.Control.RecreatingHandle","System.Windows.Forms.Control.RectangleToClient","System.Windows.Forms.Control.RectangleToScreen","System.Windows.Forms.Control.ReflectMessage","System.Windows.Forms.Control.Refresh","System.Windows.Forms.Control.Region","System.Windows.Forms.Control.RegionChanged","System.Windows.Forms.Control.add_RegionChanged","System.Windows.Forms.Control.remove_RegionChanged","System.Windows.Forms.Control.RenderRightToLeft","System.Windows.Forms.Control.ResetBackColor","System.Windows.Forms.Control.ResetBindings","System.Windows.Forms.Control.ResetCursor","System.Windows.Forms.Control.ResetFont","System.Windows.Forms.Control.ResetForeColor","System.Windows.Forms.Control.ResetImeMode","System.Windows.Forms.Control.ResetMouseEventArgs","System.Windows.Forms.Control.ResetRightToLeft","System.Windows.Forms.Control.ResetText","System.Windows.Forms.Control.Resize","System.Windows.Forms.Control.add_Resize","System.Windows.Forms.Control.remove_Resize","System.Windows.Forms.Control.ResizeRedraw","System.Windows.Forms.Control.ResumeLayout","System.Windows.Forms.Control.Right","System.Windows.Forms.Control.RightToLeft","System.Windows.Forms.Control.RightToLeftChanged","System.Windows.Forms.Control.add_RightToLeftChanged","System.Windows.Forms.Control.remove_RightToLeftChanged","System.Windows.Forms.Control.RtlTranslateAlignment","System.Windows.Forms.Control.RtlTranslateContent","System.Windows.Forms.Control.RtlTranslateHorizontal","System.Windows.Forms.Control.RtlTranslateLeftRight","System.Windows.Forms.Control.Scale","System.Windows.Forms.Control.ScaleChildren","System.Windows.Forms.Control.ScaleControl","System.Windows.Forms.Control.ScaleCore","System.Windows.Forms.Control.Select","System.Windows.Forms.Control.SelectNextControl","System.Windows.Forms.Control.SendToBack","System.Windows.Forms.Control.SetAutoSizeMode","System.Windows.Forms.Control.SetBounds","System.Windows.Forms.Control.SetBoundsCore","System.Windows.Forms.Control.SetClientSizeCore","System.Windows.Forms.Control.SetStyle","System.Windows.Forms.Control.SetTopLevel","System.Windows.Forms.Control.SetVisibleCore","System.Windows.Forms.Control.Show","System.Windows.Forms.Control.ShowFocusCues","System.Windows.Forms.Control.ShowKeyboardCues","System.Windows.Forms.Control.Site","System.Windows.Forms.Control.Size","System.Windows.Forms.Control.SizeChanged","System.Windows.Forms.Control.add_SizeChanged","System.Windows.Forms.Control.remove_SizeChanged","System.Windows.Forms.Control.SizeFromClientSize","System.Windows.Forms.Control.StyleChanged","System.Windows.Forms.Control.add_StyleChanged","System.Windows.Forms.Control.remove_StyleChanged","System.Windows.Forms.Control.SuspendLayout","System.Windows.Forms.Control.IDropTarget.OnDragDrop","System.Windows.Forms.Control.IDropTarget.OnDragEnter","System.Windows.Forms.Control.IDropTarget.OnDragLeave","System.Windows.Forms.Control.IDropTarget.OnDragOver","System.Windows.Forms.Control.SystemColorsChanged","System.Windows.Forms.Control.add_SystemColorsChanged","System.Windows.Forms.Control.remove_SystemColorsChanged","System.Windows.Forms.Control.TabIndex","System.Windows.Forms.Control.TabIndexChanged","System.Windows.Forms.Control.add_TabIndexChanged","System.Windows.Forms.Control.remove_TabIndexChanged","System.Windows.Forms.Control.TabStop","System.Windows.Forms.Control.TabStopChanged","System.Windows.Forms.Control.add_TabStopChanged","System.Windows.Forms.Control.remove_TabStopChanged","System.Windows.Forms.Control.Tag","System.Windows.Forms.Control.Text","System.Windows.Forms.Control.TextChanged","System.Windows.Forms.Control.add_TextChanged","System.Windows.Forms.Control.remove_TextChanged","System.Windows.Forms.Control.Top","System.Windows.Forms.Control.TopLevelControl","System.Windows.Forms.Control.Update","System.Windows.Forms.Control.UpdateBounds","System.Windows.Forms.Control.UpdateStyles","System.Windows.Forms.Control.UpdateZOrder","System.Windows.Forms.Control.UseWaitCursor","System.Windows.Forms.Control.Validated","System.Windows.Forms.Control.add_Validated","System.Windows.Forms.Control.remove_Validated","System.Windows.Forms.Control.Validating","System.Windows.Forms.Control.add_Validating","System.Windows.Forms.Control.remove_Validating","System.Windows.Forms.Control.Visible","System.Windows.Forms.Control.VisibleChanged","System.Windows.Forms.Control.add_VisibleChanged","System.Windows.Forms.Control.remove_VisibleChanged","System.Windows.Forms.Control.Width","System.Windows.Forms.Control.WindowTarget","System.Windows.Forms.Control.WndProc"],"api_location":["System.Windows.Forms.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.Control","System::Windows::Forms::Control","System.Windows.Forms.Control.#ctor","System::Windows::Forms::Control::#ctor","System.Windows.Forms.Control.AccessibilityNotifyClients","System::Windows::Forms::Control::AccessibilityNotifyClients","System.Windows.Forms.Control.AccessibilityObject","System::Windows::Forms::Control::AccessibilityObject","System.Windows.Forms.Control.AccessibleDefaultActionDescription","System::Windows::Forms::Control::AccessibleDefaultActionDescription","System.Windows.Forms.Control.AccessibleDescription","System::Windows::Forms::Control::AccessibleDescription","System.Windows.Forms.Control.AccessibleName","System::Windows::Forms::Control::AccessibleName","System.Windows.Forms.Control.AccessibleRole","System::Windows::Forms::Control::AccessibleRole","System.Windows.Forms.Control.AllowDrop","System::Windows::Forms::Control::AllowDrop","System.Windows.Forms.Control.Anchor","System::Windows::Forms::Control::Anchor","System.Windows.Forms.Control.AutoScrollOffset","System::Windows::Forms::Control::AutoScrollOffset","System.Windows.Forms.Control.AutoSize","System::Windows::Forms::Control::AutoSize","System.Windows.Forms.Control.AutoSizeChanged","System::Windows::Forms::Control::AutoSizeChanged","System.Windows.Forms.Control.BackColor","System::Windows::Forms::Control::BackColor","System.Windows.Forms.Control.BackColorChanged","System::Windows::Forms::Control::BackColorChanged","System.Windows.Forms.Control.BackgroundImage","System::Windows::Forms::Control::BackgroundImage","System.Windows.Forms.Control.BackgroundImageChanged","System::Windows::Forms::Control::BackgroundImageChanged","System.Windows.Forms.Control.BackgroundImageLayout","System::Windows::Forms::Control::BackgroundImageLayout","System.Windows.Forms.Control.BackgroundImageLayoutChanged","System::Windows::Forms::Control::BackgroundImageLayoutChanged","System.Windows.Forms.Control.BeginInvoke","System::Windows::Forms::Control::BeginInvoke","System.Windows.Forms.Control.BindingContext","System::Windows::Forms::Control::BindingContext","System.Windows.Forms.Control.BindingContextChanged","System::Windows::Forms::Control::BindingContextChanged","System.Windows.Forms.Control.Bottom","System::Windows::Forms::Control::Bottom","System.Windows.Forms.Control.Bounds","System::Windows::Forms::Control::Bounds","System.Windows.Forms.Control.BringToFront","System::Windows::Forms::Control::BringToFront","System.Windows.Forms.Control.CanEnableIme","System::Windows::Forms::Control::CanEnableIme","System.Windows.Forms.Control.CanFocus","System::Windows::Forms::Control::CanFocus","System.Windows.Forms.Control.CanRaiseEvents","System::Windows::Forms::Control::CanRaiseEvents","System.Windows.Forms.Control.CanSelect","System::Windows::Forms::Control::CanSelect","System.Windows.Forms.Control.Capture","System::Windows::Forms::Control::Capture","System.Windows.Forms.Control.CausesValidation","System::Windows::Forms::Control::CausesValidation","System.Windows.Forms.Control.CausesValidationChanged","System::Windows::Forms::Control::CausesValidationChanged","System.Windows.Forms.Control.ChangeUICues","System::Windows::Forms::Control::ChangeUICues","System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls","System::Windows::Forms::Control::CheckForIllegalCrossThreadCalls","System.Windows.Forms.Control.Click","System::Windows::Forms::Control::Click","System.Windows.Forms.Control.ClientRectangle","System::Windows::Forms::Control::ClientRectangle","System.Windows.Forms.Control.ClientSize","System::Windows::Forms::Control::ClientSize","System.Windows.Forms.Control.ClientSizeChanged","System::Windows::Forms::Control::ClientSizeChanged","System.Windows.Forms.Control.CompanyName","System::Windows::Forms::Control::CompanyName","System.Windows.Forms.Control.Contains","System::Windows::Forms::Control::Contains","System.Windows.Forms.Control.ContainsFocus","System::Windows::Forms::Control::ContainsFocus","System.Windows.Forms.Control.ContextMenu","System::Windows::Forms::Control::ContextMenu","System.Windows.Forms.Control.ContextMenuChanged","System::Windows::Forms::Control::ContextMenuChanged","System.Windows.Forms.Control.ContextMenuStrip","System::Windows::Forms::Control::ContextMenuStrip","System.Windows.Forms.Control.ContextMenuStripChanged","System::Windows::Forms::Control::ContextMenuStripChanged","System.Windows.Forms.Control.ControlAdded","System::Windows::Forms::Control::ControlAdded","System.Windows.Forms.Control.ControlRemoved","System::Windows::Forms::Control::ControlRemoved","System.Windows.Forms.Control.Controls","System::Windows::Forms::Control::Controls","System.Windows.Forms.Control.CreateAccessibilityInstance","System::Windows::Forms::Control::CreateAccessibilityInstance","System.Windows.Forms.Control.CreateControl","System::Windows::Forms::Control::CreateControl","System.Windows.Forms.Control.CreateControlsInstance","System::Windows::Forms::Control::CreateControlsInstance","System.Windows.Forms.Control.Created","System::Windows::Forms::Control::Created","System.Windows.Forms.Control.CreateGraphics","System::Windows::Forms::Control::CreateGraphics","System.Windows.Forms.Control.CreateHandle","System::Windows::Forms::Control::CreateHandle","System.Windows.Forms.Control.CreateParams","System::Windows::Forms::Control::CreateParams","System.Windows.Forms.Control.Cursor","System::Windows::Forms::Control::Cursor","System.Windows.Forms.Control.CursorChanged","System::Windows::Forms::Control::CursorChanged","System.Windows.Forms.Control.DataBindings","System::Windows::Forms::Control::DataBindings","System.Windows.Forms.Control.DefaultBackColor","System::Windows::Forms::Control::DefaultBackColor","System.Windows.Forms.Control.DefaultCursor","System::Windows::Forms::Control::DefaultCursor","System.Windows.Forms.Control.DefaultFont","System::Windows::Forms::Control::DefaultFont","System.Windows.Forms.Control.DefaultForeColor","System::Windows::Forms::Control::DefaultForeColor","System.Windows.Forms.Control.DefaultImeMode","System::Windows::Forms::Control::DefaultImeMode","System.Windows.Forms.Control.DefaultMargin","System::Windows::Forms::Control::DefaultMargin","System.Windows.Forms.Control.DefaultMaximumSize","System::Windows::Forms::Control::DefaultMaximumSize","System.Windows.Forms.Control.DefaultMinimumSize","System::Windows::Forms::Control::DefaultMinimumSize","System.Windows.Forms.Control.DefaultPadding","System::Windows::Forms::Control::DefaultPadding","System.Windows.Forms.Control.DefaultSize","System::Windows::Forms::Control::DefaultSize","System.Windows.Forms.Control.DefWndProc","System::Windows::Forms::Control::DefWndProc","System.Windows.Forms.Control.DestroyHandle","System::Windows::Forms::Control::DestroyHandle","System.Windows.Forms.Control.DisplayRectangle","System::Windows::Forms::Control::DisplayRectangle","System.Windows.Forms.Control.Dispose","System::Windows::Forms::Control::Dispose","System.Windows.Forms.Control.Disposing","System::Windows::Forms::Control::Disposing","System.Windows.Forms.Control.Dock","System::Windows::Forms::Control::Dock","System.Windows.Forms.Control.DockChanged","System::Windows::Forms::Control::DockChanged","System.Windows.Forms.Control.DoDragDrop","System::Windows::Forms::Control::DoDragDrop","System.Windows.Forms.Control.DoubleBuffered","System::Windows::Forms::Control::DoubleBuffered","System.Windows.Forms.Control.DoubleClick","System::Windows::Forms::Control::DoubleClick","System.Windows.Forms.Control.DragDrop","System::Windows::Forms::Control::DragDrop","System.Windows.Forms.Control.DragEnter","System::Windows::Forms::Control::DragEnter","System.Windows.Forms.Control.DragLeave","System::Windows::Forms::Control::DragLeave","System.Windows.Forms.Control.DragOver","System::Windows::Forms::Control::DragOver","System.Windows.Forms.Control.DrawToBitmap","System::Windows::Forms::Control::DrawToBitmap","System.Windows.Forms.Control.Enabled","System::Windows::Forms::Control::Enabled","System.Windows.Forms.Control.EnabledChanged","System::Windows::Forms::Control::EnabledChanged","System.Windows.Forms.Control.EndInvoke","System::Windows::Forms::Control::EndInvoke","System.Windows.Forms.Control.Enter","System::Windows::Forms::Control::Enter","System.Windows.Forms.Control.FindForm","System::Windows::Forms::Control::FindForm","System.Windows.Forms.Control.Focus","System::Windows::Forms::Control::Focus","System.Windows.Forms.Control.Focused","System::Windows::Forms::Control::Focused","System.Windows.Forms.Control.Font","System::Windows::Forms::Control::Font","System.Windows.Forms.Control.FontChanged","System::Windows::Forms::Control::FontChanged","System.Windows.Forms.Control.FontHeight","System::Windows::Forms::Control::FontHeight","System.Windows.Forms.Control.ForeColor","System::Windows::Forms::Control::ForeColor","System.Windows.Forms.Control.ForeColorChanged","System::Windows::Forms::Control::ForeColorChanged","System.Windows.Forms.Control.FromChildHandle","System::Windows::Forms::Control::FromChildHandle","System.Windows.Forms.Control.FromHandle","System::Windows::Forms::Control::FromHandle","System.Windows.Forms.Control.GetAccessibilityObjectById","System::Windows::Forms::Control::GetAccessibilityObjectById","System.Windows.Forms.Control.GetAutoSizeMode","System::Windows::Forms::Control::GetAutoSizeMode","System.Windows.Forms.Control.GetChildAtPoint","System::Windows::Forms::Control::GetChildAtPoint","System.Windows.Forms.Control.GetContainerControl","System::Windows::Forms::Control::GetContainerControl","System.Windows.Forms.Control.GetNextControl","System::Windows::Forms::Control::GetNextControl","System.Windows.Forms.Control.GetPreferredSize","System::Windows::Forms::Control::GetPreferredSize","System.Windows.Forms.Control.GetScaledBounds","System::Windows::Forms::Control::GetScaledBounds","System.Windows.Forms.Control.GetStyle","System::Windows::Forms::Control::GetStyle","System.Windows.Forms.Control.GetTopLevel","System::Windows::Forms::Control::GetTopLevel","System.Windows.Forms.Control.GiveFeedback","System::Windows::Forms::Control::GiveFeedback","System.Windows.Forms.Control.GotFocus","System::Windows::Forms::Control::GotFocus","System.Windows.Forms.Control.Handle","System::Windows::Forms::Control::Handle","System.Windows.Forms.Control.HandleCreated","System::Windows::Forms::Control::HandleCreated","System.Windows.Forms.Control.HandleDestroyed","System::Windows::Forms::Control::HandleDestroyed","System.Windows.Forms.Control.HasChildren","System::Windows::Forms::Control::HasChildren","System.Windows.Forms.Control.Height","System::Windows::Forms::Control::Height","System.Windows.Forms.Control.HelpRequested","System::Windows::Forms::Control::HelpRequested","System.Windows.Forms.Control.Hide","System::Windows::Forms::Control::Hide","System.Windows.Forms.Control.ImeMode","System::Windows::Forms::Control::ImeMode","System.Windows.Forms.Control.ImeModeBase","System::Windows::Forms::Control::ImeModeBase","System.Windows.Forms.Control.ImeModeChanged","System::Windows::Forms::Control::ImeModeChanged","System.Windows.Forms.Control.InitLayout","System::Windows::Forms::Control::InitLayout","System.Windows.Forms.Control.Invalidate","System::Windows::Forms::Control::Invalidate","System.Windows.Forms.Control.Invalidated","System::Windows::Forms::Control::Invalidated","System.Windows.Forms.Control.Invoke","System::Windows::Forms::Control::Invoke","System.Windows.Forms.Control.InvokeGotFocus","System::Windows::Forms::Control::InvokeGotFocus","System.Windows.Forms.Control.InvokeLostFocus","System::Windows::Forms::Control::InvokeLostFocus","System.Windows.Forms.Control.InvokeOnClick","System::Windows::Forms::Control::InvokeOnClick","System.Windows.Forms.Control.InvokePaint","System::Windows::Forms::Control::InvokePaint","System.Windows.Forms.Control.InvokePaintBackground","System::Windows::Forms::Control::InvokePaintBackground","System.Windows.Forms.Control.InvokeRequired","System::Windows::Forms::Control::InvokeRequired","System.Windows.Forms.Control.IsAccessible","System::Windows::Forms::Control::IsAccessible","System.Windows.Forms.Control.IsDisposed","System::Windows::Forms::Control::IsDisposed","System.Windows.Forms.Control.IsHandleCreated","System::Windows::Forms::Control::IsHandleCreated","System.Windows.Forms.Control.IsInputChar","System::Windows::Forms::Control::IsInputChar","System.Windows.Forms.Control.IsInputKey","System::Windows::Forms::Control::IsInputKey","System.Windows.Forms.Control.IsKeyLocked","System::Windows::Forms::Control::IsKeyLocked","System.Windows.Forms.Control.IsMirrored","System::Windows::Forms::Control::IsMirrored","System.Windows.Forms.Control.IsMnemonic","System::Windows::Forms::Control::IsMnemonic","System.Windows.Forms.Control.KeyDown","System::Windows::Forms::Control::KeyDown","System.Windows.Forms.Control.KeyPress","System::Windows::Forms::Control::KeyPress","System.Windows.Forms.Control.KeyUp","System::Windows::Forms::Control::KeyUp","System.Windows.Forms.Control.Layout","System::Windows::Forms::Control::Layout","System.Windows.Forms.Control.LayoutEngine","System::Windows::Forms::Control::LayoutEngine","System.Windows.Forms.Control.Leave","System::Windows::Forms::Control::Leave","System.Windows.Forms.Control.Left","System::Windows::Forms::Control::Left","System.Windows.Forms.Control.Location","System::Windows::Forms::Control::Location","System.Windows.Forms.Control.LocationChanged","System::Windows::Forms::Control::LocationChanged","System.Windows.Forms.Control.LostFocus","System::Windows::Forms::Control::LostFocus","System.Windows.Forms.Control.Margin","System::Windows::Forms::Control::Margin","System.Windows.Forms.Control.MarginChanged","System::Windows::Forms::Control::MarginChanged","System.Windows.Forms.Control.MaximumSize","System::Windows::Forms::Control::MaximumSize","System.Windows.Forms.Control.MinimumSize","System::Windows::Forms::Control::MinimumSize","System.Windows.Forms.Control.ModifierKeys","System::Windows::Forms::Control::ModifierKeys","System.Windows.Forms.Control.MouseButtons","System::Windows::Forms::Control::MouseButtons","System.Windows.Forms.Control.MouseCaptureChanged","System::Windows::Forms::Control::MouseCaptureChanged","System.Windows.Forms.Control.MouseClick","System::Windows::Forms::Control::MouseClick","System.Windows.Forms.Control.MouseDoubleClick","System::Windows::Forms::Control::MouseDoubleClick","System.Windows.Forms.Control.MouseDown","System::Windows::Forms::Control::MouseDown","System.Windows.Forms.Control.MouseEnter","System::Windows::Forms::Control::MouseEnter","System.Windows.Forms.Control.MouseHover","System::Windows::Forms::Control::MouseHover","System.Windows.Forms.Control.MouseLeave","System::Windows::Forms::Control::MouseLeave","System.Windows.Forms.Control.MouseMove","System::Windows::Forms::Control::MouseMove","System.Windows.Forms.Control.MousePosition","System::Windows::Forms::Control::MousePosition","System.Windows.Forms.Control.MouseUp","System::Windows::Forms::Control::MouseUp","System.Windows.Forms.Control.MouseWheel","System::Windows::Forms::Control::MouseWheel","System.Windows.Forms.Control.Move","System::Windows::Forms::Control::Move","System.Windows.Forms.Control.Name","System::Windows::Forms::Control::Name","System.Windows.Forms.Control.NotifyInvalidate","System::Windows::Forms::Control::NotifyInvalidate","System.Windows.Forms.Control.OnAutoSizeChanged","System::Windows::Forms::Control::OnAutoSizeChanged","System.Windows.Forms.Control.OnBackColorChanged","System::Windows::Forms::Control::OnBackColorChanged","System.Windows.Forms.Control.OnBackgroundImageChanged","System::Windows::Forms::Control::OnBackgroundImageChanged","System.Windows.Forms.Control.OnBackgroundImageLayoutChanged","System::Windows::Forms::Control::OnBackgroundImageLayoutChanged","System.Windows.Forms.Control.OnBindingContextChanged","System::Windows::Forms::Control::OnBindingContextChanged","System.Windows.Forms.Control.OnCausesValidationChanged","System::Windows::Forms::Control::OnCausesValidationChanged","System.Windows.Forms.Control.OnChangeUICues","System::Windows::Forms::Control::OnChangeUICues","System.Windows.Forms.Control.OnClick","System::Windows::Forms::Control::OnClick","System.Windows.Forms.Control.OnClientSizeChanged","System::Windows::Forms::Control::OnClientSizeChanged","System.Windows.Forms.Control.OnContextMenuChanged","System::Windows::Forms::Control::OnContextMenuChanged","System.Windows.Forms.Control.OnContextMenuStripChanged","System::Windows::Forms::Control::OnContextMenuStripChanged","System.Windows.Forms.Control.OnControlAdded","System::Windows::Forms::Control::OnControlAdded","System.Windows.Forms.Control.OnControlRemoved","System::Windows::Forms::Control::OnControlRemoved","System.Windows.Forms.Control.OnCreateControl","System::Windows::Forms::Control::OnCreateControl","System.Windows.Forms.Control.OnCursorChanged","System::Windows::Forms::Control::OnCursorChanged","System.Windows.Forms.Control.OnDockChanged","System::Windows::Forms::Control::OnDockChanged","System.Windows.Forms.Control.OnDoubleClick","System::Windows::Forms::Control::OnDoubleClick","System.Windows.Forms.Control.OnDragDrop","System::Windows::Forms::Control::OnDragDrop","System.Windows.Forms.Control.OnDragEnter","System::Windows::Forms::Control::OnDragEnter","System.Windows.Forms.Control.OnDragLeave","System::Windows::Forms::Control::OnDragLeave","System.Windows.Forms.Control.OnDragOver","System::Windows::Forms::Control::OnDragOver","System.Windows.Forms.Control.OnEnabledChanged","System::Windows::Forms::Control::OnEnabledChanged","System.Windows.Forms.Control.OnEnter","System::Windows::Forms::Control::OnEnter","System.Windows.Forms.Control.OnFontChanged","System::Windows::Forms::Control::OnFontChanged","System.Windows.Forms.Control.OnForeColorChanged","System::Windows::Forms::Control::OnForeColorChanged","System.Windows.Forms.Control.OnGiveFeedback","System::Windows::Forms::Control::OnGiveFeedback","System.Windows.Forms.Control.OnGotFocus","System::Windows::Forms::Control::OnGotFocus","System.Windows.Forms.Control.OnHandleCreated","System::Windows::Forms::Control::OnHandleCreated","System.Windows.Forms.Control.OnHandleDestroyed","System::Windows::Forms::Control::OnHandleDestroyed","System.Windows.Forms.Control.OnHelpRequested","System::Windows::Forms::Control::OnHelpRequested","System.Windows.Forms.Control.OnImeModeChanged","System::Windows::Forms::Control::OnImeModeChanged","System.Windows.Forms.Control.OnInvalidated","System::Windows::Forms::Control::OnInvalidated","System.Windows.Forms.Control.OnKeyDown","System::Windows::Forms::Control::OnKeyDown","System.Windows.Forms.Control.OnKeyPress","System::Windows::Forms::Control::OnKeyPress","System.Windows.Forms.Control.OnKeyUp","System::Windows::Forms::Control::OnKeyUp","System.Windows.Forms.Control.OnLayout","System::Windows::Forms::Control::OnLayout","System.Windows.Forms.Control.OnLeave","System::Windows::Forms::Control::OnLeave","System.Windows.Forms.Control.OnLocationChanged","System::Windows::Forms::Control::OnLocationChanged","System.Windows.Forms.Control.OnLostFocus","System::Windows::Forms::Control::OnLostFocus","System.Windows.Forms.Control.OnMarginChanged","System::Windows::Forms::Control::OnMarginChanged","System.Windows.Forms.Control.OnMouseCaptureChanged","System::Windows::Forms::Control::OnMouseCaptureChanged","System.Windows.Forms.Control.OnMouseClick","System::Windows::Forms::Control::OnMouseClick","System.Windows.Forms.Control.OnMouseDoubleClick","System::Windows::Forms::Control::OnMouseDoubleClick","System.Windows.Forms.Control.OnMouseDown","System::Windows::Forms::Control::OnMouseDown","System.Windows.Forms.Control.OnMouseEnter","System::Windows::Forms::Control::OnMouseEnter","System.Windows.Forms.Control.OnMouseHover","System::Windows::Forms::Control::OnMouseHover","System.Windows.Forms.Control.OnMouseLeave","System::Windows::Forms::Control::OnMouseLeave","System.Windows.Forms.Control.OnMouseMove","System::Windows::Forms::Control::OnMouseMove","System.Windows.Forms.Control.OnMouseUp","System::Windows::Forms::Control::OnMouseUp","System.Windows.Forms.Control.OnMouseWheel","System::Windows::Forms::Control::OnMouseWheel","System.Windows.Forms.Control.OnMove","System::Windows::Forms::Control::OnMove","System.Windows.Forms.Control.OnNotifyMessage","System::Windows::Forms::Control::OnNotifyMessage","System.Windows.Forms.Control.OnPaddingChanged","System::Windows::Forms::Control::OnPaddingChanged","System.Windows.Forms.Control.OnPaint","System::Windows::Forms::Control::OnPaint","System.Windows.Forms.Control.OnPaintBackground","System::Windows::Forms::Control::OnPaintBackground","System.Windows.Forms.Control.OnParentBackColorChanged","System::Windows::Forms::Control::OnParentBackColorChanged","System.Windows.Forms.Control.OnParentBackgroundImageChanged","System::Windows::Forms::Control::OnParentBackgroundImageChanged","System.Windows.Forms.Control.OnParentBindingContextChanged","System::Windows::Forms::Control::OnParentBindingContextChanged","System.Windows.Forms.Control.OnParentChanged","System::Windows::Forms::Control::OnParentChanged","System.Windows.Forms.Control.OnParentCursorChanged","System::Windows::Forms::Control::OnParentCursorChanged","System.Windows.Forms.Control.OnParentEnabledChanged","System::Windows::Forms::Control::OnParentEnabledChanged","System.Windows.Forms.Control.OnParentFontChanged","System::Windows::Forms::Control::OnParentFontChanged","System.Windows.Forms.Control.OnParentForeColorChanged","System::Windows::Forms::Control::OnParentForeColorChanged","System.Windows.Forms.Control.OnParentRightToLeftChanged","System::Windows::Forms::Control::OnParentRightToLeftChanged","System.Windows.Forms.Control.OnParentVisibleChanged","System::Windows::Forms::Control::OnParentVisibleChanged","System.Windows.Forms.Control.OnPreviewKeyDown","System::Windows::Forms::Control::OnPreviewKeyDown","System.Windows.Forms.Control.OnPrint","System::Windows::Forms::Control::OnPrint","System.Windows.Forms.Control.OnQueryContinueDrag","System::Windows::Forms::Control::OnQueryContinueDrag","System.Windows.Forms.Control.OnRegionChanged","System::Windows::Forms::Control::OnRegionChanged","System.Windows.Forms.Control.OnResize","System::Windows::Forms::Control::OnResize","System.Windows.Forms.Control.OnRightToLeftChanged","System::Windows::Forms::Control::OnRightToLeftChanged","System.Windows.Forms.Control.OnSizeChanged","System::Windows::Forms::Control::OnSizeChanged","System.Windows.Forms.Control.OnStyleChanged","System::Windows::Forms::Control::OnStyleChanged","System.Windows.Forms.Control.OnSystemColorsChanged","System::Windows::Forms::Control::OnSystemColorsChanged","System.Windows.Forms.Control.OnTabIndexChanged","System::Windows::Forms::Control::OnTabIndexChanged","System.Windows.Forms.Control.OnTabStopChanged","System::Windows::Forms::Control::OnTabStopChanged","System.Windows.Forms.Control.OnTextChanged","System::Windows::Forms::Control::OnTextChanged","System.Windows.Forms.Control.OnValidated","System::Windows::Forms::Control::OnValidated","System.Windows.Forms.Control.OnValidating","System::Windows::Forms::Control::OnValidating","System.Windows.Forms.Control.OnVisibleChanged","System::Windows::Forms::Control::OnVisibleChanged","System.Windows.Forms.Control.Padding","System::Windows::Forms::Control::Padding","System.Windows.Forms.Control.PaddingChanged","System::Windows::Forms::Control::PaddingChanged","System.Windows.Forms.Control.Paint","System::Windows::Forms::Control::Paint","System.Windows.Forms.Control.Parent","System::Windows::Forms::Control::Parent","System.Windows.Forms.Control.ParentChanged","System::Windows::Forms::Control::ParentChanged","System.Windows.Forms.Control.PerformLayout","System::Windows::Forms::Control::PerformLayout","System.Windows.Forms.Control.PointToClient","System::Windows::Forms::Control::PointToClient","System.Windows.Forms.Control.PointToScreen","System::Windows::Forms::Control::PointToScreen","System.Windows.Forms.Control.PreferredSize","System::Windows::Forms::Control::PreferredSize","System.Windows.Forms.Control.PreProcessControlMessage","System::Windows::Forms::Control::PreProcessControlMessage","System.Windows.Forms.Control.PreProcessMessage","System::Windows::Forms::Control::PreProcessMessage","System.Windows.Forms.Control.PreviewKeyDown","System::Windows::Forms::Control::PreviewKeyDown","System.Windows.Forms.Control.ProcessCmdKey","System::Windows::Forms::Control::ProcessCmdKey","System.Windows.Forms.Control.ProcessDialogChar","System::Windows::Forms::Control::ProcessDialogChar","System.Windows.Forms.Control.ProcessDialogKey","System::Windows::Forms::Control::ProcessDialogKey","System.Windows.Forms.Control.ProcessKeyEventArgs","System::Windows::Forms::Control::ProcessKeyEventArgs","System.Windows.Forms.Control.ProcessKeyMessage","System::Windows::Forms::Control::ProcessKeyMessage","System.Windows.Forms.Control.ProcessKeyPreview","System::Windows::Forms::Control::ProcessKeyPreview","System.Windows.Forms.Control.ProcessMnemonic","System::Windows::Forms::Control::ProcessMnemonic","System.Windows.Forms.Control.ProductName","System::Windows::Forms::Control::ProductName","System.Windows.Forms.Control.ProductVersion","System::Windows::Forms::Control::ProductVersion","System.Windows.Forms.Control.PropagatingImeMode","System::Windows::Forms::Control::PropagatingImeMode","System.Windows.Forms.Control.QueryAccessibilityHelp","System::Windows::Forms::Control::QueryAccessibilityHelp","System.Windows.Forms.Control.QueryContinueDrag","System::Windows::Forms::Control::QueryContinueDrag","System.Windows.Forms.Control.RaiseDragEvent","System::Windows::Forms::Control::RaiseDragEvent","System.Windows.Forms.Control.RaiseKeyEvent","System::Windows::Forms::Control::RaiseKeyEvent","System.Windows.Forms.Control.RaiseMouseEvent","System::Windows::Forms::Control::RaiseMouseEvent","System.Windows.Forms.Control.RaisePaintEvent","System::Windows::Forms::Control::RaisePaintEvent","System.Windows.Forms.Control.RecreateHandle","System::Windows::Forms::Control::RecreateHandle","System.Windows.Forms.Control.RecreatingHandle","System::Windows::Forms::Control::RecreatingHandle","System.Windows.Forms.Control.RectangleToClient","System::Windows::Forms::Control::RectangleToClient","System.Windows.Forms.Control.RectangleToScreen","System::Windows::Forms::Control::RectangleToScreen","System.Windows.Forms.Control.ReflectMessage","System::Windows::Forms::Control::ReflectMessage","System.Windows.Forms.Control.Refresh","System::Windows::Forms::Control::Refresh","System.Windows.Forms.Control.Region","System::Windows::Forms::Control::Region","System.Windows.Forms.Control.RegionChanged","System::Windows::Forms::Control::RegionChanged","System.Windows.Forms.Control.RenderRightToLeft","System::Windows::Forms::Control::RenderRightToLeft","System.Windows.Forms.Control.ResetBackColor","System::Windows::Forms::Control::ResetBackColor","System.Windows.Forms.Control.ResetBindings","System::Windows::Forms::Control::ResetBindings","System.Windows.Forms.Control.ResetCursor","System::Windows::Forms::Control::ResetCursor","System.Windows.Forms.Control.ResetFont","System::Windows::Forms::Control::ResetFont","System.Windows.Forms.Control.ResetForeColor","System::Windows::Forms::Control::ResetForeColor","System.Windows.Forms.Control.ResetImeMode","System::Windows::Forms::Control::ResetImeMode","System.Windows.Forms.Control.ResetMouseEventArgs","System::Windows::Forms::Control::ResetMouseEventArgs","System.Windows.Forms.Control.ResetRightToLeft","System::Windows::Forms::Control::ResetRightToLeft","System.Windows.Forms.Control.ResetText","System::Windows::Forms::Control::ResetText","System.Windows.Forms.Control.Resize","System::Windows::Forms::Control::Resize","System.Windows.Forms.Control.ResizeRedraw","System::Windows::Forms::Control::ResizeRedraw","System.Windows.Forms.Control.ResumeLayout","System::Windows::Forms::Control::ResumeLayout","System.Windows.Forms.Control.Right","System::Windows::Forms::Control::Right","System.Windows.Forms.Control.RightToLeft","System::Windows::Forms::Control::RightToLeft","System.Windows.Forms.Control.RightToLeftChanged","System::Windows::Forms::Control::RightToLeftChanged","System.Windows.Forms.Control.RtlTranslateAlignment","System::Windows::Forms::Control::RtlTranslateAlignment","System.Windows.Forms.Control.RtlTranslateContent","System::Windows::Forms::Control::RtlTranslateContent","System.Windows.Forms.Control.RtlTranslateHorizontal","System::Windows::Forms::Control::RtlTranslateHorizontal","System.Windows.Forms.Control.RtlTranslateLeftRight","System::Windows::Forms::Control::RtlTranslateLeftRight","System.Windows.Forms.Control.Scale","System::Windows::Forms::Control::Scale","System.Windows.Forms.Control.ScaleChildren","System::Windows::Forms::Control::ScaleChildren","System.Windows.Forms.Control.ScaleControl","System::Windows::Forms::Control::ScaleControl","System.Windows.Forms.Control.ScaleCore","System::Windows::Forms::Control::ScaleCore","System.Windows.Forms.Control.Select","System::Windows::Forms::Control::Select","System.Windows.Forms.Control.SelectNextControl","System::Windows::Forms::Control::SelectNextControl","System.Windows.Forms.Control.SendToBack","System::Windows::Forms::Control::SendToBack","System.Windows.Forms.Control.SetAutoSizeMode","System::Windows::Forms::Control::SetAutoSizeMode","System.Windows.Forms.Control.SetBounds","System::Windows::Forms::Control::SetBounds","System.Windows.Forms.Control.SetBoundsCore","System::Windows::Forms::Control::SetBoundsCore","System.Windows.Forms.Control.SetClientSizeCore","System::Windows::Forms::Control::SetClientSizeCore","System.Windows.Forms.Control.SetStyle","System::Windows::Forms::Control::SetStyle","System.Windows.Forms.Control.SetTopLevel","System::Windows::Forms::Control::SetTopLevel","System.Windows.Forms.Control.SetVisibleCore","System::Windows::Forms::Control::SetVisibleCore","System.Windows.Forms.Control.Show","System::Windows::Forms::Control::Show","System.Windows.Forms.Control.ShowFocusCues","System::Windows::Forms::Control::ShowFocusCues","System.Windows.Forms.Control.ShowKeyboardCues","System::Windows::Forms::Control::ShowKeyboardCues","System.Windows.Forms.Control.Site","System::Windows::Forms::Control::Site","System.Windows.Forms.Control.Size","System::Windows::Forms::Control::Size","System.Windows.Forms.Control.SizeChanged","System::Windows::Forms::Control::SizeChanged","System.Windows.Forms.Control.SizeFromClientSize","System::Windows::Forms::Control::SizeFromClientSize","System.Windows.Forms.Control.StyleChanged","System::Windows::Forms::Control::StyleChanged","System.Windows.Forms.Control.SuspendLayout","System::Windows::Forms::Control::SuspendLayout","System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragDrop","System::Windows::Forms::Control::System#Windows#Forms#IDropTarget#OnDragDrop","System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragEnter","System::Windows::Forms::Control::System#Windows#Forms#IDropTarget#OnDragEnter","System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragLeave","System::Windows::Forms::Control::System#Windows#Forms#IDropTarget#OnDragLeave","System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragOver","System::Windows::Forms::Control::System#Windows#Forms#IDropTarget#OnDragOver","System.Windows.Forms.Control.SystemColorsChanged","System::Windows::Forms::Control::SystemColorsChanged","System.Windows.Forms.Control.TabIndex","System::Windows::Forms::Control::TabIndex","System.Windows.Forms.Control.TabIndexChanged","System::Windows::Forms::Control::TabIndexChanged","System.Windows.Forms.Control.TabStop","System::Windows::Forms::Control::TabStop","System.Windows.Forms.Control.TabStopChanged","System::Windows::Forms::Control::TabStopChanged","System.Windows.Forms.Control.Tag","System::Windows::Forms::Control::Tag","System.Windows.Forms.Control.Text","System::Windows::Forms::Control::Text","System.Windows.Forms.Control.TextChanged","System::Windows::Forms::Control::TextChanged","System.Windows.Forms.Control.Top","System::Windows::Forms::Control::Top","System.Windows.Forms.Control.TopLevelControl","System::Windows::Forms::Control::TopLevelControl","System.Windows.Forms.Control.Update","System::Windows::Forms::Control::Update","System.Windows.Forms.Control.UpdateBounds","System::Windows::Forms::Control::UpdateBounds","System.Windows.Forms.Control.UpdateStyles","System::Windows::Forms::Control::UpdateStyles","System.Windows.Forms.Control.UpdateZOrder","System::Windows::Forms::Control::UpdateZOrder","System.Windows.Forms.Control.UseWaitCursor","System::Windows::Forms::Control::UseWaitCursor","System.Windows.Forms.Control.Validated","System::Windows::Forms::Control::Validated","System.Windows.Forms.Control.Validating","System::Windows::Forms::Control::Validating","System.Windows.Forms.Control.Visible","System::Windows::Forms::Control::Visible","System.Windows.Forms.Control.VisibleChanged","System::Windows::Forms::Control::VisibleChanged","System.Windows.Forms.Control.Width","System::Windows::Forms::Control::Width","System.Windows.Forms.Control.WindowTarget","System::Windows::Forms::Control::WindowTarget","System.Windows.Forms.Control.WndProc","System::Windows::Forms::Control::WndProc"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"5d8df2ba-8e1d-9267-1c8c-7264fae78cc5","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Windows.Forms\\Control.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows.Forms/Control.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Control class | Microsoft Docs","_op_ogTitle":"Control class","description":"Defines the base class for controls, which are components with visual representation.\n","toc_asset_id":"_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.Control","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.forms.control","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.forms.control","fileRelativePath":"System.Windows.Forms.Control.html"},"themesRelativePathToOutputRoot":"_themes/"}