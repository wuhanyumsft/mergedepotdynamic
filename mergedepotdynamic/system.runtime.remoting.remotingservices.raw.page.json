{"content":"    \r\n    <h1 id=\"System_Runtime_Remoting_RemotingServices\">\r\n      <span class=\"lang-csharp\">RemotingServices</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides several methods for using and publishing remoted objects and proxies. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic static class RemotingServices</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">RemotingServices</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Unless you are a service provider dealing with issues such as activation, lifetime management, or transactions, you do not need to distinguish between proxy references and object references. The remoting infrastructure uses transparent proxies that give the impression that the remote objects reside in the client&#39;s space. Proxies achieve this by forwarding calls made on them to the real objects at remote locations.</p>\n\r\n    \r\n    \r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_RemotingServices_Connect_System_Type_System_String_\" data-linktype=\"self-bookmark\">Connect(Type,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a proxy for a well-known object, given the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> and URL.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_RemotingServices_Connect_System_Type_System_String_System_Object_\" data-linktype=\"self-bookmark\">Connect(Type,String,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a proxy for a well-known object, given the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>, URL, and channel-specific data.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_RemotingServices_Disconnect_System_MarshalByRefObject_\" data-linktype=\"self-bookmark\">Disconnect(MarshalByRefObject)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Stops an object from receiving any further messages through the registered remoting channels.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_RemotingServices_ExecuteMessage_System_MarshalByRefObject_System_Runtime_Remoting_Messaging_IMethodCallMessage_\" data-linktype=\"self-bookmark\">ExecuteMessage(MarshalByRefObject,IMethodCallMessage)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Connects to the specified remote object, and executes the provided <a class=\"xref\" href=\"system.runtime.remoting.messaging.imethodcallmessage\" data-linktype=\"relative-path\">IMethodCallMessage</a> on it.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_RemotingServices_GetEnvoyChainForProxy_System_MarshalByRefObject_\" data-linktype=\"self-bookmark\">GetEnvoyChainForProxy(MarshalByRefObject)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a chain of envoy sinks that should be used when sending messages to the remote object represented by the specified proxy.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_RemotingServices_GetLifetimeService_System_MarshalByRefObject_\" data-linktype=\"self-bookmark\">GetLifetimeService(MarshalByRefObject)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a lifetime service object that controls the lifetime policy of the specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_RemotingServices_GetMethodBaseFromMethodMessage_System_Runtime_Remoting_Messaging_IMethodMessage_\" data-linktype=\"self-bookmark\">GetMethodBaseFromMethodMessage(IMethodMessage)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the method base from the given <a class=\"xref\" href=\"system.runtime.remoting.messaging.imethodmessage\" data-linktype=\"relative-path\">IMethodMessage</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_RemotingServices_GetObjectData_System_Object_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">GetObjectData(Object,SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Serializes the specified marshal by reference object into the provided <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_RemotingServices_GetObjectUri_System_MarshalByRefObject_\" data-linktype=\"self-bookmark\">GetObjectUri(MarshalByRefObject)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the URI for the specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_RemotingServices_GetObjRefForProxy_System_MarshalByRefObject_\" data-linktype=\"self-bookmark\">GetObjRefForProxy(MarshalByRefObject)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> that represents the remote object from the specified proxy.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_RemotingServices_GetRealProxy_System_Object_\" data-linktype=\"self-bookmark\">GetRealProxy(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the real proxy backing the specified transparent proxy.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_RemotingServices_GetServerTypeForUri_System_String_\" data-linktype=\"self-bookmark\">GetServerTypeForUri(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of the object with the specified URI.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_RemotingServices_GetSessionIdForMethodMessage_System_Runtime_Remoting_Messaging_IMethodMessage_\" data-linktype=\"self-bookmark\">GetSessionIdForMethodMessage(IMethodMessage)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves a session ID for a message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_RemotingServices_IsMethodOverloaded_System_Runtime_Remoting_Messaging_IMethodMessage_\" data-linktype=\"self-bookmark\">IsMethodOverloaded(IMethodMessage)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a Boolean value that indicates whether the method in the given message is overloaded.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_RemotingServices_IsObjectOutOfAppDomain_System_Object_\" data-linktype=\"self-bookmark\">IsObjectOutOfAppDomain(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a Boolean value that indicates whether the object specified by the given transparent proxy is contained in a different application domain than the object that called the current method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_RemotingServices_IsObjectOutOfContext_System_Object_\" data-linktype=\"self-bookmark\">IsObjectOutOfContext(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a Boolean value that indicates whether the object represented by the given proxy is contained in a different context than the object that called the current method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_RemotingServices_IsOneWay_System_Reflection_MethodBase_\" data-linktype=\"self-bookmark\">IsOneWay(MethodBase)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a Boolean value that indicates whether the client that called the method specified in the given message is waiting for the server to finish processing the method before continuing execution.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_RemotingServices_IsTransparentProxy_System_Object_\" data-linktype=\"self-bookmark\">IsTransparentProxy(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a Boolean value that indicates whether the given object is a transparent proxy or a real object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_RemotingServices_LogRemotingStage_System_Int32_\" data-linktype=\"self-bookmark\">LogRemotingStage(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Logs the stage in a remoting exchange to an external debugger.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_RemotingServices_Marshal_System_MarshalByRefObject_\" data-linktype=\"self-bookmark\">Marshal(MarshalByRefObject)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Takes a <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>, registers it with the remoting infrastructure, and converts it into an instance of the <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_RemotingServices_Marshal_System_MarshalByRefObject_System_String_\" data-linktype=\"self-bookmark\">Marshal(MarshalByRefObject,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the given <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a> into an instance of the <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> class with the specified URI.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_RemotingServices_Marshal_System_MarshalByRefObject_System_String_System_Type_\" data-linktype=\"self-bookmark\">Marshal(MarshalByRefObject,String,Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Takes a <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a> and converts it into an instance of the <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> class with the specified URI, and the provided <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_RemotingServices_SetObjectUriForMarshal_System_MarshalByRefObject_System_String_\" data-linktype=\"self-bookmark\">SetObjectUriForMarshal(MarshalByRefObject,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the URI for the subsequent call to the <span class=\"xref\">stem.Runtime.Remoting.RemotingServices.Marshal*</span> method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_RemotingServices_Unmarshal_System_Runtime_Remoting_ObjRef_\" data-linktype=\"self-bookmark\">Unmarshal(ObjRef)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Takes a <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> and creates a proxy object out of it.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_RemotingServices_Unmarshal_System_Runtime_Remoting_ObjRef_System_Boolean_\" data-linktype=\"self-bookmark\">Unmarshal(ObjRef,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Takes a <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> and creates a proxy object out of it, refining it to the type on the server.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_RemotingServices_Connect_System_Type_System_String_\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_RemotingServices_Connect_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Connect(Type,String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a proxy for a well-known object, given the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> and URL.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object Connect (Type classToProxy, string url);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>classToProxy</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of a well-known object on the server end to which you want to connect.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>url</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The URL of the server class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>A proxy to the remote object that points to an endpoint served by the specified well-known object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller does not have permission to configure remoting types and channels.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned proxy object points to an endpoint served by the specified well-known object. No messages are sent over the network until a method is called on the proxy.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the Connect method to create a proxy to a well-known object.  </p>\n<pre><code class=\"lang-cpp\" name=\"RemotingServices.BasicSample#1\">      Console::WriteLine( &quot;Connecting to SampleNamespace::SampleWellKnown.&quot; );\n      SampleWellKnown ^ proxy = dynamic_cast&lt;SampleWellKnown^&gt;(RemotingServices::Connect( SampleWellKnown::typeid, const_cast&lt;String^&gt;(SERVER_URL) ));\n      Console::WriteLine( &quot;Connected to SampleWellKnown&quot; );\n\n      // Verifies that the Object* reference is to a transparent proxy.\n      if ( RemotingServices::IsTransparentProxy( proxy ) )\n            Console::WriteLine( &quot;proxy is a reference to a transparent proxy.&quot; );\n      else\n            Console::WriteLine( &quot;proxy is not a transparent proxy.  This is unexpected.&quot; );\n\n      // Calls a method on the server Object*.\n      Console::WriteLine( &quot;proxy-&gt;Add returned {0}.&quot;, proxy-&gt;Add( 2, 3 ) );\n</code></pre><pre><code class=\"lang-cs\" name=\"RemotingServices.BasicSample#1\">      Console.WriteLine(&quot;Connecting to SampleNamespace.SampleWellKnown.&quot;);\n      \n      SampleWellKnown proxy = \n         (SampleWellKnown)RemotingServices.Connect(typeof(SampleWellKnown), SERVER_URL);\n\n      Console.WriteLine(&quot;Connected to SampleWellKnown&quot;);\n      \n      // Verifies that the object reference is to a transparent proxy.\n      if (RemotingServices.IsTransparentProxy(proxy))\n          Console.WriteLine(&quot;proxy is a reference to a transparent proxy.&quot;);\n      else\n          Console.WriteLine(&quot;proxy is not a transparent proxy.  This is unexpected.&quot;);\n      \n      // Calls a method on the server object.\n      Console.WriteLine(&quot;proxy.Add returned {0}.&quot;, proxy.Add(2, 3));\n</code></pre><pre><code class=\"lang-vb\" name=\"RemotingServices.BasicSample#1\">      Console.WriteLine(&quot;Connecting to SampleNamespace.SampleWellKnown.&quot;)\n      \n      Dim proxy As SampleWellKnown = _\n         CType(RemotingServices.Connect(GetType(SampleWellKnown), SERVER_URL), SampleWellKnown)\n      \n      Console.WriteLine(&quot;Connected to SampleWellKnown&quot;)\n      \n      &#39; Verifies that the object reference is to a transparent proxy.\n      If RemotingServices.IsTransparentProxy(proxy) Then\n         Console.WriteLine(&quot;proxy is a reference to a transparent proxy.&quot;)\n      Else\n         Console.WriteLine(&quot;proxy is not a transparent proxy.  This is unexpected.&quot;)\n      End If\n      \n      &#39; Calls a method on the server object.\n      Console.WriteLine(&quot;proxy.Add returned {0}.&quot;, proxy.Add(2, 3))\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_RemotingServices_Connect_System_Type_System_String_System_Object_\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_RemotingServices_Connect_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Connect(Type,String,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a proxy for a well-known object, given the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>, URL, and channel-specific data.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object Connect (Type classToProxy, string url, object data);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>classToProxy</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of the well-known object to which you want to connect.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>url</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The URL of the well-known object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>data</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Channel specific data. Can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>A proxy that points to an endpoint that is served by the requested well-known object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller does not have permission to configure remoting types and channels.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned proxy object points to an endpoint served by the specified well-known object. No messages are sent over the network until a method is called on the proxy.  </p>\n<p> The <code>data</code> object is used to communicate information to the channel, and is passed to the <a class=\"xref\" href=\"system.runtime.remoting.channels.ichannelsender#System_Runtime_Remoting_Channels_IChannelSender_CreateMessageSink_\" data-linktype=\"relative-path\">CreateMessageSink</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_RemotingServices_Disconnect_System_MarshalByRefObject_\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_RemotingServices_Disconnect_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Disconnect(MarshalByRefObject)</div>        \r\n          </div>\r\n    \r\n            <p>Stops an object from receiving any further messages through the registered remoting channels.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool Disconnect (MarshalByRefObject obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Object to disconnect from its channel.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the object was disconnected from the registered remoting channels successfully; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>obj</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>obj</code> parameter is a proxy.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller does not have permission to configure remoting types and channels.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the Disconnect method to disconnect an object from the remoting channels.  </p>\n<pre><code class=\"lang-cpp\" name=\"RemotingServices.BasicSample#2\">   TcpChannel^ channel = gcnew TcpChannel( 9000 );\n   ChannelServices::RegisterChannel( channel );\n   SampleWellKnown ^ objectWellKnown = gcnew SampleWellKnown;\n\n   // After the channel is registered, the Object* needs to be registered\n   // with the remoting infrastructure.  So, Marshal is called.\n   ObjRef^ objrefWellKnown = RemotingServices::Marshal( objectWellKnown, &quot;objectWellKnownUri&quot; );\n   Console::WriteLine( &quot;An instance of SampleWellKnown type is published at {0}.&quot;, objrefWellKnown-&gt;URI );\n   Console::WriteLine( &quot;Press enter to unregister SampleWellKnown, so that it is no longer available on this channel.&quot; );\n   Console::ReadLine();\n   RemotingServices::Disconnect( objectWellKnown );\n   Console::WriteLine( &quot;Press enter to end the server process.&quot; );\n   Console::ReadLine();\n</code></pre><pre><code class=\"lang-cs\" name=\"RemotingServices.BasicSample#2\">      TcpChannel channel = new TcpChannel(9000);\n      ChannelServices.RegisterChannel(channel);\n\n      SampleWellKnown objectWellKnown = new SampleWellKnown();\n      \n      // After the channel is registered, the object needs to be registered\n      // with the remoting infrastructure.  So, Marshal is called.\n      ObjRef objrefWellKnown = RemotingServices.Marshal(objectWellKnown, &quot;objectWellKnownUri&quot;);\n      Console.WriteLine(&quot;An instance of SampleWellKnown type is published at {0}.&quot;, objrefWellKnown.URI);\n\n      Console.WriteLine(&quot;Press enter to unregister SampleWellKnown, so that it is no longer available on this channel.&quot;);\n      Console.ReadLine();\n      RemotingServices.Disconnect(objectWellKnown);\n\n      Console.WriteLine(&quot;Press enter to end the server process.&quot;);\n      Console.ReadLine();\n</code></pre><pre><code class=\"lang-vb\" name=\"RemotingServices.BasicSample#2\">      Dim channel As New TcpChannel(9000)\n      ChannelServices.RegisterChannel(channel)\n      \n      Dim objectWellKnown As New SampleWellKnown()\n      &#39; After the channel is registered, the object needs to be registered\n      &#39; with the remoting infrastructure.  So, Marshal is called.\n      Dim objrefWellKnown As ObjRef = RemotingServices.Marshal(objectWellKnown, &quot;objectWellKnownUri&quot;)\n      Console.WriteLine(&quot;An instance of SampleWellKnown type is published at {0}.&quot;, objrefWellKnown.URI)\n      \n      Console.WriteLine(&quot;Press enter to unregister SampleWellKnown, so that it is no longer available on this channel.&quot;)\n      Console.ReadLine()\n      RemotingServices.Disconnect(objectWellKnown)\n      Console.WriteLine(&quot;Press enter to end the server process.&quot;)\n      Console.ReadLine()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_RemotingServices_ExecuteMessage_System_MarshalByRefObject_System_Runtime_Remoting_Messaging_IMethodCallMessage_\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_RemotingServices_ExecuteMessage_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExecuteMessage(MarshalByRefObject,IMethodCallMessage)</div>        \r\n          </div>\r\n    \r\n            <p>Connects to the specified remote object, and executes the provided <a class=\"xref\" href=\"system.runtime.remoting.messaging.imethodcallmessage\" data-linktype=\"relative-path\">IMethodCallMessage</a> on it.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Runtime.Remoting.Messaging.IMethodReturnMessage ExecuteMessage (MarshalByRefObject target, System.Runtime.Remoting.Messaging.IMethodCallMessage reqMsg);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The remote object whose method you want to call.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>reqMsg</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.messaging.imethodcallmessage\" data-linktype=\"relative-path\">IMethodCallMessage</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A method call message to the specified remote object&#39;s method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.messaging.imethodreturnmessage\" data-linktype=\"relative-path\">IMethodReturnMessage</a></div>\r\n                  </div>\r\n                  <p>The response of the remote method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller does not have infrastructure permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.remotingexception\" data-linktype=\"relative-path\">RemotingException</a></div>\r\n                  </div>\r\n                  <p>The method was called from a context other than the native context of the object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The current method is used in special cases by the server to forward the specified method call to another, possibly remote, object. This method can be called only when the caller is in the appropriate context.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the ExecuteMessage method to forward method calls to remote objects.  </p>\n<pre><code class=\"lang-cs\" name=\"RemotingServices.ExecuteMessage#1\">   [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)]\n   public void ProcessMessageStart(IMessage requestMessage, bool bClientSide, bool bAsyncCall) {\n      \n      Console.WriteLine(&quot;<br>ProcessMessageStart&quot;);\n      Console.WriteLine(&quot;requestMessage = {0}&quot;, requestMessage);\n      \n      try {\n         Console.WriteLine(&quot;SessionId = {0}.&quot;,\n             RemotingServices.GetSessionIdForMethodMessage((IMethodMessage)requestMessage));\n      }\n      catch (InvalidCastException) {\n         Console.WriteLine(&quot;The requestMessage is not an IMethodMessage.&quot;);\n      }\n\n      IMethodCallMessage requestMethodCallMessage;\n      \n      try {\n         requestMethodCallMessage = (IMethodCallMessage)requestMessage;\n         // Prints the details of the IMethodCallMessage to the console.\n         Console.WriteLine(&quot;<br>MethodCall details&quot;);\n         Console.WriteLine(&quot;Uri = {0}&quot;, requestMethodCallMessage.Uri);\n         Console.WriteLine(&quot;TypeName = {0}&quot;, requestMethodCallMessage.TypeName);\n         Console.WriteLine(&quot;MethodName = {0}&quot;, requestMethodCallMessage.MethodName);\n         Console.WriteLine(&quot;ArgCount = {0}&quot;, requestMethodCallMessage.ArgCount);\n         \n         Console.WriteLine(&quot;MethodCall.Args&quot;);\n         foreach(object o in requestMethodCallMessage.Args)\n             Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, o);\n         \n         // Sends this method call message to another server to replicate\n         // the call at the second server.\n         if (requestMethodCallMessage.Uri == replicatedServiceUri) {\n            \n            SampleService replicationService = \n               (SampleService)Activator.GetObject(typeof(SampleService), \n               replicationServerUrl + replicatedServiceUri);\n            \n            IMethodReturnMessage returnMessage = \n               RemotingServices.ExecuteMessage(replicationService, requestMethodCallMessage);\n            \n            // Prints the results of the method call stored in the IMethodReturnMessage.\n            Console.WriteLine(&quot;<br>Message returned by ExecuteMessage.&quot;);\n            Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Exception = {0}&quot;, returnMessage.Exception);\n            Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;ReturnValue = {0}&quot;, returnMessage.ReturnValue);\n            Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;OutArgCount = {0}&quot;, returnMessage.OutArgCount);\n            Console.WriteLine(&quot;Return message OutArgs&quot;);\n            \n            foreach(object o in requestMethodCallMessage.Args)\n               Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, o);\n         }\n      }\n      catch (InvalidCastException) {\n          Console.WriteLine(&quot;The requestMessage is not a MethodCall&quot;);\n      }\n   }\n</code></pre><pre><code class=\"lang-cpp\" name=\"RemotingServices.ExecuteMessage#1\">   [System::Security::Permissions::SecurityPermissionAttribute\n   (System::Security::Permissions::SecurityAction::LinkDemand, \n   Flags=System::Security::Permissions::SecurityPermissionFlag::Infrastructure)]\n   virtual void ProcessMessageStart( IMessage^ requestMessage, bool /*bClientSide*/, bool /*bAsyncCall*/ )\n   {\n      Console::WriteLine( &quot;<br>ProcessMessageStart&quot; );\n      Console::WriteLine( &quot;requestMessage = {0}&quot;, requestMessage );\n      try\n      {\n         Console::WriteLine( &quot;SessionId = {0}.&quot;, RemotingServices::GetSessionIdForMethodMessage( dynamic_cast&lt;IMethodMessage^&gt;(requestMessage) ) );\n      }\n      catch ( InvalidCastException^ ) \n      {\n         Console::WriteLine( &quot;The requestMessage is not an IMethodMessage*.&quot; );\n      }\n\n      IMethodCallMessage^ requestMethodCallMessage;\n      try\n      {\n         requestMethodCallMessage = dynamic_cast&lt;IMethodCallMessage^&gt;(requestMessage);\n\n         // Prints the details of the IMethodCallMessage* to the console.\n         Console::WriteLine( &quot;<br>MethodCall details&quot; );\n         Console::WriteLine( &quot;Uri = {0}&quot;, requestMethodCallMessage-&gt;Uri );\n         Console::WriteLine( &quot;TypeName = {0}&quot;, requestMethodCallMessage-&gt;TypeName );\n         Console::WriteLine( &quot;MethodName = {0}&quot;, requestMethodCallMessage-&gt;MethodName );\n         Console::WriteLine( &quot;ArgCount = {0}&quot;, requestMethodCallMessage-&gt;ArgCount );\n         Console::WriteLine( &quot;MethodCall::Args&quot; );\n         IEnumerator^ myEnum = requestMethodCallMessage-&gt;Args-&gt;GetEnumerator();\n         while ( myEnum-&gt;MoveNext() )\n         {\n            Object^ o = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n            Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, o );\n\n            // Sends this method call message to another server to replicate\n            // the call at the second server.\n            if ( requestMethodCallMessage-&gt;Uri == replicatedServiceUri )\n            {\n               String^ repSvr = String::Format(  &quot;{0}{1}&quot;, const_cast&lt;String^&gt;(replicationServerUrl), const_cast&lt;String^&gt;(replicatedServiceUri) );\n               SampleService^ replicationService = dynamic_cast&lt;SampleService^&gt;(Activator::GetObject( SampleService::typeid, repSvr ));\n               IMethodReturnMessage^ returnMessage = RemotingServices::ExecuteMessage( replicationService, requestMethodCallMessage );\n\n               // Prints the results of the method call stored in the IMethodReturnMessage*.\n               Console::WriteLine( &quot;<br>Message returned by ExecuteMessage.&quot; );\n               Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;Exception = {0}&quot;, returnMessage-&gt;Exception );\n               Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;ReturnValue = {0}&quot;, returnMessage-&gt;ReturnValue );\n               Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;OutArgCount = {0}&quot;, returnMessage-&gt;OutArgCount );\n               Console::WriteLine( &quot;Return message OutArgs&quot; );\n               IEnumerator^ myEnum = requestMethodCallMessage-&gt;Args-&gt;GetEnumerator();\n               while ( myEnum-&gt;MoveNext() )\n               {\n                  Object^ o = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n                  Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, o );\n               }\n            }\n         }\n      }\n      catch ( InvalidCastException^ ) \n      {\n         Console::WriteLine( &quot;The requestMessage is not a MethodCall&quot; );\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"RemotingServices.ExecuteMessage#1\">   &lt;SecurityPermission(SecurityAction.LinkDemand, Flags := SecurityPermissionFlag.Infrastructure)&gt; _\n   Public Sub ProcessMessageStart(requestMessage As IMessage, bClientSide As Boolean, bAsyncCall As Boolean) Implements IDynamicMessageSink.ProcessMessageStart\n   \n      Console.WriteLine(ControlChars.Cr + &quot;ProcessMessageStart&quot;)\n      Console.WriteLine(&quot;requestMessage = {0}&quot;, requestMessage)\n      \n      Try\n         Console.WriteLine(&quot;SessionId = {0}.&quot;, RemotingServices.GetSessionIdForMethodMessage(CType(requestMessage, IMethodMessage)))\n      Catch e As InvalidCastException\n         Console.WriteLine(&quot;The requestMessage is not an IMethodMessage.&quot;)\n      End Try\n      \n      Dim requestMethodCallMessage As IMethodCallMessage\n      \n      Try\n         requestMethodCallMessage = CType(requestMessage, MethodCall)\n         \n         &#39; Prints the details of the IMethodCallMessage to the console\n         Console.WriteLine(ControlChars.Cr + &quot;MethodCall details&quot;)\n         Console.WriteLine(&quot;Uri = {0}&quot;, requestMethodCallMessage.Uri)\n         Console.WriteLine(&quot;TypeName = {0}&quot;, requestMethodCallMessage.TypeName)\n         Console.WriteLine(&quot;MethodName = {0}&quot;, requestMethodCallMessage.MethodName)\n         Console.WriteLine(&quot;ArgCount = {0}&quot;, requestMethodCallMessage.ArgCount)\n         Console.WriteLine(&quot;MethodCall.Args&quot;)\n         \n         Dim o As Object\n         For Each o In  requestMethodCallMessage.Args\n            Console.WriteLine(ControlChars.Tab + &quot;{0}&quot;, o)\n         Next o \n         \n         &#39; Sends this method call message to another server to replicate\n         &#39; the call at the second server\n         If requestMethodCallMessage.Uri = replicatedServiceUri Then\n            \n            Dim replicationService As SampleService = CType(Activator.GetObject(GetType(SampleService), replicationServerUrl + replicatedServiceUri), SampleService)\n            Dim returnMessage As IMethodReturnMessage = RemotingServices.ExecuteMessage(replicationService, requestMethodCallMessage)\n            \n            &#39; Prints the results of the method call stored in the IMethodReturnMessage.\n            Console.WriteLine(ControlChars.Cr + &quot;Message returned by ExecuteMessage.&quot;)\n            Console.WriteLine(ControlChars.Tab + &quot;Exception = {0}&quot;, returnMessage.Exception)\n            Console.WriteLine(ControlChars.Tab + &quot;ReturnValue = {0}&quot;, returnMessage.ReturnValue)\n            Console.WriteLine(ControlChars.Tab + &quot;OutArgCount = {0}&quot;, returnMessage.OutArgCount)\n            Console.WriteLine(&quot;Return message OutArgs&quot;)\n            For Each o In  requestMethodCallMessage.Args\n               Console.WriteLine(ControlChars.Tab + &quot;{0}&quot;, o)\n            Next o\n            \n         End If\n         \n      Catch e As InvalidCastException\n         Console.WriteLine(&quot;The requestMessage is not a MethodCall&quot;)\n      End Try\n   \n   End Sub &#39;ProcessMessageStart\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_RemotingServices_GetEnvoyChainForProxy_System_MarshalByRefObject_\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_RemotingServices_GetEnvoyChainForProxy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEnvoyChainForProxy(MarshalByRefObject)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a chain of envoy sinks that should be used when sending messages to the remote object represented by the specified proxy.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Runtime.Remoting.Messaging.IMessageSink GetEnvoyChainForProxy (MarshalByRefObject obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The proxy of the remote object that requested envoy sinks are associated with.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.messaging.imessagesink\" data-linktype=\"relative-path\">IMessageSink</a></div>\r\n                  </div>\r\n                  <p>A chain of envoy sinks associated with the specified proxy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller does not have infrastructure permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Envoy sinks are sinks sent along with the <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> of an object that is used when returning messages to that object. The current method returns the envoy sinks that are used during communication between the proxy of the object and the object itself.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_RemotingServices_GetLifetimeService_System_MarshalByRefObject_\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_RemotingServices_GetLifetimeService_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetLifetimeService(MarshalByRefObject)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a lifetime service object that controls the lifetime policy of the specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object GetLifetimeService (MarshalByRefObject obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to obtain lifetime service for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The object that controls the lifetime of <code>obj</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller does not have infrastructure permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For the default lifetime service the returned object will be an object of type <a class=\"xref\" href=\"system.runtime.remoting.lifetime.ilease\" data-linktype=\"relative-path\">ILease</a>. If the <code>obj</code> parameter is <code>null</code>, the method returns <code>null</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the GetLifetimeService method to get a lifetime lease for the specified object.  </p>\n<pre><code class=\"lang-cpp\" name=\"RemotingServices.TimerSample#1\">#using &lt;system.dll&gt;\n#using &lt;system.runtime.remoting.dll&gt;\n#using &quot;timerservice.dll&quot;\n\nusing namespace System;\nusing namespace System::Net::Sockets;\nusing namespace System::Runtime::Remoting;\nusing namespace System::Runtime::Remoting::Channels;\nusing namespace System::Runtime::Remoting::Channels::Http;\nusing namespace System::Runtime::Remoting::Messaging;\nusing namespace System::Runtime::Remoting::Lifetime;\nusing namespace TimerSample;\nusing namespace System::Security::Permissions;\n\nnamespace GroupCoffeeTimer\n{\n   public ref class TimerClient: public MarshalByRefObject, public ISponsor\n   {\n   public:\n      [SecurityPermissionAttribute(SecurityAction::Demand, Flags=SecurityPermissionFlag::Infrastructure)]   \n      TimerClient()\n      {\n         // Registers the HTTP Channel so that this client can receive\n         // events from the remote service.\n         ChannelServices::RegisterChannel( gcnew HttpChannel( 0 ), false );\n         WellKnownClientTypeEntry^ remoteType = gcnew WellKnownClientTypeEntry( TimerService::typeid,&quot;http://localhost:9000/MyService/TimerService.soap&quot; );\n         RemotingConfiguration::RegisterWellKnownClientType( remoteType );\n         TimerService^ groupTimer = gcnew TimerService;\n         groupTimer-&gt;MinutesToTime = 4.0;\n\n         // Registers this client as a lease sponsor so that it can\n         // prevent the expiration of the TimerService.\n         ILease^ leaseObject = dynamic_cast&lt;ILease^&gt;(RemotingServices::GetLifetimeService( groupTimer ));\n         leaseObject-&gt;Register( this );\n\n         // Subscribes to the event so that the client can receive notifications from the server.\n         groupTimer-&gt;TimerExpired += gcnew TimerExpiredEventHandler( this, &amp;TimerClient::OnTimerExpired );\n         Console::WriteLine( &quot;Connected to TimerExpired event&quot; );\n         groupTimer-&gt;Start();\n         Console::WriteLine( &quot;Timer started for {0} minutes.&quot;, groupTimer-&gt;MinutesToTime );\n         Console::WriteLine( &quot;Press enter to end the client process.&quot; );\n         Console::ReadLine();\n      }\n\n   private:\n      void OnTimerExpired( Object^, TimerServiceEventArgs^ e )\n      {\n         Console::WriteLine( &quot;TimerHelper::OnTimerExpired: {0}&quot;, e-&gt;Message );\n      }\n public:\n      [System::Security::Permissions::PermissionSet(System::Security::\n         Permissions::SecurityAction::Demand, Name = &quot;FullTrust&quot;)]\n   virtual TimeSpan Renewal( ILease^ )\n      {\n         Console::WriteLine( &quot;TimerClient: Renewal called.&quot; );\n         return TimeSpan::FromMinutes( 0.5 );\n      }\n   };\n}\n\nint main()\n{\n   using namespace GroupCoffeeTimer;\n   gcnew TimerClient;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"RemotingServices.TimerSample#1\">using System;\nusing System.Collections;\nusing System.Net.Sockets;\nusing System.Runtime.Remoting;\nusing System.Runtime.Remoting.Channels;\nusing System.Runtime.Remoting.Channels.Http;\nusing System.Runtime.Remoting.Messaging;\nusing System.Runtime.Remoting.Lifetime;\nusing System.Security.Permissions;\nusing TimerSample;\n\nnamespace GroupCoffeeTimer {\n    public class TimerClient : MarshalByRefObject, ISponsor {\n        public static void Main() {\n            TimerClient myClient = new TimerClient();\n        }\n\n        [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)]\n        public TimerClient() {\n            // Registers the HTTP Channel so that this client can receive\n            // events from the remote service.\n\n            BinaryServerFormatterSinkProvider serverProv = new BinaryServerFormatterSinkProvider();\n            serverProv.TypeFilterLevel = System.Runtime.Serialization.Formatters.TypeFilterLevel.Full;\n            BinaryClientFormatterSinkProvider clientProv = new BinaryClientFormatterSinkProvider();\n\n            IDictionary props = new Hashtable();\n            props[&quot;port&quot;] = 0;\n            HttpChannel channel = new HttpChannel(props, clientProv, serverProv);\n            ChannelServices.RegisterChannel(channel);\n\n            WellKnownClientTypeEntry remoteType = new WellKnownClientTypeEntry(typeof(TimerService), &quot;http://localhost:9000/MyService/TimerService.soap&quot;);\n            RemotingConfiguration.RegisterWellKnownClientType(remoteType);\n            \n            TimerService groupTimer = new TimerService();\n            groupTimer.MinutesToTime = 4.0; \n\n            // Registers this client as a lease sponsor so that it can\n            // prevent the expiration of the TimerService.\n            ILease leaseObject = (ILease)RemotingServices.GetLifetimeService(groupTimer);\n            leaseObject.Register(this);\n            \n            // Subscribes to the event so that the client can receive notifications from the server.\n            groupTimer.TimerExpired += new TimerExpiredEventHandler(OnTimerExpired);\n            Console.WriteLine(&quot;Connected to TimerExpired event&quot;);\n            \n            groupTimer.Start();\n            Console.WriteLine(&quot;Timer started for {0} minutes.&quot;, groupTimer.MinutesToTime);\n            Console.WriteLine(&quot;Press enter to end the client process.&quot;);\n            Console.ReadLine();\n        }\n        \n        private void OnTimerExpired (object source, TimerServiceEventArgs e) {\n            Console.WriteLine(&quot;TimerHelper.OnTimerExpired: {0}&quot;, e.Message);\n        }\n\n        [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)]\n        public TimeSpan Renewal(ILease lease) {\n            Console.WriteLine(&quot;TimerClient: Renewal called.&quot;);\n            return TimeSpan.FromMinutes(0.5);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"RemotingServices.TimerSample#1\">Imports System\nImports System.Collections\nImports System.Net.Sockets\nImports System.Runtime.Remoting\nImports System.Runtime.Remoting.Channels\nImports System.Runtime.Remoting.Channels.Http\nImports System.Runtime.Remoting.Messaging\nImports System.Runtime.Remoting.Lifetime\nImports System.Security.Permissions\nImports TimerService\n\n\n\nPublic Class TimerClient\n    Inherits MarshalByRefObject\n    Implements ISponsor\n    \n    Public Shared Sub Main() \n        Dim myClient As New TimerClient()\n    \n    End Sub &#39;Main\n    \n    &lt;SecurityPermission(SecurityAction.LinkDemand, Flags := SecurityPermissionFlag.Infrastructure)&gt; _\n    Public Sub New() \n        &#39; Registers the HTTP Channel so that this client can receive\n        &#39; events from the remote service.\n        Dim serverProv As New BinaryServerFormatterSinkProvider()\n        serverProv.TypeFilterLevel = System.Runtime.Serialization.Formatters.TypeFilterLevel.Full\n        Dim clientProv As New BinaryClientFormatterSinkProvider()\n        \n        Dim props As New Hashtable()\n        props(&quot;port&quot;) = 0\n        Dim channel As New HttpChannel(props, clientProv, serverProv)\n        ChannelServices.RegisterChannel(channel)\n        \n        Dim remoteType As New WellKnownClientTypeEntry(GetType(TimerService), &quot;http://localhost:9000/MyService/TimerService.soap&quot;)\n        RemotingConfiguration.RegisterWellKnownClientType(remoteType)\n        \n        Dim groupTimer As New TimerService()\n        groupTimer.MinutesToTime = 4.0\n        \n        &#39; Registers this client as a lease sponsor so that it can\n        &#39; prevent the expiration of the TimerService.\n        Dim leaseObject As ILease = CType(RemotingServices.GetLifetimeService(groupTimer), ILease)\n        leaseObject.Register(Me)\n        \n        &#39; Subscribes to the event so that the client can receive notifications from the server.\n        AddHandler groupTimer.TimerExpired, AddressOf OnTimerExpired\n        Console.WriteLine(&quot;Connected to TimerExpired event&quot;)\n        \n        groupTimer.Start()\n        Console.WriteLine(&quot;Timer started for {0} minutes.&quot;, groupTimer.MinutesToTime)\n        Console.WriteLine(&quot;Press enter to end the client process.&quot;)\n        Console.ReadLine()\n    \n    End Sub &#39;New\n    \n    \n    Private Sub OnTimerExpired(ByVal [source] As Object, ByVal e As TimerServiceEventArgs) \n        Console.WriteLine(&quot;TimerHelper.OnTimerExpired: {0}&quot;, e.Message)\n    \n    End Sub &#39;OnTimerExpired\n    \n    &lt;SecurityPermission(SecurityAction.LinkDemand, Flags := SecurityPermissionFlag.Infrastructure)&gt; _\n    Public Function Renewal(ByVal lease As ILease) As TimeSpan Implements ISponsor.Renewal\n        Console.WriteLine(&quot;TimerClient: Renewal called.&quot;)\n        Return TimeSpan.FromMinutes(0.5)\n    \n    End Function &#39;Renewal\nEnd Class &#39;TimerClient\n</code></pre><p> To compile and run this example, you will need to compile and run a server, timerserver.exe, and compile a shared library, timerservice.dll.  </p>\n<p> The source for timerserver.exe follows:  </p>\n<pre><code class=\"lang-vb\" name=\"RemotingServices.TimerSample#2\">Imports System\nImports System.Collections\nImports System.Runtime.Remoting\nImports System.Runtime.Remoting.Channels\nImports System.Runtime.Remoting.Channels.Tcp\nImports System.Runtime.Remoting.Channels.Http\nImports System.Runtime.Remoting.Lifetime\nImports System.Timers\n\n\n\nPublic Class TimerServer\n    \n    Public Shared Sub Main() \n        \n        Dim serverProv As New BinaryServerFormatterSinkProvider()\n        serverProv.TypeFilterLevel = System.Runtime.Serialization.Formatters.TypeFilterLevel.Full\n        Dim clientProv As New BinaryClientFormatterSinkProvider()\n        \n        Dim props As New Hashtable()\n        props(&quot;port&quot;) = 9000\n        Dim channel As New HttpChannel(props, clientProv, serverProv)\n        ChannelServices.RegisterChannel(channel)\n        RemotingConfiguration.RegisterWellKnownServiceType(GetType(TimerService), &quot;MyService/TimerService.soap&quot;, WellKnownObjectMode.Singleton)\n        \n        Console.WriteLine(&quot;Press enter to end the server process.&quot;)\n        Console.ReadLine()\n    \n    End Sub &#39;Main\nEnd Class &#39;TimerServer\n</code></pre><pre><code class=\"lang-cs\" name=\"RemotingServices.TimerSample#2\">\nusing System;\nusing System.Collections;\nusing System.Runtime.Remoting;\nusing System.Runtime.Remoting.Channels;\nusing System.Runtime.Remoting.Channels.Tcp;\nusing System.Runtime.Remoting.Channels.Http;\nusing System.Runtime.Remoting.Lifetime;\nusing System.Timers;\n\nnamespace TimerSample {\n    public class TimerServer {\n        public static void Main() {\n\n            BinaryServerFormatterSinkProvider serverProv = new BinaryServerFormatterSinkProvider();\n            serverProv.TypeFilterLevel = System.Runtime.Serialization.Formatters.TypeFilterLevel.Full;\n            BinaryClientFormatterSinkProvider clientProv = new BinaryClientFormatterSinkProvider();\n\n            IDictionary props = new Hashtable();\n            props[&quot;port&quot;] = 9000;\n            HttpChannel channel = new HttpChannel(props, clientProv, serverProv);\n            ChannelServices.RegisterChannel(channel);\n            RemotingConfiguration.RegisterWellKnownServiceType(\n    \t\t\t\t\t\t\t\t\ttypeof(TimerService), \n    \t\t\t\t\t\t\t\t\t&quot;MyService/TimerService.soap&quot;,\n    \t\t\t\t\t\t\t\t\tWellKnownObjectMode.Singleton);\n            \n            Console.WriteLine(&quot;Press enter to end the server process.&quot;);\n            Console.ReadLine();\n        }\n    }\n}\n</code></pre><p> The source for timerservice.dll follows:  </p>\n<pre><code class=\"lang-vb\" name=\"RemotingServices.TimerSample#3\">Imports System\nImports System.Runtime.Remoting\nImports System.Runtime.Remoting.Channels\nImports System.Runtime.Remoting.Channels.Tcp\nImports System.Runtime.Remoting.Channels.Http\nImports System.Runtime.Remoting.Lifetime\nImports System.Security.Permissions\nImports System.Timers\n\n\n&#39; Define the event arguments\n&lt;Serializable()&gt;  _\nPublic Class TimerServiceEventArgs\n    Inherits EventArgs\n    Private m_Message As String\n    \n    Public Sub New(ByVal message As String) \n        m_Message = message\n    \n    End Sub &#39;New\n    \n    \n    Public ReadOnly Property Message() As String \n        Get\n            Return m_Message\n        End Get\n    End Property\nEnd Class &#39;TimerServiceEventArgs\n\n\n&#39; Define the delegate for the event\nPublic Delegate Sub TimerExpiredEventHandler(ByVal sender As Object, ByVal e As TimerServiceEventArgs) \n\n&#39; Define the remote service class\n\nPublic Class TimerService\n    Inherits MarshalByRefObject\n    Private m_MinutesToTime As Double\n    Private m_Timer As Timer\n    \n    &#39; The client will subscribe and unsubscribe to this event\n    Public Event TimerExpired As TimerExpiredEventHandler\n    \n    \n    &#39; Default: Initialize the TimerService to 4 minutes, the time required\n    &#39; to brew coffee in a French Press.\n    Public Sub New() \n        MyClass.New(4.0)\n    \n    End Sub &#39;New\n    \n    \n    Public Sub New(ByVal minutes As Double) \n        Console.WriteLine(&quot;TimerService instantiated.&quot;)\n        m_MinutesToTime = minutes\n        m_Timer = New Timer()\n        AddHandler m_Timer.Elapsed, AddressOf OnElapsed\n    \n    End Sub &#39;New\n    \n    \n    Public Property MinutesToTime() As Double \n        Get\n            Return m_MinutesToTime\n        End Get\n        Set\n            m_MinutesToTime = value\n        End Set\n    End Property\n    \n    \n    Public Sub Start() \n        If Not m_Timer.Enabled Then\n            Dim interval As TimeSpan = TimeSpan.FromMinutes(m_MinutesToTime)\n            m_Timer.Interval = interval.TotalMilliseconds\n            m_Timer.Enabled = True\n        Else\n        End If\n     &#39; TODO: Raise an exception\n    End Sub &#39;Start\n    \n    \n    Private Sub OnElapsed(ByVal [source] As Object, ByVal e As ElapsedEventArgs) \n        m_Timer.Enabled = False\n        \n        &#39; Fire Event\n        If Not (TimerExpiredEvent Is Nothing) Then\n            &#39; Package String in TimerServiceEventArgs\n            Dim timerEventArgs As New TimerServiceEventArgs(&quot;TimerServiceEventArgs: Timer Expired.&quot;)\n            Console.WriteLine(&quot;Firing TimerExpired Event&quot;)\n            RaiseEvent TimerExpired(Me, timerEventArgs)\n        End If\n    \n    End Sub &#39;OnElapsed\n    \n    &lt;SecurityPermission(SecurityAction.LinkDemand, Flags := SecurityPermissionFlag.Infrastructure)&gt; _\n    Public Overrides Function InitializeLifetimeService() As [Object] \n        Dim lease As ILease = CType(MyBase.InitializeLifetimeService(), ILease)\n        If lease.CurrentState = LeaseState.Initial Then\n            lease.InitialLeaseTime = TimeSpan.FromMinutes(0.125)\n            lease.SponsorshipTimeout = TimeSpan.FromMinutes(2)\n            lease.RenewOnCallTime = TimeSpan.FromSeconds(2)\n            Console.WriteLine(&quot;TimerService: InitializeLifetimeService&quot;)\n        End If\n        Return lease\n    \n    End Function &#39;InitializeLifetimeService\nEnd Class &#39;TimerService\n</code></pre><pre><code class=\"lang-cs\" name=\"RemotingServices.TimerSample#3\">\nusing System;\nusing System.Runtime.Remoting;\nusing System.Runtime.Remoting.Channels;\nusing System.Runtime.Remoting.Channels.Tcp;\nusing System.Runtime.Remoting.Channels.Http;\nusing System.Runtime.Remoting.Lifetime;\nusing System.Security.Permissions;\nusing System.Timers;\n\nnamespace TimerSample {\n    // Define the event arguments\n    [Serializable]\n    public class TimerServiceEventArgs : EventArgs {\n        private string m_Message;\n        public TimerServiceEventArgs(string message) {\n            m_Message = message;\n        }\n\n        public string Message {\n            get {\n                return m_Message;\n            }\n        }\n    }\n    \n    // Define the delegate for the event\n    public delegate void TimerExpiredEventHandler (object sender, TimerServiceEventArgs e);\n\n    // Define the remote service class\n    public class TimerService : MarshalByRefObject {\n        private double m_MinutesToTime;\n        private Timer m_Timer;\n\n        // The client will subscribe and unsubscribe to this event\n        public event TimerExpiredEventHandler TimerExpired;\n\n        // Default: Initialize the TimerService to 4 minutes, the time required\n        // to brew coffee in a French Press.\n        public TimerService():this(4.0) {\n        }\n        \n        public TimerService(double minutes) {\n            Console.WriteLine(&quot;TimerService instantiated.&quot;);\n            m_MinutesToTime = minutes;\n            m_Timer = new Timer();\n            m_Timer.Elapsed += new ElapsedEventHandler(OnElapsed);\n        }\n        \n        public double MinutesToTime {\n            get {\n                return m_MinutesToTime;\n            }\n            set {\n                m_MinutesToTime = value;\n            }\n        }\n\n        public void Start() {\n            if(!m_Timer.Enabled) {\n                TimeSpan interval = TimeSpan.FromMinutes(m_MinutesToTime);\n                m_Timer.Interval = interval.TotalMilliseconds;\n                m_Timer.Enabled = true;\n            }\n            else {\n                // TODO: Raise an exception\n            }\n        }\n        \n        private void OnElapsed(object source, ElapsedEventArgs e) {\n            m_Timer.Enabled = false;\n\n            // Fire Event\n            if (TimerExpired != null) {\n                // Package String in TimerServiceEventArgs\n                TimerServiceEventArgs timerEventArgs = new TimerServiceEventArgs(&quot;TimerServiceEventArgs: Timer Expired.&quot;);\n                Console.WriteLine(&quot;Firing TimerExpired Event&quot;);\n                TimerExpired(this, timerEventArgs);\n            }\n        }\n\n        [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)]\n        public override Object InitializeLifetimeService() {\n            ILease lease = (ILease)base.InitializeLifetimeService();\n            if (lease.CurrentState == LeaseState.Initial) {\n                lease.InitialLeaseTime = TimeSpan.FromMinutes(0.125);\n                lease.SponsorshipTimeout = TimeSpan.FromMinutes(2);\n                lease.RenewOnCallTime = TimeSpan.FromSeconds(2);\n                Console.WriteLine(&quot;TimerService: InitializeLifetimeService&quot;);\n            }\n             return lease;\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_RemotingServices_GetMethodBaseFromMethodMessage_System_Runtime_Remoting_Messaging_IMethodMessage_\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_RemotingServices_GetMethodBaseFromMethodMessage_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMethodBaseFromMethodMessage(IMethodMessage)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the method base from the given <a class=\"xref\" href=\"system.runtime.remoting.messaging.imethodmessage\" data-linktype=\"relative-path\">IMethodMessage</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Reflection.MethodBase GetMethodBaseFromMethodMessage (System.Runtime.Remoting.Messaging.IMethodMessage msg);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>msg</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.messaging.imethodmessage\" data-linktype=\"relative-path\">IMethodMessage</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The method message to extract the method base from.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodbase\" data-linktype=\"relative-path\">MethodBase</a></div>\r\n                  </div>\r\n                  <p>The method base extracted from the <code>msg</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>Either the immediate caller does not have infrastructure permission, or at least one of the callers higher in the callstack does not have permission to retrieve the type information of non-public members.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This determines the method base from the <a class=\"xref\" href=\"system.runtime.remoting.messaging.imethodmessage#System_Runtime_Remoting_Messaging_IMethodMessage_TypeName_\" data-linktype=\"relative-path\">TypeName</a>, <a class=\"xref\" href=\"system.runtime.remoting.messaging.imethodmessage#System_Runtime_Remoting_Messaging_IMethodMessage_MethodName_\" data-linktype=\"relative-path\">MethodName</a>, and <a class=\"xref\" href=\"system.runtime.remoting.messaging.imethodmessage#System_Runtime_Remoting_Messaging_IMethodMessage_MethodSignature_\" data-linktype=\"relative-path\">MethodSignature</a> properties of <a class=\"xref\" href=\"system.runtime.remoting.messaging.imethodmessage\" data-linktype=\"relative-path\">IMethodMessage</a> and is used by classes implementing the <a class=\"xref\" href=\"system.runtime.remoting.messaging.imethodmessage\" data-linktype=\"relative-path\">IMethodMessage</a> interface. Consumers of <a class=\"xref\" href=\"system.runtime.remoting.messaging.imethodmessage\" data-linktype=\"relative-path\">IMethodMessage</a> classes should reference the <a class=\"xref\" href=\"system.runtime.remoting.messaging.imethodmessage#System_Runtime_Remoting_Messaging_IMethodMessage_MethodBase_\" data-linktype=\"relative-path\">MethodBase</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_RemotingServices_GetObjectData_System_Object_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_RemotingServices_GetObjectData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetObjectData(Object,SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Serializes the specified marshal by reference object into the provided <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void GetObjectData (object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to serialize.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>info</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> into which the object is serialized.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The source and destination of the serialization.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>obj</code> or <code>info</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller does not have infrastructure permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_RemotingServices_GetObjectUri_System_MarshalByRefObject_\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_RemotingServices_GetObjectUri_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetObjectUri(MarshalByRefObject)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the URI for the specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string GetObjectUri (MarshalByRefObject obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a> for which a URI is requested.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The URI of the specified object if it has one, or <code>null</code> if the object has not yet been marshaled.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller does not have infrastructure permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-vb\" name=\"System.Runtime.Remoting.RemotingServices#18\">        &#39; GetRealProxy, GetObjectUri, GetEnvoyChainForProxy\n        Dim proxy As RealProxy = RemotingServices.GetRealProxy(obj)\n        Console.WriteLine(&quot;Real proxy type: {0}&quot;, proxy.GetProxiedType().ToString())\n\n        Console.WriteLine(&quot;Object URI: {0}&quot;, RemotingServices.GetObjectUri(obj).ToString())\n\n        Dim msgSink As IMessageSink = RemotingServices.GetEnvoyChainForProxy(obj).NextSink\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Runtime.Remoting.RemotingServices#18\">      // GetRealProxy, GetObjectUri, GetEnvoyChainForProxy\n      RealProxy proxy = RemotingServices.GetRealProxy(obj);\n      Console.WriteLine(&quot;Real proxy type: {0}&quot;, proxy.GetProxiedType().ToString());\n\n      Console.WriteLine(&quot;Object URI: {0}&quot;, RemotingServices.GetObjectUri(obj).ToString());\n\n      IMessageSink  msgSink = RemotingServices.GetEnvoyChainForProxy(obj).NextSink;\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Runtime.Remoting.RemotingServices#18\">      //GetRealProxy, GetObjectUri, GetEnvoyChainForProxy\n      RealProxy^ proxy = RemotingServices::GetRealProxy( obj );\n      Console::WriteLine( &quot;Real proxy type: {0}&quot;, proxy-&gt;GetProxiedType() );\n      Console::WriteLine( &quot;Object URI: {0}&quot;, RemotingServices::GetObjectUri( obj ) );\n      IMessageSink^ msgSink = RemotingServices::GetEnvoyChainForProxy( obj )-&gt;NextSink;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_RemotingServices_GetObjRefForProxy_System_MarshalByRefObject_\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_RemotingServices_GetObjRefForProxy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetObjRefForProxy(MarshalByRefObject)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> that represents the remote object from the specified proxy.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Runtime.Remoting.ObjRef GetObjRefForProxy (MarshalByRefObject obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A proxy connected to the object you want to create a <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> that represents the remote object the specified proxy is connected to, or <code>null</code> if the object or proxy have not been marshaled.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller does not have infrastructure permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> is a serializable representation of an object used to transfer an object reference across an application domain boundary. Creating a <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> for an object is known as marshaling. The <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> can be transferred through a channel into another application domain (possibly on another process or computer). Once in the other application domain, the <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> must be parsed to create a proxy for the object, generally connected to the real object. This operation is known as unmarshaling. During unmarshaling, the <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> is parsed to extract the method information of the remote object and both the transparent proxy and <a class=\"xref\" href=\"system.runtime.remoting.proxies.realproxy\" data-linktype=\"relative-path\">RealProxy</a> objects are created.  </p>\n<p> A <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> contains information that describes the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> and class of the object being marshaled, a URI that uniquely identifies the specific object instance, and communication related information about how to reach the remote application where the object is located.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to get a <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> instance for the specified object.  </p>\n<pre><code class=\"lang-cpp\" name=\"RemotingServices.GetObjRefForProxy#1\">   ObjRef^ objRefSample = RemotingServices::GetObjRefForProxy( myRemoteObject );\n   Console::WriteLine( &quot;***ObjRef Details***&quot; );\n   Console::WriteLine( &quot;URI:&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, objRefSample-&gt;URI );\n   array&lt;Object^&gt;^channelData = objRefSample-&gt;ChannelInfo-&gt;ChannelData;\n   Console::WriteLine( &quot;Channel Info:&quot; );\n   IEnumerator^ myEnum = channelData-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ o = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, o );\n   }\n\n   IEnvoyInfo^ envoyInfo = objRefSample-&gt;EnvoyInfo;\n   if ( envoyInfo == nullptr )\n   {\n      Console::WriteLine( &quot;This ObjRef does not have envoy information.&quot; );\n   }\n   else\n   {\n      IMessageSink^ envoySinks = envoyInfo-&gt;EnvoySinks;\n      Console::WriteLine( &quot;Envoy Sink Class: {0}&quot;, envoySinks );\n   }\n\n   IRemotingTypeInfo^ typeInfo = objRefSample-&gt;TypeInfo;\n   Console::WriteLine( &quot;Remote type name: {0}&quot;, typeInfo-&gt;TypeName );\n   Console::WriteLine( &quot;Can my Object* cast to a Bitmap? {0}&quot;, typeInfo-&gt;CanCastTo( System::Drawing::Bitmap::typeid, objRefSample ) );\n</code></pre><pre><code class=\"lang-vb\" name=\"RemotingServices.GetObjRefForProxy#1\">      Dim objRefSample As ObjRef = RemotingServices.GetObjRefForProxy(myRemoteObject)\n      \n      Console.WriteLine(&quot;***ObjRef Details***&quot;)\n      Console.WriteLine(&quot;URI:&quot; + ControlChars.Tab + &quot;{0}&quot;, objRefSample.URI)\n      \n      Dim channelData As Object() = objRefSample.ChannelInfo.ChannelData\n      Console.WriteLine(&quot;Channel Info:&quot;)\n      \n      Dim o As Object\n      For Each o In  channelData\n         Console.WriteLine(ControlChars.Tab + &quot;{0}&quot;, o.ToString())\n      Next o\n      \n      Dim envoyInfo As IEnvoyInfo = objRefSample.EnvoyInfo\n      If envoyInfo Is Nothing Then\n         Console.WriteLine(&quot;This ObjRef does not have envoy information.&quot;)\n      Else\n         Dim envoySinks As IMessageSink = envoyInfo.EnvoySinks\n         Console.WriteLine(&quot;Envoy Sink Class: {0}&quot;, envoySinks)\n      End If\n      \n      Dim typeInfo As IRemotingTypeInfo = objRefSample.TypeInfo\n      Console.WriteLine(&quot;Remote type name: {0}&quot;, typeInfo.TypeName)\n      \n      Console.WriteLine(&quot;Can my object cast to a Bitmap? {0}&quot;, typeInfo.CanCastTo(GetType(System.Drawing.Bitmap), objRefSample))\n</code></pre><pre><code class=\"lang-cs\" name=\"RemotingServices.GetObjRefForProxy#1\">        ObjRef objRefSample = RemotingServices.GetObjRefForProxy(myRemoteObject);\n        \n        Console.WriteLine(&quot;***ObjRef Details***&quot;);\n        Console.WriteLine(&quot;URI:&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, objRefSample.URI);\n        \n        object[] channelData = objRefSample.ChannelInfo.ChannelData;\n        \n        Console.WriteLine(&quot;Channel Info:&quot;);\n        foreach(object o in channelData)\n            Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, o.ToString());\n        \n        IEnvoyInfo envoyInfo = objRefSample.EnvoyInfo;\n        \n        if (envoyInfo == null) {\n            Console.WriteLine(&quot;This ObjRef does not have envoy information.&quot;);\n        }\n        else {\n            IMessageSink envoySinks = envoyInfo.EnvoySinks;\n            Console.WriteLine(&quot;Envoy Sink Class: {0}&quot;, envoySinks);\n        }\n        \n        IRemotingTypeInfo typeInfo = objRefSample.TypeInfo;\n        Console.WriteLine(&quot;Remote type name: {0}&quot;, typeInfo.TypeName);\n        \n        Console.WriteLine(&quot;Can my object cast to a Bitmap? {0}&quot;,\n            typeInfo.CanCastTo(typeof(System.Drawing.Bitmap), objRefSample));\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_RemotingServices_GetRealProxy_System_Object_\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_RemotingServices_GetRealProxy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetRealProxy(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the real proxy backing the specified transparent proxy.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Runtime.Remoting.Proxies.RealProxy GetRealProxy (object proxy);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>proxy</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A transparent proxy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.proxies.realproxy\" data-linktype=\"relative-path\">RealProxy</a></div>\r\n                  </div>\r\n                  <p>The real proxy instance backing the transparent proxy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller does not have infrastructure permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A client that uses an object across any kind of remoting boundary is actually using a transparent proxy for the object. The transparent proxy gives the impression that the actual object resides in the client&#39;s space. It achieves this by forwarding calls made on it to the real object using the remoting infrastructure.  </p>\n<p> The transparent proxy is backed by an instance of a managed runtime class of type <a class=\"xref\" href=\"system.runtime.remoting.proxies.realproxy\" data-linktype=\"relative-path\">RealProxy</a>. The <a class=\"xref\" href=\"system.runtime.remoting.proxies.realproxy\" data-linktype=\"relative-path\">RealProxy</a> implements a part of the functionality needed to forward the operations from the transparent proxy.  </p>\n<p> A proxy object inherits the associated semantics of managed objects such as garbage collection, support for members and methods, and can be extended to form new classes. The proxy acts as an object of the same class as the remote object (transparent proxy), and is also a managed object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_RemotingServices_GetServerTypeForUri_System_String_\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_RemotingServices_GetServerTypeForUri_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetServerTypeForUri(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of the object with the specified URI.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Type GetServerTypeForUri (string URI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>URI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The URI of the object whose <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> is requested.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of the object with the specified URI.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>Either the immediate caller does not have infrastructure permission, or at least one of the callers higher in the callstack does not have permission to retrieve the type information of non-public members.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Because remoting identifies endpoints using URIs, the GetServerTypeForUri method is very useful in the pluggable parts of the remoting infrastructure (for example, channel sinks, dynamic sinks, and context sinks) that use <a class=\"xref\" href=\"system.runtime.remoting.messaging.imessage\" data-linktype=\"relative-path\">IMessage</a> objects, because the current method will return the associated type object from the URI.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-vb\" name=\"System.Runtime.Remoting.RemotingServices#7\">        Console.WriteLine(&quot;Server type: {0}&quot;, _\n                          RemotingServices.GetServerTypeForUri(myObjectUri).ToString())\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Runtime.Remoting.RemotingServices#7\">      Console.WriteLine(&quot;Server type: {0}&quot;,\n                        RemotingServices.GetServerTypeForUri(myObjectUri));\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Runtime.Remoting.RemotingServices#7\">      Console::WriteLine( &quot;Server type: {0}&quot;, RemotingServices::GetServerTypeForUri( const_cast&lt;String^&gt;(myObjectUri) ) );\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_RemotingServices_GetSessionIdForMethodMessage_System_Runtime_Remoting_Messaging_IMethodMessage_\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_RemotingServices_GetSessionIdForMethodMessage_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetSessionIdForMethodMessage(IMethodMessage)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves a session ID for a message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string GetSessionIdForMethodMessage (System.Runtime.Remoting.Messaging.IMethodMessage msg);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>msg</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.messaging.imethodmessage\" data-linktype=\"relative-path\">IMethodMessage</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.remoting.messaging.imethodmessage\" data-linktype=\"relative-path\">IMethodMessage</a> for which a session ID is requested.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A session ID string that uniquely identifies the current session.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller does not have infrastructure permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The same session ID might be returned for objects in the same application, but this method will never return the same session ID for two objects in different remote applications.  </p>\n<p> For more information about identifying sessions and session IDs, see ASP.Net <a href=\"../Topic/ASP.NET%20Session%20State%20Overview.md\" data-linktype=\"relative-path\">ASP.NET Session State Overview</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to get the session ID string for the current session.  </p>\n<pre><code class=\"lang-cs\" name=\"RemotingServices.ExecuteMessage#1\">   [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)]\n   public void ProcessMessageStart(IMessage requestMessage, bool bClientSide, bool bAsyncCall) {\n      \n      Console.WriteLine(&quot;<br>ProcessMessageStart&quot;);\n      Console.WriteLine(&quot;requestMessage = {0}&quot;, requestMessage);\n      \n      try {\n         Console.WriteLine(&quot;SessionId = {0}.&quot;,\n             RemotingServices.GetSessionIdForMethodMessage((IMethodMessage)requestMessage));\n      }\n      catch (InvalidCastException) {\n         Console.WriteLine(&quot;The requestMessage is not an IMethodMessage.&quot;);\n      }\n\n      IMethodCallMessage requestMethodCallMessage;\n      \n      try {\n         requestMethodCallMessage = (IMethodCallMessage)requestMessage;\n         // Prints the details of the IMethodCallMessage to the console.\n         Console.WriteLine(&quot;<br>MethodCall details&quot;);\n         Console.WriteLine(&quot;Uri = {0}&quot;, requestMethodCallMessage.Uri);\n         Console.WriteLine(&quot;TypeName = {0}&quot;, requestMethodCallMessage.TypeName);\n         Console.WriteLine(&quot;MethodName = {0}&quot;, requestMethodCallMessage.MethodName);\n         Console.WriteLine(&quot;ArgCount = {0}&quot;, requestMethodCallMessage.ArgCount);\n         \n         Console.WriteLine(&quot;MethodCall.Args&quot;);\n         foreach(object o in requestMethodCallMessage.Args)\n             Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, o);\n         \n         // Sends this method call message to another server to replicate\n         // the call at the second server.\n         if (requestMethodCallMessage.Uri == replicatedServiceUri) {\n            \n            SampleService replicationService = \n               (SampleService)Activator.GetObject(typeof(SampleService), \n               replicationServerUrl + replicatedServiceUri);\n            \n            IMethodReturnMessage returnMessage = \n               RemotingServices.ExecuteMessage(replicationService, requestMethodCallMessage);\n            \n            // Prints the results of the method call stored in the IMethodReturnMessage.\n            Console.WriteLine(&quot;<br>Message returned by ExecuteMessage.&quot;);\n            Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;Exception = {0}&quot;, returnMessage.Exception);\n            Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;ReturnValue = {0}&quot;, returnMessage.ReturnValue);\n            Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;OutArgCount = {0}&quot;, returnMessage.OutArgCount);\n            Console.WriteLine(&quot;Return message OutArgs&quot;);\n            \n            foreach(object o in requestMethodCallMessage.Args)\n               Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, o);\n         }\n      }\n      catch (InvalidCastException) {\n          Console.WriteLine(&quot;The requestMessage is not a MethodCall&quot;);\n      }\n   }\n</code></pre><pre><code class=\"lang-cpp\" name=\"RemotingServices.ExecuteMessage#1\">   [System::Security::Permissions::SecurityPermissionAttribute\n   (System::Security::Permissions::SecurityAction::LinkDemand, \n   Flags=System::Security::Permissions::SecurityPermissionFlag::Infrastructure)]\n   virtual void ProcessMessageStart( IMessage^ requestMessage, bool /*bClientSide*/, bool /*bAsyncCall*/ )\n   {\n      Console::WriteLine( &quot;<br>ProcessMessageStart&quot; );\n      Console::WriteLine( &quot;requestMessage = {0}&quot;, requestMessage );\n      try\n      {\n         Console::WriteLine( &quot;SessionId = {0}.&quot;, RemotingServices::GetSessionIdForMethodMessage( dynamic_cast&lt;IMethodMessage^&gt;(requestMessage) ) );\n      }\n      catch ( InvalidCastException^ ) \n      {\n         Console::WriteLine( &quot;The requestMessage is not an IMethodMessage*.&quot; );\n      }\n\n      IMethodCallMessage^ requestMethodCallMessage;\n      try\n      {\n         requestMethodCallMessage = dynamic_cast&lt;IMethodCallMessage^&gt;(requestMessage);\n\n         // Prints the details of the IMethodCallMessage* to the console.\n         Console::WriteLine( &quot;<br>MethodCall details&quot; );\n         Console::WriteLine( &quot;Uri = {0}&quot;, requestMethodCallMessage-&gt;Uri );\n         Console::WriteLine( &quot;TypeName = {0}&quot;, requestMethodCallMessage-&gt;TypeName );\n         Console::WriteLine( &quot;MethodName = {0}&quot;, requestMethodCallMessage-&gt;MethodName );\n         Console::WriteLine( &quot;ArgCount = {0}&quot;, requestMethodCallMessage-&gt;ArgCount );\n         Console::WriteLine( &quot;MethodCall::Args&quot; );\n         IEnumerator^ myEnum = requestMethodCallMessage-&gt;Args-&gt;GetEnumerator();\n         while ( myEnum-&gt;MoveNext() )\n         {\n            Object^ o = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n            Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, o );\n\n            // Sends this method call message to another server to replicate\n            // the call at the second server.\n            if ( requestMethodCallMessage-&gt;Uri == replicatedServiceUri )\n            {\n               String^ repSvr = String::Format(  &quot;{0}{1}&quot;, const_cast&lt;String^&gt;(replicationServerUrl), const_cast&lt;String^&gt;(replicatedServiceUri) );\n               SampleService^ replicationService = dynamic_cast&lt;SampleService^&gt;(Activator::GetObject( SampleService::typeid, repSvr ));\n               IMethodReturnMessage^ returnMessage = RemotingServices::ExecuteMessage( replicationService, requestMethodCallMessage );\n\n               // Prints the results of the method call stored in the IMethodReturnMessage*.\n               Console::WriteLine( &quot;<br>Message returned by ExecuteMessage.&quot; );\n               Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;Exception = {0}&quot;, returnMessage-&gt;Exception );\n               Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;ReturnValue = {0}&quot;, returnMessage-&gt;ReturnValue );\n               Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;OutArgCount = {0}&quot;, returnMessage-&gt;OutArgCount );\n               Console::WriteLine( &quot;Return message OutArgs&quot; );\n               IEnumerator^ myEnum = requestMethodCallMessage-&gt;Args-&gt;GetEnumerator();\n               while ( myEnum-&gt;MoveNext() )\n               {\n                  Object^ o = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n                  Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, o );\n               }\n            }\n         }\n      }\n      catch ( InvalidCastException^ ) \n      {\n         Console::WriteLine( &quot;The requestMessage is not a MethodCall&quot; );\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"RemotingServices.ExecuteMessage#1\">   &lt;SecurityPermission(SecurityAction.LinkDemand, Flags := SecurityPermissionFlag.Infrastructure)&gt; _\n   Public Sub ProcessMessageStart(requestMessage As IMessage, bClientSide As Boolean, bAsyncCall As Boolean) Implements IDynamicMessageSink.ProcessMessageStart\n   \n      Console.WriteLine(ControlChars.Cr + &quot;ProcessMessageStart&quot;)\n      Console.WriteLine(&quot;requestMessage = {0}&quot;, requestMessage)\n      \n      Try\n         Console.WriteLine(&quot;SessionId = {0}.&quot;, RemotingServices.GetSessionIdForMethodMessage(CType(requestMessage, IMethodMessage)))\n      Catch e As InvalidCastException\n         Console.WriteLine(&quot;The requestMessage is not an IMethodMessage.&quot;)\n      End Try\n      \n      Dim requestMethodCallMessage As IMethodCallMessage\n      \n      Try\n         requestMethodCallMessage = CType(requestMessage, MethodCall)\n         \n         &#39; Prints the details of the IMethodCallMessage to the console\n         Console.WriteLine(ControlChars.Cr + &quot;MethodCall details&quot;)\n         Console.WriteLine(&quot;Uri = {0}&quot;, requestMethodCallMessage.Uri)\n         Console.WriteLine(&quot;TypeName = {0}&quot;, requestMethodCallMessage.TypeName)\n         Console.WriteLine(&quot;MethodName = {0}&quot;, requestMethodCallMessage.MethodName)\n         Console.WriteLine(&quot;ArgCount = {0}&quot;, requestMethodCallMessage.ArgCount)\n         Console.WriteLine(&quot;MethodCall.Args&quot;)\n         \n         Dim o As Object\n         For Each o In  requestMethodCallMessage.Args\n            Console.WriteLine(ControlChars.Tab + &quot;{0}&quot;, o)\n         Next o \n         \n         &#39; Sends this method call message to another server to replicate\n         &#39; the call at the second server\n         If requestMethodCallMessage.Uri = replicatedServiceUri Then\n            \n            Dim replicationService As SampleService = CType(Activator.GetObject(GetType(SampleService), replicationServerUrl + replicatedServiceUri), SampleService)\n            Dim returnMessage As IMethodReturnMessage = RemotingServices.ExecuteMessage(replicationService, requestMethodCallMessage)\n            \n            &#39; Prints the results of the method call stored in the IMethodReturnMessage.\n            Console.WriteLine(ControlChars.Cr + &quot;Message returned by ExecuteMessage.&quot;)\n            Console.WriteLine(ControlChars.Tab + &quot;Exception = {0}&quot;, returnMessage.Exception)\n            Console.WriteLine(ControlChars.Tab + &quot;ReturnValue = {0}&quot;, returnMessage.ReturnValue)\n            Console.WriteLine(ControlChars.Tab + &quot;OutArgCount = {0}&quot;, returnMessage.OutArgCount)\n            Console.WriteLine(&quot;Return message OutArgs&quot;)\n            For Each o In  requestMethodCallMessage.Args\n               Console.WriteLine(ControlChars.Tab + &quot;{0}&quot;, o)\n            Next o\n            \n         End If\n         \n      Catch e As InvalidCastException\n         Console.WriteLine(&quot;The requestMessage is not a MethodCall&quot;)\n      End Try\n   \n   End Sub &#39;ProcessMessageStart\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_RemotingServices_IsMethodOverloaded_System_Runtime_Remoting_Messaging_IMethodMessage_\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_RemotingServices_IsMethodOverloaded_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsMethodOverloaded(IMethodMessage)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a Boolean value that indicates whether the method in the given message is overloaded.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsMethodOverloaded (System.Runtime.Remoting.Messaging.IMethodMessage msg);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>msg</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.messaging.imethodmessage\" data-linktype=\"relative-path\">IMethodMessage</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The message that contains a call to the method in question.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the method called in <code>msg</code> is overloaded; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller does not have infrastructure permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_RemotingServices_IsObjectOutOfAppDomain_System_Object_\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_RemotingServices_IsObjectOutOfAppDomain_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsObjectOutOfAppDomain(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a Boolean value that indicates whether the object specified by the given transparent proxy is contained in a different application domain than the object that called the current method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsObjectOutOfAppDomain (object tp);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>tp</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to check.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the object is out of the current application domain; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For information about application domains, see <a href=\"http://msdn.microsoft.com/en-us/39e57d07-a740-4cd4-ae82-e119ea3856c1\" data-linktype=\"external\">Application Domains</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cpp\" name=\"RemotingServices IsObject Snippets#1\">      // Create a remote version of TempConverter::Converter.\n      TempConverter::Converter^ converter1 =\n            dynamic_cast&lt;TempConverter::Converter^&gt;(Activator::GetObject(\n            TempConverter::Converter::typeid,\n            &quot;http://localhost:8085/TempConverter&quot; ));\n\n      // Create a local version of TempConverter::Converter.\n      TempConverter::Converter^ converter2 = gcnew TempConverter::Converter;\n\n      // Returns true, converter1 is remote and in a different appdomain.\n      System::Runtime::Remoting::RemotingServices::IsObjectOutOfAppDomain( converter1 );\n\n      // Returns false, converter2 is local and running in this appdomain.\n      System::Runtime::Remoting::RemotingServices::IsObjectOutOfAppDomain( converter2 );\n\n      // Returns true, converter1 is remote and in a different context.\n      System::Runtime::Remoting::RemotingServices::IsObjectOutOfContext( converter1 );\n\n      // Returns false, converter2 is local and running in this context.\n      System::Runtime::Remoting::RemotingServices::IsObjectOutOfContext( converter2 );\n</code></pre><pre><code class=\"lang-vb\" name=\"RemotingServices IsObject Snippets#1\">         &#39; Create remote version of TempConverter.Converter.\n         Dim converter1 As TempConverter.Converter\n\n         converter1 = CType(Activator.GetObject(GetType( _\n                              TempConverter.Converter), _\n                              &quot;http://localhost:8085/TempConverter&quot;), _\n                              TempConverter.Converter)\n         &#39; Create local version of TempConverter.Converter.\n         Dim converter2 As New TempConverter.Converter()\n\n         &#39; Returns true, converter1 is remote and in a different appdomain.\n         System.Runtime.Remoting.RemotingServices.IsObjectOutOfAppDomain( _\n                                                            converter1)\n\n         &#39; Returns false, converter2 is local and running in this appdomain.\n         System.Runtime.Remoting.RemotingServices.IsObjectOutOfAppDomain( _\n                                                            converter2)\n\n         &#39; Returns true, converter1 is remote and in a different context.\n         System.Runtime.Remoting.RemotingServices.IsObjectOutOfContext( _\n                                                            converter1)\n\n         &#39; Returns false, converter2 is local and running in this context.\n         System.Runtime.Remoting.RemotingServices.IsObjectOutOfContext( _\n                                                            converter2)\n</code></pre><pre><code class=\"lang-cs\" name=\"RemotingServices IsObject Snippets#1\">\t\t\t// Create a remote version of TempConverter.Converter.\n\t\t\tTempConverter.Converter converter1 =\n\t\t\t\t\t(TempConverter.Converter) Activator.GetObject(\n\t\t\t\t\ttypeof(TempConverter.Converter),\n\t\t\t\t\t&quot;http://localhost:8085/TempConverter&quot;);\n\t\t\t\n\t\t\t// Create a local version of TempConverter.Converter.\n\t\t\tTempConverter.Converter converter2 = new TempConverter.Converter();\n\n\t\t\t// Returns true, converter1 is remote and in a different appdomain.\n\t\t\tSystem.Runtime.Remoting.RemotingServices.IsObjectOutOfAppDomain(\n\t\t\t\t\t\t\t\t\tconverter1); \n\n\t\t\t// Returns false, converter2 is local and running in this appdomain.\n\t\t\tSystem.Runtime.Remoting.RemotingServices.IsObjectOutOfAppDomain(\n\t\t\t\t\t\t\t\t\tconverter2); \n\n\t\t\t// Returns true, converter1 is remote and in a different context.\n\t\t\tSystem.Runtime.Remoting.RemotingServices.IsObjectOutOfContext(\n\t\t\t\t\t\t\t\t\tconverter1);\n\n\t\t\t// Returns false, converter2 is local and running in this context.\n\t\t\tSystem.Runtime.Remoting.RemotingServices.IsObjectOutOfContext(\n\t\t\t\t\t\t\t\t\tconverter2);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_RemotingServices_IsObjectOutOfContext_System_Object_\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_RemotingServices_IsObjectOutOfContext_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsObjectOutOfContext(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a Boolean value that indicates whether the object represented by the given proxy is contained in a different context than the object that called the current method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsObjectOutOfContext (object tp);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>tp</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to check.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the object is out of the current context; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A context is an ordered sequence of properties that define an environment for the objects that reside inside it. Contexts are created during the activation process for objects that are configured to require certain automatic services such synchronization, transactions, just-in-time activation, security, and so on. Multiple objects can live inside a context.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cpp\" name=\"RemotingServices IsObject Snippets#1\">      // Create a remote version of TempConverter::Converter.\n      TempConverter::Converter^ converter1 =\n            dynamic_cast&lt;TempConverter::Converter^&gt;(Activator::GetObject(\n            TempConverter::Converter::typeid,\n            &quot;http://localhost:8085/TempConverter&quot; ));\n\n      // Create a local version of TempConverter::Converter.\n      TempConverter::Converter^ converter2 = gcnew TempConverter::Converter;\n\n      // Returns true, converter1 is remote and in a different appdomain.\n      System::Runtime::Remoting::RemotingServices::IsObjectOutOfAppDomain( converter1 );\n\n      // Returns false, converter2 is local and running in this appdomain.\n      System::Runtime::Remoting::RemotingServices::IsObjectOutOfAppDomain( converter2 );\n\n      // Returns true, converter1 is remote and in a different context.\n      System::Runtime::Remoting::RemotingServices::IsObjectOutOfContext( converter1 );\n\n      // Returns false, converter2 is local and running in this context.\n      System::Runtime::Remoting::RemotingServices::IsObjectOutOfContext( converter2 );\n</code></pre><pre><code class=\"lang-vb\" name=\"RemotingServices IsObject Snippets#1\">         &#39; Create remote version of TempConverter.Converter.\n         Dim converter1 As TempConverter.Converter\n\n         converter1 = CType(Activator.GetObject(GetType( _\n                              TempConverter.Converter), _\n                              &quot;http://localhost:8085/TempConverter&quot;), _\n                              TempConverter.Converter)\n         &#39; Create local version of TempConverter.Converter.\n         Dim converter2 As New TempConverter.Converter()\n\n         &#39; Returns true, converter1 is remote and in a different appdomain.\n         System.Runtime.Remoting.RemotingServices.IsObjectOutOfAppDomain( _\n                                                            converter1)\n\n         &#39; Returns false, converter2 is local and running in this appdomain.\n         System.Runtime.Remoting.RemotingServices.IsObjectOutOfAppDomain( _\n                                                            converter2)\n\n         &#39; Returns true, converter1 is remote and in a different context.\n         System.Runtime.Remoting.RemotingServices.IsObjectOutOfContext( _\n                                                            converter1)\n\n         &#39; Returns false, converter2 is local and running in this context.\n         System.Runtime.Remoting.RemotingServices.IsObjectOutOfContext( _\n                                                            converter2)\n</code></pre><pre><code class=\"lang-cs\" name=\"RemotingServices IsObject Snippets#1\">\t\t\t// Create a remote version of TempConverter.Converter.\n\t\t\tTempConverter.Converter converter1 =\n\t\t\t\t\t(TempConverter.Converter) Activator.GetObject(\n\t\t\t\t\ttypeof(TempConverter.Converter),\n\t\t\t\t\t&quot;http://localhost:8085/TempConverter&quot;);\n\t\t\t\n\t\t\t// Create a local version of TempConverter.Converter.\n\t\t\tTempConverter.Converter converter2 = new TempConverter.Converter();\n\n\t\t\t// Returns true, converter1 is remote and in a different appdomain.\n\t\t\tSystem.Runtime.Remoting.RemotingServices.IsObjectOutOfAppDomain(\n\t\t\t\t\t\t\t\t\tconverter1); \n\n\t\t\t// Returns false, converter2 is local and running in this appdomain.\n\t\t\tSystem.Runtime.Remoting.RemotingServices.IsObjectOutOfAppDomain(\n\t\t\t\t\t\t\t\t\tconverter2); \n\n\t\t\t// Returns true, converter1 is remote and in a different context.\n\t\t\tSystem.Runtime.Remoting.RemotingServices.IsObjectOutOfContext(\n\t\t\t\t\t\t\t\t\tconverter1);\n\n\t\t\t// Returns false, converter2 is local and running in this context.\n\t\t\tSystem.Runtime.Remoting.RemotingServices.IsObjectOutOfContext(\n\t\t\t\t\t\t\t\t\tconverter2);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_RemotingServices_IsOneWay_System_Reflection_MethodBase_\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_RemotingServices_IsOneWay_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsOneWay(MethodBase)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a Boolean value that indicates whether the client that called the method specified in the given message is waiting for the server to finish processing the method before continuing execution.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsOneWay (System.Reflection.MethodBase method);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>method</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodbase\" data-linktype=\"relative-path\">MethodBase</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The method in question.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the method is one way; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller does not have infrastructure permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When a one-way method is called, the client does not wait for the server to finish processing the message. The client method returns to the application with no knowledge of whether or not the server will successfully process the message. Methods are marked as one way using the <a class=\"xref\" href=\"system.runtime.remoting.messaging.onewayattribute\" data-linktype=\"relative-path\">OneWayAttribute</a>.  </p>\n<p> One-way methods cannot have a return value or any out parameters.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-vb\" name=\"System.Runtime.Remoting.RemotingServices#2\">Public Class HelloServer\n    Inherits MarshalByRefObject\n\n    Shared Sub New()\n        Console.WriteLine(&quot;HelloServer activated.&quot;)\n    End Sub\n\n    &lt;OneWay()&gt; Public Sub SayHelloToServer(ByVal name As String)\n        Console.WriteLine(&quot;Client invoked SayHelloToServer(&quot;&quot;{0}&quot;&quot;).&quot;, name)\n    End Sub\n\n    &#39;IsOneWay\n    &#39; Note the lack of the OneWayAttribute adornment on this method.\n&lt;SecurityPermission(SecurityAction.Demand)&gt; _\n    Public Function SayHelloToServerAndWait(ByVal name As String) As String\n        Console.WriteLine(&quot;Client invoked SayHelloToServerAndWait(&quot;&quot;{0}&quot;&quot;).&quot;, name)\n\n        Console.WriteLine( _\n            &quot;Client waiting for return? {0}&quot;, _\n            IIf(RemotingServices.IsOneWay(MethodBase.GetCurrentMethod()), &quot;No&quot;, &quot;Yes&quot;) _\n        )\n\n        Return &quot;Hi there, &quot; + name + &quot;.&quot;\n    End Function\n\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Runtime.Remoting.RemotingServices#2\">public class HelloServer : MarshalByRefObject {\n\n   public HelloServer() {\n      Console.WriteLine(&quot;HelloServer activated.&quot;);\n   }\n\n   [OneWay()]\n   public void SayHelloToServer(string name) {\n      Console.WriteLine(&quot;Client invoked SayHelloToServer(\\&quot;{0}\\&quot;).&quot;, name);\n   }   \n\n[SecurityPermission(SecurityAction.Demand)]\n   // IsOneWay\n   // Note the lack of the OneWayAttribute adornment on this method.\n   public string SayHelloToServerAndWait(string name) {\n      Console.WriteLine(&quot;Client invoked SayHelloToServerAndWait(\\&quot;{0}\\&quot;).&quot;, name);\n\n      Console.WriteLine(\n         &quot;Client waiting for return? {0}&quot;,\n         RemotingServices.IsOneWay(MethodBase.GetCurrentMethod()) ? &quot;No&quot; : &quot;Yes&quot;\n      );\n\n      return &quot;Hi there, &quot; + name + &quot;.&quot;;\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Runtime.Remoting.RemotingServices#2\">public ref class HelloServer: public MarshalByRefObject\n{\npublic:\n   HelloServer()\n   {\n      Console::WriteLine( &quot;HelloServer activated.&quot; );\n   }\n\n   [OneWay]\n   void SayHelloToServer( String^ name )\n   {\n      Console::WriteLine( &quot;Client invoked SayHelloToServer(\\&quot; {0}\\&quot;).&quot;, name );\n   }\n\n   // IsOneWay: Note the lack of the OneWayAttribute adornment on this method.\n   [SecurityPermissionAttribute(SecurityAction::Demand, Flags=SecurityPermissionFlag::Infrastructure)]   \n   String^ SayHelloToServerAndWait( String^ name )\n   {\n      Console::WriteLine( &quot;Client invoked SayHelloToServerAndWait(\\&quot; {0}\\&quot;).&quot;, name );\n      Console::WriteLine( &quot;Client waiting for return? {0}&quot;, RemotingServices::IsOneWay( MethodBase::GetCurrentMethod() ) ? (String^)&quot;No&quot; : &quot;Yes&quot; );\n      return String::Format( &quot;Hi there, {0}.&quot;, name );\n   }\n};\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_RemotingServices_IsTransparentProxy_System_Object_\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_RemotingServices_IsTransparentProxy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsTransparentProxy(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a Boolean value that indicates whether the given object is a transparent proxy or a real object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsTransparentProxy (object proxy);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>proxy</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The reference to the object to check.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>A Boolean value that indicates whether the object specified in the <code>proxy</code> parameter is a transparent proxy or a real object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A client that uses an object across any kind of a remoting boundary is actually using a transparent proxy for the object. The transparent proxy gives the impression that the actual object resides in the client&#39;s space. It achieves this by forwarding calls made on it to the real object using the remoting infrastructure.  </p>\n<p> The transparent proxy is itself housed by an instance of a managed runtime class of type <a class=\"xref\" href=\"system.runtime.remoting.proxies.realproxy\" data-linktype=\"relative-path\">RealProxy</a>. The <a class=\"xref\" href=\"system.runtime.remoting.proxies.realproxy\" data-linktype=\"relative-path\">RealProxy</a> implements a part of the functionality needed to forward the operations from the transparent proxy. A proxy object inherits the associated semantics of managed objects such as garbage collection, support for members and methods, and can be extended to form new classes. Thus the proxy has a dual nature; on the one hand it needs to act as an object of the same class as the remote object (transparent proxy), and on the other it is a managed object itself.  </p>\n<p> A proxy object can be used without regard to any remoting subdivisions within a <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a>. Applications need not distinguish between proxy references and object references. However, service providers dealing with issues such as activation, lifetime management, and transactions need to make such distinctions.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the IsTransparentProxy method to determine whether an object is a proxy or a real object. For the complete example code, see the example for the <a class=\"xref\" href=\"system.runtime.remoting.messaging.asyncresult\" data-linktype=\"relative-path\">AsyncResult</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"AsyncResult.NewExamples#6\">   // Creates an instance of a context-bound type SampleSynchronized.\n   SampleSynchronized^ sampSyncObj = gcnew SampleSynchronized;\n   \n   // Checks whether the Object* is a proxy, since it is context-bound.\n   if ( RemotingServices::IsTransparentProxy( sampSyncObj ) )\n      Console::WriteLine( &quot;sampSyncObj is a proxy.&quot; );\n   else\n      Console::WriteLine( &quot;sampSyncObj is NOT a proxy.&quot; );\n\n   \n</code></pre><pre><code class=\"lang-vb\" name=\"AsyncResult.NewExamples#6\">      &#39; Creates an instance of a context-bound type SampleSynchronized.\n      Dim sampSyncObj As New SampleSynchronized()\n      \n      &#39; Checks whether the object is a proxy, since it is context-bound.\n      If RemotingServices.IsTransparentProxy(sampSyncObj) Then\n         Console.WriteLine(&quot;sampSyncObj is a proxy.&quot;)\n      Else\n         Console.WriteLine(&quot;sampSyncObj is NOT a proxy.&quot;)\n      End If \n</code></pre><pre><code class=\"lang-cs\" name=\"AsyncResult.NewExamples#6\">        // Creates an instance of a context-bound type SampleSynchronized.\n        SampleSynchronized sampSyncObj = new SampleSynchronized();\n\n        // Checks whether the object is a proxy, since it is context-bound.\n        if (RemotingServices.IsTransparentProxy(sampSyncObj))\n            Console.WriteLine(&quot;sampSyncObj is a proxy.&quot;);\n        else\n            Console.WriteLine(&quot;sampSyncObj is NOT a proxy.&quot;);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_RemotingServices_LogRemotingStage_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_RemotingServices_LogRemotingStage_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LogRemotingStage(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Logs the stage in a remoting exchange to an external debugger.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void LogRemotingStage (int stage);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stage</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An internally defined constant that identifies the stage in a remoting exchange.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <code>&quot;REMOTING_PERF&quot;</code> preprocessing symbol is applied to the method by using the <a class=\"xref\" href=\"system.diagnostics.conditionalattribute\" data-linktype=\"relative-path\">ConditionalAttribute</a> attribute.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_RemotingServices_Marshal_System_MarshalByRefObject_\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_RemotingServices_Marshal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Marshal(MarshalByRefObject)</div>        \r\n          </div>\r\n    \r\n            <p>Takes a <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>, registers it with the remoting infrastructure, and converts it into an instance of the <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Runtime.Remoting.ObjRef Marshal (MarshalByRefObject Obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a></div>\r\n                  </div>\r\n                  <p>An instance of the <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> class that represents the object specified in the <code>Obj</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.remotingexception\" data-linktype=\"relative-path\">RemotingException</a></div>\r\n                  </div>\r\n                  <p>The <code>Obj</code> parameter is an object proxy.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> is a serializable representation of an object used to transfer an object reference across an application domain boundary. Creating a <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> for an object is known as marshaling. The <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> can be transferred through a channel into another application domain (possibly on another process or computer). Once in the other application domain, the <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> must be parsed to create a proxy for the object, generally connected to the real object. This operation is known as unmarshaling.  </p>\n<p> A <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> contains information that describes the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> and class of the object being marshaled, a URI that uniquely identifies the specific object instance, and communication related information about how to reach the remoting subdivision where the object is located.  </p>\n<p> During marshaling, the context from the current thread is used, not the context that was active when the object was created. If a URI was not explicitly set by the <a class=\"xref\" href=\"system.runtime.remoting.remotingservices#System_Runtime_Remoting_RemotingServices_SetObjectUriForMarshal_\" data-linktype=\"relative-path\">SetObjectUriForMarshal</a> method, it is automatically generated by the remoting identity infrastructure.  </p>\n<p> You cannot associate a URI with a proxy for one of two reasons: either the URI was generated at the server side for the object it represents, or the object is well known, in which case the URI is known. For this reason, if the <code>Obj</code> parameter is a proxy, an exception will be thrown. For custom proxies this restriction is relaxed because the transparent proxy is treated as the server object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_RemotingServices_Marshal_System_MarshalByRefObject_System_String_\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_RemotingServices_Marshal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Marshal(MarshalByRefObject,String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the given <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a> into an instance of the <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> class with the specified URI.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Runtime.Remoting.ObjRef Marshal (MarshalByRefObject Obj, string URI);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>URI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The specified URI with which to initialize the new <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a>. Can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a></div>\r\n                  </div>\r\n                  <p>An instance of the <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> class that represents the object specified in the <code>Obj</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.remotingexception\" data-linktype=\"relative-path\">RemotingException</a></div>\r\n                  </div>\r\n                  <p><code>Obj</code> is an object proxy, and the <code>URI</code> parameter is not <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> is a serializable representation of an object used to transfer an object reference across an application domain boundary. Creating a <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> for an object is known as marshaling. The <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> can be transferred through a channel into another application domain (possibly on another process or computer). Once in the other application domain, the <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> must be parsed to create a proxy for the object, generally connected to the real object. This operation is known as unmarshaling.  </p>\n<p> A <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> contains information that describes the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> and class of the object being marshaled, a URI that uniquely identifies the specific object instance, and communication related information about how to reach the remoting subdivision where the object is located.  </p>\n<p> During marshaling, the context from the current thread is used, not the context that was active when the object was created.  </p>\n<p> You cannot associate a URI with a proxy for one of two reasons: either the URI was generated at the server side for the object it represents, or the object is well known, in which case the URI is known. For this reason, if the <code>Obj</code> parameter is a proxy, an exception will be thrown. For custom proxies this restriction is relaxed because the transparent proxy is treated as the server object.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the current <a class=\"xref\" href=\"system.runtime.remoting.remotingservices#System_Runtime_Remoting_RemotingServices_Marshal_\" data-linktype=\"relative-path\">Marshal</a> method to marshal a specified object.  </p>\n<pre><code class=\"lang-cpp\" name=\"RemotingServices.BasicSample#2\">   TcpChannel^ channel = gcnew TcpChannel( 9000 );\n   ChannelServices::RegisterChannel( channel );\n   SampleWellKnown ^ objectWellKnown = gcnew SampleWellKnown;\n\n   // After the channel is registered, the Object* needs to be registered\n   // with the remoting infrastructure.  So, Marshal is called.\n   ObjRef^ objrefWellKnown = RemotingServices::Marshal( objectWellKnown, &quot;objectWellKnownUri&quot; );\n   Console::WriteLine( &quot;An instance of SampleWellKnown type is published at {0}.&quot;, objrefWellKnown-&gt;URI );\n   Console::WriteLine( &quot;Press enter to unregister SampleWellKnown, so that it is no longer available on this channel.&quot; );\n   Console::ReadLine();\n   RemotingServices::Disconnect( objectWellKnown );\n   Console::WriteLine( &quot;Press enter to end the server process.&quot; );\n   Console::ReadLine();\n</code></pre><pre><code class=\"lang-cs\" name=\"RemotingServices.BasicSample#2\">      TcpChannel channel = new TcpChannel(9000);\n      ChannelServices.RegisterChannel(channel);\n\n      SampleWellKnown objectWellKnown = new SampleWellKnown();\n      \n      // After the channel is registered, the object needs to be registered\n      // with the remoting infrastructure.  So, Marshal is called.\n      ObjRef objrefWellKnown = RemotingServices.Marshal(objectWellKnown, &quot;objectWellKnownUri&quot;);\n      Console.WriteLine(&quot;An instance of SampleWellKnown type is published at {0}.&quot;, objrefWellKnown.URI);\n\n      Console.WriteLine(&quot;Press enter to unregister SampleWellKnown, so that it is no longer available on this channel.&quot;);\n      Console.ReadLine();\n      RemotingServices.Disconnect(objectWellKnown);\n\n      Console.WriteLine(&quot;Press enter to end the server process.&quot;);\n      Console.ReadLine();\n</code></pre><pre><code class=\"lang-vb\" name=\"RemotingServices.BasicSample#2\">      Dim channel As New TcpChannel(9000)\n      ChannelServices.RegisterChannel(channel)\n      \n      Dim objectWellKnown As New SampleWellKnown()\n      &#39; After the channel is registered, the object needs to be registered\n      &#39; with the remoting infrastructure.  So, Marshal is called.\n      Dim objrefWellKnown As ObjRef = RemotingServices.Marshal(objectWellKnown, &quot;objectWellKnownUri&quot;)\n      Console.WriteLine(&quot;An instance of SampleWellKnown type is published at {0}.&quot;, objrefWellKnown.URI)\n      \n      Console.WriteLine(&quot;Press enter to unregister SampleWellKnown, so that it is no longer available on this channel.&quot;)\n      Console.ReadLine()\n      RemotingServices.Disconnect(objectWellKnown)\n      Console.WriteLine(&quot;Press enter to end the server process.&quot;)\n      Console.ReadLine()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_RemotingServices_Marshal_System_MarshalByRefObject_System_String_System_Type_\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_RemotingServices_Marshal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Marshal(MarshalByRefObject,String,Type)</div>        \r\n          </div>\r\n    \r\n            <p>Takes a <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a> and converts it into an instance of the <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> class with the specified URI, and the provided <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Runtime.Remoting.ObjRef Marshal (MarshalByRefObject Obj, string ObjURI, Type RequestedType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>Obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to convert into a <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ObjURI</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The URI the object specified in the <code>Obj</code> parameter is marshaled with. Can be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>RequestedType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a><code>Obj</code> is marshaled as. Can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a></div>\r\n                  </div>\r\n                  <p>An instance of the <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> class that represents the object specified in the <code>Obj</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.remotingexception\" data-linktype=\"relative-path\">RemotingException</a></div>\r\n                  </div>\r\n                  <p><code>Obj</code> is a proxy of a remote object, and the <code>ObjUri</code> parameter is not <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> is a serializable representation of an object used to transfer an object reference across an application domain boundary. Creating a <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> for an object is known as marshaling. The <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> can be transferred through a channel into another application domain (possibly on another process or computer). Once in the other application domain, the <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> must be parsed to create a proxy for the object, generally connected to the real object. This operation is known as unmarshaling.  </p>\n<p> A <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> contains information that describes the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> and class of the object being marshaled, a URI that uniquely identifies the specific object instance, and communication related information about how to reach the remoting subdivision where the object is located.  </p>\n<p> The specified <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> is used by the remoting infrastructure to limit the scope of the exposed type hierarchy. For example, if object A derives from object B, which derives from object C, and <a class=\"xref\" href=\"system.runtime.remoting.remotingservices#System_Runtime_Remoting_RemotingServices_Marshal_\" data-linktype=\"relative-path\">Marshal</a> is called, then the client can cast the proxy between C and B but not to A.  </p>\n<p> During marshaling, the context from the current thread is used, not the context that was active when the object was created.  </p>\n<p> You cannot associate a URI with a proxy for one of two reasons: either the URI was generated at the server side for the object it represents, or the object is well known, in which case the URI is known. For this reason, if the <code>Obj</code> parameter is a proxy, an exception will be thrown. For custom proxies this restriction is relaxed because the transparent proxy is treated as the server object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_RemotingServices_SetObjectUriForMarshal_System_MarshalByRefObject_System_String_\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_RemotingServices_SetObjectUriForMarshal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetObjectUriForMarshal(MarshalByRefObject,String)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the URI for the subsequent call to the <span class=\"xref\">stem.Runtime.Remoting.RemotingServices.Marshal*</span> method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void SetObjectUriForMarshal (MarshalByRefObject obj, string uri);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to set a URI for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>uri</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The URI to assign to the specified object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.remotingexception\" data-linktype=\"relative-path\">RemotingException</a></div>\r\n                  </div>\r\n                  <p><code>obj</code> is not a local object, has already been marshaled, or the current method has already been called on.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The URI set by the current method is used when marshaling the given object.  </p>\n<p> After marshaling, the URI of the specified object is set to the string in the <code>uri</code> parameter appended onto the <a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a> of the current <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a>.  </p>\n<p> If the current application is listening on an HTTP port, then both the string specified in the <code>uri</code> parameter and the <code>uri</code> string appended onto the <a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a> of the current <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a> route to the specified object. For example, if the application is listening on HTTP port 9000, then both <a href=\"http://localhost:9000/objectUri\" data-linktype=\"external\">http://localhost:9000/objectUri</a>, and http://localhost:9000/&lt;appdomainguid&gt;/objectUri route to the object specified in the <code>obj</code> parameter.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to set the URI that will be used by the <a class=\"xref\" href=\"system.runtime.remoting.remotingservices#System_Runtime_Remoting_RemotingServices_Marshal_\" data-linktype=\"relative-path\">Marshal</a> method when marshaling the specified object.  </p>\n<pre><code class=\"lang-cpp\" name=\"RemotingServices.SetObjectUriForMarshal#1\">using namespace System;\nusing namespace System::Runtime::Remoting;\nusing namespace System::Security::Permissions;\n\npublic ref class SetObjectUriForMarshalTest\n{\npublic:\n   ref class TestClass: public MarshalByRefObject{};\n\n   [SecurityPermissionAttribute(SecurityAction::Demand, Flags=SecurityPermissionFlag::RemotingConfiguration)]   \n   static void Main()\n   {\n      TestClass^ obj = gcnew TestClass;\n      RemotingServices::SetObjectUriForMarshal( obj,  &quot;testUri&quot; );\n      RemotingServices::Marshal(obj);\n      Console::WriteLine( RemotingServices::GetObjectUri( obj ) );\n   }\n\n};\n</code></pre><pre><code class=\"lang-cs\" name=\"RemotingServices.SetObjectUriForMarshal#1\">using System;\nusing System.Runtime.Remoting;\nusing System.Security.Permissions;\n\npublic class SetObjectUriForMarshalTest  {\n\n    class TestClass : MarshalByRefObject {\n    }\n\n    [SecurityPermission(SecurityAction.Demand, Flags=SecurityPermissionFlag.RemotingConfiguration)] \n    public static void Main()  {\n\n        TestClass obj = new TestClass();    \n\n        RemotingServices.SetObjectUriForMarshal(obj, &quot;testUri&quot;);\n        RemotingServices.Marshal(obj);\n\n        Console.WriteLine(RemotingServices.GetObjectUri(obj));\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"RemotingServices.SetObjectUriForMarshal#1\">Imports System.Runtime.Remoting\nImports System.Security.Permissions\n\n\nPublic Class SetObjectUriForMarshalTest\n    \n    Class TestClass\n        Inherits MarshalByRefObject\n    End Class\n\n    &lt;SecurityPermission(SecurityAction.Demand, Flags:= SecurityPermissionFlag.RemotingConfiguration )&gt; _\n    Public Shared Sub Main()\n        Dim obj As TestClass = New TestClass()\n\n        RemotingServices.SetObjectUriForMarshal(obj, &quot;testUri&quot;)\n        RemotingServices.Marshal(obj)\n\n        Console.WriteLine(RemotingServices.GetObjectUri(obj))\n    End Sub\n\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_RemotingServices_Unmarshal_System_Runtime_Remoting_ObjRef_\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_RemotingServices_Unmarshal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Unmarshal(ObjRef)</div>        \r\n          </div>\r\n    \r\n            <p>Takes a <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> and creates a proxy object out of it.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object Unmarshal (System.Runtime.Remoting.ObjRef objectRef);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>objectRef</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> that represents the remote object for which the proxy is being created.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>A proxy to the object that the given <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> represents.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> instance specified in the <code>objectRef</code> parameter is not well-formed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> is a serializable representation of an object used to transfer an object reference across an application domain boundary. Creating a <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> for an object is known as marshaling. The <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> can be transferred through a channel into another application domain (possibly on another process or computer). Once in the other application domain, the <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> must be parsed to create a proxy for the object, generally connected to the real object. This operation is known as unmarshaling. During unmarshaling, the <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> is parsed to extract the method information of the remote object and both the transparent proxy and <a class=\"xref\" href=\"system.runtime.remoting.proxies.realproxy\" data-linktype=\"relative-path\">RealProxy</a> objects are created. The content of the parsed <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> is added to the transparent proxy before the transparent proxy is registered with the common language runtime.  </p>\n<p> A <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> contains information that describes the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> and class of the object being marshaled, a URI that uniquely identifies the specific object instance, and communication related information about how to reach the remoting subdivision where the object is located.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to unmarshal an object.  </p>\n<pre><code class=\"lang-vb\" name=\"RemotingServices.Unmarshal#2\">      ChannelServices.RegisterChannel(New HttpChannel())\n\n      Dim objectSample As SampleService = CType(Activator.GetObject(GetType(SampleService), _ \n            &quot;http://localhost:9000/MySampleService/SampleService.soap&quot;), SampleService)\n\n      &#39; The GetManuallyMarshaledObject() method uses RemotingServices.Marshal()\n      &#39; to create an ObjRef object for a SampleTwo object.\n      Dim objRefSampleTwo As ObjRef = objectSample.GetManuallyMarshaledObject()\n\n      Dim objectSampleTwo As SampleTwo = CType(RemotingServices.Unmarshal(objRefSampleTwo), SampleTwo)\n\n      objectSampleTwo.PrintMessage(&quot;I successfully unmarshaled your ObjRef.  Thanks.&quot;)\n</code></pre><pre><code class=\"lang-cpp\" name=\"RemotingServices.Unmarshal#2\">   ChannelServices::RegisterChannel( gcnew HttpChannel );\n\n   SampleService ^ objectSample = (SampleService^)( Activator::GetObject( SampleService::typeid,\n      &quot;http://localhost:9000/MySampleService/SampleService.soap&quot; ) );\n   \n   // The GetManuallyMarshaledObject() method uses RemotingServices::Marshal()\n   // to create an ObjRef object for a SampleTwo object.\n   ObjRef^ objRefSampleTwo = objectSample-&gt;GetManuallyMarshaledObject();\n\n   SampleTwo ^ objectSampleTwo = (SampleTwo^)( RemotingServices::Unmarshal( objRefSampleTwo ) );\n\n   objectSampleTwo-&gt;PrintMessage( &quot;ObjRef successfuly unmarshaled.&quot; );\n</code></pre><pre><code class=\"lang-cs\" name=\"RemotingServices.Unmarshal#2\">        ChannelServices.RegisterChannel(new HttpChannel());\n\n        SampleService objectSample = (SampleService)Activator.GetObject(typeof(SampleService), \n            &quot;http://localhost:9000/MySampleService/SampleService.soap&quot;);\n\n        // The GetManuallyMarshaledObject() method uses RemotingServices.Marshal()\n        // to create an ObjRef object for a SampleTwo object.\n        ObjRef objRefSampleTwo = objectSample.GetManuallyMarshaledObject();\n\n        SampleTwo objectSampleTwo = (SampleTwo)RemotingServices.Unmarshal(objRefSampleTwo);\n\n        objectSampleTwo.PrintMessage(&quot;ObjRef successfuly unmarshaled.&quot;); \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_RemotingServices_Unmarshal_System_Runtime_Remoting_ObjRef_System_Boolean_\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_RemotingServices_Unmarshal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Unmarshal(ObjRef,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Takes a <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> and creates a proxy object out of it, refining it to the type on the server.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object Unmarshal (System.Runtime.Remoting.ObjRef objectRef, bool fRefine);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>objectRef</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> that represents the remote object for which the proxy is being created.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fRefine</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to refine the proxy to the type on the server; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>A proxy to the object that the given <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> represents.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> instance specified in the <code>objectRef</code> parameter is not well-formed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> is a serializable representation of an object used to transfer an object reference across an application domain boundary. Creating a <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> for an object is known as marshaling. The <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> can be transferred through a channel into another application domain (possibly on another process or computer). Once in the other application domain, the <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> must be parsed to create a proxy for the object, generally connected to the real object. This operation is known as unmarshaling. During unmarshaling, the <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> is parsed to extract the method information of the remote object and both the transparent proxy and <a class=\"xref\" href=\"system.runtime.remoting.proxies.realproxy\" data-linktype=\"relative-path\">RealProxy</a> objects are created. The content of the parsed <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> is added to the transparent proxy before the transparent proxy is registered with the common language runtime.  </p>\n<p> A <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> contains information that describes the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> and class of the object being marshaled, a URI that uniquely identifies the specific object instance, and communication related information about how to reach the remoting subdivision where the object is located.  </p>\n<p> When first created, the proxy is of type <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>. As you cast it into different types, the remoting infrastructure keeps track of the most used type to avoid loading the type unnecessarily.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Runtime.Remoting.RemotingServices.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Runtime.Remoting.RemotingServices.yml\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.RemotingServices\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.RemotingServices.Connect\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.RemotingServices.Disconnect\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.RemotingServices.ExecuteMessage\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.RemotingServices.GetEnvoyChainForProxy\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.RemotingServices.GetLifetimeService\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.RemotingServices.GetMethodBaseFromMethodMessage\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.RemotingServices.GetObjectData\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.RemotingServices.GetObjectUri\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.RemotingServices.GetObjRefForProxy\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.RemotingServices.GetRealProxy\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.RemotingServices.GetServerTypeForUri\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.RemotingServices.GetSessionIdForMethodMessage\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.RemotingServices.IsMethodOverloaded\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.RemotingServices.IsObjectOutOfAppDomain\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.RemotingServices.IsObjectOutOfContext\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.RemotingServices.IsOneWay\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.RemotingServices.IsTransparentProxy\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.RemotingServices.LogRemotingStage\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.RemotingServices.Marshal\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.RemotingServices.SetObjectUriForMarshal\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.RemotingServices.Unmarshal\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"9df331e2-4b16-c28d-2d4f-94c3250e4695\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Runtime.Remoting\\RemotingServices.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides several methods for using and publishing remoted objects and proxies. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Runtime.Remoting/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Runtime.Remoting.RemotingServices\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Runtime.Remoting.RemotingServices.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Runtime.Remoting.RemotingServices.yml","open_to_public_contributors":true,"api_name":["System.Runtime.Remoting.RemotingServices","System.Runtime.Remoting.RemotingServices.Connect","System.Runtime.Remoting.RemotingServices.Disconnect","System.Runtime.Remoting.RemotingServices.ExecuteMessage","System.Runtime.Remoting.RemotingServices.GetEnvoyChainForProxy","System.Runtime.Remoting.RemotingServices.GetLifetimeService","System.Runtime.Remoting.RemotingServices.GetMethodBaseFromMethodMessage","System.Runtime.Remoting.RemotingServices.GetObjectData","System.Runtime.Remoting.RemotingServices.GetObjectUri","System.Runtime.Remoting.RemotingServices.GetObjRefForProxy","System.Runtime.Remoting.RemotingServices.GetRealProxy","System.Runtime.Remoting.RemotingServices.GetServerTypeForUri","System.Runtime.Remoting.RemotingServices.GetSessionIdForMethodMessage","System.Runtime.Remoting.RemotingServices.IsMethodOverloaded","System.Runtime.Remoting.RemotingServices.IsObjectOutOfAppDomain","System.Runtime.Remoting.RemotingServices.IsObjectOutOfContext","System.Runtime.Remoting.RemotingServices.IsOneWay","System.Runtime.Remoting.RemotingServices.IsTransparentProxy","System.Runtime.Remoting.RemotingServices.LogRemotingStage","System.Runtime.Remoting.RemotingServices.Marshal","System.Runtime.Remoting.RemotingServices.SetObjectUriForMarshal","System.Runtime.Remoting.RemotingServices.Unmarshal"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Runtime.Remoting.RemotingServices","System::Runtime::Remoting::RemotingServices","System.Runtime.Remoting.RemotingServices.Connect","System::Runtime::Remoting::RemotingServices::Connect","System.Runtime.Remoting.RemotingServices.Disconnect","System::Runtime::Remoting::RemotingServices::Disconnect","System.Runtime.Remoting.RemotingServices.ExecuteMessage","System::Runtime::Remoting::RemotingServices::ExecuteMessage","System.Runtime.Remoting.RemotingServices.GetEnvoyChainForProxy","System::Runtime::Remoting::RemotingServices::GetEnvoyChainForProxy","System.Runtime.Remoting.RemotingServices.GetLifetimeService","System::Runtime::Remoting::RemotingServices::GetLifetimeService","System.Runtime.Remoting.RemotingServices.GetMethodBaseFromMethodMessage","System::Runtime::Remoting::RemotingServices::GetMethodBaseFromMethodMessage","System.Runtime.Remoting.RemotingServices.GetObjectData","System::Runtime::Remoting::RemotingServices::GetObjectData","System.Runtime.Remoting.RemotingServices.GetObjectUri","System::Runtime::Remoting::RemotingServices::GetObjectUri","System.Runtime.Remoting.RemotingServices.GetObjRefForProxy","System::Runtime::Remoting::RemotingServices::GetObjRefForProxy","System.Runtime.Remoting.RemotingServices.GetRealProxy","System::Runtime::Remoting::RemotingServices::GetRealProxy","System.Runtime.Remoting.RemotingServices.GetServerTypeForUri","System::Runtime::Remoting::RemotingServices::GetServerTypeForUri","System.Runtime.Remoting.RemotingServices.GetSessionIdForMethodMessage","System::Runtime::Remoting::RemotingServices::GetSessionIdForMethodMessage","System.Runtime.Remoting.RemotingServices.IsMethodOverloaded","System::Runtime::Remoting::RemotingServices::IsMethodOverloaded","System.Runtime.Remoting.RemotingServices.IsObjectOutOfAppDomain","System::Runtime::Remoting::RemotingServices::IsObjectOutOfAppDomain","System.Runtime.Remoting.RemotingServices.IsObjectOutOfContext","System::Runtime::Remoting::RemotingServices::IsObjectOutOfContext","System.Runtime.Remoting.RemotingServices.IsOneWay","System::Runtime::Remoting::RemotingServices::IsOneWay","System.Runtime.Remoting.RemotingServices.IsTransparentProxy","System::Runtime::Remoting::RemotingServices::IsTransparentProxy","System.Runtime.Remoting.RemotingServices.LogRemotingStage","System::Runtime::Remoting::RemotingServices::LogRemotingStage","System.Runtime.Remoting.RemotingServices.Marshal","System::Runtime::Remoting::RemotingServices::Marshal","System.Runtime.Remoting.RemotingServices.SetObjectUriForMarshal","System::Runtime::Remoting::RemotingServices::SetObjectUriForMarshal","System.Runtime.Remoting.RemotingServices.Unmarshal","System::Runtime::Remoting::RemotingServices::Unmarshal"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"9df331e2-4b16-c28d-2d4f-94c3250e4695","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Runtime.Remoting\\RemotingServices.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Runtime.Remoting/RemotingServices.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"RemotingServices class | Microsoft Docs","_op_ogTitle":"RemotingServices class","description":"Provides several methods for using and publishing remoted objects and proxies. This class cannot be inherited.\n","toc_asset_id":"_splitted/System.Runtime.Remoting/toc.json","toc_rel":"_splitted/System.Runtime.Remoting/toc.json","source_url":"","ms.assetid":"System.Runtime.Remoting.RemotingServices","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.runtime.remoting.remotingservices","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.runtime.remoting.remotingservices","fileRelativePath":"System.Runtime.Remoting.RemotingServices.html"},"themesRelativePathToOutputRoot":"_themes/"}