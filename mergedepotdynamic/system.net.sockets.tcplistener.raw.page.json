{"content":"    \r\n    <h1 id=\"System_Net_Sockets_TcpListener\">\r\n      <span class=\"lang-csharp\">TcpListener</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Listens for connections from TCP network clients.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class TcpListener</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">TcpListener</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The TcpListener class provides simple methods that listen for and accept incoming connection requests in blocking synchronous mode. You can use either a <a class=\"xref\" href=\"system.net.sockets.tcpclient\" data-linktype=\"relative-path\">TcpClient</a> or a <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> to connect with a TcpListener. Create a TcpListener using an <a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a>, a Local IP address and port number, or just a port number. Specify <a class=\"xref\" href=\"system.net.ipaddress#System_Net_IPAddress_Any\" data-linktype=\"relative-path\">Any</a> for the local IP address and 0 for the local port number if you want the underlying service provider to assign those values for you. If you choose to do this, you can use the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_LocalEndpoint_\" data-linktype=\"relative-path\">LocalEndpoint</a> property to identify the assigned information, after the socket has connected.  </p>\n<p> Use the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_Start_\" data-linktype=\"relative-path\">Start</a> method to begin listening for incoming connection requests. <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_Start_\" data-linktype=\"relative-path\">Start</a> will queue incoming connections until you either call the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_Stop_\" data-linktype=\"relative-path\">Stop</a> method or it has queued <a class=\"xref\" href=\"system.net.sockets.socketoptionname\" data-linktype=\"relative-path\">SocketOptionName</a>. Use either <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_AcceptSocket_\" data-linktype=\"relative-path\">AcceptSocket</a> or <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_AcceptTcpClient_\" data-linktype=\"relative-path\">AcceptTcpClient</a> to pull a connection from the incoming connection request queue. These two methods will block. If you want to avoid blocking, you can use the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_Pending_\" data-linktype=\"relative-path\">Pending</a> method first to determine if connection requests are available in the queue.  </p>\n<p> Call the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_Stop_\" data-linktype=\"relative-path\">Stop</a> method to close the TcpListener.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_Stop_\" data-linktype=\"relative-path\">Stop</a> method does not close any accepted connections. You are responsible for closing these separately.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_TcpListener__ctor_System_Int32_\" data-linktype=\"self-bookmark\">TcpListener(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a> class that listens on the specified port.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_TcpListener__ctor_System_Net_IPEndPoint_\" data-linktype=\"self-bookmark\">TcpListener(IPEndPoint)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a> class with the specified local endpoint.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_TcpListener__ctor_System_Net_IPAddress_System_Int32_\" data-linktype=\"self-bookmark\">TcpListener(IPAddress,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a> class that listens for incoming connection attempts on the specified local IP address and port number.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_TcpListener_Active\" data-linktype=\"self-bookmark\">Active</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether <a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a> is actively listening for client connections.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_TcpListener_ExclusiveAddressUse\" data-linktype=\"self-bookmark\">ExclusiveAddressUse</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that specifies whether the <a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a> allows only one underlying socket to listen to a specific port.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_TcpListener_LocalEndpoint\" data-linktype=\"self-bookmark\">LocalEndpoint</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the underlying <a class=\"xref\" href=\"system.net.endpoint\" data-linktype=\"relative-path\">EndPoint</a> of the current <a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_TcpListener_Server\" data-linktype=\"self-bookmark\">Server</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the underlying network <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_TcpListener_AcceptSocket\" data-linktype=\"self-bookmark\">AcceptSocket()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Accepts a pending connection request.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_TcpListener_AcceptSocketAsync\" data-linktype=\"self-bookmark\">AcceptSocketAsync()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Accepts a pending connection request as an asynchronous operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_TcpListener_AcceptTcpClient\" data-linktype=\"self-bookmark\">AcceptTcpClient()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Accepts a pending connection request.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_TcpListener_AcceptTcpClientAsync\" data-linktype=\"self-bookmark\">AcceptTcpClientAsync()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Accepts a pending connection request as an asynchronous operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_TcpListener_AllowNatTraversal_System_Boolean_\" data-linktype=\"self-bookmark\">AllowNatTraversal(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Enables or disables Network Address Translation (NAT) traversal on a <a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_TcpListener_BeginAcceptSocket_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginAcceptSocket(AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Begins an asynchronous operation to accept an incoming connection attempt.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_TcpListener_BeginAcceptTcpClient_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginAcceptTcpClient(AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Begins an asynchronous operation to accept an incoming connection attempt.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_TcpListener_Create_System_Int32_\" data-linktype=\"self-bookmark\">Create(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a> instance to listen on the specified port.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_TcpListener_EndAcceptSocket_System_IAsyncResult_\" data-linktype=\"self-bookmark\">EndAcceptSocket(IAsyncResult)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Asynchronously accepts an incoming connection attempt and creates a new <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> to handle remote host communication.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_TcpListener_EndAcceptTcpClient_System_IAsyncResult_\" data-linktype=\"self-bookmark\">EndAcceptTcpClient(IAsyncResult)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Asynchronously accepts an incoming connection attempt and creates a new <a class=\"xref\" href=\"system.net.sockets.tcpclient\" data-linktype=\"relative-path\">TcpClient</a> to handle remote host communication.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_TcpListener_Pending\" data-linktype=\"self-bookmark\">Pending()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines if there are pending connection requests.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_TcpListener_Start\" data-linktype=\"self-bookmark\">Start()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Starts listening for incoming connection requests.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_TcpListener_Start_System_Int32_\" data-linktype=\"self-bookmark\">Start(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Starts listening for incoming connection requests with a maximum number of pending connection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Sockets_TcpListener_Stop\" data-linktype=\"self-bookmark\">Stop()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Closes the listener.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_TcpListener__ctor_System_Int32_\">\r\n    \r\n            <a id=\"System_Net_Sockets_TcpListener__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TcpListener(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a> class that listens on the specified port.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TcpListener (int port);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>port</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The port on which to listen for incoming connection attempts.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>port</code> is not between <a class=\"xref\" href=\"system.net.ipendpoint#System_Net_IPEndPoint_MinPort\" data-linktype=\"relative-path\">MinPort</a> and <a class=\"xref\" href=\"system.net.ipendpoint#System_Net_IPEndPoint_MaxPort\" data-linktype=\"relative-path\">MaxPort</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor is obsolete. Use the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener__ctor_System_Net_IPAddress_System_Int32_\" data-linktype=\"relative-path\">System.Net.Sockets.TcpListener.TcpListener(IPAddress,Int32)</a> or <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener__ctor_System_Net_IPEndPoint_\" data-linktype=\"relative-path\">System.Net.Sockets.TcpListener.TcpListener(IPEndPoint)</a> constructors.  </p>\n<p> This constructor allows you to specify the port number on which to listen for incoming connection attempts. With this constructor, the underlying service provider assigns the most appropriate network address. If you do not care which local port is used, you can specify 0 for the port number. In this case, the service provider will assign an available port number between 1024 and 5000. If you use this approach, you can discover what local network address and port number has been assigned by using the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_LocalEndpoint_\" data-linktype=\"relative-path\">LocalEndpoint</a> property.  </p>\n<p> Call the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_Start_\" data-linktype=\"relative-path\">Start</a> method to begin listening for incoming connection attempts.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a <a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a> using a local port number.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic TcpListener.PublicMethodsAndPropertiesExample#3\">      //Creates an instance of the TcpListener class by providing a local port number.  \n\n      IPAddress^ ipAddress = Dns::Resolve( &quot;localhost&quot; )-&gt;AddressList[ 0 ];\n\n      try\n      {\n         TcpListener^ tcpListener = gcnew TcpListener( ipAddress,13 );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( e-&gt;ToString() );\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic TcpListener.PublicMethodsAndPropertiesExample#3\">        //Creates an instance of the TcpListener class by providing a local port number.  \n\t\tIPAddress ipAddress = Dns.Resolve(&quot;localhost&quot;).AddressList[0];\n        try{\n            TcpListener tcpListener =  new TcpListener(ipAddress, 13);    \n        }\n        catch ( Exception e ){\n            Console.WriteLine( e.ToString());\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic TcpListener.PublicMethodsAndPropertiesExample#3\">               &#39;Creates an instance of the TcpListener class by providing a local port number.  \n               Dim ipAddress As IPAddress = Dns.Resolve(&quot;localhost&quot;).AddressList(0)\n               Try\n               \tDim tcpListener As New TcpListener(ipAddress, 13)\n               Catch e As Exception\n                  Console.WriteLine(e.ToString())\n               End Try\n            \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_TcpListener__ctor_System_Net_IPEndPoint_\">\r\n    \r\n            <a id=\"System_Net_Sockets_TcpListener__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TcpListener(IPEndPoint)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a> class with the specified local endpoint.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TcpListener (System.Net.IPEndPoint localEP);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>localEP</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a> that represents the local endpoint to which to bind the listener <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>localEP</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor allows you to specify the local IP address and port number on which to listen for incoming connection attempts. Before using this constructor, you must create an <a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a> using the desired local IP address and port number. Pass this <a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a> to the constructor as the <code>localEP</code> parameter.  </p>\n<p> If you do not care which local address is assigned, you can create an <a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a> using <a class=\"xref\" href=\"system.net.ipaddress#System_Net_IPAddress_Any\" data-linktype=\"relative-path\">System.Net.IPAddress.Any</a> as the address parameter, and the underlying service provider will assign the most appropriate network address. This might help simplify your application if you have multiple network interfaces. If you do not care which local port is used, you can create an <a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a> using 0 for the port number. In this case, the service provider will assign an available port number between 1024 and 5000. If you use this approach, you can discover what local network address and port number has been assigned by using the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_LocalEndpoint_\" data-linktype=\"relative-path\">LocalEndpoint</a> property.  </p>\n<p> Call the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_Start_\" data-linktype=\"relative-path\">Start</a> method to begin listening for incoming connection attempts.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This member outputs trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates an instance of the <a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a> class using the local endpoint.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic TcpListener.PublicMethodsAndPropertiesExample#1\">      //Creates an instance of the TcpListener class by providing a local endpoint.\n\n      IPAddress^ ipAddress = Dns::Resolve( Dns::GetHostName() )-&gt;AddressList[ 0 ];\n      IPEndPoint^ ipLocalEndPoint = gcnew IPEndPoint( ipAddress,11000 );\n\n      try\n      {\n         TcpListener^ tcpListener = gcnew TcpListener( ipLocalEndPoint );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( e-&gt;ToString() );\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic TcpListener.PublicMethodsAndPropertiesExample#1\">        //Creates an instance of the TcpListener class by providing a local endpoint.\n\n        IPAddress ipAddress = Dns.Resolve(Dns.GetHostName()).AddressList[0];\n        IPEndPoint ipLocalEndPoint = new IPEndPoint(ipAddress, 11000); \n\n        try{\n            TcpListener tcpListener = new TcpListener(ipLocalEndPoint);\n        }\n        catch ( Exception e ){\n            Console.WriteLine( e.ToString());\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic TcpListener.PublicMethodsAndPropertiesExample#1\">         &#39;Creates an instance of the TcpListener class by providing a local endpoint.\n         Dim ipAddress As IPAddress = Dns.Resolve(Dns.GetHostName()).AddressList(0)\n         Dim ipLocalEndPoint As New IPEndPoint(ipAddress, 11000)\n         \n         Try\n            Dim tcpListener As New TcpListener(ipLocalEndPoint)\n         Catch e As Exception\n            Console.WriteLine(e.ToString())\n         End Try\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_TcpListener__ctor_System_Net_IPAddress_System_Int32_\">\r\n    \r\n            <a id=\"System_Net_Sockets_TcpListener__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TcpListener(IPAddress,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a> class that listens for incoming connection attempts on the specified local IP address and port number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TcpListener (System.Net.IPAddress localaddr, int port);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>localaddr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> that represents the local IP address.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>port</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The port on which to listen for incoming connection attempts.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>localaddr</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>port</code> is not between <a class=\"xref\" href=\"system.net.ipendpoint#System_Net_IPEndPoint_MinPort\" data-linktype=\"relative-path\">MinPort</a> and <a class=\"xref\" href=\"system.net.ipendpoint#System_Net_IPEndPoint_MaxPort\" data-linktype=\"relative-path\">MaxPort</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor allows you to specify the local IP address and port number on which to listen for incoming connection attempts. Before calling this constructor you must first create an <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> using the desired local address. Pass this <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> to the constructor as the <code>localaddr</code> parameter. If you do not care which local address is assigned, specify <a class=\"xref\" href=\"system.net.ipaddress#System_Net_IPAddress_Any\" data-linktype=\"relative-path\">System.Net.IPAddress.Any</a> for the <code>localaddr</code> parameter, and the underlying service provider will assign the most appropriate network address. This might help simplify your application if you have multiple network interfaces. If you do not care which local port is used, you can specify 0 for the port number. In this case, the service provider will assign an available port number between 1024 and 5000. If you use this approach, you can discover what local network address and port number has been assigned by using the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_LocalEndpoint_\" data-linktype=\"relative-path\">LocalEndpoint</a> property.  </p>\n<p> Call the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_Start_\" data-linktype=\"relative-path\">Start</a> method to begin listening for incoming connection attempts.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This member outputs trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates an instance of the <a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a> class using a local IP address and port number.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic TcpListener.PublicMethodsAndPropertiesExample#2\">      //Creates an instance of the TcpListener class by providing a local IP address and port number.\n\n      IPAddress^ ipAddress = Dns::Resolve( &quot;localhost&quot; )-&gt;AddressList[ 0 ];\n\n      try\n      {\n         TcpListener^ tcpListener = gcnew TcpListener( ipAddress,13 );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( e-&gt;ToString() );\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic TcpListener.PublicMethodsAndPropertiesExample#2\">        //Creates an instance of the TcpListener class by providing a local IP address and port number.\n\n        IPAddress ipAddress = Dns.Resolve(&quot;localhost&quot;).AddressList[0];\n\n        try{\n            TcpListener tcpListener =  new TcpListener(ipAddress, 13);    \n        }\n        catch ( Exception e){\n            Console.WriteLine( e.ToString());\n        }\n    \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic TcpListener.PublicMethodsAndPropertiesExample#2\">            &#39;Creates an instance of the TcpListener class by providing a local IP address and port number.\n            Dim ipAddress As IPAddress = Dns.Resolve(&quot;localhost&quot;).AddressList(0)\n            \n            Try\n               Dim tcpListener As New TcpListener(ipAddress, 13)\n            Catch e As Exception\n               Console.WriteLine(e.ToString())\n            End Try\n         \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_TcpListener_Active\">\r\n    \r\n            <a id=\"System_Net_Sockets_TcpListener_Active_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Active</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether <a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a> is actively listening for client connections.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected bool Active { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a> is actively listening; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Classes deriving from <a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a> can use this property to determine if the <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> is currently listening for incoming connection attempts. The <a class=\"xref\" href=\"system.net.sockets.tcpclient#System_Net_Sockets_TcpClient_Active_\" data-linktype=\"relative-path\">Active</a> property can be used to avoid redundant <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_Start_\" data-linktype=\"relative-path\">Start</a> attempts.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_TcpListener_ExclusiveAddressUse\">\r\n    \r\n            <a id=\"System_Net_Sockets_TcpListener_ExclusiveAddressUse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExclusiveAddressUse</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that specifies whether the <a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a> allows only one underlying socket to listen to a specific port.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool ExclusiveAddressUse { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a> allows only one <a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a> to listen to a specific port; otherwise, <code>false</code>. . The default is <code>true</code> for Windows Server 2003 and Windows XP Service Pack 2 and later, and <code>false</code> for all other versions.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a> has been started. Call the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_Stop\" data-linktype=\"relative-path\">Stop()</a> method and then set the <span class=\"xref\">stem.Net.Sockets.Socket.ExclusiveAddressUse*</span> property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when attempting to access the underlying socket.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> has been closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, multiple listeners can listen to a specific port. However, only one of the listeners can perform operations on the network traffic sent to the port. If more than one listener attempts to bind to a particular port, then the one with the more specific IP address handles the network traffic sent to that port. You can use the <a class=\"xref\" href=\"system.net.sockets.socket#System_Net_Sockets_Socket_ExclusiveAddressUse_\" data-linktype=\"relative-path\">ExclusiveAddressUse</a> property to prevent multiple listeners from listening to a specific port.  </p>\n<p> Set this property before calling <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_Start_\" data-linktype=\"relative-path\">Start</a>, or call the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_Stop_\" data-linktype=\"relative-path\">Stop</a> method and then set this property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example gets and sets the ExclusiveAddressUse property.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Net.Sockets.TcpListener1#2\">    public:\n        static void GetSetExclusiveAddressUse(TcpListener^ listener)\n        {\n            // Set Exclusive Address Use for the underlying socket.\n            listener-&gt;ExclusiveAddressUse = true;\n            Console::WriteLine(&quot;ExclusiveAddressUse value is {0}&quot;,\n                listener-&gt;ExclusiveAddressUse);\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.Sockets.TcpListener1#2\">        public static void GetSetExclusiveAddressUse(TcpListener t)\n        {\n            // Set Exclusive Address Use for the underlying socket.\n            t.ExclusiveAddressUse = true;\n            Console.WriteLine(&quot;ExclusiveAddressUse value is {0}&quot;,\n                t.ExclusiveAddressUse);\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.Sockets.TcpListener1#2\">   Public Shared Sub GetSetExclusiveAddressUse(t As TcpListener)\n      &#39; Set Exclusive Address Use for the underlying socket.\n      t.ExclusiveAddressUse = True\n      Console.WriteLine(&quot;ExclusiveAddressUse value is {0}&quot;, t.ExclusiveAddressUse)\n   End Sub &#39;GetSetExclusiveAddressUse\n   \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_TcpListener_LocalEndpoint\">\r\n    \r\n            <a id=\"System_Net_Sockets_TcpListener_LocalEndpoint_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LocalEndpoint</div>        \r\n          </div>\r\n    \r\n            <p>Gets the underlying <a class=\"xref\" href=\"system.net.endpoint\" data-linktype=\"relative-path\">EndPoint</a> of the current <a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.EndPoint LocalEndpoint { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.endpoint\" data-linktype=\"relative-path\">EndPoint</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.net.endpoint\" data-linktype=\"relative-path\">EndPoint</a> to which the <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> is bound.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use the LocalEndpoint property to identify the local network interface and port number being used to listen for incoming client connection requests, after a socket connection has been made. You must first cast this <a class=\"xref\" href=\"system.net.endpoint\" data-linktype=\"relative-path\">EndPoint</a> to an <a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a>. You can then call the <a class=\"xref\" href=\"system.net.ipendpoint#System_Net_IPEndPoint_Address_\" data-linktype=\"relative-path\">Address</a> property to retrieve the local IP address, and the <a class=\"xref\" href=\"system.net.ipendpoint#System_Net_IPEndPoint_Port_\" data-linktype=\"relative-path\">Port</a> property to retrieve the local port number.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the local IP address and port number on which the <a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a> is listening for incoming connection requests.  </p>\n<pre><code class=\"lang-cpp\" name=\"TcpListener_Pending_LocalEndPoint#1\">   try\n   {\n      // Use the Pending method to poll the underlying socket instance for client connection requests.\n      TcpListener^ tcpListener = gcnew TcpListener( portNumber );\n      tcpListener-&gt;Start();\n\n      if ( !tcpListener-&gt;Pending() )\n      {\n         Console::WriteLine( &quot;Sorry, no connection requests have arrived&quot; );\n      }\n      else\n      {\n         //Accept the pending client connection and return a TcpClient object^ initialized for communication.\n         TcpClient^ tcpClient = tcpListener-&gt;AcceptTcpClient();\n         \n         // Using the RemoteEndPoint property.\n         Console::WriteLine( &quot;I am listening for connections on {0} on port number {1}&quot;,\n            IPAddress::Parse( ( (IPEndPoint^)(tcpListener-&gt;LocalEndpoint) )-&gt;Address-&gt;ToString() ),\n            ( (IPEndPoint^)(tcpListener-&gt;LocalEndpoint) )-&gt;Port );\n</code></pre><pre><code class=\"lang-cs\" name=\"TcpListener_Pending_LocalEndPoint#1\">              \n      try{\n              // Use the Pending method to poll the underlying socket instance for client connection requests.\n  \t\t\t\tIPAddress ipAddress = Dns.Resolve(&quot;localhost&quot;).AddressList[0];\n           \tTcpListener tcpListener =  new TcpListener(ipAddress, portNumber); \n           \ttcpListener.Start();\n           \t\n\t\t    \tif (!tcpListener.Pending()) {\n\n\t\t    \tConsole.WriteLine(&quot;Sorry, no connection requests have arrived&quot;);\n\t\t    \t\n\t\t     }\n\t\t     else{\n\n                   //Accept the pending client connection and return a TcpClient object initialized for communication.\n                   TcpClient tcpClient = tcpListener.AcceptTcpClient();\n                   // Using the RemoteEndPoint property.\n                   Console.WriteLine(&quot;I am listening for connections on &quot; + \n                                               IPAddress.Parse(((IPEndPoint)tcpListener.LocalEndpoint).Address.ToString()) +\n      \t                                        &quot;on port number &quot; + ((IPEndPoint)tcpListener.LocalEndpoint).Port.ToString());\n</code></pre><pre><code class=\"lang-vb\" name=\"TcpListener_Pending_LocalEndPoint#1\">      \n      Try\n\n      \t Dim ipAddress As IPAddress = Dns.Resolve(&quot;localhost&quot;).AddressList(0)\n        Dim tcpListener As New TcpListener(ipAddress, portNumber)\n        tcpListener.Start()\n        \n         &#39; Use the Pending method to poll the underlying socket instance for client connection requests.\n         If Not tcpListener.Pending() Then\n            \n            Console.WriteLine(&quot;Sorry, no connection requests have arrived&quot;)\n         \n         Else\n            \n            &#39;Accept the pending client connection and return a TcpClient object initialized for communication.\n            Dim tcpClient As TcpClient = tcpListener.AcceptTcpClient()\n            &#39; Using the RemoteEndPoint property.\n            Console.Write(&quot;I am listening for connections on &quot;)\n            Console.Writeline(IPAddress.Parse(CType(tcpListener.LocalEndpoint, IPEndPoint).Address.ToString())) \n            Console.Write(&quot;on port number &quot;)\n            Console.Write(CType(tcpListener.LocalEndpoint, IPEndPoint).Port.ToString())\n            \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_TcpListener_Server\">\r\n    \r\n            <a id=\"System_Net_Sockets_TcpListener_Server_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Server</div>        \r\n          </div>\r\n    \r\n            <p>Gets the underlying network <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.Sockets.Socket Server { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a></div>\r\n                  </div>\r\n                  <p>The underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a> creates a <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> to listen for incoming client connection requests. Classes deriving from <a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a> can use this property to get this <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a>. Use the underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> returned by the Server property if you require access beyond that which <a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a> provides.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The Server property only returns the <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> used to listen for incoming client connection requests. Use the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_AcceptSocket_\" data-linktype=\"relative-path\">AcceptSocket</a> method to accept a pending connection request and obtain a <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> for sending and receiving data. You can also use the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_AcceptTcpClient_\" data-linktype=\"relative-path\">AcceptTcpClient</a> method to accept a pending connection request and obtain a <a class=\"xref\" href=\"system.net.sockets.tcpclient\" data-linktype=\"relative-path\">TcpClient</a> for sending and receiving data.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the Server property. The underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> is retrieved and the <a class=\"xref\" href=\"system.net.sockets.socketoptionname\" data-linktype=\"relative-path\">SocketOptionName</a><a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> option is configured to time out after 10 seconds if data still remains in the network buffer after the connection is closed.  </p>\n<pre><code class=\"lang-vb\" name=\"TcpListenerProtectedMembers1#1\">   Public Shared Sub listenerOption(host As String, port As Integer)\n      Dim server As IPHostEntry = Dns.Resolve(host)\n      Dim ipAddress As IPAddress = server.AddressList(0)\n      \n      Console.WriteLine(&quot;listening on {0}, port {1}&quot;, ipAddress, port)\n      Dim listener As New TcpListener(ipAddress, port)\n      Dim listenerSocket As Socket = listener.Server\n      \n      Dim lingerOption As New LingerOption(True, 10)\n      listenerSocket.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.Linger, lingerOption)\n      \n      &#39; start listening and process connections here.\n      listener.Start()\n   End Sub &#39;listenerOption\n   \n</code></pre><pre><code class=\"lang-cs\" name=\"TcpListenerProtectedMembers1#1\">    public static void listenerOption(string host, int port)\n    {\n        IPHostEntry server = Dns.Resolve(host);\n        IPAddress ipAddress = server.AddressList[0];\n\n        Console.WriteLine(&quot;listening on {0}, port {1}&quot;, ipAddress, port);\n        TcpListener listener = new TcpListener(ipAddress, port);\n        Socket listenerSocket = listener.Server;\t\t\n\n        LingerOption lingerOption = new LingerOption(true, 10);\n        listenerSocket.SetSocketOption(SocketOptionLevel.Socket, \n                          SocketOptionName.Linger, \n                          lingerOption);\n\n        // start listening and process connections here.\n        listener.Start();\n\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_TcpListener_AcceptSocket\">\r\n    \r\n            <a id=\"System_Net_Sockets_TcpListener_AcceptSocket_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AcceptSocket()</div>        \r\n          </div>\r\n    \r\n            <p>Accepts a pending connection request.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.Sockets.Socket AcceptSocket ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> used to send and receive data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The listener has not been started with a call to <span class=\"xref\">stem.Net.Sockets.TcpListener.Start*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>AcceptSocket is a blocking method that returns a <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> that you can use to send and receive data. If you want to avoid blocking, use the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_Pending_\" data-linktype=\"relative-path\">Pending</a> method to determine if connection requests are available in the incoming connection queue.  </p>\n<p> The <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> returned is initialized with the IP address and port number of the remote host. You can use any of the <a class=\"xref\" href=\"system.net.sockets.socket#System_Net_Sockets_Socket_Send_\" data-linktype=\"relative-path\">Send</a> and <a class=\"xref\" href=\"system.net.sockets.socket#System_Net_Sockets_Socket_Receive_\" data-linktype=\"relative-path\">Receive</a> methods available in the <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> class to communicate with the remote host. When you are finished using the <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a>, be sure to call its <a class=\"xref\" href=\"system.net.sockets.socket#System_Net_Sockets_Socket_Close_\" data-linktype=\"relative-path\">Close</a> method. If your application is relatively simple, consider using the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_AcceptTcpClient_\" data-linktype=\"relative-path\">AcceptTcpClient</a> method rather than the AcceptSocket method. <a class=\"xref\" href=\"system.net.sockets.tcpclient\" data-linktype=\"relative-path\">TcpClient</a> provides you with simple methods for sending and receiving data over a network in blocking synchronous mode.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This member outputs trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following code example, the AcceptSocket method is used to return a <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a>. This <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> is used to communicate with the newly connected client.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic TcpListener.PublicMethodsAndPropertiesExample#4\">         // Accepts the pending client connection and returns a socket for communciation.\n         Socket^ socket = tcpListener-&gt;AcceptSocket();\n         Console::WriteLine( &quot;Connection accepted.&quot; );\n\n         String^ responseString = &quot;You have successfully connected to me&quot;;\n         \n         //Forms and sends a response string to the connected client.\n         array&lt;Byte&gt;^sendBytes = Encoding::ASCII-&gt;GetBytes( responseString );\n         int i = socket-&gt;Send( sendBytes );\n         Console::WriteLine( &quot;Message Sent /&gt; : {0}&quot;, responseString );\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic TcpListener.PublicMethodsAndPropertiesExample#4\">\t       \n              // Accepts the pending client connection and returns a socket for communciation.\n               Socket socket = tcpListener.AcceptSocket();\n\t\t \t\tConsole.WriteLine(&quot;Connection accepted.&quot;);\n\n               string responseString = &quot;You have successfully connected to me&quot;;\n\n               //Forms and sends a response string to the connected client.\n               Byte[] sendBytes = Encoding.ASCII.GetBytes(responseString);\n               int i = socket.Send(sendBytes);\n               Console.WriteLine(&quot;Message Sent /&gt; : &quot; + responseString);\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic TcpListener.PublicMethodsAndPropertiesExample#4\">                  &#39; Accepts the pending client connection and returns a socket for communciation.\n                  Dim socket As Socket = tcpListener.AcceptSocket()\n                  Console.WriteLine(&quot;Connection accepted.&quot;)\n                  \n                  Dim responseString As String = &quot;You have successfully connected to me&quot;\n                  \n                  &#39;Forms and sends a response string to the connected client.\n                  Dim sendBytes As [Byte]() = Encoding.ASCII.GetBytes(responseString)\n                  Dim i As Integer = socket.Send(sendBytes)\n                  Console.WriteLine((&quot;Message Sent /&gt; : &quot; + responseString))\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_TcpListener_AcceptSocketAsync\">\r\n    \r\n            <a id=\"System_Net_Sockets_TcpListener_AcceptSocketAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AcceptSocketAsync()</div>        \r\n          </div>\r\n    \r\n            <p>Accepts a pending connection request as an asynchronous operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task&lt;System.Net.Sockets.Socket&gt; AcceptSocketAsync ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a>&gt;</div>\r\n                  </div>\r\n                  <p>Returns <span class=\"xref\">stem.Threading.Tasks.Task`1</span>  </p>\n<p> The task object representing the asynchronous operation. The <span class=\"xref\">stem.Threading.Tasks.Task`1.Result*</span> property on the task object returns a <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> used to send and receive data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The listener has not been started with a call to <span class=\"xref\">stem.Net.Sockets.TcpListener.Start*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This operation will not block. The returned <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> object will complete after the socket connection has been accepted.  </p>\n<p> The <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> returned in <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> is initialized with the IP address and port number of the remote host. You can use any of the <a class=\"xref\" href=\"system.net.sockets.socket#System_Net_Sockets_Socket_Send_\" data-linktype=\"relative-path\">Send</a> and <a class=\"xref\" href=\"system.net.sockets.socket#System_Net_Sockets_Socket_Receive_\" data-linktype=\"relative-path\">Receive</a> methods available in the <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> class to communicate with the remote host. When you are finished using the <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a>, be sure to call its <a class=\"xref\" href=\"system.net.sockets.socket#System_Net_Sockets_Socket_Close_\" data-linktype=\"relative-path\">Close</a> method. If your application is relatively simple, consider using the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_AcceptTcpClient_\" data-linktype=\"relative-path\">AcceptTcpClient</a> method rather than the AcceptSocketAsync method. <a class=\"xref\" href=\"system.net.sockets.tcpclient\" data-linktype=\"relative-path\">TcpClient</a> provides you with simple methods for sending and receiving data over a network in blocking synchronous mode.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This member outputs trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_TcpListener_AcceptTcpClient\">\r\n    \r\n            <a id=\"System_Net_Sockets_TcpListener_AcceptTcpClient_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AcceptTcpClient()</div>        \r\n          </div>\r\n    \r\n            <p>Accepts a pending connection request.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.Sockets.TcpClient AcceptTcpClient ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.tcpclient\" data-linktype=\"relative-path\">TcpClient</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.net.sockets.tcpclient\" data-linktype=\"relative-path\">TcpClient</a> used to send and receive data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The listener has not been started with a call to <span class=\"xref\">stem.Net.Sockets.TcpListener.Start*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>Use the <span class=\"xref\">stem.Net.Sockets.SocketException.ErrorCode*</span> property to obtain the specific error code. When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>AcceptTcpClient is a blocking method that returns a <a class=\"xref\" href=\"system.net.sockets.tcpclient\" data-linktype=\"relative-path\">TcpClient</a> that you can use to send and receive data. Use the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_Pending_\" data-linktype=\"relative-path\">Pending</a> method to determine if connection requests are available in the incoming connection queue if you want to avoid blocking.  </p>\n<p> Use the <a class=\"xref\" href=\"system.net.sockets.tcpclient#System_Net_Sockets_TcpClient_GetStream_\" data-linktype=\"relative-path\">GetStream</a> method to obtain the underlying <a class=\"xref\" href=\"system.net.sockets.networkstream\" data-linktype=\"relative-path\">NetworkStream</a> of the returned <a class=\"xref\" href=\"system.net.sockets.tcpclient\" data-linktype=\"relative-path\">TcpClient</a>. The <a class=\"xref\" href=\"system.net.sockets.networkstream\" data-linktype=\"relative-path\">NetworkStream</a> will provide you with methods for sending and receiving with the remote host. When you are through with the <a class=\"xref\" href=\"system.net.sockets.tcpclient\" data-linktype=\"relative-path\">TcpClient</a>, be sure to call its <a class=\"xref\" href=\"system.net.sockets.tcpclient#System_Net_Sockets_TcpClient_Close_\" data-linktype=\"relative-path\">Close</a> method. If you want greater flexibility than a <a class=\"xref\" href=\"system.net.sockets.tcpclient\" data-linktype=\"relative-path\">TcpClient</a> offers, consider using <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_AcceptSocket_\" data-linktype=\"relative-path\">AcceptSocket</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This member outputs trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following code example, the AcceptTcpClient method is used to return a <a class=\"xref\" href=\"system.net.sockets.tcpclient\" data-linktype=\"relative-path\">TcpClient</a>. This <a class=\"xref\" href=\"system.net.sockets.tcpclient\" data-linktype=\"relative-path\">TcpClient</a> is used to communicate with the newly connected client.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic TcpListenerExample#1\">/**\n* The following sample is intended to demonstrate how to use a\n* TcpListener for synchronous communcation with a TCP client\n* It creates a TcpListener that listens on the specified port (13000). \n* Any TCP client that wants to use this TcpListener has to explicitly connect \n* to an address obtained by the combination of the server\n* on which this TcpListener is running and the port 13000.\n* This TcpListener simply echoes back the message sent by the client\n* after translating it into uppercase. \n* Refer to the related client in the TcpClient class. \n*/\n\nusing System;\nusing System.Text;\nusing System.IO;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Threading;\n\npublic class TcpListenerSample\n{\n\n\n    static void Main(string[] args)\n    {\n        try\n        {\n            // set the TcpListener on port 13000\n            int port = 13000;\n            TcpListener server = new TcpListener(IPAddress.Any, port);\n\n            // Start listening for client requests\n            server.Start();\n\n\n            // Buffer for reading data\n            byte[] bytes = new byte[1024];\n            string data;\n\n            //Enter the listening loop\n            while (true)\n            {\n                Console.Write(&quot;Waiting for a connection... &quot;);\n\n                // Perform a blocking call to accept requests.\n                // You could also user server.AcceptSocket() here.\n                TcpClient client = server.AcceptTcpClient();\n                Console.WriteLine(&quot;Connected!&quot;);\n\n                // Get a stream object for reading and writing\n                NetworkStream stream = client.GetStream();\n\n                int i;\n\n                // Loop to receive all the data sent by the client.\n                i = stream.Read(bytes, 0, bytes.Length);\n\n                while (i != 0)\n                {\n                    // Translate data bytes to a ASCII string.\n                    data = System.Text.Encoding.ASCII.GetString(bytes, 0, i);\n                    Console.WriteLine(String.Format(&quot;Received: {0}&quot;, data));\n\n                    // Process the data sent by the client.\n                    data = data.ToUpper();\n\n                    byte[] msg = System.Text.Encoding.ASCII.GetBytes(data);\n\n                    // Send back a response.\n                    stream.Write(msg, 0, msg.Length);\n                    Console.WriteLine(String.Format(&quot;Sent: {0}&quot;, data));\n\n                    i = stream.Read(bytes, 0, bytes.Length);\n\n                }\n\n                // Shutdown and end connection\n                client.Close();\n            }\n        }\n        catch (SocketException e)\n        {\n            Console.WriteLine(&quot;SocketException: {0}&quot;, e);\n        }\n\n\n        Console.WriteLine(&quot;Hit enter to continue...&quot;);\n        Console.Read();\n    }\n\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic TcpListenerExample#1\">/**\n* This program shows how to use the TcpListener class. \n* It creates a TcpListener that listens on the specified port (13000). \n* To run this program at the command line you enter:\n* cs_tcpserver\n* Any TcpClient that wants to use this server\n* has to explicitly connect to an address obtained by the combination of\n* the server on which this TcpServer is running and the port 13000. \n* This TcpServer simply echoes back the message sent by the TcpClient, after\n* translating it into uppercase. \n**/\n\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Net;\nusing namespace System::Net::Sockets;\nusing namespace System::Text;\n\nint main()\n{\n   try\n   {\n      \n      // Set the TcpListener on port 13000.\n      Int32 port = 13000;\n      TcpListener^ server = gcnew TcpListener(IPAddress::Any, port);\n      \n      // Start listening for client requests.\n      server-&gt;Start();\n      \n      // Buffer for reading data\n      array&lt;Byte&gt;^bytes = gcnew array&lt;Byte&gt;(256);\n      String^ data = nullptr;\n      \n      // Enter the listening loop.\n      while ( true )\n      {\n         Console::Write( &quot;Waiting for a connection... &quot; );\n         \n         // Perform a blocking call to accept requests.\n         // You could also user server.AcceptSocket() here.\n         TcpClient^ client = server-&gt;AcceptTcpClient();\n         Console::WriteLine( &quot;Connected!&quot; );\n         data = nullptr;\n         \n         // Get a stream object for reading and writing\n         NetworkStream^ stream = client-&gt;GetStream();\n         Int32 i;\n         \n         // Loop to receive all the data sent by the client.\n         while ( (i = stream-&gt;Read( bytes, 0, bytes-&gt;Length )) != 0 )\n         {\n            \n            // Translate data bytes to a ASCII string.\n            data = System::Text::Encoding::ASCII-&gt;GetString( bytes, 0, i );\n            Console::WriteLine( String::Format( &quot;Received: {0}&quot;, data ) );\n            \n            // Process the data sent by the client.\n            data = data-&gt;ToUpper();\n            array&lt;Byte&gt;^msg = System::Text::Encoding::ASCII-&gt;GetBytes( data );\n            \n            // Send back a response.\n            stream-&gt;Write( msg, 0, msg-&gt;Length );\n            Console::WriteLine( String::Format( &quot;Sent: {0}&quot;, data ) );\n         }\n         \n         // Shutdown and end connection\n         client-&gt;Close();\n      }\n   }\n   catch ( SocketException^ e ) \n   {\n      Console::WriteLine( &quot;SocketException: {0}&quot;, e );\n   }\n\n   Console::WriteLine( &quot;<br>Hit enter to continue...&quot; );\n   Console::Read();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic TcpListenerExample#1\">&#39; The following sample is intended to demonstrate how to use a\n&#39; TcpListener for synchronous communcation with a TCP client\n&#39; It creates a TcpListener that connects to the specified port (13000).\n&#39; Any TCP client that wants to use this TcpListener has to explicitly connect \n&#39; to an address obtained by the combination of the server\n&#39; on which this TcpListener is running and the port 13000.\n&#39; This TcpListener simply echoes back the message sent by the client\n&#39; after translating it into uppercase. \n&#39; Refer to the related client in the TcpClient class. \n&#39;/\n\n\nImports System\nImports System.IO\nImports System.Net\nImports System.Net.Sockets\nImports System.Text\nImports Microsoft.VisualBasic\n _\n\nClass MyTcpListener\n   \n   Public Shared Sub Main()\n      \n      Try\n         &#39; Set the TcpListener on port 13000.\n         Dim port As Int32 = 13000\n         Dim server As New TcpListener(IPAddress.Any, port)\n         \n         &#39; Start listening for client requests.\n         server.Start()\n         \n         &#39; Buffer for reading data\n         Dim bytes(1024) As [Byte]\n         Dim data As [String] = Nothing\n         \n         &#39; Enter the listening loop.\n         While True\n            Console.Write(&quot;Waiting for a connection... &quot;)\n            \n            &#39; Perform a blocking call to accept requests.\n            &#39; You could also user server.AcceptSocket() here.\n            Dim client As TcpClient = server.AcceptTcpClient()\n            Console.WriteLine(&quot;Connected!&quot;)\n            \n            data = Nothing\n            \n            &#39; Get a stream object for reading and writing\n            Dim stream As NetworkStream = client.GetStream()\n            \n            Dim i As Int32\n            \n            &#39; Loop to receive all the data sent by the client.\n            i = stream.Read(bytes, 0, bytes.Length)\n            While (i &lt;&gt; 0) \n               &#39; Translate data bytes to a ASCII string.\n               data = System.Text.Encoding.ASCII.GetString(bytes, 0, i)\n               Console.WriteLine([String].Format(&quot;Received: {0}&quot;, data))\n               \n               &#39; Process the data sent by the client.\n               data = data.ToUpper()\n               \n               Dim msg As [Byte]() = System.Text.Encoding.ASCII.GetBytes(data)\n               \n               &#39; Send back a response.\n               stream.Write(msg, 0, msg.Length)\n               Console.WriteLine([String].Format(&quot;Sent: {0}&quot;, data))\n              \n               i = stream.Read(bytes, 0, bytes.Length)\n\n            End While\n            \n            &#39; Shutdown and end connection\n            client.Close()\n         End While\n      Catch e As SocketException\n         Console.WriteLine(&quot;SocketException: {0}&quot;, e)\n      End Try\n      \n      Console.WriteLine(ControlChars.Cr + &quot;Hit enter to continue...&quot;)\n      Console.Read()\n   End Sub &#39;Main\nEnd Class &#39;MyTcpListener \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_TcpListener_AcceptTcpClientAsync\">\r\n    \r\n            <a id=\"System_Net_Sockets_TcpListener_AcceptTcpClientAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AcceptTcpClientAsync()</div>        \r\n          </div>\r\n    \r\n            <p>Accepts a pending connection request as an asynchronous operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task&lt;System.Net.Sockets.TcpClient&gt; AcceptTcpClientAsync ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<a class=\"xref\" href=\"system.net.sockets.tcpclient\" data-linktype=\"relative-path\">TcpClient</a>&gt;</div>\r\n                  </div>\r\n                  <p>Returns <span class=\"xref\">stem.Threading.Tasks.Task`1</span>  </p>\n<p> The task object representing the asynchronous operation. The <span class=\"xref\">stem.Threading.Tasks.Task`1.Result*</span> property on the task object returns a <a class=\"xref\" href=\"system.net.sockets.tcpclient\" data-linktype=\"relative-path\">TcpClient</a> used to send and receive data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The listener has not been started with a call to <span class=\"xref\">stem.Net.Sockets.TcpListener.Start*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>Use the <span class=\"xref\">stem.Net.Sockets.SocketException.ErrorCode*</span> property to obtain the specific error code. When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This operation will not block. The returned <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> object will complete after the TCP connection has been accepted.  </p>\n<p> Use the <a class=\"xref\" href=\"system.net.sockets.tcpclient#System_Net_Sockets_TcpClient_GetStream_\" data-linktype=\"relative-path\">GetStream</a> method to obtain the underlying <a class=\"xref\" href=\"system.net.sockets.networkstream\" data-linktype=\"relative-path\">NetworkStream</a> of the returned <a class=\"xref\" href=\"system.net.sockets.tcpclient\" data-linktype=\"relative-path\">TcpClient</a> in the <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a>. The <a class=\"xref\" href=\"system.net.sockets.networkstream\" data-linktype=\"relative-path\">NetworkStream</a> will provide you with methods for sending and receiving with the remote host. When you are through with the <a class=\"xref\" href=\"system.net.sockets.tcpclient\" data-linktype=\"relative-path\">TcpClient</a>, be sure to call its <a class=\"xref\" href=\"system.net.sockets.tcpclient#System_Net_Sockets_TcpClient_Close_\" data-linktype=\"relative-path\">Close</a> method. If you want greater flexibility than a <a class=\"xref\" href=\"system.net.sockets.tcpclient\" data-linktype=\"relative-path\">TcpClient</a> offers, consider using <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_AcceptSocket_\" data-linktype=\"relative-path\">AcceptSocket</a> or <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_AcceptSocketAsync_\" data-linktype=\"relative-path\">AcceptSocketAsync</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This member outputs trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_TcpListener_AllowNatTraversal_System_Boolean_\">\r\n    \r\n            <a id=\"System_Net_Sockets_TcpListener_AllowNatTraversal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AllowNatTraversal(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Enables or disables Network Address Translation (NAT) traversal on a <a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AllowNatTraversal (bool allowed);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>allowed</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Boolean value that specifies whether to enable or disable NAT traversal.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The AllowNatTraversal method was called after calling the <span class=\"xref\">stem.Net.Sockets.TcpListener.Start*</span> method</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The AllowNatTraversal method is used to enable or disable NAT traversal for a <a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a> instance. NAT traversal may be provided using Teredo, 6to4, or an ISATAP tunnel.  </p>\n<p> When the <code>allowed</code> parameter is false, the <a class=\"xref\" href=\"system.net.sockets.socketoptionname\" data-linktype=\"relative-path\">SocketOptionName</a> option on the associated socket is set to <a class=\"xref\" href=\"system.net.sockets.ipprotectionlevel\" data-linktype=\"relative-path\">IPProtectionLevel</a>. This explicitly disables NAT traversal for a <a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a> instance.  </p>\n<p> When the <code>allowed</code> parameter is true, the <a class=\"xref\" href=\"system.net.sockets.socketoptionname\" data-linktype=\"relative-path\">SocketOptionName</a> option on the associated socket is set to <a class=\"xref\" href=\"system.net.sockets.ipprotectionlevel\" data-linktype=\"relative-path\">IPProtectionLevel</a>. This may allow NAT traversal for a <a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a> depending on firewall rules in place on the system.  </p>\n<p> The AllowNatTraversal method must be invoked prior to calling the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_Start_\" data-linktype=\"relative-path\">Start</a> method to begin listening for incoming connection requests (before the socket is bound). If AllowNatTraversal method is called after the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_Start_\" data-linktype=\"relative-path\">Start</a> method, then an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> will be thrown.  </p>\n<p> A Teredo address is an IPv6 address with the prefix of 2001::/32. Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_TcpListener_BeginAcceptSocket_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_Net_Sockets_TcpListener_BeginAcceptSocket_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginAcceptSocket(AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Begins an asynchronous operation to accept an incoming connection attempt.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IAsyncResult BeginAcceptSocket (AsyncCallback callback, object state);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>callback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that references the method to invoke when the operation is complete.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-defined object containing information about the accept operation. This object is passed to the <code>callback</code> delegate when the operation is complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that references the asynchronous creation of the <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error occurred while attempting to access the socket. See the Remarks section for more information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> has been closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The asynchronous BeginAcceptSocket operation must be completed by calling the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_EndAcceptSocket_\" data-linktype=\"relative-path\">EndAcceptSocket</a> method. Typically, the method is invoked by the <code>callback</code> delegate.  </p>\n<p> This method does not block until the operation completes. To block until the operation completes, use the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_AcceptSocket_\" data-linktype=\"relative-path\">AcceptSocket</a> method.  </p>\n<p> For detailed information about using the asynchronous programming model, see <a href=\"../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md\" data-linktype=\"relative-path\">Calling Synchronous Methods Asynchronously</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You can call the <a class=\"xref\" href=\"system.net.sockets.socket#System_Net_Sockets_Socket_RemoteEndPoint_\" data-linktype=\"relative-path\">RemoteEndPoint</a> property of the returned <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> to identify the remote host&#39;s network address and port number.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> If you receive a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>, use the <a class=\"xref\" href=\"system.net.sockets.socketexception#System_Net_Sockets_SocketException_ErrorCode_\" data-linktype=\"relative-path\">ErrorCode</a> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at <a href=\"http://msdn.microsoft.com/library/\" data-linktype=\"external\">http://msdn.microsoft.com/library/</a> for a detailed description of the error.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> This member outputs trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the BeginAcceptSocket method to create and connect a socket. The callback delegate calls the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_EndAcceptSocket_\" data-linktype=\"relative-path\">EndAcceptSocket</a> method to end the asynchronous request.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Net.Sockets.TcpListener1#4\">        // Thread signal.\n    public:\n        static ManualResetEvent^ ClientConnected;\n\n        // Accept one client connection asynchronously.\n    public:\n        static void DoBeginAcceptSocket(TcpListener^ listener)\n        {\n            // Set the event to nonsignaled state.\n            ClientConnected-&gt;Reset();\n\n            // Start to listen for connections from a client.\n            Console::WriteLine(&quot;Waiting for a connection...&quot;);\n\n            // Accept the connection.\n            // BeginAcceptSocket() creates the accepted socket.\n            listener-&gt;BeginAcceptSocket(\n                gcnew AsyncCallback(DoAcceptSocketCallback), listener);\n            // Wait until a connection is made and processed before\n            // continuing.\n            ClientConnected-&gt;WaitOne();\n        }\n\n        // Process the client connection.\n    public:\n        static void DoAcceptSocketCallback(IAsyncResult^ result)\n        {\n            // Get the listener that handles the client request.\n            TcpListener^ listener = (TcpListener^) result-&gt;AsyncState;\n\n            // End the operation and display the received data on the\n            //console.\n            Socket^ clientSocket = listener-&gt;EndAcceptSocket(result);\n\n            // Process the connection here. (Add the client to a\n            // server table, read data, etc.)\n            Console::WriteLine(&quot;Client connected completed&quot;);\n\n            // Signal the calling thread to continue.\n            ClientConnected-&gt;Set();\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.Sockets.TcpListener1#4\">        // Thread signal.\n        public static ManualResetEvent clientConnected = \n            new ManualResetEvent(false);\n\n        // Accept one client connection asynchronously.\n        public static void DoBeginAcceptSocket(TcpListener listener)\n        {\n            // Set the event to nonsignaled state.\n            clientConnected.Reset();\n\n            // Start to listen for connections from a client.\n            Console.WriteLine(&quot;Waiting for a connection...&quot;);\n\n            // Accept the connection. \n            // BeginAcceptSocket() creates the accepted socket.\n            listener.BeginAcceptSocket(\n                new AsyncCallback(DoAcceptSocketCallback), listener);\n            // Wait until a connection is made and processed before \n            // continuing.\n            clientConnected.WaitOne();\n        }\n\n        // Process the client connection.\n        public static void DoAcceptSocketCallback(IAsyncResult ar) \n        {\n            // Get the listener that handles the client request.\n            TcpListener listener = (TcpListener) ar.AsyncState;\n            \n            // End the operation and display the received data on the\n            //console.\n            Socket clientSocket = listener.EndAcceptSocket(ar);\n    \n            // Process the connection here. (Add the client to a \n            // server table, read data, etc.)\n            Console.WriteLine(&quot;Client connected completed&quot;);\n\n            // Signal the calling thread to continue.\n            clientConnected.Set();\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.Sockets.TcpListener1#4\">   &#39; Thread signal.\n   Public Shared clientConnected As New ManualResetEvent(False)\n   \n   \n   &#39; Accept one client connection asynchronously.\n   Public Shared Sub DoBeginAcceptSocket(listener As TcpListener)\n      &#39; Set the event to nonsignaled state.\n      clientConnected.Reset()\n      \n      &#39; Start to listen for connections from a client.\n      Console.WriteLine(&quot;Waiting for a connection...&quot;)\n      \n      &#39; Accept the connection. \n      &#39; BeginAcceptSocket() creates the accepted socket.\n      listener.BeginAcceptSocket(New AsyncCallback(AddressOf DoAcceptSocketCallback), listener)\n      &#39; Wait until a connection is made and processed before \n      &#39; continuing.\n      clientConnected.WaitOne()\n   End Sub &#39;DoBeginAcceptSocket\n   \n   \n   &#39; Process the client connection.\n   Public Shared Sub DoAcceptSocketCallback(ar As IAsyncResult)\n      &#39; Get the listener that handles the client request.\n      Dim listener As TcpListener = CType(ar.AsyncState, TcpListener)\n      \n      &#39; End the operation and display the received data on the\n      &#39;console.\n      Dim clientSocket As Socket = listener.EndAcceptSocket(ar)\n      \n      &#39; Process the connection here. (Add the client to a \n      &#39; server table, read data, etc.)\n      Console.WriteLine(&quot;Client connected completed&quot;)\n      \n      &#39; Signal the calling thread to continue.\n      clientConnected.Set()\n   End Sub &#39;DoAcceptSocketCallback\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_TcpListener_BeginAcceptTcpClient_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_Net_Sockets_TcpListener_BeginAcceptTcpClient_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginAcceptTcpClient(AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Begins an asynchronous operation to accept an incoming connection attempt.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IAsyncResult BeginAcceptTcpClient (AsyncCallback callback, object state);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>callback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that references the method to invoke when the operation is complete.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-defined object containing information about the accept operation. This object is passed to the <code>callback</code> delegate when the operation is complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that references the asynchronous creation of the <a class=\"xref\" href=\"system.net.sockets.tcpclient\" data-linktype=\"relative-path\">TcpClient</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error occurred while attempting to access the socket. See the Remarks section for more information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> has been closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The asynchronous BeginAcceptTcpClient operation must be completed by calling the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_EndAcceptTcpClient_\" data-linktype=\"relative-path\">EndAcceptTcpClient</a> method. Typically, the method is invoked by the <code>callback</code> delegate.  </p>\n<p> This method does not block until the operation completes. To block until the operation completes, use the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_AcceptTcpClient_\" data-linktype=\"relative-path\">AcceptTcpClient</a> method.  </p>\n<p> For detailed information about using the asynchronous programming model, see <a href=\"../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md\" data-linktype=\"relative-path\">Calling Synchronous Methods Asynchronously</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If you receive a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>, use the <a class=\"xref\" href=\"system.net.sockets.socketexception#System_Net_Sockets_SocketException_ErrorCode_\" data-linktype=\"relative-path\">ErrorCode</a> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at <a href=\"http://msdn.microsoft.com/library/\" data-linktype=\"external\">http://msdn.microsoft.com/library/</a> for a detailed description of the error.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> This member outputs trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the BeginAcceptTcpClient method to create and connect a socket. The callback delegate calls the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_EndAcceptTcpClient_\" data-linktype=\"relative-path\">EndAcceptTcpClient</a> method to end the asynchronous request.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Net.Sockets.TcpListener1#5\">        // Thread signal.\n    public:\n        static ManualResetEvent^ TcpClientConnected;\n\n        // Accept one client connection asynchronously.\n    public:\n        static void DoBeginAcceptTcpClient(TcpListener^ listener)\n        {\n            // Set the event to nonsignaled state.\n            TcpClientConnected-&gt;Reset();\n\n            // Start to listen for connections from a client.\n            Console::WriteLine(&quot;Waiting for a connection...&quot;);\n\n            // Accept the connection.\n            // BeginAcceptSocket() creates the accepted socket.\n            listener-&gt;BeginAcceptTcpClient(\n                gcnew AsyncCallback(DoAcceptTcpClientCallback),\n                listener);\n\n            // Wait until a connection is made and processed before\n            // continuing.\n            TcpClientConnected-&gt;WaitOne();\n        }\n\n        // Process the client connection.\n    public:\n        static void DoAcceptTcpClientCallback(IAsyncResult^ result)\n        {\n            // Get the listener that handles the client request.\n            TcpListener^ listener = (TcpListener^) result-&gt;AsyncState;\n\n            // End the operation and display the received data on\n            // the console.\n            TcpClient^ client = listener-&gt;EndAcceptTcpClient(result);\n\n            // Process the connection here. (Add the client to a\n            // server table, read data, etc.)\n            Console::WriteLine(&quot;Client connected completed&quot;);\n\n            // Signal the calling thread to continue.\n            TcpClientConnected-&gt;Set();\n\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.Sockets.TcpListener1#5\">        // Thread signal.\n        public static ManualResetEvent tcpClientConnected = \n            new ManualResetEvent(false);\n\n        // Accept one client connection asynchronously.\n        public static void DoBeginAcceptTcpClient(TcpListener \n            listener)\n        {\n            // Set the event to nonsignaled state.\n            tcpClientConnected.Reset();\n\n            // Start to listen for connections from a client.\n            Console.WriteLine(&quot;Waiting for a connection...&quot;);\n\n            // Accept the connection. \n            // BeginAcceptSocket() creates the accepted socket.\n            listener.BeginAcceptTcpClient(\n                new AsyncCallback(DoAcceptTcpClientCallback), \n                listener);\n\n            // Wait until a connection is made and processed before \n            // continuing.\n            tcpClientConnected.WaitOne();\n        }\n\n        // Process the client connection.\n        public static void DoAcceptTcpClientCallback(IAsyncResult ar) \n        {\n            // Get the listener that handles the client request.\n            TcpListener listener = (TcpListener) ar.AsyncState;\n            \n            // End the operation and display the received data on \n            // the console.\n            TcpClient client = listener.EndAcceptTcpClient(ar);\n    \n            // Process the connection here. (Add the client to a\n            // server table, read data, etc.)\n            Console.WriteLine(&quot;Client connected completed&quot;);\n\n            // Signal the calling thread to continue.\n            tcpClientConnected.Set();\n\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.Sockets.TcpListener1#5\">   &#39; Thread signal.\n   Public Shared tcpClientConnected As New ManualResetEvent(False)\n   \n   \n   &#39; Accept one client connection asynchronously.\n   Public Shared Sub DoBeginAcceptTcpClient(listener As TcpListener)\n      &#39; Set the event to nonsignaled state.\n      tcpClientConnected.Reset()\n      \n      &#39; Start to listen for connections from a client.\n      Console.WriteLine(&quot;Waiting for a connection...&quot;)\n      \n      &#39; Accept the connection. \n      &#39; BeginAcceptSocket() creates the accepted socket.\n      listener.BeginAcceptTcpClient(New AsyncCallback(AddressOf DoAcceptTcpClientCallback), listener)\n      \n      &#39; Wait until a connection is made and processed before \n      &#39; continuing.\n      tcpClientConnected.WaitOne()\n   End Sub &#39;DoBeginAcceptTcpClient\n   \n   \n   &#39; Process the client connection.\n   Public Shared Sub DoAcceptTcpClientCallback(ar As IAsyncResult)\n      &#39; Get the listener that handles the client request.\n      Dim listener As TcpListener = CType(ar.AsyncState, TcpListener)\n      \n      &#39; End the operation and display the received data on \n      &#39; the console.\n      Dim client As TcpClient = listener.EndAcceptTcpClient(ar)\n      \n      &#39; Process the connection here. (Add the client to a\n      &#39; server table, read data, etc.)\n      Console.WriteLine(&quot;Client connected completed&quot;)\n      \n      &#39; Signal the calling thread to continue.\n      tcpClientConnected.Set()\n   End Sub &#39;DoAcceptTcpClientCallback\n    \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_TcpListener_Create_System_Int32_\">\r\n    \r\n            <a id=\"System_Net_Sockets_TcpListener_Create_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Create(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new <a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a> instance to listen on the specified port.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Net.Sockets.TcpListener Create (int port);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>port</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The port on which to listen for incoming connection attempts.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a></div>\r\n                  </div>\r\n                  <p>Returns <a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a>.  </p>\n<p> A new <a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a> instance to listen on the specified port.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_TcpListener_EndAcceptSocket_System_IAsyncResult_\">\r\n    \r\n            <a id=\"System_Net_Sockets_TcpListener_EndAcceptSocket_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndAcceptSocket(IAsyncResult)</div>        \r\n          </div>\r\n    \r\n            <p>Asynchronously accepts an incoming connection attempt and creates a new <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> to handle remote host communication.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.Sockets.Socket EndAcceptSocket (IAsyncResult asyncResult);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> returned by a call to the <span class=\"xref\">stem.Net.Sockets.TcpListener.BeginAcceptSocket*</span> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> used to send and receive data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> has been closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>asyncResult</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>asyncResult</code> parameter was not created by a call to the <span class=\"xref\">stem.Net.Sockets.TcpListener.BeginAcceptSocket*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The EndAcceptSocket method was previously called.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error occurred while attempting to access the <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a>. See the Remarks section for more information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method blocks until the operation is complete. To perform this operation synchronously, use the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_AcceptSocket_\" data-linktype=\"relative-path\">AcceptSocket</a> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You can call the <a class=\"xref\" href=\"system.net.sockets.socket#System_Net_Sockets_Socket_RemoteEndPoint_\" data-linktype=\"relative-path\">RemoteEndPoint</a> property of the returned <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> to identify the remote host&#39;s network address and port number.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> If you receive a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>, use the <a class=\"xref\" href=\"system.net.sockets.socketexception#System_Net_Sockets_SocketException_ErrorCode_\" data-linktype=\"relative-path\">ErrorCode</a> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at <a href=\"http://msdn.microsoft.com/library/\" data-linktype=\"external\">http://msdn.microsoft.com/library/</a> for a detailed description of the error.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> This member outputs trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_BeginAcceptSocket_\" data-linktype=\"relative-path\">BeginAcceptSocket</a> method to create and connect a socket. The callback delegate calls the EndAcceptSocket method to end the asynchronous request.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Net.Sockets.TcpListener1#4\">        // Thread signal.\n    public:\n        static ManualResetEvent^ ClientConnected;\n\n        // Accept one client connection asynchronously.\n    public:\n        static void DoBeginAcceptSocket(TcpListener^ listener)\n        {\n            // Set the event to nonsignaled state.\n            ClientConnected-&gt;Reset();\n\n            // Start to listen for connections from a client.\n            Console::WriteLine(&quot;Waiting for a connection...&quot;);\n\n            // Accept the connection.\n            // BeginAcceptSocket() creates the accepted socket.\n            listener-&gt;BeginAcceptSocket(\n                gcnew AsyncCallback(DoAcceptSocketCallback), listener);\n            // Wait until a connection is made and processed before\n            // continuing.\n            ClientConnected-&gt;WaitOne();\n        }\n\n        // Process the client connection.\n    public:\n        static void DoAcceptSocketCallback(IAsyncResult^ result)\n        {\n            // Get the listener that handles the client request.\n            TcpListener^ listener = (TcpListener^) result-&gt;AsyncState;\n\n            // End the operation and display the received data on the\n            //console.\n            Socket^ clientSocket = listener-&gt;EndAcceptSocket(result);\n\n            // Process the connection here. (Add the client to a\n            // server table, read data, etc.)\n            Console::WriteLine(&quot;Client connected completed&quot;);\n\n            // Signal the calling thread to continue.\n            ClientConnected-&gt;Set();\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.Sockets.TcpListener1#4\">        // Thread signal.\n        public static ManualResetEvent clientConnected = \n            new ManualResetEvent(false);\n\n        // Accept one client connection asynchronously.\n        public static void DoBeginAcceptSocket(TcpListener listener)\n        {\n            // Set the event to nonsignaled state.\n            clientConnected.Reset();\n\n            // Start to listen for connections from a client.\n            Console.WriteLine(&quot;Waiting for a connection...&quot;);\n\n            // Accept the connection. \n            // BeginAcceptSocket() creates the accepted socket.\n            listener.BeginAcceptSocket(\n                new AsyncCallback(DoAcceptSocketCallback), listener);\n            // Wait until a connection is made and processed before \n            // continuing.\n            clientConnected.WaitOne();\n        }\n\n        // Process the client connection.\n        public static void DoAcceptSocketCallback(IAsyncResult ar) \n        {\n            // Get the listener that handles the client request.\n            TcpListener listener = (TcpListener) ar.AsyncState;\n            \n            // End the operation and display the received data on the\n            //console.\n            Socket clientSocket = listener.EndAcceptSocket(ar);\n    \n            // Process the connection here. (Add the client to a \n            // server table, read data, etc.)\n            Console.WriteLine(&quot;Client connected completed&quot;);\n\n            // Signal the calling thread to continue.\n            clientConnected.Set();\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.Sockets.TcpListener1#4\">   &#39; Thread signal.\n   Public Shared clientConnected As New ManualResetEvent(False)\n   \n   \n   &#39; Accept one client connection asynchronously.\n   Public Shared Sub DoBeginAcceptSocket(listener As TcpListener)\n      &#39; Set the event to nonsignaled state.\n      clientConnected.Reset()\n      \n      &#39; Start to listen for connections from a client.\n      Console.WriteLine(&quot;Waiting for a connection...&quot;)\n      \n      &#39; Accept the connection. \n      &#39; BeginAcceptSocket() creates the accepted socket.\n      listener.BeginAcceptSocket(New AsyncCallback(AddressOf DoAcceptSocketCallback), listener)\n      &#39; Wait until a connection is made and processed before \n      &#39; continuing.\n      clientConnected.WaitOne()\n   End Sub &#39;DoBeginAcceptSocket\n   \n   \n   &#39; Process the client connection.\n   Public Shared Sub DoAcceptSocketCallback(ar As IAsyncResult)\n      &#39; Get the listener that handles the client request.\n      Dim listener As TcpListener = CType(ar.AsyncState, TcpListener)\n      \n      &#39; End the operation and display the received data on the\n      &#39;console.\n      Dim clientSocket As Socket = listener.EndAcceptSocket(ar)\n      \n      &#39; Process the connection here. (Add the client to a \n      &#39; server table, read data, etc.)\n      Console.WriteLine(&quot;Client connected completed&quot;)\n      \n      &#39; Signal the calling thread to continue.\n      clientConnected.Set()\n   End Sub &#39;DoAcceptSocketCallback\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_TcpListener_EndAcceptTcpClient_System_IAsyncResult_\">\r\n    \r\n            <a id=\"System_Net_Sockets_TcpListener_EndAcceptTcpClient_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndAcceptTcpClient(IAsyncResult)</div>        \r\n          </div>\r\n    \r\n            <p>Asynchronously accepts an incoming connection attempt and creates a new <a class=\"xref\" href=\"system.net.sockets.tcpclient\" data-linktype=\"relative-path\">TcpClient</a> to handle remote host communication.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.Sockets.TcpClient EndAcceptTcpClient (IAsyncResult asyncResult);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> returned by a call to the <span class=\"xref\">stem.Net.Sockets.TcpListener.BeginAcceptTcpClient*</span> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.tcpclient\" data-linktype=\"relative-path\">TcpClient</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.net.sockets.tcpclient\" data-linktype=\"relative-path\">TcpClient</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.net.sockets.tcpclient\" data-linktype=\"relative-path\">TcpClient</a> used to send and receive data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method blocks until the operation is complete. To perform this operation synchronously, use the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_AcceptTcpClient_\" data-linktype=\"relative-path\">AcceptTcpClient</a> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You can call the <a class=\"xref\" href=\"system.net.sockets.socket#System_Net_Sockets_Socket_RemoteEndPoint_\" data-linktype=\"relative-path\">RemoteEndPoint</a> property of the underlying socket (<a class=\"xref\" href=\"system.net.sockets.tcpclient#System_Net_Sockets_TcpClient_Client_\" data-linktype=\"relative-path\">Client</a>) to identify the remote host&#39;s network address and port number.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> If you receive a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>, use the <a class=\"xref\" href=\"system.net.sockets.socketexception#System_Net_Sockets_SocketException_ErrorCode_\" data-linktype=\"relative-path\">ErrorCode</a> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at <a href=\"http://msdn.microsoft.com/library/\" data-linktype=\"external\">http://msdn.microsoft.com/library/</a> for a detailed description of the error.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> This member outputs trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_BeginAcceptTcpClient_\" data-linktype=\"relative-path\">BeginAcceptTcpClient</a> method to create and connect a socket. The callback delegate calls the EndAcceptTcpClient method to end the asynchronous request.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Net.Sockets.TcpListener1#5\">        // Thread signal.\n    public:\n        static ManualResetEvent^ TcpClientConnected;\n\n        // Accept one client connection asynchronously.\n    public:\n        static void DoBeginAcceptTcpClient(TcpListener^ listener)\n        {\n            // Set the event to nonsignaled state.\n            TcpClientConnected-&gt;Reset();\n\n            // Start to listen for connections from a client.\n            Console::WriteLine(&quot;Waiting for a connection...&quot;);\n\n            // Accept the connection.\n            // BeginAcceptSocket() creates the accepted socket.\n            listener-&gt;BeginAcceptTcpClient(\n                gcnew AsyncCallback(DoAcceptTcpClientCallback),\n                listener);\n\n            // Wait until a connection is made and processed before\n            // continuing.\n            TcpClientConnected-&gt;WaitOne();\n        }\n\n        // Process the client connection.\n    public:\n        static void DoAcceptTcpClientCallback(IAsyncResult^ result)\n        {\n            // Get the listener that handles the client request.\n            TcpListener^ listener = (TcpListener^) result-&gt;AsyncState;\n\n            // End the operation and display the received data on\n            // the console.\n            TcpClient^ client = listener-&gt;EndAcceptTcpClient(result);\n\n            // Process the connection here. (Add the client to a\n            // server table, read data, etc.)\n            Console::WriteLine(&quot;Client connected completed&quot;);\n\n            // Signal the calling thread to continue.\n            TcpClientConnected-&gt;Set();\n\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.Sockets.TcpListener1#5\">        // Thread signal.\n        public static ManualResetEvent tcpClientConnected = \n            new ManualResetEvent(false);\n\n        // Accept one client connection asynchronously.\n        public static void DoBeginAcceptTcpClient(TcpListener \n            listener)\n        {\n            // Set the event to nonsignaled state.\n            tcpClientConnected.Reset();\n\n            // Start to listen for connections from a client.\n            Console.WriteLine(&quot;Waiting for a connection...&quot;);\n\n            // Accept the connection. \n            // BeginAcceptSocket() creates the accepted socket.\n            listener.BeginAcceptTcpClient(\n                new AsyncCallback(DoAcceptTcpClientCallback), \n                listener);\n\n            // Wait until a connection is made and processed before \n            // continuing.\n            tcpClientConnected.WaitOne();\n        }\n\n        // Process the client connection.\n        public static void DoAcceptTcpClientCallback(IAsyncResult ar) \n        {\n            // Get the listener that handles the client request.\n            TcpListener listener = (TcpListener) ar.AsyncState;\n            \n            // End the operation and display the received data on \n            // the console.\n            TcpClient client = listener.EndAcceptTcpClient(ar);\n    \n            // Process the connection here. (Add the client to a\n            // server table, read data, etc.)\n            Console.WriteLine(&quot;Client connected completed&quot;);\n\n            // Signal the calling thread to continue.\n            tcpClientConnected.Set();\n\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.Sockets.TcpListener1#5\">   &#39; Thread signal.\n   Public Shared tcpClientConnected As New ManualResetEvent(False)\n   \n   \n   &#39; Accept one client connection asynchronously.\n   Public Shared Sub DoBeginAcceptTcpClient(listener As TcpListener)\n      &#39; Set the event to nonsignaled state.\n      tcpClientConnected.Reset()\n      \n      &#39; Start to listen for connections from a client.\n      Console.WriteLine(&quot;Waiting for a connection...&quot;)\n      \n      &#39; Accept the connection. \n      &#39; BeginAcceptSocket() creates the accepted socket.\n      listener.BeginAcceptTcpClient(New AsyncCallback(AddressOf DoAcceptTcpClientCallback), listener)\n      \n      &#39; Wait until a connection is made and processed before \n      &#39; continuing.\n      tcpClientConnected.WaitOne()\n   End Sub &#39;DoBeginAcceptTcpClient\n   \n   \n   &#39; Process the client connection.\n   Public Shared Sub DoAcceptTcpClientCallback(ar As IAsyncResult)\n      &#39; Get the listener that handles the client request.\n      Dim listener As TcpListener = CType(ar.AsyncState, TcpListener)\n      \n      &#39; End the operation and display the received data on \n      &#39; the console.\n      Dim client As TcpClient = listener.EndAcceptTcpClient(ar)\n      \n      &#39; Process the connection here. (Add the client to a\n      &#39; server table, read data, etc.)\n      Console.WriteLine(&quot;Client connected completed&quot;)\n      \n      &#39; Signal the calling thread to continue.\n      tcpClientConnected.Set()\n   End Sub &#39;DoAcceptTcpClientCallback\n    \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_TcpListener_Pending\">\r\n    \r\n            <a id=\"System_Net_Sockets_TcpListener_Pending_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Pending()</div>        \r\n          </div>\r\n    \r\n            <p>Determines if there are pending connection requests.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Pending ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if connections are pending; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The listener has not been started with a call to <span class=\"xref\">stem.Net.Sockets.TcpListener.Start*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This non-blocking method determines if there are any pending connection requests. Because the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_AcceptSocket_\" data-linktype=\"relative-path\">AcceptSocket</a> and <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_AcceptTcpClient_\" data-linktype=\"relative-path\">AcceptTcpClient</a> methods block execution until the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_Start_\" data-linktype=\"relative-path\">Start</a> method has queued an incoming connection request, the Pending method can be used to determine if connections are available before attempting to accept them.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example checks the Pending method. If a connection request is waiting to be accepted, then a call to the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_AcceptTcpClient_\" data-linktype=\"relative-path\">AcceptTcpClient</a> method is made.  </p>\n<pre><code class=\"lang-cpp\" name=\"TcpListener_Pending_LocalEndPoint#1\">   try\n   {\n      // Use the Pending method to poll the underlying socket instance for client connection requests.\n      TcpListener^ tcpListener = gcnew TcpListener( portNumber );\n      tcpListener-&gt;Start();\n\n      if ( !tcpListener-&gt;Pending() )\n      {\n         Console::WriteLine( &quot;Sorry, no connection requests have arrived&quot; );\n      }\n      else\n      {\n         //Accept the pending client connection and return a TcpClient object^ initialized for communication.\n         TcpClient^ tcpClient = tcpListener-&gt;AcceptTcpClient();\n         \n         // Using the RemoteEndPoint property.\n         Console::WriteLine( &quot;I am listening for connections on {0} on port number {1}&quot;,\n            IPAddress::Parse( ( (IPEndPoint^)(tcpListener-&gt;LocalEndpoint) )-&gt;Address-&gt;ToString() ),\n            ( (IPEndPoint^)(tcpListener-&gt;LocalEndpoint) )-&gt;Port );\n</code></pre><pre><code class=\"lang-cs\" name=\"TcpListener_Pending_LocalEndPoint#1\">              \n      try{\n              // Use the Pending method to poll the underlying socket instance for client connection requests.\n  \t\t\t\tIPAddress ipAddress = Dns.Resolve(&quot;localhost&quot;).AddressList[0];\n           \tTcpListener tcpListener =  new TcpListener(ipAddress, portNumber); \n           \ttcpListener.Start();\n           \t\n\t\t    \tif (!tcpListener.Pending()) {\n\n\t\t    \tConsole.WriteLine(&quot;Sorry, no connection requests have arrived&quot;);\n\t\t    \t\n\t\t     }\n\t\t     else{\n\n                   //Accept the pending client connection and return a TcpClient object initialized for communication.\n                   TcpClient tcpClient = tcpListener.AcceptTcpClient();\n                   // Using the RemoteEndPoint property.\n                   Console.WriteLine(&quot;I am listening for connections on &quot; + \n                                               IPAddress.Parse(((IPEndPoint)tcpListener.LocalEndpoint).Address.ToString()) +\n      \t                                        &quot;on port number &quot; + ((IPEndPoint)tcpListener.LocalEndpoint).Port.ToString());\n</code></pre><pre><code class=\"lang-vb\" name=\"TcpListener_Pending_LocalEndPoint#1\">      \n      Try\n\n      \t Dim ipAddress As IPAddress = Dns.Resolve(&quot;localhost&quot;).AddressList(0)\n        Dim tcpListener As New TcpListener(ipAddress, portNumber)\n        tcpListener.Start()\n        \n         &#39; Use the Pending method to poll the underlying socket instance for client connection requests.\n         If Not tcpListener.Pending() Then\n            \n            Console.WriteLine(&quot;Sorry, no connection requests have arrived&quot;)\n         \n         Else\n            \n            &#39;Accept the pending client connection and return a TcpClient object initialized for communication.\n            Dim tcpClient As TcpClient = tcpListener.AcceptTcpClient()\n            &#39; Using the RemoteEndPoint property.\n            Console.Write(&quot;I am listening for connections on &quot;)\n            Console.Writeline(IPAddress.Parse(CType(tcpListener.LocalEndpoint, IPEndPoint).Address.ToString())) \n            Console.Write(&quot;on port number &quot;)\n            Console.Write(CType(tcpListener.LocalEndpoint, IPEndPoint).Port.ToString())\n            \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_TcpListener_Start\">\r\n    \r\n            <a id=\"System_Net_Sockets_TcpListener_Start_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Start()</div>        \r\n          </div>\r\n    \r\n            <p>Starts listening for incoming connection requests.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Start ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>Use the <span class=\"xref\">stem.Net.Sockets.SocketException.ErrorCode*</span> property to obtain the specific error code. When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Start method initializes the underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a>, binds it to a local endpoint, and listens for incoming connection attempts. If a connection request is received, the Start method will queue the request and continue listening for additional requests until you call the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_Stop_\" data-linktype=\"relative-path\">Stop</a> method. If <a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a> receives a connection request after it has already queued the maximum number of connections, it will throw a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a> on the client.  </p>\n<p> To remove a connection from the incoming connection queue, use either the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_AcceptTcpClient_\" data-linktype=\"relative-path\">AcceptTcpClient</a> method or the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_AcceptSocket_\" data-linktype=\"relative-path\">AcceptSocket</a> method. The <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_AcceptTcpClient_\" data-linktype=\"relative-path\">AcceptTcpClient</a> method will remove a connection from the queue and return a <a class=\"xref\" href=\"system.net.sockets.tcpclient\" data-linktype=\"relative-path\">TcpClient</a> that you can use to send and receive data. The <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_AcceptSocket_\" data-linktype=\"relative-path\">AcceptSocket</a> method will return a <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> that you can use to do the same. If your application only requires synchronous I/O, use <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_AcceptTcpClient_\" data-linktype=\"relative-path\">AcceptTcpClient</a>. For more detailed behavioral control, use <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_AcceptSocket_\" data-linktype=\"relative-path\">AcceptSocket</a>. Both of these methods block until a connection request is available in the queue.  </p>\n<p> Use the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_Stop_\" data-linktype=\"relative-path\">Stop</a> method to close the <a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a> and stop listening. You are responsible for closing your accepted connections separately.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This member outputs trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how Start is used to listen for incoming client connection attempts.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Net.Sockets.TcpListener1#3\">    public:\n        static void DoStart(TcpListener^ listener, int backlog)\n        {\n            // Start listening for client connections with the\n            // specified backlog.\n            listener-&gt;Start(backlog);\n            Console::WriteLine(&quot;Started listening&quot;);\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.Sockets.TcpListener1#3\">        public static void DoStart(TcpListener t, int backlog)\n        {\n            // Start listening for client connections with the \n            // specified backlog.\n            t.Start(backlog);\n            Console.WriteLine(&quot;started listening&quot;);\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.Sockets.TcpListener1#3\">   Public Shared Sub DoStart(t As TcpListener, backlog As Integer)\n      &#39; Start listening for client connections with the \n      &#39; specified backlog.\n      t.Start(backlog)\n      Console.WriteLine(&quot;started listening&quot;)\n   End Sub &#39;DoStart\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_TcpListener_Start_System_Int32_\">\r\n    \r\n            <a id=\"System_Net_Sockets_TcpListener_Start_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Start(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Starts listening for incoming connection requests with a maximum number of pending connection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Start (int backlog);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>backlog</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum length of the pending connections queue.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>An error occurred while accessing the socket. See the Remarks section for more information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The<code> backlog</code> parameter is less than zero or exceeds the maximum number of permitted connections.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_Start_\" data-linktype=\"relative-path\">Start</a> method initializes the underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a>, binds it to a local endpoint, and listens for incoming connection attempts. If a connection request is received, <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_Start_\" data-linktype=\"relative-path\">Start</a> will queue the request and continue listening for additional requests until you call the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_Stop_\" data-linktype=\"relative-path\">Stop</a> method. If <a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a> receives a connection request after it has already queued the maximum number of connections it will throw a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a> on the client.  </p>\n<p> To remove a connection from the incoming connection queue, use either the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_AcceptTcpClient_\" data-linktype=\"relative-path\">AcceptTcpClient</a> method or the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_AcceptSocket_\" data-linktype=\"relative-path\">AcceptSocket</a> method. The <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_AcceptTcpClient_\" data-linktype=\"relative-path\">AcceptTcpClient</a> method will remove a connection from the queue and return a <a class=\"xref\" href=\"system.net.sockets.tcpclient\" data-linktype=\"relative-path\">TcpClient</a> that you can use to send and receive data. The <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_AcceptSocket_\" data-linktype=\"relative-path\">AcceptSocket</a> method will return a <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a> that you can use to do the same. If your application only requires synchronous I/O, use the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_AcceptTcpClient_\" data-linktype=\"relative-path\">AcceptTcpClient</a>. For more detailed behavioral control, use <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_AcceptSocket_\" data-linktype=\"relative-path\">AcceptSocket</a> method. Both of these methods block until a connection request is available in the queue.  </p>\n<p> Use the <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_Stop_\" data-linktype=\"relative-path\">Stop</a> method to close the <a class=\"xref\" href=\"system.net.sockets.tcplistener\" data-linktype=\"relative-path\">TcpListener</a> and stop listening. You are responsible for closing your accepted connections separately.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Use the <a class=\"xref\" href=\"system.net.sockets.socketexception#System_Net_Sockets_SocketException_ErrorCode_\" data-linktype=\"relative-path\">ErrorCode</a> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at <a href=\"http://msdn.microsoft.com/library/\" data-linktype=\"external\">http://msdn.microsoft.com/library/</a> for a detailed description of the error.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> This member outputs trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how <a class=\"xref\" href=\"system.net.sockets.tcplistener#System_Net_Sockets_TcpListener_Start_\" data-linktype=\"relative-path\">Start</a> is used to listen for incoming client connection attempts.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Net.Sockets.TcpListener1#3\">    public:\n        static void DoStart(TcpListener^ listener, int backlog)\n        {\n            // Start listening for client connections with the\n            // specified backlog.\n            listener-&gt;Start(backlog);\n            Console::WriteLine(&quot;Started listening&quot;);\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.Sockets.TcpListener1#3\">        public static void DoStart(TcpListener t, int backlog)\n        {\n            // Start listening for client connections with the \n            // specified backlog.\n            t.Start(backlog);\n            Console.WriteLine(&quot;started listening&quot;);\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.Sockets.TcpListener1#3\">   Public Shared Sub DoStart(t As TcpListener, backlog As Integer)\n      &#39; Start listening for client connections with the \n      &#39; specified backlog.\n      t.Start(backlog)\n      Console.WriteLine(&quot;started listening&quot;)\n   End Sub &#39;DoStart\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Sockets_TcpListener_Stop\">\r\n    \r\n            <a id=\"System_Net_Sockets_TcpListener_Stop_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Stop()</div>        \r\n          </div>\r\n    \r\n            <p>Closes the listener.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Stop ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a></div>\r\n                  </div>\r\n                  <p>Use the <span class=\"xref\">stem.Net.Sockets.SocketException.ErrorCode*</span> property to obtain the specific error code. When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Stop closes the listener. Any unaccepted connection requests in the queue will be lost. Remote hosts waiting for a connection to be accepted will throw a <a class=\"xref\" href=\"system.net.sockets.socketexception\" data-linktype=\"relative-path\">SocketException</a>. You are responsible for closing your accepted connections separately.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This member outputs trace information when you enable network tracing in your application. For more information, see <a href=\"../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Network Tracing in the .NET Framework</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using the Stop method to close the underlying <a class=\"xref\" href=\"system.net.sockets.socket\" data-linktype=\"relative-path\">Socket</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Net.Sockets.TcpListener#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Net;\nusing namespace System::Net::Sockets;\nusing namespace System::Text;\nusing namespace System::Threading;\nvoid main()\n{\n   try\n   {\n      \n      // Set the TcpListener on port 13000.\n      Int32 port = 13000;\n      IPAddress^ localAddr = IPAddress::Parse( &quot;127.0.0.1&quot; );\n      \n      // TcpListener* server = new TcpListener(port);\n      TcpListener^ server = gcnew TcpListener( localAddr,port );\n      \n      // Start listening for client requests.\n      server-&gt;Start();\n      \n      // Buffer for reading data\n      array&lt;Byte&gt;^bytes = gcnew array&lt;Byte&gt;(256);\n      String^ data = nullptr;\n      \n      // Enter the listening loop.\n      while ( true )\n      {\n         Console::Write( &quot;Waiting for a connection... &quot; );\n         \n         // Perform a blocking call to accept requests.\n         // You could also user server.AcceptSocket() here.\n         TcpClient^ client = server-&gt;AcceptTcpClient();\n         Console::WriteLine( &quot;Connected!&quot; );\n         data = nullptr;\n         \n         // Get a stream Object* for reading and writing\n         NetworkStream^ stream = client-&gt;GetStream();\n         Int32 i;\n         \n         // Loop to receive all the data sent by the client.\n         while ( i = stream-&gt;Read( bytes, 0, bytes-&gt;Length ) )\n         {\n            \n            // Translate data bytes to a ASCII String*.\n            data = Text::Encoding::ASCII-&gt;GetString( bytes, 0, i );\n            Console::WriteLine( &quot;Received: {0}&quot;, data );\n            \n            // Process the data sent by the client.\n            data = data-&gt;ToUpper();\n            array&lt;Byte&gt;^msg = Text::Encoding::ASCII-&gt;GetBytes( data );\n            \n            // Send back a response.\n            stream-&gt;Write( msg, 0, msg-&gt;Length );\n            Console::WriteLine( &quot;Sent: {0}&quot;, data );\n         }\n         \n         // Shutdown and end connection\n         client-&gt;Close();\n      }\n   }\n   catch ( SocketException^ e ) \n   {\n      Console::WriteLine( &quot;SocketException: {0}&quot;, e );\n   }\n\n   Console::WriteLine( &quot;<br>Hit enter to continue...&quot; );\n   Console::Read();\n}\n\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.Sockets.TcpListener#1\">using System;\nusing System.IO;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Text;\n\nclass MyTcpListener\n{\n  public static void Main()\n  { \n    TcpListener server=null;   \n    try\n    {\n      // Set the TcpListener on port 13000.\n      Int32 port = 13000;\n      IPAddress localAddr = IPAddress.Parse(&quot;127.0.0.1&quot;);\n      \n      // TcpListener server = new TcpListener(port);\n      server = new TcpListener(localAddr, port);\n\n      // Start listening for client requests.\n      server.Start();\n         \n      // Buffer for reading data\n      Byte[] bytes = new Byte[256];\n      String data = null;\n\n      // Enter the listening loop.\n      while(true) \n      {\n        Console.Write(&quot;Waiting for a connection... &quot;);\n        \n        // Perform a blocking call to accept requests.\n        // You could also user server.AcceptSocket() here.\n        TcpClient client = server.AcceptTcpClient();            \n        Console.WriteLine(&quot;Connected!&quot;);\n\n        data = null;\n\n        // Get a stream object for reading and writing\n        NetworkStream stream = client.GetStream();\n\n        int i;\n\n        // Loop to receive all the data sent by the client.\n        while((i = stream.Read(bytes, 0, bytes.Length))!=0) \n        {   \n          // Translate data bytes to a ASCII string.\n          data = System.Text.Encoding.ASCII.GetString(bytes, 0, i);\n          Console.WriteLine(&quot;Received: {0}&quot;, data);\n       \n          // Process the data sent by the client.\n          data = data.ToUpper();\n\n          byte[] msg = System.Text.Encoding.ASCII.GetBytes(data);\n\n          // Send back a response.\n          stream.Write(msg, 0, msg.Length);\n          Console.WriteLine(&quot;Sent: {0}&quot;, data);            \n        }\n         \n        // Shutdown and end connection\n        client.Close();\n      }\n    }\n    catch(SocketException e)\n    {\n      Console.WriteLine(&quot;SocketException: {0}&quot;, e);\n    }\n    finally\n    {\n       // Stop listening for new clients.\n       server.Stop();\n    }\n\n      \n    Console.WriteLine(&quot;<br>Hit enter to continue...&quot;);\n    Console.Read();\n  }   \n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.Sockets.TcpListener#1\">Imports System\nImports System.IO\nImports System.Net\nImports System.Net.Sockets\nImports System.Text\nImports Microsoft.VisualBasic\n\n\nClass MyTcpListener\n\n    Public Shared Sub Main()\n\n\tDim server As TcpListener\n\tserver=nothing\n        Try\n            &#39; Set the TcpListener on port 13000.\n         Dim port As Int32 = 13000\n         Dim localAddr As IPAddress = IPAddress.Parse(&quot;127.0.0.1&quot;)\n\n         server = New TcpListener(localAddr, port)\n         \n         &#39; Start listening for client requests.\n         server.Start()\n         \n         &#39; Buffer for reading data\n            Dim bytes(1024) As Byte\n            Dim data As String = Nothing\n         \n         &#39; Enter the listening loop.\n         While True\n            Console.Write(&quot;Waiting for a connection... &quot;)\n            \n            &#39; Perform a blocking call to accept requests.\n            &#39; You could also user server.AcceptSocket() here.\n            Dim client As TcpClient = server.AcceptTcpClient()\n            Console.WriteLine(&quot;Connected!&quot;)\n            \n            data = Nothing\n            \n            &#39; Get a stream object for reading and writing\n            Dim stream As NetworkStream = client.GetStream()\n            \n            Dim i As Int32\n            \n            &#39; Loop to receive all the data sent by the client.\n            i = stream.Read(bytes, 0, bytes.Length)\n            While (i &lt;&gt; 0) \n               &#39; Translate data bytes to a ASCII string.\n               data = System.Text.Encoding.ASCII.GetString(bytes, 0, i)\n                    Console.WriteLine(&quot;Received: {0}&quot;, data)\n               \n               &#39; Process the data sent by the client.\n               data = data.ToUpper()\n                    Dim msg As Byte() = System.Text.Encoding.ASCII.GetBytes(data)\n               \n               &#39; Send back a response.\n               stream.Write(msg, 0, msg.Length)\n                    Console.WriteLine(&quot;Sent: {0}&quot;, data)\n              \n               i = stream.Read(bytes, 0, bytes.Length)\n\n            End While\n            \n            &#39; Shutdown and end connection\n            client.Close()\n         End While\n      Catch e As SocketException\n         Console.WriteLine(&quot;SocketException: {0}&quot;, e)\n      Finally\n         server.Stop()\n      End Try\n      \n      Console.WriteLine(ControlChars.Cr + &quot;Hit enter to continue....&quot;)\n      Console.Read()\n   End Sub &#39;Main\n\nEnd Class &#39;MyTcpListener \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.Sockets.TcpListener.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.Sockets.TcpListener.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.TcpListener\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.TcpListener..ctor\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.TcpListener.AcceptSocket\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.TcpListener.AcceptSocketAsync\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.TcpListener.AcceptTcpClient\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.TcpListener.AcceptTcpClientAsync\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.TcpListener.Active\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.TcpListener.AllowNatTraversal\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.TcpListener.BeginAcceptSocket\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.TcpListener.BeginAcceptTcpClient\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.TcpListener.Create\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.TcpListener.EndAcceptSocket\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.TcpListener.EndAcceptTcpClient\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.TcpListener.ExclusiveAddressUse\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.TcpListener.LocalEndpoint\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.TcpListener.Pending\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.TcpListener.Server\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.TcpListener.Start\">\r\n<meta name=\"APIName\" content=\"System.Net.Sockets.TcpListener.Stop\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"46f38f63-12e6-59dd-b4bb-b9979b26b9e7\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Listens for connections from TCP network clients.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Net.Sockets/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.Sockets.TcpListener\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.Sockets.TcpListener.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.Sockets.TcpListener.yml","open_to_public_contributors":true,"api_name":["System.Net.Sockets.TcpListener","System.Net.Sockets.TcpListener..ctor","System.Net.Sockets.TcpListener.AcceptSocket","System.Net.Sockets.TcpListener.AcceptSocketAsync","System.Net.Sockets.TcpListener.AcceptTcpClient","System.Net.Sockets.TcpListener.AcceptTcpClientAsync","System.Net.Sockets.TcpListener.Active","System.Net.Sockets.TcpListener.AllowNatTraversal","System.Net.Sockets.TcpListener.BeginAcceptSocket","System.Net.Sockets.TcpListener.BeginAcceptTcpClient","System.Net.Sockets.TcpListener.Create","System.Net.Sockets.TcpListener.EndAcceptSocket","System.Net.Sockets.TcpListener.EndAcceptTcpClient","System.Net.Sockets.TcpListener.ExclusiveAddressUse","System.Net.Sockets.TcpListener.LocalEndpoint","System.Net.Sockets.TcpListener.Pending","System.Net.Sockets.TcpListener.Server","System.Net.Sockets.TcpListener.Start","System.Net.Sockets.TcpListener.Stop"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.Sockets.TcpListener","System::Net::Sockets::TcpListener","System.Net.Sockets.TcpListener.#ctor","System::Net::Sockets::TcpListener::#ctor","System.Net.Sockets.TcpListener.AcceptSocket","System::Net::Sockets::TcpListener::AcceptSocket","System.Net.Sockets.TcpListener.AcceptSocketAsync","System::Net::Sockets::TcpListener::AcceptSocketAsync","System.Net.Sockets.TcpListener.AcceptTcpClient","System::Net::Sockets::TcpListener::AcceptTcpClient","System.Net.Sockets.TcpListener.AcceptTcpClientAsync","System::Net::Sockets::TcpListener::AcceptTcpClientAsync","System.Net.Sockets.TcpListener.Active","System::Net::Sockets::TcpListener::Active","System.Net.Sockets.TcpListener.AllowNatTraversal","System::Net::Sockets::TcpListener::AllowNatTraversal","System.Net.Sockets.TcpListener.BeginAcceptSocket","System::Net::Sockets::TcpListener::BeginAcceptSocket","System.Net.Sockets.TcpListener.BeginAcceptTcpClient","System::Net::Sockets::TcpListener::BeginAcceptTcpClient","System.Net.Sockets.TcpListener.Create","System::Net::Sockets::TcpListener::Create","System.Net.Sockets.TcpListener.EndAcceptSocket","System::Net::Sockets::TcpListener::EndAcceptSocket","System.Net.Sockets.TcpListener.EndAcceptTcpClient","System::Net::Sockets::TcpListener::EndAcceptTcpClient","System.Net.Sockets.TcpListener.ExclusiveAddressUse","System::Net::Sockets::TcpListener::ExclusiveAddressUse","System.Net.Sockets.TcpListener.LocalEndpoint","System::Net::Sockets::TcpListener::LocalEndpoint","System.Net.Sockets.TcpListener.Pending","System::Net::Sockets::TcpListener::Pending","System.Net.Sockets.TcpListener.Server","System::Net::Sockets::TcpListener::Server","System.Net.Sockets.TcpListener.Start","System::Net::Sockets::TcpListener::Start","System.Net.Sockets.TcpListener.Stop","System::Net::Sockets::TcpListener::Stop"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"46f38f63-12e6-59dd-b4bb-b9979b26b9e7","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Net.Sockets/TcpListener.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"TcpListener class | Microsoft Docs","_op_ogTitle":"TcpListener class","description":"Listens for connections from TCP network clients.\n","toc_asset_id":"_splitted/System.Net.Sockets/toc.json","toc_rel":"_splitted/System.Net.Sockets/toc.json","source_url":"","ms.assetid":"System.Net.Sockets.TcpListener","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.sockets.tcplistener","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.sockets.tcplistener","fileRelativePath":"System.Net.Sockets.TcpListener.html"},"themesRelativePathToOutputRoot":"_themes/"}