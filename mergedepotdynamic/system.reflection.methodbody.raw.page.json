{"content":"    \r\n    <h1 id=\"System_Reflection_MethodBody\">\r\n      <span class=\"lang-csharp\">MethodBody</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides access to the metadata and MSIL for the body of a method.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic class MethodBody</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">MethodBody</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The MethodBody class provides access to information about the local variables and exception-handling clauses in a method body, and to the Microsoft intermediate language (MSIL) that makes up the method body.  </p>\n<p> You can use the token-resolution methods of the module class, such as <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_ResolveType_\" data-linktype=\"relative-path\">ResolveType</a>, <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_ResolveMethod_\" data-linktype=\"relative-path\">ResolveMethod</a>, and <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_ResolveType_\" data-linktype=\"relative-path\">ResolveType</a>, to resolve the tokens in the method body to <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects, <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> objects, and <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> objects that provide detailed information about the types, methods, and fields accessed by the MSIL in the method body.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Parsing method bodies requires a thorough understanding of metadata and MSIL instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially &quot;Partition II: Metadata Definition and Semantics&quot; and &quot;Partition III: CIL Instruction Set&quot;. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.  </p>\n</div>\n<p> To obtain a MethodBody object for a given method, first obtain a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object for the method, then call the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object&#39;s <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_GetMethodBody_\" data-linktype=\"relative-path\">GetMethodBody</a> method.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MethodBody__ctor\" data-linktype=\"self-bookmark\">MethodBody()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.reflection.methodbody\" data-linktype=\"relative-path\">MethodBody</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MethodBody_ExceptionHandlingClauses\" data-linktype=\"self-bookmark\">ExceptionHandlingClauses</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a list that includes all the exception-handling clauses in the method body.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MethodBody_InitLocals\" data-linktype=\"self-bookmark\">InitLocals</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether local variables in the method body are initialized to the default values for their types.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MethodBody_LocalSignatureMetadataToken\" data-linktype=\"self-bookmark\">LocalSignatureMetadataToken</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a metadata token for the signature that describes the local variables for the method in metadata.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MethodBody_LocalVariables\" data-linktype=\"self-bookmark\">LocalVariables</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the list of local variables declared in the method body.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MethodBody_MaxStackSize\" data-linktype=\"self-bookmark\">MaxStackSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the maximum number of items on the operand stack when the method is executing.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_MethodBody_GetILAsByteArray\" data-linktype=\"self-bookmark\">GetILAsByteArray()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the MSIL for the method body, as an array of bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MethodBody__ctor\">\r\n    \r\n            <a id=\"System_Reflection_MethodBody__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MethodBody()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.reflection.methodbody\" data-linktype=\"relative-path\">MethodBody</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected MethodBody ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor is invoked by derived classes during the construction of <a class=\"xref\" href=\"system.reflection.methodbody\" data-linktype=\"relative-path\">MethodBody</a> objects.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MethodBody_ExceptionHandlingClauses\">\r\n    \r\n            <a id=\"System_Reflection_MethodBody_ExceptionHandlingClauses_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExceptionHandlingClauses</div>        \r\n          </div>\r\n    \r\n            <p>Gets a list that includes all the exception-handling clauses in the method body.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Collections.Generic.IList&lt;System.Reflection.ExceptionHandlingClause&gt; ExceptionHandlingClauses { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList</a>&lt;<a class=\"xref\" href=\"system.reflection.exceptionhandlingclause\" data-linktype=\"relative-path\">ExceptionHandlingClause</a>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IList`1</span> of <a class=\"xref\" href=\"system.reflection.exceptionhandlingclause\" data-linktype=\"relative-path\">ExceptionHandlingClause</a> objects representing the exception-handling clauses in the body of the method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The list includes all clauses from all try blocks in the method body. Each <a class=\"xref\" href=\"system.reflection.exceptionhandlingclause\" data-linktype=\"relative-path\">ExceptionHandlingClause</a> object contains information that identifies the try block with which it is associated.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Working with exception-handling clauses requires a thorough understanding of metadata and MSIL instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially &quot;Partition II: Metadata Definition and Semantics&quot; and &quot;Partition III: CIL Instruction Set&quot;. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example defines a test method named <code>MethodBodyExample</code> and displays information about its exception-handling clauses. The <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_GetMethodBody_\" data-linktype=\"relative-path\">GetMethodBody</a> method is used to obtain a <a class=\"xref\" href=\"system.reflection.methodbody\" data-linktype=\"relative-path\">MethodBody</a> object for the test method. The ExceptionHandlingClauses property is used to obtain a list of <a class=\"xref\" href=\"system.reflection.exceptionhandlingclause\" data-linktype=\"relative-path\">ExceptionHandlingClause</a> objects.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Not all computer languages can generate <a class=\"xref\" href=\"system.reflection.exceptionhandlingclauseoptions\" data-linktype=\"relative-path\">System.Reflection.ExceptionHandlingClauseOptions</a> clauses. The Visual Basic example shows a filter clause, using a Visual Basic <code>When</code> expression, which is omitted from the examples for other languages.  </p>\n</div>\n<p> This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.reflection.methodbody\" data-linktype=\"relative-path\">MethodBody</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"MethodBody#2\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Reflection;\n\npublic ref class Example\n{\n    // The Main method contains code to analyze this method, using\n    // the properties and methods of the MethodBody class.\npublic:\n    void MethodBodyExample(Object^ arg)\n    {\n        // Define some local variables. In addition to these variables,\n        // the local variable list includes the variables scoped to \n        // the catch clauses.\n        int var1 = 42;\n        String^ var2 = &quot;Forty-two&quot;;\n\n        try\n        {\n            // Depending on the input value, throw an ArgumentException or \n            // an ArgumentNullException to test the Catch clauses.\n            if (arg == nullptr)\n            {\n                throw gcnew ArgumentNullException(&quot;The argument cannot &quot; +\n                    &quot;be null.&quot;);\n            }\n            if (arg-&gt;GetType() == String::typeid)\n            {\n                throw gcnew ArgumentException(&quot;The argument cannot &quot; + \n                    &quot;be a string.&quot;);\n            }        \n        }\n\n        // There is no Filter clause in this code example. See the Visual \n        // Basic code for an example of a Filter clause.\n\n        // This catch clause handles the ArgumentException class, and\n        // any other class derived from Exception.\n        catch (ArgumentException^ ex)\n        {\n            Console::WriteLine(&quot;Ordinary exception-handling clause caught:&quot; +\n                &quot; {0}&quot;, ex-&gt;GetType());\n        }        \n        finally\n        {\n            var1 = 3033;\n            var2 = &quot;Another string.&quot;;\n        }\n    }\n};\n\nint main()\n{ \n    // Get method body information.\n    MethodInfo^ mi = \n        Example::typeid-&gt;GetMethod(&quot;MethodBodyExample&quot;);\n\n    MethodBody^ mb = mi-&gt;GetMethodBody();\n    Console::WriteLine(&quot;\\r<br>Method: {0}&quot;, mi);\n\n    // Display the general information included in the \n    // MethodBody object.\n    Console::WriteLine(&quot;    Local variables are initialized: {0}&quot;, \n        mb-&gt;InitLocals);\n    Console::WriteLine(&quot;    Maximum number of items on the operand &quot; +\n        &quot;stack: {0}&quot;, mb-&gt;MaxStackSize);\n</code></pre><pre><code class=\"lang-vb\" name=\"MethodBody#2\">Imports System\nImports System.Reflection\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        &#39; Demonstrate the effect of the Visual Basic When keyword, which\n        &#39; generates a Filter clause in the Try block.\n        Dim e As New Example()\n        Console.WriteLine()\n        e.MethodBodyExample(&quot;String argument&quot;)\n        e.MethodBodyExample(Nothing)\n\n        &#39; Get method body information.\n        Dim mi As MethodInfo = _\n            GetType(Example).GetMethod(&quot;MethodBodyExample&quot;)\n        Dim mb As MethodBody = mi.GetMethodBody()\n        Console.WriteLine(vbCrLf &amp; &quot;Method: {0}&quot;, mi)\n\n        &#39; Display the general information included in the \n        &#39; MethodBody object.\n        Console.WriteLine(&quot;    Local variables are initialized: {0}&quot;, _\n            mb.InitLocals)\n        Console.WriteLine(&quot;    Maximum number of items on the operand stack: {0}&quot;, _\n            mb.MaxStackSize)\n</code></pre><pre><code class=\"lang-cs\" name=\"MethodBody#2\">using System;\nusing System.Reflection;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Get method body information.\n        MethodInfo mi = typeof(Example).GetMethod(&quot;MethodBodyExample&quot;);\n        MethodBody mb = mi.GetMethodBody();\n        Console.WriteLine(&quot;\\r<br>Method: {0}&quot;, mi);\n\n        // Display the general information included in the \n        // MethodBody object.\n        Console.WriteLine(&quot;    Local variables are initialized: {0}&quot;, \n            mb.InitLocals);\n        Console.WriteLine(&quot;    Maximum number of items on the operand stack: {0}&quot;, \n            mb.MaxStackSize);\n</code></pre><pre><code class=\"lang-cpp\" name=\"MethodBody#4\">\n    // Display exception handling clauses.\n    Console::WriteLine();\n    for each(ExceptionHandlingClause^ exhc in mb-&gt;ExceptionHandlingClauses)\n    {\n        Console::WriteLine(exhc-&gt;Flags.ToString());\n\n        // The FilterOffset property is meaningful only for Filter\n        // clauses. The CatchType property is not meaningful for \n        // Filter or Finally clauses. \n        switch(exhc-&gt;Flags)\n        {\n        case ExceptionHandlingClauseOptions::Filter:\n            Console::WriteLine(&quot;        Filter Offset: {0}&quot;, \n                exhc-&gt;FilterOffset);\n            break;\n        case ExceptionHandlingClauseOptions::Finally:\n            break;\n        default:\n            Console::WriteLine(&quot;    Type of exception: {0}&quot;, \n                exhc-&gt;CatchType);\n            break;\n        }\n\n        Console::WriteLine(&quot;       Handler Length: {0}&quot;,\n            exhc-&gt;HandlerLength);\n        Console::WriteLine(&quot;       Handler Offset: {0}&quot;, \n            exhc-&gt;HandlerOffset);\n        Console::WriteLine(&quot;     Try Block Length: {0}&quot;, exhc-&gt;TryLength);\n        Console::WriteLine(&quot;     Try Block Offset: {0}&quot;, exhc-&gt;TryOffset);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"MethodBody#4\">\n        &#39; Display exception handling clauses.\n        Console.WriteLine()\n        For Each ehc As ExceptionHandlingClause In mb.ExceptionHandlingClauses\n            Console.WriteLine(ehc.Flags.ToString())\n\n            &#39; The FilterOffset property is meaningful only for Filter\n            &#39; clauses. The CatchType property is not meaningful for \n            &#39; Filter or Finally clauses. \n            Select Case ehc.Flags\n                Case ExceptionHandlingClauseOptions.Filter\n                    Console.WriteLine(&quot;        Filter Offset: {0}&quot;, _\n                        ehc.FilterOffset)\n                Case ExceptionHandlingClauseOptions.Finally\n                Case Else\n                    Console.WriteLine(&quot;    Type of exception: {0}&quot;, _\n                        ehc.CatchType)\n            End Select\n\n            Console.WriteLine(&quot;       Handler Length: {0}&quot;, ehc.HandlerLength)\n            Console.WriteLine(&quot;       Handler Offset: {0}&quot;, ehc.HandlerOffset)\n            Console.WriteLine(&quot;     Try Block Length: {0}&quot;, ehc.TryLength)\n            Console.WriteLine(&quot;     Try Block Offset: {0}&quot;, ehc.TryOffset)\n        Next\n</code></pre><pre><code class=\"lang-cs\" name=\"MethodBody#4\">\n        // Display exception handling clauses.\n        Console.WriteLine();\n        foreach (ExceptionHandlingClause ehc in mb.ExceptionHandlingClauses)\n        {\n            Console.WriteLine(ehc.Flags.ToString());\n\n            // The FilterOffset property is meaningful only for Filter\n            // clauses. The CatchType property is not meaningful for \n            // Filter or Finally clauses. \n            switch (ehc.Flags)\n            {\n                case ExceptionHandlingClauseOptions.Filter:\n                    Console.WriteLine(&quot;        Filter Offset: {0}&quot;, \n                        ehc.FilterOffset);\n                    break;\n                case ExceptionHandlingClauseOptions.Finally:\n                    break;\n                default:\n                    Console.WriteLine(&quot;    Type of exception: {0}&quot;, \n                        ehc.CatchType);\n                    break;\n            }\n\n            Console.WriteLine(&quot;       Handler Length: {0}&quot;, ehc.HandlerLength);\n            Console.WriteLine(&quot;       Handler Offset: {0}&quot;, ehc.HandlerOffset);\n            Console.WriteLine(&quot;     Try Block Length: {0}&quot;, ehc.TryLength);\n            Console.WriteLine(&quot;     Try Block Offset: {0}&quot;, ehc.TryOffset);\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"MethodBody#5\">    // The Main method contains code to analyze this method, using\n    // the properties and methods of the MethodBody class.\npublic:\n    void MethodBodyExample(Object^ arg)\n    {\n        // Define some local variables. In addition to these variables,\n        // the local variable list includes the variables scoped to \n        // the catch clauses.\n        int var1 = 42;\n        String^ var2 = &quot;Forty-two&quot;;\n\n        try\n        {\n            // Depending on the input value, throw an ArgumentException or \n            // an ArgumentNullException to test the Catch clauses.\n            if (arg == nullptr)\n            {\n                throw gcnew ArgumentNullException(&quot;The argument cannot &quot; +\n                    &quot;be null.&quot;);\n            }\n            if (arg-&gt;GetType() == String::typeid)\n            {\n                throw gcnew ArgumentException(&quot;The argument cannot &quot; + \n                    &quot;be a string.&quot;);\n            }        \n        }\n\n        // There is no Filter clause in this code example. See the Visual \n        // Basic code for an example of a Filter clause.\n\n        // This catch clause handles the ArgumentException class, and\n        // any other class derived from Exception.\n        catch (ArgumentException^ ex)\n        {\n            Console::WriteLine(&quot;Ordinary exception-handling clause caught:&quot; +\n                &quot; {0}&quot;, ex-&gt;GetType());\n        }        \n        finally\n        {\n            var1 = 3033;\n            var2 = &quot;Another string.&quot;;\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"MethodBody#5\">    End Sub\n\n    &#39; This test method is executed at the beginning of Main, to show\n    &#39; how the Filter clause works. The Filter clause is generated by \n    &#39; a Visual Basic When expression. If arg is Nothing, this method\n    &#39; throws ArgumentNullException, which is caught by the filter\n    &#39; clause. If arg is a string, the method throws ArgumentException,\n    &#39; which does not match the filter clause.\n    &#39;\n    &#39; Sub Main also contains code to analyze this method, using \n    &#39; the properties and methods of the MethodBody class.\n    Public Sub MethodBodyExample(ByVal arg As Object)\n\n        &#39; Define some local variables. In addition to these variables,\n        &#39; the local variable list includes the variables scoped to \n        &#39; the catch clauses.\n        Dim var1 As Integer = 42\n        Dim var2 As String = &quot;Forty-two&quot;\n\n        Try\n            &#39; Depending on the input value, throw an ArgumentException or \n            &#39; an ArgumentNullException to test the Catch clauses.\n            &#39;\n            If arg Is Nothing Then\n                Throw New ArgumentNullException(&quot;The argument cannot be Nothing.&quot;)\n            End If\n            If arg.GetType() Is GetType(String) Then\n                Throw New ArgumentException(&quot;The argument cannot be a string.&quot;)\n            End If\n        \n        &#39; The When expression makes this a filter clause. The expression \n        &#39; selects only exceptions that derive from the ArgumentException\n        &#39; class. Other exceptions, including ArgumentException itself, \n        &#39; are not handled by this filter clause.\n        Catch ex As ArgumentException _\n            When ex.GetType().IsSubclassOf(GetType(ArgumentException))\n\n            Console.WriteLine(&quot;Filter clause caught: {0}&quot;, ex.GetType())\n        \n        &#39; This catch clause handles the ArgumentException class, and\n        &#39; any other class derived from Exception.\n        Catch ex As Exception\n            Console.WriteLine(&quot;Ordinary exception-handling clause caught: {0}&quot;, _\n                ex.GetType())\n\n        Finally\n            var1 = 3033\n            var2 = &quot;Another string.&quot;\n        End Try\n    End Sub\nEnd Class\n\n&#39; This code example produces output similar to the following:\n&#39;\n&#39;Ordinary exception-handling clause caught: System.ArgumentException\n&#39;Filter clause caught: System.ArgumentNullException\n&#39;\n&#39;Method: Void MethodBodyExample(System.Object)\n&#39;    Local variables are initialized: True\n&#39;    Maximum number of items on the operand stack: 3\n</code></pre><pre><code class=\"lang-cs\" name=\"MethodBody#5\">    }\n\n    // The Main method contains code to analyze this method, using\n    // the properties and methods of the MethodBody class.\n    public void MethodBodyExample(object arg)\n    {\n        // Define some local variables. In addition to these variables,\n        // the local variable list includes the variables scoped to \n        // the catch clauses.\n        int var1 = 42;\n        string var2 = &quot;Forty-two&quot;;\n\n        try\n        {\n            // Depending on the input value, throw an ArgumentException or \n            // an ArgumentNullException to test the Catch clauses.\n            if (arg == null)\n            {\n                throw new ArgumentNullException(&quot;The argument cannot be null.&quot;);\n            }\n            if (arg.GetType() == typeof(string))\n            {\n                throw new ArgumentException(&quot;The argument cannot be a string.&quot;);\n            }        \n        }\n\n        // There is no Filter clause in this code example. See the Visual \n        // Basic code for an example of a Filter clause.\n\n        // This catch clause handles the ArgumentException class, and\n        // any other class derived from Exception.\n        catch(Exception ex)\n        {\n            Console.WriteLine(&quot;Ordinary exception-handling clause caught: {0}&quot;, \n                ex.GetType());\n        }        \n        finally\n        {\n            var1 = 3033;\n            var2 = &quot;Another string.&quot;;\n        }\n    }\n}\n\n// This code example produces output similar to the following:\n//\n//Method: Void MethodBodyExample(System.Object)\n//    Local variables are initialized: True\n//    Maximum number of items on the operand stack: 2\n</code></pre><pre><code class=\"lang-cpp\" name=\"MethodBody#7\">//Clause\n//    Type of exception: System.ArgumentException\n//       Handler Length: 29\n//       Handler Offset: 78\n//     Try Block Length: 65\n//     Try Block Offset: 13\n//Finally\n//       Handler Length: 13\n//       Handler Offset: 113\n//     Try Block Length: 100\n//     Try Block Offset: 13\n</code></pre><pre><code class=\"lang-vb\" name=\"MethodBody#7\">&#39;\n&#39;Filter\n&#39;        Filter Offset: 0\n&#39;       Handler Length: 19\n&#39;       Handler Offset: 99\n&#39;     Try Block Length: 45\n&#39;     Try Block Offset: 9\n&#39;Clause\n&#39;    Type of exception: System.Exception\n&#39;       Handler Length: 25\n&#39;       Handler Offset: 118\n&#39;     Try Block Length: 45\n&#39;     Try Block Offset: 9\n&#39;Finally\n&#39;       Handler Length: 13\n&#39;       Handler Offset: 153\n&#39;     Try Block Length: 144\n&#39;     Try Block Offset: 9\n</code></pre><pre><code class=\"lang-cs\" name=\"MethodBody#7\">//\n//Clause\n//    Type of exception: System.Exception\n//       Handler Length: 21\n//       Handler Offset: 70\n//     Try Block Length: 61\n//     Try Block Offset: 9\n//Finally\n//       Handler Length: 14\n//       Handler Offset: 94\n//     Try Block Length: 85\n//     Try Block Offset: 9\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MethodBody_InitLocals\">\r\n    \r\n            <a id=\"System_Reflection_MethodBody_InitLocals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InitLocals</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether local variables in the method body are initialized to the default values for their types.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool InitLocals { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the method body contains code to initialize local variables to <code>null</code> for reference types, or to the zero-initialized value for value types; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The InitLocals property refers to variables that are not explicitly initialized; that is, variables that are declared with syntax such as <code>int x;</code> in C# or <code>Dim x As Integer</code> in Visual Basic.  </p>\n<p> Reference variables are initialized to <code>null</code> by default. Numeric variables are initialized to zero.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example defines a test method named <code>MethodBodyExample</code> and displays its local variable information and exception-handling clauses. The <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_GetMethodBody_\" data-linktype=\"relative-path\">GetMethodBody</a> method is used to obtain a <a class=\"xref\" href=\"system.reflection.methodbody\" data-linktype=\"relative-path\">MethodBody</a> object for the test method. The <a class=\"xref\" href=\"system.reflection.methodbody#System_Reflection_MethodBody_MaxStackSize_\" data-linktype=\"relative-path\">MaxStackSize</a> and InitLocals properties are displayed.  </p>\n<p> This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.reflection.methodbody\" data-linktype=\"relative-path\">MethodBody</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"MethodBody#2\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Reflection;\n\npublic ref class Example\n{\n    // The Main method contains code to analyze this method, using\n    // the properties and methods of the MethodBody class.\npublic:\n    void MethodBodyExample(Object^ arg)\n    {\n        // Define some local variables. In addition to these variables,\n        // the local variable list includes the variables scoped to \n        // the catch clauses.\n        int var1 = 42;\n        String^ var2 = &quot;Forty-two&quot;;\n\n        try\n        {\n            // Depending on the input value, throw an ArgumentException or \n            // an ArgumentNullException to test the Catch clauses.\n            if (arg == nullptr)\n            {\n                throw gcnew ArgumentNullException(&quot;The argument cannot &quot; +\n                    &quot;be null.&quot;);\n            }\n            if (arg-&gt;GetType() == String::typeid)\n            {\n                throw gcnew ArgumentException(&quot;The argument cannot &quot; + \n                    &quot;be a string.&quot;);\n            }        \n        }\n\n        // There is no Filter clause in this code example. See the Visual \n        // Basic code for an example of a Filter clause.\n\n        // This catch clause handles the ArgumentException class, and\n        // any other class derived from Exception.\n        catch (ArgumentException^ ex)\n        {\n            Console::WriteLine(&quot;Ordinary exception-handling clause caught:&quot; +\n                &quot; {0}&quot;, ex-&gt;GetType());\n        }        \n        finally\n        {\n            var1 = 3033;\n            var2 = &quot;Another string.&quot;;\n        }\n    }\n};\n\nint main()\n{ \n    // Get method body information.\n    MethodInfo^ mi = \n        Example::typeid-&gt;GetMethod(&quot;MethodBodyExample&quot;);\n\n    MethodBody^ mb = mi-&gt;GetMethodBody();\n    Console::WriteLine(&quot;\\r<br>Method: {0}&quot;, mi);\n\n    // Display the general information included in the \n    // MethodBody object.\n    Console::WriteLine(&quot;    Local variables are initialized: {0}&quot;, \n        mb-&gt;InitLocals);\n    Console::WriteLine(&quot;    Maximum number of items on the operand &quot; +\n        &quot;stack: {0}&quot;, mb-&gt;MaxStackSize);\n</code></pre><pre><code class=\"lang-vb\" name=\"MethodBody#2\">Imports System\nImports System.Reflection\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        &#39; Demonstrate the effect of the Visual Basic When keyword, which\n        &#39; generates a Filter clause in the Try block.\n        Dim e As New Example()\n        Console.WriteLine()\n        e.MethodBodyExample(&quot;String argument&quot;)\n        e.MethodBodyExample(Nothing)\n\n        &#39; Get method body information.\n        Dim mi As MethodInfo = _\n            GetType(Example).GetMethod(&quot;MethodBodyExample&quot;)\n        Dim mb As MethodBody = mi.GetMethodBody()\n        Console.WriteLine(vbCrLf &amp; &quot;Method: {0}&quot;, mi)\n\n        &#39; Display the general information included in the \n        &#39; MethodBody object.\n        Console.WriteLine(&quot;    Local variables are initialized: {0}&quot;, _\n            mb.InitLocals)\n        Console.WriteLine(&quot;    Maximum number of items on the operand stack: {0}&quot;, _\n            mb.MaxStackSize)\n</code></pre><pre><code class=\"lang-cs\" name=\"MethodBody#2\">using System;\nusing System.Reflection;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Get method body information.\n        MethodInfo mi = typeof(Example).GetMethod(&quot;MethodBodyExample&quot;);\n        MethodBody mb = mi.GetMethodBody();\n        Console.WriteLine(&quot;\\r<br>Method: {0}&quot;, mi);\n\n        // Display the general information included in the \n        // MethodBody object.\n        Console.WriteLine(&quot;    Local variables are initialized: {0}&quot;, \n            mb.InitLocals);\n        Console.WriteLine(&quot;    Maximum number of items on the operand stack: {0}&quot;, \n            mb.MaxStackSize);\n</code></pre><pre><code class=\"lang-cpp\" name=\"MethodBody#5\">    // The Main method contains code to analyze this method, using\n    // the properties and methods of the MethodBody class.\npublic:\n    void MethodBodyExample(Object^ arg)\n    {\n        // Define some local variables. In addition to these variables,\n        // the local variable list includes the variables scoped to \n        // the catch clauses.\n        int var1 = 42;\n        String^ var2 = &quot;Forty-two&quot;;\n\n        try\n        {\n            // Depending on the input value, throw an ArgumentException or \n            // an ArgumentNullException to test the Catch clauses.\n            if (arg == nullptr)\n            {\n                throw gcnew ArgumentNullException(&quot;The argument cannot &quot; +\n                    &quot;be null.&quot;);\n            }\n            if (arg-&gt;GetType() == String::typeid)\n            {\n                throw gcnew ArgumentException(&quot;The argument cannot &quot; + \n                    &quot;be a string.&quot;);\n            }        \n        }\n\n        // There is no Filter clause in this code example. See the Visual \n        // Basic code for an example of a Filter clause.\n\n        // This catch clause handles the ArgumentException class, and\n        // any other class derived from Exception.\n        catch (ArgumentException^ ex)\n        {\n            Console::WriteLine(&quot;Ordinary exception-handling clause caught:&quot; +\n                &quot; {0}&quot;, ex-&gt;GetType());\n        }        \n        finally\n        {\n            var1 = 3033;\n            var2 = &quot;Another string.&quot;;\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"MethodBody#5\">    End Sub\n\n    &#39; This test method is executed at the beginning of Main, to show\n    &#39; how the Filter clause works. The Filter clause is generated by \n    &#39; a Visual Basic When expression. If arg is Nothing, this method\n    &#39; throws ArgumentNullException, which is caught by the filter\n    &#39; clause. If arg is a string, the method throws ArgumentException,\n    &#39; which does not match the filter clause.\n    &#39;\n    &#39; Sub Main also contains code to analyze this method, using \n    &#39; the properties and methods of the MethodBody class.\n    Public Sub MethodBodyExample(ByVal arg As Object)\n\n        &#39; Define some local variables. In addition to these variables,\n        &#39; the local variable list includes the variables scoped to \n        &#39; the catch clauses.\n        Dim var1 As Integer = 42\n        Dim var2 As String = &quot;Forty-two&quot;\n\n        Try\n            &#39; Depending on the input value, throw an ArgumentException or \n            &#39; an ArgumentNullException to test the Catch clauses.\n            &#39;\n            If arg Is Nothing Then\n                Throw New ArgumentNullException(&quot;The argument cannot be Nothing.&quot;)\n            End If\n            If arg.GetType() Is GetType(String) Then\n                Throw New ArgumentException(&quot;The argument cannot be a string.&quot;)\n            End If\n        \n        &#39; The When expression makes this a filter clause. The expression \n        &#39; selects only exceptions that derive from the ArgumentException\n        &#39; class. Other exceptions, including ArgumentException itself, \n        &#39; are not handled by this filter clause.\n        Catch ex As ArgumentException _\n            When ex.GetType().IsSubclassOf(GetType(ArgumentException))\n\n            Console.WriteLine(&quot;Filter clause caught: {0}&quot;, ex.GetType())\n        \n        &#39; This catch clause handles the ArgumentException class, and\n        &#39; any other class derived from Exception.\n        Catch ex As Exception\n            Console.WriteLine(&quot;Ordinary exception-handling clause caught: {0}&quot;, _\n                ex.GetType())\n\n        Finally\n            var1 = 3033\n            var2 = &quot;Another string.&quot;\n        End Try\n    End Sub\nEnd Class\n\n&#39; This code example produces output similar to the following:\n&#39;\n&#39;Ordinary exception-handling clause caught: System.ArgumentException\n&#39;Filter clause caught: System.ArgumentNullException\n&#39;\n&#39;Method: Void MethodBodyExample(System.Object)\n&#39;    Local variables are initialized: True\n&#39;    Maximum number of items on the operand stack: 3\n</code></pre><pre><code class=\"lang-cs\" name=\"MethodBody#5\">    }\n\n    // The Main method contains code to analyze this method, using\n    // the properties and methods of the MethodBody class.\n    public void MethodBodyExample(object arg)\n    {\n        // Define some local variables. In addition to these variables,\n        // the local variable list includes the variables scoped to \n        // the catch clauses.\n        int var1 = 42;\n        string var2 = &quot;Forty-two&quot;;\n\n        try\n        {\n            // Depending on the input value, throw an ArgumentException or \n            // an ArgumentNullException to test the Catch clauses.\n            if (arg == null)\n            {\n                throw new ArgumentNullException(&quot;The argument cannot be null.&quot;);\n            }\n            if (arg.GetType() == typeof(string))\n            {\n                throw new ArgumentException(&quot;The argument cannot be a string.&quot;);\n            }        \n        }\n\n        // There is no Filter clause in this code example. See the Visual \n        // Basic code for an example of a Filter clause.\n\n        // This catch clause handles the ArgumentException class, and\n        // any other class derived from Exception.\n        catch(Exception ex)\n        {\n            Console.WriteLine(&quot;Ordinary exception-handling clause caught: {0}&quot;, \n                ex.GetType());\n        }        \n        finally\n        {\n            var1 = 3033;\n            var2 = &quot;Another string.&quot;;\n        }\n    }\n}\n\n// This code example produces output similar to the following:\n//\n//Method: Void MethodBodyExample(System.Object)\n//    Local variables are initialized: True\n//    Maximum number of items on the operand stack: 2\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MethodBody_LocalSignatureMetadataToken\">\r\n    \r\n            <a id=\"System_Reflection_MethodBody_LocalSignatureMetadataToken_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LocalSignatureMetadataToken</div>        \r\n          </div>\r\n    \r\n            <p>Gets a metadata token for the signature that describes the local variables for the method in metadata.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int LocalSignatureMetadataToken { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer that represents the metadata token.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.reflection.methodbody#System_Reflection_MethodBody_LocalVariables_\" data-linktype=\"relative-path\">LocalVariables</a> property to obtain information about the method&#39;s local variables.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Information about local variable signatures can be found in the Common Language Infrastructure (CLI) documentation, especially &quot;Partition II: Metadata Definition and Semantics&quot;. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MethodBody_LocalVariables\">\r\n    \r\n            <a id=\"System_Reflection_MethodBody_LocalVariables_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LocalVariables</div>        \r\n          </div>\r\n    \r\n            <p>Gets the list of local variables declared in the method body.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Collections.Generic.IList&lt;System.Reflection.LocalVariableInfo&gt; LocalVariables { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList</a>&lt;<a class=\"xref\" href=\"system.reflection.localvariableinfo\" data-linktype=\"relative-path\">LocalVariableInfo</a>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IList`1</span> of <a class=\"xref\" href=\"system.reflection.localvariableinfo\" data-linktype=\"relative-path\">LocalVariableInfo</a> objects that describe the local variables declared in the method body.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You do not need the metadata token for the local variable signature provided by the <a class=\"xref\" href=\"system.reflection.methodbody#System_Reflection_MethodBody_LocalSignatureMetadataToken_\" data-linktype=\"relative-path\">LocalSignatureMetadataToken</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example defines a test method named <code>MethodBodyExample</code> and displays its local variable information. The <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_GetMethodBody_\" data-linktype=\"relative-path\">GetMethodBody</a> method is used to obtain a <a class=\"xref\" href=\"system.reflection.methodbody\" data-linktype=\"relative-path\">MethodBody</a> object for the test method. The LocalVariables property is used to obtain a list of <a class=\"xref\" href=\"system.reflection.localvariableinfo\" data-linktype=\"relative-path\">LocalVariableInfo</a> objects.  </p>\n<p> This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.reflection.methodbody\" data-linktype=\"relative-path\">MethodBody</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"MethodBody#2\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Reflection;\n\npublic ref class Example\n{\n    // The Main method contains code to analyze this method, using\n    // the properties and methods of the MethodBody class.\npublic:\n    void MethodBodyExample(Object^ arg)\n    {\n        // Define some local variables. In addition to these variables,\n        // the local variable list includes the variables scoped to \n        // the catch clauses.\n        int var1 = 42;\n        String^ var2 = &quot;Forty-two&quot;;\n\n        try\n        {\n            // Depending on the input value, throw an ArgumentException or \n            // an ArgumentNullException to test the Catch clauses.\n            if (arg == nullptr)\n            {\n                throw gcnew ArgumentNullException(&quot;The argument cannot &quot; +\n                    &quot;be null.&quot;);\n            }\n            if (arg-&gt;GetType() == String::typeid)\n            {\n                throw gcnew ArgumentException(&quot;The argument cannot &quot; + \n                    &quot;be a string.&quot;);\n            }        \n        }\n\n        // There is no Filter clause in this code example. See the Visual \n        // Basic code for an example of a Filter clause.\n\n        // This catch clause handles the ArgumentException class, and\n        // any other class derived from Exception.\n        catch (ArgumentException^ ex)\n        {\n            Console::WriteLine(&quot;Ordinary exception-handling clause caught:&quot; +\n                &quot; {0}&quot;, ex-&gt;GetType());\n        }        \n        finally\n        {\n            var1 = 3033;\n            var2 = &quot;Another string.&quot;;\n        }\n    }\n};\n\nint main()\n{ \n    // Get method body information.\n    MethodInfo^ mi = \n        Example::typeid-&gt;GetMethod(&quot;MethodBodyExample&quot;);\n\n    MethodBody^ mb = mi-&gt;GetMethodBody();\n    Console::WriteLine(&quot;\\r<br>Method: {0}&quot;, mi);\n\n    // Display the general information included in the \n    // MethodBody object.\n    Console::WriteLine(&quot;    Local variables are initialized: {0}&quot;, \n        mb-&gt;InitLocals);\n    Console::WriteLine(&quot;    Maximum number of items on the operand &quot; +\n        &quot;stack: {0}&quot;, mb-&gt;MaxStackSize);\n</code></pre><pre><code class=\"lang-vb\" name=\"MethodBody#2\">Imports System\nImports System.Reflection\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        &#39; Demonstrate the effect of the Visual Basic When keyword, which\n        &#39; generates a Filter clause in the Try block.\n        Dim e As New Example()\n        Console.WriteLine()\n        e.MethodBodyExample(&quot;String argument&quot;)\n        e.MethodBodyExample(Nothing)\n\n        &#39; Get method body information.\n        Dim mi As MethodInfo = _\n            GetType(Example).GetMethod(&quot;MethodBodyExample&quot;)\n        Dim mb As MethodBody = mi.GetMethodBody()\n        Console.WriteLine(vbCrLf &amp; &quot;Method: {0}&quot;, mi)\n\n        &#39; Display the general information included in the \n        &#39; MethodBody object.\n        Console.WriteLine(&quot;    Local variables are initialized: {0}&quot;, _\n            mb.InitLocals)\n        Console.WriteLine(&quot;    Maximum number of items on the operand stack: {0}&quot;, _\n            mb.MaxStackSize)\n</code></pre><pre><code class=\"lang-cs\" name=\"MethodBody#2\">using System;\nusing System.Reflection;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Get method body information.\n        MethodInfo mi = typeof(Example).GetMethod(&quot;MethodBodyExample&quot;);\n        MethodBody mb = mi.GetMethodBody();\n        Console.WriteLine(&quot;\\r<br>Method: {0}&quot;, mi);\n\n        // Display the general information included in the \n        // MethodBody object.\n        Console.WriteLine(&quot;    Local variables are initialized: {0}&quot;, \n            mb.InitLocals);\n        Console.WriteLine(&quot;    Maximum number of items on the operand stack: {0}&quot;, \n            mb.MaxStackSize);\n</code></pre><pre><code class=\"lang-cpp\" name=\"MethodBody#3\">\n    // Display information about the local variables in the\n    // method body.\n    Console::WriteLine();\n    for each (LocalVariableInfo^ lvi in mb-&gt;LocalVariables)\n    {\n        Console::WriteLine(&quot;Local variable: {0}&quot;, lvi);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"MethodBody#3\">\n        &#39; Display information about the local variables in the\n        &#39; method body.\n        Console.WriteLine()\n        For Each lvi As LocalVariableInfo In mb.LocalVariables\n            Console.WriteLine(&quot;Local variable: {0}&quot;, lvi)\n        Next\n</code></pre><pre><code class=\"lang-cs\" name=\"MethodBody#3\">\n        // Display information about the local variables in the\n        // method body.\n        Console.WriteLine();\n        foreach (LocalVariableInfo lvi in mb.LocalVariables)\n        {\n            Console.WriteLine(&quot;Local variable: {0}&quot;, lvi);\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"MethodBody#5\">    // The Main method contains code to analyze this method, using\n    // the properties and methods of the MethodBody class.\npublic:\n    void MethodBodyExample(Object^ arg)\n    {\n        // Define some local variables. In addition to these variables,\n        // the local variable list includes the variables scoped to \n        // the catch clauses.\n        int var1 = 42;\n        String^ var2 = &quot;Forty-two&quot;;\n\n        try\n        {\n            // Depending on the input value, throw an ArgumentException or \n            // an ArgumentNullException to test the Catch clauses.\n            if (arg == nullptr)\n            {\n                throw gcnew ArgumentNullException(&quot;The argument cannot &quot; +\n                    &quot;be null.&quot;);\n            }\n            if (arg-&gt;GetType() == String::typeid)\n            {\n                throw gcnew ArgumentException(&quot;The argument cannot &quot; + \n                    &quot;be a string.&quot;);\n            }        \n        }\n\n        // There is no Filter clause in this code example. See the Visual \n        // Basic code for an example of a Filter clause.\n\n        // This catch clause handles the ArgumentException class, and\n        // any other class derived from Exception.\n        catch (ArgumentException^ ex)\n        {\n            Console::WriteLine(&quot;Ordinary exception-handling clause caught:&quot; +\n                &quot; {0}&quot;, ex-&gt;GetType());\n        }        \n        finally\n        {\n            var1 = 3033;\n            var2 = &quot;Another string.&quot;;\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"MethodBody#5\">    End Sub\n\n    &#39; This test method is executed at the beginning of Main, to show\n    &#39; how the Filter clause works. The Filter clause is generated by \n    &#39; a Visual Basic When expression. If arg is Nothing, this method\n    &#39; throws ArgumentNullException, which is caught by the filter\n    &#39; clause. If arg is a string, the method throws ArgumentException,\n    &#39; which does not match the filter clause.\n    &#39;\n    &#39; Sub Main also contains code to analyze this method, using \n    &#39; the properties and methods of the MethodBody class.\n    Public Sub MethodBodyExample(ByVal arg As Object)\n\n        &#39; Define some local variables. In addition to these variables,\n        &#39; the local variable list includes the variables scoped to \n        &#39; the catch clauses.\n        Dim var1 As Integer = 42\n        Dim var2 As String = &quot;Forty-two&quot;\n\n        Try\n            &#39; Depending on the input value, throw an ArgumentException or \n            &#39; an ArgumentNullException to test the Catch clauses.\n            &#39;\n            If arg Is Nothing Then\n                Throw New ArgumentNullException(&quot;The argument cannot be Nothing.&quot;)\n            End If\n            If arg.GetType() Is GetType(String) Then\n                Throw New ArgumentException(&quot;The argument cannot be a string.&quot;)\n            End If\n        \n        &#39; The When expression makes this a filter clause. The expression \n        &#39; selects only exceptions that derive from the ArgumentException\n        &#39; class. Other exceptions, including ArgumentException itself, \n        &#39; are not handled by this filter clause.\n        Catch ex As ArgumentException _\n            When ex.GetType().IsSubclassOf(GetType(ArgumentException))\n\n            Console.WriteLine(&quot;Filter clause caught: {0}&quot;, ex.GetType())\n        \n        &#39; This catch clause handles the ArgumentException class, and\n        &#39; any other class derived from Exception.\n        Catch ex As Exception\n            Console.WriteLine(&quot;Ordinary exception-handling clause caught: {0}&quot;, _\n                ex.GetType())\n\n        Finally\n            var1 = 3033\n            var2 = &quot;Another string.&quot;\n        End Try\n    End Sub\nEnd Class\n\n&#39; This code example produces output similar to the following:\n&#39;\n&#39;Ordinary exception-handling clause caught: System.ArgumentException\n&#39;Filter clause caught: System.ArgumentNullException\n&#39;\n&#39;Method: Void MethodBodyExample(System.Object)\n&#39;    Local variables are initialized: True\n&#39;    Maximum number of items on the operand stack: 3\n</code></pre><pre><code class=\"lang-cs\" name=\"MethodBody#5\">    }\n\n    // The Main method contains code to analyze this method, using\n    // the properties and methods of the MethodBody class.\n    public void MethodBodyExample(object arg)\n    {\n        // Define some local variables. In addition to these variables,\n        // the local variable list includes the variables scoped to \n        // the catch clauses.\n        int var1 = 42;\n        string var2 = &quot;Forty-two&quot;;\n\n        try\n        {\n            // Depending on the input value, throw an ArgumentException or \n            // an ArgumentNullException to test the Catch clauses.\n            if (arg == null)\n            {\n                throw new ArgumentNullException(&quot;The argument cannot be null.&quot;);\n            }\n            if (arg.GetType() == typeof(string))\n            {\n                throw new ArgumentException(&quot;The argument cannot be a string.&quot;);\n            }        \n        }\n\n        // There is no Filter clause in this code example. See the Visual \n        // Basic code for an example of a Filter clause.\n\n        // This catch clause handles the ArgumentException class, and\n        // any other class derived from Exception.\n        catch(Exception ex)\n        {\n            Console.WriteLine(&quot;Ordinary exception-handling clause caught: {0}&quot;, \n                ex.GetType());\n        }        \n        finally\n        {\n            var1 = 3033;\n            var2 = &quot;Another string.&quot;;\n        }\n    }\n}\n\n// This code example produces output similar to the following:\n//\n//Method: Void MethodBodyExample(System.Object)\n//    Local variables are initialized: True\n//    Maximum number of items on the operand stack: 2\n</code></pre><pre><code class=\"lang-cpp\" name=\"MethodBody#6\">//Local variable: System.ArgumentException (0)\n//Local variable: System.String (1)\n//Local variable: System.Int32 (2)\n</code></pre><pre><code class=\"lang-vb\" name=\"MethodBody#6\">&#39;\n&#39;Local variable: System.Int32 (0)\n&#39;Local variable: System.String (1)\n&#39;Local variable: System.ArgumentException (2)\n&#39;Local variable: System.Exception (3)\n</code></pre><pre><code class=\"lang-cs\" name=\"MethodBody#6\">//\n//Local variable: System.Int32 (0)\n//Local variable: System.String (1)\n//Local variable: System.Exception (2)\n//Local variable: System.Boolean (3)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MethodBody_MaxStackSize\">\r\n    \r\n            <a id=\"System_Reflection_MethodBody_MaxStackSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MaxStackSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the maximum number of items on the operand stack when the method is executing.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int MaxStackSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The maximum number of items on the operand stack when the method is executing.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information, see the Common Language Infrastructure (CLI) documentation, especially &quot;Partition II: Metadata Definition and Semantics&quot; and &quot;Partition III: CIL Instruction Set&quot;. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example defines a test method named <code>MethodBodyExample</code> and displays its local variable information and exception-handling clauses. The <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_GetMethodBody_\" data-linktype=\"relative-path\">GetMethodBody</a> method is used to obtain a <a class=\"xref\" href=\"system.reflection.methodbody\" data-linktype=\"relative-path\">MethodBody</a> object for the test method. The MaxStackSize and <a class=\"xref\" href=\"system.reflection.methodbody#System_Reflection_MethodBody_InitLocals_\" data-linktype=\"relative-path\">InitLocals</a> properties are displayed.  </p>\n<p> This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.reflection.methodbody\" data-linktype=\"relative-path\">MethodBody</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"MethodBody#2\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Reflection;\n\npublic ref class Example\n{\n    // The Main method contains code to analyze this method, using\n    // the properties and methods of the MethodBody class.\npublic:\n    void MethodBodyExample(Object^ arg)\n    {\n        // Define some local variables. In addition to these variables,\n        // the local variable list includes the variables scoped to \n        // the catch clauses.\n        int var1 = 42;\n        String^ var2 = &quot;Forty-two&quot;;\n\n        try\n        {\n            // Depending on the input value, throw an ArgumentException or \n            // an ArgumentNullException to test the Catch clauses.\n            if (arg == nullptr)\n            {\n                throw gcnew ArgumentNullException(&quot;The argument cannot &quot; +\n                    &quot;be null.&quot;);\n            }\n            if (arg-&gt;GetType() == String::typeid)\n            {\n                throw gcnew ArgumentException(&quot;The argument cannot &quot; + \n                    &quot;be a string.&quot;);\n            }        \n        }\n\n        // There is no Filter clause in this code example. See the Visual \n        // Basic code for an example of a Filter clause.\n\n        // This catch clause handles the ArgumentException class, and\n        // any other class derived from Exception.\n        catch (ArgumentException^ ex)\n        {\n            Console::WriteLine(&quot;Ordinary exception-handling clause caught:&quot; +\n                &quot; {0}&quot;, ex-&gt;GetType());\n        }        \n        finally\n        {\n            var1 = 3033;\n            var2 = &quot;Another string.&quot;;\n        }\n    }\n};\n\nint main()\n{ \n    // Get method body information.\n    MethodInfo^ mi = \n        Example::typeid-&gt;GetMethod(&quot;MethodBodyExample&quot;);\n\n    MethodBody^ mb = mi-&gt;GetMethodBody();\n    Console::WriteLine(&quot;\\r<br>Method: {0}&quot;, mi);\n\n    // Display the general information included in the \n    // MethodBody object.\n    Console::WriteLine(&quot;    Local variables are initialized: {0}&quot;, \n        mb-&gt;InitLocals);\n    Console::WriteLine(&quot;    Maximum number of items on the operand &quot; +\n        &quot;stack: {0}&quot;, mb-&gt;MaxStackSize);\n</code></pre><pre><code class=\"lang-vb\" name=\"MethodBody#2\">Imports System\nImports System.Reflection\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        &#39; Demonstrate the effect of the Visual Basic When keyword, which\n        &#39; generates a Filter clause in the Try block.\n        Dim e As New Example()\n        Console.WriteLine()\n        e.MethodBodyExample(&quot;String argument&quot;)\n        e.MethodBodyExample(Nothing)\n\n        &#39; Get method body information.\n        Dim mi As MethodInfo = _\n            GetType(Example).GetMethod(&quot;MethodBodyExample&quot;)\n        Dim mb As MethodBody = mi.GetMethodBody()\n        Console.WriteLine(vbCrLf &amp; &quot;Method: {0}&quot;, mi)\n\n        &#39; Display the general information included in the \n        &#39; MethodBody object.\n        Console.WriteLine(&quot;    Local variables are initialized: {0}&quot;, _\n            mb.InitLocals)\n        Console.WriteLine(&quot;    Maximum number of items on the operand stack: {0}&quot;, _\n            mb.MaxStackSize)\n</code></pre><pre><code class=\"lang-cs\" name=\"MethodBody#2\">using System;\nusing System.Reflection;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Get method body information.\n        MethodInfo mi = typeof(Example).GetMethod(&quot;MethodBodyExample&quot;);\n        MethodBody mb = mi.GetMethodBody();\n        Console.WriteLine(&quot;\\r<br>Method: {0}&quot;, mi);\n\n        // Display the general information included in the \n        // MethodBody object.\n        Console.WriteLine(&quot;    Local variables are initialized: {0}&quot;, \n            mb.InitLocals);\n        Console.WriteLine(&quot;    Maximum number of items on the operand stack: {0}&quot;, \n            mb.MaxStackSize);\n</code></pre><pre><code class=\"lang-cpp\" name=\"MethodBody#5\">    // The Main method contains code to analyze this method, using\n    // the properties and methods of the MethodBody class.\npublic:\n    void MethodBodyExample(Object^ arg)\n    {\n        // Define some local variables. In addition to these variables,\n        // the local variable list includes the variables scoped to \n        // the catch clauses.\n        int var1 = 42;\n        String^ var2 = &quot;Forty-two&quot;;\n\n        try\n        {\n            // Depending on the input value, throw an ArgumentException or \n            // an ArgumentNullException to test the Catch clauses.\n            if (arg == nullptr)\n            {\n                throw gcnew ArgumentNullException(&quot;The argument cannot &quot; +\n                    &quot;be null.&quot;);\n            }\n            if (arg-&gt;GetType() == String::typeid)\n            {\n                throw gcnew ArgumentException(&quot;The argument cannot &quot; + \n                    &quot;be a string.&quot;);\n            }        \n        }\n\n        // There is no Filter clause in this code example. See the Visual \n        // Basic code for an example of a Filter clause.\n\n        // This catch clause handles the ArgumentException class, and\n        // any other class derived from Exception.\n        catch (ArgumentException^ ex)\n        {\n            Console::WriteLine(&quot;Ordinary exception-handling clause caught:&quot; +\n                &quot; {0}&quot;, ex-&gt;GetType());\n        }        \n        finally\n        {\n            var1 = 3033;\n            var2 = &quot;Another string.&quot;;\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"MethodBody#5\">    End Sub\n\n    &#39; This test method is executed at the beginning of Main, to show\n    &#39; how the Filter clause works. The Filter clause is generated by \n    &#39; a Visual Basic When expression. If arg is Nothing, this method\n    &#39; throws ArgumentNullException, which is caught by the filter\n    &#39; clause. If arg is a string, the method throws ArgumentException,\n    &#39; which does not match the filter clause.\n    &#39;\n    &#39; Sub Main also contains code to analyze this method, using \n    &#39; the properties and methods of the MethodBody class.\n    Public Sub MethodBodyExample(ByVal arg As Object)\n\n        &#39; Define some local variables. In addition to these variables,\n        &#39; the local variable list includes the variables scoped to \n        &#39; the catch clauses.\n        Dim var1 As Integer = 42\n        Dim var2 As String = &quot;Forty-two&quot;\n\n        Try\n            &#39; Depending on the input value, throw an ArgumentException or \n            &#39; an ArgumentNullException to test the Catch clauses.\n            &#39;\n            If arg Is Nothing Then\n                Throw New ArgumentNullException(&quot;The argument cannot be Nothing.&quot;)\n            End If\n            If arg.GetType() Is GetType(String) Then\n                Throw New ArgumentException(&quot;The argument cannot be a string.&quot;)\n            End If\n        \n        &#39; The When expression makes this a filter clause. The expression \n        &#39; selects only exceptions that derive from the ArgumentException\n        &#39; class. Other exceptions, including ArgumentException itself, \n        &#39; are not handled by this filter clause.\n        Catch ex As ArgumentException _\n            When ex.GetType().IsSubclassOf(GetType(ArgumentException))\n\n            Console.WriteLine(&quot;Filter clause caught: {0}&quot;, ex.GetType())\n        \n        &#39; This catch clause handles the ArgumentException class, and\n        &#39; any other class derived from Exception.\n        Catch ex As Exception\n            Console.WriteLine(&quot;Ordinary exception-handling clause caught: {0}&quot;, _\n                ex.GetType())\n\n        Finally\n            var1 = 3033\n            var2 = &quot;Another string.&quot;\n        End Try\n    End Sub\nEnd Class\n\n&#39; This code example produces output similar to the following:\n&#39;\n&#39;Ordinary exception-handling clause caught: System.ArgumentException\n&#39;Filter clause caught: System.ArgumentNullException\n&#39;\n&#39;Method: Void MethodBodyExample(System.Object)\n&#39;    Local variables are initialized: True\n&#39;    Maximum number of items on the operand stack: 3\n</code></pre><pre><code class=\"lang-cs\" name=\"MethodBody#5\">    }\n\n    // The Main method contains code to analyze this method, using\n    // the properties and methods of the MethodBody class.\n    public void MethodBodyExample(object arg)\n    {\n        // Define some local variables. In addition to these variables,\n        // the local variable list includes the variables scoped to \n        // the catch clauses.\n        int var1 = 42;\n        string var2 = &quot;Forty-two&quot;;\n\n        try\n        {\n            // Depending on the input value, throw an ArgumentException or \n            // an ArgumentNullException to test the Catch clauses.\n            if (arg == null)\n            {\n                throw new ArgumentNullException(&quot;The argument cannot be null.&quot;);\n            }\n            if (arg.GetType() == typeof(string))\n            {\n                throw new ArgumentException(&quot;The argument cannot be a string.&quot;);\n            }        \n        }\n\n        // There is no Filter clause in this code example. See the Visual \n        // Basic code for an example of a Filter clause.\n\n        // This catch clause handles the ArgumentException class, and\n        // any other class derived from Exception.\n        catch(Exception ex)\n        {\n            Console.WriteLine(&quot;Ordinary exception-handling clause caught: {0}&quot;, \n                ex.GetType());\n        }        \n        finally\n        {\n            var1 = 3033;\n            var2 = &quot;Another string.&quot;;\n        }\n    }\n}\n\n// This code example produces output similar to the following:\n//\n//Method: Void MethodBodyExample(System.Object)\n//    Local variables are initialized: True\n//    Maximum number of items on the operand stack: 2\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_MethodBody_GetILAsByteArray\">\r\n    \r\n            <a id=\"System_Reflection_MethodBody_GetILAsByteArray_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetILAsByteArray()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the MSIL for the method body, as an array of bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual byte[] GetILAsByteArray ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>An array of type <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> that contains the MSIL for the method body.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use the token-resolution methods of the module class, such as <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_ResolveType_\" data-linktype=\"relative-path\">ResolveType</a>, <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_ResolveMethod_\" data-linktype=\"relative-path\">ResolveMethod</a>, and <a class=\"xref\" href=\"system.reflection.module#System_Reflection_Module_ResolveMember_\" data-linktype=\"relative-path\">ResolveMember</a>, to resolve the tokens in the method body to <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects, <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> objects, and <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> objects that provide detailed information about the types, methods, and fields accessed by the MSIL in the method body.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Parsing method bodies requires a thorough understanding of metadata and MSIL instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially &quot;Partition II: Metadata Definition and Semantics&quot; and &quot;Partition III: CIL Instruction Set&quot;. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.MethodBody.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.MethodBody.yml\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodBody\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodBody..ctor\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodBody.ExceptionHandlingClauses\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodBody.GetILAsByteArray\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodBody.InitLocals\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodBody.LocalSignatureMetadataToken\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodBody.LocalVariables\">\r\n<meta name=\"APIName\" content=\"System.Reflection.MethodBody.MaxStackSize\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"ee8c2d84-cf91-f3f9-58f4-cab6c5d38871\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Reflection\\MethodBody.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides access to the metadata and MSIL for the body of a method.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Reflection/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Reflection.MethodBody\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.MethodBody.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.MethodBody.yml","open_to_public_contributors":true,"api_name":["System.Reflection.MethodBody","System.Reflection.MethodBody..ctor","System.Reflection.MethodBody.ExceptionHandlingClauses","System.Reflection.MethodBody.GetILAsByteArray","System.Reflection.MethodBody.InitLocals","System.Reflection.MethodBody.LocalSignatureMetadataToken","System.Reflection.MethodBody.LocalVariables","System.Reflection.MethodBody.MaxStackSize"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Reflection.MethodBody","System::Reflection::MethodBody","System.Reflection.MethodBody.#ctor","System::Reflection::MethodBody::#ctor","System.Reflection.MethodBody.ExceptionHandlingClauses","System::Reflection::MethodBody::ExceptionHandlingClauses","System.Reflection.MethodBody.GetILAsByteArray","System::Reflection::MethodBody::GetILAsByteArray","System.Reflection.MethodBody.InitLocals","System::Reflection::MethodBody::InitLocals","System.Reflection.MethodBody.LocalSignatureMetadataToken","System::Reflection::MethodBody::LocalSignatureMetadataToken","System.Reflection.MethodBody.LocalVariables","System::Reflection::MethodBody::LocalVariables","System.Reflection.MethodBody.MaxStackSize","System::Reflection::MethodBody::MaxStackSize"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"ee8c2d84-cf91-f3f9-58f4-cab6c5d38871","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Reflection\\MethodBody.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Reflection/MethodBody.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"MethodBody class | Microsoft Docs","_op_ogTitle":"MethodBody class","description":"Provides access to the metadata and MSIL for the body of a method.\n","toc_asset_id":"_splitted/System.Reflection/toc.json","toc_rel":"_splitted/System.Reflection/toc.json","source_url":"","ms.assetid":"System.Reflection.MethodBody","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.methodbody","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.methodbody","fileRelativePath":"System.Reflection.MethodBody.html"},"themesRelativePathToOutputRoot":"_themes/"}