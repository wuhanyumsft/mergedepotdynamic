{"content":"    \r\n    <h1 id=\"System_Windows_Media_Animation_Animatable\">\r\n      <span class=\"lang-csharp\">Animatable</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Abstract class that provides animation support.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract class Animatable : System.Windows.Freezable, System.Windows.Media.Animation.IAnimatable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.threading.dispatcherobject\" data-linktype=\"relative-path\">DispatcherObject</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject\" data-linktype=\"relative-path\">DependencyObject</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l3\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable\" data-linktype=\"relative-path\">System.Windows.Freezable</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l4\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Animatable</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_ClearValue_System_Windows_DependencyProperty_\" data-linktype=\"relative-path\">ClearValue(DependencyProperty)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_ClearValue_System_Windows_DependencyPropertyKey_\" data-linktype=\"relative-path\">ClearValue(DependencyPropertyKey)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_CoerceValue_System_Windows_DependencyProperty_\" data-linktype=\"relative-path\">CoerceValue(DependencyProperty)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_DependencyObjectType\" data-linktype=\"relative-path\">DependencyObjectType</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_GetLocalValueEnumerator\" data-linktype=\"relative-path\">GetLocalValueEnumerator()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_GetValue_System_Windows_DependencyProperty_\" data-linktype=\"relative-path\">GetValue(DependencyProperty)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_InvalidateProperty_System_Windows_DependencyProperty_\" data-linktype=\"relative-path\">InvalidateProperty(DependencyProperty)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_IsSealed\" data-linktype=\"relative-path\">IsSealed</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_ReadLocalValue_System_Windows_DependencyProperty_\" data-linktype=\"relative-path\">ReadLocalValue(DependencyProperty)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_SetCurrentValue_System_Windows_DependencyProperty_System_Object_\" data-linktype=\"relative-path\">SetCurrentValue(DependencyProperty,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_SetValue_System_Windows_DependencyProperty_System_Object_\" data-linktype=\"relative-path\">SetValue(DependencyProperty,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_SetValue_System_Windows_DependencyPropertyKey_System_Object_\" data-linktype=\"relative-path\">SetValue(DependencyPropertyKey,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_ShouldSerializeProperty_System_Windows_DependencyProperty_\" data-linktype=\"relative-path\">ShouldSerializeProperty(DependencyProperty)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_CanFreeze\" data-linktype=\"relative-path\">CanFreeze</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_Changed\" data-linktype=\"relative-path\">Changed</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_CloneCore_System_Windows_Freezable_\" data-linktype=\"relative-path\">CloneCore(Freezable)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_CloneCurrentValue\" data-linktype=\"relative-path\">CloneCurrentValue()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_CloneCurrentValueCore_System_Windows_Freezable_\" data-linktype=\"relative-path\">CloneCurrentValueCore(Freezable)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_CreateInstance\" data-linktype=\"relative-path\">CreateInstance()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_CreateInstanceCore\" data-linktype=\"relative-path\">CreateInstanceCore()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_Freeze\" data-linktype=\"relative-path\">Freeze()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_Freeze_System_Windows_Freezable_System_Boolean_\" data-linktype=\"relative-path\">Freeze(Freezable,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_GetAsFrozen\" data-linktype=\"relative-path\">GetAsFrozen()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_GetAsFrozenCore_System_Windows_Freezable_\" data-linktype=\"relative-path\">GetAsFrozenCore(Freezable)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_GetCurrentValueAsFrozen\" data-linktype=\"relative-path\">GetCurrentValueAsFrozen()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_GetCurrentValueAsFrozenCore_System_Windows_Freezable_\" data-linktype=\"relative-path\">GetCurrentValueAsFrozenCore(Freezable)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_IsFrozen\" data-linktype=\"relative-path\">IsFrozen</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_OnChanged\" data-linktype=\"relative-path\">OnChanged()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_OnFreezablePropertyChanged_System_Windows_DependencyObject_System_Windows_DependencyObject_\" data-linktype=\"relative-path\">OnFreezablePropertyChanged(DependencyObject,DependencyObject)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_OnFreezablePropertyChanged_System_Windows_DependencyObject_System_Windows_DependencyObject_System_Windows_DependencyProperty_\" data-linktype=\"relative-path\">OnFreezablePropertyChanged(DependencyObject,DependencyObject,DependencyProperty)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_OnPropertyChanged_System_Windows_DependencyPropertyChangedEventArgs_\" data-linktype=\"relative-path\">OnPropertyChanged(DependencyPropertyChangedEventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_ReadPreamble\" data-linktype=\"relative-path\">ReadPreamble()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_WritePostscript\" data-linktype=\"relative-path\">WritePostscript()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_WritePreamble\" data-linktype=\"relative-path\">WritePreamble()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.threading.dispatcherobject#System_Windows_Threading_DispatcherObject_CheckAccess\" data-linktype=\"relative-path\">CheckAccess()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.threading.dispatcherobject#System_Windows_Threading_DispatcherObject_Dispatcher\" data-linktype=\"relative-path\">Dispatcher</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.threading.dispatcherobject#System_Windows_Threading_DispatcherObject_VerifyAccess\" data-linktype=\"relative-path\">VerifyAccess()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Animatable__ctor\" data-linktype=\"self-bookmark\">Animatable()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.media.animation.animatable\" data-linktype=\"relative-path\">Animatable</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Animatable_HasAnimatedProperties\" data-linktype=\"self-bookmark\">HasAnimatedProperties</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether one or more <a class=\"xref\" href=\"system.windows.media.animation.animationclock\" data-linktype=\"relative-path\">AnimationClock</a> objects is associated with any of this object&#39;s dependency properties.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Animatable_ApplyAnimationClock_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationClock_\" data-linktype=\"self-bookmark\">ApplyAnimationClock(DependencyProperty,AnimationClock)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies an <a class=\"xref\" href=\"system.windows.media.animation.animationclock\" data-linktype=\"relative-path\">AnimationClock</a> to the specified <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a>. If the property is already animated, the <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> handoff behavior is used.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Animatable_ApplyAnimationClock_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationClock_System_Windows_Media_Animation_HandoffBehavior_\" data-linktype=\"self-bookmark\">ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies an <a class=\"xref\" href=\"system.windows.media.animation.animationclock\" data-linktype=\"relative-path\">AnimationClock</a> to the specified <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a>. If the property is already animated, the specified <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> is used.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Animatable_BeginAnimation_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationTimeline_\" data-linktype=\"self-bookmark\">BeginAnimation(DependencyProperty,AnimationTimeline)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies an animation to the specified <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a>. The animation is started when the next frame is rendered. If the specified property is already animated, the <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> handoff behavior is used.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Animatable_BeginAnimation_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationTimeline_System_Windows_Media_Animation_HandoffBehavior_\" data-linktype=\"self-bookmark\">BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies an animation to the specified <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a>. The animation is started when the next frame is rendered. If the specified property is already animated, the specified <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> is used.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Animatable_Clone\" data-linktype=\"self-bookmark\">Clone()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a modifiable clone of this <a class=\"xref\" href=\"system.windows.media.animation.animatable\" data-linktype=\"relative-path\">Animatable</a>, making deep copies of this object&#39;s values. When copying this object&#39;s dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Animatable_FreezeCore_System_Boolean_\" data-linktype=\"self-bookmark\">FreezeCore(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Makes this <a class=\"xref\" href=\"system.windows.media.animation.animatable\" data-linktype=\"relative-path\">Animatable</a> object unmodifiable or determines whether it can be made unmodifiable.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Animatable_GetAnimationBaseValue_System_Windows_DependencyProperty_\" data-linktype=\"self-bookmark\">GetAnimationBaseValue(DependencyProperty)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the non-animated value of the specified <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_Animatable_ShouldSerializeStoredWeakReference_System_Windows_DependencyObject_\" data-linktype=\"self-bookmark\">ShouldSerializeStoredWeakReference(DependencyObject)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies whether a dependency object should be serialized.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Animatable__ctor\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Animatable__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Animatable()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.media.animation.animatable\" data-linktype=\"relative-path\">Animatable</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected Animatable ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Animatable_HasAnimatedProperties\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Animatable_HasAnimatedProperties_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HasAnimatedProperties</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether one or more <a class=\"xref\" href=\"system.windows.media.animation.animationclock\" data-linktype=\"relative-path\">AnimationClock</a> objects is associated with any of this object&#39;s dependency properties.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool HasAnimatedProperties { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><strong>true</strong> if one or more <a class=\"xref\" href=\"system.windows.media.animation.animationclock\" data-linktype=\"relative-path\">AnimationClock</a> objects is associated with any of this object&#39;s dependency properties; otherwise, <strong>false</strong>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property does not indicate whether this object contains animated sub-objects.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Animatable_ApplyAnimationClock_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationClock_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Animatable_ApplyAnimationClock_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ApplyAnimationClock(DependencyProperty,AnimationClock)</div>        \r\n          </div>\r\n    \r\n            <p>Applies an <a class=\"xref\" href=\"system.windows.media.animation.animationclock\" data-linktype=\"relative-path\">AnimationClock</a> to the specified <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a>. If the property is already animated, the <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> handoff behavior is used.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dp</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The property to animate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>clock</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.animationclock\" data-linktype=\"relative-path\">AnimationClock</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The clock with which to animate the specified property. If <code>clock</code> is <code>null</code>, all animations will be removed from the specified property (but not stopped).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Note that using this method to removing clocks from a property does not stop those clocks.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Animatable_ApplyAnimationClock_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationClock_System_Windows_Media_Animation_HandoffBehavior_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Animatable_ApplyAnimationClock_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)</div>        \r\n          </div>\r\n    \r\n            <p>Applies an <a class=\"xref\" href=\"system.windows.media.animation.animationclock\" data-linktype=\"relative-path\">AnimationClock</a> to the specified <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a>. If the property is already animated, the specified <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> is used.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dp</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The property to animate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>clock</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.animationclock\" data-linktype=\"relative-path\">AnimationClock</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The clock with which to animate the specified property. If <code>handoffBehavior</code> is <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> and <code>clock</code> is <code>null</code>, all animations will be removed from the specified property (but not stopped). If <code>handoffBehavior</code> is <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> and clock is <code>null</code>, this method has no effect.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>handoffBehavior</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value that specifies how the new animation should interact with any current animations already affecting the property value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Note that using this method to remove clocks from a property does not stop those clocks.  </p>\n<h2 id=\"using-the-compose-handoffbehavior\">Using the Compose HandoffBehavior</h2>\n<p> When you apply a <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>, <a class=\"xref\" href=\"system.windows.media.animation.animationtimeline\" data-linktype=\"relative-path\">AnimationTimeline</a>, or <a class=\"xref\" href=\"system.windows.media.animation.animationclock\" data-linktype=\"relative-path\">AnimationClock</a> to a property using the <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a>, any <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects previously associated with that property continue to consume system resources; the timing system will not remove these clocks automatically.  </p>\n<p> To avoid performance issues when you apply a large number of clocks using <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a>, you should remove composing clocks from the animated property after they complete. There are several ways to remove a clock.  </p>\n<ul>\n<li><p>To remove all clocks from a property, use the <a class=\"xref\" href=\"system.windows.media.animation.animatable#System_Windows_Media_Animation_Animatable_ApplyAnimationClock_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationClock_\" data-linktype=\"relative-path\">ApplyAnimationClock(DependencyProperty,AnimationClock)</a> or <a class=\"xref\" href=\"system.windows.media.animation.animatable#System_Windows_Media_Animation_Animatable_BeginAnimation_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationTimeline_\" data-linktype=\"relative-path\">BeginAnimation(DependencyProperty,AnimationTimeline)</a> method of the animated object. Specify the property being animated as the first parameter, and <code>null</code> as the second. This will remove all animation clocks from the property.  </p>\n</li>\n<li><p>To remove a specific <a class=\"xref\" href=\"system.windows.media.animation.animationclock\" data-linktype=\"relative-path\">AnimationClock</a> from a list of clocks, use the <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_Controller_\" data-linktype=\"relative-path\">Controller</a> property of the <a class=\"xref\" href=\"system.windows.media.animation.animationclock\" data-linktype=\"relative-path\">AnimationClock</a> to retrieve a <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller\" data-linktype=\"relative-path\">ClockController</a>, then call the <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller#System_Windows_Media_Animation_ClockController_Remove_\" data-linktype=\"relative-path\">Remove</a> method of the <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller\" data-linktype=\"relative-path\">ClockController</a>. This is typically done in the <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_Completed\" data-linktype=\"relative-path\">Completed</a> event handler for a clock. Note that only root clocks can be controlled by a <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller\" data-linktype=\"relative-path\">ClockController</a>; the <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_Controller_\" data-linktype=\"relative-path\">Controller</a> property of a child clock will return <code>null</code>. Note also that the <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_Completed\" data-linktype=\"relative-path\">Completed</a> event will not be called if the effective duration of the clock is forever.  In that case, the user will need to determine when to call <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller#System_Windows_Media_Animation_ClockController_Remove_\" data-linktype=\"relative-path\">Remove</a>.  </p>\n<p>This is primarily an issue for animations on objects that have a long lifetime.  When an object is garbage collected, its clocks will also be disconnected and garbage collected.  </p>\n<p>For more information about clock objects, see the <a href=\"../Topic/Animation%20and%20Timing%20System%20Overview.md\" data-linktype=\"relative-path\">Animation and Timing System Overview</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to apply animation clocks using different <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> settings.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Animatable_BeginAnimation_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationTimeline_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Animatable_BeginAnimation_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginAnimation(DependencyProperty,AnimationTimeline)</div>        \r\n          </div>\r\n    \r\n            <p>Applies an animation to the specified <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a>. The animation is started when the next frame is rendered. If the specified property is already animated, the <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> handoff behavior is used.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dp</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The property to animate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>animation</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.animationtimeline\" data-linktype=\"relative-path\">AnimationTimeline</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The animation used to animate the specified property.  </p>\n<p> If the animation&#39;s <span class=\"xref\">stem.Windows.Media.Animation.Timeline.BeginTime*</span> is <code>null</code>, any current animations will be removed and the current value of the property will be held.  </p>\n<p> If <code>animation</code> is <code>null</code>, all animations will be removed from the property and the property value will revert back to its base value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the animation has a <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_BeginTime_\" data-linktype=\"relative-path\">BeginTime</a> that is greater than zero, the animation begins after that amount of time has elapsed from the time the next frame is rendered.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Animatable_BeginAnimation_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationTimeline_System_Windows_Media_Animation_HandoffBehavior_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Animatable_BeginAnimation_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)</div>        \r\n          </div>\r\n    \r\n            <p>Applies an animation to the specified <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a>. The animation is started when the next frame is rendered. If the specified property is already animated, the specified <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> is used.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dp</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The property to animate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>animation</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.animationtimeline\" data-linktype=\"relative-path\">AnimationTimeline</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The animation used to animate the specified property.  </p>\n<p> If <code>handoffBehavior</code> is <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> and the animation&#39;s <span class=\"xref\">stem.Windows.Media.Animation.Timeline.BeginTime*</span> is <code>null</code>, any current animations will be removed and the current value of the property will be held.  </p>\n<p> If <code>handoffBehavior</code> is <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> and <code>animation</code> is a <code>null</code> reference, all animations will be removed from the property and the property value will revert back to its base value.  </p>\n<p> If <code>handoffBehavior</code> is <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a>, this method will have no effect if the animation or its <span class=\"xref\">stem.Windows.Media.Animation.Timeline.BeginTime*</span> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>handoffBehavior</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value that specifies how the new animation should interact with any current animations already affecting the property value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the animation has a <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_BeginTime_\" data-linktype=\"relative-path\">BeginTime</a> that is greater than zero, the animation begins after that amount of time has elapsed from the time the next frame is rendered.  </p>\n<h2 id=\"using-the-compose-handoffbehavior\">Using the Compose HandoffBehavior</h2>\n<p> When you apply a <a class=\"xref\" href=\"system.windows.media.animation.storyboard\" data-linktype=\"relative-path\">Storyboard</a>, <a class=\"xref\" href=\"system.windows.media.animation.animationtimeline\" data-linktype=\"relative-path\">AnimationTimeline</a>, or <a class=\"xref\" href=\"system.windows.media.animation.animationclock\" data-linktype=\"relative-path\">AnimationClock</a> to a property using the <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a>, any <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> objects previously associated with that property continue to consume system resources; the timing system will not remove these clocks automatically.  </p>\n<p> To avoid performance issues when you apply a large number of clocks using <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a>, you should remove composing clocks from the animated property after they complete. There are several ways to remove a clock.  </p>\n<ul>\n<li><p>To remove all clocks from a property, use the <a class=\"xref\" href=\"system.windows.media.animation.animatable#System_Windows_Media_Animation_Animatable_ApplyAnimationClock_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationClock_\" data-linktype=\"relative-path\">ApplyAnimationClock(DependencyProperty,AnimationClock)</a> or <a class=\"xref\" href=\"system.windows.media.animation.animatable#System_Windows_Media_Animation_Animatable_BeginAnimation_System_Windows_DependencyProperty_System_Windows_Media_Animation_AnimationTimeline_\" data-linktype=\"relative-path\">BeginAnimation(DependencyProperty,AnimationTimeline)</a> method of the animated object. Specify the property being animated as the first parameter, and <code>null</code> as the second. This will remove all animation clocks from the property.  </p>\n</li>\n<li><p>To remove a specific <a class=\"xref\" href=\"system.windows.media.animation.animationclock\" data-linktype=\"relative-path\">AnimationClock</a> from a list of clocks, use the <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_Controller_\" data-linktype=\"relative-path\">Controller</a> property of the <a class=\"xref\" href=\"system.windows.media.animation.animationclock\" data-linktype=\"relative-path\">AnimationClock</a> to retrieve a <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller\" data-linktype=\"relative-path\">ClockController</a>, then call the <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller#System_Windows_Media_Animation_ClockController_Remove_\" data-linktype=\"relative-path\">Remove</a> method of the <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller\" data-linktype=\"relative-path\">ClockController</a>. This is typically done in the <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_Completed\" data-linktype=\"relative-path\">Completed</a> event handler for a clock. Note that only root clocks can be controlled by a <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller\" data-linktype=\"relative-path\">ClockController</a>; the <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_Controller_\" data-linktype=\"relative-path\">Controller</a> property of a child clock will return <code>null</code>. Note also that the <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_Completed\" data-linktype=\"relative-path\">Completed</a> event will not be called if the effective duration of the clock is forever.  In that case, the user will need to determine when to call <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller#System_Windows_Media_Animation_ClockController_Remove_\" data-linktype=\"relative-path\">Remove</a>.  </p>\n<p>This is primarily an issue for animations on objects that have a long lifetime.  When an object is garbage collected, its clocks will also be disconnected and garbage collected.  </p>\n<p>For more information about clock objects, see the <a href=\"../Topic/Animation%20and%20Timing%20System%20Overview.md\" data-linktype=\"relative-path\">Animation and Timing System Overview</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to apply animations using different <a class=\"xref\" href=\"system.windows.media.animation.handoffbehavior\" data-linktype=\"relative-path\">HandoffBehavior</a> settings.  </p>\n<pre><code class=\"lang-cpp\" name=\"animateproperty#InteractiveAnimationExampleWholePage\">/*\n\nThis sample animates the position of an ellipse when \nthe user clicks within the main border. If the user\nleft-clicks, the SnapshotAndReplace HandoffBehavior\nis used when applying the animations. If the user\nright-clicks, the Compose HandoffBehavior is used\ninstead.\n\n*/\n\nusing namespace System;\nusing namespace System::Windows;\nusing namespace System::Windows::Navigation;\nusing namespace System::Windows::Media;\nusing namespace System::Windows::Media::Animation;\nusing namespace System::Windows::Shapes;\nusing namespace System::Windows::Controls;\nusing namespace System::Windows::Input;\n\nnamespace Microsoft {\n   namespace Samples {\n      namespace Animation {\n         namespace LocalAnimations {\n            public ref class InteractiveAnimationExample : Page {\n            private: \n               TranslateTransform^ interactiveTranslateTransform;\n               Border^ containerBorder;\n               Ellipse^ interactiveEllipse;\n\n            public: \n               InteractiveAnimationExample () \n               {\n                  WindowTitle = &quot;Interactive Animation Example&quot;;\n                  DockPanel^ myPanel = gcnew DockPanel();\n                  myPanel-&gt;Margin = Thickness(20.0);\n\n                  containerBorder = gcnew Border();\n                  containerBorder-&gt;Background = Brushes::White;\n                  containerBorder-&gt;BorderBrush = Brushes::Black;\n                  containerBorder-&gt;BorderThickness = Thickness(2.0);\n                  containerBorder-&gt;VerticalAlignment = System::Windows::VerticalAlignment::Stretch;\n\n                  interactiveEllipse = gcnew Ellipse();\n                  interactiveEllipse-&gt;Fill = Brushes::Lime;\n                  interactiveEllipse-&gt;Stroke = Brushes::Black;\n                  interactiveEllipse-&gt;StrokeThickness = 2.0;\n                  interactiveEllipse-&gt;Width = 25;\n                  interactiveEllipse-&gt;Height = 25;\n                  interactiveEllipse-&gt;HorizontalAlignment = System::Windows::HorizontalAlignment::Left;\n                  interactiveEllipse-&gt;VerticalAlignment = System::Windows::VerticalAlignment::Top;\n\n                  interactiveTranslateTransform = gcnew TranslateTransform();\n                  interactiveEllipse-&gt;RenderTransform = interactiveTranslateTransform;\n\n                  containerBorder-&gt;MouseLeftButtonDown += \n                     gcnew MouseButtonEventHandler(this, &amp;Microsoft::Samples::Animation::LocalAnimations::InteractiveAnimationExample::border_mouseLeftButtonDown);\n                  containerBorder-&gt;MouseRightButtonDown += \n                     gcnew MouseButtonEventHandler(this, &amp;Microsoft::Samples::Animation::LocalAnimations::InteractiveAnimationExample::border_mouseRightButtonDown);\n                  containerBorder-&gt;Child = interactiveEllipse;\n\n                  myPanel-&gt;Children-&gt;Add(containerBorder);\n                  this-&gt;Content = myPanel;\n               };\n\n            private: \n               // When the user left-clicks, use the \n               // SnapshotAndReplace HandoffBehavior when applying the animation.        \n               void border_mouseLeftButtonDown (System::Object^ sender, System::Windows::Input::MouseButtonEventArgs^ e)\n               {\n                  System::Windows::Point clickPoint = Mouse::GetPosition(containerBorder);\n\n                  // Set the target point so the center of the ellipse\n                  // ends up at the clicked point.\n                  Point targetPoint = Point();\n                  targetPoint.X = clickPoint.X - interactiveEllipse-&gt;Width / 2;\n                  targetPoint.Y = clickPoint.Y - interactiveEllipse-&gt;Height / 2;\n\n                  // Animate to the target point.\n                  DoubleAnimation^ xAnimation = gcnew DoubleAnimation(targetPoint.X,\n                     Duration(TimeSpan::FromSeconds(4)));\n                  interactiveTranslateTransform-&gt;BeginAnimation(TranslateTransform::XProperty, xAnimation, HandoffBehavior::SnapshotAndReplace);\n\n                  DoubleAnimation^ yAnimation = gcnew DoubleAnimation(targetPoint.Y,\n                     Duration(TimeSpan::FromSeconds(4)));\n                  interactiveTranslateTransform-&gt;BeginAnimation(TranslateTransform::YProperty, yAnimation, HandoffBehavior::SnapshotAndReplace);\n\n                  // Chage the color of the ellipse.\n                  interactiveEllipse-&gt;Fill = Brushes::Lime;\n               }\n\n            private:\n               // When the user right-clicks, use the \n               // Compose HandoffBehavior when applying the animation.\n               void border_mouseRightButtonDown (System::Object^ sender, System::Windows::Input::MouseButtonEventArgs^ e)\n               {\n                  // Find the point where the use clicked.\n                  Point clickPoint = Mouse::GetPosition(containerBorder);\n\n                  // Set the target point so the center of the ellipse\n                  // ends up at the clicked point.\n                  Point targetPoint = System::Windows::Point();\n                  targetPoint.X = clickPoint.X - interactiveEllipse-&gt;Width / 2;\n                  targetPoint.Y = clickPoint.Y - interactiveEllipse-&gt;Height / 2;\n\n                  // Animate to the target point.\n                  DoubleAnimation^ xAnimation = gcnew DoubleAnimation(targetPoint.X,\n                     Duration(TimeSpan::FromSeconds(4)));\n                  interactiveTranslateTransform-&gt;BeginAnimation(TranslateTransform::XProperty, xAnimation, HandoffBehavior::Compose);\n\n                  DoubleAnimation^ yAnimation = gcnew DoubleAnimation(targetPoint.Y,\n                     Duration(TimeSpan::FromSeconds(4)));\n\n                  // Change the color of the ellipse.\n                  interactiveTranslateTransform-&gt;BeginAnimation(TranslateTransform::YProperty, yAnimation, HandoffBehavior::Compose);\n                  interactiveEllipse-&gt;Fill = Brushes::Orange;\n               }\n            };\n         }\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"animateproperty#InteractiveAnimationExampleWholePage\">/*\n\n   This sample animates the position of an ellipse when \n   the user clicks within the main border. If the user\n   left-clicks, the SnapshotAndReplace HandoffBehavior\n   is used when applying the animations. If the user\n   right-clicks, the Compose HandoffBehavior is used\n   instead.\n\n*/\n\nusing System;\nusing System.Windows;\nusing System.Windows.Navigation;\nusing System.Windows.Media;\nusing System.Windows.Media.Animation;\nusing System.Windows.Shapes;\nusing System.Windows.Controls;\nusing System.Windows.Input;\n\nnamespace Microsoft.Samples.Animation.LocalAnimations\n{\n\n    // Create the demonstration.\n    public class InteractiveAnimationExample : Page {\n        \n        \n        private TranslateTransform interactiveTranslateTransform;   \n        private Border containerBorder;\n        private Ellipse interactiveEllipse;\n        \n        public InteractiveAnimationExample()\n        {\n        \n            WindowTitle = &quot;Interactive Animation Example&quot;;\n            DockPanel myPanel = new DockPanel();\n            myPanel.Margin = new Thickness(20.0);            \n    \n            containerBorder = new Border();\n            containerBorder.Background = System.Windows.Media.Brushes.White;\n            containerBorder.BorderBrush = System.Windows.Media.Brushes.Black;\n            containerBorder.BorderThickness = new Thickness(2.0); \n            containerBorder.VerticalAlignment = VerticalAlignment.Stretch;\n            \n            interactiveEllipse = new Ellipse();\n            interactiveEllipse.Fill = System.Windows.Media.Brushes.Lime;\n            interactiveEllipse.Stroke = System.Windows.Media.Brushes.Black;\n            interactiveEllipse.StrokeThickness = 2.0;\n            interactiveEllipse.Width = 25;\n            interactiveEllipse.Height = 25;\n            interactiveEllipse.HorizontalAlignment = HorizontalAlignment.Left;\n            interactiveEllipse.VerticalAlignment = VerticalAlignment.Top;\n            \n            interactiveTranslateTransform = new TranslateTransform();\n            interactiveEllipse.RenderTransform = \n                interactiveTranslateTransform;\n                \n            containerBorder.MouseLeftButtonDown += \n                new MouseButtonEventHandler(border_mouseLeftButtonDown);\n            containerBorder.MouseRightButtonDown += \n                new MouseButtonEventHandler(border_mouseRightButtonDown);                \n            \n            containerBorder.Child = interactiveEllipse;\n            myPanel.Children.Add(containerBorder);\n            this.Content = myPanel;\n        }\n        \n\n        // When the user left-clicks, use the \n        // SnapshotAndReplace HandoffBehavior when applying the animation.        \n        private void border_mouseLeftButtonDown(object sender, MouseButtonEventArgs e)\n        {\n        \n            System.Windows.Point clickPoint = Mouse.GetPosition(containerBorder);\n            \n            // Set the target point so the center of the ellipse\n            // ends up at the clicked point.\n            System.Windows.Point targetPoint = new System.Windows.Point();\n            targetPoint.X = clickPoint.X - interactiveEllipse.Width / 2;\n            targetPoint.Y = clickPoint.Y - interactiveEllipse.Height / 2;  \n            \n            // Animate to the target point.\n            DoubleAnimation xAnimation = \n                new DoubleAnimation(targetPoint.X, \n                new Duration(TimeSpan.FromSeconds(4)));\n            interactiveTranslateTransform.BeginAnimation(\n                TranslateTransform.XProperty, xAnimation, HandoffBehavior.SnapshotAndReplace);\n                \n            DoubleAnimation yAnimation = \n                new DoubleAnimation(targetPoint.Y, \n                new Duration(TimeSpan.FromSeconds(4))); \n            interactiveTranslateTransform.BeginAnimation(\n                TranslateTransform.YProperty, yAnimation, HandoffBehavior.SnapshotAndReplace);                \n\n            // Change the color of the ellipse.\n            interactiveEllipse.Fill = System.Windows.Media.Brushes.Lime;\n                    \n        }\n        \n        // When the user right-clicks, use the \n        // Compose HandoffBehavior when applying the animation.\n        private void border_mouseRightButtonDown(object sender, MouseButtonEventArgs e)\n        {\n        \n            // Find the point where the use clicked.\n            System.Windows.Point clickPoint = Mouse.GetPosition(containerBorder);\n            \n            // Set the target point so the center of the ellipse\n            // ends up at the clicked point.\n            System.Windows.Point targetPoint = new System.Windows.Point();\n            targetPoint.X = clickPoint.X - interactiveEllipse.Width / 2;\n            targetPoint.Y = clickPoint.Y - interactiveEllipse.Height / 2;\n            \n            \n            \n            // Animate to the target point.\n            DoubleAnimation xAnimation = \n                new DoubleAnimation(targetPoint.X, \n                new Duration(TimeSpan.FromSeconds(4)));\n            interactiveTranslateTransform.BeginAnimation(\n                TranslateTransform.XProperty, xAnimation, HandoffBehavior.Compose);\n                \n            DoubleAnimation yAnimation = \n                new DoubleAnimation(targetPoint.Y, \n                new Duration(TimeSpan.FromSeconds(4))); \n            interactiveTranslateTransform.BeginAnimation(\n                TranslateTransform.YProperty, yAnimation, HandoffBehavior.Compose);   \n                \n            // Change the color of the ellipse.\n            interactiveEllipse.Fill = System.Windows.Media.Brushes.Orange;\n            \n                    \n        }\n        \n    }\n \n}\n</code></pre><pre><code class=\"lang-vb\" name=\"animateproperty#InteractiveAnimationExampleWholePage\">&#39;\n&#39;\n&#39;   This sample animates the position of an ellipse when \n&#39;   the user clicks within the main border. If the user\n&#39;   left-clicks, the SnapshotAndReplace HandoffBehavior\n&#39;   is used when applying the animations. If the user\n&#39;   right-clicks, the Compose HandoffBehavior is used\n&#39;   instead.\n&#39;\n&#39;\n\nImports System\nImports System.Windows\nImports System.Windows.Navigation\nImports System.Windows.Media\nImports System.Windows.Media.Animation\nImports System.Windows.Shapes\nImports System.Windows.Controls\nImports System.Windows.Input\n\nNamespace Microsoft.Samples.Animation.LocalAnimations\n\n\n    &#39; Create the demonstration.\n    Public Class InteractiveAnimationExample\n    \tInherits Page\n        \n        \n        Private Dim interactiveTranslateTransform As TranslateTransform  \n        Private Dim WithEvents containerBorder As Border \n        Private Dim interactiveEllipse As Ellipse\n        \n        Public Sub New()\n        \n            WindowTitle = &quot;Interactive Animation Example&quot;\n            Dim myPanel As New DockPanel()\n            myPanel.Margin = New Thickness(20.0)            \n    \n            containerBorder = new Border()\n            containerBorder.Background = Brushes.White\n            containerBorder.BorderBrush = Brushes.Black\n            containerBorder.BorderThickness = new Thickness(2.0) \n            containerBorder.VerticalAlignment = VerticalAlignment.Stretch\n            \n            interactiveEllipse = new Ellipse()\n            interactiveEllipse.Fill = Brushes.Lime\n            interactiveEllipse.Stroke = Brushes.Black\n            interactiveEllipse.StrokeThickness = 2.0\n            interactiveEllipse.Width = 25\n            interactiveEllipse.Height = 25\n            interactiveEllipse.HorizontalAlignment = HorizontalAlignment.Left\n            interactiveEllipse.VerticalAlignment = VerticalAlignment.Top\n            \n            interactiveTranslateTransform = new TranslateTransform()\n            interactiveEllipse.RenderTransform = _\n                interactiveTranslateTransform           \n            \n            containerBorder.Child = interactiveEllipse\n            myPanel.Children.Add(containerBorder)\n            Me.Content = myPanel\n        End Sub\n        \n\n        &#39; When the user left-clicks, use the \n        &#39; SnapshotAndReplace HandoffBehavior when applying the animation.        \n       \tPrivate Sub border_mouseLeftButtonDown( _\n       \t\tByVal sender As Object, ByVal e As MouseButtonEventArgs) _\n       \t\tHandles containerBorder.MouseLeftButtonDown\n     \n        \n            Dim clickPoint = Mouse.GetPosition(containerBorder)\n            \n            &#39; Set the target point so the center of the ellipse\n            &#39; ends up at the clicked point.\n            Dim targetPoint As New System.Windows.Point()\n            targetPoint.X = clickPoint.X - interactiveEllipse.Width / 2\n            targetPoint.Y = clickPoint.Y - interactiveEllipse.Height / 2  \n            \n            &#39; Animate to the target point.\n            Dim xAnimation As _ \n                New DoubleAnimation(targetPoint.X,  _\n                New Duration(TimeSpan.FromSeconds(4)))\n            interactiveTranslateTransform.BeginAnimation( _\n                TranslateTransform.XProperty, xAnimation, HandoffBehavior.SnapshotAndReplace)\n                \n            Dim yAnimation As _ \n                New DoubleAnimation(targetPoint.Y, _\n                New Duration(TimeSpan.FromSeconds(4)))\n            interactiveTranslateTransform.BeginAnimation( _\n                TranslateTransform.YProperty, yAnimation, HandoffBehavior.SnapshotAndReplace)                \n\n            &#39; Change the color of the ellipse.\n            interactiveEllipse.Fill = Brushes.Lime\n                    \n        End Sub\n        \n        &#39; When the user right-clicks, use the \n        &#39; Compose HandoffBehavior when applying the animation.\n        Private Sub border_mouseRightButtonDown( _\n        \tByVal sender As Object, ByVal e As MouseButtonEventArgs) _\n        \tHandles containerBorder.MouseRightButtonDown\n        \n        \n            &#39; Find the point where the use clicked.\n            Dim clickPoint = Mouse.GetPosition(containerBorder)\n            \n            &#39; Set the target point so the center of the ellipse\n            &#39; ends up at the clicked point.\n            Dim targetPoint As New System.Windows.Point()\n            targetPoint.X = clickPoint.X - interactiveEllipse.Width / 2\n            targetPoint.Y = clickPoint.Y - interactiveEllipse.Height / 2\n            \n            &#39; Animate to the target point.\n            Dim xAnimation As _\n                New DoubleAnimation(targetPoint.X, _\n                New Duration(TimeSpan.FromSeconds(4)))\n            interactiveTranslateTransform.BeginAnimation( _\n                TranslateTransform.XProperty, xAnimation, HandoffBehavior.Compose)\n                \n            Dim yAnimation As _ \n                New DoubleAnimation(targetPoint.Y, _\n                New Duration(TimeSpan.FromSeconds(4))) \n            interactiveTranslateTransform.BeginAnimation( _\n                TranslateTransform.YProperty, yAnimation, HandoffBehavior.Compose)   \n                \n            &#39; Change the color of the ellipse.\n            interactiveEllipse.Fill = Brushes.Orange\n            \n                    \n        End Sub\n        \n    End Class\n \nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Animatable_Clone\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Animatable_Clone_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clone()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a modifiable clone of this <a class=\"xref\" href=\"system.windows.media.animation.animatable\" data-linktype=\"relative-path\">Animatable</a>, making deep copies of this object&#39;s values. When copying this object&#39;s dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Media.Animation.Animatable Clone ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.animatable\" data-linktype=\"relative-path\">Animatable</a></div>\r\n                  </div>\r\n                  <p>A modifiable clone of this instance. The returned clone is effectively a deep copy of the current object. The clone&#39;s <span class=\"xref\">stem.Windows.Freezable.IsFrozen*</span> property is <strong>false</strong>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Clone method can be used to produce modifiable copies of frozen <a class=\"xref\" href=\"system.windows.freezable\" data-linktype=\"relative-path\">Freezable</a> objects. For convenience, this method shadows the inherited <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_Clone_\" data-linktype=\"relative-path\">Clone</a> method to provide a strongly typed implementation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Animatable_FreezeCore_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Animatable_FreezeCore_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FreezeCore(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Makes this <a class=\"xref\" href=\"system.windows.media.animation.animatable\" data-linktype=\"relative-path\">Animatable</a> object unmodifiable or determines whether it can be made unmodifiable.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override bool FreezeCore (bool isChecking);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>isChecking</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> if this method should simply determine whether this instance can be frozen. <code>false</code> if this instance should actually freeze itself when this method is called.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>If <code>isChecking</code> is <code>true</code>, this method returns <code>true</code> if this <a class=\"xref\" href=\"system.windows.media.animation.animatable\" data-linktype=\"relative-path\">Animatable</a> can be made unmodifiable, or <code>false</code> if it cannot be made unmodifiable.  </p>\n<p> If <code>isChecking</code> is <code>false</code>, this method returns <code>true</code> if the if this <a class=\"xref\" href=\"system.windows.media.animation.animatable\" data-linktype=\"relative-path\">Animatable</a> is now unmodifiable, or <code>false</code> if it cannot be made unmodifiable, with the side effect of having begun to change the frozen status of this object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method will return <strong>false</strong> when <a class=\"xref\" href=\"system.windows.media.animation.animatable#System_Windows_Media_Animation_Animatable_HasAnimatedProperties_\" data-linktype=\"relative-path\">HasAnimatedProperties</a> is <strong>true</strong>.  </p>\n<p> Do not call this method directly (except when calling base in an implementation). This method is called internally by <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_CanFreeze_\" data-linktype=\"relative-path\">CanFreeze</a> (with <code>isChecking</code> equal to <code>true</code>) and  <a class=\"xref\" href=\"system.windows.freezable#System_Windows_Freezable_Freeze_\" data-linktype=\"relative-path\">Freeze</a> (with <code>isChecking</code> equal to <code>false</code>).</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Animatable_GetAnimationBaseValue_System_Windows_DependencyProperty_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Animatable_GetAnimationBaseValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAnimationBaseValue(DependencyProperty)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the non-animated value of the specified <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dp</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Identifies the property whose base (non-animated) value should be retrieved.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The value that would be returned if the specified property were not animated.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the specified property is not animated, this method returns the same result as <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_GetValue_\" data-linktype=\"relative-path\">GetValue</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example, the non-animated values of animated properties are retrieved and displayed.  </p>\n<pre><code class=\"lang-cs\" name=\"timingbehaviors_procedural_snip#GetAnimationBaseValueExampleWholePage\">/*\n\n   This sample shows how to use the \n   Animatable.GetAnimationBaseValue and \n   UIElement.GetAnimationBaseValue methods\n   to get the non-animated value of an\n   animated Animatable or UIElement.\n\n*/\n\nusing System;\nusing System.Windows;\nusing System.Windows.Navigation;\nusing System.Windows.Media;\nusing System.Windows.Media.Animation;\nusing System.Windows.Shapes;\nusing System.Windows.Controls;\nusing System.Windows.Input;\n\nnamespace Microsoft.Samples.Animation.TimingBehaviors\n{\n\n    \n    public class GetAnimationBaseValueExample : Page {\n        \n   \n        private RotateTransform animatedRotateTransform;\n        public GetAnimationBaseValueExample()\n        {\n        \n            WindowTitle = &quot;GetAnimationBaseValue Example&quot;;\n            StackPanel myPanel = new StackPanel();\n            myPanel.Margin = new Thickness(20.0);    \n            \n            // Create a button.\n            Button animatedButton = new Button();\n            animatedButton.Content = &quot;Click Me&quot;;\n            animatedButton.Width = 100;\n            animatedButton.Margin = new Thickness(100);\n       \n            // Create and animate a RotateTransform and\n            // apply it to the button&#39;s RenderTransform\n            // property.\n            animatedRotateTransform = new RotateTransform();\n            animatedRotateTransform.Angle = 45;\n            DoubleAnimation angleAnimation = \n                new DoubleAnimation(0,360, TimeSpan.FromSeconds(5));\n            angleAnimation.RepeatBehavior = RepeatBehavior.Forever;\n            animatedRotateTransform.BeginAnimation(\n                RotateTransform.AngleProperty, angleAnimation);           \n            animatedButton.RenderTransform = animatedRotateTransform;\n            animatedButton.RenderTransformOrigin = new Point(0.5,0.5);\n            // Animate the button&#39;s width.\n            DoubleAnimation widthAnimation = \n                new DoubleAnimation(120, 300, TimeSpan.FromSeconds(5));\n            widthAnimation.RepeatBehavior = RepeatBehavior.Forever;\n            widthAnimation.AutoReverse = true;\n            animatedButton.BeginAnimation(Button.WidthProperty, widthAnimation);\n            \n            // Handle button clicks.\n            animatedButton.Click += new RoutedEventHandler(animatedButton_Clicked);           \n\n            // Add the button to the panel.\n            myPanel.Children.Add(animatedButton);\n            this.Content = myPanel;\n        }\n\n        // Display the base value for Button.Width and RotateTransform.Angle.\n        private void animatedButton_Clicked(object sender, RoutedEventArgs e)\n        {\n            Button animatedButton = (Button)sender;\n            MessageBox.Show(&quot;Button width base value: &quot; + \n                animatedButton.GetAnimationBaseValue(Button.WidthProperty)\n                + &quot;<br>RotateTransform base value: &quot; +\n                animatedRotateTransform.GetAnimationBaseValue(RotateTransform.AngleProperty));\n        \n        }\n \n    }\n \n}\n</code></pre><pre><code class=\"lang-vb\" name=\"timingbehaviors_procedural_snip#GetAnimationBaseValueExampleWholePage\">&#39;\n&#39;\n&#39;   This sample shows how to use the \n&#39;   Animatable.GetAnimationBaseValue and \n&#39;   UIElement.GetAnimationBaseValue methods\n&#39;   to get the non-animated value of an\n&#39;   animated Animatable or UIElement.\n&#39;\n&#39;\n\nImports System\nImports System.Windows\nImports System.Windows.Navigation\nImports System.Windows.Media\nImports System.Windows.Media.Animation\nImports System.Windows.Shapes\nImports System.Windows.Controls\nImports System.Windows.Input\nImports Microsoft.VisualBasic\n\nNamespace Microsoft.Samples.Animation.TimingBehaviors\n\n\n\tPublic Class GetAnimationBaseValueExample\n\t\tInherits Page\n\n\n\t\tPrivate animatedRotateTransform As RotateTransform\n\t\tPublic Sub New()\n\n\t\t\tWindowTitle = &quot;GetAnimationBaseValue Example&quot;\n\t\t\tDim myPanel As New StackPanel()\n\t\t\tmyPanel.Margin = New Thickness(20.0)\n\n\t\t\t&#39; Create a button.\n\t\t\tDim animatedButton As New Button()\n\t\t\tanimatedButton.Content = &quot;Click Me&quot;\n\t\t\tanimatedButton.Width = 100\n\t\t\tanimatedButton.Margin = New Thickness(100)\n\n\t\t\t&#39; Create and animate a RotateTransform and\n\t\t\t&#39; apply it to the button&#39;s RenderTransform\n\t\t\t&#39; property.\n\t\t\tanimatedRotateTransform = New RotateTransform()\n\t\t\tanimatedRotateTransform.Angle = 45\n\t\t\tDim angleAnimation As New DoubleAnimation(0,360, TimeSpan.FromSeconds(5))\n\t\t\tangleAnimation.RepeatBehavior = RepeatBehavior.Forever\n\t\t\tanimatedRotateTransform.BeginAnimation(RotateTransform.AngleProperty, angleAnimation)\n\t\t\tanimatedButton.RenderTransform = animatedRotateTransform\n\t\t\tanimatedButton.RenderTransformOrigin = New Point(0.5,0.5)\n\t\t\t&#39; Animate the button&#39;s width.\n\t\t\tDim widthAnimation As New DoubleAnimation(120, 300, TimeSpan.FromSeconds(5))\n\t\t\twidthAnimation.RepeatBehavior = RepeatBehavior.Forever\n\t\t\twidthAnimation.AutoReverse = True\n\t\t\tanimatedButton.BeginAnimation(Button.WidthProperty, widthAnimation)\n\n\t\t\t&#39; Handle button clicks.\n\t\t\tAddHandler animatedButton.Click, AddressOf animatedButton_Clicked\n\n\t\t\t&#39; Add the button to the panel.\n\t\t\tmyPanel.Children.Add(animatedButton)\n\t\t\tMe.Content = myPanel\n\t\tEnd Sub\n\n\t\t&#39; Display the base value for Button.Width and RotateTransform.Angle.\n\t\tPrivate Sub animatedButton_Clicked(ByVal sender As Object, ByVal e As RoutedEventArgs)\n\t\t\tDim animatedButton As Button = CType(sender, Button)\n            MessageBox.Show(&quot;Button width base value: &quot; &amp; animatedButton.GetAnimationBaseValue(Button.WidthProperty).ToString &amp; vbLf &amp; &quot;RotateTransform base value: &quot; &amp; animatedRotateTransform.GetAnimationBaseValue(RotateTransform.AngleProperty).ToString)\n        End Sub\n\n\tEnd Class\n\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_Animatable_ShouldSerializeStoredWeakReference_System_Windows_DependencyObject_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_Animatable_ShouldSerializeStoredWeakReference_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ShouldSerializeStoredWeakReference(DependencyObject)</div>        \r\n          </div>\r\n    \r\n            <p>Specifies whether a dependency object should be serialized.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool ShouldSerializeStoredWeakReference (System.Windows.DependencyObject target);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyobject\" data-linktype=\"relative-path\">DependencyObject</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Represents an object that participates in the dependency property system.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to serialize <code>target</code>; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.componentmodel.typedescriptor\" data-linktype=\"relative-path\">TypeDescriptor</a> class uses the ShouldSerializeStoredWeakReference method to determine if a property should be serialized.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Media.Animation.Animatable.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Media.Animation.Animatable.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.Animatable\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.Animatable..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.Animatable.ApplyAnimationClock\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.Animatable.BeginAnimation\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.Animatable.Clone\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.Animatable.FreezeCore\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.Animatable.GetAnimationBaseValue\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.Animatable.HasAnimatedProperties\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference\">\r\n<meta name=\"APILocation\" content=\"PresentationCore.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"c23c51bc-4db5-1b64-0f56-b5dd7e9692a7\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Windows.Media.Animation\\Animatable.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Abstract class that provides animation support.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows.Media.Animation/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Media.Animation.Animatable\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Media.Animation.Animatable.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Media.Animation.Animatable.yml","open_to_public_contributors":true,"api_name":["System.Windows.Media.Animation.Animatable","System.Windows.Media.Animation.Animatable..ctor","System.Windows.Media.Animation.Animatable.ApplyAnimationClock","System.Windows.Media.Animation.Animatable.BeginAnimation","System.Windows.Media.Animation.Animatable.Clone","System.Windows.Media.Animation.Animatable.FreezeCore","System.Windows.Media.Animation.Animatable.GetAnimationBaseValue","System.Windows.Media.Animation.Animatable.HasAnimatedProperties","System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference"],"api_location":["PresentationCore.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Media.Animation.Animatable","System::Windows::Media::Animation::Animatable","System.Windows.Media.Animation.Animatable.#ctor","System::Windows::Media::Animation::Animatable::#ctor","System.Windows.Media.Animation.Animatable.ApplyAnimationClock","System::Windows::Media::Animation::Animatable::ApplyAnimationClock","System.Windows.Media.Animation.Animatable.BeginAnimation","System::Windows::Media::Animation::Animatable::BeginAnimation","System.Windows.Media.Animation.Animatable.Clone","System::Windows::Media::Animation::Animatable::Clone","System.Windows.Media.Animation.Animatable.FreezeCore","System::Windows::Media::Animation::Animatable::FreezeCore","System.Windows.Media.Animation.Animatable.GetAnimationBaseValue","System::Windows::Media::Animation::Animatable::GetAnimationBaseValue","System.Windows.Media.Animation.Animatable.HasAnimatedProperties","System::Windows::Media::Animation::Animatable::HasAnimatedProperties","System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference","System::Windows::Media::Animation::Animatable::ShouldSerializeStoredWeakReference"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"c23c51bc-4db5-1b64-0f56-b5dd7e9692a7","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Windows.Media.Animation\\Animatable.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows.Media.Animation/Animatable.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Animatable class | Microsoft Docs","_op_ogTitle":"Animatable class","description":"Abstract class that provides animation support.\n","toc_asset_id":"_splitted/System.Windows.Media.Animation/toc.json","toc_rel":"_splitted/System.Windows.Media.Animation/toc.json","source_url":"","ms.assetid":"System.Windows.Media.Animation.Animatable","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.media.animation.animatable","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.media.animation.animatable","fileRelativePath":"System.Windows.Media.Animation.Animatable.html"},"themesRelativePathToOutputRoot":"_themes/"}