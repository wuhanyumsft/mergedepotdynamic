{"content":"    \r\n    <h1 id=\"System_Reflection_FieldInfo\">\r\n      <span class=\"lang-csharp\">FieldInfo</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Discovers the attributes of a field and provides access to field metadata.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n[System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._FieldInfo))]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic abstract class FieldInfo : System.Reflection.MemberInfo, System.Runtime.InteropServices._FieldInfo</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">System.Reflection.MemberInfo</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">FieldInfo</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_CustomAttributes\" data-linktype=\"relative-path\">CustomAttributes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_DeclaringType\" data-linktype=\"relative-path\">DeclaringType</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_GetCustomAttributes_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_GetCustomAttributes_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Type,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_GetCustomAttributesData\" data-linktype=\"relative-path\">GetCustomAttributesData()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_IsDefined_System_Type_System_Boolean_\" data-linktype=\"relative-path\">IsDefined(Type,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_MetadataToken\" data-linktype=\"relative-path\">MetadataToken</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_Module\" data-linktype=\"relative-path\">Module</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_Name\" data-linktype=\"relative-path\">Name</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_op_Equality_System_Reflection_MemberInfo_System_Reflection_MemberInfo_\" data-linktype=\"relative-path\">op_Equality(MemberInfo,MemberInfo)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_op_Inequality_System_Reflection_MemberInfo_System_Reflection_MemberInfo_\" data-linktype=\"relative-path\">op_Inequality(MemberInfo,MemberInfo)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_ReflectedType\" data-linktype=\"relative-path\">ReflectedType</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_MemberInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetType\" data-linktype=\"relative-path\">_MemberInfo.GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_MemberInfo.GetTypeInfo(UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetTypeInfoCount_System_UInt32__\" data-linktype=\"relative-path\">_MemberInfo.GetTypeInfoCount(UInt32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"relative-path\">_MemberInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The field information is obtained from metadata. The FieldInfo class does not have a public constructor. FieldInfo objects are obtained by calling either the <a class=\"xref\" href=\"system.type#System_Type_GetFields_\" data-linktype=\"relative-path\">GetFields</a> or <a class=\"xref\" href=\"system.type#System_Type_GetField_\" data-linktype=\"relative-path\">GetField</a> method of a <code>Type</code> object.  </p>\n<p> Fields are variables defined in the class. FieldInfo provides access to the metadata for a field within a class and provides dynamic set and get functionality for the field. The class is not loaded into memory until invoke or get is called on the object.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo__ctor\" data-linktype=\"self-bookmark\">FieldInfo()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <code>FieldInfo</code> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_Attributes\" data-linktype=\"self-bookmark\">Attributes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the attributes associated with this field.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_FieldHandle\" data-linktype=\"self-bookmark\">FieldHandle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <code>RuntimeFieldHandle</code>, which is a handle to the internal metadata representation of a field.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_FieldType\" data-linktype=\"self-bookmark\">FieldType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the type of this field object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_IsAssembly\" data-linktype=\"self-bookmark\">IsAssembly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the potential visibility of this field is described by <a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">FieldAttributes</a>; that is, the field is visible at most to other types in the same assembly, and is not visible to derived types outside the assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_IsFamily\" data-linktype=\"self-bookmark\">IsFamily</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the visibility of this field is described by <a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">FieldAttributes</a>; that is, the field is visible only within its class and derived classes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_IsFamilyAndAssembly\" data-linktype=\"self-bookmark\">IsFamilyAndAssembly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the visibility of this field is described by <a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">FieldAttributes</a>; that is, the field can be accessed from derived classes, but only if they are in the same assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_IsFamilyOrAssembly\" data-linktype=\"self-bookmark\">IsFamilyOrAssembly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the potential visibility of this field is described by <a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">FieldAttributes</a>; that is, the field can be accessed by derived classes wherever they are, and by classes in the same assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_IsInitOnly\" data-linktype=\"self-bookmark\">IsInitOnly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the field can only be set in the body of the constructor.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_IsLiteral\" data-linktype=\"self-bookmark\">IsLiteral</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the value is written at compile time and cannot be changed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_IsNotSerialized\" data-linktype=\"self-bookmark\">IsNotSerialized</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether this field has the <code>NotSerialized</code> attribute.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_IsPinvokeImpl\" data-linktype=\"self-bookmark\">IsPinvokeImpl</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the corresponding <code>PinvokeImpl</code> attribute is set in <a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">FieldAttributes</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_IsPrivate\" data-linktype=\"self-bookmark\">IsPrivate</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the field is private.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_IsPublic\" data-linktype=\"self-bookmark\">IsPublic</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the field is public.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_IsSecurityCritical\" data-linktype=\"self-bookmark\">IsSecurityCritical</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the current field is security-critical or security-safe-critical at the current trust level.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_IsSecuritySafeCritical\" data-linktype=\"self-bookmark\">IsSecuritySafeCritical</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the current field is security-safe-critical at the current trust level.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_IsSecurityTransparent\" data-linktype=\"self-bookmark\">IsSecurityTransparent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the current field is transparent at the current trust level.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_IsSpecialName\" data-linktype=\"self-bookmark\">IsSpecialName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the corresponding <code>SpecialName</code> attribute is set in the <a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">FieldAttributes</a> enumerator.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_IsStatic\" data-linktype=\"self-bookmark\">IsStatic</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the field is static.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_MemberType\" data-linktype=\"self-bookmark\">MemberType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.reflection.membertypes\" data-linktype=\"relative-path\">MemberTypes</a> value indicating that this member is a field.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether this instance is equal to a specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_GetFieldFromHandle_System_RuntimeFieldHandle_\" data-linktype=\"self-bookmark\">GetFieldFromHandle(RuntimeFieldHandle)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> for the field represented by the specified handle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_GetFieldFromHandle_System_RuntimeFieldHandle_System_RuntimeTypeHandle_\" data-linktype=\"self-bookmark\">GetFieldFromHandle(RuntimeFieldHandle,RuntimeTypeHandle)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> for the field represented by the specified handle, for the specified generic type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hash code for this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_GetOptionalCustomModifiers\" data-linktype=\"self-bookmark\">GetOptionalCustomModifiers()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an array of types that identify the optional custom modifiers of the field.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_GetRawConstantValue\" data-linktype=\"self-bookmark\">GetRawConstantValue()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a literal value associated with the field by a compiler.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_GetRequiredCustomModifiers\" data-linktype=\"self-bookmark\">GetRequiredCustomModifiers()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an array of types that identify the required custom modifiers of the property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_GetValue_System_Object_\" data-linktype=\"self-bookmark\">GetValue(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, returns the value of a field supported by a given object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_GetValueDirect_System_TypedReference_\" data-linktype=\"self-bookmark\">GetValueDirect(TypedReference)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the value of a field supported by a given object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_SetValue_System_Object_System_Object_\" data-linktype=\"self-bookmark\">SetValue(Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the value of the field supported by the given object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_SetValue_System_Object_System_Object_System_Reflection_BindingFlags_System_Reflection_Binder_System_Globalization_CultureInfo_\" data-linktype=\"self-bookmark\">SetValue(Object,Object,BindingFlags,Binder,CultureInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, sets the value of the field supported by the given object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_SetValueDirect_System_TypedReference_System_Object_\" data-linktype=\"self-bookmark\">SetValueDirect(TypedReference,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the value of the field supported by the given object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Operators\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_op_Equality_System_Reflection_FieldInfo_System_Reflection_FieldInfo_\" data-linktype=\"self-bookmark\">op_Equality(FieldInfo,FieldInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether two <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> objects are equal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_op_Inequality_System_Reflection_FieldInfo_System_Reflection_FieldInfo_\" data-linktype=\"self-bookmark\">op_Inequality(FieldInfo,FieldInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether two <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> objects are not equal.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_System_Runtime_InteropServices__FieldInfo_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"self-bookmark\">_FieldInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Maps a set of names to a corresponding set of dispatch identifiers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_System_Runtime_InteropServices__FieldInfo_GetType\" data-linktype=\"self-bookmark\">_FieldInfo.GetType()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object representing the <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_System_Runtime_InteropServices__FieldInfo_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"self-bookmark\">_FieldInfo.GetTypeInfo(UInt32,UInt32,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the type information for an object, which can then be used to get the type information for an interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_System_Runtime_InteropServices__FieldInfo_GetTypeInfoCount_System_UInt32__\" data-linktype=\"self-bookmark\">_FieldInfo.GetTypeInfoCount(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_FieldInfo_System_Runtime_InteropServices__FieldInfo_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"self-bookmark\">_FieldInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides access to properties and methods exposed by an object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo__ctor\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FieldInfo()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <code>FieldInfo</code> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected FieldInfo ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_Attributes\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_Attributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Attributes</div>        \r\n          </div>\r\n    \r\n            <p>Gets the attributes associated with this field.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract System.Reflection.FieldAttributes Attributes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">FieldAttributes</a></div>\r\n                  </div>\r\n                  <p>The <code>FieldAttributes</code> for this field.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>All members have a set of attributes, which are defined in relation to the specific type of member. <code>FieldAttributes</code> informs the user whether this field is the private field, a static field, and so on.  </p>\n<p> To get the <code>Attributes</code> property, first get the class <code>Type</code>. From the <code>Type</code>, get the <code>FieldInfo</code>. From the <code>FieldInfo</code>, get the <code>Attributes</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example builds three fields and displays their field attributes. A <code>FieldAttributes</code> value can contain more than one attribute, such as both <code>Public</code> and <code>Literal</code>, as shown in the third field.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic FieldAttributes Example#1\">using System;\nusing System.Reflection;\n\npublic class Demo\n{\n    // Make three fields:\n    // The first field is private.\n    private string m_field = &quot;String A&quot;;\n\n    // The second field is public.\n    public string Field = &quot;String B&quot;;\n\n    // The third field is public const (hence also literal and static),\n    // with a default value.\n    public const string FieldC = &quot;String C&quot;;\n}\n\npublic class Myfieldattributes\n{\n    public static void Main()\n    {\n        Console.WriteLine (&quot;<br>Reflection.FieldAttributes&quot;);\n        Demo d = new Demo();\n \n        // Get a Type object for Demo, and a FieldInfo for each of\n        // the three fields. Use the FieldInfo to display field\n        // name, value for the Demo object in d, and attributes.\n        //\n        Type myType = typeof(Demo);\n        FieldInfo fiPrivate = myType.GetField(&quot;m_field&quot;,\n            BindingFlags.NonPublic | BindingFlags.Instance);\n        DisplayField(d, fiPrivate);\n\n        FieldInfo fiPublic = myType.GetField(&quot;Field&quot;,\n            BindingFlags.Public | BindingFlags.Instance);\n        DisplayField(d, fiPublic);\n\n        FieldInfo fiConstant = myType.GetField(&quot;FieldC&quot;,\n            BindingFlags.Public | BindingFlags.Static);\n        DisplayField(d, fiConstant);\n    }\n\n    static void DisplayField(Object obj, FieldInfo f)\n    { \n        // Display the field name, value, and attributes.\n        //\n        Console.WriteLine(&quot;{0} = \\&quot;{1}\\&quot;; attributes: {2}&quot;, \n            f.Name, f.GetValue(obj), f.Attributes);\n    }\n}\n\n/* This code example produces the following output:\n\nReflection.FieldAttributes\nm_field = &quot;String A&quot;; attributes: Private\nField = &quot;String B&quot;; attributes: Public\nFieldC = &quot;String C&quot;; attributes: Public, Static, Literal, HasDefault\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic FieldAttributes Example#1\">Imports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\nPublic Class Demo\n    &#39; Declare three fields.\n    &#39; The first field is private.\n    Private m_field As String = &quot;String A&quot;\n\n    &#39;The second field is public.\n    Public Field As String = &quot;String B&quot;\n\n    &#39; The third field is public and const, hence also static\n    &#39; and literal with a default value.\n    Public Const FieldC As String = &quot;String C&quot;\n\nEnd Class\n\nModule Module1\n    Sub Main()\n        &#39; Create an instance of the Demo class.\n        Dim d As New Demo()\n\n        Console.WriteLine(vbCrLf &amp; &quot;Reflection.FieldAttributes&quot;)\n\n        &#39; Get a Type object for Demo, and a FieldInfo for each of\n        &#39; the three fields. Use the FieldInfo to display field\n        &#39; name, value for the Demo object in d, and attributes.\n        &#39;\n        Dim myType As Type = GetType(Demo)\n\n        Dim fiPrivate As FieldInfo = myType.GetField(&quot;m_field&quot;, _\n            BindingFlags.NonPublic Or BindingFlags.Instance)\n        DisplayField(d, fiPrivate)\n\n        Dim fiPublic As FieldInfo = myType.GetField(&quot;Field&quot;, _\n            BindingFlags.Public Or BindingFlags.Instance)\n        DisplayField(d, fiPublic)\n\n        Dim fiConstant As FieldInfo = myType.GetField(&quot;FieldC&quot;, _\n            BindingFlags.Public Or BindingFlags.Static)\n        DisplayField(d, fiConstant)\n    End Sub\n\n    Sub DisplayField(ByVal obj As Object, ByVal f As FieldInfo)\n\n        &#39; Display the field name, value, and attributes.\n        &#39;\n        Console.WriteLine(&quot;{0} = &quot;&quot;{1}&quot;&quot;; attributes: {2}&quot;, _\n            f.Name, f.GetValue(obj), f.Attributes)\n    End Sub\n\nEnd Module\n\n&#39; This code example produces the following output:\n&#39;\n&#39;m_field = &quot;String A&quot;; attributes: Private\n&#39;Field = &quot;String B&quot;; attributes: Public\n&#39;FieldC = &quot;String C&quot;; attributes: Public, Static, Literal, HasDefault\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic FieldAttributes Example#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Security::Permissions;\n\npublic ref class Demo\n{\nprivate:\n    // Make three fields:\n    // The first field is private.\n    String^ m_field;\n\n    // The second field is public.\npublic:\n    String^ Field;\n\n    // The third field is public and literal. \n    literal String^ FieldC = &quot;String C&quot;;\n\n    Demo() { m_field = &quot;String A&quot;; Field = &quot;String B&quot;; }\n};\n\nstatic void DisplayField(Object^ obj, FieldInfo^ f)\n{ \n    // Display the field name, value, and attributes.\n    //\n    Console::WriteLine(&quot;{0} = \\&quot;{1}\\&quot;; attributes: {2}&quot;, \n        f-&gt;Name, f-&gt;GetValue(obj), f-&gt;Attributes);\n};\n\nvoid main()\n{\n    Console::WriteLine (&quot;<br>Reflection.FieldAttributes&quot;);\n    Demo^ d = gcnew Demo();\n\n    // Get a Type object for Demo, and a FieldInfo for each of\n    // the three fields. Use the FieldInfo to display field\n    // name, value for the Demo object in d, and attributes.\n    //\n    Type^ myType = Demo::typeid;\n\n    FieldInfo^ fiPrivate = myType-&gt;GetField(&quot;m_field&quot;,\n        BindingFlags::NonPublic | BindingFlags::Instance);\n    DisplayField(d, fiPrivate);\n\n    FieldInfo^ fiPublic = myType-&gt;GetField(&quot;Field&quot;,\n        BindingFlags::Public | BindingFlags::Instance);\n    DisplayField(d, fiPublic);\n\n    FieldInfo^ fiConstant = myType-&gt;GetField(&quot;FieldC&quot;,\n        BindingFlags::Public | BindingFlags::Static);\n    DisplayField(d, fiConstant);\n}\n\n/* This code example produces the following output:\n\nReflection.FieldAttributes\nm_field = &quot;String A&quot;; attributes: Private\nField = &quot;String B&quot;; attributes: Public\nFieldC = &quot;String C&quot;; attributes: Public, Static, Literal, HasDefault\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_FieldHandle\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_FieldHandle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FieldHandle</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <code>RuntimeFieldHandle</code>, which is a handle to the internal metadata representation of a field.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract RuntimeFieldHandle FieldHandle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtimefieldhandle\" data-linktype=\"relative-path\">RuntimeFieldHandle</a></div>\r\n                  </div>\r\n                  <p>A handle to the internal metadata representation of a field.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The handles are valid only in the appdomain in which they were obtained.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example retrieves MyClass.MyField field information and displays the field associated with the field handle.  </p>\n<pre><code class=\"lang-cpp\" name=\"FieldInfo_FieldHandle#1\">using namespace System;\nusing namespace System::Reflection;\n\npublic ref class MyClass\n{\npublic:\n   String^ MyField;\n};\n\nvoid DisplayFieldHandle( RuntimeFieldHandle myFieldHandle )\n{\n   // Get the type from the handle.\n   FieldInfo^ myField = FieldInfo::GetFieldFromHandle( myFieldHandle );\n\n   // Display the type.\n   Console::WriteLine( &quot;<br>Displaying the field from the handle.<br>&quot; );\n   Console::WriteLine( &quot;The type is {0}.&quot;, myField );\n}\n\nint main()\n{\n   MyClass^ myClass = gcnew MyClass;\n\n   // Get the type of MyClass.\n   Type^ myType = MyClass::typeid;\n   try\n   {\n      // Get the field information of MyField.\n      FieldInfo^ myFieldInfo = myType-&gt;GetField( &quot;MyField&quot;, static_cast&lt;BindingFlags&gt;(BindingFlags::Public | BindingFlags::Instance) );\n\n      // Determine whether or not the FieldInfo Object* is 0.\n      if ( myFieldInfo != nullptr )\n      {\n         // Get the handle for the field.\n         RuntimeFieldHandle myFieldHandle = myFieldInfo-&gt;FieldHandle;\n         DisplayFieldHandle( myFieldHandle );\n      }\n      else\n      {\n         Console::WriteLine( &quot;The myFieldInfo Object* is 0.&quot; );\n      }\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;Exception: {0}&quot;, e-&gt;Message );\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"FieldInfo_FieldHandle#1\">Imports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\nPublic Class [MyClass]\n    Public MyField As String = &quot;Microsoft&quot;\nEnd Class &#39;[MyClass]\n\nPublic Class FieldInfo_FieldHandle\n    Public Shared Sub Main()\n        Dim [myClass] As New [MyClass]()\n        &#39; Get the type of MyClass.\n        Dim myType As Type = GetType([MyClass])\n        Try\n            &#39; Get the field information of MyField.\n            Dim myFieldInfo As FieldInfo = myType.GetField(&quot;MyField&quot;, BindingFlags.Public Or BindingFlags.Instance)\n\n            &#39; Determine whether or not the FieldInfo object is null.\n            If Not (myFieldInfo Is Nothing) Then\n                &#39; Get the handle for the field.\n                Dim myFieldHandle As RuntimeFieldHandle = myFieldInfo.FieldHandle\n\n                DisplayFieldHandle(myFieldHandle)\n            Else\n                Console.WriteLine(&quot;The myFieldInfo object is null.&quot;)\n            End If\n        Catch e As Exception\n            Console.WriteLine(&quot; Exception: {0}&quot;, e.Message.ToString())\n        End Try\n    End Sub &#39;Main\n\n    Public Shared Sub DisplayFieldHandle(ByVal myFieldHandle As RuntimeFieldHandle)\n        &#39; Get the type from the handle.\n        Dim myField As FieldInfo = FieldInfo.GetFieldFromHandle(myFieldHandle)\n        &#39; Display the type.\n        Console.WriteLine(ControlChars.Cr + &quot;Displaying the field from the handle.&quot; + ControlChars.Cr)\n        Console.WriteLine(&quot;The type is {0}.&quot;, myField.ToString())\n    End Sub &#39;DisplayFieldHandle\nEnd Class &#39;FieldInfo_FieldHandle\n</code></pre><pre><code class=\"lang-cs\" name=\"FieldInfo_FieldHandle#1\">using System;\nusing System.Reflection;\n  \npublic class MyClass\n{\n    public string MyField = &quot;Microsoft&quot;;\n}\n\npublic class FieldInfo_FieldHandle\n{\n    public static void Main()\n    {\n    \n        MyClass myClass =new MyClass();\n\n        // Get the type of MyClass.\n        Type myType = typeof(MyClass);\n\n        try\n        {\n            // Get the field information of MyField.\n            FieldInfo myFieldInfo = myType.GetField(&quot;MyField&quot;, BindingFlags.Public \n                | BindingFlags.Instance);\n      \n            // Determine whether or not the FieldInfo object is null.\n            if(myFieldInfo!=null)\n            {\n                // Get the handle for the field.\n                RuntimeFieldHandle myFieldHandle=myFieldInfo.FieldHandle;\n\n                DisplayFieldHandle(myFieldHandle);\n            }\n            else\n            {\n                Console.WriteLine(&quot;The myFieldInfo object is null.&quot;);\n            }\n        }  \n        catch(Exception e)\n        {\n            Console.WriteLine(&quot;Exception: {0}&quot;, e.Message);\n        }\n    }\n\n    public static void DisplayFieldHandle(RuntimeFieldHandle myFieldHandle)\n    {\n        // Get the type from the handle.\n        FieldInfo myField = FieldInfo.GetFieldFromHandle(myFieldHandle);      \n      \n        // Display the type.\n        Console.WriteLine(&quot;<br>Displaying the field from the handle.<br>&quot;);\n        Console.WriteLine(&quot;The type is {0}.&quot;, myField.ToString());\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_FieldType\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_FieldType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FieldType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the type of this field object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract Type FieldType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>The type of this field object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The type is some primitive data type, such as <code>String</code>, <code>Boolean</code>, or <code>GUID</code>.  </p>\n<p> To get the <code>FieldType</code> property, first get the class <code>Type</code>. From the <code>Type</code>, get the <code>FieldInfo</code>. From the <code>FieldInfo</code>, get the <code>FieldType</code> value.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a field, gets its type and <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a>, and displays its FieldType.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic FieldInfo.FieldType Example#1\">using System;\nusing System.Reflection;\n\npublic class TestClass\n{\n    // Define a field.\n    private string field = &quot;private field&quot;;\n}\n \npublic class Example\n{\n    public static void Main()\n    {\n        var cl= new TestClass();\n  \n        // Get the type and FieldInfo.\n        Type t = cl.GetType();\n        FieldInfo fi = t.GetField(&quot;field&quot;, \n            BindingFlags.Instance | BindingFlags.NonPublic);\n  \n        // Get and display the field type.\n        Console.WriteLine(&quot;Field Name: {0}.{1}&quot;, t.FullName, fi.Name);\n        Console.WriteLine(&quot;Field Value: &#39;{0}&#39;&quot;, fi.GetValue(cl));\n        Console.WriteLine(&quot;Field Type: {0}&quot;, fi.FieldType);\n    }\n}\n// The example displays the following output:\n//       Field Name: TestClass.field\n//       Field Value: &#39;private field&#39;\n//       Field Type: System.String\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic FieldInfo.FieldType Example#1\">using namespace System;\nusing namespace System::Reflection;\n\npublic ref class TestClass\n{\n   // Define a field.\n   private:\n      String^ field = &quot;private field&quot; ;\n\n// public:\n//    Myfield()\n//       : field( &quot;private field&quot; )\n//    {}\n// \n// \n//    property String^ Field \n//    {\n//       String^ get()\n//       {\n//          return field;\n//       }\n// \n//   }\n};\n\nvoid main()\n{\n   TestClass^ cl = gcnew TestClass;\n   \n   // Get the type and FieldInfo.\n   Type^ t = cl-&gt;GetType();\n   FieldInfo^ fi = t-&gt;GetField(&quot;field&quot;, \n                   static_cast&lt;BindingFlags&gt;(BindingFlags::Instance | BindingFlags::NonPublic));\n   \n   // Get and display the Ftype s ieldType.\n   Console::WriteLine(&quot;Field Name: {0}.{1}&quot;, t-&gt;FullName, fi-&gt;Name );\n   Console::WriteLine(&quot;Field Value: &#39;{0}&#39;&quot;, fi-&gt;GetValue(cl));\n   Console::WriteLine(&quot;Field Type: {0}&quot;, fi-&gt;FieldType);\n}\n// The example displays the following output:\n//       Field Name: TestClass.field\n//       Field Value: &#39;private field&#39;\n//       Field Type: System.String\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic FieldInfo.FieldType Example#1\">Imports System.Reflection\n\nPublic Class TestClass\n    &#39; Define a field.\n    Private field As String = &quot;private field&quot;\nEnd Class &#39;Myfield\n\nPublic Module Example\n    Public Sub Main()\n        Dim cl As New TestClass()\n\n        &#39; Get the type and FieldInfo.\n        Dim t As Type = cl.GetType()\n        Dim fi As FieldInfo = t.GetField(&quot;field&quot;, _\n                 BindingFlags.Instance Or BindingFlags.NonPublic)\n\n        &#39; Get and display the FieldType.\n        Console.WriteLine(&quot;Field Name: {0}.{1}&quot;, t.FullName, fi.Name)\n        Console.WriteLine(&quot;Field Value: &#39;{0}&#39;&quot;, fi.GetValue(cl))\n        Console.WriteLine(&quot;Field Type: {0}&quot;, fi.FieldType)\n    End Sub \nEnd Module\n&#39; The example displays the following output:\n&#39;       Field Name: TestClass.field\n&#39;       Field Value: &#39;private field&#39;\n&#39;       Field Type: System.String\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_IsAssembly\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_IsAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsAssembly</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the potential visibility of this field is described by <a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">FieldAttributes</a>; that is, the field is visible at most to other types in the same assembly, and is not visible to derived types outside the assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsAssembly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the visibility of this field is exactly described by <a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">FieldAttributes</a>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The actual visibility of a field is limited by the visibility of its type. The IsAssembly property might be <code>true</code> for a field, but if it is a field of a private nested type then the field is not visible outside the containing type.  </p>\n<p> The visibility of a field is exactly described by <a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">System.Reflection.FieldAttributes</a> if the only visibility modifier is <code>internal</code> (<code>Friend</code> in Visual Basic). This property is <code>false</code> for fields that are <code>protected internal</code> in C# (<code>Protected Friend</code> in Visual Basic, <code>protected public</code> in C++); use the <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_IsFamilyOrAssembly_\" data-linktype=\"relative-path\">IsFamilyOrAssembly</a> property to identify such fields.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example defines fields with varying levels of visibility, and displays the values of their IsAssembly, <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_IsFamily_\" data-linktype=\"relative-path\">IsFamily</a>, <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_IsFamilyOrAssembly_\" data-linktype=\"relative-path\">IsFamilyOrAssembly</a>, and <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_IsFamilyAndAssembly_\" data-linktype=\"relative-path\">IsFamilyAndAssembly</a> properties.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The Visual Basic and C# languages cannot define fields with <a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">System.Reflection.FieldAttributes</a> visibility; that access level appears only in the C++ example.  </p>\n</div>\n<pre><code class=\"lang-cpp\" name=\"Classic FieldInfo.IsAssembly Example#1\">using namespace System;\nusing namespace System::Reflection;\n\npublic ref class Example\n{\npublic:\n    int f_public;\ninternal:\n    int f_internal;\nprotected:\n    int f_protected;\nprotected public:\n    int f_protected_public;\nprotected private:\n    int f_protected_private;\n};\n\nvoid main()\n{\n    Console::WriteLine(&quot;<br>{0,-30}{1,-18}{2}&quot;, &quot;&quot;, &quot;IsAssembly&quot;, &quot;IsFamilyOrAssembly&quot;); \n    Console::WriteLine(&quot;{0,-21}{1,-18}{2,-18}{3}<br>&quot;, \n        &quot;&quot;, &quot;IsPublic&quot;, &quot;IsFamily&quot;, &quot;IsFamilyAndAssembly&quot;);\n\n    for each (FieldInfo^ f in Example::typeid-&gt;GetFields(\n        BindingFlags::Instance | BindingFlags::NonPublic | BindingFlags::Public))\n    {\n        Console::WriteLine(&quot;{0,-21}{1,-9}{2,-9}{3,-9}{4,-9}{5,-9}&quot;, \n            f-&gt;Name,\n            f-&gt;IsPublic,\n            f-&gt;IsAssembly,\n            f-&gt;IsFamily,\n            f-&gt;IsFamilyOrAssembly,\n            f-&gt;IsFamilyAndAssembly\n        );\n    }\n}\n\n/* This code example produces output similar to the following:\n\n                              IsAssembly        IsFamilyOrAssembly\n                     IsPublic          IsFamily          IsFamilyAndAssembly\n\nf_public             True     False    False    False    False\nf_internal           False    True     False    False    False\nf_protected          False    False    True     False    False\nf_protected_public   False    False    False    True     False\nf_protected_private  False    False    False    False    True\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic FieldInfo.IsAssembly Example#1\">Imports System\nImports System.Reflection\n\nPublic class Example\n\n    Public f_Public As Integer\n    Friend f_Friend As Integer \n    Protected f_Protected As Integer\n    Protected Friend f_Protected_Friend As Integer\n\n    Public Shared Sub Main()\n    \n        Console.WriteLine(vbCrLf &amp; _\n            &quot;{0,-30}{1,-18}{2}&quot;, &quot;&quot;, &quot;IsAssembly&quot;, &quot;IsFamilyOrAssembly&quot;) \n        Console.WriteLine(&quot;{0,-21}{1,-18}{2,-18}{3}&quot; &amp; vbCrLf, _\n            &quot;&quot;, &quot;IsPublic&quot;, &quot;IsFamily&quot;, &quot;IsFamilyAndAssembly&quot;)\n   \n        For Each f As FieldInfo In GetType(Example).GetFields( _\n            BindingFlags.Instance Or BindingFlags.NonPublic Or BindingFlags.Public)\n        \n            Console.WriteLine(&quot;{0,-21}{1,-9}{2,-9}{3,-9}{4,-9}{5,-9}&quot;, _\n                f.Name, _\n                f.IsPublic, _\n                f.IsAssembly, _\n                f.IsFamily, _\n                f.IsFamilyOrAssembly, _\n                f.IsFamilyAndAssembly _\n            )\n        Next\n    End Sub\nEnd Class\n\n&#39; This code example produces output similar to the following:\n&#39;\n&#39;                              IsAssembly        IsFamilyOrAssembly\n&#39;                     IsPublic          IsFamily          IsFamilyAndAssembly\n&#39;\n&#39;f_Public             True     False    False    False    False\n&#39;f_Friend             False    True     False    False    False\n&#39;f_Protected          False    False    True     False    False\n&#39;f_Protected_Friend   False    False    False    True     False\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic FieldInfo.IsAssembly Example#1\">using System;\nusing System.Reflection;\n\npublic class Example\n{\n    public int f_public;\n    internal int f_internal;\n    protected int f_protected;\n    protected internal int f_protected_public;\n\n    public static void Main()\n    {\n        Console.WriteLine(&quot;<br>{0,-30}{1,-18}{2}&quot;, &quot;&quot;, &quot;IsAssembly&quot;, &quot;IsFamilyOrAssembly&quot;); \n        Console.WriteLine(&quot;{0,-21}{1,-18}{2,-18}{3}<br>&quot;, \n            &quot;&quot;, &quot;IsPublic&quot;, &quot;IsFamily&quot;, &quot;IsFamilyAndAssembly&quot;);\n   \n        foreach (FieldInfo f in typeof(Example).GetFields(\n            BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public))\n        {\n            Console.WriteLine(&quot;{0,-21}{1,-9}{2,-9}{3,-9}{4,-9}{5,-9}&quot;, \n                f.Name,\n                f.IsPublic,\n                f.IsAssembly,\n                f.IsFamily,\n                f.IsFamilyOrAssembly,\n                f.IsFamilyAndAssembly\n            );\n        }\n    }\n}\n\n/* This code example produces output similar to the following:\n\n                              IsAssembly        IsFamilyOrAssembly\n                     IsPublic          IsFamily          IsFamilyAndAssembly\n\nf_public             True     False    False    False    False\nf_internal           False    True     False    False    False\nf_protected          False    False    True     False    False\nf_protected_public   False    False    False    True     False\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_IsFamily\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_IsFamily_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsFamily</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the visibility of this field is described by <a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">FieldAttributes</a>; that is, the field is visible only within its class and derived classes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsFamily { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if access to this field is exactly described by <a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">FieldAttributes</a>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The visibility of a field is exactly described by <a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">System.Reflection.FieldAttributes</a> if the only visibility modifier is <code>protected</code>. This property is <code>false</code> for fields that are <code>protected internal</code> in C# (<code>Protected Friend</code> in Visual Basic, <code>protected public</code> in C++); use the <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_IsFamilyOrAssembly_\" data-linktype=\"relative-path\">IsFamilyOrAssembly</a> property to identify such fields.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example defines fields with varying levels of visibility, and displays the values of their <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_IsAssembly_\" data-linktype=\"relative-path\">IsAssembly</a>, IsFamily, <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_IsFamilyOrAssembly_\" data-linktype=\"relative-path\">IsFamilyOrAssembly</a>, and <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_IsFamilyAndAssembly_\" data-linktype=\"relative-path\">IsFamilyAndAssembly</a> properties.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The Visual Basic and C# languages cannot define fields with <a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">System.Reflection.FieldAttributes</a> visibility; that access level appears only in the C++ example.  </p>\n</div>\n<pre><code class=\"lang-cpp\" name=\"Classic FieldInfo.IsAssembly Example#1\">using namespace System;\nusing namespace System::Reflection;\n\npublic ref class Example\n{\npublic:\n    int f_public;\ninternal:\n    int f_internal;\nprotected:\n    int f_protected;\nprotected public:\n    int f_protected_public;\nprotected private:\n    int f_protected_private;\n};\n\nvoid main()\n{\n    Console::WriteLine(&quot;<br>{0,-30}{1,-18}{2}&quot;, &quot;&quot;, &quot;IsAssembly&quot;, &quot;IsFamilyOrAssembly&quot;); \n    Console::WriteLine(&quot;{0,-21}{1,-18}{2,-18}{3}<br>&quot;, \n        &quot;&quot;, &quot;IsPublic&quot;, &quot;IsFamily&quot;, &quot;IsFamilyAndAssembly&quot;);\n\n    for each (FieldInfo^ f in Example::typeid-&gt;GetFields(\n        BindingFlags::Instance | BindingFlags::NonPublic | BindingFlags::Public))\n    {\n        Console::WriteLine(&quot;{0,-21}{1,-9}{2,-9}{3,-9}{4,-9}{5,-9}&quot;, \n            f-&gt;Name,\n            f-&gt;IsPublic,\n            f-&gt;IsAssembly,\n            f-&gt;IsFamily,\n            f-&gt;IsFamilyOrAssembly,\n            f-&gt;IsFamilyAndAssembly\n        );\n    }\n}\n\n/* This code example produces output similar to the following:\n\n                              IsAssembly        IsFamilyOrAssembly\n                     IsPublic          IsFamily          IsFamilyAndAssembly\n\nf_public             True     False    False    False    False\nf_internal           False    True     False    False    False\nf_protected          False    False    True     False    False\nf_protected_public   False    False    False    True     False\nf_protected_private  False    False    False    False    True\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic FieldInfo.IsAssembly Example#1\">Imports System\nImports System.Reflection\n\nPublic class Example\n\n    Public f_Public As Integer\n    Friend f_Friend As Integer \n    Protected f_Protected As Integer\n    Protected Friend f_Protected_Friend As Integer\n\n    Public Shared Sub Main()\n    \n        Console.WriteLine(vbCrLf &amp; _\n            &quot;{0,-30}{1,-18}{2}&quot;, &quot;&quot;, &quot;IsAssembly&quot;, &quot;IsFamilyOrAssembly&quot;) \n        Console.WriteLine(&quot;{0,-21}{1,-18}{2,-18}{3}&quot; &amp; vbCrLf, _\n            &quot;&quot;, &quot;IsPublic&quot;, &quot;IsFamily&quot;, &quot;IsFamilyAndAssembly&quot;)\n   \n        For Each f As FieldInfo In GetType(Example).GetFields( _\n            BindingFlags.Instance Or BindingFlags.NonPublic Or BindingFlags.Public)\n        \n            Console.WriteLine(&quot;{0,-21}{1,-9}{2,-9}{3,-9}{4,-9}{5,-9}&quot;, _\n                f.Name, _\n                f.IsPublic, _\n                f.IsAssembly, _\n                f.IsFamily, _\n                f.IsFamilyOrAssembly, _\n                f.IsFamilyAndAssembly _\n            )\n        Next\n    End Sub\nEnd Class\n\n&#39; This code example produces output similar to the following:\n&#39;\n&#39;                              IsAssembly        IsFamilyOrAssembly\n&#39;                     IsPublic          IsFamily          IsFamilyAndAssembly\n&#39;\n&#39;f_Public             True     False    False    False    False\n&#39;f_Friend             False    True     False    False    False\n&#39;f_Protected          False    False    True     False    False\n&#39;f_Protected_Friend   False    False    False    True     False\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic FieldInfo.IsAssembly Example#1\">using System;\nusing System.Reflection;\n\npublic class Example\n{\n    public int f_public;\n    internal int f_internal;\n    protected int f_protected;\n    protected internal int f_protected_public;\n\n    public static void Main()\n    {\n        Console.WriteLine(&quot;<br>{0,-30}{1,-18}{2}&quot;, &quot;&quot;, &quot;IsAssembly&quot;, &quot;IsFamilyOrAssembly&quot;); \n        Console.WriteLine(&quot;{0,-21}{1,-18}{2,-18}{3}<br>&quot;, \n            &quot;&quot;, &quot;IsPublic&quot;, &quot;IsFamily&quot;, &quot;IsFamilyAndAssembly&quot;);\n   \n        foreach (FieldInfo f in typeof(Example).GetFields(\n            BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public))\n        {\n            Console.WriteLine(&quot;{0,-21}{1,-9}{2,-9}{3,-9}{4,-9}{5,-9}&quot;, \n                f.Name,\n                f.IsPublic,\n                f.IsAssembly,\n                f.IsFamily,\n                f.IsFamilyOrAssembly,\n                f.IsFamilyAndAssembly\n            );\n        }\n    }\n}\n\n/* This code example produces output similar to the following:\n\n                              IsAssembly        IsFamilyOrAssembly\n                     IsPublic          IsFamily          IsFamilyAndAssembly\n\nf_public             True     False    False    False    False\nf_internal           False    True     False    False    False\nf_protected          False    False    True     False    False\nf_protected_public   False    False    False    True     False\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_IsFamilyAndAssembly\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_IsFamilyAndAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsFamilyAndAssembly</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the visibility of this field is described by <a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">FieldAttributes</a>; that is, the field can be accessed from derived classes, but only if they are in the same assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsFamilyAndAssembly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if access to this field is exactly described by <a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">FieldAttributes</a>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If a field has <a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">FieldAttributes</a> level visibility, it can be called from any member in a derived class that is also in the same assembly, but not from any other type.  </p>\n<p> The visibility of a field is exactly described by <a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">System.Reflection.FieldAttributes</a> if the visibility modifier is <code>protected private</code> in C++. Fields with this visibility cannot be defined in Visual Basic or C#.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example defines fields with varying levels of visibility, and displays the values of their <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_IsAssembly_\" data-linktype=\"relative-path\">IsAssembly</a>, <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_IsFamily_\" data-linktype=\"relative-path\">IsFamily</a>, <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_IsFamilyOrAssembly_\" data-linktype=\"relative-path\">IsFamilyOrAssembly</a>, and IsFamilyAndAssembly properties.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The Visual Basic and C# languages cannot define fields with <a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">System.Reflection.FieldAttributes</a> visibility; that access level appears only in the C++ example.  </p>\n</div>\n<pre><code class=\"lang-cpp\" name=\"Classic FieldInfo.IsAssembly Example#1\">using namespace System;\nusing namespace System::Reflection;\n\npublic ref class Example\n{\npublic:\n    int f_public;\ninternal:\n    int f_internal;\nprotected:\n    int f_protected;\nprotected public:\n    int f_protected_public;\nprotected private:\n    int f_protected_private;\n};\n\nvoid main()\n{\n    Console::WriteLine(&quot;<br>{0,-30}{1,-18}{2}&quot;, &quot;&quot;, &quot;IsAssembly&quot;, &quot;IsFamilyOrAssembly&quot;); \n    Console::WriteLine(&quot;{0,-21}{1,-18}{2,-18}{3}<br>&quot;, \n        &quot;&quot;, &quot;IsPublic&quot;, &quot;IsFamily&quot;, &quot;IsFamilyAndAssembly&quot;);\n\n    for each (FieldInfo^ f in Example::typeid-&gt;GetFields(\n        BindingFlags::Instance | BindingFlags::NonPublic | BindingFlags::Public))\n    {\n        Console::WriteLine(&quot;{0,-21}{1,-9}{2,-9}{3,-9}{4,-9}{5,-9}&quot;, \n            f-&gt;Name,\n            f-&gt;IsPublic,\n            f-&gt;IsAssembly,\n            f-&gt;IsFamily,\n            f-&gt;IsFamilyOrAssembly,\n            f-&gt;IsFamilyAndAssembly\n        );\n    }\n}\n\n/* This code example produces output similar to the following:\n\n                              IsAssembly        IsFamilyOrAssembly\n                     IsPublic          IsFamily          IsFamilyAndAssembly\n\nf_public             True     False    False    False    False\nf_internal           False    True     False    False    False\nf_protected          False    False    True     False    False\nf_protected_public   False    False    False    True     False\nf_protected_private  False    False    False    False    True\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic FieldInfo.IsAssembly Example#1\">Imports System\nImports System.Reflection\n\nPublic class Example\n\n    Public f_Public As Integer\n    Friend f_Friend As Integer \n    Protected f_Protected As Integer\n    Protected Friend f_Protected_Friend As Integer\n\n    Public Shared Sub Main()\n    \n        Console.WriteLine(vbCrLf &amp; _\n            &quot;{0,-30}{1,-18}{2}&quot;, &quot;&quot;, &quot;IsAssembly&quot;, &quot;IsFamilyOrAssembly&quot;) \n        Console.WriteLine(&quot;{0,-21}{1,-18}{2,-18}{3}&quot; &amp; vbCrLf, _\n            &quot;&quot;, &quot;IsPublic&quot;, &quot;IsFamily&quot;, &quot;IsFamilyAndAssembly&quot;)\n   \n        For Each f As FieldInfo In GetType(Example).GetFields( _\n            BindingFlags.Instance Or BindingFlags.NonPublic Or BindingFlags.Public)\n        \n            Console.WriteLine(&quot;{0,-21}{1,-9}{2,-9}{3,-9}{4,-9}{5,-9}&quot;, _\n                f.Name, _\n                f.IsPublic, _\n                f.IsAssembly, _\n                f.IsFamily, _\n                f.IsFamilyOrAssembly, _\n                f.IsFamilyAndAssembly _\n            )\n        Next\n    End Sub\nEnd Class\n\n&#39; This code example produces output similar to the following:\n&#39;\n&#39;                              IsAssembly        IsFamilyOrAssembly\n&#39;                     IsPublic          IsFamily          IsFamilyAndAssembly\n&#39;\n&#39;f_Public             True     False    False    False    False\n&#39;f_Friend             False    True     False    False    False\n&#39;f_Protected          False    False    True     False    False\n&#39;f_Protected_Friend   False    False    False    True     False\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic FieldInfo.IsAssembly Example#1\">using System;\nusing System.Reflection;\n\npublic class Example\n{\n    public int f_public;\n    internal int f_internal;\n    protected int f_protected;\n    protected internal int f_protected_public;\n\n    public static void Main()\n    {\n        Console.WriteLine(&quot;<br>{0,-30}{1,-18}{2}&quot;, &quot;&quot;, &quot;IsAssembly&quot;, &quot;IsFamilyOrAssembly&quot;); \n        Console.WriteLine(&quot;{0,-21}{1,-18}{2,-18}{3}<br>&quot;, \n            &quot;&quot;, &quot;IsPublic&quot;, &quot;IsFamily&quot;, &quot;IsFamilyAndAssembly&quot;);\n   \n        foreach (FieldInfo f in typeof(Example).GetFields(\n            BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public))\n        {\n            Console.WriteLine(&quot;{0,-21}{1,-9}{2,-9}{3,-9}{4,-9}{5,-9}&quot;, \n                f.Name,\n                f.IsPublic,\n                f.IsAssembly,\n                f.IsFamily,\n                f.IsFamilyOrAssembly,\n                f.IsFamilyAndAssembly\n            );\n        }\n    }\n}\n\n/* This code example produces output similar to the following:\n\n                              IsAssembly        IsFamilyOrAssembly\n                     IsPublic          IsFamily          IsFamilyAndAssembly\n\nf_public             True     False    False    False    False\nf_internal           False    True     False    False    False\nf_protected          False    False    True     False    False\nf_protected_public   False    False    False    True     False\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_IsFamilyOrAssembly\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_IsFamilyOrAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsFamilyOrAssembly</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the potential visibility of this field is described by <a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">FieldAttributes</a>; that is, the field can be accessed by derived classes wherever they are, and by classes in the same assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsFamilyOrAssembly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if access to this field is exactly described by <a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">FieldAttributes</a>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If a field has <a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">FieldAttributes</a> level visibility, it can be called from any member in a derived class or any member in the same assembly, but not from any other type.  </p>\n<p> The actual visibility of a field is limited by the visibility of its type. The IsFamilyOrAssembly property might be <code>true</code> for a field, but if it is a field of a private nested type then the field is not visible outside the containing type.  </p>\n<p> The visibility of a field is exactly described by <a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">System.Reflection.FieldAttributes</a> if the visibility modifier is <code>protected internal</code> in C# (<code>Protected Friend</code> in Visual Basic, <code>protected public</code> in C++).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example defines fields with varying levels of visibility, and displays the values of their <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_IsAssembly_\" data-linktype=\"relative-path\">IsAssembly</a>, <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_IsFamily_\" data-linktype=\"relative-path\">IsFamily</a>, IsFamilyOrAssembly, and <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_IsFamilyAndAssembly_\" data-linktype=\"relative-path\">IsFamilyAndAssembly</a> properties.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The Visual Basic and C# languages cannot define fields with <a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">System.Reflection.FieldAttributes</a> visibility; that access level appears only in the C++ example.  </p>\n</div>\n<pre><code class=\"lang-cpp\" name=\"Classic FieldInfo.IsAssembly Example#1\">using namespace System;\nusing namespace System::Reflection;\n\npublic ref class Example\n{\npublic:\n    int f_public;\ninternal:\n    int f_internal;\nprotected:\n    int f_protected;\nprotected public:\n    int f_protected_public;\nprotected private:\n    int f_protected_private;\n};\n\nvoid main()\n{\n    Console::WriteLine(&quot;<br>{0,-30}{1,-18}{2}&quot;, &quot;&quot;, &quot;IsAssembly&quot;, &quot;IsFamilyOrAssembly&quot;); \n    Console::WriteLine(&quot;{0,-21}{1,-18}{2,-18}{3}<br>&quot;, \n        &quot;&quot;, &quot;IsPublic&quot;, &quot;IsFamily&quot;, &quot;IsFamilyAndAssembly&quot;);\n\n    for each (FieldInfo^ f in Example::typeid-&gt;GetFields(\n        BindingFlags::Instance | BindingFlags::NonPublic | BindingFlags::Public))\n    {\n        Console::WriteLine(&quot;{0,-21}{1,-9}{2,-9}{3,-9}{4,-9}{5,-9}&quot;, \n            f-&gt;Name,\n            f-&gt;IsPublic,\n            f-&gt;IsAssembly,\n            f-&gt;IsFamily,\n            f-&gt;IsFamilyOrAssembly,\n            f-&gt;IsFamilyAndAssembly\n        );\n    }\n}\n\n/* This code example produces output similar to the following:\n\n                              IsAssembly        IsFamilyOrAssembly\n                     IsPublic          IsFamily          IsFamilyAndAssembly\n\nf_public             True     False    False    False    False\nf_internal           False    True     False    False    False\nf_protected          False    False    True     False    False\nf_protected_public   False    False    False    True     False\nf_protected_private  False    False    False    False    True\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic FieldInfo.IsAssembly Example#1\">Imports System\nImports System.Reflection\n\nPublic class Example\n\n    Public f_Public As Integer\n    Friend f_Friend As Integer \n    Protected f_Protected As Integer\n    Protected Friend f_Protected_Friend As Integer\n\n    Public Shared Sub Main()\n    \n        Console.WriteLine(vbCrLf &amp; _\n            &quot;{0,-30}{1,-18}{2}&quot;, &quot;&quot;, &quot;IsAssembly&quot;, &quot;IsFamilyOrAssembly&quot;) \n        Console.WriteLine(&quot;{0,-21}{1,-18}{2,-18}{3}&quot; &amp; vbCrLf, _\n            &quot;&quot;, &quot;IsPublic&quot;, &quot;IsFamily&quot;, &quot;IsFamilyAndAssembly&quot;)\n   \n        For Each f As FieldInfo In GetType(Example).GetFields( _\n            BindingFlags.Instance Or BindingFlags.NonPublic Or BindingFlags.Public)\n        \n            Console.WriteLine(&quot;{0,-21}{1,-9}{2,-9}{3,-9}{4,-9}{5,-9}&quot;, _\n                f.Name, _\n                f.IsPublic, _\n                f.IsAssembly, _\n                f.IsFamily, _\n                f.IsFamilyOrAssembly, _\n                f.IsFamilyAndAssembly _\n            )\n        Next\n    End Sub\nEnd Class\n\n&#39; This code example produces output similar to the following:\n&#39;\n&#39;                              IsAssembly        IsFamilyOrAssembly\n&#39;                     IsPublic          IsFamily          IsFamilyAndAssembly\n&#39;\n&#39;f_Public             True     False    False    False    False\n&#39;f_Friend             False    True     False    False    False\n&#39;f_Protected          False    False    True     False    False\n&#39;f_Protected_Friend   False    False    False    True     False\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic FieldInfo.IsAssembly Example#1\">using System;\nusing System.Reflection;\n\npublic class Example\n{\n    public int f_public;\n    internal int f_internal;\n    protected int f_protected;\n    protected internal int f_protected_public;\n\n    public static void Main()\n    {\n        Console.WriteLine(&quot;<br>{0,-30}{1,-18}{2}&quot;, &quot;&quot;, &quot;IsAssembly&quot;, &quot;IsFamilyOrAssembly&quot;); \n        Console.WriteLine(&quot;{0,-21}{1,-18}{2,-18}{3}<br>&quot;, \n            &quot;&quot;, &quot;IsPublic&quot;, &quot;IsFamily&quot;, &quot;IsFamilyAndAssembly&quot;);\n   \n        foreach (FieldInfo f in typeof(Example).GetFields(\n            BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public))\n        {\n            Console.WriteLine(&quot;{0,-21}{1,-9}{2,-9}{3,-9}{4,-9}{5,-9}&quot;, \n                f.Name,\n                f.IsPublic,\n                f.IsAssembly,\n                f.IsFamily,\n                f.IsFamilyOrAssembly,\n                f.IsFamilyAndAssembly\n            );\n        }\n    }\n}\n\n/* This code example produces output similar to the following:\n\n                              IsAssembly        IsFamilyOrAssembly\n                     IsPublic          IsFamily          IsFamilyAndAssembly\n\nf_public             True     False    False    False    False\nf_internal           False    True     False    False    False\nf_protected          False    False    True     False    False\nf_protected_public   False    False    False    True     False\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_IsInitOnly\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_IsInitOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsInitOnly</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the field can only be set in the body of the constructor.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsInitOnly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the field has the <code>InitOnly</code> attribute set; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the returned value is <code>true</code>, the field can only be initialized, and is read-only thereafter.  </p>\n<p> To get the <code>IsInitOnly</code> property, first get the class <code>Type</code>. From the <code>Type</code>, get the <code>FieldInfo</code>. From the <code>FieldInfo</code>, get the <code>IsInitOnly</code> property. To access a non-public field, combine <a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">System.Reflection.BindingFlags</a> with either or both of <a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">System.Reflection.BindingFlags</a> and <a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">System.Reflection.BindingFlags</a> in the <code>GetField</code> method.  </p>\n<p> The <code>IsInitOnly</code> property is set when the <a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">System.Reflection.FieldAttributes</a> attribute is set.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example, two fields are created. The second field is read-only, having no set accessor, and <code>IsInitOnly</code> is set to <code>true</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic FieldInfo.IsInitOnly Example#1\">\nusing System;\nusing System.Reflection;\n\n //Make two fields, one public and one read-only.\npublic class Myfielda\n{\n    public string field = &quot;A - public modifiable field&quot;;\n}\npublic class Myfieldb\n{\n    public readonly string field = &quot;B - readonly field&quot;;\n}\n \npublic class Myfieldinfo\n{\n    public static int Main()\n    {\n        Console.WriteLine(&quot;<br>Reflection.FieldInfo&quot;);\n        Myfielda Myfielda = new Myfielda();\n        Myfieldb Myfieldb = new Myfieldb();\n  \n        //Get the Type and FieldInfo.\n        Type MyTypea = typeof(Myfielda);\n        FieldInfo Myfieldinfoa = MyTypea.GetField(&quot;field&quot;,\n            BindingFlags.Public | BindingFlags.Instance);\n        Type MyTypeb = typeof(Myfieldb);\n        FieldInfo Myfieldinfob = MyTypeb.GetField(&quot;field&quot;,\n            BindingFlags.Public | BindingFlags.Instance);\n  \n        //Modify the fields.\n        //Note that Myfieldb is not modified, as it is\n        //read-only (IsInitOnly is True).\n        Myfielda.field = &quot;A - modified&quot;;\n        //Myfieldb.field = &quot;B - modified&quot;;\n  \n        //For the first field, get and display the name, field, and IsInitOnly state.\n        Console.Write(&quot;<br>{0} - {1}, IsInitOnly = {2} &quot;,\n            MyTypea.FullName,\n            Myfieldinfoa.GetValue(Myfielda),\n            Myfieldinfoa.IsInitOnly);\n  \n        //For the second field get and display the name, field, and IsInitOnly state.\n        Console.Write(&quot;<br>{0} - {1}, IsInitOnly = {2} &quot;,\n            MyTypeb.FullName,\n            Myfieldinfob.GetValue(Myfieldb),\n            Myfieldinfob.IsInitOnly);\n  \n        return 0;\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic FieldInfo.IsInitOnly Example#1\">using namespace System;\nusing namespace System::Reflection;\n\n//Make two fields, one public and one read-only.\npublic ref class Myfielda\n{\npublic:\n   String^ field;\n   Myfielda()\n      : field( &quot;A - public field&quot; )\n   {}\n\n\n   property String^ Field \n   {\n      String^ get()\n      {\n         return field;\n      }\n\n      void set( String^ value )\n      {\n         if ( field != value )\n         {\n            field = value;\n         }\n      }\n\n   }\n\n};\n\npublic ref class Myfieldb\n{\nprivate:\n   String^ const field;\n\npublic:\n   Myfieldb()\n      : field( &quot;B - readonly field&quot; )\n   {}\n\n\n   property String^ Field \n   {\n      String^ get()\n      {\n         return field;\n      }\n\n   }\n\n};\n\nint main()\n{\n   Console::WriteLine( &quot;<br>Reflection.FieldInfo&quot; );\n   Myfielda^ myfielda = gcnew Myfielda;\n   Myfieldb^ myfieldb = gcnew Myfieldb;\n   \n   //Get the Type and FieldInfo.\n   Type^ MyTypea = Type::GetType( &quot;Myfielda&quot; );\n   FieldInfo^ Myfieldinfoa = MyTypea-&gt;GetField( &quot;field&quot;, static_cast&lt;BindingFlags&gt;(BindingFlags::Public | BindingFlags::Instance) );\n   Type^ MyTypeb = Type::GetType( &quot;Myfieldb&quot; );\n   FieldInfo^ Myfieldinfob = MyTypeb-&gt;GetField( &quot;field&quot;, static_cast&lt;BindingFlags&gt;(BindingFlags::NonPublic | BindingFlags::Instance) );\n   \n   //Modify the fields.\n   //Note that Myfieldb is not modified, as it is\n   //read-only (IsInitOnly is True).\n   myfielda-&gt;field = &quot;A- modified&quot;;\n   \n   //Myfieldb.field = &quot;B- modified&quot;;\n   //For the first field, get and display the name, field, and IsInitOnly state.\n   Console::Write( &quot;<br>{0} - {1}, IsInitOnly = {2} &quot;, MyTypea-&gt;FullName, Myfieldinfoa-&gt;GetValue( myfielda ), Myfieldinfoa-&gt;IsInitOnly );\n   \n   //For the second field get and display the name, field, and IsInitOnly state.\n   Console::Write( &quot;<br>{0} - {1}, IsInitOnly = {2} &quot;, MyTypeb-&gt;FullName, Myfieldinfob-&gt;GetValue( myfieldb ), Myfieldinfob-&gt;IsInitOnly );\n   return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic FieldInfo.IsInitOnly Example#1\">Imports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\n\n&#39;Make two fields, one public and one read-only.\nPublic Class Myfielda\n    Public field As String = &quot;A - public modifiable field&quot;\nEnd Class &#39;Myfielda\n\nPublic Class Myfieldb\n    Public ReadOnly field As String = &quot;B - readonly field&quot;\nEnd Class &#39;Myfieldb\n\nPublic Class Myfieldinfo\n    Public Shared Function Main() As Integer\n        Console.WriteLine(&quot;Reflection.FieldInfo&quot;)\n        Console.WriteLine()\n        Dim Myfielda As New Myfielda()\n        Dim Myfieldb As New Myfieldb()\n\n        &#39;Get the Type and FieldInfo.\n        Dim MyTypea As Type = GetType(Myfielda)\n        Dim Myfieldinfoa As FieldInfo = MyTypea.GetField(&quot;field&quot;, _\n            BindingFlags.Public Or BindingFlags.Instance)\n        Dim MyTypeb As Type = GetType(Myfieldb)\n        Dim Myfieldinfob As FieldInfo = MyTypeb.GetField(&quot;field&quot;, _\n            BindingFlags.Public Or BindingFlags.Instance)\n\n        &#39;Modify the fields.\n        &#39;Note that Myfieldb is not modified, as it is\n        &#39;read-only (IsInitOnly is True).\n        Myfielda.field = &quot;A - modified&quot;\n        &#39;For the first field, get and display the name, field, and IsInitOnly state.\n        Console.WriteLine(&quot;{0} - {1}, IsInitOnly = {2} &quot;, MyTypea.FullName, _\n            Myfieldinfoa.GetValue(Myfielda), Myfieldinfoa.IsInitOnly)\n        &#39;For the second field get and display the name, field, and IsInitOnly state.\n        Console.WriteLine(&quot;{0} - {1}, IsInitOnly = {2} &quot;, MyTypeb.FullName, _\n            Myfieldinfob.GetValue(Myfieldb), Myfieldinfob.IsInitOnly)\n\n        Return 0\n    End Function &#39;Main\nEnd Class &#39;Myfieldinfo\n</code></pre><p> This code produces the following output:  </p>\n<p> Reflection.FieldInfo  </p>\n<p> Myfielda - A- modified, IsInitOnly = False  </p>\n<p> Myfieldb - B readonly field, IsInitOnly = True</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_IsLiteral\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_IsLiteral_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsLiteral</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the value is written at compile time and cannot be changed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsLiteral { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the field has the <code>Literal</code> attribute set; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>IsLiteral</code> property is set when the <code>FieldAttributes.Literal</code> attribute is set. If this attribute is set, the field cannot be changed and is constant.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_IsNotSerialized\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_IsNotSerialized_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsNotSerialized</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether this field has the <code>NotSerialized</code> attribute.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsNotSerialized { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the field has the <code>NotSerialized</code> attribute set; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>IsNotSerialized</code> property returns <code>true</code> when the field is marked with the <code>FieldAttributes.NotSerialized</code> flag. When this flag is set on a field, it indicates that the field does not have to be serialized when the type is remoted.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example gets the field information of the fields of MyClass, determines if the fields can be serialized, and displays the results.  </p>\n<pre><code class=\"lang-vb\" name=\"FieldInfo_IsNotSerialized#1\">\nImports System\nImports System.Reflection\nImports System.Runtime.Serialization\nImports Microsoft.VisualBasic\n\n&lt;Serializable()&gt; _\nPublic Class [MyClass]\n    Public myShort As Short\n\n    &#39; The following field will not be serialized.  \n    &lt;NonSerialized()&gt; Public myInt As Integer\nEnd Class &#39;[MyClass]\n\nPublic Class Type_IsNotSerializable\n\n    Public Shared Sub Main()\n        &#39; Get the type of MyClass.\n        Dim myType As Type = GetType([MyClass])\n\n        &#39; Get the fields of MyClass.\n        Dim myFields As FieldInfo() = myType.GetFields((BindingFlags.Public Or BindingFlags.NonPublic Or BindingFlags.Instance Or BindingFlags.Static))\n        Console.WriteLine(ControlChars.Cr &amp; &quot;Displaying whether or not the field is serializable.&quot; &amp; ControlChars.Cr)\n        Console.WriteLine()\n        &#39; Displaying whether or not the field is serializable.\n        Dim i As Integer\n        For i = 0 To myFields.Length - 1\n            If myFields(i).IsNotSerialized Then\n                Console.WriteLine(&quot;The {0} field is not serializable.&quot;, myFields(i))\n            Else\n                Console.WriteLine(&quot;The {0} field is serializable.&quot;, myFields(i))\n            End If\n        Next i\n    End Sub &#39;Main\nEnd Class &#39;Type_IsNotSerializable\n</code></pre><pre><code class=\"lang-cs\" name=\"FieldInfo_IsNotSerialized#1\">using System;\nusing System.Reflection;\nusing System.Runtime.Serialization;\n\npublic class MyClass \n{\n    public short myShort;\n\n    // The following field will not be serialized.  \n    [NonSerialized()]\n    public int myInt;\n}\npublic class Type_IsNotSerializable\n{\n    public static void Main()\n    {  \n        // Get the type of MyClass.\n        Type myType = typeof(MyClass);\n \n        // Get the fields of MyClass.\n        FieldInfo[] myFields = myType.GetFields(BindingFlags.Public |\n            BindingFlags.NonPublic |\n            BindingFlags.Instance |\n            BindingFlags.Static);\n        Console.WriteLine(&quot;<br>Displaying whether or not the field is serializable.<br>&quot;);\n      \n        // Display whether or not the field is serializable.\n        for(int i = 0; i &lt; myFields.Length; i++)\n            if(myFields[i].IsNotSerialized)\n                Console.WriteLine(&quot;The {0} field is not serializable.&quot;, myFields[i]);\n            else\n                Console.WriteLine(&quot;The {0} field is not serializable.&quot;, myFields[i]);\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"FieldInfo_IsNotSerialized#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Runtime::Serialization;\n\npublic ref class MyClass\n{\npublic:\n   short myShort;\n\n   // The following field will not be serialized.  \n\n   [NonSerialized]\n   int myInt;\n};\n\nint main()\n{\n   // Get the type of MyClass.\n   Type^ myType = MyClass::typeid;\n\n   // Get the fields of MyClass.\n   array&lt;FieldInfo^&gt;^myFields = myType-&gt;GetFields( static_cast&lt;BindingFlags&gt;(BindingFlags::Public | BindingFlags::NonPublic | BindingFlags::Instance | BindingFlags::Static) );\n   Console::WriteLine( &quot;<br>Displaying whether or not the field is serializable.<br>&quot; );\n\n   // Display whether or not the field is serializable.\n   for ( int i = 0; i &lt; myFields-&gt;Length; i++ )\n      if ( myFields[ i ]-&gt;IsNotSerialized )\n            Console::WriteLine( &quot;The {0} field is not serializable.&quot;, myFields[ i ] );\n      else\n            Console::WriteLine( &quot;The {0} field is serializable.&quot;, myFields[ i ] );\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_IsPinvokeImpl\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_IsPinvokeImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsPinvokeImpl</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the corresponding <code>PinvokeImpl</code> attribute is set in <a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">FieldAttributes</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsPinvokeImpl { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <code>PinvokeImpl</code> attribute is set in <a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">FieldAttributes</a>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a class and displays the name, field and IsPinvokeImpl property value of the field.  </p>\n<pre><code class=\"lang-cs\" name=\"FieldInfo_IsPInvokeImpl#1\">using System;\nusing System.Reflection;\n\npublic class Fieldinfo_IsPinvoke\n{\n    public string myField = &quot;A public field&quot;;\n   \n    public static void Main()\n    {\n        Fieldinfo_IsPinvoke myObject = new Fieldinfo_IsPinvoke();\n      \n        // Get the Type and FieldInfo.\n        Type myType1 = typeof(Fieldinfo_IsPinvoke);\n        FieldInfo myFieldInfo = myType1.GetField(&quot;myField&quot;,\n            BindingFlags.Public|BindingFlags.Instance);\n\n        // Display the name, field and the PInvokeImpl attribute for the field.\n        Console.Write(&quot;<br> Name of class: {0}&quot;, myType1.FullName);\n        Console.Write(&quot;<br> Value of field: {0}&quot;, myFieldInfo.GetValue(myObject));\n        Console.Write(&quot;<br> IsPinvokeImpl: {0}&quot;, \n            myFieldInfo.IsPinvokeImpl );\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"FieldInfo_IsPInvokeImpl#1\">using namespace System;\nusing namespace System::Reflection;\n\npublic ref class Fieldinfo_IsPinvoke\n{\npublic:\n   String^ myField;\n   Fieldinfo_IsPinvoke()\n   {\n      myField = &quot;A public field&quot;;\n   }\n};\n\nint main()\n{\n   Fieldinfo_IsPinvoke^ myObject = gcnew Fieldinfo_IsPinvoke;\n\n   // Get the Type and FieldInfo.\n   Type^ myType1 = Fieldinfo_IsPinvoke::typeid;\n   FieldInfo^ myFieldInfo = myType1-&gt;GetField( &quot;myField&quot;, static_cast&lt;BindingFlags&gt;(BindingFlags::Public | BindingFlags::Instance) );\n\n   // Display the name, field and the PInvokeImpl attribute for the field.\n   Console::Write( &quot;<br> Name of class: {0}&quot;, myType1-&gt;FullName );\n   Console::Write( &quot;<br> Value of field: {0}&quot;, myFieldInfo-&gt;GetValue( myObject ) );\n   Console::Write( &quot;<br> IsPinvokeImpl: {0}&quot;, myFieldInfo-&gt;IsPinvokeImpl );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"FieldInfo_IsPInvokeImpl#1\">Imports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\nPublic Class Fieldinfo_IsPinvoke\n    Public myField As String = &quot;A public field&quot;\n\n    Public Shared Sub Main()\n        Dim myObject As New Fieldinfo_IsPinvoke()\n\n        &#39; Get the Type and FieldInfo.\n        Dim myType1 As Type = GetType(Fieldinfo_IsPinvoke)\n        Dim myFieldInfo As FieldInfo = myType1.GetField(&quot;myField&quot;, _\n           BindingFlags.Public Or BindingFlags.Instance)\n\n        &#39; Display the name, field and the PInvokeImpl attribute for the field.\n        Console.Write(ControlChars.NewLine &amp; &quot;Name of class: {0}&quot;, _\n                                         myType1.FullName)\n        Console.Write(ControlChars.NewLine &amp; &quot;Value of field: {0}&quot;, _\n                                         myFieldInfo.GetValue(myObject))\n        Console.Write(ControlChars.NewLine &amp; &quot;IsPinvokeImpl: {0}&quot;, _\n                                         myFieldInfo.IsPinvokeImpl)\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_IsPrivate\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_IsPrivate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsPrivate</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the field is private.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsPrivate { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the field is private; otherwise; <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Private fields are accessible only from member functions.  </p>\n<p> The <code>IsPrivate</code> property is set when the <code>FieldAttributes.Private</code> attribute is set.  </p>\n<p> To get the <code>IsPrivate</code> property, first get the class <code>Type</code>. From the <code>Type</code>, get the <code>FieldInfo</code>. From the <code>FieldInfo</code>, get the <code>IsPrivate</code> property. To access a non-public field, set the <code>BindingFlags</code> to <code>NonPublic</code>, and either <code>Static</code> or <code>Instance</code> in the <code>GetField</code> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example returns a value indicating whether or not the field of the class is private.  </p>\n<pre><code class=\"lang-cs\" name=\"FieldInfo_IsPrivate#1\">using System;\nusing System.Reflection;\n\nclass MyClass\n{\n    private string myField;\n    public string[] myArray = new string[] {&quot;New York&quot;, &quot;New Jersey&quot;};\n    MyClass()\n    {\n        myField = &quot;Microsoft&quot;;\n    }\n    string GetField\n    {\n        get\n        {\n            return myField;\n        }\n    }\n}\n\nclass FieldInfo_IsPrivate\n{\n    public static void Main()\n    {\n        try\n        {\n            // Gets the type of MyClass.\n            Type myType = typeof(MyClass);\n\n            // Gets the field information of MyClass.\n            FieldInfo[] myFields = myType.GetFields(BindingFlags.NonPublic\n                |BindingFlags.Public\n                |BindingFlags.Instance);\n      \n            Console.WriteLine(&quot;<br>Displaying whether the fields of {0} are private or not:<br>&quot;, myType);\n            for(int i = 0; i &lt; myFields.Length; i++)\n            {\n                // Check whether the field is private or not. \n                if(myFields[i].IsPrivate)\n                    Console.WriteLine(&quot;{0} is a private field.&quot;, myFields[i].Name);\n                else\n                    Console.WriteLine(&quot;{0} is not a private field.&quot;, myFields[i].Name);\n            }\n        }\n        catch(Exception e)\n        {\n            Console.WriteLine(&quot;Exception : {0} &quot; , e.Message);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"FieldInfo_IsPrivate#1\">using namespace System;\nusing namespace System::Reflection;\n\nref class MyClass\n{\nprivate:\n   String^ myField;\n\npublic:\n   array&lt;String^&gt;^myArray;\n   MyClass()\n   {\n      myField = &quot;Microsoft&quot;;\n      array&lt;String^&gt;^s = {&quot;New York&quot;,&quot;New Jersey&quot;};\n      myArray = s;\n   }\n\n   property String^ GetField \n   {\n      String^ get()\n      {\n         return myField;\n      }\n   }\n};\n\nint main()\n{\n   try\n   {\n      // Gets the type of MyClass.\n      Type^ myType = MyClass::typeid;\n\n      // Gets the field information of MyClass.\n      array&lt;FieldInfo^&gt;^myFields = myType-&gt;GetFields( static_cast&lt;BindingFlags&gt;(BindingFlags::NonPublic | BindingFlags::Public | BindingFlags::Instance) );\n      Console::WriteLine( &quot;<br>Displaying whether the fields of {0} are private or not:<br>&quot;, myType );\n      for ( int i = 0; i &lt; myFields-&gt;Length; i++ )\n      {\n         // Check whether the field is private or not. \n         if ( myFields[ i ]-&gt;IsPrivate )\n                  Console::WriteLine( &quot; {0} is a private field.&quot;, myFields[ i ]-&gt;Name );\n         else\n                  Console::WriteLine( &quot; {0} is not a private field.&quot;, myFields[ i ]-&gt;Name );\n      }\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;Exception : {0} &quot;, e-&gt;Message );\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"FieldInfo_IsPrivate#1\">\nImports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\nClass [MyClass]\n    Private myField As String\n    Public myArray() As String = {&quot;New York&quot;, &quot;New Jersey&quot;}\n\n    Sub New()\n        myField = &quot;Microsoft&quot;\n    End Sub &#39;New\n\n    ReadOnly Property GetField() As String\n        Get\n            Return myField\n        End Get\n    End Property\nEnd Class &#39;[MyClass]\n\n\nClass FieldInfo_IsPrivate\n\n    Public Shared Sub Main()\n        Try\n            &#39; Gets the type of MyClass.\n            Dim myType As Type = GetType([MyClass])\n\n            &#39; Gets the field information of MyClass.\n            Dim myFields As FieldInfo() = myType.GetFields((BindingFlags.NonPublic Or BindingFlags.Public Or BindingFlags.Instance))\n\n            Console.WriteLine(ControlChars.Cr &amp; &quot;Displaying whether the fields of {0} are private or not:&quot; &amp; ControlChars.Cr, myType)\n            Console.WriteLine() \n            Dim i As Integer\n            For i = 0 To myFields.Length - 1\n                &#39; Check whether the field is private or not. \n                If myFields(i).IsPrivate Then\n                    Console.WriteLine(&quot;{0} is a private field.&quot;, myFields(i).Name)\n                Else\n                    Console.WriteLine(&quot;{0} is not a private field.&quot;, myFields(i).Name)\n                End If\n            Next i\n        Catch e As Exception\n            Console.WriteLine(&quot;Exception : {0} &quot;, e.Message.ToString())\n        End Try\n    End Sub &#39;Main\nEnd Class &#39;FieldInfo_IsPrivate\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_IsPublic\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_IsPublic_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsPublic</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the field is public.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsPublic { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this field is public; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Public fields are accessible everywhere their corresponding classes are visible.  </p>\n<p> The <code>IsPublic</code> property is set when the <code>FieldAttributes.Public</code> attribute is set.  </p>\n<p> To get the <code>IsPublic</code> property, first get the class <code>Type</code>. From the <code>Type</code>, get the <code>FieldInfo</code>. From the <code>FieldInfo</code>, get the <code>IsPublic</code> property. If the field is other than public, it is protected and cannot be readily accessed. To access a nonpublic field, set the <code>BindingFlags</code> to <code>NonPublic</code>, specify either <code>BindingFlags.Instance</code> or <code>BindingFlags.Static</code>, and use this for the <code>GetField</code> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example returns a value indicating whether or not the field of the class is public or private.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic FieldInfo.IsPublic Example#1\">using namespace System;\nusing namespace System::Reflection;\n\n// Make two fields.\n// private\npublic ref class Myfielda\n{\nprivate:\n   String^ SomeField;\n\npublic:\n   Myfielda()\n      : SomeField( &quot;private field&quot; )\n   {}\n\n\n   property String^ Field \n   {\n      String^ get()\n      {\n         return SomeField;\n      }\n\n   }\n\n};\n\n\n// public\npublic ref class Myfieldb\n{\npublic:\n   String^ SomeField;\n   Myfieldb()\n      : SomeField( &quot;public field&quot; )\n   {}\n\n\n   property String^ Field \n   {\n      String^ get()\n      {\n         return SomeField;\n      }\n\n   }\n\n};\n\nint main()\n{\n   Console::WriteLine( &quot;<br>Reflection.FieldInfo&quot; );\n   Myfielda^ myfielda = gcnew Myfielda;\n   Myfieldb^ myfieldb = gcnew Myfieldb;\n   \n   // Get the Type and FieldInfo.\n   Type^ MyTypea = Type::GetType( &quot;Myfielda&quot; );\n   FieldInfo^ Myfieldinfoa = MyTypea-&gt;GetField( &quot;SomeField&quot;, static_cast&lt;BindingFlags&gt;(BindingFlags::NonPublic | BindingFlags::Instance) );\n   Type^ MyTypeb = Type::GetType( &quot;Myfieldb&quot; );\n   FieldInfo^ Myfieldinfob = MyTypeb-&gt;GetField( &quot;SomeField&quot; );\n   \n   // Get and display the IsPublic and IsPrivate property values.\n   Console::Write( &quot;<br>{0}.&quot;, MyTypea-&gt;FullName );\n   Console::Write( &quot;{0} - &quot;, Myfieldinfoa-&gt;Name );\n   Console::Write( &quot;{0}&quot;, myfielda-&gt;Field );\n   Console::Write( &quot;<br>   IsPublic = {0}&quot;, Myfieldinfoa-&gt;IsPublic );\n   Console::Write( &quot;<br>   IsPrivate = {0}&quot;, Myfieldinfoa-&gt;IsPrivate );\n   Console::Write( &quot;<br>{0}.&quot;, MyTypeb-&gt;FullName );\n   Console::Write( &quot;{0} - &quot;, Myfieldinfob-&gt;Name );\n   Console::Write( &quot;{0};&quot;, myfieldb-&gt;Field );\n   Console::Write( &quot;<br>   IsPublic = {0}&quot;, Myfieldinfob-&gt;IsPublic );\n   Console::Write( &quot;<br>   IsPrivate = {0}&quot;, Myfieldinfob-&gt;IsPrivate );\n   return 0;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic FieldInfo.IsPublic Example#1\">using System;\nusing System.Reflection;\n\n\n // Make two fields.\npublic\n    class Myfielda // private\n{\n    private string SomeField = &quot;private field&quot;;\n    public string Field\n    {\n        get{return SomeField;}\n    }\n}\n\npublic\n    class Myfieldb // public\n{\n    public string SomeField = &quot;public field&quot;;\n}\n \npublic\n    class Myfieldinfo\n{\n    public static int Main()\n    {\n        Console.WriteLine(&quot;<br>Reflection.FieldInfo&quot;);\n        Myfielda Myfielda = new Myfielda();\n        Myfieldb Myfieldb = new Myfieldb();\n  \n        // Get the Type and FieldInfo.\n        Type MyTypea = typeof(Myfielda);\n        FieldInfo Myfieldinfoa = MyTypea.GetField(&quot;SomeField&quot;, \n            BindingFlags.NonPublic|BindingFlags.Instance);\n        Type MyTypeb = typeof(Myfieldb);\n        FieldInfo Myfieldinfob = MyTypeb.GetField(&quot;SomeField&quot;);\n  \n        // Get and display the IsPublic and IsPrivate property values.\n        Console.Write(&quot;<br>{0}.&quot;, MyTypea.FullName);\n        Console.Write(&quot;{0} - &quot;, Myfieldinfoa.Name);\n        Console.Write(&quot;{0}&quot;, Myfielda.Field);\n        Console.Write(&quot;<br>   IsPublic = {0}&quot;, Myfieldinfoa.IsPublic);\n        Console.Write(&quot;<br>   IsPrivate = {0}&quot;, Myfieldinfoa.IsPrivate);\n  \n        Console.Write(&quot;<br>{0}.&quot;, MyTypeb.FullName);\n        Console.Write(&quot;{0} - &quot;, Myfieldinfob.Name);\n        Console.Write(&quot;{0};&quot;, Myfieldb.SomeField);\n        Console.Write(&quot;<br>   IsPublic = {0}&quot;, Myfieldinfob.IsPublic);\n        Console.Write(&quot;<br>   IsPrivate = {0}&quot;, Myfieldinfob.IsPrivate);\n  \n        return 0;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic FieldInfo.IsPublic Example#1\">Imports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\n\n&#39; Make two fields.\nPublic Class Myfielda\n    &#39; Make a private field.\n    Private SomeField As String = &quot;private field&quot;\n\n    Public ReadOnly Property Field() As String\n        Get\n            Return SomeField\n        End Get\n    End Property\nEnd Class &#39;Myfielda\n\nPublic Class Myfieldb\n    &#39; Make a public field.\n    Public SomeField As String = &quot;public field&quot;\nEnd Class &#39;Myfieldb\n\nPublic Class Myfieldinfo\n\n    Public Shared Function Main() As Integer\n        Console.WriteLine(&quot;Reflection.FieldInfo&quot;)\n        Console.WriteLine()\n        Dim Myfielda As New Myfielda()\n        Dim Myfieldb As New Myfieldb()\n\n        &#39; Get the Type and FieldInfo.\n        Dim MyTypea As Type = GetType(Myfielda)\n        Dim Myfieldinfoa As FieldInfo = MyTypea.GetField(&quot;SomeField&quot;, _\n            BindingFlags.NonPublic Or BindingFlags.Instance)\n        Dim MyTypeb As Type = GetType(Myfieldb)\n        Dim Myfieldinfob As FieldInfo = MyTypeb.GetField(&quot;SomeField&quot;)\n\n        &#39; Get and display the IsPublic and IsPrivate property values.\n        Console.WriteLine(&quot;{0}.{1} - {2}&quot;, MyTypea.FullName, Myfieldinfoa.Name, _\n            Myfielda.Field)\n        Console.WriteLine(&quot;   IsPublic = {0}&quot;, Myfieldinfoa.IsPublic)\n        Console.WriteLine(&quot;   IsPrivate = {0}&quot;, Myfieldinfoa.IsPrivate)\n        Console.WriteLine()\n        Console.WriteLine(&quot;{0}.{1} - {2}&quot;, MyTypeb.FullName, Myfieldinfob.Name, _\n            Myfieldb.SomeField)\n        Console.WriteLine(&quot;   IsPublic = {0}&quot;, Myfieldinfob.IsPublic)\n        Console.WriteLine(&quot;   IsPrivate = {0}&quot;, Myfieldinfob.IsPrivate)\n\n        Return 0\n    End Function &#39;Main\nEnd Class &#39;Myfieldinfo\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_IsSecurityCritical\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_IsSecurityCritical_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSecurityCritical</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the current field is security-critical or security-safe-critical at the current trust level.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsSecurityCritical { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current field is security-critical or security-safe-critical at the current trust level; <code>false</code> if it is transparent.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The IsSecurityCritical, <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_IsSecuritySafeCritical_\" data-linktype=\"relative-path\">IsSecuritySafeCritical</a>, and <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_IsSecurityTransparent_\" data-linktype=\"relative-path\">IsSecurityTransparent</a> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  </p>\n<table>\n<thead>\n<tr>\n<th>Security level</th>\n<th>IsSecurityCritical</th>\n<th>IsSecuritySafeCritical</th>\n<th>IsSecurityTransparent</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Critical</td>\n<td><code>true</code></td>\n<td><code>false</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>Safe critical</td>\n<td><code>true</code></td>\n<td><code>true</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>Transparent</td>\n<td><code>false</code></td>\n<td><code>false</code></td>\n<td><code>true</code></td>\n</tr>\n</tbody>\n</table>\n<p> Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime&#39;s rules.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_IsFullyTrusted_\" data-linktype=\"relative-path\">IsFullyTrusted</a> and <a class=\"xref\" href=\"system.appdomain#System_AppDomain_IsFullyTrusted_\" data-linktype=\"relative-path\">IsFullyTrusted</a> properties.  </p>\n</div>\n<p> For more information about reflection and transparency, see <a href=\"../Topic/Security%20Considerations%20for%20Reflection.md\" data-linktype=\"relative-path\">Security Considerations for Reflection</a>. For information about transparency, see <a href=\"../Topic/Security%20Changes%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Security Changes</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_IsSecuritySafeCritical\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_IsSecuritySafeCritical_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSecuritySafeCritical</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the current field is security-safe-critical at the current trust level.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsSecuritySafeCritical { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current field is security-safe-critical at the current trust level; <code>false</code> if it is security-critical or transparent.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_IsSecurityCritical_\" data-linktype=\"relative-path\">IsSecurityCritical</a>, IsSecuritySafeCritical, and <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_IsSecurityTransparent_\" data-linktype=\"relative-path\">IsSecurityTransparent</a> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  </p>\n<table>\n<thead>\n<tr>\n<th>Security level</th>\n<th>IsSecurityCritical</th>\n<th>IsSecuritySafeCritical</th>\n<th>IsSecurityTransparent</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Critical</td>\n<td><code>true</code></td>\n<td><code>false</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>Safe critical</td>\n<td><code>true</code></td>\n<td><code>true</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>Transparent</td>\n<td><code>false</code></td>\n<td><code>false</code></td>\n<td><code>true</code></td>\n</tr>\n</tbody>\n</table>\n<p> Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime&#39;s rules.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_IsFullyTrusted_\" data-linktype=\"relative-path\">IsFullyTrusted</a> and <a class=\"xref\" href=\"system.appdomain#System_AppDomain_IsFullyTrusted_\" data-linktype=\"relative-path\">IsFullyTrusted</a> properties.  </p>\n</div>\n<p> For more information about reflection and transparency, see <a href=\"../Topic/Security%20Considerations%20for%20Reflection.md\" data-linktype=\"relative-path\">Security Considerations for Reflection</a>. For information about transparency, see <a href=\"../Topic/Security%20Changes%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Security Changes</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_IsSecurityTransparent\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_IsSecurityTransparent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSecurityTransparent</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the current field is transparent at the current trust level.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsSecurityTransparent { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the field is security-transparent at the current trust level; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_IsSecurityCritical_\" data-linktype=\"relative-path\">IsSecurityCritical</a>, <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_IsSecuritySafeCritical_\" data-linktype=\"relative-path\">IsSecuritySafeCritical</a>, and IsSecurityTransparent properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  </p>\n<table>\n<thead>\n<tr>\n<th>Security level</th>\n<th>IsSecurityCritical</th>\n<th>IsSecuritySafeCritical</th>\n<th>IsSecurityTransparent</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Critical</td>\n<td><code>true</code></td>\n<td><code>false</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>Safe critical</td>\n<td><code>true</code></td>\n<td><code>true</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>Transparent</td>\n<td><code>false</code></td>\n<td><code>false</code></td>\n<td><code>true</code></td>\n</tr>\n</tbody>\n</table>\n<p> Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime&#39;s rules.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_IsFullyTrusted_\" data-linktype=\"relative-path\">IsFullyTrusted</a> and <a class=\"xref\" href=\"system.appdomain#System_AppDomain_IsFullyTrusted_\" data-linktype=\"relative-path\">IsFullyTrusted</a> properties.  </p>\n</div>\n<p> For more information about reflection and transparency, see <a href=\"../Topic/Security%20Considerations%20for%20Reflection.md\" data-linktype=\"relative-path\">Security Considerations for Reflection</a>. For information about transparency, see <a href=\"../Topic/Security%20Changes%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Security Changes</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_IsSpecialName\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_IsSpecialName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSpecialName</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the corresponding <code>SpecialName</code> attribute is set in the <a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">FieldAttributes</a> enumerator.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsSpecialName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <code>SpecialName</code> attribute is set in <a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">FieldAttributes</a>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of names that might require special treatment by some compilers.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example returns a value indicating whether or not the fields in the class contain a SpecialName attribute.  </p>\n<pre><code class=\"lang-cs\" name=\"FieldInfo_IsSpecialName#1\">using System;\nusing System.Reflection;\nusing System.ComponentModel.Design;\n\n\nclass FieldInfo_IsSpecialName\n{\n    public static void Main()\n    {     \n        try\n        {\n            // Get the type handle of a specified class.\n            Type myType = typeof(ViewTechnology);\n         \n            // Get the fields of the specified class.\n            FieldInfo[] myField = myType.GetFields();\n\n            Console.WriteLine(&quot;<br>Displaying fields that have SpecialName attributes:<br>&quot;);\n            for(int i = 0; i &lt; myField.Length; i++)\n            {\n                // Determine whether or not each field is a special name.\n                if(myField[i].IsSpecialName)\n                {\n                    Console.WriteLine(&quot;The field {0} has a SpecialName attribute.&quot;,\n                        myField[i].Name);\n                }\n            }\n        }\n        catch(Exception e)\n        {\n            Console.WriteLine(&quot;Exception : {0} &quot; , e.Message);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"FieldInfo_IsSpecialName#1\">Imports System\nImports System.Reflection\nImports System.ComponentModel.Design\nImports Microsoft.VisualBasic\n\nClass FieldInfo_IsSpecialName\n\n    Public Shared Sub Main()\n        Try\n            &#39; Get the type handle of a specified class.\n            Dim myType As Type = GetType(ViewTechnology)\n\n            &#39; Get the fields of a specified class.\n            Dim myField As FieldInfo() = myType.GetFields()\n\n            Console.WriteLine(ControlChars.Cr + &quot;Displaying fields that have SpecialName attributes:&quot; + ControlChars.Cr)\n            Dim i As Integer\n            For i = 0 To myField.Length - 1\n                &#39; Determine whether or not each field is a special name.\n                If myField(i).IsSpecialName Then\n                    Console.WriteLine(&quot;The field {0} has a SpecialName attribute.&quot;, myField(i).Name)\n                End If\n            Next i\n        Catch e As Exception\n            Console.WriteLine(&quot;Exception : {0} &quot;, e.Message.ToString())\n        End Try\n    End Sub &#39;Main\nEnd Class &#39;FieldInfo_IsSpecialName\n</code></pre><pre><code class=\"lang-cpp\" name=\"FieldInfo_IsSpecialName#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Reflection;\nusing namespace System::ComponentModel::Design;\n\nint main()\n{\n   try\n   {\n      // Get the type handle of a specified class.\n      Type^ myType = ViewTechnology::typeid;\n\n      // Get the fields of the specified class.\n      array&lt;FieldInfo^&gt;^myField = myType-&gt;GetFields();\n      Console::WriteLine( &quot;<br>Displaying fields that have SpecialName attributes:<br>&quot; );\n      for ( int i = 0; i &lt; myField-&gt;Length; i++ )\n      {\n         // Determine whether or not each field is a special name.\n         if ( myField[ i ]-&gt;IsSpecialName )\n         {\n            Console::WriteLine( &quot;The field {0} has a SpecialName attribute.&quot;, myField[ i ]-&gt;Name );\n         }\n      }\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;Exception : {0} &quot;, e-&gt;Message );\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_IsStatic\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_IsStatic_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsStatic</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the field is static.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsStatic { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this field is static; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When a field is static, one copy of the field is shared by all instances of the type.  </p>\n<p> The <code>IsStatic</code> property is set when the <code>FieldAttributes.Static</code> attribute is set.  </p>\n<p> To get the <code>IsStatic</code> property, first get the class <code>Type</code>. From the <code>Type</code>, get the <code>FieldInfo</code>. From the <code>FieldInfo</code>, get the <code>IsStatic</code> property. To access a non-public field, set the <code>BindingFlags</code> to <code>NonPublic</code> in the <code>GetField</code> method and set the accessibility to <code>Instance</code> or <code>Static</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines whether the specified field is static and displays the result.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic FieldInfo.IsStatic Example#1\">using namespace System;\nusing namespace System::Reflection;\n\n// Make two fields.\npublic ref class Myfielda\n{\nprivate:\n   String^ field;\n\npublic:\n   Myfielda()\n      : field( &quot;A private field&quot; )\n   {}\n\n\n   property String^ Field \n   {\n      String^ get()\n      {\n         return field;\n      }\n\n      void set( String^ value )\n      {\n         if ( field != value )\n         {\n            field = value;\n         }\n      }\n\n   }\n\n};\n\npublic ref class Myfieldb\n{\nprivate:\n   static String^ field = &quot;B static field&quot;;\n\npublic:\n\n   property String^ Field \n   {\n      String^ get()\n      {\n         return field;\n      }\n\n      void set( String^ value )\n      {\n         if ( field != value )\n         {\n            field = value;\n         }\n      }\n\n   }\n\n};\n\nint main()\n{\n   Console::WriteLine( &quot;<br>Reflection.FieldInfo&quot; );\n   Myfielda^ myfielda = gcnew Myfielda;\n   Myfieldb^ myfieldb = gcnew Myfieldb;\n   \n   // Get the Type and FieldInfo.\n   Type^ MyTypea = Type::GetType( &quot;Myfielda&quot; );\n   FieldInfo^ Myfieldinfoa = MyTypea-&gt;GetField( &quot;field&quot;, static_cast&lt;BindingFlags&gt;(BindingFlags::NonPublic | BindingFlags::Instance) );\n   Type^ MyTypeb = Type::GetType( &quot;Myfieldb&quot; );\n   FieldInfo^ Myfieldinfob = MyTypeb-&gt;GetField( &quot;field&quot;, static_cast&lt;BindingFlags&gt;(BindingFlags::NonPublic | BindingFlags::Static) );\n   \n   // For the first field, get and display the name, field, and IsStatic property value.\n   Console::Write( &quot;<br>{0} - &quot;, MyTypea-&gt;FullName );\n   Console::Write( &quot;{0}; &quot;, Myfieldinfoa-&gt;GetValue( myfielda ) );\n   Console::Write( &quot;IsStatic - {0}&quot;, Myfieldinfoa-&gt;IsStatic );\n   \n   // For the second field get and display the name, field, and IsStatic property value.\n   Console::Write( &quot;<br>{0} - &quot;, MyTypeb-&gt;FullName );\n   Console::Write( &quot;{0}; &quot;, Myfieldinfob-&gt;GetValue( myfieldb ) );\n   Console::Write( &quot;IsStatic - {0}&quot;, Myfieldinfob-&gt;IsStatic );\n   return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic FieldInfo.IsStatic Example#1\">Imports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\n&#39; Make two fields.\nPublic Class Myfielda\n    Private m_field As String = &quot;A private field&quot;\n\n    Public Property Field() As String\n        Get\n            Return m_field\n        End Get\n        Set(ByVal Value As String)\n            If m_field &lt;&gt; value Then\n                m_field = value\n            End If\n        End Set\n    End Property\nEnd Class\n\nPublic Class Myfieldb\n    Private Shared m_field As String = &quot;B private static field&quot;\n\n    Public Property Field() As String\n        Get\n            Return m_field\n        End Get\n        Set(ByVal Value As String)\n            If m_field &lt;&gt; value Then\n                m_field = value\n            End If\n        End Set\n    End Property\nEnd Class\n\nPublic Class Myfieldinfo\n\n    Public Shared Sub Main()\n        Console.WriteLine()\n        Console.WriteLine(&quot;Reflection.FieldInfo&quot;)\n        Console.WriteLine()\n        Dim Myfielda As New Myfielda()\n        Dim Myfieldb As New Myfieldb()\n\n        &#39; Get the Type and FieldInfo.\n        Dim MyTypea As Type = GetType(Myfielda)\n        Dim Myfieldinfoa As FieldInfo = _\n           MyTypea.GetField(&quot;m_field&quot;, BindingFlags.NonPublic Or BindingFlags.Instance)\n        Dim MyTypeb As Type = GetType(Myfieldb)\n        Dim Myfieldinfob As FieldInfo = _\n           MyTypeb.GetField(&quot;m_field&quot;, BindingFlags.NonPublic Or BindingFlags.Static)\n\n        &#39; For the first field, get and display the name, field, and IsStatic property value.\n        Console.WriteLine(&quot;{0} - {1}; IsStatic - {2}&quot;, MyTypea.FullName, Myfieldinfoa.GetValue(Myfielda), Myfieldinfoa.IsStatic)\n\n        &#39; For the second field, get and display the name, field, and IsStatic property value.\n        Console.WriteLine(&quot;{0} - {1}; IsStatic - {2}&quot;, MyTypeb.FullName, Myfieldinfob.GetValue(Myfieldb), Myfieldinfob.IsStatic)\n\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic FieldInfo.IsStatic Example#1\">using System;\nusing System.Reflection;\n\n // Make two fields.\npublic class Myfielda\n{\n    private string field = &quot;A private field&quot;;\n    public string Field\n    {\n        get{return field;}\n        set{if(field!=value){field=value;}}\n    }\n}\npublic class Myfieldb\n{\n    static string field = &quot;B private static field&quot;;\n    public string Field \n    {\n        get{return field;}\n        set{if(field!=value){field=value;}}\n    }\n}\n  \npublic class Myfieldinfo\n{\n    public static int Main()\n    {\n        Console.WriteLine(&quot;<br>Reflection.FieldInfo&quot;);\n        Myfielda Myfielda = new Myfielda();\n        Myfieldb Myfieldb = new Myfieldb();\n  \n        // Get the Type and FieldInfo.\n        Type MyTypea = typeof(Myfielda);\n        FieldInfo Myfieldinfoa = MyTypea.GetField(&quot;field&quot;, BindingFlags.NonPublic|BindingFlags.Instance);\n        Type MyTypeb = typeof(Myfieldb);\n        FieldInfo Myfieldinfob = MyTypeb.GetField(&quot;field&quot;, BindingFlags.NonPublic|BindingFlags.Static);\n  \n        // For the first field, get and display the name, field, and IsStatic property value.\n        Console.Write(&quot;<br>{0} - &quot;, MyTypea.FullName);\n        Console.Write(&quot;{0}; &quot;, Myfieldinfoa.GetValue(Myfielda));\n        Console.Write(&quot;IsStatic - {0}&quot;, Myfieldinfoa.IsStatic);\n  \n        // For the second field get and display the name, field, and IsStatic property value.\n        Console.Write(&quot;<br>{0} - &quot;, MyTypeb.FullName);\n        Console.Write(&quot;{0}; &quot;, Myfieldinfob.GetValue(Myfieldb));\n        Console.Write(&quot;IsStatic - {0}&quot;, Myfieldinfob.IsStatic);\n  \n        return 0;\n    }\n}\n</code></pre><p> This code produces the following output:  </p>\n<p> Reflection.FieldInfo  </p>\n<p> Myfielda - A private field; IsStatic - False  </p>\n<p> Myfieldb - B static field; IsStatic - True</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_MemberType\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_MemberType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MemberType</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.reflection.membertypes\" data-linktype=\"relative-path\">MemberTypes</a> value indicating that this member is a field.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.MemberTypes MemberType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.membertypes\" data-linktype=\"relative-path\">MemberTypes</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.membertypes\" data-linktype=\"relative-path\">MemberTypes</a> value indicating that this member is a field.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property overrides <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_MemberType_\" data-linktype=\"relative-path\">MemberType</a>. Therefore, when you examine a set of <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> objects â€” for example, the array returned by <a class=\"xref\" href=\"system.type#System_Type_GetMembers_\" data-linktype=\"relative-path\">GetMembers</a> â€” the <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_MemberType_\" data-linktype=\"relative-path\">MemberType</a> property returns <a class=\"xref\" href=\"system.reflection.membertypes\" data-linktype=\"relative-path\">System.Reflection.MemberTypes</a> only when a given member is a field.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines whether the specified member is a field and displays the result.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic FieldInfo.MemberType Example#1\">using namespace System;\nusing namespace System::Reflection;\n\n// Make a field.\npublic ref class Myfield\n{\nprivate:\n   String^ field;\n\npublic:\n   Myfield()\n      : field( &quot;a private field&quot; )\n   {}\n\n\n   property String^ Field \n   {\n      String^ get()\n      {\n         return field;\n      }\n\n   }\n\n};\n\nint main()\n{\n   Console::WriteLine( &quot;<br>Reflection.FieldInfo&quot; );\n   Myfield^ myfield = gcnew Myfield;\n   \n   // Get the Type and FieldInfo.\n   Type^ MyType = Type::GetType( &quot;Myfield&quot; );\n   FieldInfo^ Myfieldinfo = MyType-&gt;GetField( &quot;field&quot;, static_cast&lt;BindingFlags&gt;(BindingFlags::NonPublic | BindingFlags::Instance) );\n   \n   // Get and display the MemberType.\n   Console::Write( &quot;<br>{0}.&quot;, MyType-&gt;FullName );\n   Console::Write( &quot;{0} - &quot;, Myfieldinfo-&gt;Name );\n   Console::Write( &quot;{0};&quot;, myfield-&gt;Field );\n   MemberTypes Mymembertypes = Myfieldinfo-&gt;MemberType;\n   Console::Write( &quot;MemberType is a {0}.&quot;, Mymembertypes );\n   return 0;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic FieldInfo.MemberType Example#1\">using System;\nusing System.Reflection;\n \n// Make a field.\npublic class Myfield\n{\n    private string field = &quot;a private field&quot;;\n    public string Field\n    {\n        get{return field;}\n    }\n}\n  \npublic class Myfieldinfo\n{\n    public static int Main()\n    {\n        Console.WriteLine (&quot;<br>Reflection.FieldInfo&quot;);\n        Myfield Myfield = new Myfield();\n  \n        // Get the Type and FieldInfo.\n        Type MyType = typeof(Myfield);\n        FieldInfo Myfieldinfo = MyType.GetField(&quot;field&quot;, BindingFlags.NonPublic|BindingFlags.Instance);\n  \n        // Get and display the MemberType.\n        Console.Write (&quot;<br>{0}.&quot;, MyType.FullName);\n        Console.Write (&quot;{0} - &quot;, Myfieldinfo.Name);\n        Console.Write (&quot;{0};&quot;, Myfield.Field);\n        MemberTypes Mymembertypes = Myfieldinfo.MemberType;\n        Console.Write(&quot;MemberType is a {0}.&quot;, Mymembertypes.ToString());\n        return 0;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic FieldInfo.MemberType Example#1\">Imports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\n&#39; Make a field.\nPublic Class Myfield\n    Private m_field As String = &quot;a private field&quot;\n\n    Public ReadOnly Property Field() As String\n        Get\n            Return m_field\n        End Get\n    End Property\nEnd Class\n\nPublic Class Myfieldinfo\n\n    Public Shared Sub Main()\n        Console.WriteLine()\n        Console.WriteLine(ControlChars.Cr &amp; &quot;Reflection.FieldInfo&quot;)\n        Console.WriteLine()\n        Dim Myfield As New Myfield()\n\n        &#39; Get the Type and FieldInfo.\n        Dim MyType As Type = GetType(Myfield)\n        Dim Myfieldinfo As FieldInfo = _\n           MyType.GetField(&quot;m_field&quot;, BindingFlags.NonPublic Or BindingFlags.Instance)\n\n        &#39; Get and display the MemberType.\n        Console.Write(ControlChars.Cr &amp; &quot;{0}.&quot;, MyType.FullName)\n        Console.Write(&quot;{0} - &quot;, Myfieldinfo.Name)\n        Console.Write(&quot;{0};&quot;, Myfield.Field)\n        Dim Mymembertypes As MemberTypes = Myfieldinfo.MemberType\n        Console.Write(&quot;MemberType is a {0}.&quot;, Mymembertypes.ToString())\n    End Sub\nEnd Class\n</code></pre><p> This code produces the following output:  </p>\n<p> Reflection.FieldInfo  </p>\n<p> Myfield.field - a private field; MemberType is a Field</p>\n\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether this instance is equal to a specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare with this instance, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>obj</code> equals the type and value of this instance; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_GetFieldFromHandle_System_RuntimeFieldHandle_\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_GetFieldFromHandle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFieldFromHandle(RuntimeFieldHandle)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> for the field represented by the specified handle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Reflection.FieldInfo GetFieldFromHandle (RuntimeFieldHandle handle);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>handle</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtimefieldhandle\" data-linktype=\"relative-path\">RuntimeFieldHandle</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.runtimefieldhandle\" data-linktype=\"relative-path\">RuntimeFieldHandle</a> structure that contains the handle to the internal metadata representation of a field.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> object representing the field specified by <code>handle</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>handle</code> is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Handles are valid only in the application domain in which they were obtained.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the <a class=\"xref\" href=\"system.type#System_Type_GetFields_\" data-linktype=\"relative-path\">GetFields</a> method to get <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> objects for the fields of a type, gets a <a class=\"xref\" href=\"system.runtimefieldhandle\" data-linktype=\"relative-path\">RuntimeFieldHandle</a> structure for each field, and then retrieves the <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> objects from the handles using this overload of the <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_GetFieldFromHandle_\" data-linktype=\"relative-path\">GetFieldFromHandle</a> method.  </p>\n<pre><code class=\"lang-vb\" name=\"FieldInfo_GetFieldFromHandle#1\">Imports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\nPublic Class FieldInfo_GetFieldFromHandle\n    Public x As String\n    Public y As Char\n    Public a As Single\n    Public b As Integer\n\n    Public Shared Sub Main()\n        &#39; Get the type of the FieldInfo_GetFieldFromHandle class.\n        Dim myType As Type = GetType(FieldInfo_GetFieldFromHandle)\n        &#39; Get the fields of the FieldInfo_GetFieldFromHandle class.\n        Dim myFieldInfoArray As FieldInfo() = myType.GetFields()\n        Console.WriteLine(ControlChars.NewLine &amp; _\n           &quot;The field information of the declared&quot; &amp; _\n           &quot; fields x, y, a, and b is:&quot; &amp; ControlChars.NewLine)\n        Dim myRuntimeFieldHandle As RuntimeFieldHandle\n        Dim i As Integer\n        For i = 0 To myFieldInfoArray.Length - 1\n            &#39; Get the RuntimeFieldHandle of myFieldInfoArray.\n            myRuntimeFieldHandle = myFieldInfoArray(i).FieldHandle\n            &#39; Call the GetFieldFromHandle method. \n            Dim myFieldInfo As FieldInfo = FieldInfo.GetFieldFromHandle(myRuntimeFieldHandle)\n            &#39; Display the FieldInfo of myFieldInfo.\n            Console.WriteLine(&quot;{0}&quot;, myFieldInfo)\n        Next i\n    End Sub &#39;Main\nEnd Class &#39;FieldInfo_GetFieldFromHandle\n</code></pre><pre><code class=\"lang-cs\" name=\"FieldInfo_GetFieldFromHandle#1\">using System;\nusing System.Reflection;\n\npublic class FieldInfo_GetFieldFromHandle\n{\n    public string x;\n    public char y;\n    public float a;\n    public int b;\n\n    public static void Main()\n    {\n        // Get the type of the FieldInfo_GetFieldFromHandle class.\n        Type myType = typeof(FieldInfo_GetFieldFromHandle);\n        // Get the fields of the FieldInfo_GetFieldFromHandle class.\n        FieldInfo [] myFieldInfoArray = myType.GetFields();\n        Console.WriteLine(&quot;<br>The field information of the declared&quot; +\n            &quot; fields x, y, a, and b is:<br>&quot;);\n        RuntimeFieldHandle myRuntimeFieldHandle;\n        for(int i = 0; i &lt; myFieldInfoArray.Length; i++)\n        {\n            // Get the RuntimeFieldHandle of myFieldInfoArray.\n            myRuntimeFieldHandle = myFieldInfoArray[i].FieldHandle;\n            // Call the GetFieldFromHandle method. \n            FieldInfo myFieldInfo = FieldInfo.GetFieldFromHandle(myRuntimeFieldHandle);\n            // Display the FieldInfo of myFieldInfo.\n            Console.WriteLine(&quot;{0}&quot;, myFieldInfo);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"FieldInfo_GetFieldFromHandle#1\">using namespace System;\nusing namespace System::Reflection;\n\npublic ref class FieldInfo_GetFieldFromHandle\n{\npublic:\n   String^ x;\n   Char y;\n   float a;\n   int b;\n};\n\nint main()\n{\n   // Get the type of the FieldInfo_GetFieldFromHandle class.\n   Type^ myType = FieldInfo_GetFieldFromHandle::typeid;\n\n   // Get the fields of the FieldInfo_GetFieldFromHandle class.\n   array&lt;FieldInfo^&gt;^myFieldInfoArray = myType-&gt;GetFields();\n   Console::WriteLine( &quot;<br>The field information of the declared  fields x, y, a, and b is:<br>&quot; );\n   RuntimeFieldHandle myRuntimeFieldHandle;\n   for ( int i = 0; i &lt; myFieldInfoArray-&gt;Length; i++ )\n   {\n      // Get the RuntimeFieldHandle of myFieldInfoArray.\n      myRuntimeFieldHandle = myFieldInfoArray[ i ]-&gt;FieldHandle;\n\n      // Call the GetFieldFromHandle method. \n      FieldInfo^ myFieldInfo = FieldInfo::GetFieldFromHandle( myRuntimeFieldHandle );\n\n      // Display the FieldInfo of myFieldInfo.\n      Console::WriteLine( &quot; {0}&quot;, myFieldInfo );\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_GetFieldFromHandle_System_RuntimeFieldHandle_System_RuntimeTypeHandle_\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_GetFieldFromHandle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFieldFromHandle(RuntimeFieldHandle,RuntimeTypeHandle)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> for the field represented by the specified handle, for the specified generic type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Reflection.FieldInfo GetFieldFromHandle (RuntimeFieldHandle handle, RuntimeTypeHandle declaringType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>handle</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtimefieldhandle\" data-linktype=\"relative-path\">RuntimeFieldHandle</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.runtimefieldhandle\" data-linktype=\"relative-path\">RuntimeFieldHandle</a> structure that contains the handle to the internal metadata representation of a field.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>declaringType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtimetypehandle\" data-linktype=\"relative-path\">RuntimeTypeHandle</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.runtimetypehandle\" data-linktype=\"relative-path\">RuntimeTypeHandle</a> structure that contains the handle to the generic type that defines the field.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> object representing the field specified by <code>handle</code>, in the generic type specified by <code>declaringType</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>handle</code> is invalid.  </p>\n<p> -or-  </p>\n<p> <code>declaringType</code> is not compatible with <code>handle</code>. For example, <code>declaringType</code> is the runtime type handle of the generic type definition, and <code>handle</code> comes from a constructed type. See Remarks.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Handles are valid only in the application domain in which they were obtained.  </p>\n<p> The recommended practice is that <code>declaringType</code> should always be the runtime type handle of the constructed type that <code>handle</code> belongs to. That is, if <code>handle</code> is a runtime field handle for a field that belongs to <code>MyType&lt;int&gt;</code> (<code>MyType(Of Integer)</code> in Visual Basic), <code>declaringType</code> is the runtime type handle for <code>MyType&lt;int&gt;</code>. Do not use the runtime type handle of the generic type definition, unless the runtime field handle represents a field on the generic type definition.  </p>\n<p> Implementations are compatible in some cases. For example, a single implementation is shared by all types that are constructed from a particular generic type definition by using reference types for the generic type arguments. For example, <code>MyType&lt;string&gt;</code>, <code>MyType&lt;object&gt;</code>, and <code>MyType&lt;ArrayList&gt;</code> all share the same implementation. In this situation, the <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> object that is returned represents a field on the type that <code>declaringType</code> specifies, regardless of the original source of <code>handle</code>. This practice is not recommended, because it works only if the generic type arguments of the constructed type are reference types.  </p>\n<p> If a generic argument is a value type, the runtime type handle of the constructed type is not compatible with runtime field handles from constructions that have a reference type in the same generic parameter position, or that have a different value type in that position. In that case, the only way to use the GetFieldFromHandle overload is to ensure that <code>declaringType</code> is the runtime type handle for the constructed type that <code>handle</code> belongs to.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to retrieve <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> objects for fields on constructed generic classes. The example defines the generic type <code>Test&lt;T&gt;</code> (<code>Test(Of T)</code> in Visual Basic) with a single field named <code>TestField</code>, of type <code>T</code>. The example gets the <a class=\"xref\" href=\"system.runtimefieldhandle\" data-linktype=\"relative-path\">RuntimeFieldHandle</a> and <a class=\"xref\" href=\"system.runtimetypehandle\" data-linktype=\"relative-path\">RuntimeTypeHandle</a> for the case where <code>T</code> is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, and demonstrates the following:  </p>\n<ul>\n<li><p>An exception is thrown if the <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_GetFieldFromHandle_System_RuntimeFieldHandle_\" data-linktype=\"relative-path\">GetFieldFromHandle(RuntimeFieldHandle)</a> method overload is used. This is true even if the field is not of type <code>T</code>.  </p>\n</li>\n<li><p>A <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> is retrieved successfully if the runtime type handle is from the same construction as the runtime field handle, in this case <code>Test&lt;string&gt;</code>.  </p>\n</li>\n<li><p>If the runtime type handle is from a compatible construction, in this case <code>Test&lt;object&gt;</code>, a <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> for the field on the compatible construction is retrieved.  </p>\n</li>\n<li><p>If the runtime type handle is not from a compatible construction, an exception is thrown. In this case, a value type is specified for <code>T</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"FieldInfo_GetFieldFromHandle2#1\">Imports System\nImports System.Reflection\n\n&#39; A generic class with a field whose type is specified by the \n&#39; generic type parameter of the class.\nPublic Class Test(Of T)\n    Public TestField As T \nEnd Class\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        &#39; Get type handles for Test(Of String) and its field.\n        Dim rth As RuntimeTypeHandle = _\n            GetType(Test(Of String)).TypeHandle\n        Dim rfh As RuntimeFieldHandle = _\n            GetType(Test(Of String)).GetField(&quot;TestField&quot;).FieldHandle\n\n        &#39; When a field belongs to a constructed generic type, \n        &#39; such as Test(Of String), retrieving the field from the\n        &#39; field handle requires the type handle of the constructed\n        &#39; generic type. An exception is thrown if the type is not\n        &#39; included.\n        Try\n            Dim f1 As FieldInfo = FieldInfo.GetFieldFromHandle(rfh)\n        Catch ex As Exception\n            Console.WriteLine(&quot;{0}: {1}&quot;, ex.GetType().Name, ex.Message)\n        End Try\n\n        &#39; To get the FieldInfo for a field on a generic type, use the\n        &#39; overload that specifies the type handle.\n        Dim fi As FieldInfo = FieldInfo.GetFieldFromHandle(rfh, rth)\n        Console.WriteLine(vbCrLf &amp; &quot;The type of {0} is: {1}&quot;, _\n            fi.Name, fi.FieldType)\n\n        &#39; All constructions of Test(Of T) for which T is a reference\n        &#39; type share the same implementation, so the same runtime \n        &#39; field handle can be used to retrieve the FieldInfo for \n        &#39; TestField on any such construction. Here the runtime field\n        &#39; handle is used with Test(Of Object).\n        fi = FieldInfo.GetFieldFromHandle(rfh, _\n                               GetType(Test(Of Object)).TypeHandle)\n        Console.WriteLine(vbCrLf &amp; &quot;The type of {0} is: {1}&quot;, _\n            fi.Name, fi.FieldType)\n\n        &#39; Each construction of Test(Of T) for which T is a value type\n        &#39; has its own unique implementation, and an exception is thrown\n        &#39; if you supply a constructed type other than the one that \n        &#39; the runtime field handle belongs to.  \n        Try\n            fi = FieldInfo.GetFieldFromHandle(rfh, _\n                               GetType(Test(Of Integer)).TypeHandle)\n        Catch ex As Exception\n            Console.WriteLine(vbCrLf &amp; &quot;{0}: {1}&quot;, ex.GetType().Name, ex.Message)\n        End Try\n\n    End Sub\nEnd Class\n\n&#39; This code example produces output similar to the following:\n&#39;\n&#39;ArgumentException: Cannot resolve field TestField because the declaring type of\n&#39;the field handle Test`1[T] is generic. Explicitly provide the declaring type to\n&#39;GetFieldFromHandle.\n&#39;\n&#39;The type of TestField is: System.String\n&#39;\n&#39;The type of TestField is: System.Object\n&#39;\n&#39;ArgumentException: Type handle &#39;Test`1[System.Int32]&#39; and field handle with decl\n&#39;aring type &#39;Test`1[System.__Canon]&#39; are incompatible. Get RuntimeFieldHandle and\n&#39; declaring RuntimeTypeHandle off the same FieldInfo.\n</code></pre><pre><code class=\"lang-cs\" name=\"FieldInfo_GetFieldFromHandle2#1\">using System;\nusing System.Reflection;\n\n// A generic class with a field whose type is specified by the \n// generic type parameter of the class.\npublic class Test&lt;T&gt;\n{\n    public T TestField;\n}\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Get type handles for Test&lt;String&gt; and its field.\n        RuntimeTypeHandle rth = typeof(Test&lt;string&gt;).TypeHandle;\n        RuntimeFieldHandle rfh = typeof(Test&lt;string&gt;).GetField(&quot;TestField&quot;).FieldHandle;\n\n        // When a field belongs to a constructed generic type, \n        // such as Test&lt;String&gt;, retrieving the field from the\n        // field handle requires the type handle of the constructed\n        // generic type. An exception is thrown if the type is not\n        // included.\n        try\n        {\n            FieldInfo f1 = FieldInfo.GetFieldFromHandle(rfh);\n        }\n        catch(Exception ex)\n        {\n            Console.WriteLine(&quot;{0}: {1}&quot;, ex.GetType().Name, ex.Message);\n        }\n\n        // To get the FieldInfo for a field on a generic type, use the\n        // overload that specifies the type handle.\n        FieldInfo fi = FieldInfo.GetFieldFromHandle(rfh, rth);\n        Console.WriteLine(&quot;\\r<br>The type of {0} is: {1}&quot;, fi.Name, fi.FieldType);\n\n        // All constructions of Test&lt;T&gt; for which T is a reference\n        // type share the same implementation, so the same runtime \n        // field handle can be used to retrieve the FieldInfo for \n        // TestField on any such construction. Here the runtime field\n        // handle is used with Test&lt;Object&gt;.\n        fi = FieldInfo.GetFieldFromHandle(rfh, typeof(Test&lt;object&gt;).TypeHandle);\n        Console.WriteLine(&quot;\\r<br>The type of {0} is: {1}&quot;, fi.Name, fi.FieldType);\n\n        // Each construction of Test&lt;T&gt; for which T is a value type\n        // has its own unique implementation, and an exception is thrown\n        // if you supply a constructed type other than the one that \n        // the runtime field handle belongs to.  \n        try\n        {\n            fi = FieldInfo.GetFieldFromHandle(rfh, typeof(Test&lt;int&gt;).TypeHandle);\n        }\n        catch(Exception ex)\n        {\n            Console.WriteLine(&quot;\\r<br>{0}: {1}&quot;, ex.GetType().Name, ex.Message);\n        }\n    }\n}\n\n/* This code example produces output similar to the following:\n\nArgumentException: Cannot resolve field TestField because the declaring type of\nthe field handle Test`1[T] is generic. Explicitly provide the declaring type to\nGetFieldFromHandle.\n\nThe type of TestField is: System.String\n\nThe type of TestField is: System.Object\n\nArgumentException: Type handle &#39;Test`1[System.Int32]&#39; and field handle with decl\naring type &#39;Test`1[System.__Canon]&#39; are incompatible. Get RuntimeFieldHandle and\n declaring RuntimeTypeHandle off the same FieldInfo.\n */\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_GetHashCode\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hash code for this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_GetOptionalCustomModifiers\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_GetOptionalCustomModifiers_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetOptionalCustomModifiers()</div>        \r\n          </div>\r\n    \r\n            <p>Gets an array of types that identify the optional custom modifiers of the field.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual Type[] GetOptionalCustomModifiers ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects that identify the optional custom modifiers of the current field, such as <a class=\"xref\" href=\"system.runtime.compilerservices.isconst\" data-linktype=\"relative-path\">IsConst</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetOptionalCustomModifiers and <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_GetRequiredCustomModifiers_\" data-linktype=\"relative-path\">GetRequiredCustomModifiers</a> methods are provided for designers of managed compilers. For more information on custom modifiers, see <a class=\"xref\" href=\"system.runtime.compilerservices.isboxed\" data-linktype=\"relative-path\">IsBoxed</a> and related classes in the <a class=\"xref\" href=\"system.runtime.compilerservices\" data-linktype=\"relative-path\">System.Runtime.CompilerServices</a> namespace and the metadata specification in the ECMA Partition II documentation. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_GetRawConstantValue\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_GetRawConstantValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetRawConstantValue()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a literal value associated with the field by a compiler.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object GetRawConstantValue ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> that contains the literal value associated with the field. If the literal value is a class type with an element value of zero, the return value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The Constant table in unmanaged metadata does not contain a constant value for the current field.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The type of the value is not one of the types permitted by the Common Language Specification (CLS). See the ECMA Partition II specification Metadata Logical Format: Other Structures, Element Types used in Signatures.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The constant value for the field is not set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is provided for designers of managed compilers and code analyzers.  </p>\n<p> This method can be used in both the execution context and the reflection-only context.  </p>\n<p> In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties. Constant information does not directly influence runtime behavior. Compilers inspect this information, at compile time, when importing metadata. If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits. There are no MSIL instructions that can be used to access the Constant table at run time.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For more information on constant values and the Constant table, see the ECMA Partition II documentation. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_GetRequiredCustomModifiers\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_GetRequiredCustomModifiers_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetRequiredCustomModifiers()</div>        \r\n          </div>\r\n    \r\n            <p>Gets an array of types that identify the required custom modifiers of the property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual Type[] GetRequiredCustomModifiers ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects that identify the required custom modifiers of the current property, such as <a class=\"xref\" href=\"system.runtime.compilerservices.isconst\" data-linktype=\"relative-path\">IsConst</a> or <a class=\"xref\" href=\"system.runtime.compilerservices.isimplicitlydereferenced\" data-linktype=\"relative-path\">IsImplicitlyDereferenced</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_GetOptionalCustomModifiers_\" data-linktype=\"relative-path\">GetOptionalCustomModifiers</a> and GetRequiredCustomModifiers methods are provided for designers of managed compilers. For more information on custom modifiers, see <a class=\"xref\" href=\"system.runtime.compilerservices.isboxed\" data-linktype=\"relative-path\">IsBoxed</a> and related classes in the <a class=\"xref\" href=\"system.runtime.compilerservices\" data-linktype=\"relative-path\">System.Runtime.CompilerServices</a> namespace and the metadata specification in the ECMA Partition II documentation. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_GetValue_System_Object_\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_GetValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetValue(Object)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, returns the value of a field supported by a given object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract object GetValue (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object whose field value will be returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>An object containing the value of the field reflected by this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.targetexception\" data-linktype=\"relative-path\">TargetException</a></div>\r\n                  </div>\r\n                  <div class=\"alert NOTE\"><br> In the <a href=\"http://go.microsoft.com/fwlink/?LinkID=247912\" data-linktype=\"external\">.NET for Windows Store apps</a> or the Portable Class Library, catch <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> instead.<br>\n</div>  \n\n<p> The field is non-static and <code>obj</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>A field is marked literal, but the field does not have one of the accepted literal types.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.fieldaccessexception\" data-linktype=\"relative-path\">FieldAccessException</a></div>\r\n                  </div>\r\n                  <div class=\"alert NOTE\"><br> In the <a href=\"http://go.microsoft.com/fwlink/?LinkID=247912\" data-linktype=\"external\">.NET for Windows Store apps</a> or the Portable Class Library, catch the base class exception, <a class=\"xref\" href=\"system.memberaccessexception\" data-linktype=\"relative-path\">MemberAccessException</a>, instead.<br>\n</div>  \n\n<p> The caller does not have permission to access this field.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The method is neither declared nor inherited by the class of <code>obj</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the field is static, <code>obj</code> is ignored. For non-static fields, <code>obj</code> should be an instance of a class that inherits or declares the field. Note that the return type of <code>GetValue</code> is <code>Object</code>. For example, if the field holds a Boolean primitive value, an instance of <code>Object</code> with the appropriate Boolean value is returned. Before returning the value, <code>GetValue</code> checks to see if the user has access permission.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Access restrictions are ignored for fully trusted code. That is, private constructors, methods, fields, and properties can be accessed and invoked through reflection whenever the code is fully trusted.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0 Service Pack 1, this method can be used to access non-public members if the caller has been granted <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag and if the grant set of the non-public members is restricted to the callerâ€™s grant set, or a subset thereof. (See <a href=\"../Topic/Security%20Considerations%20for%20Reflection.md\" data-linktype=\"relative-path\">Security Considerations for Reflection</a>.)  </p>\n<p> To use this functionality, your application should target the  .NET Framework 3.5  or later.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the GetValue method to retrieve the value of a static field. Note that the value of the <code>obj</code> argument is <code>null</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"getfldval#1\">using namespace System;\nusing namespace System::Reflection;\n\nref class Example\n{\n  public:\n     static String^ val = &quot;test&quot;;\n};\n\nint main()\n{\n   FieldInfo^ fld = Example::typeid-&gt;GetField( &quot;val&quot; );\n   Console::WriteLine(fld-&gt;GetValue(nullptr) );\n   Example::val = &quot;hi&quot;;\n   Console::WriteLine(fld-&gt;GetValue(nullptr) );\n}\n// The example displays the following output:\n//     test\n//     hi\n</code></pre><pre><code class=\"lang-vb\" name=\"getfldval#1\">Imports System.Reflection\n\nClass Example\n    Public Shared val As String = &quot;test&quot;\n    \n    Public Shared Sub Main()\n        Dim fld As FieldInfo = GetType(Example).GetField(&quot;val&quot;)\n        Console.WriteLine(fld.GetValue(Nothing))\n        val = &quot;hi&quot;\n        Console.WriteLine(fld.GetValue(Nothing))\n    End Sub \nEnd Class \n&#39; The example displays the following output:\n&#39;     test\n&#39;     hi\n</code></pre><pre><code class=\"lang-cs\" name=\"getfldval#1\">using System;\nusing System.Reflection;\n\nclass Example\n{\n    public static String val = &quot;test&quot;;\n    \n    public static void Main()\n    {\n        FieldInfo fld = typeof(Example).GetField(&quot;val&quot;);\n        Console.WriteLine(fld.GetValue(null));\n        val = &quot;hi&quot;;\n        Console.WriteLine(fld.GetValue(null));\n    }\n}\n// The example displays the following output:\n//     test\n//     hi\n</code></pre><p> The following example retrieves an array of <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> objects that represents the fields of the <code>FieldsClass</code> type, and then calls the GetValue to display the value of each field for the <code>fieldsInst</code> object.  </p>\n<pre><code class=\"lang-cs\" name=\"FieldInfo_GetValue#1\">using System;\nusing System.Reflection;\n\npublic class FieldsClass\n{\n    public string fieldA;\n    public string fieldB;\n     \n    public FieldsClass()\n    {\n        fieldA = &quot;A public field&quot;;\n        fieldB = &quot;Another public field&quot;;\n    }\n}\n\npublic class Example\n{\n    public static void Main()\n    {\n        FieldsClass fieldsInst = new FieldsClass();\n        // Get the type of FieldsClass.\n        Type fieldsType = typeof(FieldsClass);\n\n        // Get an array of FieldInfo objects.\n        FieldInfo[] fields = fieldsType.GetFields(BindingFlags.Public \n            | BindingFlags.Instance);\n        // Display the values of the fields.\n        Console.WriteLine(&quot;Displaying the values of the fields of {0}:&quot;,\n            fieldsType);\n        for(int i = 0; i &lt; fields.Length; i++)\n        {\n            Console.WriteLine(&quot;   {0}:&nbsp;&nbsp;&nbsp;&nbsp;&#39;{1}&#39;&quot;,\n                fields[i].Name, fields[i].GetValue(fieldsInst));\n        }\n    }\n}\n// The example displays the following output:\n//     Displaying the values of the fields of FieldsClass:\n//        fieldA:      &#39;A public field&#39;\n//        fieldB:      &#39;Another public field&#39;\n</code></pre><pre><code class=\"lang-vb\" name=\"FieldInfo_GetValue#1\">Imports System.Reflection\n\nPublic Class FieldsClass\n    Public fieldA As String\n    Public fieldB As String\n\n    Public Sub New()\n        fieldA = &quot;A public field&quot;\n        fieldB = &quot;Another public field&quot;\n    End Sub \nEnd Class \n\nPublic Module Example\n    Public Sub Main()\n        Dim fieldsInst As New FieldsClass()\n        &#39; Get the type of FieldsClass.\n        Dim fieldsType As Type = GetType(FieldsClass)\n\n        &#39; Get an array of FieldInfo objects.\n        Dim fields As FieldInfo() = fieldsType.GetFields(BindingFlags.Public Or BindingFlags.Instance)\n        &#39; Display the values of the fields.\n        Console.WriteLine(&quot;Displaying the values of the fields of {0}:&quot;, fieldsType)\n        For i As Integer = 0 To fields.Length - 1\n            Console.WriteLine(&quot;   {0}:{2}&#39;{1}&#39;&quot;,\n                fields(i).Name, fields(i).GetValue(fieldsInst), vbTab)\n        Next \n    End Sub \nEnd Module\n&#39; The example displays the following output:\n&#39;     Displaying the values of the fields of FieldsClass:\n&#39;        fieldA:      &#39;A public field&#39;\n&#39;        fieldB:      &#39;Another public field&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"FieldInfo_GetValue#1\">using namespace System;\nusing namespace System::Reflection;\n\npublic ref class FieldsClass\n{\n  public:\n     String^ fieldA;\n     String^ fieldB;\n\n     FieldsClass()\n     {\n        fieldA = &quot;A public field&quot;;\n        fieldB = &quot;Another public field&quot;;\n     }\n};\n\nint main()\n{\n   FieldsClass^ fieldsInst = gcnew FieldsClass;\n   \n   // Get the type of FieldsClass.\n   Type^ fieldsType = FieldsClass::typeid;\n\n   // Get the FieldInfo of FieldsClass.\n   array&lt;FieldInfo^&gt;^ fields = fieldsType-&gt;GetFields(static_cast&lt;BindingFlags&gt;(BindingFlags::Public | BindingFlags::Instance));\n\n   // Display the values of the fields.\n   Console::WriteLine(&quot;Displaying the values of the fields of {0}:&quot;, fieldsType);\n   for (int i = 0; i &lt; fields-&gt;Length; i++)\n   {\n      Console::WriteLine(&quot;   {0}:&nbsp;&nbsp;&nbsp;&nbsp;&#39;{1}&#39;&quot;, \n                         fields[i]-&gt;Name, fields[i]-&gt;GetValue(fieldsInst));\n   }\n}\n// The example displays the following output:\n//     Displaying the values of the fields of FieldsClass:\n//        fieldA:      &#39;A public field&#39;\n//        fieldB:      &#39;Another public field&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_GetValueDirect_System_TypedReference_\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_GetValueDirect_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetValueDirect(TypedReference)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the value of a field supported by a given object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object GetValueDirect (TypedReference obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typedreference\" data-linktype=\"relative-path\">TypedReference</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.typedreference\" data-linktype=\"relative-path\">TypedReference</a> structure that encapsulates a managed pointer to a location and a runtime representation of the type that might be stored at that location.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>An <code>Object</code> containing a field value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The caller requires the Common Language Specification (CLS) alternative, but called this method instead.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_SetValue_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_SetValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetValue(Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the value of the field supported by the given object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetValue (object obj, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object whose field value will be set.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to assign to the field.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.fieldaccessexception\" data-linktype=\"relative-path\">FieldAccessException</a></div>\r\n                  </div>\r\n                  <div class=\"alert NOTE\"><br> In the <a href=\"http://go.microsoft.com/fwlink/?LinkID=247912\" data-linktype=\"external\">.NET for Windows Store apps</a> or the <a href=\"../Topic/Cross-Platform%20Development%20with%20the%20Portable%20Class%20Library.md\" data-linktype=\"relative-path\">Portable Class Library</a>, catch the base class exception, <a class=\"xref\" href=\"system.memberaccessexception\" data-linktype=\"relative-path\">MemberAccessException</a>, instead.<br>\n</div>  \n\n<p> The caller does not have permission to access this field.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.targetexception\" data-linktype=\"relative-path\">TargetException</a></div>\r\n                  </div>\r\n                  <div class=\"alert NOTE\"><br> In the <a href=\"http://go.microsoft.com/fwlink/?LinkID=247912\" data-linktype=\"external\">.NET for Windows Store apps</a> or the <a href=\"../Topic/Cross-Platform%20Development%20with%20the%20Portable%20Class%20Library.md\" data-linktype=\"relative-path\">Portable Class Library</a>, catch <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> instead.<br>\n</div>  \n\n<p> The <code>obj</code> parameter is <code>null</code> and the field is an instance field.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The field does not exist on the object.  </p>\n<p> -or-  </p>\n<p> The <code>value</code> parameter cannot be converted and stored in the field.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method will assign <code>value</code> to the field reflected by this instance on object <code>obj</code>. If the field is static, <code>obj</code> will be ignored. For non-static fields, <code>obj</code> should be an instance of a class that inherits or declares the field. The new value is passed as an <code>Object</code>. For example, if the field&#39;s type is Boolean, an instance of <code>Object</code> with the appropriate Boolean value is passed. Before setting the value, <code>SetValue</code> checks to see if the user has access permission. This final method is a convenience method for calling the following <code>SetValue</code> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Fully trusted code has the permissions that are needed to access and invoke private constructors, methods, fields, and properties using reflection.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0 Service Pack 1, this method can be used to access non-public members if the caller has been granted <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag and if the grant set of the non-public members is restricted to the callerâ€™s grant set, or a subset thereof. (See <a href=\"../Topic/Security%20Considerations%20for%20Reflection.md\" data-linktype=\"relative-path\">Security Considerations for Reflection</a>.)  </p>\n<p> To use this functionality, your application should target the  .NET Framework 3.5  or later.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example sets the value of a field, gets and displays the value, modifies the field, and displays the result.  </p>\n<pre><code class=\"lang-cs\" name=\"FieldInfo_SetValue#1\">using System;\nusing System.Reflection;\nusing System.Globalization;\n\npublic class Example\n{\n    private string myString;\n    public Example()\n    {\n        myString = &quot;Old value&quot;;\n    }\n\n    public string StringProperty\n    {\n        get\n        {\n            return myString;\n        }\n    }\n}\n\npublic class FieldInfo_SetValue\n{\n    public static void Main()\n    {\n        Example myObject = new Example();\n        Type myType = typeof(Example);\n        FieldInfo myFieldInfo = myType.GetField(&quot;myString&quot;, \n            BindingFlags.NonPublic | BindingFlags.Instance); \n\n        // Display the string before applying SetValue to the field.\n        Console.WriteLine( &quot;<br>The field value of myString is \\&quot;{0}\\&quot;.&quot;, \n        myFieldInfo.GetValue(myObject)); \n        // Display the SetValue signature used to set the value of a field.\n        Console.WriteLine( &quot;Applying SetValue(Object, Object).&quot;); \n   \n        // Change the field value using the SetValue method. \n        myFieldInfo.SetValue(myObject, &quot;New value&quot;); \n        // Display the string after applying SetValue to the field.\n        Console.WriteLine( &quot;The field value of mystring is \\&quot;{0}\\&quot;.&quot;, \n            myFieldInfo.GetValue(myObject));\n    }\n}\n\n/* This code example produces the following output:\n\nThe field value of myString is &quot;Old value&quot;.\nApplying SetValue(Object, Object).\nThe field value of mystring is &quot;New value&quot;.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"FieldInfo_SetValue#1\">Imports System\nImports System.Reflection\nImports System.Globalization\n\nPublic Class Example\n   Private myString As String\n   \n   Public Sub New()\n      myString = &quot;Old value&quot;\n   End Sub \n   \n   ReadOnly Property StringProperty() As String\n      Get\n         Return myString\n      End Get\n   End Property\nEnd Class \n\n\nPublic Module FieldInfo_SetValue\n   \n   Sub Main()\n\n        Dim myObject As New Example()\n        Dim myType As Type = GetType(Example)\n        Dim myFieldInfo As FieldInfo = myType.GetField(&quot;myString&quot;, _\n           BindingFlags.NonPublic Or BindingFlags.Instance)\n\n        &#39; Display the string before applying SetValue to the field.\n        Console.WriteLine(vbCrLf &amp; &quot;The field value of myString is &quot;&quot;{0}&quot;&quot;.&quot;, _\n            myFieldInfo.GetValue(myObject))\n        &#39; Display the SetValue signature used to set the value of a field.\n        Console.WriteLine(&quot;Applying SetValue(Object, Object).&quot;)\n\n        &#39; Change the field value using the SetValue method. \n        myFieldInfo.SetValue(myObject, &quot;New value&quot;)\n        &#39; Display the string after applying SetValue to the field.\n        Console.WriteLine(&quot;The field value of mystring is &quot;&quot;{0}&quot;&quot;.&quot;, _\n            myFieldInfo.GetValue(myObject))\n\n    End Sub \nEnd Module\n\n&#39; This code example produces the following output:\n&#39; The field value of myString is &quot;Old value&quot;.\n&#39; Applying SetValue(Object, Object).\n&#39; The field value of mystring is &quot;New value&quot;.\n</code></pre><pre><code class=\"lang-cpp\" name=\"FieldInfo_SetValue#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Globalization;\n\npublic ref class Example\n{\nprivate:\n   String^ myString;\n\npublic:\n   Example()\n   {\n      myString = &quot;Old value&quot;;\n   }\n\n   property String^ StringProperty \n   {\n      String^ get()\n      {\n         return myString;\n      }\n   }\n};\n\nint main()\n{\n    Example^ myObject = gcnew Example;\n    Type^ myType = Example::typeid;\n    FieldInfo^ myFieldInfo = myType-&gt;GetField( &quot;myString&quot;, \n        BindingFlags::NonPublic | BindingFlags::Instance);\n      \n    // Display the string before applying SetValue to the field.\n    Console::WriteLine( &quot;<br>The field value of myString is \\&quot;{0}\\&quot;.&quot;, \n        myFieldInfo-&gt;GetValue( myObject ) );\n    // Display the SetValue signature used to set the value of a field.\n    Console::WriteLine( &quot;Applying SetValue(Object, Object).&quot; );\n\n    // Change the field value using the SetValue method. \n    myFieldInfo-&gt;SetValue( myObject, &quot;New value&quot; );     \n    // Display the string after applying SetValue to the field.\n    Console::WriteLine( &quot;The field value of mystring is \\&quot;{0}\\&quot;.&quot;, \n        myFieldInfo-&gt;GetValue(myObject));\n}\n/* This code produces the following output:\n\nThe field value of myString is &quot;Old value&quot;.\nApplying SetValue(Object, Object).\nThe field value of mystring is &quot;New value&quot;.\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_SetValue_System_Object_System_Object_System_Reflection_BindingFlags_System_Reflection_Binder_System_Globalization_CultureInfo_\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_SetValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetValue(Object,Object,BindingFlags,Binder,CultureInfo)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, sets the value of the field supported by the given object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract void SetValue (object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object whose field value will be set.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to assign to the field.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>invokeAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A field of <code>Binder</code> that specifies the type of binding that is desired (for example, <code>Binder.CreateInstance</code> or <code>Binder.ExactBinding</code>).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.binder\" data-linktype=\"relative-path\">Binder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A set of properties that enables the binding, coercion of argument types, and invocation of members through reflection. If <code>binder</code> is <code>null</code>, then <code>Binder.DefaultBinding</code> is used.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The software preferences of a particular culture.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.fieldaccessexception\" data-linktype=\"relative-path\">FieldAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have permission to access this field.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.targetexception\" data-linktype=\"relative-path\">TargetException</a></div>\r\n                  </div>\r\n                  <p>The <code>obj</code> parameter is <code>null</code> and the field is an instance field.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The field does not exist on the object.  </p>\n<p> -or-  </p>\n<p> The <code>value</code> parameter cannot be converted and stored in the field.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method will assign <code>value</code> to the field reflected by this instance on <code>obj</code>. If the field is static, <code>obj</code> will be ignored. For non-static fields, <code>obj</code> should be an instance of a class that inherits or declares the field. The new value is passed as an <code>Object</code>. For example, if the field&#39;s type is <code>Boolean</code>, an instance of <code>Object</code> with the appropriate Boolean value is passed. Before setting the value, <code>SetValue</code> checks to see if the user has access permission.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Fully trusted code has the permissions that are needed to access and invoke private constructors, methods, fields, and properties using reflection.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0 Service Pack 1, this method can be used to access non-public members if the caller has been granted <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag and if the grant set of the non-public members is restricted to the callerâ€™s grant set, or a subset thereof. (See <a href=\"../Topic/Security%20Considerations%20for%20Reflection.md\" data-linktype=\"relative-path\">Security Considerations for Reflection</a>.)  </p>\n<p> To use this functionality, your application should target the  .NET Framework 3.5  or later.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_SetValueDirect_System_TypedReference_System_Object_\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_SetValueDirect_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetValueDirect(TypedReference,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the value of the field supported by the given object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void SetValueDirect (TypedReference obj, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typedreference\" data-linktype=\"relative-path\">TypedReference</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.typedreference\" data-linktype=\"relative-path\">TypedReference</a> structure that encapsulates a managed pointer to a location and a runtime representation of the type that can be stored at that location.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to assign to the field.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The caller requires the Common Language Specification (CLS) alternative, but called this method instead.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0 Service Pack 1, this method can be used to access non-public members if the caller has been granted <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag and if the grant set of the non-public members is restricted to the callerâ€™s grant set, or a subset thereof. (See <a href=\"../Topic/Security%20Considerations%20for%20Reflection.md\" data-linktype=\"relative-path\">Security Considerations for Reflection</a>.)  </p>\n<p> To use this functionality, your application should target the  .NET Framework 3.5  or later.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"operators\">\r\n        <h2>Operators\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_op_Equality_System_Reflection_FieldInfo_System_Reflection_FieldInfo_\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_op_Equality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Equality(FieldInfo,FieldInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether two <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> objects are equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Equality (System.Reflection.FieldInfo left, System.Reflection.FieldInfo right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first object to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second object to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>left</code> is equal to <code>right</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_op_Inequality_System_Reflection_FieldInfo_System_Reflection_FieldInfo_\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_op_Inequality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Inequality(FieldInfo,FieldInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether two <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> objects are not equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Inequality (System.Reflection.FieldInfo left, System.Reflection.FieldInfo right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first object to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second object to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>left</code> is not equal to <code>right</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_System_Runtime_InteropServices__FieldInfo_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_System_Runtime_InteropServices__FieldInfo_GetIDsOfNames_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_FieldInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Maps a set of names to a corresponding set of dispatch identifiers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _FieldInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>riid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Reserved for future use. Must be IID_NULL.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgszNames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Passed-in array of names to be mapped.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cNames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Count of the names to be mapped.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale context in which to interpret the names.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgDispId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Caller-allocated array which receives the IDs corresponding to the names.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetIDsOfNames</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_System_Runtime_InteropServices__FieldInfo_GetType\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_System_Runtime_InteropServices__FieldInfo_GetType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_FieldInfo.GetType()</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object representing the <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">Type _FieldInfo.GetType ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object representing the <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_System_Runtime_InteropServices__FieldInfo_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_System_Runtime_InteropServices__FieldInfo_GetTypeInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_FieldInfo.GetTypeInfo(UInt32,UInt32,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the type information for an object, which can then be used to get the type information for an interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _FieldInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>iTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type information to return.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale identifier for the type information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ppTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Receives a pointer to the requested type information object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetTypeInfo</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_System_Runtime_InteropServices__FieldInfo_GetTypeInfoCount_System_UInt32__\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_System_Runtime_InteropServices__FieldInfo_GetTypeInfoCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_FieldInfo.GetTypeInfoCount(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _FieldInfo.GetTypeInfoCount (out uint pcTInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pcTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Points to a location that receives the number of type information interfaces provided by the object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetTypeInfoCount</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_FieldInfo_System_Runtime_InteropServices__FieldInfo_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_FieldInfo_System_Runtime_InteropServices__FieldInfo_Invoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_FieldInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Provides access to properties and methods exposed by an object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _FieldInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dispIdMember</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Identifies the member.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>riid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Reserved for future use. Must be IID_NULL.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale context in which to interpret arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>wFlags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Flags describing the context of the call.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pDispParams</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pVarResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to the location where the result is to be stored.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pExcepInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to a structure that contains exception information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>puArgErr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first argument that has an error.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::Invoke</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.FieldInfo.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.FieldInfo.yml\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo..ctor\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo.Attributes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo.Equals\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo.FieldHandle\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo.FieldType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo.GetFieldFromHandle\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo.GetOptionalCustomModifiers\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo.GetRawConstantValue\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo.GetRequiredCustomModifiers\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo.GetValue\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo.GetValueDirect\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo.IsAssembly\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo.IsFamily\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo.IsFamilyAndAssembly\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo.IsFamilyOrAssembly\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo.IsInitOnly\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo.IsLiteral\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo.IsNotSerialized\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo.IsPinvokeImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo.IsPrivate\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo.IsPublic\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo.IsSecurityCritical\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo.IsSecuritySafeCritical\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo.IsSecurityTransparent\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo.IsSpecialName\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo.IsStatic\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo.MemberType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo.op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo.op_op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo.op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo.op_op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo.SetValue\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo.SetValueDirect\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo._FieldInfo.GetIDsOfNames\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo._FieldInfo.GetType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo._FieldInfo.GetTypeInfo\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo._FieldInfo.GetTypeInfoCount\">\r\n<meta name=\"APIName\" content=\"System.Reflection.FieldInfo._FieldInfo.Invoke\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"1a78f9be-3897-d329-ac23-823f84b4deb6\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Discovers the attributes of a field and provides access to field metadata.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Reflection/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Reflection.FieldInfo\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.FieldInfo.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.FieldInfo.yml","open_to_public_contributors":true,"api_name":["System.Reflection.FieldInfo","System.Reflection.FieldInfo..ctor","System.Reflection.FieldInfo.Attributes","System.Reflection.FieldInfo.Equals","System.Reflection.FieldInfo.FieldHandle","System.Reflection.FieldInfo.FieldType","System.Reflection.FieldInfo.GetFieldFromHandle","System.Reflection.FieldInfo.GetHashCode","System.Reflection.FieldInfo.GetOptionalCustomModifiers","System.Reflection.FieldInfo.GetRawConstantValue","System.Reflection.FieldInfo.GetRequiredCustomModifiers","System.Reflection.FieldInfo.GetValue","System.Reflection.FieldInfo.GetValueDirect","System.Reflection.FieldInfo.IsAssembly","System.Reflection.FieldInfo.IsFamily","System.Reflection.FieldInfo.IsFamilyAndAssembly","System.Reflection.FieldInfo.IsFamilyOrAssembly","System.Reflection.FieldInfo.IsInitOnly","System.Reflection.FieldInfo.IsLiteral","System.Reflection.FieldInfo.IsNotSerialized","System.Reflection.FieldInfo.IsPinvokeImpl","System.Reflection.FieldInfo.IsPrivate","System.Reflection.FieldInfo.IsPublic","System.Reflection.FieldInfo.IsSecurityCritical","System.Reflection.FieldInfo.IsSecuritySafeCritical","System.Reflection.FieldInfo.IsSecurityTransparent","System.Reflection.FieldInfo.IsSpecialName","System.Reflection.FieldInfo.IsStatic","System.Reflection.FieldInfo.MemberType","System.Reflection.FieldInfo.op_Equality","System.Reflection.FieldInfo.op_op_Equality","System.Reflection.FieldInfo.op_Inequality","System.Reflection.FieldInfo.op_op_Inequality","System.Reflection.FieldInfo.SetValue","System.Reflection.FieldInfo.SetValueDirect","System.Reflection.FieldInfo._FieldInfo.GetIDsOfNames","System.Reflection.FieldInfo._FieldInfo.GetType","System.Reflection.FieldInfo._FieldInfo.GetTypeInfo","System.Reflection.FieldInfo._FieldInfo.GetTypeInfoCount","System.Reflection.FieldInfo._FieldInfo.Invoke"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Reflection.FieldInfo","System::Reflection::FieldInfo","System.Reflection.FieldInfo.#ctor","System::Reflection::FieldInfo::#ctor","System.Reflection.FieldInfo.Attributes","System::Reflection::FieldInfo::Attributes","System.Reflection.FieldInfo.Equals","System::Reflection::FieldInfo::Equals","System.Reflection.FieldInfo.FieldHandle","System::Reflection::FieldInfo::FieldHandle","System.Reflection.FieldInfo.FieldType","System::Reflection::FieldInfo::FieldType","System.Reflection.FieldInfo.GetFieldFromHandle","System::Reflection::FieldInfo::GetFieldFromHandle","System.Reflection.FieldInfo.GetHashCode","System::Reflection::FieldInfo::GetHashCode","System.Reflection.FieldInfo.GetOptionalCustomModifiers","System::Reflection::FieldInfo::GetOptionalCustomModifiers","System.Reflection.FieldInfo.GetRawConstantValue","System::Reflection::FieldInfo::GetRawConstantValue","System.Reflection.FieldInfo.GetRequiredCustomModifiers","System::Reflection::FieldInfo::GetRequiredCustomModifiers","System.Reflection.FieldInfo.GetValue","System::Reflection::FieldInfo::GetValue","System.Reflection.FieldInfo.GetValueDirect","System::Reflection::FieldInfo::GetValueDirect","System.Reflection.FieldInfo.IsAssembly","System::Reflection::FieldInfo::IsAssembly","System.Reflection.FieldInfo.IsFamily","System::Reflection::FieldInfo::IsFamily","System.Reflection.FieldInfo.IsFamilyAndAssembly","System::Reflection::FieldInfo::IsFamilyAndAssembly","System.Reflection.FieldInfo.IsFamilyOrAssembly","System::Reflection::FieldInfo::IsFamilyOrAssembly","System.Reflection.FieldInfo.IsInitOnly","System::Reflection::FieldInfo::IsInitOnly","System.Reflection.FieldInfo.IsLiteral","System::Reflection::FieldInfo::IsLiteral","System.Reflection.FieldInfo.IsNotSerialized","System::Reflection::FieldInfo::IsNotSerialized","System.Reflection.FieldInfo.IsPinvokeImpl","System::Reflection::FieldInfo::IsPinvokeImpl","System.Reflection.FieldInfo.IsPrivate","System::Reflection::FieldInfo::IsPrivate","System.Reflection.FieldInfo.IsPublic","System::Reflection::FieldInfo::IsPublic","System.Reflection.FieldInfo.IsSecurityCritical","System::Reflection::FieldInfo::IsSecurityCritical","System.Reflection.FieldInfo.IsSecuritySafeCritical","System::Reflection::FieldInfo::IsSecuritySafeCritical","System.Reflection.FieldInfo.IsSecurityTransparent","System::Reflection::FieldInfo::IsSecurityTransparent","System.Reflection.FieldInfo.IsSpecialName","System::Reflection::FieldInfo::IsSpecialName","System.Reflection.FieldInfo.IsStatic","System::Reflection::FieldInfo::IsStatic","System.Reflection.FieldInfo.MemberType","System::Reflection::FieldInfo::MemberType","System.Reflection.FieldInfo.op_Equality","System::Reflection::FieldInfo::op_Equality","System.Reflection.FieldInfo.op_Inequality","System::Reflection::FieldInfo::op_Inequality","System.Reflection.FieldInfo.SetValue","System::Reflection::FieldInfo::SetValue","System.Reflection.FieldInfo.SetValueDirect","System::Reflection::FieldInfo::SetValueDirect","System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames","System::Reflection::FieldInfo::System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames","System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetType","System::Reflection::FieldInfo::System#Runtime#InteropServices#_FieldInfo#GetType","System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo","System::Reflection::FieldInfo::System#Runtime#InteropServices#_FieldInfo#GetTypeInfo","System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount","System::Reflection::FieldInfo::System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount","System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke","System::Reflection::FieldInfo::System#Runtime#InteropServices#_FieldInfo#Invoke"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"1a78f9be-3897-d329-ac23-823f84b4deb6","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Reflection/FieldInfo.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"FieldInfo class | Microsoft Docs","_op_ogTitle":"FieldInfo class","description":"Discovers the attributes of a field and provides access to field metadata.\n","toc_asset_id":"_splitted/System.Reflection/toc.json","toc_rel":"_splitted/System.Reflection/toc.json","source_url":"","ms.assetid":"System.Reflection.FieldInfo","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.fieldinfo","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.fieldinfo","fileRelativePath":"System.Reflection.FieldInfo.html"},"themesRelativePathToOutputRoot":"_themes/"}