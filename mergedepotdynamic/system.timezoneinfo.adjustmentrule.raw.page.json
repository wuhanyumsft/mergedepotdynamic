{"content":"    \r\n    <h1 id=\"System_TimeZoneInfo_AdjustmentRule\">\r\n      <span class=\"lang-csharp\">TimeZoneInfo+AdjustmentRule</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides information about a time zone adjustment, such as the transition to and from daylight saving time.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.CompilerServices.TypeForwardedFrom(&quot;System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089&quot;)]\npublic sealed class TimeZoneInfo.AdjustmentRule : IEquatable&lt;TimeZoneInfo.AdjustmentRule&gt;, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">TimeZoneInfo+AdjustmentRule</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The TimeZoneInfo.AdjustmentRule class defines the effective start and end dates of a particular time change to and from daylight saving time, respectively, as well as its delta (the exact amount by which the adjustment causes the time zone&#39;s standard time to change). In addition, two properties return <a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a> objects that define when each transition to and from standard time occurs.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An instance of the TimeZoneInfo.AdjustmentRule class is immutable. Once an object has been created, its values cannot be modified.  </p>\n</div>\n<p> To create a TimeZoneInfo.AdjustmentRule object, call the <code>static</code> (<code>Shared</code> in Visual Basic) <a class=\"xref\" href=\"system.timezoneinfo.adjustmentrule#System_TimeZoneInfo_AdjustmentRule_CreateAdjustmentRule_\" data-linktype=\"relative-path\">CreateAdjustmentRule</a> method. You can then supply an array of TimeZoneInfo.AdjustmentRule objects to two of the overloads of the <a class=\"xref\" href=\"system.timezoneinfo#System_TimeZoneInfo_CreateCustomTimeZone_\" data-linktype=\"relative-path\">CreateCustomTimeZone</a> method. To retrieve the adjustment rules of a particular time zone, call its <a class=\"xref\" href=\"system.timezoneinfo#System_TimeZoneInfo_GetAdjustmentRules_\" data-linktype=\"relative-path\">GetAdjustmentRules</a> method, which returns an array of TimeZoneInfo.AdjustmentRule objects.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeZoneInfo_AdjustmentRule_DateEnd\" data-linktype=\"self-bookmark\">DateEnd</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the date when the adjustment rule ceases to be in effect.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeZoneInfo_AdjustmentRule_DateStart\" data-linktype=\"self-bookmark\">DateStart</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the date when the adjustment rule takes effect.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeZoneInfo_AdjustmentRule_DaylightDelta\" data-linktype=\"self-bookmark\">DaylightDelta</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the amount of time that is required to form the time zone&#39;s daylight saving time. This amount of time is added to the time zone&#39;s offset from Coordinated Universal Time (UTC).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeZoneInfo_AdjustmentRule_DaylightTransitionEnd\" data-linktype=\"self-bookmark\">DaylightTransitionEnd</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets information about the annual transition from daylight saving time back to standard time.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeZoneInfo_AdjustmentRule_DaylightTransitionStart\" data-linktype=\"self-bookmark\">DaylightTransitionStart</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets information about the annual transition from standard time to daylight saving time.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeZoneInfo_AdjustmentRule_CreateAdjustmentRule_System_DateTime_System_DateTime_System_TimeSpan_System_TimeZoneInfo_TransitionTime_System_TimeZoneInfo_TransitionTime_\" data-linktype=\"self-bookmark\">CreateAdjustmentRule(DateTime,DateTime,TimeSpan,TimeZoneInfo+TransitionTime,TimeZoneInfo+TransitionTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new adjustment rule for a particular time zone.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeZoneInfo_AdjustmentRule_Equals_System_TimeZoneInfo_AdjustmentRule_\" data-linktype=\"self-bookmark\">Equals(TimeZoneInfo+AdjustmentRule)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the current <a class=\"xref\" href=\"system.timezoneinfo.adjustmentrule\" data-linktype=\"relative-path\">TimeZoneInfo+AdjustmentRule</a> object is equal to a second <a class=\"xref\" href=\"system.timezoneinfo.adjustmentrule\" data-linktype=\"relative-path\">TimeZoneInfo+AdjustmentRule</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeZoneInfo_AdjustmentRule_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Serves as a hash function for hashing algorithms and data structures such as hash tables.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeZoneInfo_AdjustmentRule_System_Runtime_Serialization_IDeserializationCallback_OnDeserialization_System_Object_\" data-linktype=\"self-bookmark\">IDeserializationCallback.OnDeserialization(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Runs when the deserialization of a <a class=\"xref\" href=\"system.timezoneinfo.adjustmentrule\" data-linktype=\"relative-path\">TimeZoneInfo+AdjustmentRule</a> object is completed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeZoneInfo_AdjustmentRule_System_Runtime_Serialization_ISerializable_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">ISerializable.GetObjectData(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Populates a <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> object with the data that is required to serialize this object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_TimeZoneInfo_AdjustmentRule_DateEnd\">\r\n    \r\n            <a id=\"System_TimeZoneInfo_AdjustmentRule_DateEnd_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DateEnd</div>        \r\n          </div>\r\n    \r\n            <p>Gets the date when the adjustment rule ceases to be in effect.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DateTime DateEnd { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value that indicates the end date of the adjustment rule.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the DateEnd property is a date value without a time component.  </p>\n<p> Because the end date of the current adjustment rule is typically not known, you can assign <code>DateTime.MaxValue.Date</code> to the DateEnd property when you create a custom adjustment rule.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Unless there is a compelling reason to do otherwise, you should define the adjustment rule&#39;s end date to occur within the time interval during which the time zone observes standard time. Unless there is a compelling reason to do so, you should not define the adjustment rule&#39;s end date to occur within the time interval during which the time zone observes daylight saving time. For example, if a time zone&#39;s transition from daylight saving time occurs on the third Sunday of March and its transition to daylight saving time occurs on the first Sunday of October, the effective end date of the adjustment rule should not be December 31 of a particular year, since that date occurs within the period of daylight saving time.  </p>\n</div>\n<p> By default, the registry in Windows XP defines a single adjustment rule whose end date is Friday, December 31, 9999 (the value of <code>DateTime.MaxValue.Date</code>), for each time zone. For time zones in the United States, the registry in Windows Vista defines two adjustment rules:  </p>\n<ul>\n<li><p>Monday, January 01, 0001, to Sunday, December 31, 2006.  </p>\n</li>\n<li><p>Monday, January 01, 2007, to Friday, December 31, 9999.  </p>\n<p>This means that, although time zone adjustment rules stored in the registry are useful for performing current time zone-related operations, they cannot be reliably used for retrieving historical time zone information. For information about defining a custom time zone with multiple adjustment rules that can be used in a historical time zone-aware application, see <a href=\"../Topic/How%20to:%20Create%20Time%20Zones%20with%20Adjustment%20Rules.md\" data-linktype=\"relative-path\">How to: Create Time Zones with Adjustment Rules</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays information about all of the time zones defined in the local computer&#39;s system registry, including the starting and ending dates of their adjustment rules.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeZoneInfo.AdjustmentRule.DateStart#1\">using System;\nusing System.Collections.ObjectModel;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      ReadOnlyCollection&lt;TimeZoneInfo&gt; timeZones = TimeZoneInfo.GetSystemTimeZones();\n      DateTimeFormatInfo dateInfo = CultureInfo.CurrentCulture.DateTimeFormat;\n      \n      foreach (var zone in timeZones)\n      {\n         Console.WriteLine(&quot;{0} transition time information:&quot;, zone.StandardName);\n         Console.WriteLine(&quot;   Time zone information: &quot;);\n         Console.WriteLine(&quot;      Base UTC Offset: {0}&quot;, zone.BaseUtcOffset);\n         Console.WriteLine(&quot;      Supports DST: {0}&quot;, zone.SupportsDaylightSavingTime);\n\n         TimeZoneInfo.AdjustmentRule[] adjustmentRules= zone.GetAdjustmentRules();\n         \n         // Indicate that time zone has no adjustment rules\n         if (adjustmentRules.Length == 0) {\n            Console.WriteLine(&quot;      No adjustment rules defined.&quot;);\n         }   \n         else {\n            Console.WriteLine(&quot;      Adjustment Rules: {0}&quot;, adjustmentRules.Length);\n            // Iterate adjustment rules       \n            foreach (var adjustmentRule in adjustmentRules) {\n               Console.WriteLine(&quot;   Adjustment rule from {0:d} to {1:d}:&quot;, \n                                 adjustmentRule.DateStart, \n                                 adjustmentRule.DateEnd);                                 \n               Console.WriteLine(&quot;      Delta: {0}&quot;, adjustmentRule.DaylightDelta);\n               // Get start of transition\n               TimeZoneInfo.TransitionTime daylightStart = adjustmentRule.DaylightTransitionStart;\n               // Display information on floating date rule\n               if (! daylightStart.IsFixedDateRule)\n                  Console.WriteLine(&quot;      Begins at {0:t} on the {1} {2} of {3}&quot;, \n                                 daylightStart.TimeOfDay, \n                                 (WeekOfMonth) daylightStart.Week,  \n                                 daylightStart.DayOfWeek, \n                                 dateInfo.GetMonthName(daylightStart.Month));\n               // Display information on fixed date rule \n               else\n                  Console.WriteLine(&quot;      Begins at {0:t} on {1} {2}&quot;, \n                                    daylightStart.TimeOfDay, \n                                    dateInfo.GetMonthName(daylightStart.Month), \n                                    daylightStart.Day);\n               \n               // Get end of transition.\n              TimeZoneInfo.TransitionTime daylightEnd = adjustmentRule.DaylightTransitionEnd;\n               // Display information on floating date rule.\n               if (!daylightEnd.IsFixedDateRule) \n                  Console.WriteLine(&quot;      Ends at {0:t} on the {1} {2} of {3}&quot;, \n                                 daylightEnd.TimeOfDay, \n                                 (WeekOfMonth) daylightEnd.Week,  \n                                 daylightEnd.DayOfWeek, \n                                 dateInfo.GetMonthName(daylightEnd.Month));\n               // Display information on fixed date rule.\n               else\n                  Console.WriteLine(&quot;      Ends at {0:t} on {1} {2}&quot;, \n                                    daylightEnd.TimeOfDay, \n                                    dateInfo.GetMonthName(daylightEnd.Month), \n                                    daylightEnd.Day);\n            }\n         }   \n      }   \n   }\n\n   private enum WeekOfMonth \n   {\n      First = 1,\n      Second = 2,\n      Third = 3,\n      Fourth = 4,\n      Last = 5,\n   }\n}\n// A portion of the output from the example might appear as follows:\n//       Tonga Standard Time transition time information:\n//          Time zone information:\n//             Base UTC Offset: 13:00:00\n//             Supports DST: False\n//             No adjustment rules defined.\n//       Samoa Standard Time transition time information:\n//          Time zone information:\n//             Base UTC Offset: 13:00:00\n//             Supports DST: True\n//             Adjustment Rules: 4\n//          Adjustment rule from 1/1/0001 to 12/31/2009:\n//             Delta: 00:00:00\n//             Begins at 12:00 AM on January 1\n//             Ends at 12:00 AM on January 1\n//          Adjustment rule from 1/1/2010 to 12/31/2010:\n//             Delta: 01:00:00\n//             Begins at 11:59 PM on the Last Saturday of September\n//             Ends at 12:00 AM on the First Friday of January\n//          Adjustment rule from 1/1/2011 to 12/31/2011:\n//             Delta: 01:00:00\n//             Begins at 3:00 AM on the Fourth Saturday of September\n//             Ends at 4:00 AM on the First Saturday of April\n//          Adjustment rule from 1/1/2012 to 12/31/9999:\n//             Delta: 01:00:00\n//             Begins at 12:00 AM on the Last Sunday of September\n//             Ends at 1:00 AM on the First Sunday of April\n//       Line Islands Standard Time transition time information:\n//          Time zone information:\n//             Base UTC Offset: 14:00:00\n//             Supports DST: False\n//             No adjustment rules defined.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeZoneInfo.AdjustmentRule.DateStart#1\">Imports System.Collections.ObjectModel\nImports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim timeZones As ReadOnlyCollection(Of TimeZoneInfo) = TimeZoneInfo.GetSystemTimeZones()\n      Dim dateInfo As DateTimeFormatInfo = CultureInfo.CurrentCulture.DateTimeFormat\n      \n      For Each zone In timeZones\n         Console.WriteLine(&quot;{0} transition time information:&quot;, zone.StandardName)\n         Console.WriteLine(&quot;   Time zone information: &quot;)\n         Console.WriteLine(&quot;      Base UTC Offset: {0}&quot;, zone.BaseUtcOffset)\n         Console.WriteLine(&quot;      Supports DST: {0}&quot;, zone.SupportsDaylightSavingTime)\n\n         Dim adjustmentRules() As TimeZoneInfo.AdjustmentRule = zone.GetAdjustmentRules()\n         \n         &#39; Indicate that time zone has no adjustment rules\n         If adjustmentRules.Length = 0 Then\n            Console.WriteLine(&quot;      No adjustment rules defined.&quot;)\n         Else\n            Console.WriteLine(&quot;      Adjustment Rules: {0}&quot;, adjustmentRules.Length)\n            &#39; Iterate adjustment rules       \n            For Each adjustmentRule In adjustmentRules\n               Console.WriteLine(&quot;   Adjustment rule from {0:d} to {1:d}:&quot;, \n                                 adjustmentRule.DateStart, \n                                 adjustmentRule.DateEnd)                                 \n               Console.WriteLine(&quot;      Delta: {0}&quot;, adjustmentRule.DaylightDelta)\n               &#39; Get start of transition\n               Dim daylightStart As TimeZoneInfo.TransitionTime = adjustmentRule.DaylightTransitionStart\n               &#39; Display information on floating date rule\n               If Not daylightStart.IsFixedDateRule Then\n                  Console.WriteLine(&quot;      Begins at {0:t} on the {1} {2} of {3}&quot;, \n                                 daylightStart.TimeOfDay, \n                                 CType(daylightStart.Week, WeekOfMonth),  \n                                 daylightStart.DayOfWeek, \n                                 dateInfo.GetMonthName(daylightStart.Month))\n               &#39; Display information on fixed date rule \n               Else\n                  Console.WriteLine(&quot;      Begins at {0:t} on {1} {2}&quot;, \n                                    daylightStart.TimeOfDay, \n                                    dateInfo.GetMonthName(daylightStart.Month), \n                                    daylightStart.Day)\n               End If\n               \n               &#39; Get end of transition.\n               Dim daylightEnd As TimeZoneInfo.TransitionTime = adjustmentRule.DaylightTransitionEnd\n               &#39; Display information on floating date rule.\n               If Not daylightEnd.IsFixedDateRule Then \n                  Console.WriteLine(&quot;      Ends at {0:t} on the {1} {2} of {3}&quot;, \n                                 daylightEnd.TimeOfDay, \n                                 CType(daylightEnd.Week, WeekOfMonth),  \n                                 daylightEnd.DayOfWeek, \n                                 dateInfo.GetMonthName(daylightEnd.Month))\n               &#39; Display information on fixed date rule.\n               Else\n                  Console.WriteLine(&quot;      Ends at {0:t} on {1} {2}&quot;, \n                                    daylightEnd.TimeOfDay, \n                                    dateInfo.GetMonthName(daylightEnd.Month), \n                                    daylightEnd.Day)\n               End If\n            Next\n         End If   \n      Next   \n   End Sub\n\n   Private Enum WeekOfMonth As Integer\n      First = 1\n      Second = 2\n      Third = 3\n      Fourth = 4\n      Last = 5\n   End Enum\nEnd Module\n&#39; A portion of the output from the example might appear as follows:\n&#39;       Tonga Standard Time transition time information:\n&#39;          Time zone information:\n&#39;             Base UTC Offset: 13:00:00\n&#39;             Supports DST: False\n&#39;             No adjustment rules defined.\n&#39;       Samoa Standard Time transition time information:\n&#39;          Time zone information:\n&#39;             Base UTC Offset: 13:00:00\n&#39;             Supports DST: True\n&#39;             Adjustment Rules: 4\n&#39;          Adjustment rule from 1/1/0001 to 12/31/2009:\n&#39;             Delta: 00:00:00\n&#39;             Begins at 12:00 AM on January 1\n&#39;             Ends at 12:00 AM on January 1\n&#39;          Adjustment rule from 1/1/2010 to 12/31/2010:\n&#39;             Delta: 01:00:00\n&#39;             Begins at 11:59 PM on the Last Saturday of September\n&#39;             Ends at 12:00 AM on the First Friday of January\n&#39;          Adjustment rule from 1/1/2011 to 12/31/2011:\n&#39;             Delta: 01:00:00\n&#39;             Begins at 3:00 AM on the Fourth Saturday of September\n&#39;             Ends at 4:00 AM on the First Saturday of April\n&#39;          Adjustment rule from 1/1/2012 to 12/31/9999:\n&#39;             Delta: 01:00:00\n&#39;             Begins at 12:00 AM on the Last Sunday of September\n&#39;             Ends at 1:00 AM on the First Sunday of April\n&#39;       Line Islands Standard Time transition time information:\n&#39;          Time zone information:\n&#39;             Base UTC Offset: 14:00:00\n&#39;             Supports DST: False\n&#39;             No adjustment rules defined.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeZoneInfo_AdjustmentRule_DateStart\">\r\n    \r\n            <a id=\"System_TimeZoneInfo_AdjustmentRule_DateStart_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DateStart</div>        \r\n          </div>\r\n    \r\n            <p>Gets the date when the adjustment rule takes effect.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DateTime DateStart { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value that indicates when the adjustment rule takes effect.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the DateStart property is a date value without a time component. It defines the date on which a particular adjustment rule goes into effect.  This is the date in which a set of transitions (which typically are defined by one transition to daylight savings time and one transition back to standard time) go into effect. For example, an adjustment rule might go into effect on January 1, 2017, that provides for a transition to daylight savings time on the second Sunday of March and for a transition back to standard time on the first Sunday of November. Note that the starting date of the adjustment rule is not tied to the date of the first transition.  </p>\n<p> You can assign <code>DateTime.MinValue.Date</code> to the <a class=\"xref\" href=\"system.timezoneinfo.adjustmentrule#System_TimeZoneInfo_AdjustmentRule_DateEnd_\" data-linktype=\"relative-path\">DateEnd</a> property when you create a custom adjustment rule for use in a time zone-aware application that does not have to work with historic time zone information.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Unless there is a compelling reason to do otherwise, you should define the adjustment rule&#39;s start date to occur within the time interval during which the time zone observes standard time. Unless there is a compelling reason to do so, you should not define the adjustment rule&#39;s start date to occur within the time interval during which the time zone observes daylight saving time. For example, if a time zone&#39;s transition from daylight saving time occurs on the third Sunday of March and its transition to daylight saving time occurs on the first Sunday of October, the effective start date of the adjustment rule should not be January 1 of a particular year, since that date occurs within the period of daylight saving time.  </p>\n</div>\n<p> By default, the registry in Windows XP defines a single adjustment rule whose start date is Monday, January 01, 0001 (the value of <code>DateTime.MinValue.Date</code>), for each time zone. For time zones in the United States, the registry in Windows Vista defines two adjustment rules:  </p>\n<ul>\n<li><p>Monday, January 01, 0001, to Sunday, December 31, 2006.  </p>\n</li>\n<li><p>Monday, January 01, 2007, to Friday, December 31, 9999.  </p>\n<p>This means that, although time zone adjustment rules stored in the registry are useful for performing current time zone-related operations, they cannot be reliably used for retrieving historical time zone information. For information about defining a custom time zone with multiple adjustment rules that can be used in a historical time zone-aware application, see <a href=\"../Topic/How%20to:%20Create%20Time%20Zones%20with%20Adjustment%20Rules.md\" data-linktype=\"relative-path\">How to: Create Time Zones with Adjustment Rules</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays information about all of the time zones defined in the local computer&#39;s system registry, including the starting and ending dates of their adjustment rules.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeZoneInfo.AdjustmentRule.DateStart#1\">using System;\nusing System.Collections.ObjectModel;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      ReadOnlyCollection&lt;TimeZoneInfo&gt; timeZones = TimeZoneInfo.GetSystemTimeZones();\n      DateTimeFormatInfo dateInfo = CultureInfo.CurrentCulture.DateTimeFormat;\n      \n      foreach (var zone in timeZones)\n      {\n         Console.WriteLine(&quot;{0} transition time information:&quot;, zone.StandardName);\n         Console.WriteLine(&quot;   Time zone information: &quot;);\n         Console.WriteLine(&quot;      Base UTC Offset: {0}&quot;, zone.BaseUtcOffset);\n         Console.WriteLine(&quot;      Supports DST: {0}&quot;, zone.SupportsDaylightSavingTime);\n\n         TimeZoneInfo.AdjustmentRule[] adjustmentRules= zone.GetAdjustmentRules();\n         \n         // Indicate that time zone has no adjustment rules\n         if (adjustmentRules.Length == 0) {\n            Console.WriteLine(&quot;      No adjustment rules defined.&quot;);\n         }   \n         else {\n            Console.WriteLine(&quot;      Adjustment Rules: {0}&quot;, adjustmentRules.Length);\n            // Iterate adjustment rules       \n            foreach (var adjustmentRule in adjustmentRules) {\n               Console.WriteLine(&quot;   Adjustment rule from {0:d} to {1:d}:&quot;, \n                                 adjustmentRule.DateStart, \n                                 adjustmentRule.DateEnd);                                 \n               Console.WriteLine(&quot;      Delta: {0}&quot;, adjustmentRule.DaylightDelta);\n               // Get start of transition\n               TimeZoneInfo.TransitionTime daylightStart = adjustmentRule.DaylightTransitionStart;\n               // Display information on floating date rule\n               if (! daylightStart.IsFixedDateRule)\n                  Console.WriteLine(&quot;      Begins at {0:t} on the {1} {2} of {3}&quot;, \n                                 daylightStart.TimeOfDay, \n                                 (WeekOfMonth) daylightStart.Week,  \n                                 daylightStart.DayOfWeek, \n                                 dateInfo.GetMonthName(daylightStart.Month));\n               // Display information on fixed date rule \n               else\n                  Console.WriteLine(&quot;      Begins at {0:t} on {1} {2}&quot;, \n                                    daylightStart.TimeOfDay, \n                                    dateInfo.GetMonthName(daylightStart.Month), \n                                    daylightStart.Day);\n               \n               // Get end of transition.\n              TimeZoneInfo.TransitionTime daylightEnd = adjustmentRule.DaylightTransitionEnd;\n               // Display information on floating date rule.\n               if (!daylightEnd.IsFixedDateRule) \n                  Console.WriteLine(&quot;      Ends at {0:t} on the {1} {2} of {3}&quot;, \n                                 daylightEnd.TimeOfDay, \n                                 (WeekOfMonth) daylightEnd.Week,  \n                                 daylightEnd.DayOfWeek, \n                                 dateInfo.GetMonthName(daylightEnd.Month));\n               // Display information on fixed date rule.\n               else\n                  Console.WriteLine(&quot;      Ends at {0:t} on {1} {2}&quot;, \n                                    daylightEnd.TimeOfDay, \n                                    dateInfo.GetMonthName(daylightEnd.Month), \n                                    daylightEnd.Day);\n            }\n         }   \n      }   \n   }\n\n   private enum WeekOfMonth \n   {\n      First = 1,\n      Second = 2,\n      Third = 3,\n      Fourth = 4,\n      Last = 5,\n   }\n}\n// A portion of the output from the example might appear as follows:\n//       Tonga Standard Time transition time information:\n//          Time zone information:\n//             Base UTC Offset: 13:00:00\n//             Supports DST: False\n//             No adjustment rules defined.\n//       Samoa Standard Time transition time information:\n//          Time zone information:\n//             Base UTC Offset: 13:00:00\n//             Supports DST: True\n//             Adjustment Rules: 4\n//          Adjustment rule from 1/1/0001 to 12/31/2009:\n//             Delta: 00:00:00\n//             Begins at 12:00 AM on January 1\n//             Ends at 12:00 AM on January 1\n//          Adjustment rule from 1/1/2010 to 12/31/2010:\n//             Delta: 01:00:00\n//             Begins at 11:59 PM on the Last Saturday of September\n//             Ends at 12:00 AM on the First Friday of January\n//          Adjustment rule from 1/1/2011 to 12/31/2011:\n//             Delta: 01:00:00\n//             Begins at 3:00 AM on the Fourth Saturday of September\n//             Ends at 4:00 AM on the First Saturday of April\n//          Adjustment rule from 1/1/2012 to 12/31/9999:\n//             Delta: 01:00:00\n//             Begins at 12:00 AM on the Last Sunday of September\n//             Ends at 1:00 AM on the First Sunday of April\n//       Line Islands Standard Time transition time information:\n//          Time zone information:\n//             Base UTC Offset: 14:00:00\n//             Supports DST: False\n//             No adjustment rules defined.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeZoneInfo.AdjustmentRule.DateStart#1\">Imports System.Collections.ObjectModel\nImports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim timeZones As ReadOnlyCollection(Of TimeZoneInfo) = TimeZoneInfo.GetSystemTimeZones()\n      Dim dateInfo As DateTimeFormatInfo = CultureInfo.CurrentCulture.DateTimeFormat\n      \n      For Each zone In timeZones\n         Console.WriteLine(&quot;{0} transition time information:&quot;, zone.StandardName)\n         Console.WriteLine(&quot;   Time zone information: &quot;)\n         Console.WriteLine(&quot;      Base UTC Offset: {0}&quot;, zone.BaseUtcOffset)\n         Console.WriteLine(&quot;      Supports DST: {0}&quot;, zone.SupportsDaylightSavingTime)\n\n         Dim adjustmentRules() As TimeZoneInfo.AdjustmentRule = zone.GetAdjustmentRules()\n         \n         &#39; Indicate that time zone has no adjustment rules\n         If adjustmentRules.Length = 0 Then\n            Console.WriteLine(&quot;      No adjustment rules defined.&quot;)\n         Else\n            Console.WriteLine(&quot;      Adjustment Rules: {0}&quot;, adjustmentRules.Length)\n            &#39; Iterate adjustment rules       \n            For Each adjustmentRule In adjustmentRules\n               Console.WriteLine(&quot;   Adjustment rule from {0:d} to {1:d}:&quot;, \n                                 adjustmentRule.DateStart, \n                                 adjustmentRule.DateEnd)                                 \n               Console.WriteLine(&quot;      Delta: {0}&quot;, adjustmentRule.DaylightDelta)\n               &#39; Get start of transition\n               Dim daylightStart As TimeZoneInfo.TransitionTime = adjustmentRule.DaylightTransitionStart\n               &#39; Display information on floating date rule\n               If Not daylightStart.IsFixedDateRule Then\n                  Console.WriteLine(&quot;      Begins at {0:t} on the {1} {2} of {3}&quot;, \n                                 daylightStart.TimeOfDay, \n                                 CType(daylightStart.Week, WeekOfMonth),  \n                                 daylightStart.DayOfWeek, \n                                 dateInfo.GetMonthName(daylightStart.Month))\n               &#39; Display information on fixed date rule \n               Else\n                  Console.WriteLine(&quot;      Begins at {0:t} on {1} {2}&quot;, \n                                    daylightStart.TimeOfDay, \n                                    dateInfo.GetMonthName(daylightStart.Month), \n                                    daylightStart.Day)\n               End If\n               \n               &#39; Get end of transition.\n               Dim daylightEnd As TimeZoneInfo.TransitionTime = adjustmentRule.DaylightTransitionEnd\n               &#39; Display information on floating date rule.\n               If Not daylightEnd.IsFixedDateRule Then \n                  Console.WriteLine(&quot;      Ends at {0:t} on the {1} {2} of {3}&quot;, \n                                 daylightEnd.TimeOfDay, \n                                 CType(daylightEnd.Week, WeekOfMonth),  \n                                 daylightEnd.DayOfWeek, \n                                 dateInfo.GetMonthName(daylightEnd.Month))\n               &#39; Display information on fixed date rule.\n               Else\n                  Console.WriteLine(&quot;      Ends at {0:t} on {1} {2}&quot;, \n                                    daylightEnd.TimeOfDay, \n                                    dateInfo.GetMonthName(daylightEnd.Month), \n                                    daylightEnd.Day)\n               End If\n            Next\n         End If   \n      Next   \n   End Sub\n\n   Private Enum WeekOfMonth As Integer\n      First = 1\n      Second = 2\n      Third = 3\n      Fourth = 4\n      Last = 5\n   End Enum\nEnd Module\n&#39; A portion of the output from the example might appear as follows:\n&#39;       Tonga Standard Time transition time information:\n&#39;          Time zone information:\n&#39;             Base UTC Offset: 13:00:00\n&#39;             Supports DST: False\n&#39;             No adjustment rules defined.\n&#39;       Samoa Standard Time transition time information:\n&#39;          Time zone information:\n&#39;             Base UTC Offset: 13:00:00\n&#39;             Supports DST: True\n&#39;             Adjustment Rules: 4\n&#39;          Adjustment rule from 1/1/0001 to 12/31/2009:\n&#39;             Delta: 00:00:00\n&#39;             Begins at 12:00 AM on January 1\n&#39;             Ends at 12:00 AM on January 1\n&#39;          Adjustment rule from 1/1/2010 to 12/31/2010:\n&#39;             Delta: 01:00:00\n&#39;             Begins at 11:59 PM on the Last Saturday of September\n&#39;             Ends at 12:00 AM on the First Friday of January\n&#39;          Adjustment rule from 1/1/2011 to 12/31/2011:\n&#39;             Delta: 01:00:00\n&#39;             Begins at 3:00 AM on the Fourth Saturday of September\n&#39;             Ends at 4:00 AM on the First Saturday of April\n&#39;          Adjustment rule from 1/1/2012 to 12/31/9999:\n&#39;             Delta: 01:00:00\n&#39;             Begins at 12:00 AM on the Last Sunday of September\n&#39;             Ends at 1:00 AM on the First Sunday of April\n&#39;       Line Islands Standard Time transition time information:\n&#39;          Time zone information:\n&#39;             Base UTC Offset: 14:00:00\n&#39;             Supports DST: False\n&#39;             No adjustment rules defined.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeZoneInfo_AdjustmentRule_DaylightDelta\">\r\n    \r\n            <a id=\"System_TimeZoneInfo_AdjustmentRule_DaylightDelta_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DaylightDelta</div>        \r\n          </div>\r\n    \r\n            <p>Gets the amount of time that is required to form the time zone&#39;s daylight saving time. This amount of time is added to the time zone&#39;s offset from Coordinated Universal Time (UTC).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TimeSpan DaylightDelta { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object that indicates the amount of time to add to the standard time changes as a result of the adjustment rule.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following formula defines a time zone&#39;s daylight saving time:  </p>\n<pre><code>TimeZoneTime = BaseUtcOffset + DaylightDelta + UtcTime  \n</code></pre><p> The value of the DaylightDelta property can range from 14 hours to -14 hours.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The DaylightDelta property measures the difference between the time zone’s standard time and its daylight saving time. It does not apply to changes in a time zone&#39;s standard offset from Coordinated Universal Time (UTC). To represent a time zone that has changed its standard time offset from UTC, you must call the <a class=\"xref\" href=\"system.timezoneinfo#System_TimeZoneInfo_CreateCustomTimeZone_\" data-linktype=\"relative-path\">CreateCustomTimeZone</a> method to create a new time zone.  </p>\n</div>\n<p> The most common value of the DaylightDelta property is 1.0 hours. The application of the daylight saving time adjustment rule increases the time zone&#39;s offset from Coordinated Universal Time (UTC) by one hour.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeZoneInfo_AdjustmentRule_DaylightTransitionEnd\">\r\n    \r\n            <a id=\"System_TimeZoneInfo_AdjustmentRule_DaylightTransitionEnd_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DaylightTransitionEnd</div>        \r\n          </div>\r\n    \r\n            <p>Gets information about the annual transition from daylight saving time back to standard time.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TimeZoneInfo.TransitionTime DaylightTransitionEnd { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a> object that defines the annual transition from daylight saving time back to the time zone&#39;s standard time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a> object returned by the DaylightTransitionEnd property defines either a fixed-date rule or a floating-date rule for the return to standard time. A fixed-date rule provides the month, day, and time of day on which the transition occurs. A floating-date rule provides the month, week, day of the week, and time of day on which the transition occurs.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeZoneInfo_AdjustmentRule_DaylightTransitionStart\">\r\n    \r\n            <a id=\"System_TimeZoneInfo_AdjustmentRule_DaylightTransitionStart_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DaylightTransitionStart</div>        \r\n          </div>\r\n    \r\n            <p>Gets information about the annual transition from standard time to daylight saving time.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TimeZoneInfo.TransitionTime DaylightTransitionStart { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a> object that defines the annual transition from a time zone&#39;s standard time to daylight saving time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a> object returned by the DaylightTransitionStart property defines either a fixed-date rule or a floating-date rule for the transition to daylight saving time. A fixed-date rule provides the month, day, and time of day on which the transition occurs. A floating-date rule provides the month, the week, the day of the week, and the time of day on which the transition occurs.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_TimeZoneInfo_AdjustmentRule_CreateAdjustmentRule_System_DateTime_System_DateTime_System_TimeSpan_System_TimeZoneInfo_TransitionTime_System_TimeZoneInfo_TransitionTime_\">\r\n    \r\n            <a id=\"System_TimeZoneInfo_AdjustmentRule_CreateAdjustmentRule_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateAdjustmentRule(DateTime,DateTime,TimeSpan,TimeZoneInfo+TransitionTime,TimeZoneInfo+TransitionTime)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new adjustment rule for a particular time zone.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TimeZoneInfo.AdjustmentRule CreateAdjustmentRule (DateTime dateStart, DateTime dateEnd, TimeSpan daylightDelta, TimeZoneInfo.TransitionTime daylightTransitionStart, TimeZoneInfo.TransitionTime daylightTransitionEnd);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dateStart</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The effective date of the adjustment rule. If the value of the <code>dateStart</code> parameter is <code>DateTime.MinValue.Date</code>, this is the first adjustment rule in effect for a time zone.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>dateEnd</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The last date that the adjustment rule is in force. If the value of the <code>dateEnd</code> parameter is <code>DateTime.MaxValue.Date</code>, the adjustment rule has no end date.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>daylightDelta</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The time change that results from the adjustment. This value is added to the time zone&#39;s <span class=\"xref\">stem.TimeZoneInfo.BaseUtcOffset*</span> property to obtain the correct daylight offset from Coordinated Universal Time (UTC). This value can range from -14 to 14.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>daylightTransitionStart</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that defines the start of daylight saving time.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>daylightTransitionEnd</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that defines the end of daylight saving time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timezoneinfo.adjustmentrule\" data-linktype=\"relative-path\">TimeZoneInfo+AdjustmentRule</a></div>\r\n                  </div>\r\n                  <p>An object that represents the new adjustment rule.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.DateTime.Kind*</span> property of the <code>dateStart</code> or <code>dateEnd</code> parameter does not equal <a class=\"xref\" href=\"system.datetimekind\" data-linktype=\"relative-path\">DateTimeKind</a>.  </p>\n<p> -or-  </p>\n<p> The <code>daylightTransitionStart</code> parameter is equal to the <code>daylightTransitionEnd</code> parameter.  </p>\n<p> -or-  </p>\n<p> The <code>dateStart</code> or <code>dateEnd</code> parameter includes a time of day value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>dateEnd</code> is earlier than <code>dateStart</code>.  </p>\n<p> -or-  </p>\n<p> <code>daylightDelta</code> is less than -14 or greater than 14.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.TimeSpan.Milliseconds*</span> property of the <code>daylightDelta</code> parameter is not equal to 0.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.TimeSpan.Ticks*</span> property of the <code>daylightDelta</code> parameter does not equal a whole number of seconds.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use this method to create one or more adjustment rules for a custom time zone. An array of the <a class=\"xref\" href=\"system.timezoneinfo.adjustmentrule\" data-linktype=\"relative-path\">TimeZoneInfo+AdjustmentRule</a> objects returned by calls to this method can then be passed as the <code>adjustmentRules</code> parameter to two overloads of the <a class=\"xref\" href=\"system.timezoneinfo#System_TimeZoneInfo_CreateCustomTimeZone_\" data-linktype=\"relative-path\">CreateCustomTimeZone</a> method. The example illustrates this procedure.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The CreateAdjustmentRule method can be used only to define an adjustment rule for a new time zone; it cannot be used to modify an adjustment rule for an existing time zone.  </p>\n</div>\n<p> The <code>dateStart</code> and <code>dateEnd</code> parameters must be date values without a time component or an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> is thrown. The time component can be removed by retrieving a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value from the date and time&#39;s <a class=\"xref\" href=\"system.datetime#System_DateTime_Date_\" data-linktype=\"relative-path\">Date</a> property as shown in the following statements:  </p>\n<pre><code>DateTime.MinValue.Date  \nDateTime.MaxValue.Date  \nDateTime.Now.Date   \ndateVariable.Date  \n</code></pre><p> The <a class=\"xref\" href=\"system.datetime#System_DateTime_Kind_\" data-linktype=\"relative-path\">Kind</a> property of the <code>dateStart</code> and <code>dateEnd</code> parameters must also be <a class=\"xref\" href=\"system.datetimekind\" data-linktype=\"relative-path\">System.DateTimeKind</a>.  </p>\n<p> The value of the <code>daylightDelta</code> parameter can range from -14 to 14. The sum of the <code>daylightDelta</code> parameter and the <code>baseUtcOffset</code> parameter used in the call to the <a class=\"xref\" href=\"system.timezoneinfo#System_TimeZoneInfo_CreateCustomTimeZone_\" data-linktype=\"relative-path\">CreateCustomTimeZone</a> method must also range from -14 to 14 or an <a class=\"xref\" href=\"system.invalidtimezoneexception\" data-linktype=\"relative-path\">InvalidTimeZoneException</a> is thrown.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>daylightDelta</code> parameter defines the difference between a time zone&#39;s standard time and its daylight saving time. It is not intended to define the time zone&#39;s standard time offset from Coordinated Universal Time (UTC). The <a class=\"xref\" href=\"system.timezoneinfo\" data-linktype=\"relative-path\">TimeZoneInfo</a> class assumes that this offset from UTC is constant throughout the life of the time zone. To reflect a change in a time zone&#39;s offset from UTC that is not caused by the application of an adjustment rule, you must use the <a class=\"xref\" href=\"system.timezoneinfo#System_TimeZoneInfo_CreateCustomTimeZone_\" data-linktype=\"relative-path\">CreateCustomTimeZone</a> method to create a new custom time zone.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an alternate Central Standard Time zone and defines three adjustment rules for the periods 1976-1986, 1987-2006, and 2007 and beyond. These rules are added to a generic <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> object whose elements are then copied to a <a class=\"xref\" href=\"system.timezoneinfo.adjustmentrule\" data-linktype=\"relative-path\">TimeZoneInfo+AdjustmentRule</a> array. This array is then used in the call to the [TimeZoneInfo.CreateCustomTimeZone(String, TimeSpan, String, String, String, TimeZoneInfo.AdjustmentRule&lt;xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%2CSystem.String%2CSystem.TimeZoneInfo.AdjustmentRule%5B%5D%29?displayProperty=fullName&gt; method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.TimeZone2.AdjustmentRule.Class#1\">      &#39; Create alternate Central Standard Time to include historical time zone information\n      &#39;\n      &#39; Declare necessary TimeZoneInfo.AdjustmentRule objects for time zone\n      Dim delta As New TimeSpan(1, 0, 0)\n      Dim adjustment As TimeZoneInfo.AdjustmentRule\n      Dim adjustmentList As New List(Of TimeZoneInfo.AdjustmentRule)\n      &#39; Declare transition time variables to hold transition time information\n      Dim transitionRuleStart, transitionRuleEnd As TimeZoneInfo.TransitionTime\n\n      &#39; Define end rule (for 1976-2006)\n      transitionRuleEnd = TimeZoneInfo.TransitionTime.CreateFloatingDateRule(#02:00:00AM#, 10, 5, DayOfWeek.Sunday)\n      &#39; Define rule (1976-1986)\n      transitionRuleStart = TimeZoneInfo.TransitionTime.CreateFloatingDateRule(#2:00:00AM#, 04, 05, DayOfWeek.Sunday)\n      adjustment = TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(#01/01/1976#, #12/31/1986#, delta, transitionRuleStart, transitionRuleEnd)\n      adjustmentList.Add(adjustment)\n      &#39; Define rule (1987-2006)  \n      transitionRuleStart = TimeZoneInfo.TransitionTime.CreateFloatingDateRule(#2:00:00AM#, 04, 01, DayOfWeek.Sunday)\n      adjustment = TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(#01/01/1987#, #12/31/2006#, delta, transitionRuleStart, transitionRuleEnd)\n      adjustmentList.Add(adjustment)\n      &#39; Define rule (2007- )  \n      transitionRuleStart = TimeZoneInfo.TransitionTime.CreateFloatingDateRule(#2:00:00AM#, 03, 02, DayOfWeek.Sunday)\n      transitionRuleEnd = TimeZoneInfo.TransitionTime.CreateFloatingDateRule(#2:00:00AM#, 11, 01, DayOfWeek.Sunday)\n      adjustment = TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(#01/01/2007#, Date.MaxValue.Date, delta, transitionRuleStart, transitionRuleEnd)\n      adjustmentList.Add(adjustment)\n                    \n      &#39; Create custom U.S. Central Standard Time Zone\n      TimeZoneInfo.CreateCustomTimeZone(&quot;Central Standard Time&quot;, New TimeSpan(-6, 0, 0), _\n                      &quot;(GMT-06:00) Central Time (US Only)&quot;, &quot;Central Standard Time&quot;, _\n                      &quot;Central Daylight Time&quot;, adjustmentList.ToArray())     \n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeZone2.AdjustmentRule.Class#1\">      // Create alternate Central Standard Time to include historical time zone information\n      //\n      // Declare necessary TimeZoneInfo.AdjustmentRule objects for time zone\n      TimeSpan delta = new TimeSpan(1, 0, 0);\n      TimeZoneInfo.AdjustmentRule adjustment;\n      List&lt;TimeZoneInfo.AdjustmentRule&gt; adjustmentList = new List&lt;TimeZoneInfo.AdjustmentRule&gt;();\n      // Declare transition time variables to hold transition time information\n      TimeZoneInfo.TransitionTime transitionRuleStart, transitionRuleEnd;\n\n      // Define end rule (for 1976-2006)\n      transitionRuleEnd = TimeZoneInfo.TransitionTime.CreateFloatingDateRule(new DateTime(1, 1, 1, 2, 0, 0), 10, 5, DayOfWeek.Sunday);\n      // Define rule (1976-1986)\n      transitionRuleStart = TimeZoneInfo.TransitionTime.CreateFloatingDateRule(new DateTime(1, 1, 1, 2, 0, 0), 04, 05, DayOfWeek.Sunday);\n      adjustment = TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(new DateTime(1976, 1, 1), new DateTime(1986, 12, 31), delta, transitionRuleStart, transitionRuleEnd);\n      adjustmentList.Add(adjustment);\n      // Define rule (1987-2006)  \n      transitionRuleStart = TimeZoneInfo.TransitionTime.CreateFloatingDateRule(new DateTime(1, 1, 1, 2, 0, 0), 04, 01, DayOfWeek.Sunday);\n      adjustment = TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(new DateTime(1987, 1, 1), new DateTime(2006, 12, 31), delta, transitionRuleStart, transitionRuleEnd);\n      adjustmentList.Add(adjustment);\n      // Define rule (2007- )  \n      transitionRuleStart = TimeZoneInfo.TransitionTime.CreateFloatingDateRule(new DateTime(1, 1, 1, 2, 0, 0), 03, 02, DayOfWeek.Sunday);\n      transitionRuleEnd = TimeZoneInfo.TransitionTime.CreateFloatingDateRule(new DateTime(1, 1, 1, 2, 0, 0), 11, 01, DayOfWeek.Sunday);\n      adjustment = TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(new DateTime(2007, 01, 01), DateTime.MaxValue.Date, delta, transitionRuleStart, transitionRuleEnd);\n      adjustmentList.Add(adjustment);\n                    \n      // Create custom U.S. Central Standard Time zone         \n      TimeZoneInfo.CreateCustomTimeZone(&quot;Central Standard Time&quot;, new TimeSpan(-6, 0, 0), \n                      &quot;(GMT-06:00) Central Time (US Only)&quot;, &quot;Central Standard Time&quot;, \n                      &quot;Central Daylight Time&quot;, adjustmentList.ToArray());       \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeZoneInfo_AdjustmentRule_Equals_System_TimeZoneInfo_AdjustmentRule_\">\r\n    \r\n            <a id=\"System_TimeZoneInfo_AdjustmentRule_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(TimeZoneInfo+AdjustmentRule)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the current <a class=\"xref\" href=\"system.timezoneinfo.adjustmentrule\" data-linktype=\"relative-path\">TimeZoneInfo+AdjustmentRule</a> object is equal to a second <a class=\"xref\" href=\"system.timezoneinfo.adjustmentrule\" data-linktype=\"relative-path\">TimeZoneInfo+AdjustmentRule</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Equals (TimeZoneInfo.AdjustmentRule other);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>other</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timezoneinfo.adjustmentrule\" data-linktype=\"relative-path\">TimeZoneInfo+AdjustmentRule</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to compare with the current object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if both <a class=\"xref\" href=\"system.timezoneinfo.adjustmentrule\" data-linktype=\"relative-path\">TimeZoneInfo+AdjustmentRule</a> objects have equal values; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To determine whether two <a class=\"xref\" href=\"system.timezoneinfo.adjustmentrule\" data-linktype=\"relative-path\">TimeZoneInfo+AdjustmentRule</a> objects are equal, the Equals method compares the member values of each object. Two adjustment rules are equal if they have the same effective dates, the same delta, and identical values for the <a class=\"xref\" href=\"system.timezoneinfo.transitiontime\" data-linktype=\"relative-path\">TimeZoneInfo+TransitionTime</a> objects returned by their <a class=\"xref\" href=\"system.timezoneinfo.adjustmentrule#System_TimeZoneInfo_AdjustmentRule_DaylightTransitionStart_\" data-linktype=\"relative-path\">DaylightTransitionStart</a> and <a class=\"xref\" href=\"system.timezoneinfo.adjustmentrule#System_TimeZoneInfo_AdjustmentRule_DaylightTransitionEnd_\" data-linktype=\"relative-path\">DaylightTransitionEnd</a> properties.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls the Equals method to compare the adjustment rules for Central Standard Time with those for Canada Central Standard Time and Mexico Standard Time.  </p>\n<pre><code class=\"lang-vb\" name=\"System.TimeZone2.AdjustmentRule.Class#2\">      Dim timeZoneName As String = String.Empty\n      &#39; Get CST, Canadian CST, and Mexican CST adjustment rules\n      Dim usCstAdjustments(), canCstAdjustments(), mexCstAdjustments() As TimeZoneInfo.AdjustmentRule\n      Try\n         timeZoneName = &quot;Central Standard Time&quot;\n         usCstAdjustments = TimeZoneInfo.FindSystemTimeZoneById(timeZoneName).GetAdjustmentRules\n      Catch e As TimeZoneNotFoundException\n         Console.WriteLine(&quot;The {0} time zone is not defined in the registry.&quot;, timeZoneName)\n      Catch e As InvalidTimeZoneException\n         Console.WriteLine(&quot;Data for the {0} time zone is invalid.&quot;, timeZoneName)\n      End Try\n      Try\n         timeZoneName = &quot;Canada Central Standard Time&quot;\n         canCstAdjustments = TimeZoneInfo.FindSystemTimeZoneById(timeZoneName).GetAdjustmentRules\n      Catch e As TimeZoneNotFoundException\n         Console.WriteLine(&quot;The {0} time zone is not defined in the registry.&quot;, timeZoneName)\n      Catch e As InvalidTimeZoneException\n         Console.WriteLine(&quot;Data for the {0} time zone is invalid.&quot;, timeZoneName)\n      End Try\n      Try\n         timeZoneName = &quot;Central Standard Time (Mexico)&quot;\n         mexCstAdjustments = TimeZoneInfo.FindSystemTimeZoneById(timeZoneName).GetAdjustmentRules\n      Catch e As TimeZoneNotFoundException\n         Console.WriteLine(&quot;The {0} time zone is not defined in the registry.&quot;, timeZoneName)\n      Catch e As InvalidTimeZoneException\n         Console.WriteLine(&quot;Data for the {0} time zone is invalid.&quot;, timeZoneName)\n      End Try\n      &#39; Determine if CST and other time zones have the same rules\n      For Each rule As TimeZoneInfo.AdjustmentRule In usCstAdjustments\n         Console.WriteLine(&quot;Comparing Central Standard Time rule for {0:d} to {1:d} with:&quot;, _\n                           rule.DateStart, rule.DateEnd)\n         &#39; Compare with Canada Central Standard Time\n         If canCstAdjustments.Length = 0 Then\n            Console.WriteLine(&quot;   Canada Central Standard Time has no adjustment rules.&quot;)\n         Else\n            For Each canRule As TimeZoneInfo.AdjustmentRule In canCstAdjustments\n               Console.WriteLine(&quot;   Canadian CST for {0:d} to {1:d}: {2}&quot;, _\n                                 canRule.DateStart, canRule.DateEnd, _\n                                 IIf(rule.Equals(canRule), &quot;Equal&quot;, &quot;Not Equal&quot;))\n            Next              \n         End If          \n   \n         &#39; Compare with Mexico Central Standard Time\n         If mexCstAdjustments.Length = 0 Then\n            Console.WriteLine(&quot;   Mexican Central Standard Time has no adjustment rules.&quot;)\n         Else\n            For Each mexRule As TimeZoneInfo.AdjustmentRule In mexCstAdjustments\n               Console.WriteLine(&quot;   Mexican CST for {0:d} to {1:d}: {2}&quot;, _\n                                 mexRule.DateStart, mexRule.DateEnd, _\n                                 IIf(rule.Equals(mexRule), &quot;Equal&quot;, &quot;Not Equal&quot;))\n            Next              \n         End If\n      Next   \n      &#39; This code displays the following output to the console:\n      &#39; \n      &#39; Comparing Central Standard Time rule for 1/1/0001 to 12/31/9999 with:\n      &#39;    Canada Central Standard Time has no adjustment rules.\n      &#39;    Mexican CST for 1/1/0001 to 12/31/9999: Equal\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeZone2.AdjustmentRule.Class#2\">      string timeZoneName = &quot;&quot;;\n      // Get CST, Canadian CST, and Mexican CST adjustment rules\n      TimeZoneInfo.AdjustmentRule[] usCstAdjustments = null;\n      TimeZoneInfo.AdjustmentRule[] canCstAdjustments = null;\n      TimeZoneInfo.AdjustmentRule[] mexCstAdjustments = null;\n      try\n      {\n         timeZoneName = &quot;Central Standard Time&quot;;\n         usCstAdjustments = TimeZoneInfo.FindSystemTimeZoneById(timeZoneName).GetAdjustmentRules();\n      }\n      catch (TimeZoneNotFoundException)\n      {\n         Console.WriteLine(&quot;The {0} time zone is not defined in the registry.&quot;, \n                           timeZoneName);\n      }                           \n      catch (InvalidTimeZoneException)\n      {\n         Console.WriteLine(&quot;Data for the {0} time zone is invalid.&quot;, \n                           timeZoneName);\n      }\n      try\n      {\n         timeZoneName = &quot;Canada Central Standard Time&quot;;\n         canCstAdjustments = TimeZoneInfo.FindSystemTimeZoneById(timeZoneName).GetAdjustmentRules();\n      }\n      catch (TimeZoneNotFoundException)\n      {\n         Console.WriteLine(&quot;The {0} time zone is not defined in the registry.&quot;, \n                           timeZoneName);\n      }                           \n      catch (InvalidTimeZoneException)\n      {\n         Console.WriteLine(&quot;Data for the {0} time zone is invalid.&quot;, \n                           timeZoneName);\n      }\n      try\n      {\n         timeZoneName = &quot;Central Standard Time (Mexico)&quot;;\n         mexCstAdjustments = TimeZoneInfo.FindSystemTimeZoneById(timeZoneName).GetAdjustmentRules();\n      }   \n      catch (TimeZoneNotFoundException)\n      {\n         Console.WriteLine(&quot;The {0} time zone is not defined in the registry.&quot;, \n                           timeZoneName);\n      }                           \n      catch (InvalidTimeZoneException)\n      {\n         Console.WriteLine(&quot;Data for the {0} time zone is invalid.&quot;, \n                           timeZoneName);\n      }\n      // Determine if CST and other time zones have the same rules\n      foreach(TimeZoneInfo.AdjustmentRule rule in usCstAdjustments)\n      {\n         Console.WriteLine(&quot;Comparing Central Standard Time rule for {0:d} to {1:d} with:&quot;, \n                           rule.DateStart, rule.DateEnd);\n         // Compare with Canada Central Standard Time\n         if (canCstAdjustments.Length == 0)\n         {\n            Console.WriteLine(&quot;   Canada Central Standard Time has no adjustment rules.&quot;);\n         }   \n         else\n         {\n            foreach (TimeZoneInfo.AdjustmentRule canRule in canCstAdjustments)\n            {\n               Console.WriteLine(&quot;   Canadian CST for {0:d} to {1:d}: {2}&quot;, \n                                 canRule.DateStart, canRule.DateEnd, \n                                 rule.Equals(canRule) ? &quot;Equal&quot; : &quot;Not Equal&quot;);\n            }              \n         }          \n   \n         // Compare with Mexico Central Standard Time\n         if (mexCstAdjustments.Length == 0)\n         {\n            Console.WriteLine(&quot;   Mexican Central Standard Time has no adjustment rules.&quot;);\n         }\n         else\n         {\n            foreach (TimeZoneInfo.AdjustmentRule mexRule in mexCstAdjustments)\n            {\n               Console.WriteLine(&quot;   Mexican CST for {0:d} to {1:d}: {2}&quot;, \n                                 mexRule.DateStart, mexRule.DateEnd, \n                                 rule.Equals(mexRule) ? &quot;Equal&quot; : &quot;Not Equal&quot;);\n            }              \n         }\n      }   \n      // This code displays the following output to the console:\n      // \n      // Comparing Central Standard Time rule for 1/1/0001 to 12/31/9999 with:\n      //    Canada Central Standard Time has no adjustment rules.\n      //    Mexican CST for 1/1/0001 to 12/31/9999: Equal\n</code></pre><p> This code displays the following output to the console:  </p>\n<pre><code>Comparing Central Standard Time rule for 1/1/0001 to 12/31/9999 with:  \n   Canada Central Standard Time has no adjustment rules.  \n   Mexican CST for 1/1/0001 to 12/31/9999: Equal  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeZoneInfo_AdjustmentRule_GetHashCode\">\r\n    \r\n            <a id=\"System_TimeZoneInfo_AdjustmentRule_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Serves as a hash function for hashing algorithms and data structures such as hash tables.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer that serves as the hash code for the current <a class=\"xref\" href=\"system.timezoneinfo.adjustmentrule\" data-linktype=\"relative-path\">TimeZoneInfo+AdjustmentRule</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_TimeZoneInfo_AdjustmentRule_System_Runtime_Serialization_IDeserializationCallback_OnDeserialization_System_Object_\">\r\n    \r\n            <a id=\"System_TimeZoneInfo_AdjustmentRule_System_Runtime_Serialization_IDeserializationCallback_OnDeserialization_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IDeserializationCallback.OnDeserialization(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Runs when the deserialization of a <a class=\"xref\" href=\"system.timezoneinfo.adjustmentrule\" data-linktype=\"relative-path\">TimeZoneInfo+AdjustmentRule</a> object is completed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IDeserializationCallback.OnDeserialization (object sender);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>sender</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object that initiated the callback. The functionality for this parameter is not currently implemented.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeZoneInfo_AdjustmentRule_System_Runtime_Serialization_ISerializable_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_TimeZoneInfo_AdjustmentRule_System_Runtime_Serialization_ISerializable_GetObjectData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ISerializable.GetObjectData(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Populates a <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> object with the data that is required to serialize this object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>info</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to populate with data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The destination for this serialization (see <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a>).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.TimeZoneInfo.AdjustmentRule.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.TimeZoneInfo.AdjustmentRule.yml\">\r\n<meta name=\"APIName\" content=\"System.TimeZoneInfo+AdjustmentRule\">\r\n<meta name=\"APIName\" content=\"System.TimeZoneInfo+AdjustmentRule.CreateAdjustmentRule\">\r\n<meta name=\"APIName\" content=\"System.TimeZoneInfo+AdjustmentRule.DateEnd\">\r\n<meta name=\"APIName\" content=\"System.TimeZoneInfo+AdjustmentRule.DateStart\">\r\n<meta name=\"APIName\" content=\"System.TimeZoneInfo+AdjustmentRule.DaylightDelta\">\r\n<meta name=\"APIName\" content=\"System.TimeZoneInfo+AdjustmentRule.DaylightTransitionEnd\">\r\n<meta name=\"APIName\" content=\"System.TimeZoneInfo+AdjustmentRule.DaylightTransitionStart\">\r\n<meta name=\"APIName\" content=\"System.TimeZoneInfo+AdjustmentRule.Equals\">\r\n<meta name=\"APIName\" content=\"System.TimeZoneInfo+AdjustmentRule.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.TimeZoneInfo+AdjustmentRule.IDeserializationCallback.OnDeserialization\">\r\n<meta name=\"APIName\" content=\"System.TimeZoneInfo+AdjustmentRule.ISerializable.GetObjectData\">\r\n<meta name=\"APILocation\" content=\"System.Core.dll\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"f9c9a4c6-3ee1-5f5c-da68-bfce995791df\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides information about a time zone adjustment, such as the transition to and from daylight saving time.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.TimeZoneInfo.AdjustmentRule\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.TimeZoneInfo.AdjustmentRule.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.TimeZoneInfo.AdjustmentRule.yml","open_to_public_contributors":true,"api_name":["System.TimeZoneInfo+AdjustmentRule","System.TimeZoneInfo+AdjustmentRule.CreateAdjustmentRule","System.TimeZoneInfo+AdjustmentRule.DateEnd","System.TimeZoneInfo+AdjustmentRule.DateStart","System.TimeZoneInfo+AdjustmentRule.DaylightDelta","System.TimeZoneInfo+AdjustmentRule.DaylightTransitionEnd","System.TimeZoneInfo+AdjustmentRule.DaylightTransitionStart","System.TimeZoneInfo+AdjustmentRule.Equals","System.TimeZoneInfo+AdjustmentRule.GetHashCode","System.TimeZoneInfo+AdjustmentRule.IDeserializationCallback.OnDeserialization","System.TimeZoneInfo+AdjustmentRule.ISerializable.GetObjectData"],"api_location":["System.Core.dll","mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.TimeZoneInfo.AdjustmentRule","System::TimeZoneInfo::AdjustmentRule","System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule","System::TimeZoneInfo::AdjustmentRule::CreateAdjustmentRule","System.TimeZoneInfo.AdjustmentRule.DateEnd","System::TimeZoneInfo::AdjustmentRule::DateEnd","System.TimeZoneInfo.AdjustmentRule.DateStart","System::TimeZoneInfo::AdjustmentRule::DateStart","System.TimeZoneInfo.AdjustmentRule.DaylightDelta","System::TimeZoneInfo::AdjustmentRule::DaylightDelta","System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd","System::TimeZoneInfo::AdjustmentRule::DaylightTransitionEnd","System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart","System::TimeZoneInfo::AdjustmentRule::DaylightTransitionStart","System.TimeZoneInfo.AdjustmentRule.Equals","System::TimeZoneInfo::AdjustmentRule::Equals","System.TimeZoneInfo.AdjustmentRule.GetHashCode","System::TimeZoneInfo::AdjustmentRule::GetHashCode","System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization","System::TimeZoneInfo::AdjustmentRule::System#Runtime#Serialization#IDeserializationCallback#OnDeserialization","System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#ISerializable#GetObjectData","System::TimeZoneInfo::AdjustmentRule::System#Runtime#Serialization#ISerializable#GetObjectData"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"f9c9a4c6-3ee1-5f5c-da68-bfce995791df","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/TimeZoneInfo+AdjustmentRule.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"TimeZoneInfo+AdjustmentRule class | Microsoft Docs","_op_ogTitle":"TimeZoneInfo+AdjustmentRule class","description":"Provides information about a time zone adjustment, such as the transition to and from daylight saving time.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.TimeZoneInfo.AdjustmentRule","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.timezoneinfo.adjustmentrule","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.timezoneinfo.adjustmentrule","fileRelativePath":"System.TimeZoneInfo.AdjustmentRule.html"},"themesRelativePathToOutputRoot":"_themes/"}