{"content":"    \r\n    <h1 id=\"System_Data_SqlClient_SqlException\">\r\n      <span class=\"lang-csharp\">SqlException</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>The exception that is thrown when SQL Server returns a warning or error. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public sealed class SqlException : System.Data.Common.DbException</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.systemexception\" data-linktype=\"relative-path\">SystemException</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l3\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.runtime.interopservices.externalexception\" data-linktype=\"relative-path\">ExternalException</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l4\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.data.common.dbexception\" data-linktype=\"relative-path\">System.Data.Common.DbException</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l5\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">SqlException</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_Data\" data-linktype=\"relative-path\">Data</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_GetBaseException\" data-linktype=\"relative-path\">GetBaseException()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_HelpLink\" data-linktype=\"relative-path\">HelpLink</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_HResult\" data-linktype=\"relative-path\">HResult</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_InnerException\" data-linktype=\"relative-path\">InnerException</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_Message\" data-linktype=\"relative-path\">Message</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_SerializeObjectState\" data-linktype=\"relative-path\">SerializeObjectState</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_StackTrace\" data-linktype=\"relative-path\">StackTrace</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_TargetSite\" data-linktype=\"relative-path\">TargetSite</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.runtime.interopservices.externalexception#System_Runtime_InteropServices_ExternalException_ErrorCode\" data-linktype=\"relative-path\">ErrorCode</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>This class is created whenever the .NET Framework Data Provider for SQL Server encounters an error generated from the server. (Client side errors are thrown as standard common language runtime exceptions.) SqlException always contains at least one instance of <a class=\"xref\" href=\"system.data.sqlclient.sqlerror\" data-linktype=\"relative-path\">SqlError</a>.  </p>\n<p> Messages that have a severity level of 10 or less are informational and indicate problems caused by mistakes in information that a user has entered. Severity levels from 11 through 16 are generated by the user, and can be corrected by the user. Severity levels from 17 through 25 indicate software or hardware errors. When a level 17, 18, or 19 error occurs, you can continue working, although you might not be able to execute a particular statement.  </p>\n<p> The <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> remains open when the severity level is 19 or less. When the severity level is 20 or greater, the server ordinarily closes the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a>. However, the user can reopen the connection and continue. In both cases, a SqlException is generated by the method executing the command.  </p>\n<p> For information about the warning and informational messages sent by SQL Server, see the Troubleshooting section of SQL Server Books Online. The SqlException class maps to SQL Server severity.  </p>\n<p> The following is general information on handling exceptions. Your code should catch exceptions to prevent the application from crashing and to allow displaying a relevant error message to the user.  You can use database transactions to ensure that the data is consistent regardless of what happens in the client application (including a crash). Features like System.Transaction.TransactionScope or the BeginTransaction method (in System.Data.OleDb.OleDbConnection, System.Data.ODBC.ODBCConnection, and System.Data.SqlClient.SqlConnection) ensure consistent data regardless of exceptions raised by a provider. Transactions can fail, so catch failures and retry the transaction.  </p>\n<p> Note that beginning with  .NET Framework 4.5, SqlException can return an inner <a class=\"xref\" href=\"system.componentmodel.win32exception\" data-linktype=\"relative-path\">Win32Exception</a>.  </p>\n<p> The exception class of a .Net Framework data provider reports provider-specific errors. For example System.Data.Odbc has OdbcException, System.Data.OleDb has OleDbException, and System.Data.SqlClient has SqlException. For the best level of error detail, catch these exceptions and use the members of these exception classes to get details of the error.  </p>\n<p> In addition to the provider-specific errors, .NET Framework data provider types can raise .NET Framework exceptions such as System.OutOfMemoryException and System.Threading.ThreadAbortException. Recovery from these exceptions may not be possible.  </p>\n<p> Bad input can cause a .NET Framework data provider type to raise an exception such as System.ArgumentException or System.IndexOutOfRangeException.  Calling a method at the wrong time can raise System.InvalidOperationException.  </p>\n<p> So, in general, write an exception handler that catches any provider specific exceptions as well as exceptions from the common language runtime.  These can be layered as follows:  </p>\n<pre><code>Try {  \n   // code here  \n}  \ncatch (SqlException odbcEx) {  \n   // Handle more specific SqlException exception here.  \n}  \ncatch (Exception ex) {  \n   // Handle generic ones here.  \n}  \n</code></pre><p> Or:  </p>\n<pre><code>Try {  \n   // code here  \n}  \ncatch (Exception ex) {  \n   if (ex is SqlException) {  \n      // Handle more specific SqlException exception here.  \n   }  \n   Else {  \n      // Handle generic ones here.  \n   }  \n}  \n</code></pre><p> It is also possible for a .NET Framework data provider method call to fail on a thread pool thread with no user code on the stack. In this case, and when using asynchronous method calls, you must register the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_UnhandledException\" data-linktype=\"relative-path\">UnhandledException</a> event to handle those exceptions and avoid application crash.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlException_Class\" data-linktype=\"self-bookmark\">Class</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the severity level of the error returned from the .NET Framework Data Provider for SQL Server.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlException_ClientConnectionId\" data-linktype=\"self-bookmark\">ClientConnectionId</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the client connection ID. For more information, see <a href=\"../Topic/Data%20Tracing%20in%20ADO.NET.md\" data-linktype=\"relative-path\">Data Tracing in ADO.NET</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlException_Errors\" data-linktype=\"self-bookmark\">Errors</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a collection of one or more <a class=\"xref\" href=\"system.data.sqlclient.sqlerror\" data-linktype=\"relative-path\">SqlError</a> objects that give detailed information about exceptions generated by the .NET Framework Data Provider for SQL Server.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlException_LineNumber\" data-linktype=\"self-bookmark\">LineNumber</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the line number within the Transact-SQL command batch or stored procedure that generated the error.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlException_Number\" data-linktype=\"self-bookmark\">Number</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a number that identifies the type of error.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlException_Procedure\" data-linktype=\"self-bookmark\">Procedure</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the name of the stored procedure or remote procedure call (RPC) that generated the error.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlException_Server\" data-linktype=\"self-bookmark\">Server</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the name of the computer that is running an instance of SQL Server that generated the error.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlException_Source\" data-linktype=\"self-bookmark\">Source</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the name of the provider that generated the error.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlException_State\" data-linktype=\"self-bookmark\">State</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a numeric error code from SQL Server that represents an error, warning or &quot;no data found&quot; message. For more information about how to decode these values, see SQL Server Books Online.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlException_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">GetObjectData(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> with information about the exception.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlException_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string that represents the current <a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a> object, and includes the client connection ID (for more information, see <span class=\"xref\">stem.Data.SqlClient.SqlException.ClientConnectionId*</span>).</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlException_Class\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlException_Class_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Class</div>        \r\n          </div>\r\n    \r\n            <p>Gets the severity level of the error returned from the .NET Framework Data Provider for SQL Server.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public byte Class { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p>A value from 1 to 25 that indicates the severity level of the error.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Messages that have a severity level of 10 or less are informational and indicate problems caused by mistakes in information that a user has entered. Severity levels from 11 through 16 are generated by the user, and can be corrected by the user. Severity levels from 17 through 25 indicate software or hardware errors. When a level 17, 18, or 19 error occurs, you can continue working, although you might not be able to execute a particular statement.  </p>\n<p> The <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> remains open when the severity level is 19 or less. When the severity level is 20 or greater, the server ordinarily closes the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a>. However, the user can reopen the connection and continue. In both cases, a <a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a> is generated by the method executing the command.  </p>\n<p> For information about the warning and informational messages sent by SQL Server, see the Troubleshooting section of the SQL Server documentation.  </p>\n<p> This is a wrapper for the <a class=\"xref\" href=\"system.data.sqlclient.sqlerror#System_Data_SqlClient_SqlError_Class_\" data-linktype=\"relative-path\">Class</a> property of the first <a class=\"xref\" href=\"system.data.sqlclient.sqlerror\" data-linktype=\"relative-path\">SqlError</a> in the <a class=\"xref\" href=\"system.data.sqlclient.sqlexception#System_Data_SqlClient_SqlException_Errors_\" data-linktype=\"relative-path\">Errors</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays each <a class=\"xref\" href=\"system.data.sqlclient.sqlerror\" data-linktype=\"relative-path\">SqlError</a> within the <a class=\"xref\" href=\"system.data.sqlclient.sqlerrorcollection\" data-linktype=\"relative-path\">SqlErrorCollection</a> collection.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData SqlException.State Example#1\">using System;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.Text;\n\nclass Program\n{\n    static void Main()\n    {\n        string s = GetConnectionString();\n        ShowSqlException(s);\n        Console.ReadLine();\n    }\n\n    public static void ShowSqlException(string connectionString)\n    {\n        string queryString = &quot;EXECUTE NonExistantStoredProcedure&quot;;\n        StringBuilder errorMessages = new StringBuilder();\n        \n        using (SqlConnection connection = new SqlConnection(connectionString))\n        {\n            SqlCommand command = new SqlCommand(queryString, connection);\n            try\n            {\n                command.Connection.Open();\n                command.ExecuteNonQuery();\n            }\n            catch (SqlException ex)\n            {\n                for (int i = 0; i &lt; ex.Errors.Count; i++)\n                {\n                    errorMessages.Append(&quot;Index #&quot; + i + &quot;<br>&quot; +\n                        &quot;Message: &quot; + ex.Errors[i].Message + &quot;<br>&quot; +\n                        &quot;Error Number: &quot; + ex.Errors[i].Number + &quot;<br>&quot; +\n                        &quot;LineNumber: &quot; + ex.Errors[i].LineNumber + &quot;<br>&quot; +\n                        &quot;Source: &quot; + ex.Errors[i].Source + &quot;<br>&quot; +\n                        &quot;Procedure: &quot; + ex.Errors[i].Procedure + &quot;<br>&quot;);\n                }\n                Console.WriteLine(errorMessages.ToString());\n            }\n        }\n    }\n\n    static private string GetConnectionString()\n    {\n        // To avoid storing the connection string in your code, \n        // you can retrieve it from a configuration file.\n        return &quot;Data Source=(local);Initial Catalog=AdventureWorks;&quot;\n            + &quot;Integrated Security=SSPI&quot;;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData SqlException.State Example#1\">    Public Sub ShowSqlException(ByVal connectionString As String)\n        Dim queryString As String = &quot;EXECUTE NonExistantStoredProcedure&quot;\n        Dim errorMessages As New StringBuilder()\n\n        Using connection As New SqlConnection(connectionString)\n            Dim command As New SqlCommand(queryString, connection)\n\n            Try\n                command.Connection.Open()\n                command.ExecuteNonQuery()\n\n            Catch ex As SqlException\n                Dim i As Integer\n                For i = 0 To ex.Errors.Count - 1\n                    errorMessages.Append(&quot;Index #&quot; &amp; i.ToString() &amp; ControlChars.NewLine _\n                        &amp; &quot;Message: &quot; &amp; ex.Errors(i).Message &amp; ControlChars.NewLine _\n                        &amp; &quot;Error Number: &quot; &amp; ex.Errors(i).Number &amp; ControlChars.NewLine _\n                        &amp; &quot;LineNumber: &quot; &amp; ex.Errors(i).LineNumber &amp; ControlChars.NewLine _\n                        &amp; &quot;Source: &quot; &amp; ex.Errors(i).Source &amp; ControlChars.NewLine _\n                        &amp; &quot;Procedure: &quot; &amp; ex.Errors(i).Procedure &amp; ControlChars.NewLine)\n                Next i\n                Console.WriteLine(errorMessages.ToString())\n            End Try\n        End Using\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlException_ClientConnectionId\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlException_ClientConnectionId_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ClientConnectionId</div>        \r\n          </div>\r\n    \r\n            <p>Represents the client connection ID. For more information, see <a href=\"../Topic/Data%20Tracing%20in%20ADO.NET.md\" data-linktype=\"relative-path\">Data Tracing in ADO.NET</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Guid ClientConnectionId { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </div>\r\n                  <p>Returns the client connection ID.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For a code sample, see <a class=\"xref\" href=\"system.data.sqlclient.sqlexception#System_Data_SqlClient_SqlException_ToString_\" data-linktype=\"relative-path\">ToString</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlException_Errors\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlException_Errors_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Errors</div>        \r\n          </div>\r\n    \r\n            <p>Gets a collection of one or more <a class=\"xref\" href=\"system.data.sqlclient.sqlerror\" data-linktype=\"relative-path\">SqlError</a> objects that give detailed information about exceptions generated by the .NET Framework Data Provider for SQL Server.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.SqlClient.SqlErrorCollection Errors { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlerrorcollection\" data-linktype=\"relative-path\">SqlErrorCollection</a></div>\r\n                  </div>\r\n                  <p>The collected instances of the <a class=\"xref\" href=\"system.data.sqlclient.sqlerror\" data-linktype=\"relative-path\">SqlError</a> class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.data.sqlclient.sqlerrorcollection\" data-linktype=\"relative-path\">SqlErrorCollection</a> class always contains at least one instance of the <a class=\"xref\" href=\"system.data.sqlclient.sqlerror\" data-linktype=\"relative-path\">SqlError</a> class.  </p>\n<p> This is a wrapper for <a class=\"xref\" href=\"system.data.sqlclient.sqlerrorcollection\" data-linktype=\"relative-path\">SqlErrorCollection</a>. For more information on SQL Server engine errors, see SQL Server Books Online.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays each <a class=\"xref\" href=\"system.data.sqlclient.sqlerror\" data-linktype=\"relative-path\">SqlError</a> within the <a class=\"xref\" href=\"system.data.sqlclient.sqlerrorcollection\" data-linktype=\"relative-path\">SqlErrorCollection</a> collection.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic WebData SqlError Example#1\">    Public Sub ShowSqlException(ByVal connectionString As String)\n        Dim queryString As String = &quot;EXECUTE NonExistantStoredProcedure&quot;\n\n        Using connection As New SqlConnection(connectionString)\n            Dim command As New SqlCommand(queryString, connection)\n\n            Try\n                command.Connection.Open()\n                command.ExecuteNonQuery()\n\n            Catch ex As SqlException\n                DisplaySqlErrors(ex)\n            End Try\n        End Using\n    End Sub\n\n    Private Sub DisplaySqlErrors(ByVal exception As SqlException)\n        Dim i As Integer\n\n        For i = 0 To exception.Errors.Count - 1\n            Console.WriteLine(&quot;Index #&quot; &amp; i &amp; ControlChars.NewLine &amp; _\n                &quot;Error: &quot; &amp; exception.Errors(i).ToString() &amp; ControlChars.NewLine)\n        Next i\n        Console.ReadLine()\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData SqlError Example#1\">    public static void ShowSqlException(string connectionString)\n    {\n        string queryString = &quot;EXECUTE NonExistantStoredProcedure&quot;;\n        \n        using (SqlConnection connection = new SqlConnection(connectionString))\n        {\n            SqlCommand command = new SqlCommand(queryString, connection);\n            try\n            {\n                command.Connection.Open();\n                command.ExecuteNonQuery();\n            }\n            catch (SqlException ex)\n            {\n                DisplaySqlErrors(ex);\n            }\n        }\n    }\n\n    private static void DisplaySqlErrors(SqlException exception)\n    {\n        for (int i = 0; i &lt; exception.Errors.Count; i++)\n        {\n            Console.WriteLine(&quot;Index #&quot; + i + &quot;<br>&quot; +\n                &quot;Error: &quot; + exception.Errors[i].ToString() + &quot;<br>&quot;);\n        }\n        Console.ReadLine();\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlException_LineNumber\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlException_LineNumber_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LineNumber</div>        \r\n          </div>\r\n    \r\n            <p>Gets the line number within the Transact-SQL command batch or stored procedure that generated the error.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int LineNumber { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The line number within the Transact-SQL command batch or stored procedure that generated the error.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The line numbering starts at 1; if 0 is returned, the line number is not applicable.  </p>\n<p> This is a wrapper for the <a class=\"xref\" href=\"system.data.sqlclient.sqlerror#System_Data_SqlClient_SqlError_LineNumber_\" data-linktype=\"relative-path\">LineNumber</a> property of the first <a class=\"xref\" href=\"system.data.sqlclient.sqlerror\" data-linktype=\"relative-path\">SqlError</a> in the <a class=\"xref\" href=\"system.data.sqlclient.sqlexception#System_Data_SqlClient_SqlException_Errors_\" data-linktype=\"relative-path\">Errors</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays each <a class=\"xref\" href=\"system.data.sqlclient.sqlerror\" data-linktype=\"relative-path\">SqlError</a> within the <a class=\"xref\" href=\"system.data.sqlclient.sqlerrorcollection\" data-linktype=\"relative-path\">SqlErrorCollection</a> collection.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData SqlException.State Example#1\">using System;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.Text;\n\nclass Program\n{\n    static void Main()\n    {\n        string s = GetConnectionString();\n        ShowSqlException(s);\n        Console.ReadLine();\n    }\n\n    public static void ShowSqlException(string connectionString)\n    {\n        string queryString = &quot;EXECUTE NonExistantStoredProcedure&quot;;\n        StringBuilder errorMessages = new StringBuilder();\n        \n        using (SqlConnection connection = new SqlConnection(connectionString))\n        {\n            SqlCommand command = new SqlCommand(queryString, connection);\n            try\n            {\n                command.Connection.Open();\n                command.ExecuteNonQuery();\n            }\n            catch (SqlException ex)\n            {\n                for (int i = 0; i &lt; ex.Errors.Count; i++)\n                {\n                    errorMessages.Append(&quot;Index #&quot; + i + &quot;<br>&quot; +\n                        &quot;Message: &quot; + ex.Errors[i].Message + &quot;<br>&quot; +\n                        &quot;Error Number: &quot; + ex.Errors[i].Number + &quot;<br>&quot; +\n                        &quot;LineNumber: &quot; + ex.Errors[i].LineNumber + &quot;<br>&quot; +\n                        &quot;Source: &quot; + ex.Errors[i].Source + &quot;<br>&quot; +\n                        &quot;Procedure: &quot; + ex.Errors[i].Procedure + &quot;<br>&quot;);\n                }\n                Console.WriteLine(errorMessages.ToString());\n            }\n        }\n    }\n\n    static private string GetConnectionString()\n    {\n        // To avoid storing the connection string in your code, \n        // you can retrieve it from a configuration file.\n        return &quot;Data Source=(local);Initial Catalog=AdventureWorks;&quot;\n            + &quot;Integrated Security=SSPI&quot;;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData SqlException.State Example#1\">    Public Sub ShowSqlException(ByVal connectionString As String)\n        Dim queryString As String = &quot;EXECUTE NonExistantStoredProcedure&quot;\n        Dim errorMessages As New StringBuilder()\n\n        Using connection As New SqlConnection(connectionString)\n            Dim command As New SqlCommand(queryString, connection)\n\n            Try\n                command.Connection.Open()\n                command.ExecuteNonQuery()\n\n            Catch ex As SqlException\n                Dim i As Integer\n                For i = 0 To ex.Errors.Count - 1\n                    errorMessages.Append(&quot;Index #&quot; &amp; i.ToString() &amp; ControlChars.NewLine _\n                        &amp; &quot;Message: &quot; &amp; ex.Errors(i).Message &amp; ControlChars.NewLine _\n                        &amp; &quot;Error Number: &quot; &amp; ex.Errors(i).Number &amp; ControlChars.NewLine _\n                        &amp; &quot;LineNumber: &quot; &amp; ex.Errors(i).LineNumber &amp; ControlChars.NewLine _\n                        &amp; &quot;Source: &quot; &amp; ex.Errors(i).Source &amp; ControlChars.NewLine _\n                        &amp; &quot;Procedure: &quot; &amp; ex.Errors(i).Procedure &amp; ControlChars.NewLine)\n                Next i\n                Console.WriteLine(errorMessages.ToString())\n            End Try\n        End Using\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlException_Number\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlException_Number_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Number</div>        \r\n          </div>\r\n    \r\n            <p>Gets a number that identifies the type of error.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Number { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number that identifies the type of error.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is a wrapper for the <a class=\"xref\" href=\"system.data.sqlclient.sqlerror#System_Data_SqlClient_SqlError_Number_\" data-linktype=\"relative-path\">Number</a> property of the first <a class=\"xref\" href=\"system.data.sqlclient.sqlerror\" data-linktype=\"relative-path\">SqlError</a> in the <a class=\"xref\" href=\"system.data.sqlclient.sqlexception#System_Data_SqlClient_SqlException_Errors_\" data-linktype=\"relative-path\">Errors</a> property. For more information on SQL Server engine errors, see SQL Server Books Online.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays each <a class=\"xref\" href=\"system.data.sqlclient.sqlerror\" data-linktype=\"relative-path\">SqlError</a> within the <a class=\"xref\" href=\"system.data.sqlclient.sqlerrorcollection\" data-linktype=\"relative-path\">SqlErrorCollection</a> collection.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData SqlException.State Example#1\">using System;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.Text;\n\nclass Program\n{\n    static void Main()\n    {\n        string s = GetConnectionString();\n        ShowSqlException(s);\n        Console.ReadLine();\n    }\n\n    public static void ShowSqlException(string connectionString)\n    {\n        string queryString = &quot;EXECUTE NonExistantStoredProcedure&quot;;\n        StringBuilder errorMessages = new StringBuilder();\n        \n        using (SqlConnection connection = new SqlConnection(connectionString))\n        {\n            SqlCommand command = new SqlCommand(queryString, connection);\n            try\n            {\n                command.Connection.Open();\n                command.ExecuteNonQuery();\n            }\n            catch (SqlException ex)\n            {\n                for (int i = 0; i &lt; ex.Errors.Count; i++)\n                {\n                    errorMessages.Append(&quot;Index #&quot; + i + &quot;<br>&quot; +\n                        &quot;Message: &quot; + ex.Errors[i].Message + &quot;<br>&quot; +\n                        &quot;Error Number: &quot; + ex.Errors[i].Number + &quot;<br>&quot; +\n                        &quot;LineNumber: &quot; + ex.Errors[i].LineNumber + &quot;<br>&quot; +\n                        &quot;Source: &quot; + ex.Errors[i].Source + &quot;<br>&quot; +\n                        &quot;Procedure: &quot; + ex.Errors[i].Procedure + &quot;<br>&quot;);\n                }\n                Console.WriteLine(errorMessages.ToString());\n            }\n        }\n    }\n\n    static private string GetConnectionString()\n    {\n        // To avoid storing the connection string in your code, \n        // you can retrieve it from a configuration file.\n        return &quot;Data Source=(local);Initial Catalog=AdventureWorks;&quot;\n            + &quot;Integrated Security=SSPI&quot;;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData SqlException.State Example#1\">    Public Sub ShowSqlException(ByVal connectionString As String)\n        Dim queryString As String = &quot;EXECUTE NonExistantStoredProcedure&quot;\n        Dim errorMessages As New StringBuilder()\n\n        Using connection As New SqlConnection(connectionString)\n            Dim command As New SqlCommand(queryString, connection)\n\n            Try\n                command.Connection.Open()\n                command.ExecuteNonQuery()\n\n            Catch ex As SqlException\n                Dim i As Integer\n                For i = 0 To ex.Errors.Count - 1\n                    errorMessages.Append(&quot;Index #&quot; &amp; i.ToString() &amp; ControlChars.NewLine _\n                        &amp; &quot;Message: &quot; &amp; ex.Errors(i).Message &amp; ControlChars.NewLine _\n                        &amp; &quot;Error Number: &quot; &amp; ex.Errors(i).Number &amp; ControlChars.NewLine _\n                        &amp; &quot;LineNumber: &quot; &amp; ex.Errors(i).LineNumber &amp; ControlChars.NewLine _\n                        &amp; &quot;Source: &quot; &amp; ex.Errors(i).Source &amp; ControlChars.NewLine _\n                        &amp; &quot;Procedure: &quot; &amp; ex.Errors(i).Procedure &amp; ControlChars.NewLine)\n                Next i\n                Console.WriteLine(errorMessages.ToString())\n            End Try\n        End Using\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlException_Procedure\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlException_Procedure_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Procedure</div>        \r\n          </div>\r\n    \r\n            <p>Gets the name of the stored procedure or remote procedure call (RPC) that generated the error.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Procedure { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the stored procedure or RPC.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is a wrapper for the <a class=\"xref\" href=\"system.data.sqlclient.sqlerror#System_Data_SqlClient_SqlError_Procedure_\" data-linktype=\"relative-path\">Procedure</a> property of the first <a class=\"xref\" href=\"system.data.sqlclient.sqlerror\" data-linktype=\"relative-path\">SqlError</a> in the <a class=\"xref\" href=\"system.data.sqlclient.sqlexception#System_Data_SqlClient_SqlException_Errors_\" data-linktype=\"relative-path\">Errors</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays each <a class=\"xref\" href=\"system.data.sqlclient.sqlerror\" data-linktype=\"relative-path\">SqlError</a> within the <a class=\"xref\" href=\"system.data.sqlclient.sqlerrorcollection\" data-linktype=\"relative-path\">SqlErrorCollection</a> collection.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData SqlException.State Example#1\">using System;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.Text;\n\nclass Program\n{\n    static void Main()\n    {\n        string s = GetConnectionString();\n        ShowSqlException(s);\n        Console.ReadLine();\n    }\n\n    public static void ShowSqlException(string connectionString)\n    {\n        string queryString = &quot;EXECUTE NonExistantStoredProcedure&quot;;\n        StringBuilder errorMessages = new StringBuilder();\n        \n        using (SqlConnection connection = new SqlConnection(connectionString))\n        {\n            SqlCommand command = new SqlCommand(queryString, connection);\n            try\n            {\n                command.Connection.Open();\n                command.ExecuteNonQuery();\n            }\n            catch (SqlException ex)\n            {\n                for (int i = 0; i &lt; ex.Errors.Count; i++)\n                {\n                    errorMessages.Append(&quot;Index #&quot; + i + &quot;<br>&quot; +\n                        &quot;Message: &quot; + ex.Errors[i].Message + &quot;<br>&quot; +\n                        &quot;Error Number: &quot; + ex.Errors[i].Number + &quot;<br>&quot; +\n                        &quot;LineNumber: &quot; + ex.Errors[i].LineNumber + &quot;<br>&quot; +\n                        &quot;Source: &quot; + ex.Errors[i].Source + &quot;<br>&quot; +\n                        &quot;Procedure: &quot; + ex.Errors[i].Procedure + &quot;<br>&quot;);\n                }\n                Console.WriteLine(errorMessages.ToString());\n            }\n        }\n    }\n\n    static private string GetConnectionString()\n    {\n        // To avoid storing the connection string in your code, \n        // you can retrieve it from a configuration file.\n        return &quot;Data Source=(local);Initial Catalog=AdventureWorks;&quot;\n            + &quot;Integrated Security=SSPI&quot;;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData SqlException.State Example#1\">    Public Sub ShowSqlException(ByVal connectionString As String)\n        Dim queryString As String = &quot;EXECUTE NonExistantStoredProcedure&quot;\n        Dim errorMessages As New StringBuilder()\n\n        Using connection As New SqlConnection(connectionString)\n            Dim command As New SqlCommand(queryString, connection)\n\n            Try\n                command.Connection.Open()\n                command.ExecuteNonQuery()\n\n            Catch ex As SqlException\n                Dim i As Integer\n                For i = 0 To ex.Errors.Count - 1\n                    errorMessages.Append(&quot;Index #&quot; &amp; i.ToString() &amp; ControlChars.NewLine _\n                        &amp; &quot;Message: &quot; &amp; ex.Errors(i).Message &amp; ControlChars.NewLine _\n                        &amp; &quot;Error Number: &quot; &amp; ex.Errors(i).Number &amp; ControlChars.NewLine _\n                        &amp; &quot;LineNumber: &quot; &amp; ex.Errors(i).LineNumber &amp; ControlChars.NewLine _\n                        &amp; &quot;Source: &quot; &amp; ex.Errors(i).Source &amp; ControlChars.NewLine _\n                        &amp; &quot;Procedure: &quot; &amp; ex.Errors(i).Procedure &amp; ControlChars.NewLine)\n                Next i\n                Console.WriteLine(errorMessages.ToString())\n            End Try\n        End Using\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlException_Server\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlException_Server_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Server</div>        \r\n          </div>\r\n    \r\n            <p>Gets the name of the computer that is running an instance of SQL Server that generated the error.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Server { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the computer running an instance of SQL Server.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is a wrapper for the <a class=\"xref\" href=\"system.data.sqlclient.sqlerror#System_Data_SqlClient_SqlError_Server_\" data-linktype=\"relative-path\">Server</a> property of the first <a class=\"xref\" href=\"system.data.sqlclient.sqlerror\" data-linktype=\"relative-path\">SqlError</a> in the <a class=\"xref\" href=\"system.data.sqlclient.sqlexception#System_Data_SqlClient_SqlException_Errors_\" data-linktype=\"relative-path\">Errors</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays each <a class=\"xref\" href=\"system.data.sqlclient.sqlerror\" data-linktype=\"relative-path\">SqlError</a> within the <a class=\"xref\" href=\"system.data.sqlclient.sqlerrorcollection\" data-linktype=\"relative-path\">SqlErrorCollection</a> collection.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData SqlException.State Example#1\">using System;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.Text;\n\nclass Program\n{\n    static void Main()\n    {\n        string s = GetConnectionString();\n        ShowSqlException(s);\n        Console.ReadLine();\n    }\n\n    public static void ShowSqlException(string connectionString)\n    {\n        string queryString = &quot;EXECUTE NonExistantStoredProcedure&quot;;\n        StringBuilder errorMessages = new StringBuilder();\n        \n        using (SqlConnection connection = new SqlConnection(connectionString))\n        {\n            SqlCommand command = new SqlCommand(queryString, connection);\n            try\n            {\n                command.Connection.Open();\n                command.ExecuteNonQuery();\n            }\n            catch (SqlException ex)\n            {\n                for (int i = 0; i &lt; ex.Errors.Count; i++)\n                {\n                    errorMessages.Append(&quot;Index #&quot; + i + &quot;<br>&quot; +\n                        &quot;Message: &quot; + ex.Errors[i].Message + &quot;<br>&quot; +\n                        &quot;Error Number: &quot; + ex.Errors[i].Number + &quot;<br>&quot; +\n                        &quot;LineNumber: &quot; + ex.Errors[i].LineNumber + &quot;<br>&quot; +\n                        &quot;Source: &quot; + ex.Errors[i].Source + &quot;<br>&quot; +\n                        &quot;Procedure: &quot; + ex.Errors[i].Procedure + &quot;<br>&quot;);\n                }\n                Console.WriteLine(errorMessages.ToString());\n            }\n        }\n    }\n\n    static private string GetConnectionString()\n    {\n        // To avoid storing the connection string in your code, \n        // you can retrieve it from a configuration file.\n        return &quot;Data Source=(local);Initial Catalog=AdventureWorks;&quot;\n            + &quot;Integrated Security=SSPI&quot;;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData SqlException.State Example#1\">    Public Sub ShowSqlException(ByVal connectionString As String)\n        Dim queryString As String = &quot;EXECUTE NonExistantStoredProcedure&quot;\n        Dim errorMessages As New StringBuilder()\n\n        Using connection As New SqlConnection(connectionString)\n            Dim command As New SqlCommand(queryString, connection)\n\n            Try\n                command.Connection.Open()\n                command.ExecuteNonQuery()\n\n            Catch ex As SqlException\n                Dim i As Integer\n                For i = 0 To ex.Errors.Count - 1\n                    errorMessages.Append(&quot;Index #&quot; &amp; i.ToString() &amp; ControlChars.NewLine _\n                        &amp; &quot;Message: &quot; &amp; ex.Errors(i).Message &amp; ControlChars.NewLine _\n                        &amp; &quot;Error Number: &quot; &amp; ex.Errors(i).Number &amp; ControlChars.NewLine _\n                        &amp; &quot;LineNumber: &quot; &amp; ex.Errors(i).LineNumber &amp; ControlChars.NewLine _\n                        &amp; &quot;Source: &quot; &amp; ex.Errors(i).Source &amp; ControlChars.NewLine _\n                        &amp; &quot;Procedure: &quot; &amp; ex.Errors(i).Procedure &amp; ControlChars.NewLine)\n                Next i\n                Console.WriteLine(errorMessages.ToString())\n            End Try\n        End Using\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlException_Source\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlException_Source_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Source</div>        \r\n          </div>\r\n    \r\n            <p>Gets the name of the provider that generated the error.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string Source { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the provider that generated the error.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is a wrapper for the <a class=\"xref\" href=\"system.data.sqlclient.sqlerror#System_Data_SqlClient_SqlError_Source_\" data-linktype=\"relative-path\">Source</a> property of the first <a class=\"xref\" href=\"system.data.sqlclient.sqlerror\" data-linktype=\"relative-path\">SqlError</a> in the <a class=\"xref\" href=\"system.data.sqlclient.sqlexception#System_Data_SqlClient_SqlException_Errors_\" data-linktype=\"relative-path\">Errors</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays each <a class=\"xref\" href=\"system.data.sqlclient.sqlerror\" data-linktype=\"relative-path\">SqlError</a> within the <a class=\"xref\" href=\"system.data.sqlclient.sqlerrorcollection\" data-linktype=\"relative-path\">SqlErrorCollection</a> collection.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData SqlException.State Example#1\">using System;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.Text;\n\nclass Program\n{\n    static void Main()\n    {\n        string s = GetConnectionString();\n        ShowSqlException(s);\n        Console.ReadLine();\n    }\n\n    public static void ShowSqlException(string connectionString)\n    {\n        string queryString = &quot;EXECUTE NonExistantStoredProcedure&quot;;\n        StringBuilder errorMessages = new StringBuilder();\n        \n        using (SqlConnection connection = new SqlConnection(connectionString))\n        {\n            SqlCommand command = new SqlCommand(queryString, connection);\n            try\n            {\n                command.Connection.Open();\n                command.ExecuteNonQuery();\n            }\n            catch (SqlException ex)\n            {\n                for (int i = 0; i &lt; ex.Errors.Count; i++)\n                {\n                    errorMessages.Append(&quot;Index #&quot; + i + &quot;<br>&quot; +\n                        &quot;Message: &quot; + ex.Errors[i].Message + &quot;<br>&quot; +\n                        &quot;Error Number: &quot; + ex.Errors[i].Number + &quot;<br>&quot; +\n                        &quot;LineNumber: &quot; + ex.Errors[i].LineNumber + &quot;<br>&quot; +\n                        &quot;Source: &quot; + ex.Errors[i].Source + &quot;<br>&quot; +\n                        &quot;Procedure: &quot; + ex.Errors[i].Procedure + &quot;<br>&quot;);\n                }\n                Console.WriteLine(errorMessages.ToString());\n            }\n        }\n    }\n\n    static private string GetConnectionString()\n    {\n        // To avoid storing the connection string in your code, \n        // you can retrieve it from a configuration file.\n        return &quot;Data Source=(local);Initial Catalog=AdventureWorks;&quot;\n            + &quot;Integrated Security=SSPI&quot;;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData SqlException.State Example#1\">    Public Sub ShowSqlException(ByVal connectionString As String)\n        Dim queryString As String = &quot;EXECUTE NonExistantStoredProcedure&quot;\n        Dim errorMessages As New StringBuilder()\n\n        Using connection As New SqlConnection(connectionString)\n            Dim command As New SqlCommand(queryString, connection)\n\n            Try\n                command.Connection.Open()\n                command.ExecuteNonQuery()\n\n            Catch ex As SqlException\n                Dim i As Integer\n                For i = 0 To ex.Errors.Count - 1\n                    errorMessages.Append(&quot;Index #&quot; &amp; i.ToString() &amp; ControlChars.NewLine _\n                        &amp; &quot;Message: &quot; &amp; ex.Errors(i).Message &amp; ControlChars.NewLine _\n                        &amp; &quot;Error Number: &quot; &amp; ex.Errors(i).Number &amp; ControlChars.NewLine _\n                        &amp; &quot;LineNumber: &quot; &amp; ex.Errors(i).LineNumber &amp; ControlChars.NewLine _\n                        &amp; &quot;Source: &quot; &amp; ex.Errors(i).Source &amp; ControlChars.NewLine _\n                        &amp; &quot;Procedure: &quot; &amp; ex.Errors(i).Procedure &amp; ControlChars.NewLine)\n                Next i\n                Console.WriteLine(errorMessages.ToString())\n            End Try\n        End Using\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlException_State\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlException_State_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">State</div>        \r\n          </div>\r\n    \r\n            <p>Gets a numeric error code from SQL Server that represents an error, warning or &quot;no data found&quot; message. For more information about how to decode these values, see SQL Server Books Online.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public byte State { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p>The number representing the error code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is a wrapper for the <a class=\"xref\" href=\"system.data.sqlclient.sqlerror#System_Data_SqlClient_SqlError_State_\" data-linktype=\"relative-path\">State</a> property of the first <a class=\"xref\" href=\"system.data.sqlclient.sqlerror\" data-linktype=\"relative-path\">SqlError</a> in the <a class=\"xref\" href=\"system.data.sqlclient.sqlexception#System_Data_SqlClient_SqlException_Errors_\" data-linktype=\"relative-path\">Errors</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays each <a class=\"xref\" href=\"system.data.sqlclient.sqlerror\" data-linktype=\"relative-path\">SqlError</a> within the <a class=\"xref\" href=\"system.data.sqlclient.sqlerrorcollection\" data-linktype=\"relative-path\">SqlErrorCollection</a> collection.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData SqlException.State Example#1\">using System;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.Text;\n\nclass Program\n{\n    static void Main()\n    {\n        string s = GetConnectionString();\n        ShowSqlException(s);\n        Console.ReadLine();\n    }\n\n    public static void ShowSqlException(string connectionString)\n    {\n        string queryString = &quot;EXECUTE NonExistantStoredProcedure&quot;;\n        StringBuilder errorMessages = new StringBuilder();\n        \n        using (SqlConnection connection = new SqlConnection(connectionString))\n        {\n            SqlCommand command = new SqlCommand(queryString, connection);\n            try\n            {\n                command.Connection.Open();\n                command.ExecuteNonQuery();\n            }\n            catch (SqlException ex)\n            {\n                for (int i = 0; i &lt; ex.Errors.Count; i++)\n                {\n                    errorMessages.Append(&quot;Index #&quot; + i + &quot;<br>&quot; +\n                        &quot;Message: &quot; + ex.Errors[i].Message + &quot;<br>&quot; +\n                        &quot;Error Number: &quot; + ex.Errors[i].Number + &quot;<br>&quot; +\n                        &quot;LineNumber: &quot; + ex.Errors[i].LineNumber + &quot;<br>&quot; +\n                        &quot;Source: &quot; + ex.Errors[i].Source + &quot;<br>&quot; +\n                        &quot;Procedure: &quot; + ex.Errors[i].Procedure + &quot;<br>&quot;);\n                }\n                Console.WriteLine(errorMessages.ToString());\n            }\n        }\n    }\n\n    static private string GetConnectionString()\n    {\n        // To avoid storing the connection string in your code, \n        // you can retrieve it from a configuration file.\n        return &quot;Data Source=(local);Initial Catalog=AdventureWorks;&quot;\n            + &quot;Integrated Security=SSPI&quot;;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData SqlException.State Example#1\">    Public Sub ShowSqlException(ByVal connectionString As String)\n        Dim queryString As String = &quot;EXECUTE NonExistantStoredProcedure&quot;\n        Dim errorMessages As New StringBuilder()\n\n        Using connection As New SqlConnection(connectionString)\n            Dim command As New SqlCommand(queryString, connection)\n\n            Try\n                command.Connection.Open()\n                command.ExecuteNonQuery()\n\n            Catch ex As SqlException\n                Dim i As Integer\n                For i = 0 To ex.Errors.Count - 1\n                    errorMessages.Append(&quot;Index #&quot; &amp; i.ToString() &amp; ControlChars.NewLine _\n                        &amp; &quot;Message: &quot; &amp; ex.Errors(i).Message &amp; ControlChars.NewLine _\n                        &amp; &quot;Error Number: &quot; &amp; ex.Errors(i).Number &amp; ControlChars.NewLine _\n                        &amp; &quot;LineNumber: &quot; &amp; ex.Errors(i).LineNumber &amp; ControlChars.NewLine _\n                        &amp; &quot;Source: &quot; &amp; ex.Errors(i).Source &amp; ControlChars.NewLine _\n                        &amp; &quot;Procedure: &quot; &amp; ex.Errors(i).Procedure &amp; ControlChars.NewLine)\n                Next i\n                Console.WriteLine(errorMessages.ToString())\n            End Try\n        End Using\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlException_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlException_GetObjectData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetObjectData(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> with information about the exception.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void GetObjectData (System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>si</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> that holds the serialized object data about the exception being thrown.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a> that contains contextual information about the source or destination.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>si</code> parameter is a null reference (<code>Nothing</code> in Visual Basic).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>GetObjectData</code> sets a <code>SerializationInfo</code> with all the exception object data targeted for serialization. During deserialization, the exception is reconstituted from the <code>SerializationInfo</code> transmitted over the stream.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlException_ToString\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlException_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string that represents the current <a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a> object, and includes the client connection ID (for more information, see <span class=\"xref\">stem.Data.SqlClient.SqlException.ClientConnectionId*</span>).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that represents the current <a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a> object.<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following C# example shows how a connection attempt to a valid server but non-existent database causes a <a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a>, which includes the client connection ID:  </p>\n<pre><code>using System.Data.SqlClient;  \nusing System;  \n\npublic class A {  \n   public static void Main() {  \n      SqlConnection connection = new SqlConnection();  \n      connection.ConnectionString = &quot;Data Source=a_valid_server;Initial Catalog=Northwinda;Integrated Security=true&quot;;  \n      try {  \n         connection.Open();  \n      }  \n      catch (SqlException p) {  \n         Console.WriteLine(&quot;{0}&quot;, p.ClientConnectionId);  \n         Console.WriteLine(&quot;{0}&quot;, p.ToString());  \n      }  \n      connection.Close();  \n   }  \n}  \n</code></pre><p> The following Visual Basic sample is functionally equivalent to the previous (C#) sample:  </p>\n<pre><code>Imports System.Data.SqlClient  \nImports System  \n\nModule Module1  \n\n    Sub Main()  \n        Dim connection As New SqlConnection()  \n        connection.ConnectionString = &quot;Data Source=a_valid_server;Initial Catalog=Northwinda;Integrated Security=true&quot;  \n        Try  \n            connection.Open()  \n        Catch p As SqlException  \n            Console.WriteLine(&quot;{0}&quot;, p.ClientConnectionId)  \n            Console.WriteLine(&quot;{0}&quot;, p.ToString())  \n        End Try  \n        connection.Close()  \n    End Sub  \n\nEnd Module  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Data.SqlClient.SqlException.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Data.SqlClient.SqlException.yml\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlException\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlException.Class\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlException.ClientConnectionId\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlException.Errors\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlException.GetObjectData\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlException.LineNumber\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlException.Number\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlException.Procedure\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlException.Server\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlException.Source\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlException.State\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlException.ToString\">\r\n<meta name=\"APILocation\" content=\"System.Data.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"75c7e0dc-0464-c545-2f79-ac600479fc05\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"The exception that is thrown when SQL Server returns a warning or error. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Data.SqlClient/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Data.SqlClient.SqlException\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Data.SqlClient.SqlException.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Data.SqlClient.SqlException.yml","open_to_public_contributors":true,"api_name":["System.Data.SqlClient.SqlException","System.Data.SqlClient.SqlException.Class","System.Data.SqlClient.SqlException.ClientConnectionId","System.Data.SqlClient.SqlException.Errors","System.Data.SqlClient.SqlException.GetObjectData","System.Data.SqlClient.SqlException.LineNumber","System.Data.SqlClient.SqlException.Number","System.Data.SqlClient.SqlException.Procedure","System.Data.SqlClient.SqlException.Server","System.Data.SqlClient.SqlException.Source","System.Data.SqlClient.SqlException.State","System.Data.SqlClient.SqlException.ToString"],"api_location":["System.Data.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Data.SqlClient.SqlException","System::Data::SqlClient::SqlException","System.Data.SqlClient.SqlException.Class","System::Data::SqlClient::SqlException::Class","System.Data.SqlClient.SqlException.ClientConnectionId","System::Data::SqlClient::SqlException::ClientConnectionId","System.Data.SqlClient.SqlException.Errors","System::Data::SqlClient::SqlException::Errors","System.Data.SqlClient.SqlException.GetObjectData","System::Data::SqlClient::SqlException::GetObjectData","System.Data.SqlClient.SqlException.LineNumber","System::Data::SqlClient::SqlException::LineNumber","System.Data.SqlClient.SqlException.Number","System::Data::SqlClient::SqlException::Number","System.Data.SqlClient.SqlException.Procedure","System::Data::SqlClient::SqlException::Procedure","System.Data.SqlClient.SqlException.Server","System::Data::SqlClient::SqlException::Server","System.Data.SqlClient.SqlException.Source","System::Data::SqlClient::SqlException::Source","System.Data.SqlClient.SqlException.State","System::Data::SqlClient::SqlException::State","System.Data.SqlClient.SqlException.ToString","System::Data::SqlClient::SqlException::ToString"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"75c7e0dc-0464-c545-2f79-ac600479fc05","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Data.SqlClient/SqlException.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"SqlException class | Microsoft Docs","_op_ogTitle":"SqlException class","description":"The exception that is thrown when SQL Server returns a warning or error. This class cannot be inherited.\n","toc_asset_id":"_splitted/System.Data.SqlClient/toc.json","toc_rel":"_splitted/System.Data.SqlClient/toc.json","source_url":"","ms.assetid":"System.Data.SqlClient.SqlException","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.data.sqlclient.sqlexception","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.data.sqlclient.sqlexception","fileRelativePath":"System.Data.SqlClient.SqlException.html"},"themesRelativePathToOutputRoot":"_themes/"}