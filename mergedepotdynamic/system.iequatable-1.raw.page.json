{"content":"    \r\n    <h1 id=\"System_IEquatable_1\">\r\n      <span class=\"lang-csharp\">IEquatable&lt;T&gt;</span>\r\n        Interface\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Defines a generalized method that a value type or class implements to create a type-specific method for determining equality of instances.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public interface IEquatable&lt;T&gt;</code></pre>\r\n    \r\n    \r\n    \t<h2>Type Parameters</h2>\r\n    \r\n    \t<table class=\"nameValue\">\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of objects to compare.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t</table>\r\n    \r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>This interface is implemented by types whose values can be equated (for example, the numeric and string classes). A value type or class implements the <a class=\"xref\" href=\"system.iequatable-1#System_IEquatable_1_Equals_\" data-linktype=\"relative-path\">Equals</a> method to create a type-specific method suitable for determining equality of instances.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> interface defines the <a class=\"xref\" href=\"system.icomparable-1#System_IComparable_1_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method, which determines the sort order of instances of the implementing type. The IEquatable(T) interface defines the <a class=\"xref\" href=\"system.iequatable-1#System_IEquatable_1_Equals_\" data-linktype=\"relative-path\">Equals</a> method, which determines the equality of instances of the implementing type.  </p>\n</div>\n<p> The IEquatable(T) interface is used by generic collection objects such as <a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a>, <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>, and <a class=\"xref\" href=\"system.collections.generic.linkedlist-1\" data-linktype=\"relative-path\">LinkedList&lt;T&gt;</a> when testing for equality in such methods as <code>Contains</code>, <code>IndexOf</code>, <code>LastIndexOf</code>, and <code>Remove</code>. It should be implemented for any object that might be stored in a generic collection.</p>\n\r\n    \r\n    \r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IEquatable_1_Equals__0_\" data-linktype=\"self-bookmark\">Equals(T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the current object is equal to another object of the same type.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IEquatable_1_Equals__0_\">\r\n    \r\n            <a id=\"System_IEquatable_1_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(T)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the current object is equal to another object of the same type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Equals (T other);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>other</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare with this object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current object is equal to the <code>other</code> parameter; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The implementation of the Equals method is intended to perform a test for equality with another object of type <code>T</code>, the same type as the current object. The Equals method is called in the following circumstances:  </p>\n<ul>\n<li><p>When the <code>Equals</code> method is called and the <code>other</code> parameter represents a strongly-typed object of type <code>T</code>. (If <code>other</code> is of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>, the base <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">System.Object.Equals(Object)</a> method is called. Of the two methods, Equals offers slightly better performance.)  </p>\n</li>\n<li><p>When the search methods of a number of generic collection objects are called. Some of these types and their methods include the following:  </p>\n<ul>\n<li><p>Some of the generic overloads of the <a class=\"xref\" href=\"system.array#System_Array_BinarySearch_\" data-linktype=\"relative-path\">BinarySearch</a> method.  </p>\n</li>\n<li><p>The search methods of the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> class, including <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Contains__0_\" data-linktype=\"relative-path\">System.Collections.Generic.List&lt;T&gt;.Contains(T)</a>, <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a>, <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a>, and <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Remove_\" data-linktype=\"relative-path\">Remove</a>.  </p>\n</li>\n<li><p>The search methods of the <a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a> class, including <a class=\"xref\" href=\"system.collections.generic.dictionary-2#System_Collections_Generic_Dictionary_2_ContainsKey_\" data-linktype=\"relative-path\">ContainsKey</a> and <a class=\"xref\" href=\"system.collections.generic.idictionary-2#System_Collections_Generic_IDictionary_2_Remove_\" data-linktype=\"relative-path\">Remove</a>.  </p>\n</li>\n<li><p>The search methods of the generic <a class=\"xref\" href=\"system.collections.generic.linkedlist-1\" data-linktype=\"relative-path\">LinkedList&lt;T&gt;</a> class, including <a class=\"xref\" href=\"system.collections.generic.linkedlist-1#System_Collections_Generic_LinkedList_1_Contains_\" data-linktype=\"relative-path\">Contains</a> and <a class=\"xref\" href=\"system.collections.generic.linkedlist-1#System_Collections_Generic_LinkedList_1_Remove_\" data-linktype=\"relative-path\">Remove</a>.  </p>\n</li>\n</ul>\n<p>In other words, to handle the possibility that objects of a class will be stored in an array or a generic collection object, it is a good idea to implement <a class=\"xref\" href=\"system.iequatable-1\" data-linktype=\"relative-path\">IEquatable&lt;T&gt;</a> so that the object can be easily identified and manipulated.  </p>\n<p>When implementing the Equals method, define equality appropriately for the type specified by the generic type argument. For example, if the type argument is <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, define equality appropriately for the comparison of two 32-bit signed integers.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows the partial implementation of a <code>Person</code> class that implements <a class=\"xref\" href=\"system.iequatable-1\" data-linktype=\"relative-path\">IEquatable&lt;T&gt;</a> and has two properties, <code>LastName</code> and <code>SSN</code>. The Equals method returns <code>True</code> if the <code>SSN</code> property of two <code>Person</code> objects is identical; otherwise, it returns <code>False</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"System.GenericIEquatable.Equals#3\">Imports System.Collections.Generic\nImports System.Text.RegularExpressions\n\nPublic Class Person : Implements IEquatable(Of Person)\n   Private uniqueSsn As String\n   Private lName As String\n   \n   Public Sub New(lastName As String, ssn As String)\n      If Regex.IsMatch(ssn, &quot;\\d{9}&quot;) Then\n         uniqueSsn = String.Format(&quot;{0}-(1}-{2}&quot;, ssn.Substring(0, 3), _\n                                                  ssn.Substring(3, 2), _\n                                                  ssn.Substring(5, 4))\n      ElseIf Regex.IsMatch(ssn, &quot;\\d{3}-\\d{2}-\\d{4}&quot;) Then\n         uniqueSsn = ssn\n      Else \n         Throw New FormatException(&quot;The social security number has an invalid format.&quot;)\n      End If\n      Me.uniqueSsn = ssn\n      Me.LastName = lastName\n   End Sub\n   \n   Public ReadOnly Property SSN As String\n      Get\n         Return Me.uniqueSsn\n      End Get      \n   End Property\n   \n   Public Property LastName As String\n      Get\n         Return Me.lName\n      End Get\n      Set\n         If String.IsNullOrEmpty(value) Then\n            Throw New ArgumentException(&quot;The last name cannot be null or empty.&quot;)\n         Else\n            lname = value\n         End If   \n      End Set\n   End Property\n   \n   Public Overloads Function Equals(other As Person) As Boolean _\n                   Implements IEquatable(Of Person).Equals\n      If other Is Nothing Then Return False\n      \n      If Me.uniqueSsn = other.uniqueSsn Then\n         Return True\n      Else\n         Return False\n      End If\n   End Function\n\n   Public Overrides Function Equals(obj As Object) As Boolean\n      If obj Is Nothing Then Return False\n      \n      Dim personObj As Person = TryCast(obj, Person)\n      If personObj Is Nothing Then\n         Return False\n      Else   \n         Return Equals(personObj)   \n      End If\n   End Function   \n   \n   Public Overrides Function GetHashCode() As Integer\n      Return Me.SSN.GetHashCode()\n   End Function\n   \n   Public Shared Operator = (person1 As Person, person2 As Person) As Boolean\n      If person1 Is Nothing OrElse person2 Is Nothing Then\n         Return Object.Equals(person1, person2)\n      End If\n         \n      Return person1.Equals(person2)\n   End Operator\n   \n   Public Shared Operator &lt;&gt; (person1 As Person, person2 As Person) As Boolean\n      If person1 Is Nothing OrElse person2 Is Nothing Then\n         Return Not Object.Equals(person1, person2) \n      End If\n      \n      Return Not person1.Equals(person2)\n   End Operator\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.GenericIEquatable.Equals#3\">using System;\nusing System.Collections.Generic;\nusing System.Text.RegularExpressions;\n\npublic class Person : IEquatable&lt;Person&gt;\n{\n   private string uniqueSsn;\n   private string lName;\n\n   public Person(string lastName, string ssn)\n   {\n      if (Regex.IsMatch(ssn, @&quot;\\d{9}&quot;))\n         uniqueSsn = String.Format(&quot;{0}-(1}-{2}&quot;, ssn.Substring(0, 3),\n                                                  ssn.Substring(3, 2),\n                                                  ssn.Substring(5, 4));\n      else if (Regex.IsMatch(ssn, @&quot;\\d{3}-\\d{2}-\\d{4}&quot;))\n         uniqueSsn = ssn;\n      else\n         throw new FormatException(&quot;The social security number has an invalid format.&quot;);\n\n      uniqueSsn = ssn;\n      this.LastName = lastName;\n   }\n\n   public string SSN\n   {\n      get { return this.uniqueSsn; }\n   }\n\n   public string LastName\n   {\n      get { return this.lName; }\n      set {\n         if (String.IsNullOrEmpty(value))\n            throw new ArgumentException(&quot;The last name cannot be null or empty.&quot;);\n         else\n            this.lName = value;\n      }\n   }\n\n   public bool Equals(Person other)\n   {\n      if (other == null)\n         return false;\n\n      if (this.uniqueSsn == other.uniqueSsn)\n         return true;\n      else\n         return false;\n   }\n\n   public override bool Equals(Object obj)\n   {\n      if (obj == null)\n         return false;\n\n      Person personObj = obj as Person;\n      if (personObj == null)\n         return false;\n      else\n         return Equals(personObj);\n   }\n\n   public override int GetHashCode()\n   {\n      return this.SSN.GetHashCode();\n   }\n\n   public static bool operator == (Person person1, Person person2)\n   {\n      if (((object)person1) == null || ((object)person2) == null)\n         return Object.Equals(person1, person2);\n\n      return person1.Equals(person2);\n   }\n\n   public static bool operator != (Person person1, Person person2)\n   {\n      if (((object)person1) == null || ((object)person2) == null)\n         return ! Object.Equals(person1, person2);\n\n      return ! (person1.Equals(person2));\n   }\n}\n</code></pre><p> <code>Person</code> objects can then be stored in a <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> object and can be identified by the <code>Contains</code> method, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.GenericIEquatable.Equals#12\">Module TestIEquatable\n   Public Sub Main()\n      &#39; Create a Person object for each job applicant.\n      Dim applicant1 As New Person(&quot;Jones&quot;, &quot;099-29-4999&quot;)\n      Dim applicant2 As New Person(&quot;Jones&quot;, &quot;199-29-3999&quot;)\n      Dim applicant3 As New Person(&quot;Jones&quot;, &quot;299-49-6999&quot;)\n\n      &#39; Add applicants to a List object.\n      Dim applicants As New List(Of Person)\n      applicants.Add(applicant1)\n      applicants.Add(applicant2)\n      applicants.Add(applicant3)\n      \n      &#39; Create a Person object for the final candidate.\n      Dim candidate As New Person(&quot;Jones&quot;, &quot;199-29-3999&quot;)\n      \n      If applicants.Contains(candidate) Then\n         Console.WriteLine(&quot;Found {0} (SSN {1}).&quot;, _\n                            candidate.LastName, candidate.SSN)\n      Else\n         Console.WriteLine(&quot;Applicant {0} not found.&quot;, candidate.SSN)\n      End If         \n\n      &#39; Call the shared inherited Equals(Object, Object) method.\n      &#39; It will in turn call the IEquatable(Of T).Equals implementation.\n      Console.WriteLine(&quot;{0}({1}) already on file: {2}.&quot;, _ \n                        applicant2.LastName, _\n                        applicant2.SSN, _\n                        Person.Equals(applicant2, candidate)) \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Found Jones (SSN 199-29-3999).\n&#39;       Jones(199-29-3999) already on file: True.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.GenericIEquatable.Equals#12\">public class TestIEquatable\n{\n   public static void Main()\n   {\n      // Create a Person object for each job applicant.\n      Person applicant1 = new Person(&quot;Jones&quot;, &quot;099-29-4999&quot;);\n      Person applicant2 = new Person(&quot;Jones&quot;, &quot;199-29-3999&quot;);\n      Person applicant3 = new Person(&quot;Jones&quot;, &quot;299-49-6999&quot;);\n\n      // Add applicants to a List object.\n      List&lt;Person&gt; applicants = new List&lt;Person&gt;();\n      applicants.Add(applicant1);\n      applicants.Add(applicant2);\n      applicants.Add(applicant3);\n\n       // Create a Person object for the final candidate.\n       Person candidate = new Person(&quot;Jones&quot;, &quot;199-29-3999&quot;);\n       if (applicants.Contains(candidate))\n          Console.WriteLine(&quot;Found {0} (SSN {1}).&quot;, \n                             candidate.LastName, candidate.SSN);\n      else\n         Console.WriteLine(&quot;Applicant {0} not found.&quot;, candidate.SSN);\n\n      // Call the shared inherited Equals(Object, Object) method.\n      // It will in turn call the IEquatable(Of T).Equals implementation.\n      Console.WriteLine(&quot;{0}({1}) already on file: {2}.&quot;,  \n                        applicant2.LastName, \n                        applicant2.SSN, \n                        Person.Equals(applicant2, candidate)); \n   }\n}\n// The example displays the following output:\n//       Found Jones (SSN 199-29-3999).\n//       Jones(199-29-3999) already on file: True.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.IEquatable-1.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IEquatable-1.yml\">\r\n<meta name=\"APIName\" content=\"System.IEquatable&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.IEquatable&lt;T&gt;.Equals\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"67aef892-037c-2bee-8bf3-2351f0757771\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System\\IEquatable`1.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines a generalized method that a value type or class implements to create a type-specific method for determining equality of instances.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.IEquatable`1\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.IEquatable-1.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IEquatable-1.yml","open_to_public_contributors":true,"api_name":["System.IEquatable<T>","System.IEquatable<T>.Equals"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.IEquatable`1","System::IEquatable`1","System.IEquatable`1.Equals","System::IEquatable`1::Equals"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"67aef892-037c-2bee-8bf3-2351f0757771","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System\\IEquatable`1.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/IEquatable`1.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IEquatable<T> interface | Microsoft Docs","_op_ogTitle":"IEquatable<T> interface","description":"Defines a generalized method that a value type or class implements to create a type-specific method for determining equality of instances.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.IEquatable`1","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.iequatable-1","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.iequatable-1","fileRelativePath":"System.IEquatable-1.html"},"themesRelativePathToOutputRoot":"_themes/"}