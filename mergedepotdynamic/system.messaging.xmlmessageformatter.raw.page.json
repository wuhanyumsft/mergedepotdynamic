{"content":"    \r\n    <h1 id=\"System_Messaging_XmlMessageFormatter\">\r\n      <span class=\"lang-csharp\">XmlMessageFormatter</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Serializes and deserializes objects to or from the body of a message, using the XML format based on the XSD schema definition.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class XmlMessageFormatter : ICloneable, System.Messaging.IMessageFormatter</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">XmlMessageFormatter</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The XmlMessageFormatter is the default formatter that an instance of <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> uses to serialize messages written to the queue. When you create an instance of <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>, an instance of XmlMessageFormatter is created for you and associated with the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>. You can specify a different formatter by creating it in your code and assigning it to the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Formatter_\" data-linktype=\"relative-path\">Formatter</a> property of your <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>.  </p>\n<p> A queue&#39;s default XmlMessageFormatter instance can be used to write to the queue, but it cannot be used to read from the queue until you set either the <a class=\"xref\" href=\"system.messaging.xmlmessageformatter#System_Messaging_XmlMessageFormatter_TargetTypes_\" data-linktype=\"relative-path\">TargetTypes</a> or <a class=\"xref\" href=\"system.messaging.xmlmessageformatter#System_Messaging_XmlMessageFormatter_TargetTypeNames_\" data-linktype=\"relative-path\">TargetTypeNames</a> property on the formatter. You can either set one or both of these values on the default formatter instance, or you can create a new instance of the formatter and set the values automatically by passing them as arguments into the appropriate <a class=\"xref\" href=\"system.messaging.xmlmessageformatter#System_Messaging_XmlMessageFormatter__ctor_\" data-linktype=\"relative-path\">XmlMessageFormatter</a> constructor.  </p>\n<p> When specifying <a class=\"xref\" href=\"system.messaging.xmlmessageformatter#System_Messaging_XmlMessageFormatter_TargetTypes_\" data-linktype=\"relative-path\">TargetTypes</a> rather than <a class=\"xref\" href=\"system.messaging.xmlmessageformatter#System_Messaging_XmlMessageFormatter_TargetTypeNames_\" data-linktype=\"relative-path\">TargetTypeNames</a>, type existence is checked at compile time rather than read time, reducing possibility for error. <a class=\"xref\" href=\"system.messaging.xmlmessageformatter#System_Messaging_XmlMessageFormatter_TargetTypeNames_\" data-linktype=\"relative-path\">TargetTypeNames</a> requires every entry to be fully qualified, specifying its assembly name. Further, when working with multiple concurrent versions, the version number must also be appended to the target type name as well.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.xmlmessageformatter#System_Messaging_XmlMessageFormatter_TargetTypeNames_\" data-linktype=\"relative-path\">TargetTypeNames</a> and <a class=\"xref\" href=\"system.messaging.xmlmessageformatter#System_Messaging_XmlMessageFormatter_TargetTypes_\" data-linktype=\"relative-path\">TargetTypes</a> properties tell the formatter what schemas to attempt to match when deserializing a message. This allows the formatter to interpret the message body.  </p>\n<p> The instance serialized in the message body must comply with one of the schemas represented in the type array. When you read the message using the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.  </p>\n<p> Only one of the two properties needs to be set when reading from the queue, but you can set both. The set of types is the combined set from the two properties. The decision of which property to use is specific to your application. If the message body contains a type whose schema does not match any of the types in the array for either property, an exception will be thrown when the message is read.  </p>\n<p> The XmlMessageFormatter is a crucial component of loosely coupled XML-based messaging. The XSD.exe utility uses the XML format is used to generate XML schema, such as when you use the utility to serialize a class used by your application. The class must have a default constructor.  </p>\n<p> The format is used again in the reverse process when the utility generates a class based on the schema you distribute to describe your class data. The use of the utility and the XML schema it generates enables you to avoid redistributing.dll files every time you recompile a class after the implementation of your class has changed. As long as the schema does not change on the client or the server, other changes on either side do not affect the other.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_XmlMessageFormatter__ctor\" data-linktype=\"self-bookmark\">XmlMessageFormatter()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.messaging.xmlmessageformatter\" data-linktype=\"relative-path\">XmlMessageFormatter</a> class, without target types set.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_XmlMessageFormatter__ctor_System_String___\" data-linktype=\"self-bookmark\">XmlMessageFormatter(String[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.messaging.xmlmessageformatter\" data-linktype=\"relative-path\">XmlMessageFormatter</a> class, setting target types passed in as an array of (fully qualified) string values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_XmlMessageFormatter__ctor_System_Type___\" data-linktype=\"self-bookmark\">XmlMessageFormatter(Type[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.messaging.xmlmessageformatter\" data-linktype=\"relative-path\">XmlMessageFormatter</a> class, setting target types passed in as an array of object types.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_XmlMessageFormatter_TargetTypeNames\" data-linktype=\"self-bookmark\">TargetTypeNames</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies the set of possible types that will be deserialized by the formatter from the message provided.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_XmlMessageFormatter_TargetTypes\" data-linktype=\"self-bookmark\">TargetTypes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies the set of possible types that will be deserialized by the formatter from the message provided.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_XmlMessageFormatter_CanRead_System_Messaging_Message_\" data-linktype=\"self-bookmark\">CanRead(Message)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the formatter can deserialize the message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_XmlMessageFormatter_Clone\" data-linktype=\"self-bookmark\">Clone()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an instance of the <a class=\"xref\" href=\"system.messaging.xmlmessageformatter\" data-linktype=\"relative-path\">XmlMessageFormatter</a> class whose read/write properties (the sets of target types) are the same as the current <a class=\"xref\" href=\"system.messaging.xmlmessageformatter\" data-linktype=\"relative-path\">XmlMessageFormatter</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_XmlMessageFormatter_Read_System_Messaging_Message_\" data-linktype=\"self-bookmark\">Read(Message)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the contents from the given message and creates an object that contains the deserialized message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_XmlMessageFormatter_Write_System_Messaging_Message_System_Object_\" data-linktype=\"self-bookmark\">Write(Message,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Serializes an object into the body of the message.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_XmlMessageFormatter__ctor\">\r\n    \r\n            <a id=\"System_Messaging_XmlMessageFormatter__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlMessageFormatter()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.messaging.xmlmessageformatter\" data-linktype=\"relative-path\">XmlMessageFormatter</a> class, without target types set.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XmlMessageFormatter ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This overload of the constructor is used most frequently when writing to the queue, as target types are not required when writing.  </p>\n<p> To read a message from a queue using an instance of <a class=\"xref\" href=\"system.messaging.xmlmessageformatter\" data-linktype=\"relative-path\">XmlMessageFormatter</a> created using this constructor, you must set the <a class=\"xref\" href=\"system.messaging.xmlmessageformatter#System_Messaging_XmlMessageFormatter_TargetTypeNames_\" data-linktype=\"relative-path\">TargetTypeNames</a> or <a class=\"xref\" href=\"system.messaging.xmlmessageformatter#System_Messaging_XmlMessageFormatter_TargetTypes_\" data-linktype=\"relative-path\">TargetTypes</a> properties so the formatter knows what types to attempt to deserialize.  </p>\n<p> When you create a new <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>, a default <a class=\"xref\" href=\"system.messaging.xmlmessageformatter\" data-linktype=\"relative-path\">XmlMessageFormatter</a> instance is created, without the target types set. As with a formatter created using this constructor, you must set target types for that formatter instance if you want to read from the queue.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_XmlMessageFormatter__ctor_System_String___\">\r\n    \r\n            <a id=\"System_Messaging_XmlMessageFormatter__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlMessageFormatter(String[])</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.messaging.xmlmessageformatter\" data-linktype=\"relative-path\">XmlMessageFormatter</a> class, setting target types passed in as an array of (fully qualified) string values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XmlMessageFormatter (string[] targetTypeNames);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>targetTypeNames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that specifies the set of possible types that will be deserialized by the formatter from the message provided. These values must be fully qualified, for example, &quot;MyNamespace.MyOrders, MyOrdersAssemblyName&quot;.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>targetTypeNames</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The constructors with target type parameters are most frequently used when reading from the queue. When writing, it is not necessary to specify target types.  </p>\n<p> This overload of the <a class=\"xref\" href=\"system.messaging.xmlmessageformatter#System_Messaging_XmlMessageFormatter__ctor_\" data-linktype=\"relative-path\">XmlMessageFormatter</a> constructor sets the <a class=\"xref\" href=\"system.messaging.xmlmessageformatter#System_Messaging_XmlMessageFormatter_TargetTypeNames_\" data-linktype=\"relative-path\">TargetTypeNames</a> property to the array values passed in through the <code>targetTypeNames</code> parameter. Setting this property enables a <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> using this <a class=\"xref\" href=\"system.messaging.xmlmessageformatter\" data-linktype=\"relative-path\">XmlMessageFormatter</a> instance to read messages containing objects of given types.  </p>\n<p> Both the <a class=\"xref\" href=\"system.messaging.xmlmessageformatter#System_Messaging_XmlMessageFormatter_TargetTypeNames_\" data-linktype=\"relative-path\">TargetTypeNames</a> and <a class=\"xref\" href=\"system.messaging.xmlmessageformatter#System_Messaging_XmlMessageFormatter_TargetTypes_\" data-linktype=\"relative-path\">TargetTypes</a> properties tell the formatter what schemas to attempt to match when deserializing a message. This allows the formatter to interpret the message body.  </p>\n<p> The instance serialized in the message body must comply with one of the schemas represented in the type array. When you read the message using the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.  </p>\n<p> Only one of the two properties needs to be set when reading from the queue, but you can set both. The set of types is the combined set from the two properties. The decision of which one to use is specific to your application. If the message body contains a type whose schema does not match any of the types in the array for either property, an exception will be thrown at read time.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cpp\" name=\"Message.Body#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n#using &lt;system.drawing.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\nusing namespace System::Drawing;\nusing namespace System::IO;\nref class Order\n{\npublic:\n   int orderId;\n   DateTime orderTime;\n};\n\nref class MyNewQueue\n{\npublic:\n   static void CreateQueue( String^ queuePath )\n   {\n      try\n      {\n         if (  !MessageQueue::Exists( queuePath ) )\n         {\n            MessageQueue::Create( queuePath );\n         }\n         else\n         {\n            Console::WriteLine(  &quot;{0} already exists.&quot;, queuePath );\n         }\n      }\n      catch ( MessageQueueException^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n   }\n\n   void SendMessage()\n   {\n      try\n      {\n         // Create a new order and set values.\n         Order^ sentOrder = gcnew Order;\n         sentOrder-&gt;orderId = 3;\n         sentOrder-&gt;orderTime = DateTime::Now;\n\n         // Connect to a queue on the local computer.\n         MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n\n         // Create the new order.\n         Message^ myMessage = gcnew Message( sentOrder );\n\n         // Send the order to the queue.\n         myQueue-&gt;Send( myMessage );\n      }\n      catch ( ArgumentException^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n      return;\n   }\n\n   void ReceiveMessage()\n   {\n      // Connect to the a queue on the local computer.\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n\n      // Set the formatter to indicate body contains an Order.\n      array&lt;Type^&gt;^p = gcnew array&lt;Type^&gt;(1);\n      p[ 0 ] = Order::typeid;\n      myQueue-&gt;Formatter = gcnew XmlMessageFormatter( p );\n      try\n      {\n         // Receive and format the message. \n         Message^ myMessage = myQueue-&gt;Receive();\n         Order^ myOrder = dynamic_cast&lt;Order^&gt;(myMessage-&gt;Body);\n\n         // Display message information.\n         Console::WriteLine( &quot;Order ID: {0}&quot;, myOrder-&gt;orderId );\n         Console::WriteLine( &quot;Sent: {0}&quot;, myOrder-&gt;orderTime );\n      }\n      catch ( MessageQueueException^ ) \n      {\n         // Handle Message Queuing exceptions.\n      }\n      // Handle invalid serialization format.\n      catch ( InvalidOperationException^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n      // Catch other exceptions as necessary.\n      return;\n   }\n};\n\nint main()\n{\n   // Create a new instance of the class.\n   MyNewQueue^ myNewQueue = gcnew MyNewQueue;\n\n   // Create a queue on the local computer.\n   MyNewQueue::CreateQueue( &quot;.\\\\myQueue&quot; );\n\n   // Send a message to a queue.\n   myNewQueue-&gt;SendMessage();\n\n   // Receive a message from a queue.\n   myNewQueue-&gt;ReceiveMessage();\n   return 0;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Message.Body#1\">using System;\nusing System.Messaging;\nusing System.Drawing;\nusing System.IO;\n\nnamespace MyProject\n{\n\n\t// The following example \n\t// sends to a queue and receives from a queue.\n\tpublic class Order\n\t{\n\t\tpublic int orderId;\n\t\tpublic DateTime orderTime;\n\t};\t\n\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example sends and receives a message from\n\t\t// a queue.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create a new instance of the class.\n\t\t\tMyNewQueue myNewQueue = new MyNewQueue();\n\n\t\t\t// Create a queue on the local computer.\n\t\t\tCreateQueue(&quot;.\\\\myQueue&quot;);\n\t\t\t\n\t\t\t// Send a message to a queue.\n\t\t\tmyNewQueue.SendMessage();\n\n\t\t\t// Receive a message from a queue.\n\t\t\tmyNewQueue.ReceiveMessage();\n\n\t\t\treturn;\n\t\t}\n\n\t\t//**************************************************\n\t\t// Creates a new queue.\n\t\t//**************************************************\n\n\t\tpublic static void CreateQueue(string queuePath)\n\t\t{\n\t\t\ttry\t\n\t\t\t{\n\t\t\t\tif(!MessageQueue.Exists(queuePath))\n\t\t\t\t{\n\t\t\t\t\tMessageQueue.Create(queuePath);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tConsole.WriteLine(queuePath + &quot; already exists.&quot;);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (MessageQueueException e)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(e.Message);\n\t\t\t}\n\t\t\t\n\t\t}\n\n\t\t//**************************************************\n\t\t// Sends an Order to a queue.\n\t\t//**************************************************\n\t\t\n\t\tpublic void SendMessage()\n\t\t{\n\t\t\ttry\n\t\t\t{\n\n\t\t\t\t// Create a new order and set values.\n\t\t\t\tOrder sentOrder = new Order();\n\t\t\t\tsentOrder.orderId = 3;\n\t\t\t\tsentOrder.orderTime = DateTime.Now;\n\n\t\t\t\t// Connect to a queue on the local computer.\n\t\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\n\n\t\t\t\t\n\t\t\t\t// Create the new order.\n\t\t\t\tMessage myMessage = new Message(sentOrder);\n\n\t\t\t\t// Send the order to the queue.\n\t\t\t\tmyQueue.Send(myMessage);\n\t\t\t}\n\t\t\tcatch(ArgumentException e)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(e.Message);\n\t\t\t\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Receives a message containing an order.\n\t\t//**************************************************\n\t\t\n\t\tpublic  void ReceiveMessage()\n\t\t{\n\t\t\t// Connect to the a queue on the local computer.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\n\t\t\t// Set the formatter to indicate body contains an Order.\n\t\t\tmyQueue.Formatter = new XmlMessageFormatter(new Type[]\n\t\t\t\t{typeof(MyProject.Order)});\n\t\t\t\n\t\t\ttry\n\t\t\t{\n\t\t\t\t// Receive and format the message. \n\t\t\t\tMessage myMessage =\tmyQueue.Receive(); \n\t\t\t\tOrder myOrder = (Order)myMessage.Body;\n\n\t\t\t\t// Display message information.\n\t\t\t\tConsole.WriteLine(&quot;Order ID: &quot; + \n\t\t\t\t\tmyOrder.orderId.ToString());\n\t\t\t\tConsole.WriteLine(&quot;Sent: &quot; + \n\t\t\t\t\tmyOrder.orderTime.ToString());\n\t\t\t}\n\t\t\t\n\t\t\tcatch (MessageQueueException)\n\t\t\t{\n\t\t\t\t// Handle Message Queuing exceptions.\n\t\t\t}\n\n\t\t\t\t// Handle invalid serialization format.\n\t\t\tcatch (InvalidOperationException e)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(e.Message);\n\t\t\t}\n\t\t\t\n\t\t\t// Catch other exceptions as necessary.\n\n\t\t\treturn;\n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Message.Body#1\">Imports System\nImports System.Messaging\nImports System.Drawing\nImports System.IO\n\n\n\n   \n&#39; The following example \n&#39; sends to a queue and receives from a queue.\nPublic Class Order\n      Public orderId As Integer\n      Public orderTime As DateTime\nEnd Class &#39;Order\n\n   \n  \n&#39; Provides a container class for the example.\n\nPublic Class MyNewQueue\n      \n      \n\n   &#39; Provides an entry point into the application.\n   &#39;\t\t \n   &#39; This example sends and receives a message from\n   &#39; a queue.\n\n   Public Shared Sub Main()\n      &#39; Create a new instance of the class.\n      Dim myNewQueue As New MyNewQueue()\n        \n      &#39; Create a queue on the local computer.\n      CreateQueue(&quot;.\\myQueue&quot;)\n         \n      &#39; Send a message to a queue.\n      myNewQueue.SendMessage()\n       \n      &#39; Receive a message from a queue.\n      myNewQueue.ReceiveMessage()\n         \n      Return\n   End Sub &#39;Main\n      \n      \n\n      &#39; Creates a new queue.\n   Public Shared Sub CreateQueue(queuePath As String)\n      Try\n         If Not MessageQueue.Exists(queuePath) Then\n            MessageQueue.Create(queuePath)\n         Else\n            Console.WriteLine((queuePath + &quot; already exists.&quot;))\n         End If\n      Catch e As MessageQueueException\n         Console.WriteLine(e.Message)\n      End Try\n   End Sub &#39;CreateQueue\n       \n      \n\n      &#39; Sends an Order to a queue.\n\n   Public Sub SendMessage()\n      Try\n            \n            &#39; Create a new order and set values.\n            Dim sentOrder As New Order()\n            sentOrder.orderId = 3\n            sentOrder.orderTime = DateTime.Now\n            \n            &#39; Connect to a queue on the local computer.\n            Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n            \n            \n            \n            &#39; Create the new order.\n            Dim myMessage As New Message(sentOrder)\n            \n            &#39; Send the order to the queue.\n            myQueue.Send(myMessage)\n      Catch e As ArgumentException\n            Console.WriteLine(e.Message)\n      End Try \n         \n      Return\n   End Sub &#39;SendMessage\n      \n      \n      \n \n      &#39; Receives a message containing an order.\n \n   Public Sub ReceiveMessage()\n         &#39; Connect to the a queue on the local computer.\n         Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n         \n         &#39; Set the formatter to indicate body contains an Order.\n         myQueue.Formatter = New XmlMessageFormatter(New Type() {GetType(Order)})\n         \n         Try\n            &#39; Receive and format the message. \n            Dim myMessage As Message = myQueue.Receive()\n            Dim myOrder As Order = CType(myMessage.Body, Order)\n            \n            &#39; Display message information.\n            Console.WriteLine((&quot;Order ID: &quot; + myOrder.orderId.ToString()))\n            Console.WriteLine((&quot;Sent: &quot; + myOrder.orderTime.ToString()))\n         \n  \n         &#39; Handle invalid serialization format.\n         Catch e As InvalidOperationException\n            Console.WriteLine(e.Message)\n         End Try\n         \n         &#39; Catch other exceptions as necessary.\n         Return\n   End Sub &#39;ReceiveMessage\nEnd Class &#39;MyNewQueue\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_XmlMessageFormatter__ctor_System_Type___\">\r\n    \r\n            <a id=\"System_Messaging_XmlMessageFormatter__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlMessageFormatter(Type[])</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.messaging.xmlmessageformatter\" data-linktype=\"relative-path\">XmlMessageFormatter</a> class, setting target types passed in as an array of object types.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XmlMessageFormatter (Type[] targetTypes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>targetTypes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of type <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> that specifies the set of possible types that will be deserialized by the formatter from the message provided.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>targetTypes</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The constructors with target type parameters are most frequently used when reading from the queue. When writing, it is not necessary to specify target types.  </p>\n<p> This overload of the <a class=\"xref\" href=\"system.messaging.xmlmessageformatter#System_Messaging_XmlMessageFormatter__ctor_\" data-linktype=\"relative-path\">XmlMessageFormatter</a> constructor sets the <a class=\"xref\" href=\"system.messaging.xmlmessageformatter#System_Messaging_XmlMessageFormatter_TargetTypes_\" data-linktype=\"relative-path\">TargetTypes</a> property to the array values passed in through the <code>targetTypes</code> parameter. Setting this property enables a <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> using this <a class=\"xref\" href=\"system.messaging.xmlmessageformatter\" data-linktype=\"relative-path\">XmlMessageFormatter</a> instance to read messages containing objects of the given types.  </p>\n<p> Both the <a class=\"xref\" href=\"system.messaging.xmlmessageformatter#System_Messaging_XmlMessageFormatter_TargetTypeNames_\" data-linktype=\"relative-path\">TargetTypeNames</a> and <a class=\"xref\" href=\"system.messaging.xmlmessageformatter#System_Messaging_XmlMessageFormatter_TargetTypes_\" data-linktype=\"relative-path\">TargetTypes</a> properties tell the formatter what schemas to attempt to match when deserializing a message. This allows the formatter to interpret the message body.  </p>\n<p> The instance serialized in the message body must comply with one of the schemas represented in the type array. When you read the message using the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.  </p>\n<p> Only one of the two properties needs to be set when reading from the queue, but you can set both. The set of types is the combined set from the two properties. The decision of which one to use is specific to your application. If the message body contains a type whose schema does not match any of the types in the array for either property, an exception will be thrown at read time.  </p>\n<p> When specifying <a class=\"xref\" href=\"system.messaging.xmlmessageformatter#System_Messaging_XmlMessageFormatter_TargetTypes_\" data-linktype=\"relative-path\">TargetTypes</a> rather than <a class=\"xref\" href=\"system.messaging.xmlmessageformatter#System_Messaging_XmlMessageFormatter_TargetTypeNames_\" data-linktype=\"relative-path\">TargetTypeNames</a>, type existence is checked at compile time rather than read time, reducing possibility for error. <a class=\"xref\" href=\"system.messaging.xmlmessageformatter#System_Messaging_XmlMessageFormatter_TargetTypeNames_\" data-linktype=\"relative-path\">TargetTypeNames</a> requires every entry to be fully qualified, specifying its assembly name. Further, when working with multiple concurrent versions, the version number must also be appended to the target type name as well.  </p>\n<p> When using <a class=\"xref\" href=\"system.messaging.xmlmessageformatter#System_Messaging_XmlMessageFormatter_TargetTypes_\" data-linktype=\"relative-path\">TargetTypes</a>, you can add each object (for example, <code>MyClass</code>) to the list in a way demonstrated by the following C# code.  </p>\n<pre><code>TargetTypes = new Type[]{typeof(MyClass)}  \n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_XmlMessageFormatter_TargetTypeNames\">\r\n    \r\n            <a id=\"System_Messaging_XmlMessageFormatter_TargetTypeNames_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TargetTypeNames</div>        \r\n          </div>\r\n    \r\n            <p>Specifies the set of possible types that will be deserialized by the formatter from the message provided.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string[] TargetTypeNames { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>An array of type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that specifies the types of objects to deserialize from the message body when reading the message.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The TargetTypeNames property is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Both the TargetTypeNames and <a class=\"xref\" href=\"system.messaging.xmlmessageformatter#System_Messaging_XmlMessageFormatter_TargetTypes_\" data-linktype=\"relative-path\">TargetTypes</a> properties tell the formatter what schemas to attempt to match when deserializing a message. This allows the formatter to interpret the message body.  </p>\n<p> The instance serialized in the message body must comply with one of the schemas represented in the type array. When you read the message using the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.  </p>\n<p> Only one of the two properties needs to be set when reading from the queue, but you can set both. The set of types is the combined set from the two properties. The decision of which property to use is specific to your application. If the message body contains a type whose schema does not match any of the types in the array for either property, an exception will be thrown when the message is read.  </p>\n<p> TargetTypeNames requires every entry to be fully qualified, specifying its assembly name. Further, when working with multiple concurrent versions, the version number must also be appended to the target type name as well.  </p>\n<p> The target types are only required when reading from the queue. The TargetTypeNames and <a class=\"xref\" href=\"system.messaging.xmlmessageformatter#System_Messaging_XmlMessageFormatter_TargetTypes_\" data-linktype=\"relative-path\">TargetTypes</a> properties do not need to be set to write to the queue.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_XmlMessageFormatter_TargetTypes\">\r\n    \r\n            <a id=\"System_Messaging_XmlMessageFormatter_TargetTypes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TargetTypes</div>        \r\n          </div>\r\n    \r\n            <p>Specifies the set of possible types that will be deserialized by the formatter from the message provided.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Type[] TargetTypes { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </div>\r\n                  <p>An array of type <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> that specifies the types of objects to deserialize from the message body when reading the message.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The TargetTypes property is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Both the <a class=\"xref\" href=\"system.messaging.xmlmessageformatter#System_Messaging_XmlMessageFormatter_TargetTypeNames_\" data-linktype=\"relative-path\">TargetTypeNames</a> and TargetTypes properties tell the formatter what schemas to attempt to match when deserializing a message. This allows the formatter to interpret the message body.  </p>\n<p> The instance serialized in the message body must comply with one of the schemas represented in the type array. When you read the message using the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.  </p>\n<p> Only one of the two properties needs to be set when reading from the queue, but you can set both. The set of types is the combined set from the two properties. The decision of which property to use is specific to your application. If the message body contains a type whose schema does not match any of the types in the array for either property, an exception will be thrown when the message is read.  </p>\n<p> The target types are only required when reading from the queue. The <a class=\"xref\" href=\"system.messaging.xmlmessageformatter#System_Messaging_XmlMessageFormatter_TargetTypeNames_\" data-linktype=\"relative-path\">TargetTypeNames</a> and TargetTypes properties do not need to be set to write to the queue.  </p>\n<p> When specifying TargetTypes rather than <a class=\"xref\" href=\"system.messaging.xmlmessageformatter#System_Messaging_XmlMessageFormatter_TargetTypeNames_\" data-linktype=\"relative-path\">TargetTypeNames</a>, type existence is checked at compile time rather than read time, reducing possibility for error.  </p>\n<p> When using TargetTypes, you can add each object (for example, <code>MyClass</code>) to the list in a way demonstrated by the C# code <code>TargetTypes = new Type[]{typeof(MyClass), typeof (MyOtherClass)};</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sends and receives a message that contains an order to and from a queue.  </p>\n<pre><code class=\"lang-cpp\" name=\"Message.Body#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n#using &lt;system.drawing.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\nusing namespace System::Drawing;\nusing namespace System::IO;\nref class Order\n{\npublic:\n   int orderId;\n   DateTime orderTime;\n};\n\nref class MyNewQueue\n{\npublic:\n   static void CreateQueue( String^ queuePath )\n   {\n      try\n      {\n         if (  !MessageQueue::Exists( queuePath ) )\n         {\n            MessageQueue::Create( queuePath );\n         }\n         else\n         {\n            Console::WriteLine(  &quot;{0} already exists.&quot;, queuePath );\n         }\n      }\n      catch ( MessageQueueException^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n   }\n\n   void SendMessage()\n   {\n      try\n      {\n         // Create a new order and set values.\n         Order^ sentOrder = gcnew Order;\n         sentOrder-&gt;orderId = 3;\n         sentOrder-&gt;orderTime = DateTime::Now;\n\n         // Connect to a queue on the local computer.\n         MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n\n         // Create the new order.\n         Message^ myMessage = gcnew Message( sentOrder );\n\n         // Send the order to the queue.\n         myQueue-&gt;Send( myMessage );\n      }\n      catch ( ArgumentException^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n      return;\n   }\n\n   void ReceiveMessage()\n   {\n      // Connect to the a queue on the local computer.\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n\n      // Set the formatter to indicate body contains an Order.\n      array&lt;Type^&gt;^p = gcnew array&lt;Type^&gt;(1);\n      p[ 0 ] = Order::typeid;\n      myQueue-&gt;Formatter = gcnew XmlMessageFormatter( p );\n      try\n      {\n         // Receive and format the message. \n         Message^ myMessage = myQueue-&gt;Receive();\n         Order^ myOrder = dynamic_cast&lt;Order^&gt;(myMessage-&gt;Body);\n\n         // Display message information.\n         Console::WriteLine( &quot;Order ID: {0}&quot;, myOrder-&gt;orderId );\n         Console::WriteLine( &quot;Sent: {0}&quot;, myOrder-&gt;orderTime );\n      }\n      catch ( MessageQueueException^ ) \n      {\n         // Handle Message Queuing exceptions.\n      }\n      // Handle invalid serialization format.\n      catch ( InvalidOperationException^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n      // Catch other exceptions as necessary.\n      return;\n   }\n};\n\nint main()\n{\n   // Create a new instance of the class.\n   MyNewQueue^ myNewQueue = gcnew MyNewQueue;\n\n   // Create a queue on the local computer.\n   MyNewQueue::CreateQueue( &quot;.\\\\myQueue&quot; );\n\n   // Send a message to a queue.\n   myNewQueue-&gt;SendMessage();\n\n   // Receive a message from a queue.\n   myNewQueue-&gt;ReceiveMessage();\n   return 0;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Message.Body#1\">using System;\nusing System.Messaging;\nusing System.Drawing;\nusing System.IO;\n\nnamespace MyProject\n{\n\n\t// The following example \n\t// sends to a queue and receives from a queue.\n\tpublic class Order\n\t{\n\t\tpublic int orderId;\n\t\tpublic DateTime orderTime;\n\t};\t\n\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example sends and receives a message from\n\t\t// a queue.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create a new instance of the class.\n\t\t\tMyNewQueue myNewQueue = new MyNewQueue();\n\n\t\t\t// Create a queue on the local computer.\n\t\t\tCreateQueue(&quot;.\\\\myQueue&quot;);\n\t\t\t\n\t\t\t// Send a message to a queue.\n\t\t\tmyNewQueue.SendMessage();\n\n\t\t\t// Receive a message from a queue.\n\t\t\tmyNewQueue.ReceiveMessage();\n\n\t\t\treturn;\n\t\t}\n\n\t\t//**************************************************\n\t\t// Creates a new queue.\n\t\t//**************************************************\n\n\t\tpublic static void CreateQueue(string queuePath)\n\t\t{\n\t\t\ttry\t\n\t\t\t{\n\t\t\t\tif(!MessageQueue.Exists(queuePath))\n\t\t\t\t{\n\t\t\t\t\tMessageQueue.Create(queuePath);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tConsole.WriteLine(queuePath + &quot; already exists.&quot;);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (MessageQueueException e)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(e.Message);\n\t\t\t}\n\t\t\t\n\t\t}\n\n\t\t//**************************************************\n\t\t// Sends an Order to a queue.\n\t\t//**************************************************\n\t\t\n\t\tpublic void SendMessage()\n\t\t{\n\t\t\ttry\n\t\t\t{\n\n\t\t\t\t// Create a new order and set values.\n\t\t\t\tOrder sentOrder = new Order();\n\t\t\t\tsentOrder.orderId = 3;\n\t\t\t\tsentOrder.orderTime = DateTime.Now;\n\n\t\t\t\t// Connect to a queue on the local computer.\n\t\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\n\n\t\t\t\t\n\t\t\t\t// Create the new order.\n\t\t\t\tMessage myMessage = new Message(sentOrder);\n\n\t\t\t\t// Send the order to the queue.\n\t\t\t\tmyQueue.Send(myMessage);\n\t\t\t}\n\t\t\tcatch(ArgumentException e)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(e.Message);\n\t\t\t\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Receives a message containing an order.\n\t\t//**************************************************\n\t\t\n\t\tpublic  void ReceiveMessage()\n\t\t{\n\t\t\t// Connect to the a queue on the local computer.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\n\t\t\t// Set the formatter to indicate body contains an Order.\n\t\t\tmyQueue.Formatter = new XmlMessageFormatter(new Type[]\n\t\t\t\t{typeof(MyProject.Order)});\n\t\t\t\n\t\t\ttry\n\t\t\t{\n\t\t\t\t// Receive and format the message. \n\t\t\t\tMessage myMessage =\tmyQueue.Receive(); \n\t\t\t\tOrder myOrder = (Order)myMessage.Body;\n\n\t\t\t\t// Display message information.\n\t\t\t\tConsole.WriteLine(&quot;Order ID: &quot; + \n\t\t\t\t\tmyOrder.orderId.ToString());\n\t\t\t\tConsole.WriteLine(&quot;Sent: &quot; + \n\t\t\t\t\tmyOrder.orderTime.ToString());\n\t\t\t}\n\t\t\t\n\t\t\tcatch (MessageQueueException)\n\t\t\t{\n\t\t\t\t// Handle Message Queuing exceptions.\n\t\t\t}\n\n\t\t\t\t// Handle invalid serialization format.\n\t\t\tcatch (InvalidOperationException e)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(e.Message);\n\t\t\t}\n\t\t\t\n\t\t\t// Catch other exceptions as necessary.\n\n\t\t\treturn;\n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Message.Body#1\">Imports System\nImports System.Messaging\nImports System.Drawing\nImports System.IO\n\n\n\n   \n&#39; The following example \n&#39; sends to a queue and receives from a queue.\nPublic Class Order\n      Public orderId As Integer\n      Public orderTime As DateTime\nEnd Class &#39;Order\n\n   \n  \n&#39; Provides a container class for the example.\n\nPublic Class MyNewQueue\n      \n      \n\n   &#39; Provides an entry point into the application.\n   &#39;\t\t \n   &#39; This example sends and receives a message from\n   &#39; a queue.\n\n   Public Shared Sub Main()\n      &#39; Create a new instance of the class.\n      Dim myNewQueue As New MyNewQueue()\n        \n      &#39; Create a queue on the local computer.\n      CreateQueue(&quot;.\\myQueue&quot;)\n         \n      &#39; Send a message to a queue.\n      myNewQueue.SendMessage()\n       \n      &#39; Receive a message from a queue.\n      myNewQueue.ReceiveMessage()\n         \n      Return\n   End Sub &#39;Main\n      \n      \n\n      &#39; Creates a new queue.\n   Public Shared Sub CreateQueue(queuePath As String)\n      Try\n         If Not MessageQueue.Exists(queuePath) Then\n            MessageQueue.Create(queuePath)\n         Else\n            Console.WriteLine((queuePath + &quot; already exists.&quot;))\n         End If\n      Catch e As MessageQueueException\n         Console.WriteLine(e.Message)\n      End Try\n   End Sub &#39;CreateQueue\n       \n      \n\n      &#39; Sends an Order to a queue.\n\n   Public Sub SendMessage()\n      Try\n            \n            &#39; Create a new order and set values.\n            Dim sentOrder As New Order()\n            sentOrder.orderId = 3\n            sentOrder.orderTime = DateTime.Now\n            \n            &#39; Connect to a queue on the local computer.\n            Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n            \n            \n            \n            &#39; Create the new order.\n            Dim myMessage As New Message(sentOrder)\n            \n            &#39; Send the order to the queue.\n            myQueue.Send(myMessage)\n      Catch e As ArgumentException\n            Console.WriteLine(e.Message)\n      End Try \n         \n      Return\n   End Sub &#39;SendMessage\n      \n      \n      \n \n      &#39; Receives a message containing an order.\n \n   Public Sub ReceiveMessage()\n         &#39; Connect to the a queue on the local computer.\n         Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n         \n         &#39; Set the formatter to indicate body contains an Order.\n         myQueue.Formatter = New XmlMessageFormatter(New Type() {GetType(Order)})\n         \n         Try\n            &#39; Receive and format the message. \n            Dim myMessage As Message = myQueue.Receive()\n            Dim myOrder As Order = CType(myMessage.Body, Order)\n            \n            &#39; Display message information.\n            Console.WriteLine((&quot;Order ID: &quot; + myOrder.orderId.ToString()))\n            Console.WriteLine((&quot;Sent: &quot; + myOrder.orderTime.ToString()))\n         \n  \n         &#39; Handle invalid serialization format.\n         Catch e As InvalidOperationException\n            Console.WriteLine(e.Message)\n         End Try\n         \n         &#39; Catch other exceptions as necessary.\n         Return\n   End Sub &#39;ReceiveMessage\nEnd Class &#39;MyNewQueue\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_XmlMessageFormatter_CanRead_System_Messaging_Message_\">\r\n    \r\n            <a id=\"System_Messaging_XmlMessageFormatter_CanRead_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanRead(Message)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the formatter can deserialize the message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool CanRead (System.Messaging.Message message);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> to inspect.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the XML formatter can deserialize the message; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Neither the <span class=\"xref\">stem.Messaging.XmlMessageFormatter.TargetTypeNames*</span> nor <span class=\"xref\">stem.Messaging.XmlMessageFormatter.TargetTypes*</span> property has been set.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>message</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When CanRead is called, the formatter attempts to determine if the contents of the message are something it can deserialize. The formatter can only deserialize the message if the type in the message body has the same schema as one of the types in the array represented by the <a class=\"xref\" href=\"system.messaging.xmlmessageformatter#System_Messaging_XmlMessageFormatter_TargetTypeNames_\" data-linktype=\"relative-path\">TargetTypeNames</a> and <a class=\"xref\" href=\"system.messaging.xmlmessageformatter#System_Messaging_XmlMessageFormatter_TargetTypes_\" data-linktype=\"relative-path\">TargetTypes</a> properties. CanRead returns <code>false</code> under the following two circumstances:  </p>\n<ul>\n<li><p>The message was not formatted using the <a class=\"xref\" href=\"system.messaging.xmlmessageformatter\" data-linktype=\"relative-path\">XmlMessageFormatter</a>.  </p>\n</li>\n<li><p>The schema of the message body is not among those listed in either the <a class=\"xref\" href=\"system.messaging.xmlmessageformatter#System_Messaging_XmlMessageFormatter_TargetTypeNames_\" data-linktype=\"relative-path\">TargetTypeNames</a> or <a class=\"xref\" href=\"system.messaging.xmlmessageformatter#System_Messaging_XmlMessageFormatter_TargetTypes_\" data-linktype=\"relative-path\">TargetTypes</a> property.  </p>\n<p>The <a class=\"xref\" href=\"system.messaging.xmlmessageformatter#System_Messaging_XmlMessageFormatter_TargetTypeNames_\" data-linktype=\"relative-path\">TargetTypeNames</a> and <a class=\"xref\" href=\"system.messaging.xmlmessageformatter#System_Messaging_XmlMessageFormatter_TargetTypes_\" data-linktype=\"relative-path\">TargetTypes</a> properties tell the formatter what types of objects it must be able to deserialize. If any type is missing from the list, yet is found within the message, CanRead returns <code>false</code>.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_XmlMessageFormatter_Clone\">\r\n    \r\n            <a id=\"System_Messaging_XmlMessageFormatter_Clone_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clone()</div>        \r\n          </div>\r\n    \r\n            <p>Creates an instance of the <a class=\"xref\" href=\"system.messaging.xmlmessageformatter\" data-linktype=\"relative-path\">XmlMessageFormatter</a> class whose read/write properties (the sets of target types) are the same as the current <a class=\"xref\" href=\"system.messaging.xmlmessageformatter\" data-linktype=\"relative-path\">XmlMessageFormatter</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object Clone ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An object whose properties are identical to those of this <a class=\"xref\" href=\"system.messaging.xmlmessageformatter\" data-linktype=\"relative-path\">XmlMessageFormatter</a> instance, but whose metadata does not specify it to be a formatter class instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method creates a copy of the formatter and initializes all its properties to the values of this <a class=\"xref\" href=\"system.messaging.xmlmessageformatter\" data-linktype=\"relative-path\">XmlMessageFormatter</a> object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_XmlMessageFormatter_Read_System_Messaging_Message_\">\r\n    \r\n            <a id=\"System_Messaging_XmlMessageFormatter_Read_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Read(Message)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the contents from the given message and creates an object that contains the deserialized message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object Read (System.Messaging.Message message);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a>, in XML format, to deserialize.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The deserialized message.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Neither the <span class=\"xref\">stem.Messaging.XmlMessageFormatter.TargetTypeNames*</span> nor <span class=\"xref\">stem.Messaging.XmlMessageFormatter.TargetTypes*</span> property has been set.  </p>\n<p> -or-  </p>\n<p> The instance serialized in the message body does not comply with any of the schemas represented by the types in the <span class=\"xref\">stem.Messaging.XmlMessageFormatter.TargetTypeNames*</span> and <span class=\"xref\">stem.Messaging.XmlMessageFormatter.TargetTypes*</span> properties.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>message</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Both the <a class=\"xref\" href=\"system.messaging.xmlmessageformatter#System_Messaging_XmlMessageFormatter_TargetTypeNames_\" data-linktype=\"relative-path\">TargetTypeNames</a> and <a class=\"xref\" href=\"system.messaging.xmlmessageformatter#System_Messaging_XmlMessageFormatter_TargetTypes_\" data-linktype=\"relative-path\">TargetTypes</a> properties tell the formatter what schemas to attempt to match when deserializing a message. One of these properties must be set before the message can be deserialized.  </p>\n<p> The instance serialized in the message body must comply with one of the schemas represented in the type array. When you read the message using the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.  </p>\n<p> The target types do not have to be specified in order to write to the queue.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_XmlMessageFormatter_Write_System_Messaging_Message_System_Object_\">\r\n    \r\n            <a id=\"System_Messaging_XmlMessageFormatter_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(Message,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Serializes an object into the body of the message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Write (System.Messaging.Message message, object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> whose <span class=\"xref\">stem.Messaging.Message.Body*</span> property will contain the serialized object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to be serialized into the message body.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>message</code> parameter is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>obj</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The target types need not be specified to write to the queue as they must be when reading. The <a class=\"xref\" href=\"system.messaging.xmlmessageformatter#System_Messaging_XmlMessageFormatter_TargetTypeNames_\" data-linktype=\"relative-path\">TargetTypeNames</a> or <a class=\"xref\" href=\"system.messaging.xmlmessageformatter#System_Messaging_XmlMessageFormatter_TargetTypes_\" data-linktype=\"relative-path\">TargetTypes</a> property is used by the formatter only when deserializing a message.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.xmlmessageformatter\" data-linktype=\"relative-path\">XmlMessageFormatter</a> makes use of the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> class, which defines what can be serialized. Only public fields and public properties can be serialized. Structures, structures with arrays, and arrays of structures are all serializable, as long as they do not use the encoded style with the SOAP protocol.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Messaging.XmlMessageFormatter.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Messaging.XmlMessageFormatter.yml\">\r\n<meta name=\"APIName\" content=\"System.Messaging.XmlMessageFormatter\">\r\n<meta name=\"APIName\" content=\"System.Messaging.XmlMessageFormatter..ctor\">\r\n<meta name=\"APIName\" content=\"System.Messaging.XmlMessageFormatter.CanRead\">\r\n<meta name=\"APIName\" content=\"System.Messaging.XmlMessageFormatter.Clone\">\r\n<meta name=\"APIName\" content=\"System.Messaging.XmlMessageFormatter.Read\">\r\n<meta name=\"APIName\" content=\"System.Messaging.XmlMessageFormatter.TargetTypeNames\">\r\n<meta name=\"APIName\" content=\"System.Messaging.XmlMessageFormatter.TargetTypes\">\r\n<meta name=\"APIName\" content=\"System.Messaging.XmlMessageFormatter.Write\">\r\n<meta name=\"APILocation\" content=\"System.Messaging.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"6ad29c8f-a53b-e2e5-ca77-f13fa2211938\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Serializes and deserializes objects to or from the body of a message, using the XML format based on the XSD schema definition.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Messaging/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Messaging.XmlMessageFormatter\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Messaging.XmlMessageFormatter.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Messaging.XmlMessageFormatter.yml","open_to_public_contributors":true,"api_name":["System.Messaging.XmlMessageFormatter","System.Messaging.XmlMessageFormatter..ctor","System.Messaging.XmlMessageFormatter.CanRead","System.Messaging.XmlMessageFormatter.Clone","System.Messaging.XmlMessageFormatter.Read","System.Messaging.XmlMessageFormatter.TargetTypeNames","System.Messaging.XmlMessageFormatter.TargetTypes","System.Messaging.XmlMessageFormatter.Write"],"api_location":["System.Messaging.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Messaging.XmlMessageFormatter","System::Messaging::XmlMessageFormatter","System.Messaging.XmlMessageFormatter.#ctor","System::Messaging::XmlMessageFormatter::#ctor","System.Messaging.XmlMessageFormatter.CanRead","System::Messaging::XmlMessageFormatter::CanRead","System.Messaging.XmlMessageFormatter.Clone","System::Messaging::XmlMessageFormatter::Clone","System.Messaging.XmlMessageFormatter.Read","System::Messaging::XmlMessageFormatter::Read","System.Messaging.XmlMessageFormatter.TargetTypeNames","System::Messaging::XmlMessageFormatter::TargetTypeNames","System.Messaging.XmlMessageFormatter.TargetTypes","System::Messaging::XmlMessageFormatter::TargetTypes","System.Messaging.XmlMessageFormatter.Write","System::Messaging::XmlMessageFormatter::Write"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"6ad29c8f-a53b-e2e5-ca77-f13fa2211938","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Messaging/XmlMessageFormatter.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"XmlMessageFormatter class | Microsoft Docs","_op_ogTitle":"XmlMessageFormatter class","description":"Serializes and deserializes objects to or from the body of a message, using the XML format based on the XSD schema definition.\n","toc_asset_id":"_splitted/System.Messaging/toc.json","toc_rel":"_splitted/System.Messaging/toc.json","source_url":"","ms.assetid":"System.Messaging.XmlMessageFormatter","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.messaging.xmlmessageformatter","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.messaging.xmlmessageformatter","fileRelativePath":"System.Messaging.XmlMessageFormatter.html"},"themesRelativePathToOutputRoot":"_themes/"}