{"content":"    \r\n    <h1 id=\"System_Windows_Vector\">\r\n      <span class=\"lang-csharp\">Vector</span>\r\n        Struct\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a displacement in 2-D space.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.ComponentModel.TypeConverter(typeof(System.Windows.VectorConverter))]\n[System.Windows.Markup.ValueSerializer(typeof(System.Windows.Converters.VectorValueSerializer))]\npublic struct Vector : IFormattable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">System.ValueType</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Vector</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>A <a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a> represents a fixed position, but a Vector represents a direction and a magnitude (for example, velocity or acceleration). Thus, the endpoints of a line segment are points but their difference is a vector; that is, the direction and length of that line segment.  </p>\n<p> In XAML, the delimiter between the <a class=\"xref\" href=\"system.windows.vector#System_Windows_Vector_X_\" data-linktype=\"relative-path\">X</a> and <a class=\"xref\" href=\"system.windows.vector#System_Windows_Vector_Y_\" data-linktype=\"relative-path\">Y</a> values of a Vector can be either a comma or a space.  </p>\n<p> Some cultures might use the comma character as the decimal delimiter instead of the period character. XAML processing for invariant culture defaults to en-US in most XAML processor implementations, and expects the period to be the decimal delimiter. You should avoid using the comma character as the decimal delimiter if specifying a Vector in XAML, because that will clash with the string type conversion of a Vector attribute value into the <a class=\"xref\" href=\"system.windows.vector#System_Windows_Vector_X_\" data-linktype=\"relative-path\">X</a> and <a class=\"xref\" href=\"system.windows.vector#System_Windows_Vector_Y_\" data-linktype=\"relative-path\">Y</a> components.  </p>\n<p><a name=\"xamlAttributeUsage_Vector\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;x,y&quot;/&gt;  \n-or-  \n&lt;object property=&quot;x y&quot;/&gt;  \n</code></pre><p><a name=\"xamlValues_Vector\"></a>   </p>\n<h2 id=\"xaml-values\">XAML Values</h2>\n<p> <em>x</em><br> The vector&#39;s X component. For more information, see the <a class=\"xref\" href=\"system.windows.vector#System_Windows_Vector_X_\" data-linktype=\"relative-path\">X</a> property.  </p>\n<p> <em>y</em><br> The vector&#39;s Y component. For more information, see the <a class=\"xref\" href=\"system.windows.vector#System_Windows_Vector_Y_\" data-linktype=\"relative-path\">Y</a> property.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector__ctor_System_Double_System_Double_\" data-linktype=\"self-bookmark\">Vector(Double,Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structure.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_Length\" data-linktype=\"self-bookmark\">Length</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the length of this vector.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_LengthSquared\" data-linktype=\"self-bookmark\">LengthSquared</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the square of the length of this vector.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_X\" data-linktype=\"self-bookmark\">X</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the X component of this vector.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_Y\" data-linktype=\"self-bookmark\">Y</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the Y component of this vector.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_Add_System_Windows_Vector_System_Windows_Point_\" data-linktype=\"self-bookmark\">Add(Vector,Point)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Translates the specified point by the specified vector and returns the resulting point.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_Add_System_Windows_Vector_System_Windows_Vector_\" data-linktype=\"self-bookmark\">Add(Vector,Vector)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds two vectors and returns the result as a <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structure.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_AngleBetween_System_Windows_Vector_System_Windows_Vector_\" data-linktype=\"self-bookmark\">AngleBetween(Vector,Vector)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the angle, expressed in degrees, between the two specified vectors.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_CrossProduct_System_Windows_Vector_System_Windows_Vector_\" data-linktype=\"self-bookmark\">CrossProduct(Vector,Vector)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calculates the cross product of two vectors.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_Determinant_System_Windows_Vector_System_Windows_Vector_\" data-linktype=\"self-bookmark\">Determinant(Vector,Vector)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calculates the determinant of two vectors.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_Divide_System_Windows_Vector_System_Double_\" data-linktype=\"self-bookmark\">Divide(Vector,Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Divides the specified vector by the specified scalar and returns the result as a <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> is a <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structure and, if it is, whether it has the same <span class=\"xref\">stem.Windows.Vector.X*</span> and <span class=\"xref\">stem.Windows.Vector.Y*</span> values as this vector.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_Equals_System_Windows_Vector_\" data-linktype=\"self-bookmark\">Equals(Vector)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares two vectors for equality.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_Equals_System_Windows_Vector_System_Windows_Vector_\" data-linktype=\"self-bookmark\">Equals(Vector,Vector)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares the two specified vectors for equality.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hash code for this vector.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_Multiply_System_Double_System_Windows_Vector_\" data-linktype=\"self-bookmark\">Multiply(Double,Vector)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Multiplies the specified scalar by the specified vector and returns the resulting <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_Multiply_System_Windows_Vector_System_Double_\" data-linktype=\"self-bookmark\">Multiply(Vector,Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Multiplies the specified vector by the specified scalar and returns the resulting <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_Multiply_System_Windows_Vector_System_Windows_Media_Matrix_\" data-linktype=\"self-bookmark\">Multiply(Vector,Matrix)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Transforms the coordinate space of the specified vector using the specified <a class=\"xref\" href=\"system.windows.media.matrix\" data-linktype=\"relative-path\">Matrix</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_Multiply_System_Windows_Vector_System_Windows_Vector_\" data-linktype=\"self-bookmark\">Multiply(Vector,Vector)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calculates the dot product of the two specified vectors and returns the result as a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_Negate\" data-linktype=\"self-bookmark\">Negate()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Negates this vector. The vector has the same magnitude as before, but its direction is now opposite.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_Normalize\" data-linktype=\"self-bookmark\">Normalize()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Normalizes this vector.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_Parse_System_String_\" data-linktype=\"self-bookmark\">Parse(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts a string representation of a vector into the equivalent <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structure.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_Subtract_System_Windows_Vector_System_Windows_Vector_\" data-linktype=\"self-bookmark\">Subtract(Vector,Vector)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Subtracts the specified vector from another specified vector.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the string representation of this <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structure.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_ToString_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToString(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the string representation of this <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structure with the specified formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Operators\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_op_Addition_System_Windows_Vector_System_Windows_Point_\" data-linktype=\"self-bookmark\">op_Addition(Vector,Point)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Translates a point by the specified vector and returns the resulting point.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_op_Addition_System_Windows_Vector_System_Windows_Vector_\" data-linktype=\"self-bookmark\">op_Addition(Vector,Vector)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds two vectors and returns the result as a vector.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_op_Division_System_Windows_Vector_System_Double_\" data-linktype=\"self-bookmark\">op_Division(Vector,Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Divides the specified vector by the specified scalar and returns the resulting vector.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_op_Equality_System_Windows_Vector_System_Windows_Vector_\" data-linktype=\"self-bookmark\">op_Equality(Vector,Vector)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares two vectors for equality.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_op_Explicit_System_Windows_Vector_to_System_Windows_Point_\" data-linktype=\"self-bookmark\">op_Explicit(Vector)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_op_Explicit_System_Windows_Vector_to_System_Windows_Size_\" data-linktype=\"self-bookmark\">op_Explicit(Vector)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_op_Inequality_System_Windows_Vector_System_Windows_Vector_\" data-linktype=\"self-bookmark\">op_Inequality(Vector,Vector)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares two vectors for inequality.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_op_Multiply_System_Double_System_Windows_Vector_\" data-linktype=\"self-bookmark\">op_Multiply(Double,Vector)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Multiplies the specified scalar by the specified vector and returns the resulting vector.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_op_Multiply_System_Windows_Vector_System_Double_\" data-linktype=\"self-bookmark\">op_Multiply(Vector,Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Multiplies the specified vector by the specified scalar and returns the resulting vector.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_op_Multiply_System_Windows_Vector_System_Windows_Media_Matrix_\" data-linktype=\"self-bookmark\">op_Multiply(Vector,Matrix)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Transforms the coordinate space of the specified vector using the specified <a class=\"xref\" href=\"system.windows.media.matrix\" data-linktype=\"relative-path\">Matrix</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_op_Multiply_System_Windows_Vector_System_Windows_Vector_\" data-linktype=\"self-bookmark\">op_Multiply(Vector,Vector)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calculates the dot product of the two specified vector structures and returns the result as a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_op_Subtraction_System_Windows_Vector_System_Windows_Vector_\" data-linktype=\"self-bookmark\">op_Subtraction(Vector,Vector)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Subtracts one specified vector from another.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_op_UnaryNegation_System_Windows_Vector_\" data-linktype=\"self-bookmark\">op_UnaryNegation(Vector)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Negates the specified vector.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Vector_System_IFormattable_ToString_System_String_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IFormattable.ToString(String,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. For a description of this member, see <span class=\"xref\">stem.IFormattable.ToString*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector__ctor_System_Double_System_Double_\">\r\n    \r\n            <a id=\"System_Windows_Vector__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Vector(Double,Double)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structure.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Vector (double x, double y);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>x</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Windows.Vector.X*</span>-offset of the new <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>y</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Windows.Vector.Y*</span>-offset of the new <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to create two vectors and add them together.  </p>\n<pre><code class=\"lang-cs\" name=\"VectorExamples_snip#AddTwoVectorsExample_csharp\">private Vector addTwoVectorsExample()\n{\n    // Create two Vector structures.\n    Vector vector1 = new Vector(20, 30);\n    Vector vector2 = new Vector(45, 70);\n    Vector vectorResult = new Vector();\n\n    // Add the vectors together. \n    // vectorResult is equal to (65, 100).\n    vectorResult = Vector.Add(vector1, vector2);\n\n    return vectorResult;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_Length\">\r\n    \r\n            <a id=\"System_Windows_Vector_Length_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Length</div>        \r\n          </div>\r\n    \r\n            <p>Gets the length of this vector.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public double Length { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The length of this vector.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The length of a vector is sometimes referred to as the magnitude.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how use this property to get the length of a vector.  </p>\n<pre><code class=\"lang-vb\" name=\"VectorExamples_snip#LengthExample\">Private Function lengthExample() As Double\n\n\tDim vector1 As New Vector(20, 30)\n\n\t&#39; Get the length of the vector.\n\t&#39; length is approximately equal to 36.0555\n\tDim lengthResult As Double = vector1.Length\n\n\tReturn lengthResult\n\nEnd Function\n</code></pre><pre><code class=\"lang-cs\" name=\"VectorExamples_snip#LengthExample\">private Double lengthExample()\n{  \n\n    Vector vector1 = new Vector(20, 30);\n\n    // Get the length of the vector.\n    // length is approximately equal to 36.0555\n    Double lengthResult = vector1.Length;\n\n    return lengthResult;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_LengthSquared\">\r\n    \r\n            <a id=\"System_Windows_Vector_LengthSquared_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LengthSquared</div>        \r\n          </div>\r\n    \r\n            <p>Gets the square of the length of this vector.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public double LengthSquared { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The square of the <span class=\"xref\">stem.Windows.Vector.Length*</span> of this vector.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The length of a vector is sometimes referred to as its magnitude.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use this property to get the square of the length of a vector.  </p>\n<pre><code class=\"lang-vb\" name=\"VectorExamples_snip#LengthSquaredExample\">Private Function lengthSquaredExample() As Double\n\n\tDim vector1 As New Vector(20, 30)\n\n\t&#39; Gets the square of the length of a Vector. \n\t&#39; lengthSq is equal to 1300.\n\tDim lengthSqResult As Double = vector1.LengthSquared\n\n\tReturn lengthSqResult\n\nEnd Function\n</code></pre><pre><code class=\"lang-cs\" name=\"VectorExamples_snip#LengthSquaredExample\">private Double lengthSquaredExample()\n{\n\n    Vector vector1 = new Vector(20, 30); \n\n    // Gets the square of the length of a Vector. \n    // lengthSq is equal to 1300.\n    Double lengthSqResult = vector1.LengthSquared;\n\n    return lengthSqResult;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_X\">\r\n    \r\n            <a id=\"System_Windows_Vector_X_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">X</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the X component of this vector.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public double X { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The X component of this vector. The default value is 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to check two <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structures for equality.  </p>\n<pre><code class=\"lang-vb\" name=\"VectorExamples_snip#VectorEqualityExample\">&#39; Checks if two Vectors are equal using the overloaded equality operator.\nPrivate Function vectorEqualityExample() As Boolean\n\n\t&#39; Declaring vecto1 and initializing x,y values\n\tDim vector1 As New Vector(20, 30)\n\n\t&#39; Declaring vector2 without initializing x,y values\n\tDim vector2 As New Vector()\n\n\t&#39; Boolean to hold the result of the comparison\n\tDim areEqual As Boolean\n\n\t&#39; assigning values to vector2\n\tvector2.X = 45\n\tvector2.Y = 70\n\n\t&#39; Comparing Vectors for equality\n\t&#39; areEqual is False\n\tareEqual = (vector1 = vector2)\n\n\tReturn areEqual\n\nEnd Function\n</code></pre><pre><code class=\"lang-cs\" name=\"VectorExamples_snip#VectorEqualityExample\">// Checks if two Vectors are equal using the overloaded equality operator.\nprivate Boolean vectorEqualityExample()\n{\n\n    // Declaring vecto1 and initializing x,y values\n    Vector vector1 = new Vector(20, 30);\n\n    // Declaring vector2 without initializing x,y values\n    Vector vector2 = new Vector();\n\n    // Boolean to hold the result of the comparison\n    Boolean areEqual;\n\n    // assigning values to vector2\n    vector2.X = 45;\n    vector2.Y = 70;\n\n    // Comparing Vectors for equality\n    // areEqual is False\n    areEqual = (vector1 == vector2);\n\n    return areEqual;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_Y\">\r\n    \r\n            <a id=\"System_Windows_Vector_Y_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Y</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the Y component of this vector.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public double Y { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The Y component of this vector. The default value is 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to check two <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structures for equality.  </p>\n<pre><code class=\"lang-vb\" name=\"VectorExamples_snip#VectorEqualityExample\">&#39; Checks if two Vectors are equal using the overloaded equality operator.\nPrivate Function vectorEqualityExample() As Boolean\n\n\t&#39; Declaring vecto1 and initializing x,y values\n\tDim vector1 As New Vector(20, 30)\n\n\t&#39; Declaring vector2 without initializing x,y values\n\tDim vector2 As New Vector()\n\n\t&#39; Boolean to hold the result of the comparison\n\tDim areEqual As Boolean\n\n\t&#39; assigning values to vector2\n\tvector2.X = 45\n\tvector2.Y = 70\n\n\t&#39; Comparing Vectors for equality\n\t&#39; areEqual is False\n\tareEqual = (vector1 = vector2)\n\n\tReturn areEqual\n\nEnd Function\n</code></pre><pre><code class=\"lang-cs\" name=\"VectorExamples_snip#VectorEqualityExample\">// Checks if two Vectors are equal using the overloaded equality operator.\nprivate Boolean vectorEqualityExample()\n{\n\n    // Declaring vecto1 and initializing x,y values\n    Vector vector1 = new Vector(20, 30);\n\n    // Declaring vector2 without initializing x,y values\n    Vector vector2 = new Vector();\n\n    // Boolean to hold the result of the comparison\n    Boolean areEqual;\n\n    // assigning values to vector2\n    vector2.X = 45;\n    vector2.Y = 70;\n\n    // Comparing Vectors for equality\n    // areEqual is False\n    areEqual = (vector1 == vector2);\n\n    return areEqual;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_Add_System_Windows_Vector_System_Windows_Point_\">\r\n    \r\n            <a id=\"System_Windows_Vector_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Add(Vector,Point)</div>        \r\n          </div>\r\n    \r\n            <p>Translates the specified point by the specified vector and returns the resulting point.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Point Add (System.Windows.Vector vector, System.Windows.Point point);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The amount to translate the specified point.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>point</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The point to translate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </div>\r\n                  <p>The result of translating <code>point</code> by <code>vector</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use this method to add a <a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a> structure to a <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structure.  </p>\n<pre><code class=\"lang-cs\" name=\"VectorExamples_snip#AddPointAndVectorExample_csharp\">private Point addPointAndVectorExample()\n{\n    Vector vector1 = new Vector(20, 30);\n    Point point1 = new Point(10, 5);\n    Point pointResult = new Point();\n\n    // Add Point and Vector together.\n    // pointResult is equal to (30,35).\n    pointResult = Vector.Add(vector1, point1);\n\n    return pointResult;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_Add_System_Windows_Vector_System_Windows_Vector_\">\r\n    \r\n            <a id=\"System_Windows_Vector_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Add(Vector,Vector)</div>        \r\n          </div>\r\n    \r\n            <p>Adds two vectors and returns the result as a <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structure.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Vector Add (System.Windows.Vector vector1, System.Windows.Vector vector2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first vector to add.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second vector to add.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </div>\r\n                  <p>The sum of <code>vector1</code> and <code>vector2</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use this method to add two <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structures.  </p>\n<pre><code class=\"lang-cs\" name=\"VectorExamples_snip#AddTwoVectorsExample_csharp\">private Vector addTwoVectorsExample()\n{\n    // Create two Vector structures.\n    Vector vector1 = new Vector(20, 30);\n    Vector vector2 = new Vector(45, 70);\n    Vector vectorResult = new Vector();\n\n    // Add the vectors together. \n    // vectorResult is equal to (65, 100).\n    vectorResult = Vector.Add(vector1, vector2);\n\n    return vectorResult;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_AngleBetween_System_Windows_Vector_System_Windows_Vector_\">\r\n    \r\n            <a id=\"System_Windows_Vector_AngleBetween_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AngleBetween(Vector,Vector)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the angle, expressed in degrees, between the two specified vectors.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double AngleBetween (System.Windows.Vector vector1, System.Windows.Vector vector2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first vector to evaluate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second vector to evaluate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The angle, in degrees, between <code>vector1</code> and <code>vector2</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use this method to get the angle between two <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structures.  </p>\n<pre><code class=\"lang-cs\" name=\"VectorExamples_snip#AngleBetweenExample_csharp\">private Double angleBetweenExample()\n{\n    Vector vector1 = new Vector(20, 30);\n    Vector vector2 = new Vector(45, 70);\n    Double angleBetween;\n\n    // angleBetween is approximately equal to 0.9548\n    angleBetween = Vector.AngleBetween(vector1, vector2);\n\n    return angleBetween;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_CrossProduct_System_Windows_Vector_System_Windows_Vector_\">\r\n    \r\n            <a id=\"System_Windows_Vector_CrossProduct_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CrossProduct(Vector,Vector)</div>        \r\n          </div>\r\n    \r\n            <p>Calculates the cross product of two vectors.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double CrossProduct (System.Windows.Vector vector1, System.Windows.Vector vector2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first vector to evaluate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second vector to evaluate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The cross product of <code>vector1</code> and <code>vector2</code>. The following formula is used to calculate the cross product:  </p>\n<p> <code>(Vector1.X * Vector2.Y) - (Vector1.Y * Vector2.X)</code></p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use this method to calculate the cross product of two <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structures.  </p>\n<pre><code class=\"lang-cs\" name=\"VectorExamples_snip#CrossProductExample_csharp\">private Double crossProductExample()\n{\n    Vector vector1 = new Vector(20, 30);\n    Vector vector2 = new Vector(45, 70);\n    Double crossProduct;\n\n    // crossProduct is equal to 50    \n    crossProduct = Vector.CrossProduct(vector1, vector2);\n\n    return crossProduct;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_Determinant_System_Windows_Vector_System_Windows_Vector_\">\r\n    \r\n            <a id=\"System_Windows_Vector_Determinant_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Determinant(Vector,Vector)</div>        \r\n          </div>\r\n    \r\n            <p>Calculates the determinant of two vectors.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double Determinant (System.Windows.Vector vector1, System.Windows.Vector vector2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first vector to evaluate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second vector to evaluate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The determinant of <code>vector1</code> and <code>vector2</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to calculate the determinant of two <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structures.  </p>\n<pre><code class=\"lang-cs\" name=\"VectorExamples_snip#DeterminantExample_csharp\">private Double determinantExample()\n{\n    Vector vector1 = new Vector(20, 30);\n    Vector vector2 = new Vector(45, 70);\n    Double determinant;\n\n    // determinant is equal to 50\n    determinant = Vector.Determinant(vector1, vector2);\n\n    return determinant;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_Divide_System_Windows_Vector_System_Double_\">\r\n    \r\n            <a id=\"System_Windows_Vector_Divide_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Divide(Vector,Double)</div>        \r\n          </div>\r\n    \r\n            <p>Divides the specified vector by the specified scalar and returns the result as a <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Vector Divide (System.Windows.Vector vector, double scalar);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The vector structure to divide.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>scalar</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The amount by which <code>vector</code> is divided.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </div>\r\n                  <p>The result of dividing <code>vector</code> by <code>scalar</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use this method to divide a <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> by a scalar.  </p>\n<pre><code class=\"lang-cs\" name=\"VectorExamples_snip#DivideExample_csharp\">private Vector divideExample()\n{\n    Vector vector1 = new Vector(20, 30);\n    Vector vectorResult = new Vector();\n    Double scalar1 = 75;\n\n    // Divide vector by scalar.\n    // vectorResult is approximately equal to (0.26667,0.4)\n    vectorResult = Vector.Divide(vector1, scalar1);\n\n    return vectorResult;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Windows_Vector_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> is a <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structure and, if it is, whether it has the same <span class=\"xref\">stem.Windows.Vector.X*</span> and <span class=\"xref\">stem.Windows.Vector.Y*</span> values as this vector.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object o);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>o</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The vector to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>o</code> is a <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> and has the same <span class=\"xref\">stem.Windows.Vector.X*</span> and <span class=\"xref\">stem.Windows.Vector.Y*</span> values as this vector; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A vector&#39;s <a class=\"xref\" href=\"system.windows.vector#System_Windows_Vector_X_\" data-linktype=\"relative-path\">X</a> and <a class=\"xref\" href=\"system.windows.vector#System_Windows_Vector_Y_\" data-linktype=\"relative-path\">Y</a> properties are described using <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values. Because the value of a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> can lose precision when arithmetic operations are performed on it, a comparison between two <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structures that are logically equal might fail.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use this method to check whether a <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> and an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> are equal.  </p>\n<pre><code class=\"lang-cs\" name=\"VectorExamples_snip#EqualsExample2_csharp\">private Boolean equalsExample2()\n{\n\n    Vector vector1 = new Vector(20, 30);\n    Vector vector2 = new Vector(20, 30);\n    Boolean areEqual = false;\n\n    // areEqual is True.  Both parameters are Vector structures, \n    // and they are equal.\n    if (vector1.Equals(vector2))\n    {\n        areEqual = true;\n    }\n\n    return areEqual;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_Equals_System_Windows_Vector_\">\r\n    \r\n            <a id=\"System_Windows_Vector_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Vector)</div>        \r\n          </div>\r\n    \r\n            <p>Compares two vectors for equality.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Equals (System.Windows.Vector value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The vector to compare with this vector.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>value</code> has the same <span class=\"xref\">stem.Windows.Vector.X*</span> and <span class=\"xref\">stem.Windows.Vector.Y*</span> values as this vector; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A vector&#39;s <a class=\"xref\" href=\"system.windows.vector#System_Windows_Vector_X_\" data-linktype=\"relative-path\">X</a> and <a class=\"xref\" href=\"system.windows.vector#System_Windows_Vector_Y_\" data-linktype=\"relative-path\">Y</a> properties are described using <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values. Because the value of a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> can lose precision when arithmetic operations are performed on it, a comparison between two <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structures that are logically equal might fail.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use this method to check whether two <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structures are equal.  </p>\n<pre><code class=\"lang-cs\" name=\"VectorExamples_snip#EqualsExample2_csharp\">private Boolean equalsExample2()\n{\n\n    Vector vector1 = new Vector(20, 30);\n    Vector vector2 = new Vector(20, 30);\n    Boolean areEqual = false;\n\n    // areEqual is True.  Both parameters are Vector structures, \n    // and they are equal.\n    if (vector1.Equals(vector2))\n    {\n        areEqual = true;\n    }\n\n    return areEqual;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_Equals_System_Windows_Vector_System_Windows_Vector_\">\r\n    \r\n            <a id=\"System_Windows_Vector_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Vector,Vector)</div>        \r\n          </div>\r\n    \r\n            <p>Compares the two specified vectors for equality.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool Equals (System.Windows.Vector vector1, System.Windows.Vector vector2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first vector to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second vector to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if t he <span class=\"xref\">stem.Windows.Vector.X*</span> and <span class=\"xref\">stem.Windows.Vector.Y*</span> components of <code>vector1</code> and <code>vector2</code> are equal; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A vector&#39;s <a class=\"xref\" href=\"system.windows.vector#System_Windows_Vector_X_\" data-linktype=\"relative-path\">X</a> and <a class=\"xref\" href=\"system.windows.vector#System_Windows_Vector_Y_\" data-linktype=\"relative-path\">Y</a> properties are described using <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values. Because the value of a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> can lose precision when arithmetic operations are performed on it, a comparison between two <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> structures that are logically equal might fail.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use this method to check whether two <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structures are equal.  </p>\n<pre><code class=\"lang-cs\" name=\"VectorExamples_snip#EqualsExample1_csharp\">private Boolean equalsExample1()\n{\n\n    Vector vector1 = new Vector(20, 30);\n    Vector vector2 = new Vector(20, 30);\n    Boolean areEqual = false;\n\n    // areEqual is True\n    if (Vector.Equals(vector1, vector2))\n    {\n      areEqual = true;\n    }\n\n    return areEqual;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_GetHashCode\">\r\n    \r\n            <a id=\"System_Windows_Vector_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hash code for this vector.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The hash code for this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to get the hash code of a <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"VectorExamples_snip#GetHashCodeExample_csharp\">private int getHashCodeExample()\n{\n    Vector vector1 = new Vector(20, 30);\n    int returnHashCode = vector1.GetHashCode();\n\n    return returnHashCode;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_Multiply_System_Double_System_Windows_Vector_\">\r\n    \r\n            <a id=\"System_Windows_Vector_Multiply_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Multiply(Double,Vector)</div>        \r\n          </div>\r\n    \r\n            <p>Multiplies the specified scalar by the specified vector and returns the resulting <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Vector Multiply (double scalar, System.Windows.Vector vector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>scalar</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The scalar to multiply.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The vector to multiply.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </div>\r\n                  <p>The result of multiplying <code>scalar</code> and <code>vector</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use this method to multiply a scalar by a <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"VectorExamples_snip#MultiplyVectorByScalarExample2_csharp\">private Vector multiplyVectorByScalarExample2()\n{\n    Vector vector1 = new Vector(20, 30);\n    Double scalar1 = 75;\n    Vector vectorResult = new Vector();\n\n    // Multiply the vector by the scalar.\n    // vectorResult is equal to (1500,2250)\n    vectorResult = Vector.Multiply(scalar1, vector1);\n\n    return vectorResult;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_Multiply_System_Windows_Vector_System_Double_\">\r\n    \r\n            <a id=\"System_Windows_Vector_Multiply_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Multiply(Vector,Double)</div>        \r\n          </div>\r\n    \r\n            <p>Multiplies the specified vector by the specified scalar and returns the resulting <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Vector Multiply (System.Windows.Vector vector, double scalar);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The vector to multiply.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>scalar</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The scalar to multiply.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </div>\r\n                  <p>The result of multiplying <code>vector</code> and <code>scalar</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use this method to multiply a <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> by a scalar.  </p>\n<pre><code class=\"lang-cs\" name=\"VectorExamples_snip#MultiplyVectorByScalarExample1_csharp\">private Vector multiplyVectorByScalarExample1()\n{\n    Vector vector1 = new Vector(20, 30);\n    Double scalar1 = 75;\n    Vector vectorResult = new Vector();\n\n    // Multiply the vector by the scalar.\n    // vectorResult is equal to (1500,2250)\n    vectorResult = Vector.Multiply(vector1, scalar1);\n\n    return vectorResult;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_Multiply_System_Windows_Vector_System_Windows_Media_Matrix_\">\r\n    \r\n            <a id=\"System_Windows_Vector_Multiply_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Multiply(Vector,Matrix)</div>        \r\n          </div>\r\n    \r\n            <p>Transforms the coordinate space of the specified vector using the specified <a class=\"xref\" href=\"system.windows.media.matrix\" data-linktype=\"relative-path\">Matrix</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Vector Multiply (System.Windows.Vector vector, System.Windows.Media.Matrix matrix);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The vector structure to transform.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>matrix</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.matrix\" data-linktype=\"relative-path\">Matrix</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The transformation to apply to <code>vector</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </div>\r\n                  <p>The result of transforming <code>vector</code> by <code>matrix</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use this method to multiply a <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> by a <a class=\"xref\" href=\"system.windows.media.matrix\" data-linktype=\"relative-path\">Matrix</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"VectorExamples_snip#MultiplyVectorByMatrixExample_csharp\">private Vector multiplyVectorByMatrixExample()\n{\n    Vector vector1 = new Vector(20, 30);\n    Matrix matrix1 = new Matrix(40, 50, 60, 70, 80, 90);\n    Vector vectorResult = new Vector();\n\n    // Multiply the vector and matrix.\n    // vectorResult is equal to (2600,3100).\n    vectorResult = Vector.Multiply(vector1, matrix1);\n\n    return vectorResult;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_Multiply_System_Windows_Vector_System_Windows_Vector_\">\r\n    \r\n            <a id=\"System_Windows_Vector_Multiply_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Multiply(Vector,Vector)</div>        \r\n          </div>\r\n    \r\n            <p>Calculates the dot product of the two specified vectors and returns the result as a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double Multiply (System.Windows.Vector vector1, System.Windows.Vector vector2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first vector to multiply.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second vector structure to multiply.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> containing the scalar dot product of <code>vector1</code> and <code>vector2</code>, which is calculated using the following formula:  </p>\n<p> <code>(vector1.X * vector2.X) + (vector1.Y * vector2.Y)</code></p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use this method to multiply a <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> by a <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"VectorExamples_snip#GetDotProductExample_csharp\">private Double getDotProductExample()\n{\n    Vector vector1 = new Vector(20, 30);\n    Vector vector2 = new Vector(45, 70);\n    Double doubleResult;\n\n    // Return the dot product of the two specified vectors.\n    // The dot product is calculated using the following \n    // formula: (vector1.X * vector2.X) + (vector1.Y * vector2.Y).\n    // doubleResult is equal to 3000\n    doubleResult = Vector.Multiply(vector1, vector2);\n\n    return doubleResult;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_Negate\">\r\n    \r\n            <a id=\"System_Windows_Vector_Negate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Negate()</div>        \r\n          </div>\r\n    \r\n            <p>Negates this vector. The vector has the same magnitude as before, but its direction is now opposite.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Negate ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use this method to negate a vector.  </p>\n<pre><code class=\"lang-cs\" name=\"VectorExamples_snip#NegateExample_csharp\">private Vector negateExample()\n{\n    Vector vectorResult = new Vector(20, 30);\n\n    // Make the direction of the Vector opposite but\n    // leave the vector magnitude the same.\n    // vectorResult is equal to (-20, -30)\n    vectorResult.Negate();\n\n    return vectorResult;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_Normalize\">\r\n    \r\n            <a id=\"System_Windows_Vector_Normalize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Normalize()</div>        \r\n          </div>\r\n    \r\n            <p>Normalizes this vector.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Normalize ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A normalized vector maintains its direction but its <a class=\"xref\" href=\"system.windows.vector#System_Windows_Vector_Length_\" data-linktype=\"relative-path\">Length</a> becomes 1. The resulting vector is often called a unit vector. A vector is normalized by dividing the vector by its own <a class=\"xref\" href=\"system.windows.vector#System_Windows_Vector_Length_\" data-linktype=\"relative-path\">Length</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use this method to normalize a vector.  </p>\n<pre><code class=\"lang-cs\" name=\"VectorExamples_snip#NormalizeExample_csharp\">private Vector normalizeExample()\n{\n    Vector vectorResult = new Vector(20, 30);\n\n    // A normalized vector maintains its direction but \n    // its length becomes 1. \n    // vectorResult is approximately equal to (0.5547,0.8321).\n    vectorResult.Normalize();\n\n    return vectorResult;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_Parse_System_String_\">\r\n    \r\n            <a id=\"System_Windows_Vector_Parse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parse(String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts a string representation of a vector into the equivalent <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structure.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Vector Parse (string source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string representation of the vector.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </div>\r\n                  <p>The equivalent <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structure.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use this method to convert a string representation of a vector into a <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structure.  </p>\n<pre><code class=\"lang-vb\" name=\"VectorExamples_snip#ParseExample\">Private Function parseExample() As Vector\n\n\t&#39; Convert string into a Vector structure.\n\t&#39; vectorResult is equal to (1,3)\n\tDim vectorResult As Vector = Vector.Parse(&quot;1,3&quot;)\n\n\tReturn vectorResult\n\nEnd Function\n</code></pre><pre><code class=\"lang-cs\" name=\"VectorExamples_snip#ParseExample\">private Vector parseExample()\n{\n\n    // Convert string into a Vector structure.\n    // vectorResult is equal to (1,3)\n    Vector vectorResult = Vector.Parse(&quot;1,3&quot;);\n\n    return vectorResult;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_Subtract_System_Windows_Vector_System_Windows_Vector_\">\r\n    \r\n            <a id=\"System_Windows_Vector_Subtract_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Subtract(Vector,Vector)</div>        \r\n          </div>\r\n    \r\n            <p>Subtracts the specified vector from another specified vector.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Vector Subtract (System.Windows.Vector vector1, System.Windows.Vector vector2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The vector from which <code>vector2</code> is subtracted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The vector to subtract from <code>vector1</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </div>\r\n                  <p>The difference between <code>vector1</code> and <code>vector2</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use this method to subtract a <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structure from a <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structure.  </p>\n<pre><code class=\"lang-vb\" name=\"VectorExamples_snip#SubtractExample\">Private Function subtractExample() As Vector\n\n\tDim vector1 As New Vector(20, 30)\n\tDim vector2 As New Vector(45, 70)\n\n\t&#39; Subtract vector2 from vector1.\n\t&#39; vectorResult is equal to (-25, -40)\n\tDim vectorResult As Vector = Vector.Subtract(vector1, vector2)\n\n\tReturn vectorResult\n\nEnd Function\n</code></pre><pre><code class=\"lang-cs\" name=\"VectorExamples_snip#SubtractExample\">private Vector subtractExample()\n{\n\n    Vector vector1 = new Vector(20, 30);\n    Vector vector2 = new Vector(45, 70);\n\n    // Subtract vector2 from vector1.\n    // vectorResult is equal to (-25, -40)\n    Vector vectorResult = Vector.Subtract(vector1, vector2);\n\n    return vectorResult;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_ToString\">\r\n    \r\n            <a id=\"System_Windows_Vector_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the string representation of this <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structure.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that represents the <span class=\"xref\">stem.Windows.Vector.X*</span> and <span class=\"xref\">stem.Windows.Vector.Y*</span> values of this <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use this method to get a string representation of a <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"VectorExamples_snip#ToStringExample\">Private Function toStringExample() As String\n\n\tDim vector1 As New Vector(20, 30)\n\n\t&#39; vectorString is equal to &quot;20,30&quot;.\n\tDim stringResult As String = vector1.ToString()\n\n\tReturn stringResult\n\nEnd Function\n</code></pre><pre><code class=\"lang-cs\" name=\"VectorExamples_snip#ToStringExample\">private String toStringExample()\n{\n\n    Vector vector1 = new Vector(20, 30);\n\n    // vectorString is equal to &quot;20,30&quot;.\n    String stringResult = vector1.ToString();\n\n    return stringResult;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_ToString_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Windows_Vector_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the string representation of this <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structure with the specified formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToString (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that represents the <span class=\"xref\">stem.Windows.Vector.X*</span> and <span class=\"xref\">stem.Windows.Vector.Y*</span> values of this <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"operators\">\r\n        <h2>Operators\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_op_Addition_System_Windows_Vector_System_Windows_Point_\">\r\n    \r\n            <a id=\"System_Windows_Vector_op_Addition_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Addition(Vector,Point)</div>        \r\n          </div>\r\n    \r\n            <p>Translates a point by the specified vector and returns the resulting point.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Point op_Addition (System.Windows.Vector vector, System.Windows.Point point);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The vector used to translate <code>point</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>point</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The point to translate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </div>\r\n                  <p>The result of translating <code>point</code> by <code>vector</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use this operator (+) to translate a <a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a> structure to a <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structure.  </p>\n<pre><code class=\"lang-vb\" name=\"VectorExamples_snip#OverloadedAdditionOperatorExample2\">Private Function overloadedAdditionOperatorExample2() As Point\n\tDim point1 As New Point(10, 5)\n\tDim vector1 As New Vector(20, 30)\n\tDim pointResult As New Point()\n\n\t&#39; Add the point to the vector.\n\t&#39; pointResult is equal to (30,35).\n\tpointResult = point1 + vector1\n\n\tReturn pointResult\n\nEnd Function\n</code></pre><pre><code class=\"lang-cs\" name=\"VectorExamples_snip#OverloadedAdditionOperatorExample2\">private Point overloadedAdditionOperatorExample2()\n{\n    Point point1 = new Point(10, 5);\n    Vector vector1 = new Vector(20, 30);\n    Point pointResult = new Point();\n\n    // Add the point to the vector.\n    // pointResult is equal to (30,35).\n    pointResult = point1 + vector1;\n\n    return pointResult;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_op_Addition_System_Windows_Vector_System_Windows_Vector_\">\r\n    \r\n            <a id=\"System_Windows_Vector_op_Addition_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Addition(Vector,Vector)</div>        \r\n          </div>\r\n    \r\n            <p>Adds two vectors and returns the result as a vector.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Vector op_Addition (System.Windows.Vector vector1, System.Windows.Vector vector2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first vector to add.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second vector to add.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </div>\r\n                  <p>The sum of <code>vector1</code> and <code>vector2</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use this operator (+) to add two <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structures and return a <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"VectorExamples_snip#OverloadedAdditionOperatorExample1\">Private Function overloadedAdditionOperatorExample1() As Vector\n\tDim vector1 As New Vector(20, 30)\n\tDim vector2 As New Vector(45, 70)\n\tDim vectorResult As New Vector()\n\n\t&#39; Add the two vectors together.\n\t&#39; vectorResult is equal to (65,100)\n\tvectorResult = vector1 + vector2\n\n\tReturn vectorResult\n\nEnd Function\n</code></pre><pre><code class=\"lang-cs\" name=\"VectorExamples_snip#OverloadedAdditionOperatorExample1\">private Vector overloadedAdditionOperatorExample1()\n{\n    Vector vector1 = new Vector(20, 30);\n    Vector vector2 = new Vector(45, 70);\n    Vector vectorResult = new Vector();\n\n    // Add the two vectors together.\n    // vectorResult is equal to (65,100)\n    vectorResult = vector1 + vector2;\n\n    return vectorResult;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_op_Division_System_Windows_Vector_System_Double_\">\r\n    \r\n            <a id=\"System_Windows_Vector_op_Division_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Division(Vector,Double)</div>        \r\n          </div>\r\n    \r\n            <p>Divides the specified vector by the specified scalar and returns the resulting vector.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Vector op_Division (System.Windows.Vector vector, double scalar);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The vector to divide.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>scalar</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The scalar by which <code>vector</code> will be divided.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </div>\r\n                  <p>The result of dividing <code>vector</code> by <code>scalar</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use this operator (/) to divide a <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structure by a scalar.  </p>\n<pre><code class=\"lang-vb\" name=\"VectorExamples_snip#OverloadedDivisionOperatorExample\">Private Function overloadedDivisionOperatorExample() As Vector\n\tDim vector1 As New Vector(20, 30)\n\tDim vectorResult As New Vector()\n\tDim scalar1 As Double = 75\n\n\t&#39; Divide vector by scalar.\n\t&#39; vectorResult is approximately equal to (0.26667,0.4)\n\tvectorResult = vector1 / scalar1\n\n\tReturn vectorResult\n\nEnd Function\n</code></pre><pre><code class=\"lang-cs\" name=\"VectorExamples_snip#OverloadedDivisionOperatorExample\">private Vector overloadedDivisionOperatorExample()\n{\n    Vector vector1 = new Vector(20, 30);\n    Vector vectorResult = new Vector();\n    Double scalar1 = 75;\n\n    // Divide vector by scalar.\n    // vectorResult is approximately equal to (0.26667,0.4)\n    vectorResult = vector1 / scalar1;\n\n    return vectorResult;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_op_Equality_System_Windows_Vector_System_Windows_Vector_\">\r\n    \r\n            <a id=\"System_Windows_Vector_op_Equality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Equality(Vector,Vector)</div>        \r\n          </div>\r\n    \r\n            <p>Compares two vectors for equality.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Equality (System.Windows.Vector vector1, System.Windows.Vector vector2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first vector to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second vector to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <span class=\"xref\">stem.Windows.Vector.X*</span> and <span class=\"xref\">stem.Windows.Vector.Y*</span> components of <code>vector1</code> and <code>vector2</code> are equal; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A vector&#39;s <a class=\"xref\" href=\"system.windows.vector#System_Windows_Vector_X_\" data-linktype=\"relative-path\">X</a> and <a class=\"xref\" href=\"system.windows.vector#System_Windows_Vector_Y_\" data-linktype=\"relative-path\">Y</a> properties are described using <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values. Because the value of a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> can lose precision when arithmetic operations are performed on it, a comparison between two <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structures that are logically equal might fail.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use this operator (==) to check whether two <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structures are equal.  </p>\n<pre><code class=\"lang-vb\" name=\"VectorExamples_snip#OverloadedEqualityOperatorExample\">Private Function overloadedEqualityOperatorExample() As Boolean\n\tDim vector1 As New Vector(20, 30)\n\tDim vector2 As New Vector(45, 70)\n\n\t&#39; If the two vectors are equal, areEqual is True,\n\t&#39; otherwise it is False. In this example it is False.\n\tDim areEqual As Boolean = (vector1 = vector2)\n\n\tReturn areEqual\n\nEnd Function\n</code></pre><pre><code class=\"lang-cs\" name=\"VectorExamples_snip#OverloadedEqualityOperatorExample\">private Boolean overloadedEqualityOperatorExample()\n{\n    Vector vector1 = new Vector(20, 30);\n    Vector vector2 = new Vector(45, 70);\n\n    // If the two vectors are equal, areEqual is True,\n    // otherwise it is False. In this example it is False.\n    Boolean areEqual = (vector1 == vector2);\n\n    return areEqual;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_op_Explicit_System_Windows_Vector_to_System_Windows_Point_\">\r\n    \r\n            <a id=\"System_Windows_Vector_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(Vector)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Point op_Explicit (System.Windows.Vector vector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_op_Explicit_System_Windows_Vector_to_System_Windows_Size_\">\r\n    \r\n            <a id=\"System_Windows_Vector_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(Vector)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Size op_Explicit (System.Windows.Vector vector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_op_Inequality_System_Windows_Vector_System_Windows_Vector_\">\r\n    \r\n            <a id=\"System_Windows_Vector_op_Inequality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Inequality(Vector,Vector)</div>        \r\n          </div>\r\n    \r\n            <p>Compares two vectors for inequality.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Inequality (System.Windows.Vector vector1, System.Windows.Vector vector2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first vector to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second vector to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <span class=\"xref\">stem.Windows.Vector.X*</span> and <span class=\"xref\">stem.Windows.Vector.Y*</span> components of <code>vector1</code> and <code>vector2</code> are different; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A vector&#39;s <a class=\"xref\" href=\"system.windows.vector#System_Windows_Vector_X_\" data-linktype=\"relative-path\">X</a> and <a class=\"xref\" href=\"system.windows.vector#System_Windows_Vector_Y_\" data-linktype=\"relative-path\">Y</a> properties are described using <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values. Because the value of a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> can lose precision when arithmetic operations are performed on it, a comparison between two <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structures that are logically equal might fail.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use this operator (!=) to check whether two <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structures are not equal.  </p>\n<pre><code class=\"lang-vb\" name=\"VectorExamples_snip#OverloadedInequalityOperatorExample\">Private Function overloadedInequalityOperatorExample() As Boolean\n\tDim vector1 As New Vector(20, 30)\n\tDim vector2 As New Vector(45, 70)\n\tDim areNotEqual As Boolean\n\n\t&#39; Check whether the two Vectors are not equal, using the overloaded \n\t&#39; inequality operator.\n\t&#39; areNotEqual is True.\n\tareNotEqual = (vector1 &lt;&gt; vector2)\n\n\tReturn areNotEqual\n\nEnd Function\n</code></pre><pre><code class=\"lang-cs\" name=\"VectorExamples_snip#OverloadedInequalityOperatorExample\">private Boolean overloadedInequalityOperatorExample()\n{\n    Vector vector1 = new Vector(20, 30);\n    Vector vector2 = new Vector(45, 70);\n    Boolean areNotEqual;\n\n    // Check whether the two Vectors are not equal, using the overloaded \n    // inequality operator.\n    // areNotEqual is True.\n    areNotEqual = (vector1 != vector2);\n\n    return areNotEqual;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_op_Multiply_System_Double_System_Windows_Vector_\">\r\n    \r\n            <a id=\"System_Windows_Vector_op_Multiply_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Multiply(Double,Vector)</div>        \r\n          </div>\r\n    \r\n            <p>Multiplies the specified scalar by the specified vector and returns the resulting vector.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Vector op_Multiply (double scalar, System.Windows.Vector vector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>scalar</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The scalar to multiply.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The vector to multiply.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </div>\r\n                  <p>The result of multiplying <code>scalar</code> and <code>vector</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use this operator (*) to multiply a scalar by a <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structure.  </p>\n<pre><code class=\"lang-vb\" name=\"VectorExamples_snip#OverloadedMultiplicationOperatorExample2\">Private Function overloadedMultiplicationOperatorExample2() As Vector\n\tDim vector1 As New Vector(20, 30)\n\tDim scalar1 As Double = 75\n\n\t&#39; vectorResult is equal to (1500,2250)\n\tDim vectorResult As Vector = scalar1 * vector1\n\n\tReturn vectorResult\n\nEnd Function\n</code></pre><pre><code class=\"lang-cs\" name=\"VectorExamples_snip#OverloadedMultiplicationOperatorExample2\">private Vector overloadedMultiplicationOperatorExample2()\n{\n    Vector vector1 = new Vector(20, 30);\n    Double scalar1 = 75;\n\n    // vectorResult is equal to (1500,2250)\n    Vector vectorResult = scalar1 * vector1;\n\n    return vectorResult;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_op_Multiply_System_Windows_Vector_System_Double_\">\r\n    \r\n            <a id=\"System_Windows_Vector_op_Multiply_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Multiply(Vector,Double)</div>        \r\n          </div>\r\n    \r\n            <p>Multiplies the specified vector by the specified scalar and returns the resulting vector.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Vector op_Multiply (System.Windows.Vector vector, double scalar);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The vector to multiply.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>scalar</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The scalar to multiply.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </div>\r\n                  <p>The result of multiplying <code>vector</code> and <code>scalar</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use this operator (*) to multiply a <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structure by a scalar.  </p>\n<pre><code class=\"lang-vb\" name=\"VectorExamples_snip#OverloadedMultiplicationOperatorExample1\">Private Function overloadedMultiplicationOperatorExample1() As Vector\n\tDim vector1 As New Vector(20, 30)\n\tDim scalar1 As Double = 75\n\n\t&#39; vectorResult is equal to (1500,2250)\n\tDim vectorResult As Vector = vector1 * scalar1\n\n\tReturn vectorResult\n\nEnd Function\n</code></pre><pre><code class=\"lang-cs\" name=\"VectorExamples_snip#OverloadedMultiplicationOperatorExample1\">private Vector overloadedMultiplicationOperatorExample1()\n{\n    Vector vector1 = new Vector(20, 30);\n    Double scalar1 = 75;\n\n    // vectorResult is equal to (1500,2250)\n    Vector vectorResult = vector1 * scalar1;\n\n    return vectorResult;\n    \n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_op_Multiply_System_Windows_Vector_System_Windows_Media_Matrix_\">\r\n    \r\n            <a id=\"System_Windows_Vector_op_Multiply_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Multiply(Vector,Matrix)</div>        \r\n          </div>\r\n    \r\n            <p>Transforms the coordinate space of the specified vector using the specified <a class=\"xref\" href=\"system.windows.media.matrix\" data-linktype=\"relative-path\">Matrix</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Vector op_Multiply (System.Windows.Vector vector, System.Windows.Media.Matrix matrix);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The vector to transform.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>matrix</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.matrix\" data-linktype=\"relative-path\">Matrix</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The transformation to apply to <code>vector</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </div>\r\n                  <p>The result of transforming <code>vector</code> by <code>matrix</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use this operator (*) to multiply a <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structure by a <a class=\"xref\" href=\"system.windows.media.matrix\" data-linktype=\"relative-path\">Matrix</a> structure.  </p>\n<pre><code class=\"lang-vb\" name=\"VectorExamples_snip#OverloadedMultiplyVectorByMatrixOperatorExample\">Private Function overloadedMultiplyVectorByMatrixOperatorExample() As Vector\n\tDim vector1 As New Vector(20, 30)\n\tDim matrix1 As New Matrix(40, 50, 60, 70, 80, 90)\n\tDim vectorResult As New Vector()\n\n\t&#39; Multiply the vector and matrix.\n\t&#39; vectorResult is equal to (2600,3100).\n\tvectorResult = vector1 * matrix1\n\n\tReturn vectorResult\n\nEnd Function\n</code></pre><pre><code class=\"lang-cs\" name=\"VectorExamples_snip#OverloadedMultiplyVectorByMatrixOperatorExample\">private Vector overloadedMultiplyVectorByMatrixOperatorExample()\n{\n    Vector vector1 = new Vector(20, 30);\n    Matrix matrix1 = new Matrix(40, 50, 60, 70, 80, 90);\n    Vector vectorResult = new Vector();\n\n    // Multiply the vector and matrix.\n    // vectorResult is equal to (2600,3100).\n    vectorResult = vector1 * matrix1;\n\n    return vectorResult;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_op_Multiply_System_Windows_Vector_System_Windows_Vector_\">\r\n    \r\n            <a id=\"System_Windows_Vector_op_Multiply_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Multiply(Vector,Vector)</div>        \r\n          </div>\r\n    \r\n            <p>Calculates the dot product of the two specified vector structures and returns the result as a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double op_Multiply (System.Windows.Vector vector1, System.Windows.Vector vector2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first vector to multiply.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second vector to multiply.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>Returns a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> containing the scalar dot product of <code>vector1</code> and <code>vector2</code>, which is calculated using the following formula:  </p>\n<p> <code>vector1.X * vector2.X + vector1.Y * vector2.Y</code></p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use this operator (*) to multiply a <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structure by a <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"VectorExamples_snip#OverloadedOperatorGetDotProductExample\">Private Function overloadedOperatorGetDotProductExample() As Double\n\tDim vector1 As New Vector(20, 30)\n\tDim vector2 As New Vector(45, 70)\n\n\t&#39; Return the dot product of the two specified vectors\n\t&#39; using the overloaded &quot;*&quot; operator.\n\t&#39; The dot product is calculated using the following \n\t&#39; formula: (vector1.X * vector2.X) + (vector1.Y * vector2.Y).\n\t&#39; doubleResult is equal to 3000\n\tDim doubleResult As Double = Vector.Multiply(vector1, vector2)\n\n\tReturn doubleResult\n\nEnd Function\n</code></pre><pre><code class=\"lang-cs\" name=\"VectorExamples_snip#OverloadedOperatorGetDotProductExample\">private Double overloadedOperatorGetDotProductExample()\n{\n    Vector vector1 = new Vector(20, 30);\n    Vector vector2 = new Vector(45, 70);\n\n    // Return the dot product of the two specified vectors\n    // using the overloaded &quot;*&quot; operator.\n    // The dot product is calculated using the following \n    // formula: (vector1.X * vector2.X) + (vector1.Y * vector2.Y).\n    // doubleResult is equal to 3000\n    Double doubleResult = Vector.Multiply(vector1, vector2);\n\n    return doubleResult;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_op_Subtraction_System_Windows_Vector_System_Windows_Vector_\">\r\n    \r\n            <a id=\"System_Windows_Vector_op_Subtraction_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Subtraction(Vector,Vector)</div>        \r\n          </div>\r\n    \r\n            <p>Subtracts one specified vector from another.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Vector op_Subtraction (System.Windows.Vector vector1, System.Windows.Vector vector2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The vector from which <code>vector2</code> is subtracted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The vector to subtract from <code>vector1</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </div>\r\n                  <p>The difference between <code>vector1</code> and <code>vector2</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use this operator (-) to subtract a <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structure from a <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structure.  </p>\n<pre><code class=\"lang-vb\" name=\"VectorExamples_snip#OverloadedSubtractionOperatorExample\">Private Function overloadedSubtractionOperatorExample() As Vector\n\tDim vector1 As New Vector(20, 30)\n\tDim vector2 As New Vector(45, 70)\n\n\t&#39; Subtract vector2 from vector1 using the overloaded\n\t&#39; &quot;-&quot; operator.\n\t&#39; vector Result is equal to (-25, -40).\n\tDim vectorResult As Vector = vector1 - vector2\n\n\tReturn vectorResult\n\nEnd Function\n</code></pre><pre><code class=\"lang-cs\" name=\"VectorExamples_snip#OverloadedSubtractionOperatorExample\">private Vector overloadedSubtractionOperatorExample()\n{\n    Vector vector1 = new Vector(20, 30);\n    Vector vector2 = new Vector(45, 70);\n\n    // Subtract vector2 from vector1 using the overloaded\n    // &quot;-&quot; operator.\n    // vector Result is equal to (-25, -40).\n    Vector vectorResult = vector1 - vector2;\n\n    return vectorResult;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_op_UnaryNegation_System_Windows_Vector_\">\r\n    \r\n            <a id=\"System_Windows_Vector_op_UnaryNegation_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_UnaryNegation(Vector)</div>        \r\n          </div>\r\n    \r\n            <p>Negates the specified vector.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Vector op_UnaryNegation (System.Windows.Vector vector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The vector to negate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </div>\r\n                  <p>A vector with <span class=\"xref\">stem.Windows.Vector.X*</span> and <span class=\"xref\">stem.Windows.Vector.Y*</span> values opposite of the <span class=\"xref\">stem.Windows.Vector.X*</span> and <span class=\"xref\">stem.Windows.Vector.Y*</span> values of <code>vector</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use this negation operator to negate a <a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a> structure.  </p>\n<pre><code class=\"lang-vb\" name=\"VectorExamples_snip#OverloadedNegationOperatorExample\">Private Function overloadedNegationOperatorExample() As Vector\n\tDim vector1 As New Vector(20, 30)\n\n\t&#39; Negate vector1 with the overloaded negation operator.\n\t&#39; vectorResult is equal to (-20, -30).\n\tDim vectorResult As Vector = -vector1\n\n\tReturn vectorResult\n\nEnd Function\n</code></pre><pre><code class=\"lang-cs\" name=\"VectorExamples_snip#OverloadedNegationOperatorExample\">private Vector overloadedNegationOperatorExample()\n{\n    Vector vector1 = new Vector(20, 30);\n\n    // Negate vector1 with the overloaded negation operator.\n    // vectorResult is equal to (-20, -30).\n    Vector vectorResult = -vector1;\n\n    return vectorResult;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Vector_System_IFormattable_ToString_System_String_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Windows_Vector_System_IFormattable_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IFormattable.ToString(String,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. For a description of this member, see <span class=\"xref\">stem.IFormattable.ToString*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">string IFormattable.ToString (string format, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string specifying the format to use.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to use the default format defined for the type of the <a class=\"xref\" href=\"system.iformattable\" data-linktype=\"relative-path\">IFormattable</a> implementation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>IFormatProvider</code> to use to format the value.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to obtain the numeric format information from the current locale setting of the operating system.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string containing the value of the current instance in the specified format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Vector.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Vector.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Vector\">\r\n<meta name=\"APIName\" content=\"System.Windows.Vector..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Vector.Add\">\r\n<meta name=\"APIName\" content=\"System.Windows.Vector.AngleBetween\">\r\n<meta name=\"APIName\" content=\"System.Windows.Vector.CrossProduct\">\r\n<meta name=\"APIName\" content=\"System.Windows.Vector.Determinant\">\r\n<meta name=\"APIName\" content=\"System.Windows.Vector.Divide\">\r\n<meta name=\"APIName\" content=\"System.Windows.Vector.Equals\">\r\n<meta name=\"APIName\" content=\"System.Windows.Vector.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Windows.Vector.Length\">\r\n<meta name=\"APIName\" content=\"System.Windows.Vector.LengthSquared\">\r\n<meta name=\"APIName\" content=\"System.Windows.Vector.Multiply\">\r\n<meta name=\"APIName\" content=\"System.Windows.Vector.Negate\">\r\n<meta name=\"APIName\" content=\"System.Windows.Vector.Normalize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Vector.op_Addition\">\r\n<meta name=\"APIName\" content=\"System.Windows.Vector.op_op_Addition\">\r\n<meta name=\"APIName\" content=\"System.Windows.Vector.op_Division\">\r\n<meta name=\"APIName\" content=\"System.Windows.Vector.op_op_Division\">\r\n<meta name=\"APIName\" content=\"System.Windows.Vector.op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Windows.Vector.op_op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Windows.Vector.op_Explicit\">\r\n<meta name=\"APIName\" content=\"System.Windows.Vector.op_op_Explicit\">\r\n<meta name=\"APIName\" content=\"System.Windows.Vector.op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Windows.Vector.op_op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Windows.Vector.op_Multiply\">\r\n<meta name=\"APIName\" content=\"System.Windows.Vector.op_op_Multiply\">\r\n<meta name=\"APIName\" content=\"System.Windows.Vector.op_Subtraction\">\r\n<meta name=\"APIName\" content=\"System.Windows.Vector.op_op_Subtraction\">\r\n<meta name=\"APIName\" content=\"System.Windows.Vector.op_UnaryNegation\">\r\n<meta name=\"APIName\" content=\"System.Windows.Vector.op_op_UnaryNegation\">\r\n<meta name=\"APIName\" content=\"System.Windows.Vector.Parse\">\r\n<meta name=\"APIName\" content=\"System.Windows.Vector.Subtract\">\r\n<meta name=\"APIName\" content=\"System.Windows.Vector.IFormattable.ToString\">\r\n<meta name=\"APIName\" content=\"System.Windows.Vector.ToString\">\r\n<meta name=\"APIName\" content=\"System.Windows.Vector.X\">\r\n<meta name=\"APIName\" content=\"System.Windows.Vector.Y\">\r\n<meta name=\"APILocation\" content=\"WindowsBase.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"893355df-8399-7c77-59a2-24078b58c04e\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a displacement in 2-D space.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Vector\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Vector.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Vector.yml","open_to_public_contributors":true,"api_name":["System.Windows.Vector","System.Windows.Vector..ctor","System.Windows.Vector.Add","System.Windows.Vector.AngleBetween","System.Windows.Vector.CrossProduct","System.Windows.Vector.Determinant","System.Windows.Vector.Divide","System.Windows.Vector.Equals","System.Windows.Vector.GetHashCode","System.Windows.Vector.Length","System.Windows.Vector.LengthSquared","System.Windows.Vector.Multiply","System.Windows.Vector.Negate","System.Windows.Vector.Normalize","System.Windows.Vector.op_Addition","System.Windows.Vector.op_op_Addition","System.Windows.Vector.op_Division","System.Windows.Vector.op_op_Division","System.Windows.Vector.op_Equality","System.Windows.Vector.op_op_Equality","System.Windows.Vector.op_Explicit","System.Windows.Vector.op_op_Explicit","System.Windows.Vector.op_Inequality","System.Windows.Vector.op_op_Inequality","System.Windows.Vector.op_Multiply","System.Windows.Vector.op_op_Multiply","System.Windows.Vector.op_Subtraction","System.Windows.Vector.op_op_Subtraction","System.Windows.Vector.op_UnaryNegation","System.Windows.Vector.op_op_UnaryNegation","System.Windows.Vector.Parse","System.Windows.Vector.Subtract","System.Windows.Vector.IFormattable.ToString","System.Windows.Vector.ToString","System.Windows.Vector.X","System.Windows.Vector.Y"],"api_location":["WindowsBase.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Vector","System::Windows::Vector","System.Windows.Vector.#ctor","System::Windows::Vector::#ctor","System.Windows.Vector.Add","System::Windows::Vector::Add","System.Windows.Vector.AngleBetween","System::Windows::Vector::AngleBetween","System.Windows.Vector.CrossProduct","System::Windows::Vector::CrossProduct","System.Windows.Vector.Determinant","System::Windows::Vector::Determinant","System.Windows.Vector.Divide","System::Windows::Vector::Divide","System.Windows.Vector.Equals","System::Windows::Vector::Equals","System.Windows.Vector.GetHashCode","System::Windows::Vector::GetHashCode","System.Windows.Vector.Length","System::Windows::Vector::Length","System.Windows.Vector.LengthSquared","System::Windows::Vector::LengthSquared","System.Windows.Vector.Multiply","System::Windows::Vector::Multiply","System.Windows.Vector.Negate","System::Windows::Vector::Negate","System.Windows.Vector.Normalize","System::Windows::Vector::Normalize","System.Windows.Vector.op_Addition","System::Windows::Vector::op_Addition","System.Windows.Vector.op_Division","System::Windows::Vector::op_Division","System.Windows.Vector.op_Equality","System::Windows::Vector::op_Equality","System.Windows.Vector.op_Explicit","System::Windows::Vector::op_Explicit","System.Windows.Vector.op_Inequality","System::Windows::Vector::op_Inequality","System.Windows.Vector.op_Multiply","System::Windows::Vector::op_Multiply","System.Windows.Vector.op_Subtraction","System::Windows::Vector::op_Subtraction","System.Windows.Vector.op_UnaryNegation","System::Windows::Vector::op_UnaryNegation","System.Windows.Vector.Parse","System::Windows::Vector::Parse","System.Windows.Vector.Subtract","System::Windows::Vector::Subtract","System.Windows.Vector.System#IFormattable#ToString","System::Windows::Vector::System#IFormattable#ToString","System.Windows.Vector.ToString","System::Windows::Vector::ToString","System.Windows.Vector.X","System::Windows::Vector::X","System.Windows.Vector.Y","System::Windows::Vector::Y"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"893355df-8399-7c77-59a2-24078b58c04e","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows/Vector.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Vector struct | Microsoft Docs","_op_ogTitle":"Vector struct","description":"Represents a displacement in 2-D space.\n","toc_asset_id":"_splitted/System.Windows/toc.json","toc_rel":"_splitted/System.Windows/toc.json","source_url":"","ms.assetid":"System.Windows.Vector","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.vector","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.vector","fileRelativePath":"System.Windows.Vector.html"},"themesRelativePathToOutputRoot":"_themes/"}