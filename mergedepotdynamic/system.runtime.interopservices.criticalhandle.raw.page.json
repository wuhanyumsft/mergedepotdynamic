{"content":"    \r\n    <h1 id=\"System_Runtime_InteropServices_CriticalHandle\">\r\n      <span class=\"lang-csharp\">CriticalHandle</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a wrapper class for handle resources.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Security.SecurityCritical]\npublic abstract class CriticalHandle : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.runtime.constrainedexecution.criticalfinalizerobject\" data-linktype=\"relative-path\">System.Runtime.ConstrainedExecution.CriticalFinalizerObject</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">CriticalHandle</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The CriticalHandle class is similar to the <a class=\"xref\" href=\"system.runtime.interopservices.safehandle\" data-linktype=\"relative-path\">SafeHandle</a> class, except that <a class=\"xref\" href=\"system.runtime.interopservices.safehandle\" data-linktype=\"relative-path\">SafeHandle</a> implements reference counting. You can use CriticalHandle instead of <a class=\"xref\" href=\"system.runtime.interopservices.safehandle\" data-linktype=\"relative-path\">SafeHandle</a> to address performance considerations when you can provide the necessary synchronization more efficiently yourself.  </p>\n<p> Because the CriticalHandle class does not perform reference counting, it does not provide protection from handle recycling security attacks. Because the reference counting algorithm implicitly serializes operations, a certain amount of thread safety is also lost. If you call the <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> or <a class=\"xref\" href=\"system.runtime.interopservices.safehandle#System_Runtime_InteropServices_SafeHandle_Close_\" data-linktype=\"relative-path\">Close</a> method while an operation that is using the handle is outstanding on another thread, or if you call <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> or <a class=\"xref\" href=\"system.runtime.interopservices.safehandle#System_Runtime_InteropServices_SafeHandle_Close_\" data-linktype=\"relative-path\">Close</a> from two threads at the same time, the results are non-deterministic. The CriticalHandle class still provides the guaranteed critical finalization provided by the <a class=\"xref\" href=\"system.runtime.constrainedexecution.criticalfinalizerobject\" data-linktype=\"relative-path\">CriticalFinalizerObject</a> class.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_CriticalHandle__ctor_System_IntPtr_\" data-linktype=\"self-bookmark\">CriticalHandle(IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle\" data-linktype=\"relative-path\">CriticalHandle</a> class with the specified invalid handle value.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_CriticalHandle_handle\" data-linktype=\"self-bookmark\">handle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies the handle to be wrapped.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_CriticalHandle_IsClosed\" data-linktype=\"self-bookmark\">IsClosed</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the handle is closed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_CriticalHandle_IsInvalid\" data-linktype=\"self-bookmark\">IsInvalid</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, gets a value indicating whether the handle value is invalid.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_CriticalHandle_Close\" data-linktype=\"self-bookmark\">Close()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Marks the handle for releasing and freeing resources.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_CriticalHandle_Dispose\" data-linktype=\"self-bookmark\">Dispose()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases all resources used by the <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle\" data-linktype=\"relative-path\">CriticalHandle</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_CriticalHandle_Dispose_System_Boolean_\" data-linktype=\"self-bookmark\">Dispose(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle\" data-linktype=\"relative-path\">CriticalHandle</a> class specifying whether to perform a normal dispose operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_CriticalHandle_Finalize\" data-linktype=\"self-bookmark\">Finalize()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Frees all resources associated with the handle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_CriticalHandle_ReleaseHandle\" data-linktype=\"self-bookmark\">ReleaseHandle()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, executes the code required to free the handle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_CriticalHandle_SetHandle_System_IntPtr_\" data-linktype=\"self-bookmark\">SetHandle(IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the handle to the specified pre-existing handle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_InteropServices_CriticalHandle_SetHandleAsInvalid\" data-linktype=\"self-bookmark\">SetHandleAsInvalid()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Marks a handle as invalid.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_CriticalHandle__ctor_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_CriticalHandle__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CriticalHandle(IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle\" data-linktype=\"relative-path\">CriticalHandle</a> class with the specified invalid handle value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected CriticalHandle (IntPtr invalidHandleValue);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>invalidHandleValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of an invalid handle (usually 0 or -1).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p>The derived class resides in an assembly without unmanaged code access permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_CriticalHandle_handle\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">handle</div>        \r\n          </div>\r\n    \r\n            <p>Specifies the handle to be wrapped.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected IntPtr handle;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Do not expose the handle publicly (that is, outside of the derived class).</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_CriticalHandle_IsClosed\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_CriticalHandle_IsClosed_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsClosed</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the handle is closed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsClosed { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the handle is closed; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The IsClosed method returns a value indicating whether the <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle\" data-linktype=\"relative-path\">CriticalHandle</a> object&#39;s handle is no longer associated with a native resource. This differs from the definition of the <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle#System_Runtime_InteropServices_CriticalHandle_IsInvalid_\" data-linktype=\"relative-path\">IsInvalid</a> property, which computes whether a given handle is always considered invalid. The IsClosed method returns a <code>true</code> value in the following cases:  </p>\n<ul>\n<li><p>The <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle#System_Runtime_InteropServices_CriticalHandle_SetHandleAsInvalid_\" data-linktype=\"relative-path\">SetHandleAsInvalid</a> method was called.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle#System_Runtime_InteropServices_CriticalHandle_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method or <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle#System_Runtime_InteropServices_CriticalHandle_Close_\" data-linktype=\"relative-path\">Close</a> method was called and there are no references to the <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle\" data-linktype=\"relative-path\">CriticalHandle</a> object on other threads.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_CriticalHandle_IsInvalid\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_CriticalHandle_IsInvalid_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsInvalid</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, gets a value indicating whether the handle value is invalid.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract bool IsInvalid { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the handle is valid; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Derived classes must implement the IsInvalid property so that the common language runtime can determine whether critical finalization is required. Derived classes must provide an implementation that suits the general type of handle they support (0 or -1 is invalid). These classes can then be further derived for specific safe handle types.  </p>\n<p> Unlike the <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle#System_Runtime_InteropServices_CriticalHandle_IsClosed_\" data-linktype=\"relative-path\">IsClosed</a> property, which reports whether the <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle\" data-linktype=\"relative-path\">CriticalHandle</a> object has finished using the underlying handle, the IsInvalid property calculates whether the given handle value is always considered invalid. Therefore, the IsInvalid property always returns the same value for any one handle value.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_CriticalHandle_Close\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_CriticalHandle_Close_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Close()</div>        \r\n          </div>\r\n    \r\n            <p>Marks the handle for releasing and freeing resources.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Close ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling the Close or <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle#System_Runtime_InteropServices_CriticalHandle_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method allows the resources to be freed. Unlike the <a class=\"xref\" href=\"system.runtime.interopservices.safehandle\" data-linktype=\"relative-path\">SafeHandle</a> class, this will always happen immediately since there is no reference count to indicate that other threads are using this handle. Therefore, you must employ a synchronization mechanism to ensure it is safe to call the Close method. Although most classes that use the <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle\" data-linktype=\"relative-path\">CriticalHandle</a> class do not need to provide a finalizer, this is sometimes necessary (for example, to flush out file buffers or to write some data back into memory). In this case, the class can provide a finalizer that is guaranteed to run before the <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle\" data-linktype=\"relative-path\">CriticalHandle</a> critical finalizer runs.  </p>\n<p> Call the Close or <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle#System_Runtime_InteropServices_CriticalHandle_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method when you are finished using the <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle\" data-linktype=\"relative-path\">CriticalHandle</a> object. The Close method leaves the <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle\" data-linktype=\"relative-path\">CriticalHandle</a> object in an unusable state.  </p>\n<p> <strong>Note</strong> Always call Close or <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle#System_Runtime_InteropServices_CriticalHandle_Dispose_\" data-linktype=\"relative-path\">Dispose</a> before you release your last reference to the <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle\" data-linktype=\"relative-path\">CriticalHandle</a> object. Otherwise, the resources it is using will not be freed until the garbage collector calls the <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle\" data-linktype=\"relative-path\">CriticalHandle</a> object&#39;s <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle#System_Runtime_InteropServices_CriticalHandle_Finalize_\" data-linktype=\"relative-path\">Finalize</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_CriticalHandle_Dispose\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_CriticalHandle_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose()</div>        \r\n          </div>\r\n    \r\n            <p>Releases all resources used by the <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle\" data-linktype=\"relative-path\">CriticalHandle</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Dispose ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling the <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle#System_Runtime_InteropServices_CriticalHandle_Close_\" data-linktype=\"relative-path\">Close</a> or Dispose method allows the resources to be freed. Unlike the <a class=\"xref\" href=\"system.runtime.interopservices.safehandle\" data-linktype=\"relative-path\">SafeHandle</a> class, this will always happen immediately since there is no reference count to indicate that other threads are using this handle. Therefore, you must employ a synchronization mechanism to ensure it is safe to call the Dispose method. Although most classes that use the <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle\" data-linktype=\"relative-path\">CriticalHandle</a> class do not need to provide a finalizer, this is sometimes necessary (for example, to flush out file buffers or to write some data back into memory). In this case, the class can provide a finalizer that is guaranteed to run before the <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle\" data-linktype=\"relative-path\">CriticalHandle</a> critical finalizer runs.  </p>\n<p> Call the <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle#System_Runtime_InteropServices_CriticalHandle_Close_\" data-linktype=\"relative-path\">Close</a> or Dispose method when you are finished using the <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle\" data-linktype=\"relative-path\">CriticalHandle</a> object. The <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle#System_Runtime_InteropServices_CriticalHandle_Close_\" data-linktype=\"relative-path\">Close</a> method leaves the <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle\" data-linktype=\"relative-path\">CriticalHandle</a> object in an unusable state.  </p>\n<p> <strong>Note</strong> Always call the <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle#System_Runtime_InteropServices_CriticalHandle_Close_\" data-linktype=\"relative-path\">Close</a> or Dispose method before you release your last reference to the <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle\" data-linktype=\"relative-path\">CriticalHandle</a> object. Otherwise, the resources it is using will not be freed until the garbage collector calls the <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle\" data-linktype=\"relative-path\">CriticalHandle</a> object&#39;s <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle#System_Runtime_InteropServices_CriticalHandle_Finalize_\" data-linktype=\"relative-path\">Finalize</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_CriticalHandle_Dispose_System_Boolean_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_CriticalHandle_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle\" data-linktype=\"relative-path\">CriticalHandle</a> class specifying whether to perform a normal dispose operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void Dispose (bool disposing);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>disposing</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> for a normal dispose operation; <code>false</code> to finalize the handle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You should never explicitly call the Dispose method with the <code>disposing</code> parameter set to <code>false</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_CriticalHandle_Finalize\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_CriticalHandle_Finalize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Finalize()</div>        \r\n          </div>\r\n    \r\n            <p>Frees all resources associated with the handle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">~CriticalHandle ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Finalize method is the destructor for the <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle\" data-linktype=\"relative-path\">CriticalHandle</a> class. Application code should not call this method directly.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_CriticalHandle_ReleaseHandle\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_CriticalHandle_ReleaseHandle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReleaseHandle()</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, executes the code required to free the handle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected abstract bool ReleaseHandle ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the handle is released successfully; otherwise, in the event of a catastrophic failure,<code>false</code>. In this case, it generates a <a href=\"../Topic/releaseHandleFailed%20MDA.md\" data-linktype=\"relative-path\">releaseHandleFailed</a> Managed Debugging Assistant.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ReleaseHandle method is guaranteed to be called only once, provided that you employ proper synchronization mechanisms to ensure that only one call to the <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle#System_Runtime_InteropServices_CriticalHandle_Close_\" data-linktype=\"relative-path\">Close</a> or <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle#System_Runtime_InteropServices_CriticalHandle_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method is made. The ReleaseHandle method will not be called if the <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle#System_Runtime_InteropServices_CriticalHandle_IsInvalid_\" data-linktype=\"relative-path\">IsInvalid</a> or <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle#System_Runtime_InteropServices_CriticalHandle_IsClosed_\" data-linktype=\"relative-path\">IsClosed</a> property is <code>true</code>. Implement this method in your <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle\" data-linktype=\"relative-path\">CriticalHandle</a> derived classes to execute any code that is required to free the handle. Because one of the functions of <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle\" data-linktype=\"relative-path\">CriticalHandle</a> is to guarantee prevention of resource leaks, the code in your implementation of ReleaseHandle must never fail. The garbage collector calls ReleaseHandle after normal finalizers have been run for objects that were garbage collected at the same time, and guarantees the resources to invoke it and that it will not be interrupted while it is in progress. This method will be prepared as a constrained execution region (CER) at instance construction time (along with all the methods in its statically determinable call graph). Although this prevents thread abort interrupts, you must still be careful not to introduce any fault paths in your overridden ReleaseHandle method. In particular, apply the <a class=\"xref\" href=\"system.runtime.constrainedexecution.reliabilitycontractattribute\" data-linktype=\"relative-path\">ReliabilityContractAttribute</a> attribute to any methods you call from ReleaseHandle. In most cases this code should be:  </p>\n<p> <code>ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)</code>  </p>\n<p> Additionally, for simple cleanup (for example, calling the Win32 API <code>CloseHandle</code> on a file handle) you can check the return value for the single platform invoke call. For complex cleanup, you may have a lot of program logic and many method calls, some of which might fail. You must ensure that your program logic has fallback code for each of those cases.  </p>\n<p> If the ReleaseHandle method returns <code>false</code> for any reason, it generates a <a href=\"../Topic/releaseHandleFailed%20MDA.md\" data-linktype=\"relative-path\">releaseHandleFailed</a> Managed Debugging Assistant.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_CriticalHandle_SetHandle_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_CriticalHandle_SetHandle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetHandle(IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the handle to the specified pre-existing handle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void SetHandle (IntPtr handle);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>handle</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The pre-existing handle to use.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the SetHandle method only if you need to support a pre-existing handle (for example, if the handle is returned in a structure) because the .NET Framework COM interop infrastructure does not support marshaling handles in a structure.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_InteropServices_CriticalHandle_SetHandleAsInvalid\">\r\n    \r\n            <a id=\"System_Runtime_InteropServices_CriticalHandle_SetHandleAsInvalid_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetHandleAsInvalid()</div>        \r\n          </div>\r\n    \r\n            <p>Marks a handle as invalid.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetHandleAsInvalid ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Call the SetHandleAsInvalid method only when you know that your handle is invalid and you want to mark it as such. Doing so does not change the value of the <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle#System_Runtime_InteropServices_CriticalHandle_handle\" data-linktype=\"relative-path\">handle</a> field; it only marks the handle as invalid. The handle might then contain a potentially stale value. The effect of this call is that no attempt is made to free the resources.  </p>\n<p> As with the <a class=\"xref\" href=\"system.runtime.interopservices.criticalhandle#System_Runtime_InteropServices_CriticalHandle_SetHandle_\" data-linktype=\"relative-path\">SetHandle</a> method, use SetHandleAsInvalid only if you need to support a pre-existing handle.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Runtime.InteropServices.CriticalHandle.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Runtime.InteropServices.CriticalHandle.yml\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.CriticalHandle\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.CriticalHandle..ctor\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.CriticalHandle.Close\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.CriticalHandle.Dispose\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.CriticalHandle.Finalize\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.CriticalHandle.handle\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.CriticalHandle.IsClosed\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.CriticalHandle.IsInvalid\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.CriticalHandle.ReleaseHandle\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.CriticalHandle.SetHandle\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.CriticalHandle.SetHandleAsInvalid\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"906fa7e4-f407-f8f1-711d-041e135ea3f2\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Runtime.InteropServices\\CriticalHandle.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a wrapper class for handle resources.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Runtime.InteropServices/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Runtime.InteropServices.CriticalHandle\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Runtime.InteropServices.CriticalHandle.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Runtime.InteropServices.CriticalHandle.yml","open_to_public_contributors":true,"api_name":["System.Runtime.InteropServices.CriticalHandle","System.Runtime.InteropServices.CriticalHandle..ctor","System.Runtime.InteropServices.CriticalHandle.Close","System.Runtime.InteropServices.CriticalHandle.Dispose","System.Runtime.InteropServices.CriticalHandle.Finalize","System.Runtime.InteropServices.CriticalHandle.handle","System.Runtime.InteropServices.CriticalHandle.IsClosed","System.Runtime.InteropServices.CriticalHandle.IsInvalid","System.Runtime.InteropServices.CriticalHandle.ReleaseHandle","System.Runtime.InteropServices.CriticalHandle.SetHandle","System.Runtime.InteropServices.CriticalHandle.SetHandleAsInvalid"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Runtime.InteropServices.CriticalHandle","System::Runtime::InteropServices::CriticalHandle","System.Runtime.InteropServices.CriticalHandle.#ctor","System::Runtime::InteropServices::CriticalHandle::#ctor","System.Runtime.InteropServices.CriticalHandle.Close","System::Runtime::InteropServices::CriticalHandle::Close","System.Runtime.InteropServices.CriticalHandle.Dispose","System::Runtime::InteropServices::CriticalHandle::Dispose","System.Runtime.InteropServices.CriticalHandle.Finalize","System::Runtime::InteropServices::CriticalHandle::Finalize","System.Runtime.InteropServices.CriticalHandle.handle","System::Runtime::InteropServices::CriticalHandle::handle","System.Runtime.InteropServices.CriticalHandle.IsClosed","System::Runtime::InteropServices::CriticalHandle::IsClosed","System.Runtime.InteropServices.CriticalHandle.IsInvalid","System::Runtime::InteropServices::CriticalHandle::IsInvalid","System.Runtime.InteropServices.CriticalHandle.ReleaseHandle","System::Runtime::InteropServices::CriticalHandle::ReleaseHandle","System.Runtime.InteropServices.CriticalHandle.SetHandle","System::Runtime::InteropServices::CriticalHandle::SetHandle","System.Runtime.InteropServices.CriticalHandle.SetHandleAsInvalid","System::Runtime::InteropServices::CriticalHandle::SetHandleAsInvalid"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"906fa7e4-f407-f8f1-711d-041e135ea3f2","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Runtime.InteropServices\\CriticalHandle.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Runtime.InteropServices/CriticalHandle.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"CriticalHandle class | Microsoft Docs","_op_ogTitle":"CriticalHandle class","description":"Represents a wrapper class for handle resources.\n","toc_asset_id":"_splitted/System.Runtime.InteropServices/toc.json","toc_rel":"_splitted/System.Runtime.InteropServices/toc.json","source_url":"","ms.assetid":"System.Runtime.InteropServices.CriticalHandle","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.runtime.interopservices.criticalhandle","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.runtime.interopservices.criticalhandle","fileRelativePath":"System.Runtime.InteropServices.CriticalHandle.html"},"themesRelativePathToOutputRoot":"_themes/"}