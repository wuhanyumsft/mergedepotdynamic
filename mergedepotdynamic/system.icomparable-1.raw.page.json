{"content":"    \r\n    <h1 id=\"System_IComparable_1\">\r\n      <span class=\"lang-csharp\">IComparable&lt;T&gt;</span>\r\n        Interface\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Defines a generalized comparison method that a value type or class implements to create a type-specific comparison method for ordering or sorting its instances.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public interface IComparable&lt;in T&gt;</code></pre>\r\n    \r\n    \r\n    \t<h2>Type Parameters</h2>\r\n    \r\n    \t<table class=\"nameValue\">\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of object to compare.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t</table>\r\n    \r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>This interface is implemented by types whose values can be ordered or sorted and provides a strongly typed comparison method for ordering members of a generic collection object. For example, one number can be larger than a second number, and one string can appear in alphabetical order before another. It requires that implementing types define a single method, <a class=\"xref\" href=\"system.icomparable-1#System_IComparable_1_CompareTo__0_\" data-linktype=\"relative-path\">CompareTo(T)</a>, that indicates whether the position of the current instance in the sort order is before, after, or the same as a second object of the same type. Typically, the method is not called directly from developer code. Instead, it is called automatically by methods such as <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Sort\" data-linktype=\"relative-path\">System.Collections.Generic.List&lt;T&gt;.Sort()</a> and <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Add_\" data-linktype=\"relative-path\">Add</a>.  </p>\n<p> Typically, types that provide an IComparable(T) implementation also implement the <a class=\"xref\" href=\"system.iequatable-1\" data-linktype=\"relative-path\">IEquatable&lt;T&gt;</a> interface. The <a class=\"xref\" href=\"system.iequatable-1\" data-linktype=\"relative-path\">IEquatable&lt;T&gt;</a> interface defines the <a class=\"xref\" href=\"system.iequatable-1#System_IEquatable_1_Equals_\" data-linktype=\"relative-path\">Equals</a> method, which determines the equality of instances of the implementing type.  </p>\n<p> The implementation of the <a class=\"xref\" href=\"system.icomparable-1#System_IComparable_1_CompareTo__0_\" data-linktype=\"relative-path\">CompareTo(T)</a> method must return an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> that has one of three values, as shown in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Less than zero</td>\n<td>This object precedes the object specified by the <a class=\"xref\" href=\"system.icomparable-1#System_IComparable_1_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method in the sort order.</td>\n</tr>\n<tr>\n<td>Zero</td>\n<td>This current instance occurs in the same position in the sort order as the object specified by the <a class=\"xref\" href=\"system.icomparable-1#System_IComparable_1_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method argument.</td>\n</tr>\n<tr>\n<td>Greater than zero</td>\n<td>This current instance follows the object specified by the <a class=\"xref\" href=\"system.icomparable-1#System_IComparable_1_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method argument in the sort order.</td>\n</tr>\n</tbody>\n</table>\n<p> All numeric types (such as <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> and <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>) implement IComparable(T), as do <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>, and <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. Custom types should also provide their own implementation of IComparable(T) to enable object instances to be ordered or sorted.</p>\n\r\n    \r\n    \r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IComparable_1_CompareTo__0_\" data-linktype=\"self-bookmark\">CompareTo(T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IComparable_1_CompareTo__0_\">\r\n    \r\n            <a id=\"System_IComparable_1_CompareTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CompareTo(T)</div>        \r\n          </div>\r\n    \r\n            <p>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int CompareTo (T other);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>other</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare with this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A value that indicates the relative order of the objects being compared. The return value has these meanings:  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Meaning<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td> This instance precedes <code>other</code> in the sort order.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> This instance occurs in the same position in the sort order as <code>other</code>.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td> This instance follows <code>other</code> in the sort order.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>CompareTo provides a strongly typed comparison method for ordering members of a generic collection object. Because of this, it is usually not called directly from developer code. Instead, it is called automatically by methods such as <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Sort\" data-linktype=\"relative-path\">System.Collections.Generic.List&lt;T&gt;.Sort()</a> and <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Add_\" data-linktype=\"relative-path\">Add</a>.  </p>\n<p> This method is only a definition and must be implemented by a specific class or value type to have effect. The meaning of the comparisons specified in the Return Values section (&quot;precedes&quot;, &quot;occurs in the same position as&quot;, and &quot;follows) depends on the particular implementation.  </p>\n<p> By definition, any object compares greater than <code>null</code>, and two null references compare equal to each other.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example illustrates the implementation of <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> for a simple <code>Temperature</code> object. The example creates a <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> collection of strings with <code>Temperature</code> object keys, and adds several pairs of temperatures and strings to the list out of sequence. In the call to the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2#System_Collections_Generic_SortedList_2_Add_\" data-linktype=\"relative-path\">Add</a> method, the <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">SortedList&lt;TKey,TValue&gt;</a> collection uses the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> implementation to sort the list entries, which are then displayed in order of increasing temperature.  </p>\n<pre><code class=\"lang-cs\" name=\"IComparable`1 Example#1\">using System;\nusing System.Collections.Generic;\n\npublic class Temperature : IComparable&lt;Temperature&gt;\n{\n    // Implement the generic CompareTo method with the Temperature \n    // class as the Type parameter. \n    //\n    public int CompareTo(Temperature other)\n    {\n        // If other is not a valid object reference, this instance is greater.\n        if (other == null) return 1;\n        \n        // The temperature comparison depends on the comparison of \n        // the underlying Double values. \n        return m_value.CompareTo(other.m_value);\n    }\n\n    // Define the is greater than operator.\n    public static bool operator &gt;  (Temperature operand1, Temperature operand2)\n    {\n       return operand1.CompareTo(operand2) == 1;\n    }\n    \n    // Define the is less than operator.\n    public static bool operator &lt;  (Temperature operand1, Temperature operand2)\n    {\n       return operand1.CompareTo(operand2) == -1;\n    }\n\n    // Define the is greater than or equal to operator.\n    public static bool operator &gt;=  (Temperature operand1, Temperature operand2)\n    {\n       return operand1.CompareTo(operand2) &gt;= 0;\n    }\n    \n    // Define the is less than or equal to operator.\n    public static bool operator &lt;=  (Temperature operand1, Temperature operand2)\n    {\n       return operand1.CompareTo(operand2) &lt;= 0;\n    }\n\n    // The underlying temperature value.\n    protected double m_value = 0.0;\n\n    public double Celsius    \n    {\n        get\n        {\n            return m_value - 273.15;\n        }\n    }\n\n    public double Kelvin    \n    {\n        get\n        {\n            return m_value;\n        }\n        set\n        {\n            if (value &lt; 0.0)\n            {\n                throw new ArgumentException(&quot;Temperature cannot be less than absolute zero.&quot;);\n            }\n            else\n            {\n                m_value = value;\n            }\n        }\n    }\n\n    public Temperature(double kelvins)\n    {\n        this.Kelvin = kelvins;\n    }\n}\n\npublic class Example\n{\n    public static void Main()\n    {\n        SortedList&lt;Temperature, string&gt; temps = \n            new SortedList&lt;Temperature, string&gt;();\n\n        // Add entries to the sorted list, out of order.\n        temps.Add(new Temperature(2017.15), &quot;Boiling point of Lead&quot;);\n        temps.Add(new Temperature(0), &quot;Absolute zero&quot;);\n        temps.Add(new Temperature(273.15), &quot;Freezing point of water&quot;);\n        temps.Add(new Temperature(5100.15), &quot;Boiling point of Carbon&quot;);\n        temps.Add(new Temperature(373.15), &quot;Boiling point of water&quot;);\n        temps.Add(new Temperature(600.65), &quot;Melting point of Lead&quot;);\n\n        foreach( KeyValuePair&lt;Temperature, string&gt; kvp in temps )\n        {\n            Console.WriteLine(&quot;{0} is {1} degrees Celsius.&quot;, kvp.Value, kvp.Key.Celsius);\n        }\n    }\n}\n/* This example displays the following output:\n      Absolute zero is -273.15 degrees Celsius.\n      Freezing point of water is 0 degrees Celsius.\n      Boiling point of water is 100 degrees Celsius.\n      Melting point of Lead is 327.5 degrees Celsius.\n      Boiling point of Lead is 1744 degrees Celsius.\n      Boiling point of Carbon is 4827 degrees Celsius.\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"IComparable`1 Example#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections::Generic;\n\npublic ref class Temperature: public IComparable&lt;Temperature^&gt; {\n\nprotected:\n   // The underlying temperature value.\n   Double m_value;\n\npublic:\n   // Implement the generic CompareTo method with the Temperature class \n   // as the Type parameter. \n   virtual Int32 CompareTo( Temperature^ other ) {\n   \n      // If other is not a valid object reference, this instance \n      // is greater.\n      if (other == nullptr) return 1;\n      \n      // The temperature comparison depends on the comparison of the\n      // the underlying Double values. \n      return m_value.CompareTo( other-&gt;m_value );\n   }\n\n       // Define the is greater than operator.\n    bool operator&gt;=  (Temperature^ other)\n    {\n       return CompareTo(other) == 1;\n    }\n    \n    // Define the is less than operator.\n    bool operator&lt;  (Temperature^ other)\n    {\n       return CompareTo(other) == -1;\n    }\n    \n       // Define the is greater than or equal to operator.\n    bool operator&gt;  (Temperature^ other)\n    {\n       return CompareTo(other) &gt;= 0;\n    }\n    \n    // Define the is less than or equal to operator.\n    bool operator&lt;=  (Temperature^ other)\n    {\n       return CompareTo(other) &lt;= 0;\n    }\n\n   property Double Celsius {\n      Double get() {\n         return m_value + 273.15;\n      }\n   }\n\n   property Double Kelvin {\n      Double get() {\n         return m_value;\n      }\n      void set( Double value ) {\n         if (value &lt; 0)\n            throw gcnew ArgumentException(&quot;Temperature cannot be less than absolute zero.&quot;);\n         else\n            m_value = value;\n      }\n   }\n\n   Temperature(Double kelvins) {\n      this-&gt;Kelvin = kelvins;\n   }\n};\n\nint main() {\n   SortedList&lt;Temperature^, String^&gt;^ temps = \n      gcnew SortedList&lt;Temperature^, String^&gt;();\n\n   // Add entries to the sorted list, out of order.\n   temps-&gt;Add(gcnew Temperature(2017.15), &quot;Boiling point of Lead&quot;);\n   temps-&gt;Add(gcnew Temperature(0), &quot;Absolute zero&quot;);\n   temps-&gt;Add(gcnew Temperature(273.15), &quot;Freezing point of water&quot;);\n   temps-&gt;Add(gcnew Temperature(5100.15), &quot;Boiling point of Carbon&quot;);\n   temps-&gt;Add(gcnew Temperature(373.15), &quot;Boiling point of water&quot;);\n   temps-&gt;Add(gcnew Temperature(600.65), &quot;Melting point of Lead&quot;);\n\n   for each( KeyValuePair&lt;Temperature^, String^&gt;^ kvp in temps )\n   {\n      Console::WriteLine(&quot;{0} is {1} degrees Celsius.&quot;, kvp-&gt;Value, kvp-&gt;Key-&gt;Celsius);\n   }\n}\n/* The example displays the following output:\n      Absolute zero is 273.15 degrees Celsius.\n      Freezing point of water is 546.3 degrees Celsius.\n      Boiling point of water is 646.3 degrees Celsius.\n      Melting point of Lead is 873.8 degrees Celsius.\n      Boiling point of Lead is 2290.3 degrees Celsius.\n      Boiling point of Carbon is 5373.3 degrees Celsius.\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"IComparable`1 Example#1\">Imports System.Collections.Generic\n\nPublic Class Temperature\n    Implements IComparable(Of Temperature)\n\n    &#39; Implement the generic CompareTo method with the Temperature class \n    &#39; as the type parameter. \n    &#39;\n    Public Overloads Function CompareTo(ByVal other As Temperature) As Integer _\n        Implements IComparable(Of Temperature).CompareTo\n\n        &#39; If other is not a valid object reference, this instance is greater.\n        If other Is Nothing Then Return 1\n        \n        &#39; The temperature comparison depends on the comparison of the\n        &#39; the underlying Double values. \n        Return m_value.CompareTo(other.m_value)\n    End Function\n    \n    &#39; Define the is greater than operator.\n    Public Shared Operator &gt;  (operand1 As Temperature, operand2 As Temperature) As Boolean\n       Return operand1.CompareTo(operand2) = 1\n    End Operator\n    \n    &#39; Define the is less than operator.\n    Public Shared Operator &lt;  (operand1 As Temperature, operand2 As Temperature) As Boolean\n       Return operand1.CompareTo(operand2) = -1\n    End Operator\n\n    &#39; Define the is greater than or equal to operator.\n    Public Shared Operator &gt;=  (operand1 As Temperature, operand2 As Temperature) As Boolean\n       Return operand1.CompareTo(operand2) &gt;= 0\n    End Operator\n    \n    &#39; Define the is less than operator.\n    Public Shared Operator &lt;=  (operand1 As Temperature, operand2 As Temperature) As Boolean\n       Return operand1.CompareTo(operand2) &lt;= 0\n    End Operator\n\n    &#39; The underlying temperature value.\n    Protected m_value As Double = 0.0\n\n    Public ReadOnly Property Celsius() As Double\n        Get\n            Return m_value - 273.15\n        End Get\n    End Property\n\n    Public Property Kelvin() As Double\n        Get\n            Return m_value\n        End Get\n        Set(ByVal Value As Double)\n            If value &lt; 0.0 Then \n                Throw New ArgumentException(&quot;Temperature cannot be less than absolute zero.&quot;)\n            Else\n                m_value = Value\n            End If\n        End Set\n    End Property\n\n    Public Sub New(ByVal kelvins As Double)\n        Me.Kelvin = kelvins \n    End Sub\nEnd Class\n\nPublic Class Example\n    Public Shared Sub Main()\n        Dim temps As New SortedList(Of Temperature, String)\n\n        &#39; Add entries to the sorted list, out of order.\n        temps.Add(New Temperature(2017.15), &quot;Boiling point of Lead&quot;)\n        temps.Add(New Temperature(0), &quot;Absolute zero&quot;)\n        temps.Add(New Temperature(273.15), &quot;Freezing point of water&quot;)\n        temps.Add(New Temperature(5100.15), &quot;Boiling point of Carbon&quot;)\n        temps.Add(New Temperature(373.15), &quot;Boiling point of water&quot;)\n        temps.Add(New Temperature(600.65), &quot;Melting point of Lead&quot;)\n\n        For Each kvp As KeyValuePair(Of Temperature, String) In temps\n            Console.WriteLine(&quot;{0} is {1} degrees Celsius.&quot;, kvp.Value, kvp.Key.Celsius)\n        Next\n    End Sub\nEnd Class\n\n&#39; The example displays the following output:\n&#39;      Absolute zero is -273.15 degrees Celsius.\n&#39;      Freezing point of water is 0 degrees Celsius.\n&#39;      Boiling point of water is 100 degrees Celsius.\n&#39;      Melting point of Lead is 327.5 degrees Celsius.\n&#39;      Boiling point of Lead is 1744 degrees Celsius.\n&#39;      Boiling point of Carbon is 4827 degrees Celsius.\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.IComparable-1.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IComparable-1.yml\">\r\n<meta name=\"APIName\" content=\"System.IComparable&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.IComparable&lt;T&gt;.CompareTo\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"41e204c5-1953-d724-6dd7-ebd73f45609f\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines a generalized comparison method that a value type or class implements to create a type-specific comparison method for ordering or sorting its instances.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.IComparable`1\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.IComparable-1.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IComparable-1.yml","open_to_public_contributors":true,"api_name":["System.IComparable<T>","System.IComparable<T>.CompareTo"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.IComparable`1","System::IComparable`1","System.IComparable`1.CompareTo","System::IComparable`1::CompareTo"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"41e204c5-1953-d724-6dd7-ebd73f45609f","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/IComparable`1.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IComparable<T> interface | Microsoft Docs","_op_ogTitle":"IComparable<T> interface","description":"Defines a generalized comparison method that a value type or class implements to create a type-specific comparison method for ordering or sorting its instances.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.IComparable`1","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.icomparable-1","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.icomparable-1","fileRelativePath":"System.IComparable-1.html"},"themesRelativePathToOutputRoot":"_themes/"}