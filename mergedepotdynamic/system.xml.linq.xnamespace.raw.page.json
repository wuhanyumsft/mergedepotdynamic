{"content":"\r\n<div style=\"display:none\">\r\n\t\r\n</div>\r\n\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">XNamespace</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents an XML namespace. This class cannot be inherited.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public sealed class XNamespace</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span></div>\r\n  \t\t\t<span class=\"lang-csharp\">XNamespace</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>This class represents the XML construct of namespaces.  </p>\n<p> Every <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> contains an XNamespace. Even if an element is not in a namespace, the element&#39;s <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> still contains a namespace, <a class=\"xref\" href=\"system.xml.linq.xnamespace#System_Xml_Linq_XNamespace_None_\" data-linktype=\"relative-path\">None</a>. The <a class=\"xref\" href=\"system.xml.linq.xname#System_Xml_Linq_XName_Namespace_\" data-linktype=\"relative-path\">Namespace</a> property is guaranteed to not be <code>null</code>.  </p>\n<h2 id=\"creating-an-xnamespace-object\">Creating an XNamespace Object</h2>\n<p> The most common way to create an XNamespace object is to simply assign a string to it. You can then combine the namespace with a local name by using the override of the addition operator. The following example shows this idiom:  </p>\n<pre><code class=\"lang-c#\">\n                XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement root = new XElement(aw + &quot;Root&quot;, &quot;Content&quot;);  \nConsole.WriteLine(root);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim aw As XNamespace = &quot;http://www.adventure-works.com&quot;  \nDim root As XElement = New XElement(aw + &quot;Root&quot;, &quot;Content&quot;)  \nConsole.WriteLine(root)  \n</code></pre><p> However, in Visual Basic, you would typically declare a global default namespace, as follows:  </p>\n<pre><code class=\"lang-vb\">\n                Imports &lt;xmlns=&#39;http://www.adventure-works.com&#39;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim root As XElement = _  \n            &lt;Root&gt;Content&lt;/Root&gt;  \n        Console.WriteLine(root)  \n    End Sub  \nEnd Module  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n&lt;Root xmlns=&quot;http://www.adventure-works.com&quot;&gt;Content&lt;/Root&gt;  \n</code></pre><p> Assigning a string to an XNamespace uses the implicit conversion from <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.  </p>\n<p> See <a href=\"../Topic/How%20to:%20Create%20a%20Document%20with%20Namespaces%20(C%23)%20(LINQ%20to%20XML)1.md\" data-linktype=\"relative-path\">How to: Create a Document with Namespaces (C#) (LINQ to XML)</a> for more information and examples.  </p>\n<p> See <a href=\"../Topic/Namespaces%20in%20Visual%20Basic%20(LINQ%20to%20XML)1.md\" data-linktype=\"relative-path\">Namespaces in Visual Basic (LINQ to XML)</a> for more information on using namespaces in Visual Basic.  </p>\n<h2 id=\"controlling-namespace-prefixes\">Controlling Namespace Prefixes</h2>\n<p> If you create an attribute that declares a namespace, the prefix specified in the attribute will be persisted in the serialized XML. To create an attribute that declares a namespace with a prefix, you create an attribute where the namespace of the name of the attribute is <a class=\"xref\" href=\"system.xml.linq.xnamespace#System_Xml_Linq_XNamespace_Xmlns_\" data-linktype=\"relative-path\">Xmlns</a>, and the name of the attribute is the namespace prefix. The value of the attribute is the URI of the namespace. The following example shows this idiom:  </p>\n<pre><code class=\"lang-c#\">\n                XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement root = new XElement(aw + &quot;Root&quot;,  \n    new XAttribute(XNamespace.Xmlns + &quot;aw&quot;, &quot;http://www.adventure-works.com&quot;),  \n    &quot;Content&quot;);  \nConsole.WriteLine(root);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim aw As XNamespace = &quot;http://www.adventure-works.com&quot;  \nDim root As XElement = New XElement(aw + &quot;Root&quot;, _  \n    New XAttribute(XNamespace.Xmlns + &quot;aw&quot;, &quot;http://www.adventure-works.com&quot;), _  \n    &quot;Content&quot;)  \nConsole.WriteLine(root)  \n</code></pre><p> In Visual Basic, instead of creating a namespace node to control namespace prefixes, you would typically use a global namespace declaration:  </p>\n<pre><code class=\"lang-vb\">\n                Imports &lt;xmlns:aw=&#39;http://www.adventure-works.com&#39;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim root As XElement = _  \n            &lt;aw:Root&gt;Content&lt;/aw:Root&gt;  \n        Console.WriteLine(root)  \n    End Sub  \nEnd Module  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>&lt;aw:Root xmlns:aw=&quot;http://www.adventure-works.com&quot;&gt;Content&lt;/aw:Root&gt;  \n</code></pre><p> For more information, see <a href=\"../Topic/How%20to:%20Control%20Namespace%20Prefixes%20(C%23)%20(LINQ%20to%20XML)1.md\" data-linktype=\"relative-path\">How to: Control Namespace Prefixes (C#) (LINQ to XML)</a>.  </p>\n<h2 id=\"creating-a-default-namespace\">Creating a Default Namespace</h2>\n<p> When constructing an attribute that will be a namespace, if the attribute name has the special value of &quot;xmlns&quot;, then when the XML tree is serialized, the namespace will be declared as the default namespace. The special attribute with the name of &quot;xmlns&quot; itself is not in any namespace. The value of the attribute is the namespace URI.  </p>\n<p> The following example creates an XML tree that contains an attribute that is declared in such a way that the namespace will become the default namespace:  </p>\n<pre><code class=\"lang-c#\">\n                XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement root = new XElement(aw + &quot;Root&quot;,  \n    new XAttribute(&quot;xmlns&quot;, &quot;http://www.adventure-works.com&quot;),  \n    new XElement(aw + &quot;Child&quot;, &quot;content&quot;)  \n);  \nConsole.WriteLine(root);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim aw As XNamespace = &quot;http://www.adventure-works.com&quot;  \nDim root As XElement = New XElement(aw + &quot;Root&quot;, _  \n    New XAttribute(&quot;xmlns&quot;, &quot;http://www.adventure-works.com&quot;), _  \n    New XElement(aw + &quot;Child&quot;, &quot;content&quot;) _  \n)  \nConsole.WriteLine(root)  \n</code></pre><p> In Visual Basic, instead of creating a namespace node to create a default namespace, you would typically use a global default namespace declaration:  </p>\n<pre><code class=\"lang-vb\">\n                Imports &lt;xmlns=&#39;http://www.adventure-works.com&#39;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim root As XElement = _  \n            &lt;Root&gt;  \n                &lt;Child&gt;content&lt;/Child&gt;  \n            &lt;/Root&gt;  \n        Console.WriteLine(root)  \n    End Sub  \nEnd Module  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>&lt;Root xmlns=&quot;http://www.adventure-works.com&quot;&gt;  \n  &lt;Child&gt;content&lt;/Child&gt;  \n&lt;/Root&gt;  \n</code></pre><h2 id=\"xnamespace-atomization\">XNamespace Atomization</h2>\n<p> XNamespace objects are guaranteed to be atomized; that is, if two XNamespace objects have exactly the same URI, they will share the same instance. The equality and comparison operators are provided explicitly for this purpose.  </p>\n<h2 id=\"using-expanded-names\">Using Expanded Names</h2>\n<p> Another way to specify a namespace and a local name is to use an expanded name in the form <code>{namespace}name</code>:  </p>\n<p> [C#]  </p>\n<pre><code>XElement e = new XElement(&quot;{http://www.adventure-works.com}Root&quot;,  \n     new XAttribute(&quot;{http://www.adventure-works.com}Att&quot;, &quot;content&quot;)  \n);  \nConsole.WriteLine(e);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim e As XElement = New XElement(&quot;{http://www.adventure-works.com}Root&quot;, _  \n     New XAttribute(&quot;{http://www.adventure-works.com}Att&quot;, &quot;content&quot;) _  \n)  \nConsole.WriteLine(e)  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>&lt;Root p1:Att=&quot;content&quot; xmlns:p1=&quot;http://www.adventure-works.com&quot; xmlns=&quot;http://www.adventure-works.com&quot; /&gt;  \n</code></pre><p> This approach has performance implications. Each time that you pass a string that contains an expanded name to LINQ to XML, it must parse the name, find the atomized namespace, and find the atomized name. This process takes CPU time. If performance is important, you may want to use a different approach.  </p>\n<p> With Visual Basic, the recommended approach is to use XML literals, which does not involve the use of expanded names.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xml_Linq_XNamespace_NamespaceName\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">NamespaceName</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the Uniform Resource Identifier (URI) of this namespace.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string NamespaceName { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the URI of the namespace.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xml_Linq_XNamespace_None\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">None</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> object that corresponds to no namespace.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Xml.Linq.XNamespace None { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> that corresponds to no namespace.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If an element or attribute is in no namespace, its namespace will be set to the namespace returned by this property.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xml_Linq_XNamespace_Xml\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Xml</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> object that corresponds to the XML URI (<code><a href=\"http://www.w3.org/XML/1998/namespace\" data-linktype=\"external\">http://www.w3.org/XML/1998/namespace</a></code>).</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Xml.Linq.XNamespace Xml { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> that corresponds to the XML URI (<code><a href=\"http://www.w3.org/XML/1998/namespace\" data-linktype=\"external\">http://www.w3.org/XML/1998/namespace</a></code>).</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Certain standardized attributes, such as <code>space</code>, are in the <code>http://www.w3.org/XML/1998/namespace</code> namespace. The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree. It is a reserved namespace that is always automatically available in the XML parser.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xml_Linq_XNamespace_Xmlns\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Xmlns</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> object that corresponds to the xmlns URI (<code><a href=\"http://www.w3.org/2000/xmlns/\" data-linktype=\"external\">http://www.w3.org/2000/xmlns/</a></code>).</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Xml.Linq.XNamespace Xmlns { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> that corresponds to the <strong>xmlns</strong> URI (<code><a href=\"http://www.w3.org/2000/xmlns/\" data-linktype=\"external\">http://www.w3.org/2000/xmlns/</a></code>).</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>When you declare namespaces, the namespace attributes themselves are in the <strong>xmlns</strong> namespace. The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree. It is a reserved namespace that is always automatically available in the XML parser.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xml_Linq_XNamespace_Equals_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Equals(Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether the specified <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> is equal to the current <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override bool Equals (object obj);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>obj</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> to compare to the current <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> that indicates whether the specified <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> is equal to the current <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>For two <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> objects to be equal, they must have the same URI.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xml_Linq_XNamespace_Get_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Get(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets an <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> for the specified Uniform Resource Identifier (URI).</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Xml.Linq.XNamespace Get (string namespaceName);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>namespaceName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains a namespace URI.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> created from the specified URI.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The returned <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> object is guaranteed to be atomic (that is, it is the only one in the system for that particular URI).</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xml_Linq_XNamespace_GetHashCode\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetHashCode()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a hash code for this <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetHashCode ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> that contains the hash code for the <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method serves as a hash function for <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a>. You can use GetHashCode in hashing algorithms and data structures like a hash table.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xml_Linq_XNamespace_GetName_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetName(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns an <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> object created from this <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> and the specified local name.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Xml.Linq.XName GetName (string localName);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>localName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains a local name.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> created from this <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> and the specified local name.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The returned <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> object is guaranteed to be atomic (that is, it is the only one in the system for a specific expanded name).</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xml_Linq_XNamespace_ToString\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToString()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the URI of this <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override string ToString ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The URI of this <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Operators\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xml_Linq_XNamespace_op_Addition_System_Xml_Linq_XNamespace_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Addition(XNamespace,String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Combines an <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> object with a local name to create an <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Xml.Linq.XName op_Addition (System.Xml.Linq.XNamespace ns, string localName);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>ns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> that contains the namespace.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>localName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the local name.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The new <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> constructed from the namespace and local name.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This operator enables the common idiom of combining a namespace and a local name in the construction of an element or attribute. This idiom provides some of the benefits of having namespace prefixes, in that you can refer to a namespace using a variable that is short. This eliminates syntactic noise in the code that creates XML trees.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xml_Linq_XNamespace_op_Equality_System_Xml_Linq_XNamespace_System_Xml_Linq_XNamespace_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Equality(XNamespace,XNamespace)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value indicating whether two instances of <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> are equal.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_Equality (System.Xml.Linq.XNamespace left, System.Xml.Linq.XNamespace right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> that indicates whether <code>left</code> and <code>right</code> are equal.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The operator overloads <code>==</code> and <code>!=</code> are provided to enable comparisons between <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> and string (for example, <code>element.Name.Namespace == &quot;http://www.adventure-works.com&quot;</code>). The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xml_Linq_XNamespace_op_Implicit_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Implicit(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Xml.Linq.XNamespace op_Implicit (string namespaceName);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>namespaceName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xml_Linq_XNamespace_op_Inequality_System_Xml_Linq_XNamespace_System_Xml_Linq_XNamespace_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Inequality(XNamespace,XNamespace)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value indicating whether two instances of <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> are not equal.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_Inequality (System.Xml.Linq.XNamespace left, System.Xml.Linq.XNamespace right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The first <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The second <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> to compare.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> that indicates whether <code>left</code> and <code>right</code> are not equal.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The operator overloads <code>==</code> and <code>!=</code> are provided to enable comparisons between <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> and string (for example, <code>element.Name.Namespace == &quot;http://www.adventure-works.com&quot;</code>). The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.Linq.XNamespace.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.Linq.XNamespace.yml\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XNamespace\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XNamespace.Equals\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XNamespace.Get\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XNamespace.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XNamespace.GetName\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XNamespace.NamespaceName\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XNamespace.None\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XNamespace.op_Addition\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XNamespace.op_op_Addition\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XNamespace.op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XNamespace.op_op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XNamespace.op_Implicit\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XNamespace.op_op_Implicit\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XNamespace.op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XNamespace.op_op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XNamespace.ToString\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XNamespace.Xml\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XNamespace.Xmlns\">\r\n<meta name=\"APILocation\" content=\"System.Xml.Linq.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"60db801f-6e8c-b76b-e37a-3ddd8e2a1d94\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents an XML namespace. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Xml.Linq/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Xml.Linq.XNamespace\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.Linq.XNamespace.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.Linq.XNamespace.yml","open_to_public_contributors":true,"api_name":["System.Xml.Linq.XNamespace","System.Xml.Linq.XNamespace.Equals","System.Xml.Linq.XNamespace.Get","System.Xml.Linq.XNamespace.GetHashCode","System.Xml.Linq.XNamespace.GetName","System.Xml.Linq.XNamespace.NamespaceName","System.Xml.Linq.XNamespace.None","System.Xml.Linq.XNamespace.op_Addition","System.Xml.Linq.XNamespace.op_op_Addition","System.Xml.Linq.XNamespace.op_Equality","System.Xml.Linq.XNamespace.op_op_Equality","System.Xml.Linq.XNamespace.op_Implicit","System.Xml.Linq.XNamespace.op_op_Implicit","System.Xml.Linq.XNamespace.op_Inequality","System.Xml.Linq.XNamespace.op_op_Inequality","System.Xml.Linq.XNamespace.ToString","System.Xml.Linq.XNamespace.Xml","System.Xml.Linq.XNamespace.Xmlns"],"api_location":["System.Xml.Linq.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Xml.Linq.XNamespace","System::Xml::Linq::XNamespace","System.Xml.Linq.XNamespace.Equals","System::Xml::Linq::XNamespace::Equals","System.Xml.Linq.XNamespace.Get","System::Xml::Linq::XNamespace::Get","System.Xml.Linq.XNamespace.GetHashCode","System::Xml::Linq::XNamespace::GetHashCode","System.Xml.Linq.XNamespace.GetName","System::Xml::Linq::XNamespace::GetName","System.Xml.Linq.XNamespace.NamespaceName","System::Xml::Linq::XNamespace::NamespaceName","System.Xml.Linq.XNamespace.None","System::Xml::Linq::XNamespace::None","System.Xml.Linq.XNamespace.op_Addition","System::Xml::Linq::XNamespace::op_Addition","System.Xml.Linq.XNamespace.op_Equality","System::Xml::Linq::XNamespace::op_Equality","System.Xml.Linq.XNamespace.op_Implicit","System::Xml::Linq::XNamespace::op_Implicit","System.Xml.Linq.XNamespace.op_Inequality","System::Xml::Linq::XNamespace::op_Inequality","System.Xml.Linq.XNamespace.ToString","System::Xml::Linq::XNamespace::ToString","System.Xml.Linq.XNamespace.Xml","System::Xml::Linq::XNamespace::Xml","System.Xml.Linq.XNamespace.Xmlns","System::Xml::Linq::XNamespace::Xmlns"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"60db801f-6e8c-b76b-e37a-3ddd8e2a1d94","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Xml.Linq/XNamespace.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"XNamespace class | Microsoft Docs","_op_ogTitle":"XNamespace class","description":"Represents an XML namespace. This class cannot be inherited.\n","toc_asset_id":"_splitted/System.Xml.Linq/toc.json","toc_rel":"_splitted/System.Xml.Linq/toc.json","source_url":"","ms.assetid":"System.Xml.Linq.XNamespace","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.linq.xnamespace","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.linq.xnamespace","fileRelativePath":"System.Xml.Linq.XNamespace.html"},"themesRelativePathToOutputRoot":"_themes/"}