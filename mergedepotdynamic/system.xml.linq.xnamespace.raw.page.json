{"content":"    \r\n    <h1 id=\"System_Xml_Linq_XNamespace\">\r\n      <span class=\"lang-csharp\">XNamespace</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents an XML namespace. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public sealed class XNamespace</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">XNamespace</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>This class represents the XML construct of namespaces.  </p>\n<p> Every <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> contains an XNamespace. Even if an element is not in a namespace, the element&#39;s <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> still contains a namespace, <a class=\"xref\" href=\"system.xml.linq.xnamespace#System_Xml_Linq_XNamespace_None_\" data-linktype=\"relative-path\">None</a>. The <a class=\"xref\" href=\"system.xml.linq.xname#System_Xml_Linq_XName_Namespace_\" data-linktype=\"relative-path\">Namespace</a> property is guaranteed to not be <code>null</code>.  </p>\n<h2 id=\"creating-an-xnamespace-object\">Creating an XNamespace Object</h2>\n<p> The most common way to create an XNamespace object is to simply assign a string to it. You can then combine the namespace with a local name by using the override of the addition operator. The following example shows this idiom:  </p>\n<pre><code class=\"lang-c#\">\n                XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement root = new XElement(aw + &quot;Root&quot;, &quot;Content&quot;);  \nConsole.WriteLine(root);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim aw As XNamespace = &quot;http://www.adventure-works.com&quot;  \nDim root As XElement = New XElement(aw + &quot;Root&quot;, &quot;Content&quot;)  \nConsole.WriteLine(root)  \n</code></pre><p> However, in Visual Basic, you would typically declare a global default namespace, as follows:  </p>\n<pre><code class=\"lang-vb\">\n                Imports &lt;xmlns=&#39;http://www.adventure-works.com&#39;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim root As XElement = _  \n            &lt;Root&gt;Content&lt;/Root&gt;  \n        Console.WriteLine(root)  \n    End Sub  \nEnd Module  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n&lt;Root xmlns=&quot;http://www.adventure-works.com&quot;&gt;Content&lt;/Root&gt;  \n</code></pre><p> Assigning a string to an XNamespace uses the implicit conversion from <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.  </p>\n<p> See <a href=\"../Topic/How%20to:%20Create%20a%20Document%20with%20Namespaces%20(C%23)%20(LINQ%20to%20XML)1.md\" data-linktype=\"relative-path\">How to: Create a Document with Namespaces (C#) (LINQ to XML)</a> for more information and examples.  </p>\n<p> See <a href=\"../Topic/Namespaces%20in%20Visual%20Basic%20(LINQ%20to%20XML)1.md\" data-linktype=\"relative-path\">Namespaces in Visual Basic (LINQ to XML)</a> for more information on using namespaces in Visual Basic.  </p>\n<h2 id=\"controlling-namespace-prefixes\">Controlling Namespace Prefixes</h2>\n<p> If you create an attribute that declares a namespace, the prefix specified in the attribute will be persisted in the serialized XML. To create an attribute that declares a namespace with a prefix, you create an attribute where the namespace of the name of the attribute is <a class=\"xref\" href=\"system.xml.linq.xnamespace#System_Xml_Linq_XNamespace_Xmlns_\" data-linktype=\"relative-path\">Xmlns</a>, and the name of the attribute is the namespace prefix. The value of the attribute is the URI of the namespace. The following example shows this idiom:  </p>\n<pre><code class=\"lang-c#\">\n                XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement root = new XElement(aw + &quot;Root&quot;,  \n    new XAttribute(XNamespace.Xmlns + &quot;aw&quot;, &quot;http://www.adventure-works.com&quot;),  \n    &quot;Content&quot;);  \nConsole.WriteLine(root);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim aw As XNamespace = &quot;http://www.adventure-works.com&quot;  \nDim root As XElement = New XElement(aw + &quot;Root&quot;, _  \n    New XAttribute(XNamespace.Xmlns + &quot;aw&quot;, &quot;http://www.adventure-works.com&quot;), _  \n    &quot;Content&quot;)  \nConsole.WriteLine(root)  \n</code></pre><p> In Visual Basic, instead of creating a namespace node to control namespace prefixes, you would typically use a global namespace declaration:  </p>\n<pre><code class=\"lang-vb\">\n                Imports &lt;xmlns:aw=&#39;http://www.adventure-works.com&#39;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim root As XElement = _  \n            &lt;aw:Root&gt;Content&lt;/aw:Root&gt;  \n        Console.WriteLine(root)  \n    End Sub  \nEnd Module  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>&lt;aw:Root xmlns:aw=&quot;http://www.adventure-works.com&quot;&gt;Content&lt;/aw:Root&gt;  \n</code></pre><p> For more information, see <a href=\"../Topic/How%20to:%20Control%20Namespace%20Prefixes%20(C%23)%20(LINQ%20to%20XML)1.md\" data-linktype=\"relative-path\">How to: Control Namespace Prefixes (C#) (LINQ to XML)</a>.  </p>\n<h2 id=\"creating-a-default-namespace\">Creating a Default Namespace</h2>\n<p> When constructing an attribute that will be a namespace, if the attribute name has the special value of &quot;xmlns&quot;, then when the XML tree is serialized, the namespace will be declared as the default namespace. The special attribute with the name of &quot;xmlns&quot; itself is not in any namespace. The value of the attribute is the namespace URI.  </p>\n<p> The following example creates an XML tree that contains an attribute that is declared in such a way that the namespace will become the default namespace:  </p>\n<pre><code class=\"lang-c#\">\n                XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement root = new XElement(aw + &quot;Root&quot;,  \n    new XAttribute(&quot;xmlns&quot;, &quot;http://www.adventure-works.com&quot;),  \n    new XElement(aw + &quot;Child&quot;, &quot;content&quot;)  \n);  \nConsole.WriteLine(root);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim aw As XNamespace = &quot;http://www.adventure-works.com&quot;  \nDim root As XElement = New XElement(aw + &quot;Root&quot;, _  \n    New XAttribute(&quot;xmlns&quot;, &quot;http://www.adventure-works.com&quot;), _  \n    New XElement(aw + &quot;Child&quot;, &quot;content&quot;) _  \n)  \nConsole.WriteLine(root)  \n</code></pre><p> In Visual Basic, instead of creating a namespace node to create a default namespace, you would typically use a global default namespace declaration:  </p>\n<pre><code class=\"lang-vb\">\n                Imports &lt;xmlns=&#39;http://www.adventure-works.com&#39;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim root As XElement = _  \n            &lt;Root&gt;  \n                &lt;Child&gt;content&lt;/Child&gt;  \n            &lt;/Root&gt;  \n        Console.WriteLine(root)  \n    End Sub  \nEnd Module  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>&lt;Root xmlns=&quot;http://www.adventure-works.com&quot;&gt;  \n  &lt;Child&gt;content&lt;/Child&gt;  \n&lt;/Root&gt;  \n</code></pre><h2 id=\"xnamespace-atomization\">XNamespace Atomization</h2>\n<p> XNamespace objects are guaranteed to be atomized; that is, if two XNamespace objects have exactly the same URI, they will share the same instance. The equality and comparison operators are provided explicitly for this purpose.  </p>\n<h2 id=\"using-expanded-names\">Using Expanded Names</h2>\n<p> Another way to specify a namespace and a local name is to use an expanded name in the form <code>{namespace}name</code>:  </p>\n<p> [C#]  </p>\n<pre><code>XElement e = new XElement(&quot;{http://www.adventure-works.com}Root&quot;,  \n     new XAttribute(&quot;{http://www.adventure-works.com}Att&quot;, &quot;content&quot;)  \n);  \nConsole.WriteLine(e);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim e As XElement = New XElement(&quot;{http://www.adventure-works.com}Root&quot;, _  \n     New XAttribute(&quot;{http://www.adventure-works.com}Att&quot;, &quot;content&quot;) _  \n)  \nConsole.WriteLine(e)  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>&lt;Root p1:Att=&quot;content&quot; xmlns:p1=&quot;http://www.adventure-works.com&quot; xmlns=&quot;http://www.adventure-works.com&quot; /&gt;  \n</code></pre><p> This approach has performance implications. Each time that you pass a string that contains an expanded name to LINQ to XML, it must parse the name, find the atomized namespace, and find the atomized name. This process takes CPU time. If performance is important, you may want to use a different approach.  </p>\n<p> With Visual Basic, the recommended approach is to use XML literals, which does not involve the use of expanded names.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XNamespace_NamespaceName\" data-linktype=\"self-bookmark\">NamespaceName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the Uniform Resource Identifier (URI) of this namespace.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XNamespace_None\" data-linktype=\"self-bookmark\">None</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> object that corresponds to no namespace.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XNamespace_Xml\" data-linktype=\"self-bookmark\">Xml</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> object that corresponds to the XML URI (<code><a href=\"http://www.w3.org/XML/1998/namespace\" data-linktype=\"external\">http://www.w3.org/XML/1998/namespace</a></code>).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XNamespace_Xmlns\" data-linktype=\"self-bookmark\">Xmlns</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> object that corresponds to the xmlns URI (<code><a href=\"http://www.w3.org/2000/xmlns/\" data-linktype=\"external\">http://www.w3.org/2000/xmlns/</a></code>).</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XNamespace_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> is equal to the current <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XNamespace_Get_System_String_\" data-linktype=\"self-bookmark\">Get(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> for the specified Uniform Resource Identifier (URI).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XNamespace_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a hash code for this <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XNamespace_GetName_System_String_\" data-linktype=\"self-bookmark\">GetName(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> object created from this <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> and the specified local name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XNamespace_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the URI of this <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Operators\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XNamespace_op_Addition_System_Xml_Linq_XNamespace_System_String_\" data-linktype=\"self-bookmark\">op_Addition(XNamespace,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Combines an <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> object with a local name to create an <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XNamespace_op_Equality_System_Xml_Linq_XNamespace_System_Xml_Linq_XNamespace_\" data-linktype=\"self-bookmark\">op_Equality(XNamespace,XNamespace)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value indicating whether two instances of <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> are equal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XNamespace_op_Implicit_System_String_\" data-linktype=\"self-bookmark\">op_Implicit(String)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XNamespace_op_Inequality_System_Xml_Linq_XNamespace_System_Xml_Linq_XNamespace_\" data-linktype=\"self-bookmark\">op_Inequality(XNamespace,XNamespace)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value indicating whether two instances of <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> are not equal.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XNamespace_NamespaceName\">\r\n    \r\n            <a id=\"System_Xml_Linq_XNamespace_NamespaceName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NamespaceName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the Uniform Resource Identifier (URI) of this namespace.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string NamespaceName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the URI of the namespace.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use this property:  </p>\n<pre><code class=\"lang-c#\">\n                string markup =  \n@&quot;&lt;aw:Root  \n    xmlns:aw=&#39;http://www.adventure-works.com&#39;/&gt;&quot;;  \nXElement root = XElement.Parse(markup);  \nConsole.WriteLine(root.Name.Namespace.NamespaceName);  \n</code></pre><pre><code class=\"lang-vb\">\n                Imports &lt;xmlns:aw=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim aw As XNamespace = GetXmlNamespace(aw)  \n        Dim root As XElement = &lt;aw:Root/&gt;  \n        Console.WriteLine(root.Name.Namespace.NamespaceName)  \n    End Sub  \nEnd Module  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>http://www.adventure-works.com  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XNamespace_None\">\r\n    \r\n            <a id=\"System_Xml_Linq_XNamespace_None_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">None</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> object that corresponds to no namespace.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.Linq.XNamespace None { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> that corresponds to no namespace.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If an element or attribute is in no namespace, its namespace will be set to the namespace returned by this property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows uses this property to determine which elements are in no namespace.  </p>\n<pre><code class=\"lang-c#\">\n                XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \n\nXElement root = new XElement(&quot;Root&quot;,  \n    new XElement(aw + &quot;ChildInNamespace&quot;, &quot;content&quot;),  \n    new XElement(&quot;ChildInNoNamespace&quot;, &quot;content&quot;)  \n);  \n\nif (root.Name.Namespace == XNamespace.None)  \n    Console.WriteLine(&quot;Root element is in no namespace&quot;);  \nelse  \n    Console.WriteLine(&quot;Root element is in a namespace&quot;);  \n\nif (root.Element(aw + &quot;ChildInNamespace&quot;).Name.Namespace == XNamespace.None)  \n    Console.WriteLine(&quot;ChildInNamespace element is in no namespace&quot;);  \nelse  \n    Console.WriteLine(&quot;ChildInNamespace element is in a namespace&quot;);  \n\nif (root.Element(&quot;ChildInNoNamespace&quot;).Name.Namespace == XNamespace.None)  \n    Console.WriteLine(&quot;ChildInNoNamespace element is in no namespace&quot;);  \nelse  \n    Console.WriteLine(&quot;ChildInNoNamespace element is in a namespace&quot;);  \n</code></pre><pre><code class=\"lang-vb\">\n                Imports &lt;xmlns:aw=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim root As XElement = _  \n            &lt;Root&gt;  \n                &lt;aw:ChildInNamespace&gt;content&lt;/aw:ChildInNamespace&gt;  \n                &lt;ChildInNoNamespace&gt;content&lt;/ChildInNoNamespace&gt;  \n            &lt;/Root&gt;  \n\n        If (root.Name.Namespace Is XNamespace.None) Then  \n            Console.WriteLine(&quot;Root element is in no namespace&quot;)  \n        Else  \n            Console.WriteLine(&quot;Root element is in a namespace&quot;)  \n        End If  \n\n        If (root.Element(GetXmlNamespace(aw) + &quot;ChildInNamespace&quot;) _  \n                .Name.Namespace Is XNamespace.None) Then  \n            Console.WriteLine(&quot;ChildInNamespace element is in no namespace&quot;)  \n        Else  \n            Console.WriteLine(&quot;ChildInNamespace element is in a namespace&quot;)  \n        End If  \n\n        If (root.Element(&quot;ChildInNoNamespace&quot;) _  \n                .Name.Namespace Is XNamespace.None) Then  \n            Console.WriteLine(&quot;ChildInNoNamespace element is in no namespace&quot;)  \n        Else  \n            Console.WriteLine(&quot;ChildInNoNamespace element is in a namespace&quot;)  \n        End If  \n    End Sub  \nEnd Module  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>Root element is in no namespace  \nChildInNamespace element is in a namespace  \nChildInNoNamespace element is in no namespace  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XNamespace_Xml\">\r\n    \r\n            <a id=\"System_Xml_Linq_XNamespace_Xml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Xml</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> object that corresponds to the XML URI (<code><a href=\"http://www.w3.org/XML/1998/namespace\" data-linktype=\"external\">http://www.w3.org/XML/1998/namespace</a></code>).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.Linq.XNamespace Xml { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> that corresponds to the XML URI (<code><a href=\"http://www.w3.org/XML/1998/namespace\" data-linktype=\"external\">http://www.w3.org/XML/1998/namespace</a></code>).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Certain standardized attributes, such as <code>space</code>, are in the <code>http://www.w3.org/XML/1998/namespace</code> namespace. The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree. It is a reserved namespace that is always automatically available in the XML parser.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to create an <code>xml:space=&quot;preserve&quot;</code> attribute in an XML tree:  </p>\n<pre><code class=\"lang-c#\">\n                XElement root = new XElement(&quot;Root&quot;,  \n    new XAttribute(XNamespace.Xml + &quot;space&quot;, &quot;preserve&quot;),  \n    new XElement(&quot;Child&quot;, &quot;content&quot;)  \n);  \nConsole.WriteLine(root);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim root As XElement = _  \n    &lt;Root xml:space=&quot;preserve&quot;&gt;  \n        &lt;Child&gt;content&lt;/Child&gt;  \n    &lt;/Root&gt;  \nConsole.WriteLine(root)  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>&lt;Root xml:space=&quot;preserve&quot;&gt;  \n  &lt;Child&gt;content&lt;/Child&gt;  \n&lt;/Root&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XNamespace_Xmlns\">\r\n    \r\n            <a id=\"System_Xml_Linq_XNamespace_Xmlns_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Xmlns</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> object that corresponds to the xmlns URI (<code><a href=\"http://www.w3.org/2000/xmlns/\" data-linktype=\"external\">http://www.w3.org/2000/xmlns/</a></code>).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.Linq.XNamespace Xmlns { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> that corresponds to the <strong>xmlns</strong> URI (<code><a href=\"http://www.w3.org/2000/xmlns/\" data-linktype=\"external\">http://www.w3.org/2000/xmlns/</a></code>).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When you declare namespaces, the namespace attributes themselves are in the <strong>xmlns</strong> namespace. The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree. It is a reserved namespace that is always automatically available in the XML parser.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to add a namespace to an XML tree. The namespace for the attribute that declares the namespace is the namespace returned by this property.  </p>\n<pre><code class=\"lang-c#\">\n                XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement root = new XElement(aw + &quot;Root&quot;,  \n    new XAttribute(XNamespace.Xmlns + &quot;aw&quot;, &quot;http://www.adventure-works.com&quot;),  \n    new XElement(aw + &quot;Child&quot;, &quot;content&quot;)  \n);  \nConsole.WriteLine(root);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim root = &lt;aw:Root xmlns:aw=&quot;http://www.adventure-works.com&quot;&gt;  \n               &lt;aw:Child&gt;content&lt;/aw:Child&gt;  \n           &lt;/aw:Root&gt;  \nConsole.WriteLine(root)  \n</code></pre><p> In Visual Basic, the preferred idiom is:  </p>\n<p> [vb]  </p>\n<pre><code>Imports &lt;xmlns:aw=&#39;http://www.adventure-works.com&#39;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim root As XElement = _  \n            &lt;aw:Root&gt;  \n                &lt;aw:Child&gt;content&lt;/aw:Child&gt;  \n            &lt;/aw:Root&gt;  \n        Console.WriteLine(root)  \n    End Sub  \nEnd Module  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>&lt;aw:Root xmlns:aw=&quot;http://www.adventure-works.com&quot;&gt;  \n  &lt;aw:Child&gt;content&lt;/aw:Child&gt;  \n&lt;/aw:Root&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XNamespace_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XNamespace_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> is equal to the current <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> to compare to the current <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> that indicates whether the specified <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> is equal to the current <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For two <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> objects to be equal, they must have the same URI.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example compares two namespaces that refer to the same URI.  </p>\n<pre><code class=\"lang-c#\">\n                XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nConsole.WriteLine(aw == &quot;http://www.adventure-works.com&quot;);  \n</code></pre><pre><code class=\"lang-vb\">\n                Imports &lt;xmlns:aw=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Console.WriteLine(GetXmlNamespace(aw) = &quot;http://www.adventure-works.com&quot;)  \n    End Sub  \nEnd Module  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>True  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XNamespace_Get_System_String_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XNamespace_Get_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Get(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets an <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> for the specified Uniform Resource Identifier (URI).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.Linq.XNamespace Get (string namespaceName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains a namespace URI.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> created from the specified URI.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> object is guaranteed to be atomic (that is, it is the only one in the system for that particular URI).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example gets a <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> from a specified URI.  </p>\n<pre><code class=\"lang-c#\">\n                XNamespace aw = XNamespace.Get(&quot;http://www.adventure-works.com&quot;);  \n\n// This is the preferred form.  \nXNamespace aw2 = &quot;http://www.adventure-works.com&quot;;  \nConsole.WriteLine(aw);  \nConsole.WriteLine(aw2);  \n</code></pre><pre><code class=\"lang-vb\">\n                Imports &lt;xmlns:aw=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim aw As XNamespace = XNamespace.Get(&quot;http://www.adventure-works.com&quot;)  \n\n        &#39; This is the preferred form.  \n        Dim aw2 As XNamespace = GetXmlNamespace(aw)  \n        Console.WriteLine(aw)  \n        Console.WriteLine(aw2)  \n    End Sub  \nEnd Module  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>http://www.adventure-works.com  \nhttp://www.adventure-works.com  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XNamespace_GetHashCode\">\r\n    \r\n            <a id=\"System_Xml_Linq_XNamespace_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Gets a hash code for this <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> that contains the hash code for the <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method serves as a hash function for <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a>. You can use GetHashCode in hashing algorithms and data structures like a hash table.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XNamespace_GetName_System_String_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XNamespace_GetName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetName(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> object created from this <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> and the specified local name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Linq.XName GetName (string localName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>localName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains a local name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> created from this <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> and the specified local name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> object is guaranteed to be atomic (that is, it is the only one in the system for a specific expanded name).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses this property to retrieve an <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>.  </p>\n<pre><code class=\"lang-c#\">\n                XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXName name = aw.GetName(&quot;Root&quot;);  \nConsole.WriteLine(&quot;{0}&quot;, name);  \n</code></pre><pre><code class=\"lang-vb\">\n                Imports &lt;xmlns:aw=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim aw As XNamespace = GetXmlNamespace(aw)  \n        Dim name As XName = aw.GetName(&quot;Root&quot;)  \n        Console.WriteLine(&quot;{0}&quot;, name)  \n    End Sub  \nEnd Module  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>{http://www.adventure-works.com}Root  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XNamespace_ToString\">\r\n    \r\n            <a id=\"System_Xml_Linq_XNamespace_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the URI of this <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The URI of this <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses this method to print a namespace on the console.  </p>\n<pre><code class=\"lang-c#\">\n                XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nConsole.WriteLine(&quot;{0}&quot;, aw.ToString());  \n</code></pre><pre><code class=\"lang-vb\">\n                Imports &lt;xmlns=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim aw As XNamespace = GetXmlNamespace()  \n        Console.WriteLine(&quot;{0}&quot;, aw)  \n    End Sub  \nEnd Module  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>http://www.adventure-works.com  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"operators\">\r\n        <h2>Operators\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XNamespace_op_Addition_System_Xml_Linq_XNamespace_System_String_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XNamespace_op_Addition_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Addition(XNamespace,String)</div>        \r\n          </div>\r\n    \r\n            <p>Combines an <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> object with a local name to create an <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.Linq.XName op_Addition (System.Xml.Linq.XNamespace ns, string localName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ns</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> that contains the namespace.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>localName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the local name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></div>\r\n                  </div>\r\n                  <p>The new <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> constructed from the namespace and local name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This operator enables the common idiom of combining a namespace and a local name in the construction of an element or attribute. This idiom provides some of the benefits of having namespace prefixes, in that you can refer to a namespace using a variable that is short. This eliminates syntactic noise in the code that creates XML trees.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows the use of the <code>+</code> operator to create an <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> from an <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> and a local name.  </p>\n<pre><code class=\"lang-c#\">\n                XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement root = new XElement(aw + &quot;Root&quot;,  \n    new XElement(aw + &quot;Child&quot;)  \n);  \nConsole.WriteLine(root);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim aw As XNamespace = &quot;http://www.adventure-works.com&quot;  \nDim root As XElement = New XElement(aw + &quot;Root&quot;, _  \n    New XElement(aw + &quot;Child&quot;) _  \n)  \nConsole.WriteLine(root)  \n</code></pre><p> In Visual Basic, this is the preferred idiom:  </p>\n<pre><code class=\"lang-vb\">\n                Imports &lt;xmlns=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim aw As XNamespace = GetXmlNamespace()  \n        Dim root As XElement = _  \n            &lt;Root&gt;  \n                &lt;Child/&gt;  \n            &lt;/Root&gt;  \n        Console.WriteLine(root)  \n    End Sub  \nEnd Module  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>&lt;Root xmlns=&quot;http://www.adventure-works.com&quot;&gt;  \n  &lt;Child /&gt;  \n&lt;/Root&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XNamespace_op_Equality_System_Xml_Linq_XNamespace_System_Xml_Linq_XNamespace_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XNamespace_op_Equality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Equality(XNamespace,XNamespace)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value indicating whether two instances of <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> are equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Equality (System.Xml.Linq.XNamespace left, System.Xml.Linq.XNamespace right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> that indicates whether <code>left</code> and <code>right</code> are equal.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The operator overloads <code>==</code> and <code>!=</code> are provided to enable comparisons between <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> and string (for example, <code>element.Name.Namespace == &quot;http://www.adventure-works.com&quot;</code>). The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows the comparison of an <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> and a string.  </p>\n<pre><code class=\"lang-c#\">\n                XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nConsole.WriteLine(aw == &quot;http://www.adventure-works.com&quot;);  \n</code></pre><pre><code class=\"lang-vb\">\n                Imports &lt;xmlns=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim aw As XNamespace = GetXmlNamespace()  \n        Console.WriteLine(aw = &quot;http://www.adventure-works.com&quot;)  \n    End Sub  \nEnd Module  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>True  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XNamespace_op_Implicit_System_String_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XNamespace_op_Implicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Implicit(String)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.Linq.XNamespace op_Implicit (string namespaceName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XNamespace_op_Inequality_System_Xml_Linq_XNamespace_System_Xml_Linq_XNamespace_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XNamespace_op_Inequality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Inequality(XNamespace,XNamespace)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value indicating whether two instances of <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> are not equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Inequality (System.Xml.Linq.XNamespace left, System.Xml.Linq.XNamespace right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> that indicates whether <code>left</code> and <code>right</code> are not equal.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The operator overloads <code>==</code> and <code>!=</code> are provided to enable comparisons between <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> and string (for example, <code>element.Name.Namespace == &quot;http://www.adventure-works.com&quot;</code>). The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows a comparison of a <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> to a string.  </p>\n<pre><code class=\"lang-c#\">\n                XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nConsole.WriteLine(aw != &quot;http://www.adventure-works.com&quot;);  \n</code></pre><pre><code class=\"lang-vb\">\n                Imports &lt;xmlns=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim aw As XNamespace = GetXmlNamespace()  \n        Console.WriteLine(aw &lt;&gt; &quot;http://www.adventure-works.com&quot;)  \n    End Sub  \nEnd Module  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>False  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.Linq.XNamespace.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.Linq.XNamespace.yml\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XNamespace\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XNamespace.Equals\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XNamespace.Get\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XNamespace.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XNamespace.GetName\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XNamespace.NamespaceName\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XNamespace.None\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XNamespace.op_Addition\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XNamespace.op_op_Addition\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XNamespace.op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XNamespace.op_op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XNamespace.op_Implicit\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XNamespace.op_op_Implicit\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XNamespace.op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XNamespace.op_op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XNamespace.ToString\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XNamespace.Xml\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XNamespace.Xmlns\">\r\n<meta name=\"APILocation\" content=\"System.Xml.Linq.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"60db801f-6e8c-b76b-e37a-3ddd8e2a1d94\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents an XML namespace. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Xml.Linq/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Xml.Linq.XNamespace\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.Linq.XNamespace.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.Linq.XNamespace.yml","open_to_public_contributors":true,"api_name":["System.Xml.Linq.XNamespace","System.Xml.Linq.XNamespace.Equals","System.Xml.Linq.XNamespace.Get","System.Xml.Linq.XNamespace.GetHashCode","System.Xml.Linq.XNamespace.GetName","System.Xml.Linq.XNamespace.NamespaceName","System.Xml.Linq.XNamespace.None","System.Xml.Linq.XNamespace.op_Addition","System.Xml.Linq.XNamespace.op_op_Addition","System.Xml.Linq.XNamespace.op_Equality","System.Xml.Linq.XNamespace.op_op_Equality","System.Xml.Linq.XNamespace.op_Implicit","System.Xml.Linq.XNamespace.op_op_Implicit","System.Xml.Linq.XNamespace.op_Inequality","System.Xml.Linq.XNamespace.op_op_Inequality","System.Xml.Linq.XNamespace.ToString","System.Xml.Linq.XNamespace.Xml","System.Xml.Linq.XNamespace.Xmlns"],"api_location":["System.Xml.Linq.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Xml.Linq.XNamespace","System::Xml::Linq::XNamespace","System.Xml.Linq.XNamespace.Equals","System::Xml::Linq::XNamespace::Equals","System.Xml.Linq.XNamespace.Get","System::Xml::Linq::XNamespace::Get","System.Xml.Linq.XNamespace.GetHashCode","System::Xml::Linq::XNamespace::GetHashCode","System.Xml.Linq.XNamespace.GetName","System::Xml::Linq::XNamespace::GetName","System.Xml.Linq.XNamespace.NamespaceName","System::Xml::Linq::XNamespace::NamespaceName","System.Xml.Linq.XNamespace.None","System::Xml::Linq::XNamespace::None","System.Xml.Linq.XNamespace.op_Addition","System::Xml::Linq::XNamespace::op_Addition","System.Xml.Linq.XNamespace.op_Equality","System::Xml::Linq::XNamespace::op_Equality","System.Xml.Linq.XNamespace.op_Implicit","System::Xml::Linq::XNamespace::op_Implicit","System.Xml.Linq.XNamespace.op_Inequality","System::Xml::Linq::XNamespace::op_Inequality","System.Xml.Linq.XNamespace.ToString","System::Xml::Linq::XNamespace::ToString","System.Xml.Linq.XNamespace.Xml","System::Xml::Linq::XNamespace::Xml","System.Xml.Linq.XNamespace.Xmlns","System::Xml::Linq::XNamespace::Xmlns"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"60db801f-6e8c-b76b-e37a-3ddd8e2a1d94","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Xml.Linq/XNamespace.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"XNamespace class | Microsoft Docs","_op_ogTitle":"XNamespace class","description":"Represents an XML namespace. This class cannot be inherited.\n","toc_asset_id":"_splitted/System.Xml.Linq/toc.json","toc_rel":"_splitted/System.Xml.Linq/toc.json","source_url":"","ms.assetid":"System.Xml.Linq.XNamespace","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.linq.xnamespace","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.linq.xnamespace","fileRelativePath":"System.Xml.Linq.XNamespace.html"},"themesRelativePathToOutputRoot":"_themes/"}