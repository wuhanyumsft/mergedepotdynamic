{"content":"    \r\n    <h1 id=\"System_Text_StringBuilder\">\r\n      <span class=\"lang-csharp\">StringBuilder</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a mutable string of characters. This class cannot be inherited.  </p>\n<p> To browse the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/text/stringbuilder.cs#adf60ee46ebd299f\" data-linktype=\"external\">Reference Source</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class StringBuilder : System.Runtime.Serialization.ISerializable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">StringBuilder</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <div class=\"NOTE\"><h5>Note</h5><p> To view the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/text/stringbuilder.cs#adf60ee46ebd299f\" data-linktype=\"external\">Reference Source</a>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <a href=\"http://referencesource.microsoft.com/\" data-linktype=\"external\">instructions</a>.  </p>\n</div>\n<p> This class represents a string-like object whose value is a mutable sequence of characters.  </p>\n<p> In this section:  </p>\n<ul>\n<li><p><a href=\"#StringAndSB\" data-linktype=\"self-bookmark\">The String and StringBuilder types</a>  </p>\n</li>\n<li><p><a href=\"#HowWorks\" data-linktype=\"self-bookmark\">How StringBuilder works</a>  </p>\n</li>\n<li><p><a href=\"#Memory\" data-linktype=\"self-bookmark\">Memory allocation</a>  </p>\n</li>\n<li><p><a href=\"#Instantiating\" data-linktype=\"self-bookmark\">Instantiating a StringBuilder object</a>  </p>\n</li>\n<li><p><a href=\"#Calling\" data-linktype=\"self-bookmark\">Calling StringBuilder methods</a>  </p>\n</li>\n<li><p><a href=\"#Operations\" data-linktype=\"self-bookmark\">Performing StringBuilder operations</a>  </p>\n<ul>\n<li><p><a href=\"#Iterating\" data-linktype=\"self-bookmark\">Iterating StringBuilder characters</a>  </p>\n</li>\n<li><p><a href=\"#Adding\" data-linktype=\"self-bookmark\">Adding text to a StringBuilder object</a>  </p>\n</li>\n<li><p><a href=\"#Deleting\" data-linktype=\"self-bookmark\">Deleting text from a StringBuilder object</a>  </p>\n</li>\n<li><p><a href=\"#Modifying\" data-linktype=\"self-bookmark\">Modifying the text in a StringBuilder object</a>  </p>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#Searching\" data-linktype=\"self-bookmark\">Searching the text in a StringBuilder object</a>  </p>\n</li>\n<li><p><a href=\"#Converting\" data-linktype=\"self-bookmark\">Converting the StringBuilder object to a string</a>  </p>\n</li>\n</ul>\n<p><a name=\"StringAndSB\"></a>   </p>\n<h2 id=\"the-string-and-stringbuilder-types\">The String and StringBuilder types</h2>\n<p> Although StringBuilder and <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> both represent sequences of characters, they are implemented differently. <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> is an immutable type. That is, each operation that appears to modify a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object actually creates a new string.  </p>\n<p> For example, the call to the <a class=\"xref\" href=\"system.string#System_String_Concat_\" data-linktype=\"relative-path\">Concat</a> method in the following C# example appears to change the value of a string variable named <code>value</code>. In fact, the <a class=\"xref\" href=\"system.string#System_String_Concat_\" data-linktype=\"relative-path\">Concat</a> method returns a <code>value</code> object that has a different value and address from the <code>value</code> object that was passed to the method. Note that the example must be compiled using the <code>/unsafe</code> compiler option.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Class#1\">using System;\n\npublic class Example\n{\n   public unsafe static void Main()\n   {\n      string value = &quot;This is the first sentence&quot; + &quot;.&quot;;\n      fixed (char* start = value)\n      {\n         value = String.Concat(value, &quot;This is the second sentence. &quot;);\n         fixed (char* current = value)\n         {\n            Console.WriteLine(start == current);\n         }\n      }   \n   }\n}\n// The example displays the following output:\n//      False\n</code></pre><p> For routines that perform extensive string manipulation (such as apps that modify a string numerous times in a loop), modifying a string repeatedly can exact a significant performance penalty. The alternative is to use StringBuilder, which is a mutable string class. Mutability means that once an instance of the class has been created, it can be modified by appending, removing, replacing, or inserting characters. A StringBuilder object maintains a buffer to accommodate expansions to the string. New data is appended to the buffer if room is available; otherwise, a new, larger buffer is allocated, data from the original buffer is copied to the new buffer, and the new data is then appended to the new buffer.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Although the StringBuilder class generally offers better performance than the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class, you should not automatically replace <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> with StringBuilder whenever you want to manipulate strings. Performance depends on the size of the string, the amount of memory to be allocated for the new string, the system on which your app is executing, and the type of operation. You should be prepared to test your app to determine whether StringBuilder actually offers a significant performance improvement.  </p>\n</div>\n<p> Consider using the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class under these conditions:  </p>\n<ul>\n<li><p>When the number of changes that your app will make to a string is small. In these cases, StringBuilder might offer negligible or no performance improvement over <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.  </p>\n</li>\n<li><p>When you are performing a fixed number of concatenation operations, particularly with string literals. In this case, the compiler might combine the concatenation operations into a single operation.  </p>\n</li>\n<li><p>When you have to perform extensive search operations while you are building your string. The StringBuilder class lacks search methods such as <code>IndexOf</code> or <code>StartsWith</code>. You&#39;ll have to convert the StringBuilder object to a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> for these operations, and this can negate the performance benefit from using StringBuilder. For more information, see the <a href=\"#Searching\" data-linktype=\"self-bookmark\">Searching the text in a StringBuilder object</a> section.  </p>\n<p>Consider using the StringBuilder class under these conditions:  </p>\n</li>\n<li><p>When you expect your app to make an unknown number of changes to a string at design time (for example, when you are using a loop to concatenate a random number of strings that contain user input).  </p>\n</li>\n<li><p>When you expect your app to make a significant number of changes to a string.  </p>\n</li>\n</ul>\n<p><a name=\"HowWorks\"></a>   </p>\n<h2 id=\"how-stringbuilder-works\">How StringBuilder works</h2>\n<p> The <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Length_\" data-linktype=\"relative-path\">Length</a> property indicates the number of characters the StringBuilder object currently contains. If you add characters to the StringBuilder object, its length increases until it equals the size of the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Capacity_\" data-linktype=\"relative-path\">Capacity</a> property, which defines the number of characters that the object can contain. If the number of added characters causes the length of the StringBuilder object to exceed its current capacity, new memory is allocated, the value of the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Capacity_\" data-linktype=\"relative-path\">Capacity</a> property is doubled, new characters are added to the StringBuilder object, and its <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Length_\" data-linktype=\"relative-path\">Length</a> property is adjusted. Additional memory for the StringBuilder object is allocated dynamically until it reaches the value defined by the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_MaxCapacity_\" data-linktype=\"relative-path\">MaxCapacity</a> property. When the maximum capacity is reached, no further memory can be allocated for the StringBuilder object, and trying to add characters or expand it beyond its maximum capacity throws either an <a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a> or an <a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a> exception.  </p>\n<p> The following example illustrates how a StringBuilder object allocates new memory and increases its capacity dynamically as the string assigned to the object expands. The code creates a StringBuilder object by calling its default (parameterless) constructor. The default capacity of this object is 16 characters, and its maximum capacity is more than 2 billion characters. Appending the string &quot;This is a sentence.&quot; results in a new memory allocation because the string length (19 characters) exceeds the default capacity of the StringBuilder object. The capacity of the object doubles to 32 characters, the new string is added, and the length of the object now equals 19 characters. The code then appends the string &quot;This is an additional sentence.&quot; to the value of the StringBuilder object 11 times. Whenever the append operation causes the length of the StringBuilder object to exceed its capacity, its existing capacity is doubled and the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Append_\" data-linktype=\"relative-path\">Append</a> operation succeeds.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Class#3\">Imports System.Reflection\nImports System.Text\n\nModule Example\n   Public Sub Main()\n      Dim sb As New StringBuilder()\n      ShowSBInfo(sb)\n      sb.Append(&quot;This is a sentence.&quot;)\n      ShowSbInfo(sb)\n      For ctr As Integer = 0 To 10\n         sb.Append(&quot;This is an additional sentence.&quot;)\n         ShowSbInfo(sb)\n      Next   \n   End Sub\n   \n   Public Sub ShowSBInfo(sb As StringBuilder)\n      For Each prop In sb.GetType().GetProperties\n         If prop.GetIndexParameters().Length = 0 Then\n            Console.Write(&quot;{0}: {1:N0}    &quot;, prop.Name, prop.GetValue(sb))\n         End If   \n      Next\n      Console.WriteLine()\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Capacity: 16    MaxCapacity: 2,147,483,647    Length: 0\n&#39;    Capacity: 32    MaxCapacity: 2,147,483,647    Length: 19\n&#39;    Capacity: 64    MaxCapacity: 2,147,483,647    Length: 50\n&#39;    Capacity: 128    MaxCapacity: 2,147,483,647    Length: 81\n&#39;    Capacity: 128    MaxCapacity: 2,147,483,647    Length: 112\n&#39;    Capacity: 256    MaxCapacity: 2,147,483,647    Length: 143\n&#39;    Capacity: 256    MaxCapacity: 2,147,483,647    Length: 174\n&#39;    Capacity: 256    MaxCapacity: 2,147,483,647    Length: 205\n&#39;    Capacity: 256    MaxCapacity: 2,147,483,647    Length: 236\n&#39;    Capacity: 512    MaxCapacity: 2,147,483,647    Length: 267\n&#39;    Capacity: 512    MaxCapacity: 2,147,483,647    Length: 298\n&#39;    Capacity: 512    MaxCapacity: 2,147,483,647    Length: 329\n&#39;    Capacity: 512    MaxCapacity: 2,147,483,647    Length: 360\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Class#3\">using System;\nusing System.Reflection;\nusing System.Text;\n\npublic class Example\n{\n   public static void Main()\n   {\n      StringBuilder sb = new StringBuilder();\n      ShowSBInfo(sb);\n      sb.Append(&quot;This is a sentence.&quot;);\n      ShowSBInfo(sb);\n      for (int ctr = 0; ctr &lt;= 10; ctr++) {\n         sb.Append(&quot;This is an additional sentence.&quot;);\n         ShowSBInfo(sb);\n      }   \n   }\n   \n   private static void ShowSBInfo(StringBuilder sb)\n   {\n      foreach (var prop in sb.GetType().GetProperties()) {\n         if (prop.GetIndexParameters().Length == 0)\n            Console.Write(&quot;{0}: {1:N0}    &quot;, prop.Name, prop.GetValue(sb));\n      }\n      Console.WriteLine();\n   }\n}\n// The example displays the following output:\n//    Capacity: 16    MaxCapacity: 2,147,483,647    Length: 0\n//    Capacity: 32    MaxCapacity: 2,147,483,647    Length: 19\n//    Capacity: 64    MaxCapacity: 2,147,483,647    Length: 50\n//    Capacity: 128    MaxCapacity: 2,147,483,647    Length: 81\n//    Capacity: 128    MaxCapacity: 2,147,483,647    Length: 112\n//    Capacity: 256    MaxCapacity: 2,147,483,647    Length: 143\n//    Capacity: 256    MaxCapacity: 2,147,483,647    Length: 174\n//    Capacity: 256    MaxCapacity: 2,147,483,647    Length: 205\n//    Capacity: 256    MaxCapacity: 2,147,483,647    Length: 236\n//    Capacity: 512    MaxCapacity: 2,147,483,647    Length: 267\n//    Capacity: 512    MaxCapacity: 2,147,483,647    Length: 298\n//    Capacity: 512    MaxCapacity: 2,147,483,647    Length: 329\n//    Capacity: 512    MaxCapacity: 2,147,483,647    Length: 360\n</code></pre><p><a name=\"Memory\"></a>   </p>\n<h2 id=\"memory-allocation\">Memory allocation</h2>\n<p> The default capacity of a StringBuilder object is 16 characters, and its default maximum capacity is <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">System.Int32.MaxValue</a>. These default values are used if you call the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder__ctor\" data-linktype=\"relative-path\">StringBuilder()</a> and <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder__ctor_System_String_\" data-linktype=\"relative-path\">StringBuilder(String)</a> constructors.  </p>\n<p> You can explicitly define the initial capacity of a StringBuilder object in the following ways:  </p>\n<ul>\n<li><p>By calling any of the StringBuilder constructors that includes a <code>capacity</code> parameter when you create the object.  </p>\n</li>\n<li><p>By explicitly assigning a new value to the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Capacity_\" data-linktype=\"relative-path\">Capacity</a> property to expand an existing StringBuilder object. Note that the property throws an exception if the new capacity is less than the existing capacity or greater than the StringBuilder object&#39;s maximum capacity.  </p>\n</li>\n<li><p>By calling the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_EnsureCapacity_\" data-linktype=\"relative-path\">EnsureCapacity</a> method with the new capacity. The new capacity must not be greater than the StringBuilder object&#39;s maximum capacity. However, unlike an assignment to the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Capacity_\" data-linktype=\"relative-path\">Capacity</a> property, <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_EnsureCapacity_\" data-linktype=\"relative-path\">EnsureCapacity</a> does not throw an exception if the desired new capacity is less than the existing capacity; in this case, the method call has no effect.  </p>\n<p>If the length of the string assigned to the StringBuilder object in the constructor call exceeds either the default capacity or the specified capacity, the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Capacity_\" data-linktype=\"relative-path\">Capacity</a> property is set to the length of the string specified with the <code>value</code> parameter.  </p>\n<p>You can explicitly define the maximum capacity of a StringBuilder object by calling the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder__ctor_System_Int32_System_Int32_\" data-linktype=\"relative-path\">StringBuilder(Int32,Int32)</a> constructor. You can&#39;t change the maximum capacity by assigning a new value to the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_MaxCapacity_\" data-linktype=\"relative-path\">MaxCapacity</a> property, because it is read-only.  </p>\n<p>As the previous section shows, whenever the existing capacity is inadequate, additional memory is allocated and the capacity of a StringBuilder object doubles up to the value defined by the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_MaxCapacity_\" data-linktype=\"relative-path\">MaxCapacity</a> property.  </p>\n<p>In general, the default capacity and maximum capacity are adequate for most apps. You might consider setting these values under the following conditions:  </p>\n</li>\n<li><p>If the eventual size of the StringBuilder object is likely to grow exceedingly large, typically in excess of several megabytes. In this case, there may be some performance benefit from setting the initial <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Capacity_\" data-linktype=\"relative-path\">Capacity</a> property to a significantly high value to eliminate the need for too many memory reallocations.  </p>\n</li>\n<li><p>If your app is running on a system with limited memory. In this case, you may want to consider setting the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_MaxCapacity_\" data-linktype=\"relative-path\">MaxCapacity</a> property to less than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">System.Int32.MaxValue</a> if your app is handling large strings that may cause it to execute in a memory-constrained environment.  </p>\n</li>\n</ul>\n<p><a name=\"Instantiating\"></a>   </p>\n<h2 id=\"instantiating-a-stringbuilder-object\">Instantiating a StringBuilder object</h2>\n<p> You instantiate a StringBuilder object by calling one of its six overloaded class constructors, which are listed in the following table. Three of the constructors instantiate a StringBuilder object whose value is an empty string, but set its <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Capacity_\" data-linktype=\"relative-path\">Capacity</a> and <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_MaxCapacity_\" data-linktype=\"relative-path\">MaxCapacity</a> values differently. The remaining three constructors define a StringBuilder object that has a specific string value and capacity. Two of the three constructors use the default maximum capacity of <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">System.Int32.MaxValue</a>, whereas the third allows you to set the maximum capacity.  </p>\n<table>\n<thead>\n<tr>\n<th>Constructor</th>\n<th>String value</th>\n<th>Capacity</th>\n<th>Maximum capacity</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder__ctor\" data-linktype=\"relative-path\">StringBuilder()</a></td>\n<td><a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a></td>\n<td>16</td>\n<td><a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">System.Int32.MaxValue</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder__ctor_System_Int32_\" data-linktype=\"relative-path\">StringBuilder(Int32)</a></td>\n<td><a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a></td>\n<td>Defined by the <code>capacity</code> parameter</td>\n<td><a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">System.Int32.MaxValue</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder__ctor_System_Int32_System_Int32_\" data-linktype=\"relative-path\">StringBuilder(Int32,Int32)</a></td>\n<td><a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a></td>\n<td>Defined by the <code>capacity</code> parameter</td>\n<td>Defined by the <code>maxCapacity</code> parameter</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder__ctor_System_String_\" data-linktype=\"relative-path\">StringBuilder(String)</a></td>\n<td>Defined by the <code>value</code> parameter</td>\n<td>16 or <code>value</code>. <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a>, whichever is greater</td>\n<td><a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">System.Int32.MaxValue</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder__ctor_System_String_System_Int32_\" data-linktype=\"relative-path\">StringBuilder(String,Int32)</a></td>\n<td>Defined by the <code>value</code> parameter</td>\n<td>Defined by the <code>capacity</code> parameter or <code>value</code>. <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a>, whichever is greater.</td>\n<td><a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">System.Int32.MaxValue</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder__ctor_System_String_System_Int32_System_Int32_System_Int32_\" data-linktype=\"relative-path\">StringBuilder(String,Int32,Int32,Int32)</a></td>\n<td>Defined by <code>value</code>. <a class=\"xref\" href=\"system.string#System_String_Substring_\" data-linktype=\"relative-path\">Substring</a>(<code>startIndex</code>, <code>length</code>)</td>\n<td>Defined by the <code>capacity</code> parameter or <code>value</code>. <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a>, whichever is greater.</td>\n<td>Defined by the <code>maxCapacity</code> parameter</td>\n</tr>\n</tbody>\n</table>\n<p> The following example uses three of these constructor overloads to instantiate StringBuilder objects.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Class#6\">using System;\nusing System.Text;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string value = &quot;An ordinary string&quot;;\n      int index = value.IndexOf(&quot;An &quot;) + 3;\n      int capacity = 0xFFFF;\n      \n      // Instantiate a StringBuilder from a string.\n      StringBuilder sb1 = new StringBuilder(value);\n      ShowSBInfo(sb1); \n      \n      // Instantiate a StringBuilder from string and define a capacity.  \n      StringBuilder sb2 = new StringBuilder(value, capacity);   \n      ShowSBInfo(sb2); \n      \n      // Instantiate a StringBuilder from substring and define a capacity.  \n      StringBuilder sb3 = new StringBuilder(value, index, \n                                            value.Length - index, \n                                            capacity );\n      ShowSBInfo(sb3); \n   }\n\n   public static void ShowSBInfo(StringBuilder sb)\n   {\n      Console.WriteLine(&quot;\\nValue: {0}&quot;, sb.ToString());\n      foreach (var prop in sb.GetType().GetProperties()) {\n         if (prop.GetIndexParameters().Length == 0)\n            Console.Write(&quot;{0}: {1:N0}    &quot;, prop.Name, prop.GetValue(sb));\n      }\n      Console.WriteLine();\n   }\n}\n// The example displays the following output:\n//    Value: An ordinary string\n//    Capacity: 18    MaxCapacity: 2,147,483,647    Length: 18\n//    \n//    Value: An ordinary string\n//    Capacity: 65,535    MaxCapacity: 2,147,483,647    Length: 18\n//    \n//    Value: ordinary string\n//    Capacity: 65,535    MaxCapacity: 2,147,483,647    Length: 15\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Class#6\">Imports System.Text\n\nModule Example\n   Public Sub Main()\n      Dim value As String = &quot;An ordinary string&quot;\n      Dim index As Integer = value.IndexOf(&quot;An &quot;) + 3\n      Dim capacity As Integer = &amp;hFFFF\n      \n      &#39; Instantiate a StringBuilder from a string.\n      Dim sb1 As New StringBuilder(value)\n      ShowSBInfo(sb1) \n      \n      &#39; Instantiate a StringBuilder from string and define a capacity.  \n      Dim sb2 As New StringBuilder(value, capacity)   \n      ShowSBInfo(sb2) \n      \n      &#39; Instantiate a StringBuilder from substring and define a capacity.  \n      Dim sb3 As New StringBuilder(value, index, \n                                   value.Length - index, \n                                   capacity )\n      ShowSBInfo(sb3) \n   End Sub\n   \n   Public Sub ShowSBInfo(sb As StringBuilder)\n      Console.WriteLine()\n      Console.WriteLine(&quot;Value: {0}&quot;, sb.ToString())\n      For Each prop In sb.GetType().GetProperties\n         If prop.GetIndexParameters().Length = 0 Then\n            Console.Write(&quot;{0}: {1:N0}    &quot;, prop.Name, prop.GetValue(sb))\n         End If   \n      Next\n      Console.WriteLine()\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Value: An ordinary string\n&#39;    Capacity: 18    MaxCapacity: 2,147,483,647    Length: 18\n&#39;    \n&#39;    Value: An ordinary string\n&#39;    Capacity: 65,535    MaxCapacity: 2,147,483,647    Length: 18\n&#39;    \n&#39;    Value: ordinary string\n&#39;    Capacity: 65,535    MaxCapacity: 2,147,483,647    Length: 15\n</code></pre><p><a name=\"Calling\"></a>   </p>\n<h2 id=\"calling-stringbuilder-methods\">Calling StringBuilder methods</h2>\n<p> Most of the methods that modify the string in a StringBuilder instance return a reference to that same instance. This enables you to call StringBuilder methods in two ways:  </p>\n<ul>\n<li><p>You can make individual method calls and ignore the return value, as the following example does.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Class#4\">using System;\nusing System.Text;\n\npublic class Example\n{\n   public static void Main()\n   {\n      StringBuilder sb = new StringBuilder();\n      sb.Append(&quot;This is the beginning of a sentence, &quot;);\n      sb.Replace(&quot;the beginning of &quot;, &quot;&quot;);\n      sb.Insert(sb.ToString().IndexOf(&quot;a &quot;) + 2, &quot;complete &quot;);\n      sb.Replace(&quot;,&quot;, &quot;.&quot;);\n      Console.WriteLine(sb.ToString());\n   }\n}\n// The example displays the following output:\n//        This is a complete sentence.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Class#4\">Imports System.Text\n\nModule Example\n   Public Sub Main()\n      Dim sb As New StringBuilder()\n      sb.Append(&quot;This is the beginning of a sentence, &quot;)\n      sb.Replace(&quot;the beginning of &quot;, &quot;&quot;)\n      sb.Insert(sb.ToString().IndexOf(&quot;a &quot;) + 2, &quot;complete &quot;)\n      sb.Replace(&quot;,&quot;, &quot;.&quot;)\n      Console.WriteLine(sb.ToString())\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       This is a complete sentence.\n</code></pre></li>\n<li><p>You can make a series of method calls in a single statement. This can be convenient if you want to write a single statement that chains successive operations. The following example consolidates three method calls from the previous example into a single line of code.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Class#5\">using System;\nusing System.Text;\n\npublic class Example\n{\n   public static void Main()\n   {\n      StringBuilder sb = new StringBuilder(&quot;This is the beginning of a sentence, &quot;);\n      sb.Replace(&quot;the beginning of &quot;, &quot;&quot;).Insert(sb.ToString().IndexOf(&quot;a &quot;) + 2, \n                                                 &quot;complete &quot;).Replace(&quot;,&quot;, &quot;.&quot;);\n      Console.WriteLine(sb.ToString());\n   }\n}\n// The example displays the following output:\n//        This is a complete sentence.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Class#5\">Imports System.Text\n\nModule Example\n   Public Sub Main()\n      Dim sb As New StringBuilder(&quot;This is the beginning of a sentence, &quot;)\n      sb.Replace(&quot;the beginning of &quot;, &quot;&quot;).Insert(sb.ToString().IndexOf(&quot;a &quot;) + 2, _\n                                                 &quot;complete &quot;).Replace(&quot;, &quot;, &quot;.&quot;)\n      Console.WriteLine(sb.ToString())\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       This is a complete sentence.\n</code></pre></li>\n</ul>\n<p><a name=\"Operations\"></a>   </p>\n<h2 id=\"performing-stringbuilder-operations\">Performing StringBuilder operations</h2>\n<p> You can use the methods of the StringBuilder class to iterate, add, delete, or modify characters in a StringBuilder object.  </p>\n<p><a name=\"Iterating\"></a>   </p>\n<h3 id=\"iterating-stringbuilder-characters\">Iterating StringBuilder characters</h3>\n<p> You can access the characters in a StringBuilder object by using the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Chars_\" data-linktype=\"relative-path\">Chars</a> property. In C#, <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Chars_\" data-linktype=\"relative-path\">Chars</a> is an indexer; in Visual Basic, it is the default property of the StringBuilder class. This enables you to set or retrieve individual characters by using their index only, without explicitly referencing the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Chars_\" data-linktype=\"relative-path\">Chars</a> property. Characters in a StringBuilder object begin at index 0 (zero) and continue to index <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Length_\" data-linktype=\"relative-path\">Length</a> - 1.  </p>\n<p> The following example illustrates the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Chars_\" data-linktype=\"relative-path\">Chars</a> property. It appends ten random numbers to a StringBuilder object, and then iterates each character. If the character&#39;s Unicode category is <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">System.Globalization.UnicodeCategory</a>, it decreases the number by 1 (or changes the number to 9 if its value is 0). The example displays the contents of the StringBuilder object both before and after the values of individual characters were changed.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Class#7\">Imports System.Globalization\nImports System.Text\n\nModule Example\n   Public Sub Main()\n      Dim rnd As New Random()\n      Dim sb As New StringBuilder()\n      \n      &#39; Generate 10 random numbers and store them in a StringBuilder.\n      For ctr As Integer = 0 To 9\n         sb.Append(rnd.Next().ToString(&quot;N5&quot;))    \n      Next\n      Console.WriteLine(&quot;The original string:&quot;)\n      Console.WriteLine(sb.ToString())\n      Console.WriteLine()\n            \n      &#39; Decrease each number by one.\n      For ctr As Integer = 0 To sb.Length - 1\n         If Char.GetUnicodeCategory(sb(ctr)) = UnicodeCategory.DecimalDigitNumber Then\n            Dim number As Integer = CType(Char.GetNumericValue(sb(ctr)), Integer)\n            number -= 1\n            If number &lt; 0 Then number = 9\n         \n            sb(ctr) = number.ToString()(0)\n         End If\n      Next\n      Console.WriteLine(&quot;The new string:&quot;)\n      Console.WriteLine(sb.ToString())\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    The original string:\n&#39;    1,457,531,530.00000940,522,609.000001,668,113,564.000001,998,992,883.000001,792,660,834.00\n&#39;    000101,203,251.000002,051,183,075.000002,066,000,067.000001,643,701,043.000001,702,382,508\n&#39;    .00000\n&#39;    \n&#39;    The new string:\n&#39;    0,346,420,429.99999839,411,598.999990,557,002,453.999990,887,881,772.999990,681,559,723.99\n&#39;    999090,192,140.999991,940,072,964.999991,955,999,956.999990,532,690,932.999990,691,271,497\n&#39;    .99999\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Class#7\">using System;\nusing System.Globalization;\nusing System.Text;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Random rnd = new Random();\n      StringBuilder sb = new StringBuilder();\n      \n      // Generate 10 random numbers and store them in a StringBuilder.\n      for (int ctr = 0; ctr &lt;= 9; ctr++)\n         sb.Append(rnd.Next().ToString(&quot;N5&quot;));    \n\n      Console.WriteLine(&quot;The original string:&quot;);\n      Console.WriteLine(sb.ToString());\n            \n      // Decrease each number by one.\n      for (int ctr = 0; ctr &lt; sb.Length; ctr++) {\n         if (Char.GetUnicodeCategory(sb[ctr]) == UnicodeCategory.DecimalDigitNumber) {\n            int number = (int) Char.GetNumericValue(sb[ctr]);\n            number--;\n            if (number &lt; 0) number = 9;\n         \n            sb[ctr] = number.ToString()[0];\n         }\n      }\n      Console.WriteLine(&quot;\\nThe new string:&quot;);\n      Console.WriteLine(sb.ToString());\n   }\n}\n// The example displays the following output:\n//    The original string:\n//    1,457,531,530.00000940,522,609.000001,668,113,564.000001,998,992,883.000001,792,660,834.00\n//    000101,203,251.000002,051,183,075.000002,066,000,067.000001,643,701,043.000001,702,382,508\n//    .00000\n//    \n//    The new string:\n//    0,346,420,429.99999839,411,598.999990,557,002,453.999990,887,881,772.999990,681,559,723.99\n//    999090,192,140.999991,940,072,964.999991,955,999,956.999990,532,690,932.999990,691,271,497\n//    .99999\n</code></pre><p><a name=\"Adding\"></a>   </p>\n<h3 id=\"adding-text-to-a-stringbuilder-object\">Adding text to a StringBuilder object</h3>\n<p> The StringBuilder class includes the following methods for expanding the contents of a StringBuilder object:  </p>\n<ul>\n<li><p>The <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Append_\" data-linktype=\"relative-path\">Append</a> method appends a string, a substring, a character array, a portion of a character array, a single character repeated multiple times, or the string representation of a primitive data type to a StringBuilder object.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_AppendLine_\" data-linktype=\"relative-path\">AppendLine</a> method appends a line terminator or a string along with a line terminator to a StringBuilder object.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_AppendFormat_\" data-linktype=\"relative-path\">AppendFormat</a> method appends a  to a StringBuilder object. The string representations of objects included in the result string can reflect the formatting conventions of the current system culture or a specified culture.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Insert_\" data-linktype=\"relative-path\">Insert</a> method inserts a string, a substring, multiple repetitions of a string, a character array, a portion of a character array, or the string representation of a primitive data type at a specified position in the StringBuilder object. The position is defined by a zero-based index.  </p>\n<p>The following example uses the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Append_\" data-linktype=\"relative-path\">Append</a>, <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_AppendLine_\" data-linktype=\"relative-path\">AppendLine</a>, <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_AppendFormat_\" data-linktype=\"relative-path\">AppendFormat</a>, and <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Insert_\" data-linktype=\"relative-path\">Insert</a> methods to expand the text of a StringBuilder object.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Class#9\">using System;\nusing System.Text;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Create a StringBuilder object with no text.\n      StringBuilder sb = new StringBuilder();\n      // Append some text.\n      sb.Append(&#39;*&#39;, 10).Append(&quot; Adding Text to a StringBuilder Object &quot;).Append(&#39;*&#39;, 10);\n      sb.AppendLine(&quot;\\n&quot;);\n      sb.AppendLine(&quot;Some code points and their corresponding characters:&quot;);\n      // Append some formatted text.\n      for (int ctr = 50; ctr &lt;= 60; ctr++) {\n         sb.AppendFormat(&quot;{0,12:X4} {1,12}&quot;, ctr, Convert.ToChar(ctr));\n         sb.AppendLine();\n      }\n      // Find the end of the introduction to the column.\n      int pos = sb.ToString().IndexOf(&quot;characters:&quot;) + 11 + \n                Environment.NewLine.Length;\n      // Insert a column header.\n      sb.Insert(pos, String.Format(&quot;{2}{0,12:X4} {1,12}{2}&quot;, &quot;Code Unit&quot;, \n                                   &quot;Character&quot;, &quot;\\n&quot;));      \n\n      // Convert the StringBuilder to a string and display it.      \n      Console.WriteLine(sb.ToString());      \n   }\n}\n// The example displays the following output:\n//    ********** Adding Text to a StringBuilder Object **********\n//    \n//    Some code points and their corresponding characters:\n//    \n//       Code Unit    Character\n//            0032            2\n//            0033            3\n//            0034            4\n//            0035            5\n//            0036            6\n//            0037            7\n//            0038            8\n//            0039            9\n//            003A            :\n//            003B            ;\n//            003C            &lt;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Class#9\">Imports System.Text\n\nModule Example\n   Public Sub Main()\n      &#39; Create a StringBuilder object with no text.\n      Dim sb As New StringBuilder()\n      &#39; Append some text.\n      sb.Append(&quot;*&quot;c, 10).Append(&quot; Adding Text to a StringBuilder Object &quot;).Append(&quot;*&quot;c, 10)\n      sb.AppendLine()\n      sb.AppendLine()\n      sb.AppendLine(&quot;Some code points and their corresponding characters:&quot;)\n      &#39; Append some formatted text.\n      For ctr = 50 To 60\n         sb.AppendFormat(&quot;{0,12:X4} {1,12}&quot;, ctr, Convert.ToChar(ctr))\n         sb.AppendLine()\n      Next\n      &#39; Find the end of the introduction to the column.\n      Dim pos As Integer = sb.ToString().IndexOf(&quot;characters:&quot;) + 11 + \n                           Environment.NewLine.Length\n      &#39; Insert a column header.\n      sb.Insert(pos, String.Format(&quot;{2}{0,12:X4} {1,12}{2}&quot;, &quot;Code Unit&quot;, \n                                   &quot;Character&quot;, vbCrLf))      \n\n      &#39; Convert the StringBuilder to a string and display it.      \n      Console.WriteLine(sb.ToString())      \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       ********** Adding Text to a StringBuilder Object **********\n&#39;       \n&#39;       Some code points and their corresponding characters:\n&#39;       \n&#39;          Code Unit    Character\n&#39;               0032            2\n&#39;               0033            3\n&#39;               0034            4\n&#39;               0035            5\n&#39;               0036            6\n&#39;               0037            7\n&#39;               0038            8\n&#39;               0039            9\n&#39;               003A            :\n&#39;               003B            ;\n&#39;               003C            &lt;\n</code></pre></li>\n</ul>\n<p><a name=\"Deleting\"></a>   </p>\n<h3 id=\"deleting-text-from-a-stringbuilder-object\">Deleting text from a StringBuilder object</h3>\n<p> The StringBuilder class includes methods that can reduce the size of the current StringBuilder instance. The <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Clear_\" data-linktype=\"relative-path\">Clear</a> method removes all characters and sets the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Length_\" data-linktype=\"relative-path\">Length</a> property to zero. The <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Remove_\" data-linktype=\"relative-path\">Remove</a> method deletes a specified number of characters starting at a particular index position. In addition, you can remove characters from the end of a StringBuilder object by setting its <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Length_\" data-linktype=\"relative-path\">Length</a> property to a value that is less than the length of the current instance.  </p>\n<p> The following example removes some of the text from a StringBuilder object, displays its resulting capacity, maximum capacity, and length property values, and then calls the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Clear_\" data-linktype=\"relative-path\">Clear</a> method to remove all the characters from the StringBuilder object.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Class#10\">using System;\nusing System.Text;\n\npublic class Example\n{\n   public static void Main()\n   {\n      StringBuilder sb = new StringBuilder(&quot;A StringBuilder object&quot;);\n      ShowSBInfo(sb);\n      // Remove &quot;object&quot; from the text.\n      string textToRemove = &quot;object&quot;;\n      int pos = sb.ToString().IndexOf(textToRemove);\n      if (pos &gt;= 0) {\n         sb.Remove(pos, textToRemove.Length);\n         ShowSBInfo(sb);\n      }\n      // Clear the StringBuilder contents.\n      sb.Clear();\n      ShowSBInfo(sb);   \n   }\n\n   public static void ShowSBInfo(StringBuilder sb)\n   {\n      Console.WriteLine(&quot;\\nValue: {0}&quot;, sb.ToString());\n      foreach (var prop in sb.GetType().GetProperties()) {\n         if (prop.GetIndexParameters().Length == 0)\n            Console.Write(&quot;{0}: {1:N0}    &quot;, prop.Name, prop.GetValue(sb));\n      }\n      Console.WriteLine();\n   }\n}\n// The example displays the following output:\n//    Value: A StringBuilder object\n//    Capacity: 22    MaxCapacity: 2,147,483,647    Length: 22\n//    \n//    Value: A StringBuilder\n//    Capacity: 22    MaxCapacity: 2,147,483,647    Length: 16\n//    \n//    Value:\n//    Capacity: 22    MaxCapacity: 2,147,483,647    Length: 0\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Class#10\">Imports System.Text\n\nModule Example\n   Public Sub Main()\n      Dim sb As New StringBuilder(&quot;A StringBuilder object&quot;)\n      ShowSBInfo(sb)\n      &#39; Remove &quot;object&quot; from the text.\n      Dim textToRemove As String = &quot;object&quot;\n      Dim pos As Integer = sb.ToString().IndexOf(textToRemove)\n      If pos &gt;= 0\n         sb.Remove(pos, textToRemove.Length)\n         ShowSBInfo(sb)\n      End If\n      &#39; Clear the StringBuilder contents.\n      sb.Clear()\n      ShowSBInfo(sb)   \n   End Sub\n\n   Public Sub ShowSBInfo(sb As StringBuilder)\n      Console.WriteLine()\n      Console.WriteLine(&quot;Value: {0}&quot;, sb.ToString())\n      For Each prop In sb.GetType().GetProperties\n         If prop.GetIndexParameters().Length = 0 Then\n            Console.Write(&quot;{0}: {1:N0}    &quot;, prop.Name, prop.GetValue(sb))\n         End If   \n      Next\n      Console.WriteLine()\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Value: A StringBuilder object\n&#39;    Capacity: 22    MaxCapacity: 2,147,483,647    Length: 22\n&#39;    \n&#39;    Value: A StringBuilder\n&#39;    Capacity: 22    MaxCapacity: 2,147,483,647    Length: 16\n&#39;    \n&#39;    Value:\n&#39;    Capacity: 22    MaxCapacity: 2,147,483,647    Length: 0\n</code></pre><p><a name=\"Modifying\"></a>   </p>\n<h3 id=\"modifying-the-text-in-a-stringbuilder-object\">Modifying the text in a StringBuilder object</h3>\n<p> The <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Replace_\" data-linktype=\"relative-path\">Replace</a> method replaces all occurrences of a character or a string in the entire StringBuilder object or in a particular character range. The following example uses the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Replace_\" data-linktype=\"relative-path\">Replace</a> method to replace all exclamation points (!) with question marks (?) in the StringBuilder object.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Class#11\">using System;\nusing System.Text;\n\npublic class Example\n{\n   public static void Main()\n   {\n      StringBuilder MyStringBuilder = new StringBuilder(&quot;Hello World!&quot;);\n      MyStringBuilder.Replace(&#39;!&#39;, &#39;?&#39;);\n      Console.WriteLine(MyStringBuilder);\n   }\n}\n// The example displays the following output:\n//       Hello World?\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Class#11\">Imports System.Text\n\nModule Example\n   Public Sub Main()\n      Dim MyStringBuilder As New StringBuilder(&quot;Hello World!&quot;)\n      MyStringBuilder.Replace(&quot;!&quot;c, &quot;?&quot;c)\n      Console.WriteLine(MyStringBuilder)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Hello World?\n</code></pre><p><a name=\"Searching\"></a>   </p>\n<h2 id=\"searching-the-text-in-a-stringbuilder-object\">Searching the text in a StringBuilder object</h2>\n<p> The StringBuilder class does not include methods similar to the <a class=\"xref\" href=\"system.string#System_String_Contains_\" data-linktype=\"relative-path\">Contains</a>, <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a>, and <a class=\"xref\" href=\"system.string#System_String_StartsWith_\" data-linktype=\"relative-path\">StartsWith</a> methods provided by the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class, which allow you to search the object for a particular character or a substring. Determining the presence or starting character position of a substring requires that you search a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> value by using either a string search method or a regular expression method. There are four ways to implement such searches, as the following table shows.  </p>\n<table>\n<thead>\n<tr>\n<th>Technique</th>\n<th>Pros</th>\n<th>Cons</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Search string values before adding them to the StringBuilder object.</td>\n<td>Useful for determining whether a substring exists.</td>\n<td>Cannot be used when the index position of a substring is important.</td>\n</tr>\n<tr>\n<td>Call <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_ToString_\" data-linktype=\"relative-path\">ToString</a> and search the returned <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</td>\n<td>Easy to use if you assign all the text to a StringBuilder object, and then begin to modify it.</td>\n<td>Cumbersome to repeatedly call <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_ToString_\" data-linktype=\"relative-path\">ToString</a> if you must make modifications before all text is added to the StringBuilder object.<br><br> You must remember to work from the end of the StringBuilder object&#39;s text if you&#39;re making changes.</td>\n</tr>\n<tr>\n<td>Use the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Chars_\" data-linktype=\"relative-path\">Chars</a> property to sequentially search a range of characters.</td>\n<td>Useful if you&#39;re concerned with individual characters or a small substring.</td>\n<td>Cumbersome if the number of characters to search is large or if the search logic is complex.</td>\n</tr>\n<tr>\n<td>Convert the StringBuilder object to a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object, and perform modifications on the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.</td>\n<td>Useful if the number of modifications is small.</td>\n<td>Negates the performance benefit of the StringBuilder class if the number of modifications is large.</td>\n</tr>\n</tbody>\n</table>\n<p> Let&#39;s examine these techniques in greater detail.  </p>\n<ul>\n<li><p>If the goal of the search is to determine whether a particular substring exists (that is, if you aren&#39;t interested in the position of the substring), you can search strings before storing them in the StringBuilder object. The following example provides one possible implementation. It defines a <code>StringBuilderFinder</code> class whose constructor is passed a reference to a StringBuilder object and the substring to find in the string. In this case, the example tries to determine whether recorded temperatures are in Fahrenheit or Celsius, and adds the appropriate introductory text to the beginning of the StringBuilder object. A random number generator is used to select an array that contains data in either degrees Celsius or degrees Fahrenheit.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Class#12\">Imports System.Text\n\nModule Example\n   Public Sub Main()\n      Dim rnd As New Random()\n      Dim tempF() As String = { &quot;47.6F&quot;, &quot;51.3F&quot;, &quot;49.5F&quot;, &quot;62.3F&quot; }\n      Dim tempC() As String = { &quot;21.2C&quot;, &quot;16.1C&quot;, &quot;23.5C&quot;, &quot;22.9C&quot; }\n      Dim temps()() As String = { tempF, tempC } \n\n      Dim sb As StringBuilder = New StringBuilder()\n      Dim f As New StringBuilderFinder(sb, &quot;F&quot;)\n      Dim baseDate As New DateTime(2013, 5, 1) \n      Dim temperatures() As String = temps(rnd.Next(2))\n      Dim isFahrenheit As Boolean = False\n      For Each temperature In temperatures\n         If isFahrenheit Then\n            sb.AppendFormat(&quot;{0:d}: {1}{2}&quot;, baseDate, temperature, vbCrLf)\n         Else\n            isFahrenheit = f.SearchAndAppend(String.Format(&quot;{0:d}: {1}{2}&quot;, \n                                             baseDate, temperature, vbCrLf))\n         End If\n         baseDate = baseDate.AddDays(1)\n      Next            \n      If isFahrenheit Then\n         sb.Insert(0, &quot;Average Daily Temperature in Degrees Fahrenheit&quot;)\n         sb.Insert(47, vbCrLf + vbCrLf)\n      Else\n         sb.Insert(0, &quot;Average Daily Temperature in Degrees Celsius&quot;)\n         sb.Insert(44, vbCrLf + vbCrLf)\n      End If   \n      Console.WriteLine(sb.ToString())\n   End Sub\nEnd Module\n\nPublic Class StringBuilderFinder\n   Private sb As StringBuilder\n   Private text As String\n   \n   Public Sub New(sb As StringBuilder, textToFind As String)\n      Me.sb = sb\n      text = textToFind\n   End Sub\n   \n   Public Function SearchAndAppend(stringToSearch As String) As Boolean\n      sb.Append(stringToSearch)\n      Return stringToSearch.Contains(text)\n   End Function\nEnd Class\n&#39; The example displays output similar to the following:\n&#39;    Average Daily Temperature in Degrees Celsius\n&#39;    \n&#39;    5/1/2013: 21.2C\n&#39;    5/2/2013: 16.1C\n&#39;    5/3/2013: 23.5C\n&#39;    5/4/2013: 22.9C\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Class#12\">using System;\nusing System.Text;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Random rnd = new Random();\n      string[] tempF = { &quot;47.6F&quot;, &quot;51.3F&quot;, &quot;49.5F&quot;, &quot;62.3F&quot; };\n      string[] tempC = { &quot;21.2C&quot;, &quot;16.1C&quot;, &quot;23.5C&quot;, &quot;22.9C&quot; };\n      string[][] temps = { tempF, tempC }; \n\n      StringBuilder sb = new StringBuilder();\n      var f = new StringBuilderFinder(sb, &quot;F&quot;);\n      var baseDate = new DateTime(2013, 5, 1); \n      String[] temperatures = temps[rnd.Next(2)];\n      bool isFahrenheit = false;\n      foreach (var temperature in temperatures) {\n         if (isFahrenheit)\n            sb.AppendFormat(&quot;{0:d}: {1}\\n&quot;, baseDate, temperature);\n         else\n            isFahrenheit = f.SearchAndAppend(String.Format(&quot;{0:d}: {1}\\n&quot;, \n                                             baseDate, temperature));\n         baseDate = baseDate.AddDays(1);\n      }            \n      if (isFahrenheit) {\n         sb.Insert(0, &quot;Average Daily Temperature in Degrees Fahrenheit&quot;);\n         sb.Insert(47, &quot;\\n\\n&quot;);\n      }\n      else {\n         sb.Insert(0, &quot;Average Daily Temperature in Degrees Celsius&quot;);\n         sb.Insert(44, &quot;\\n\\n&quot;);\n      }   \n      Console.WriteLine(sb.ToString());\n   }\n}\n\npublic class StringBuilderFinder\n{\n   private StringBuilder sb;\n   private String text;\n   \n   public StringBuilderFinder(StringBuilder sb, String textToFind)\n   {\n      this.sb = sb;\n      this.text = textToFind;\n   }\n   \n   public bool SearchAndAppend(String stringToSearch)\n   {\n      sb.Append(stringToSearch);\n      return stringToSearch.Contains(text);\n   }\n}\n// The example displays output similar to the following:\n//    Average Daily Temperature in Degrees Celsius\n//    \n//    5/1/2013: 21.2C\n//    5/2/2013: 16.1C\n//    5/3/2013: 23.5C\n//    5/4/2013: 22.9C\n</code></pre></li>\n<li><p>Call the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_ToString_\" data-linktype=\"relative-path\">ToString</a> method to convert the StringBuilder object to a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object. You can search the string by using methods such as <a class=\"xref\" href=\"system.string#System_String_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> or <a class=\"xref\" href=\"system.string#System_String_StartsWith_\" data-linktype=\"relative-path\">StartsWith</a>, or you can use regular expressions and the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> class to search for patterns. Because both StringBuilder and <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects use UTF-16 encoding to store characters, the index positions of characters, substrings, and regular expression matches are the same in both objects. This enables you to use StringBuilder methods to make changes at the same position at which that text is found in the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If you adopt this approach, you should work from the end of the StringBuilder object to its beginning so that you don&#39;t have to repeatedly convert the StringBuilder object to a string.  </p>\n</div>\n<p> The following example illustrates this approach. It stores four occurrences of each letter of the English alphabet in a StringBuilder object. It then converts the text to a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object and uses a regular expression to identify the starting position of each four-character sequence. Finally, it adds an underscore before each four-character sequence except for the first sequence, and converts the first character of the sequence to uppercase.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Class#13\">using System;\nusing System.Text;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Create a StringBuilder object with 4 successive occurrences \n      // of each character in the English alphabet. \n      StringBuilder sb = new StringBuilder();\n      for (ushort ctr = (ushort)&#39;a&#39;; ctr &lt;= (ushort) &#39;z&#39;; ctr++)\n         sb.Append(Convert.ToChar(ctr), 4);\n      \n      // Create a parallel string object.\n      String sbString = sb.ToString();\n      // Determine where each new character sequence begins.\n      String pattern = @&quot;(\\w)\\1+&quot;;\n      MatchCollection matches = Regex.Matches(sbString, pattern);\n\n      // Uppercase the first occurrence of the sequence, and separate it\n      // from the previous sequence by an underscore character.\n      for (int ctr = matches.Count - 1; ctr &gt;= 0; ctr--) { \n         Match m = matches[ctr];\n         sb[m.Index] = Char.ToUpper(sb[m.Index]);\n         if (m.Index &gt; 0) sb.Insert(m.Index, &quot;_&quot;);\n      }\n      // Display the resulting string.\n      sbString = sb.ToString();\n      int line = 0;\n      do {\n         int nChars = line * 80 + 79 &lt;= sbString.Length ? \n                             80 : sbString.Length - line * 80;\n         Console.WriteLine(sbString.Substring(line * 80, nChars));\n         line++;\n      } while (line * 80 &lt; sbString.Length);\n   }\n}\n// The example displays the following output:\n//    Aaaa_Bbbb_Cccc_Dddd_Eeee_Ffff_Gggg_Hhhh_Iiii_Jjjj_Kkkk_Llll_Mmmm_Nnnn_Oooo_Pppp_\n//    Qqqq_Rrrr_Ssss_Tttt_Uuuu_Vvvv_Wwww_Xxxx_Yyyy_Zzzz\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Class#13\">Imports System.Text\nImports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      &#39; Create a StringBuilder object with 4 successive occurrences \n      &#39; of each character in the English alphabet. \n      Dim sb As New StringBuilder()\n      For ctr As UShort = AscW(&quot;a&quot;) To Ascw(&quot;z&quot;)\n         sb.Append(ChrW(ctr), 4)\n      Next    \n      &#39; Create a parallel string object.\n      Dim sbString As String = sb.ToString()\n      &#39; Determine where each new character sequence begins.\n      Dim pattern As String = &quot;(\\w)\\1+&quot;\n      Dim matches As MatchCollection = Regex.Matches(sbString, pattern)\n\n      &#39; Uppercase the first occurrence of the sequence, and separate it\n      &#39; from the previous sequence by an underscore character.\n      For ctr As Integer = matches.Count - 1 To 0 Step -1 \n         Dim m As Match = matches(ctr)\n         sb.Chars(m.Index) = Char.ToUpper(sb.Chars(m.index))\n         If m.Index &gt; 0 Then sb.Insert(m.Index, &quot;_&quot;)\n      Next\n      &#39; Display the resulting string.\n      sbString = sb.ToString()\n      Dim line As Integer = 0\n      Do\n         Dim nChars As Integer = If(line * 80 + 79 &lt;= sbString.Length, \n                                    80, sbString.Length - line * 80)\n         Console.WriteLine(sbString.Substring(line * 80, nChars))\n         line += 1\n      Loop While line * 80 &lt; sbString.Length\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Aaaa_Bbbb_Cccc_Dddd_Eeee_Ffff_Gggg_Hhhh_Iiii_Jjjj_Kkkk_Llll_Mmmm_Nnnn_Oooo_Pppp_\n&#39;    Qqqq_Rrrr_Ssss_Tttt_Uuuu_Vvvv_Wwww_Xxxx_Yyyy_Zzzz\n</code></pre></li>\n<li><p>Use the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Chars_\" data-linktype=\"relative-path\">Chars</a> property to sequentially search a range of characters in a StringBuilder object. This approach may not be practical if the number of characters to be searched is large or the search logic is particularly complex.  </p>\n<p> The following example is identical in functionality to the previous example but differs in implementation. It uses the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Chars_\" data-linktype=\"relative-path\">Chars</a> property to detect when a character value has changed, inserts an underscore at that position, and converts the first character in the new sequence to uppercase.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Class#14\">using System;\nusing System.Text;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Create a StringBuilder object with 4 successive occurrences \n      // of each character in the English alphabet. \n      StringBuilder sb = new StringBuilder();\n      for (ushort ctr = (ushort) &#39;a&#39;; ctr &lt;= (ushort) &#39;z&#39;; ctr++)\n         sb.Append(Convert.ToChar(ctr), 4);\n\n      // Iterate the text to determine when a new character sequence occurs.\n      int position = 0;\n      Char current = &#39;\\u0000&#39;;\n      do {\n         if (sb[position] != current) {\n            current = sb[position];\n            sb[position] = Char.ToUpper(sb[position]);\n            if (position &gt; 0) \n               sb.Insert(position, &quot;_&quot;);\n            position += 2;\n         }\n         else {\n            position++;\n         }      \n      } while (position &lt;= sb.Length - 1);\n      // Display the resulting string.\n      String sbString = sb.ToString();\n      int line = 0;\n      do {\n         int nChars = line * 80 + 79 &lt;= sbString.Length ? \n                             80 : sbString.Length - line * 80;\n         Console.WriteLine(sbString.Substring(line * 80, nChars));\n         line++;\n      } while (line * 80 &lt; sbString.Length);\n   }\n}\n// The example displays the following output:\n//    Aaaa_Bbbb_Cccc_Dddd_Eeee_Ffff_Gggg_Hhhh_Iiii_Jjjj_Kkkk_Llll_Mmmm_Nnnn_Oooo_Pppp_\n//    Qqqq_Rrrr_Ssss_Tttt_Uuuu_Vvvv_Wwww_Xxxx_Yyyy_Zzzz\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Class#14\">Imports System.Text\n\nModule Example\n   Public Sub Main()\n      &#39; Create a StringBuilder object with 4 successive occurrences \n      &#39; of each character in the English alphabet. \n      Dim sb As New StringBuilder()\n      For ctr As UShort = AscW(&quot;a&quot;) To Ascw(&quot;z&quot;)\n         sb.Append(ChrW(ctr), 4)\n      Next    \n      &#39; Iterate the text to determine when a new character sequence occurs.\n      Dim position As Integer = 0\n      Dim current As Char = ChrW(0)\n      Do\n         If sb(position) &lt;&gt; current Then\n            current = sb(position)\n            sb(position) = Char.ToUpper(sb(position))\n            If position &gt; 0 Then sb.Insert(position, &quot;_&quot;)\n            position += 2\n         Else\n            position += 1\n         End If      \n      Loop While position &lt;= sb.Length - 1\n      &#39; Display the resulting string.\n      Dim sbString As String = sb.ToString()\n      Dim line As Integer = 0\n      Do\n         Dim nChars As Integer = If(line * 80 + 79 &lt;= sbString.Length, \n                                    80, sbString.Length - line * 80)\n         Console.WriteLine(sbString.Substring(line * 80, nChars))\n         line += 1\n      Loop While line * 80 &lt; sbString.Length\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Aaaa_Bbbb_Cccc_Dddd_Eeee_Ffff_Gggg_Hhhh_Iiii_Jjjj_Kkkk_Llll_Mmmm_Nnnn_Oooo_Pppp_\n&#39;    Qqqq_Rrrr_Ssss_Tttt_Uuuu_Vvvv_Wwww_Xxxx_Yyyy_Zzzz\n</code></pre></li>\n<li><p>Store all the unmodified text in the StringBuilder object, call the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_ToString_\" data-linktype=\"relative-path\">ToString</a> method to convert the StringBuilder object to a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object, and perform the modifications on the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object. You can use this approach if you have only a few modifications; otherwise, the cost of working with immutable strings may negate the performance benefits of using a StringBuilder object.  </p>\n<p> The following example is identical in functionality to the previous two examples but differs in implementation. It creates a StringBuilder object, converts it to a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object, and then uses a regular expression to perform all remaining modifications on the string. The <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Replace_System_String_System_String_System_Text_RegularExpressions_MatchEvaluator_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.Replace(String,String,MatchEvaluator)</a> method uses a lambda expression to perform the replacement on each match.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Class#15\">using System;\nusing System.Text;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Create a StringBuilder object with 4 successive occurrences \n      // of each character in the English alphabet. \n      StringBuilder sb = new StringBuilder();\n      for (ushort ctr = (ushort)&#39;a&#39;; ctr &lt;= (ushort) &#39;z&#39;; ctr++)\n         sb.Append(Convert.ToChar(ctr), 4);\n     \n      // Convert it to a string.\n      String sbString = sb.ToString();\n\n      // Use a regex to uppercase the first occurrence of the sequence, \n      // and separate it from the previous sequence by an underscore.\n      string pattern = @&quot;(\\w)(\\1+)&quot;;\n      sbString = Regex.Replace(sbString, pattern, \n                               m =&gt; (m.Index &gt; 0 ? &quot;_&quot; : &quot;&quot;) + \n                               m.Groups[1].Value.ToUpper() + \n                               m.Groups[2].Value);\n\n      // Display the resulting string.\n      int line = 0;\n      do {\n         int nChars = line * 80 + 79 &lt;= sbString.Length ? \n                             80 : sbString.Length - line * 80;\n         Console.WriteLine(sbString.Substring(line * 80, nChars));\n         line++;\n      } while (line * 80 &lt; sbString.Length);\n   }\n}\n// The example displays the following output:\n//    Aaaa_Bbbb_Cccc_Dddd_Eeee_Ffff_Gggg_Hhhh_Iiii_Jjjj_Kkkk_Llll_Mmmm_Nnnn_Oooo_Pppp_\n//    Qqqq_Rrrr_Ssss_Tttt_Uuuu_Vvvv_Wwww_Xxxx_Yyyy_Zzzz\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Class#15\">Imports System.Text\nImports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      &#39; Create a StringBuilder object with 4 successive occurrences \n      &#39; of each character in the English alphabet. \n      Dim sb As New StringBuilder()\n      For ctr As UShort = AscW(&quot;a&quot;) To Ascw(&quot;z&quot;)\n         sb.Append(ChrW(ctr), 4)\n      Next    \n      &#39; Convert it to a string.\n      Dim sbString As String = sb.ToString()\n\n      &#39; Use a regex to uppercase the first occurrence of the sequence, \n      &#39; and separate it from the previous sequence by an underscore.\n      Dim pattern As String = &quot;(\\w)(\\1+)&quot;\n      sbString = Regex.Replace(sbString, pattern, \n                               Function(m) If(m.Index &gt; 0,&quot;_&quot;,&quot;&quot;) + \n                                           m.Groups(1).Value.ToUpper + \n                                           m.Groups(2).Value)\n\n      &#39; Display the resulting string.\n      Dim line As Integer = 0\n      Do\n         Dim nChars As Integer = If(line * 80 + 79 &lt;= sbString.Length, \n                                    80, sbString.Length - line * 80)\n         Console.WriteLine(sbString.Substring(line * 80, nChars))\n         line += 1\n      Loop While line * 80 &lt; sbString.Length\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Aaaa_Bbbb_Cccc_Dddd_Eeee_Ffff_Gggg_Hhhh_Iiii_Jjjj_Kkkk_Llll_Mmmm_Nnnn_Oooo_Pppp_\n&#39;    Qqqq_Rrrr_Ssss_Tttt_Uuuu_Vvvv_Wwww_Xxxx_Yyyy_Zzzz\n</code></pre></li>\n</ul>\n<p><a name=\"Converting\"></a>   </p>\n<h2 id=\"converting-the-stringbuilder-object-to-a-string\">Converting the StringBuilder object to a string</h2>\n<p> You must convert the StringBuilder object to a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object before you can pass the string represented by the StringBuilder object to a method that has a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> parameter or display it in the user interface. You perform this conversion by calling the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_ToString_\" data-linktype=\"relative-path\">ToString</a> method. For an illustration, see the previous example, which calls the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_ToString_\" data-linktype=\"relative-path\">ToString</a> method to convert a StringBuilder object to a string so that it can be passed to a regular expression method.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder__ctor\" data-linktype=\"self-bookmark\">StringBuilder()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder__ctor_System_Int32_\" data-linktype=\"self-bookmark\">StringBuilder(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> class using the specified capacity.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder__ctor_System_String_\" data-linktype=\"self-bookmark\">StringBuilder(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> class using the specified string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder__ctor_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">StringBuilder(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> class that starts with a specified capacity and can grow to a specified maximum.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder__ctor_System_String_System_Int32_\" data-linktype=\"self-bookmark\">StringBuilder(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> class using the specified string and capacity.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder__ctor_System_String_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">StringBuilder(String,Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> class from the specified substring and capacity.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Capacity\" data-linktype=\"self-bookmark\">Capacity</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the maximum number of characters that can be contained in the memory allocated by the current instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Chars_System_Int32_\" data-linktype=\"self-bookmark\">Chars(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the character at the specified character position in this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Length\" data-linktype=\"self-bookmark\">Length</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the length of the current <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_MaxCapacity\" data-linktype=\"self-bookmark\">MaxCapacity</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the maximum capacity of this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Append_System_Boolean_\" data-linktype=\"self-bookmark\">Append(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the string representation of a specified Boolean value to this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Append_System_Byte_\" data-linktype=\"self-bookmark\">Append(Byte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the string representation of a specified 8-bit unsigned integer to this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Append_System_Char_\" data-linktype=\"self-bookmark\">Append(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the string representation of a specified <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object to this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Append_System_Char___\" data-linktype=\"self-bookmark\">Append(Char[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the string representation of the Unicode characters in a specified array to this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Append_System_Decimal_\" data-linktype=\"self-bookmark\">Append(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the string representation of a specified decimal number to this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Append_System_Double_\" data-linktype=\"self-bookmark\">Append(Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the string representation of a specified double-precision floating-point number to this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Append_System_Int16_\" data-linktype=\"self-bookmark\">Append(Int16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the string representation of a specified 16-bit signed integer to this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Append_System_Int32_\" data-linktype=\"self-bookmark\">Append(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the string representation of a specified 32-bit signed integer to this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Append_System_Int64_\" data-linktype=\"self-bookmark\">Append(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the string representation of a specified 64-bit signed integer to this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Append_System_Object_\" data-linktype=\"self-bookmark\">Append(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the string representation of a specified object to this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Append_System_SByte_\" data-linktype=\"self-bookmark\">Append(SByte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the string representation of a specified 8-bit signed integer to this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Append_System_Single_\" data-linktype=\"self-bookmark\">Append(Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the string representation of a specified single-precision floating-point number to this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Append_System_String_\" data-linktype=\"self-bookmark\">Append(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends a copy of the specified string to this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Append_System_UInt16_\" data-linktype=\"self-bookmark\">Append(UInt16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the string representation of a specified 16-bit unsigned integer to this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Append_System_UInt32_\" data-linktype=\"self-bookmark\">Append(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the string representation of a specified 32-bit unsigned integer to this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Append_System_UInt64_\" data-linktype=\"self-bookmark\">Append(UInt64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the string representation of a specified 64-bit unsigned integer to this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Append_System_Char_System_Int32_\" data-linktype=\"self-bookmark\">Append(Char,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends a specified number of copies of the string representation of a Unicode character to this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Append_System_Char__System_Int32_\" data-linktype=\"self-bookmark\">Append(Char*,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends an array of Unicode characters starting at a specified address to this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Append_System_Char___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Append(Char[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the string representation of a specified subarray of Unicode characters to this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Append_System_String_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Append(String,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends a copy of a specified substring to this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_AppendFormat_System_String_System_Object_\" data-linktype=\"self-bookmark\">AppendFormat(String,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_AppendFormat_System_String_System_Object___\" data-linktype=\"self-bookmark\">AppendFormat(String,Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a corresponding argument in a parameter array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_AppendFormat_System_IFormatProvider_System_String_System_Object_\" data-linktype=\"self-bookmark\">AppendFormat(IFormatProvider,String,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument using a specified format provider.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_AppendFormat_System_IFormatProvider_System_String_System_Object___\" data-linktype=\"self-bookmark\">AppendFormat(IFormatProvider,String,Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a corresponding argument in a parameter array using a specified format provider.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_AppendFormat_System_String_System_Object_System_Object_\" data-linktype=\"self-bookmark\">AppendFormat(String,Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of two arguments.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_AppendFormat_System_IFormatProvider_System_String_System_Object_System_Object_\" data-linktype=\"self-bookmark\">AppendFormat(IFormatProvider,String,Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of two arguments using a specified format provider.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_AppendFormat_System_String_System_Object_System_Object_System_Object_\" data-linktype=\"self-bookmark\">AppendFormat(String,Object,Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of three arguments.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_AppendFormat_System_IFormatProvider_System_String_System_Object_System_Object_System_Object_\" data-linktype=\"self-bookmark\">AppendFormat(IFormatProvider,String,Object,Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of three arguments using a specified format provider.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_AppendLine\" data-linktype=\"self-bookmark\">AppendLine()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the default line terminator to the end of the current <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_AppendLine_System_String_\" data-linktype=\"self-bookmark\">AppendLine(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends a copy of the specified string followed by the default line terminator to the end of the current <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Clear\" data-linktype=\"self-bookmark\">Clear()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes all characters from the current <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_CopyTo_System_Int32_System_Char___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">CopyTo(Int32,Char[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the characters from a specified segment of this instance to a specified segment of a destination <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_EnsureCapacity_System_Int32_\" data-linktype=\"self-bookmark\">EnsureCapacity(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Ensures that the capacity of this instance of <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> is at least the specified value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Equals_System_Text_StringBuilder_\" data-linktype=\"self-bookmark\">Equals(StringBuilder)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value indicating whether this instance is equal to a specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Insert_System_Int32_System_Boolean_\" data-linktype=\"self-bookmark\">Insert(Int32,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Inserts the string representation of a Boolean value into this instance at the specified character position.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Insert_System_Int32_System_Byte_\" data-linktype=\"self-bookmark\">Insert(Int32,Byte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Inserts the string representation of a specified 8-bit unsigned integer into this instance at the specified character position.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Insert_System_Int32_System_Char_\" data-linktype=\"self-bookmark\">Insert(Int32,Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Inserts the string representation of a specified Unicode character into this instance at the specified character position.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Insert_System_Int32_System_Char___\" data-linktype=\"self-bookmark\">Insert(Int32,Char[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Inserts the string representation of a specified array of Unicode characters into this instance at the specified character position.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Insert_System_Int32_System_Decimal_\" data-linktype=\"self-bookmark\">Insert(Int32,Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Inserts the string representation of a decimal number into this instance at the specified character position.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Insert_System_Int32_System_Double_\" data-linktype=\"self-bookmark\">Insert(Int32,Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Inserts the string representation of a double-precision floating-point number into this instance at the specified character position.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Insert_System_Int32_System_Int16_\" data-linktype=\"self-bookmark\">Insert(Int32,Int16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Inserts the string representation of a specified 16-bit signed integer into this instance at the specified character position.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Insert_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Insert(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Inserts the string representation of a specified 32-bit signed integer into this instance at the specified character position.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Insert_System_Int32_System_Int64_\" data-linktype=\"self-bookmark\">Insert(Int32,Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Inserts the string representation of a 64-bit signed integer into this instance at the specified character position.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Insert_System_Int32_System_Object_\" data-linktype=\"self-bookmark\">Insert(Int32,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Inserts the string representation of an object into this instance at the specified character position.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Insert_System_Int32_System_SByte_\" data-linktype=\"self-bookmark\">Insert(Int32,SByte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Inserts the string representation of a specified 8-bit signed integer into this instance at the specified character position.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Insert_System_Int32_System_Single_\" data-linktype=\"self-bookmark\">Insert(Int32,Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Inserts the string representation of a single-precision floating point number into this instance at the specified character position.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Insert_System_Int32_System_String_\" data-linktype=\"self-bookmark\">Insert(Int32,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Inserts a string into this instance at the specified character position.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Insert_System_Int32_System_UInt16_\" data-linktype=\"self-bookmark\">Insert(Int32,UInt16)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Inserts the string representation of a 16-bit unsigned integer into this instance at the specified character position.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Insert_System_Int32_System_UInt32_\" data-linktype=\"self-bookmark\">Insert(Int32,UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Inserts the string representation of a 32-bit unsigned integer into this instance at the specified character position.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Insert_System_Int32_System_UInt64_\" data-linktype=\"self-bookmark\">Insert(Int32,UInt64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Inserts the string representation of a 64-bit unsigned integer into this instance at the specified character position.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Insert_System_Int32_System_String_System_Int32_\" data-linktype=\"self-bookmark\">Insert(Int32,String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Inserts one or more copies of a specified string into this instance at the specified character position.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Insert_System_Int32_System_Char___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Insert(Int32,Char[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Inserts the string representation of a specified subarray of Unicode characters into this instance at the specified character position.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Remove_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Remove(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the specified range of characters from this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Replace_System_Char_System_Char_\" data-linktype=\"self-bookmark\">Replace(Char,Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces all occurrences of a specified character in this instance with another specified character.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Replace_System_String_System_String_\" data-linktype=\"self-bookmark\">Replace(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces all occurrences of a specified string in this instance with another specified string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Replace_System_Char_System_Char_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Replace(Char,Char,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces, within a substring of this instance, all occurrences of a specified character with another specified character.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_Replace_System_String_System_String_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Replace(String,String,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces, within a substring of this instance, all occurrences of a specified string with another specified string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of this instance to a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_ToString_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ToString(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of a substring of this instance to a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_StringBuilder_System_Runtime_Serialization_ISerializable_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">ISerializable.GetObjectData(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Populates a <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> object with the data necessary to deserialize the current <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder__ctor\">\r\n    \r\n            <a id=\"System_Text_StringBuilder__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StringBuilder()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public StringBuilder ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The string value of this instance is set to <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>, and the capacity is set to the implementation-specific default capacity.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to call the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder__ctor_\" data-linktype=\"relative-path\">StringBuilder</a> constructor with no parameters.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Constructors#1\">        StringBuilder stringBuilder = new StringBuilder();\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.StringBuilder.Constructors#1\">      StringBuilder^ stringBuilder = gcnew StringBuilder;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Constructors#1\">        Dim stringBuilder As New StringBuilder\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder__ctor_System_Int32_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StringBuilder(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> class using the specified capacity.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public StringBuilder (int capacity);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>capacity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The suggested starting size of this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>capacity</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>capacity</code> parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance. Its value is assigned to the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Capacity_\" data-linktype=\"relative-path\">Capacity</a> property. If the number of characters to be stored in the current instance exceeds this <code>capacity</code> value, the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object allocates additional memory to store them.  </p>\n<p> The string value of this instance is set to <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>. If <code>capacity</code> is zero, the implementation-specific default capacity is used.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to call the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder__ctor_\" data-linktype=\"relative-path\">StringBuilder</a> constructor with a specified capacity.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Constructors#3\">        int capacity = 255;\n        StringBuilder stringBuilder = new StringBuilder(capacity);\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.StringBuilder.Constructors#3\">      int capacity = 255;\n      StringBuilder^ stringBuilder = gcnew StringBuilder( capacity );\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Constructors#3\">        Dim capacity As Integer = 255\n        Dim stringBuilder As New StringBuilder(capacity)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder__ctor_System_String_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StringBuilder(String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> class using the specified string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public StringBuilder (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string used to initialize the value of the instance. If <code>value</code> is <code>null</code>, the new <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> will contain the empty string (that is, it contains <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>value</code> is <code>null</code>, the new <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> will contain the empty string (that is, it contains <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to call the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder__ctor_\" data-linktype=\"relative-path\">StringBuilder</a> constructor with the specified string.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Constructors#4\">        string initialString = &quot;Initial string.&quot;;\n        StringBuilder stringBuilder = new StringBuilder(initialString);\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.StringBuilder.Constructors#4\">      String^ initialString = L&quot;Initial string.&quot;;\n      StringBuilder^ stringBuilder = gcnew StringBuilder( initialString );\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Constructors#4\">        Dim initialString As String = &quot;Initial string.&quot;\n        Dim stringBuilder As New StringBuilder(initialString)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder__ctor_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StringBuilder(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> class that starts with a specified capacity and can grow to a specified maximum.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public StringBuilder (int capacity, int maxCapacity);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>capacity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The suggested starting size of the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>maxCapacity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of characters the current string can contain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>maxCapacity</code> is less than one, <code>capacity</code> is less than zero, or <code>capacity</code> is greater than <code>maxCapacity</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>capacity</code> parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance. Its value is assigned to the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Capacity_\" data-linktype=\"relative-path\">Capacity</a> property. If the number of characters to be stored in the current instance exceeds this <code>capacity</code> value, the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object allocates additional memory to store them.  </p>\n<p> If <code>capacity</code> is zero, the implementation-specific default capacity is used.  </p>\n<p> The <code>maxCapacity</code> property defines the maximum number of characters that the current instance can hold. Its value is assigned to the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_MaxCapacity_\" data-linktype=\"relative-path\">MaxCapacity</a> property. If the number of characters to be stored in the current instance exceeds this <code>maxCapacity</code> value, the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object does not allocate additional memory, but instead throws an exception.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to call the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder__ctor_\" data-linktype=\"relative-path\">StringBuilder</a> constructor with a specified capacity and maximum capacity.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Constructors#5\">        int capacity = 255;\n        int maxCapacity = 1024;\n        StringBuilder stringBuilder = \n            new StringBuilder(capacity, maxCapacity);\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.StringBuilder.Constructors#5\">      int capacity = 255;\n      int maxCapacity = 1024;\n      StringBuilder^ stringBuilder = gcnew StringBuilder( capacity,maxCapacity );\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Constructors#5\">        Dim capacity As Integer = 255\n        Dim maxCapacity As Integer = 1024\n        Dim stringBuilder As New StringBuilder(capacity, maxCapacity)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder__ctor_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StringBuilder(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> class using the specified string and capacity.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public StringBuilder (string value, int capacity);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string used to initialize the value of the instance. If <code>value</code> is <code>null</code>, the new <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> will contain the empty string (that is, it contains <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>capacity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The suggested starting size of the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>capacity</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>capacity</code> parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance. Its value is assigned to the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Capacity_\" data-linktype=\"relative-path\">Capacity</a> property. If the number of characters to be stored in the current instance exceeds this <code>capacity</code> value, the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object allocates additional memory to store them.  </p>\n<p> If <code>capacity</code> is zero, the implementation-specific default capacity is used.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to call the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder__ctor_\" data-linktype=\"relative-path\">StringBuilder</a> constructor with an initial string and a specified capacity.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Constructors#7\">        string initialString = &quot;Initial string. &quot;;\n        int capacity = 255;\n        StringBuilder stringBuilder = \n            new StringBuilder(initialString, capacity);\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.StringBuilder.Constructors#7\">      String^ initialString = L&quot;Initial string. &quot;;\n      int capacity = 255;\n      StringBuilder^ stringBuilder = gcnew StringBuilder(\n         initialString,capacity );\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Constructors#7\">        Dim initialString As String = &quot;Initial string. &quot;\n        Dim capacity As Integer = 255\n        Dim stringBuilder As New StringBuilder(initialString, capacity)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder__ctor_System_String_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StringBuilder(String,Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> class from the specified substring and capacity.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public StringBuilder (string value, int startIndex, int length, int capacity);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string that contains the substring used to initialize the value of this instance. If <code>value</code> is <code>null</code>, the new <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> will contain the empty string (that is, it contains <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position within <code>value</code> where the substring begins.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters in the substring.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>capacity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The suggested starting size of the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>capacity</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> plus <code>length</code> is not a position within <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>capacity</code> parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance. Its value is assigned to the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Capacity_\" data-linktype=\"relative-path\">Capacity</a> property. If the number of characters to be stored in the current instance exceeds this <code>capacity</code> value, the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object allocates additional memory to store them.  </p>\n<p> If <code>capacity</code> is zero, the implementation-specific default capacity is used.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to call the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder__ctor_\" data-linktype=\"relative-path\">StringBuilder</a> constructor with the specified string.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Constructors#6\">        string initialString = &quot;Initial string for stringbuilder.&quot;;\n        int startIndex = 0;\n        int substringLength = 14;\n        int capacity = 255;\n        StringBuilder stringBuilder = new StringBuilder(initialString, \n            startIndex, substringLength, capacity);\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.StringBuilder.Constructors#6\">      String^ initialString = L&quot;Initial string for stringbuilder.&quot;;\n      int startIndex = 0;\n      int substringLength = 14;\n      int capacity = 255;\n      StringBuilder^ stringBuilder = gcnew StringBuilder(\n         initialString,startIndex,substringLength,capacity );\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Constructors#6\">        Dim initialString As String = &quot;Initial string for stringbuilder.&quot;\n        Dim startIndex As Integer = 0\n        Dim substringLength As Integer = 14\n        Dim capacity As Integer = 255\n        Dim stringBuilder As New StringBuilder(initialString, _\n            startIndex, substringLength, capacity)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Capacity\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Capacity_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Capacity</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the maximum number of characters that can be contained in the memory allocated by the current instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Capacity { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The maximum number of characters that can be contained in the memory allocated by the current instance. Its value can range from <span class=\"xref\">stem.Text.StringBuilder.Length*</span> to <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The value specified for a set operation is less than the current length of this instance.  </p>\n<p> -or-  </p>\n<p> The value specified for a set operation is greater than the maximum capacity.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Capacity does not affect the string value of the current instance. Capacity can be decreased as long as it is not less than <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Length_\" data-linktype=\"relative-path\">Length</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> dynamically allocates more space when required and increases Capacity accordingly. For performance reasons, a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> might allocate more memory than needed. The amount of memory allocated is implementation-specific.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the Capacity property.  </p>\n<pre><code class=\"lang-cpp\" name=\"stringbuilder.ensurecapacity#1\">using namespace System;\nusing namespace System::Text;\nint main()\n{\n   StringBuilder^ sb1 = gcnew StringBuilder( &quot;abc&quot; );\n   StringBuilder^ sb2 = gcnew StringBuilder( &quot;abc&quot;,16 );\n   Console::WriteLine();\n   Console::WriteLine( &quot;a1) sb1-&gt;Length = {0}, sb1-&gt;Capacity = {1}&quot;, sb1-&gt;Length, sb1-&gt;Capacity );\n   Console::WriteLine( &quot;a2) sb2-&gt;Length = {0}, sb2-&gt;Capacity = {1}&quot;, sb2-&gt;Length, sb2-&gt;Capacity );\n   Console::WriteLine( &quot;a3) sb1 = \\&quot;{0}\\&quot;, sb2 = \\&quot;{1}\\&quot;&quot;, sb1, sb2 );\n   Console::WriteLine( &quot;a4) sb1 equals sb2: {0}&quot;, sb1-&gt;Equals( sb2 ) );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Ensure sb1 has a capacity of at least 50 characters.&quot; );\n   sb1-&gt;EnsureCapacity( 50 );\n   Console::WriteLine();\n   Console::WriteLine( &quot;b1) sb1-&gt;Length = {0}, sb1-&gt;Capacity = {1}&quot;, sb1-&gt;Length, sb1-&gt;Capacity );\n   Console::WriteLine( &quot;b2) sb2-&gt;Length = {0}, sb2-&gt;Capacity = {1}&quot;, sb2-&gt;Length, sb2-&gt;Capacity );\n   Console::WriteLine( &quot;b3) sb1 = \\&quot;{0}\\&quot;, sb2 = \\&quot;{1}\\&quot;&quot;, sb1, sb2 );\n   Console::WriteLine( &quot;b4) sb1 equals sb2: {0}&quot;, sb1-&gt;Equals( sb2 ) );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Set the length of sb1 to zero.&quot; );\n   Console::WriteLine( &quot;Set the capacity of sb2 to 51 characters.&quot; );\n   sb1-&gt;Length = 0;\n   sb2-&gt;Capacity = 51;\n   Console::WriteLine();\n   Console::WriteLine( &quot;c1) sb1-&gt;Length = {0}, sb1-&gt;Capacity = {1}&quot;, sb1-&gt;Length, sb1-&gt;Capacity );\n   Console::WriteLine( &quot;c2) sb2-&gt;Length = {0}, sb2-&gt;Capacity = {1}&quot;, sb2-&gt;Length, sb2-&gt;Capacity );\n   Console::WriteLine( &quot;c3) sb1 = \\&quot;{0}\\&quot;, sb2 = \\&quot;{1}\\&quot;&quot;, sb1, sb2 );\n   Console::WriteLine( &quot;c4) sb1 equals sb2: {0}&quot;, sb1-&gt;Equals( sb2 ) );\n}\n\n/*\nThe example displays the following output:\n\na1) sb1-&gt;Length = 3, sb1-&gt;Capacity = 16\na2) sb2-&gt;Length = 3, sb2-&gt;Capacity = 16\na3) sb1 = &quot;abc&quot;, sb2 = &quot;abc&quot;\na4) sb1 equals sb2: True\n\nEnsure sb1 has a capacity of at least 50 characters.\n\nb1) sb1-&gt;Length = 3, sb1-&gt;Capacity = 50\nb2) sb2-&gt;Length = 3, sb2-&gt;Capacity = 16\nb3) sb1 = &quot;abc&quot;, sb2 = &quot;abc&quot;\nb4) sb1 equals sb2: False\n\nSet the length of sb1 to zero.\nSet the capacity of sb2 to 51 characters.\n\nc1) sb1-&gt;Length = 0, sb1-&gt;Capacity = 50\nc2) sb2-&gt;Length = 3, sb2-&gt;Capacity = 51\nc3) sb1 = &quot;&quot;, sb2 = &quot;abc&quot;\nc4) sb1 equals sb2: False\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"stringbuilder.ensurecapacity#1\">using System;\nusing System.Text;\n\nclass Sample \n{\n    public static void Main() \n    {\n    StringBuilder sb1 = new StringBuilder(&quot;abc&quot;);\n    StringBuilder sb2 = new StringBuilder(&quot;abc&quot;, 16);\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;a1) sb1.Length = {0}, sb1.Capacity = {1}&quot;, sb1.Length, sb1.Capacity);\n    Console.WriteLine(&quot;a2) sb2.Length = {0}, sb2.Capacity = {1}&quot;, sb2.Length, sb2.Capacity);\n    Console.WriteLine(&quot;a3) sb1.ToString() = \\&quot;{0}\\&quot;, sb2.ToString() = \\&quot;{1}\\&quot;&quot;, \n                           sb1.ToString(),       sb2.ToString());\n    Console.WriteLine(&quot;a4) sb1 equals sb2: {0}&quot;, sb1.Equals(sb2));\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;Ensure sb1 has a capacity of at least 50 characters.&quot;);\n    sb1.EnsureCapacity(50);\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;b1) sb1.Length = {0}, sb1.Capacity = {1}&quot;, sb1.Length, sb1.Capacity);\n    Console.WriteLine(&quot;b2) sb2.Length = {0}, sb2.Capacity = {1}&quot;, sb2.Length, sb2.Capacity);\n    Console.WriteLine(&quot;b3) sb1.ToString() = \\&quot;{0}\\&quot;, sb2.ToString() = \\&quot;{1}\\&quot;&quot;, \n                           sb1.ToString(),       sb2.ToString());\n    Console.WriteLine(&quot;b4) sb1 equals sb2: {0}&quot;, sb1.Equals(sb2));\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;Set the length of sb1 to zero.&quot;);\n    Console.WriteLine(&quot;Set the capacity of sb2 to 51 characters.&quot;);\n    sb1.Length = 0;\n    sb2.Capacity = 51;\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;c1) sb1.Length = {0}, sb1.Capacity = {1}&quot;, sb1.Length, sb1.Capacity);\n    Console.WriteLine(&quot;c2) sb2.Length = {0}, sb2.Capacity = {1}&quot;, sb2.Length, sb2.Capacity);\n    Console.WriteLine(&quot;c3) sb1.ToString() = \\&quot;{0}\\&quot;, sb2.ToString() = \\&quot;{1}\\&quot;&quot;, \n                           sb1.ToString(),       sb2.ToString());\n    Console.WriteLine(&quot;c4) sb1 equals sb2: {0}&quot;, sb1.Equals(sb2));\n    }\n}\n/*\nThe example displays the following output:\n\na1) sb1.Length = 3, sb1.Capacity = 16\na2) sb2.Length = 3, sb2.Capacity = 16\na3) sb1.ToString() = &quot;abc&quot;, sb2.ToString() = &quot;abc&quot;\na4) sb1 equals sb2: True\n\nEnsure sb1 has a capacity of at least 50 characters.\n\nb1) sb1.Length = 3, sb1.Capacity = 50\nb2) sb2.Length = 3, sb2.Capacity = 16\nb3) sb1.ToString() = &quot;abc&quot;, sb2.ToString() = &quot;abc&quot;\nb4) sb1 equals sb2: False\n\nSet the length of sb1 to zero.\nSet the capacity of sb2 to 51 characters.\n\nc1) sb1.Length = 0, sb1.Capacity = 50\nc2) sb2.Length = 3, sb2.Capacity = 51\nc3) sb1.ToString() = &quot;&quot;, sb2.ToString() = &quot;abc&quot;\nc4) sb1 equals sb2: False\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"stringbuilder.ensurecapacity#1\">Imports System.Text\n\nClass Sample\n   Public Shared Sub Main()\n      Dim sb1 As New StringBuilder(&quot;abc&quot;)\n      Dim sb2 As New StringBuilder(&quot;abc&quot;, 16)\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;a1) sb1.Length = {0}, sb1.Capacity = {1}&quot;, sb1.Length, sb1.Capacity)\n      Console.WriteLine(&quot;a2) sb2.Length = {0}, sb2.Capacity = {1}&quot;, sb2.Length, sb2.Capacity)\n      Console.WriteLine(&quot;a3) sb1.ToString() = &quot;&quot;{0}&quot;&quot;, sb2.ToString() = &quot;&quot;{1}&quot;&quot;&quot;, _\n                             sb1.ToString(),           sb2.ToString())\n      Console.WriteLine(&quot;a4) sb1 equals sb2: {0}&quot;, sb1.Equals(sb2))\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;Ensure sb1 has a capacity of at least 50 characters.&quot;)\n      sb1.EnsureCapacity(50)\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;b1) sb1.Length = {0}, sb1.Capacity = {1}&quot;, sb1.Length, sb1.Capacity)\n      Console.WriteLine(&quot;b2) sb2.Length = {0}, sb2.Capacity = {1}&quot;, sb2.Length, sb2.Capacity)\n      Console.WriteLine(&quot;b3) sb1.ToString() = &quot;&quot;{0}&quot;&quot;, sb2.ToString() = &quot;&quot;{1}&quot;&quot;&quot;, _\n                             sb1.ToString(),           sb2.ToString())\n      Console.WriteLine(&quot;b4) sb1 equals sb2: {0}&quot;, sb1.Equals(sb2))\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;Set the length of sb1 to zero.&quot;)\n      Console.WriteLine(&quot;Set the capacity of sb2 to 51 characters.&quot;)\n      sb1.Length = 0\n      sb2.Capacity = 51\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;c1) sb1.Length = {0}, sb1.Capacity = {1}&quot;, sb1.Length, sb1.Capacity)\n      Console.WriteLine(&quot;c2) sb2.Length = {0}, sb2.Capacity = {1}&quot;, sb2.Length, sb2.Capacity)\n      Console.WriteLine(&quot;c3) sb1.ToString() = &quot;&quot;{0}&quot;&quot;, sb2.ToString() = &quot;&quot;{1}&quot;&quot;&quot;, _\n                             sb1.ToString(),           sb2.ToString())\n      Console.WriteLine(&quot;c4) sb1 equals sb2: {0}&quot;, sb1.Equals(sb2))\n   End Sub \nEnd Class\n&#39;The example displays the following output:\n&#39;       a1) sb1.Length = 3, sb1.Capacity = 16\n&#39;       a2) sb2.Length = 3, sb2.Capacity = 16\n&#39;       a3) sb1.ToString() = &quot;abc&quot;, sb2.ToString() = &quot;abc&quot;\n&#39;       a4) sb1 equals sb2: True\n&#39;       \n&#39;       Ensure sb1 has a capacity of at least 50 characters.\n&#39;       \n&#39;       b1) sb1.Length = 3, sb1.Capacity = 50\n&#39;       b2) sb2.Length = 3, sb2.Capacity = 16\n&#39;       b3) sb1.ToString() = &quot;abc&quot;, sb2.ToString() = &quot;abc&quot;\n&#39;       b4) sb1 equals sb2: False\n&#39;       \n&#39;       Set the length of sb1 to zero.\n&#39;       Set the capacity of sb2 to 51 characters.\n&#39;       \n&#39;       c1) sb1.Length = 0, sb1.Capacity = 50\n&#39;       c2) sb2.Length = 3, sb2.Capacity = 51\n&#39;       c3) sb1.ToString() = &quot;&quot;, sb2.ToString() = &quot;abc&quot;\n&#39;       c4) sb1 equals sb2: False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Chars_System_Int32_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Chars_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Chars(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the character at the specified character position in this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public char this[int index] { get; set; }</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position of the character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>The Unicode character at position <code>index</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is outside the bounds of this instance while setting a character.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is outside the bounds of this instance while getting a character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>index</code> parameter is the position of a character within the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a>. The first character in the string is at index 0. The length of a string is the number of characters it contains. The last accessible character of a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> instance is at index <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Length_\" data-linktype=\"relative-path\">Length</a> - 1.  </p>\n<p> Chars is the default property of the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> class. In C#, it is an indexer. This means that individual characters can be retrieved from the Chars property as shown in the following example, which counts the number of alphabetic, white-space, and punctuation characters in a string.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Chars#1\">using System;\nusing System.Text;\n\npublic class Example\n{\n   public static void Main()\n   {\n      int nAlphabeticChars = 0;\n      int nWhitespace = 0;\n      int nPunctuation = 0;  \n      StringBuilder sb = new StringBuilder(&quot;This is a simple sentence.&quot;);\n      \n      for (int ctr = 0; ctr &lt; sb.Length; ctr++) {\n         char ch = sb[ctr];\n         if (Char.IsLetter(ch)) { nAlphabeticChars++;  continue; }\n         if (Char.IsWhiteSpace(ch)) { nWhitespace++;  continue; }\n         if (Char.IsPunctuation(ch)) nPunctuation++;  \n      }    \n\n      Console.WriteLine(&quot;The sentence &#39;{0}&#39; has:&quot;, sb);\n      Console.WriteLine(&quot;   Alphabetic characters: {0}&quot;, nAlphabeticChars);\n      Console.WriteLine(&quot;   Whitespace characters: {0}&quot;, nWhitespace);\n      Console.WriteLine(&quot;   Punctuation characters: {0}&quot;, nPunctuation);\n   }\n}\n// The example displays the following output:\n//       The sentence &#39;This is a simple sentence.&#39; has:\n//          Alphabetic characters: 21\n//          Whitespace characters: 4\n//          Punctuation characters: 1\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Chars#1\">Imports System.Text\n\nModule Example\n   Public Sub Main()\n      Dim nAlphabeticChars As Integer = 0\n      Dim nWhitespace As Integer = 0\n      Dim nPunctuation As Integer = 0  \n      Dim sb As New StringBuilder(&quot;This is a simple sentence.&quot;)\n      \n      For ctr As Integer = 0 To sb.Length - 1\n         Dim ch As Char = sb(ctr)\n         If Char.IsLetter(ch) Then nAlphabeticChars += 1 : Continue For\n         If Char.IsWhiteSpace(ch) Then nWhitespace += 1 : Continue For\n         If Char.IsPunctuation(ch) Then nPunctuation += 1\n      Next    \n\n      Console.WriteLine(&quot;The sentence &#39;{0}&#39; has:&quot;, sb)\n      Console.WriteLine(&quot;   Alphabetic characters: {0}&quot;, nAlphabeticChars)\n      Console.WriteLine(&quot;   Whitespace characters: {0}&quot;, nWhitespace)\n      Console.WriteLine(&quot;   Punctuation characters: {0}&quot;, nPunctuation)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       The sentence &#39;This is a simple sentence.&#39; has:\n&#39;          Alphabetic characters: 21\n&#39;          Whitespace characters: 4\n&#39;          Punctuation characters: 1\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Length\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Length_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Length</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the length of the current <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Length { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The length of this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The value specified for a set operation is less than zero or greater than <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The length of a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object is defined by its number of <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects.  </p>\n<p> Like the<a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> property, the Length property indicates the length of the current string object. Unlike the <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> property, which is read-only, the Length property allows you to modify the length of the string stored to the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object.  </p>\n<p> If the specified length is less than the current length, the current <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object is truncated to the specified length. If the specified length is greater than the current length, the end of the string value of the current <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object is padded with the Unicode NULL character (U+0000).  </p>\n<p> If the specified length is greater than the current capacity, <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Capacity_\" data-linktype=\"relative-path\">Capacity</a> increases so that it is greater than or equal to the specified length.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the Length property.  </p>\n<pre><code class=\"lang-cpp\" name=\"stringbuilder.ensurecapacity#1\">using namespace System;\nusing namespace System::Text;\nint main()\n{\n   StringBuilder^ sb1 = gcnew StringBuilder( &quot;abc&quot; );\n   StringBuilder^ sb2 = gcnew StringBuilder( &quot;abc&quot;,16 );\n   Console::WriteLine();\n   Console::WriteLine( &quot;a1) sb1-&gt;Length = {0}, sb1-&gt;Capacity = {1}&quot;, sb1-&gt;Length, sb1-&gt;Capacity );\n   Console::WriteLine( &quot;a2) sb2-&gt;Length = {0}, sb2-&gt;Capacity = {1}&quot;, sb2-&gt;Length, sb2-&gt;Capacity );\n   Console::WriteLine( &quot;a3) sb1 = \\&quot;{0}\\&quot;, sb2 = \\&quot;{1}\\&quot;&quot;, sb1, sb2 );\n   Console::WriteLine( &quot;a4) sb1 equals sb2: {0}&quot;, sb1-&gt;Equals( sb2 ) );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Ensure sb1 has a capacity of at least 50 characters.&quot; );\n   sb1-&gt;EnsureCapacity( 50 );\n   Console::WriteLine();\n   Console::WriteLine( &quot;b1) sb1-&gt;Length = {0}, sb1-&gt;Capacity = {1}&quot;, sb1-&gt;Length, sb1-&gt;Capacity );\n   Console::WriteLine( &quot;b2) sb2-&gt;Length = {0}, sb2-&gt;Capacity = {1}&quot;, sb2-&gt;Length, sb2-&gt;Capacity );\n   Console::WriteLine( &quot;b3) sb1 = \\&quot;{0}\\&quot;, sb2 = \\&quot;{1}\\&quot;&quot;, sb1, sb2 );\n   Console::WriteLine( &quot;b4) sb1 equals sb2: {0}&quot;, sb1-&gt;Equals( sb2 ) );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Set the length of sb1 to zero.&quot; );\n   Console::WriteLine( &quot;Set the capacity of sb2 to 51 characters.&quot; );\n   sb1-&gt;Length = 0;\n   sb2-&gt;Capacity = 51;\n   Console::WriteLine();\n   Console::WriteLine( &quot;c1) sb1-&gt;Length = {0}, sb1-&gt;Capacity = {1}&quot;, sb1-&gt;Length, sb1-&gt;Capacity );\n   Console::WriteLine( &quot;c2) sb2-&gt;Length = {0}, sb2-&gt;Capacity = {1}&quot;, sb2-&gt;Length, sb2-&gt;Capacity );\n   Console::WriteLine( &quot;c3) sb1 = \\&quot;{0}\\&quot;, sb2 = \\&quot;{1}\\&quot;&quot;, sb1, sb2 );\n   Console::WriteLine( &quot;c4) sb1 equals sb2: {0}&quot;, sb1-&gt;Equals( sb2 ) );\n}\n\n/*\nThe example displays the following output:\n\na1) sb1-&gt;Length = 3, sb1-&gt;Capacity = 16\na2) sb2-&gt;Length = 3, sb2-&gt;Capacity = 16\na3) sb1 = &quot;abc&quot;, sb2 = &quot;abc&quot;\na4) sb1 equals sb2: True\n\nEnsure sb1 has a capacity of at least 50 characters.\n\nb1) sb1-&gt;Length = 3, sb1-&gt;Capacity = 50\nb2) sb2-&gt;Length = 3, sb2-&gt;Capacity = 16\nb3) sb1 = &quot;abc&quot;, sb2 = &quot;abc&quot;\nb4) sb1 equals sb2: False\n\nSet the length of sb1 to zero.\nSet the capacity of sb2 to 51 characters.\n\nc1) sb1-&gt;Length = 0, sb1-&gt;Capacity = 50\nc2) sb2-&gt;Length = 3, sb2-&gt;Capacity = 51\nc3) sb1 = &quot;&quot;, sb2 = &quot;abc&quot;\nc4) sb1 equals sb2: False\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"stringbuilder.ensurecapacity#1\">using System;\nusing System.Text;\n\nclass Sample \n{\n    public static void Main() \n    {\n    StringBuilder sb1 = new StringBuilder(&quot;abc&quot;);\n    StringBuilder sb2 = new StringBuilder(&quot;abc&quot;, 16);\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;a1) sb1.Length = {0}, sb1.Capacity = {1}&quot;, sb1.Length, sb1.Capacity);\n    Console.WriteLine(&quot;a2) sb2.Length = {0}, sb2.Capacity = {1}&quot;, sb2.Length, sb2.Capacity);\n    Console.WriteLine(&quot;a3) sb1.ToString() = \\&quot;{0}\\&quot;, sb2.ToString() = \\&quot;{1}\\&quot;&quot;, \n                           sb1.ToString(),       sb2.ToString());\n    Console.WriteLine(&quot;a4) sb1 equals sb2: {0}&quot;, sb1.Equals(sb2));\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;Ensure sb1 has a capacity of at least 50 characters.&quot;);\n    sb1.EnsureCapacity(50);\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;b1) sb1.Length = {0}, sb1.Capacity = {1}&quot;, sb1.Length, sb1.Capacity);\n    Console.WriteLine(&quot;b2) sb2.Length = {0}, sb2.Capacity = {1}&quot;, sb2.Length, sb2.Capacity);\n    Console.WriteLine(&quot;b3) sb1.ToString() = \\&quot;{0}\\&quot;, sb2.ToString() = \\&quot;{1}\\&quot;&quot;, \n                           sb1.ToString(),       sb2.ToString());\n    Console.WriteLine(&quot;b4) sb1 equals sb2: {0}&quot;, sb1.Equals(sb2));\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;Set the length of sb1 to zero.&quot;);\n    Console.WriteLine(&quot;Set the capacity of sb2 to 51 characters.&quot;);\n    sb1.Length = 0;\n    sb2.Capacity = 51;\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;c1) sb1.Length = {0}, sb1.Capacity = {1}&quot;, sb1.Length, sb1.Capacity);\n    Console.WriteLine(&quot;c2) sb2.Length = {0}, sb2.Capacity = {1}&quot;, sb2.Length, sb2.Capacity);\n    Console.WriteLine(&quot;c3) sb1.ToString() = \\&quot;{0}\\&quot;, sb2.ToString() = \\&quot;{1}\\&quot;&quot;, \n                           sb1.ToString(),       sb2.ToString());\n    Console.WriteLine(&quot;c4) sb1 equals sb2: {0}&quot;, sb1.Equals(sb2));\n    }\n}\n/*\nThe example displays the following output:\n\na1) sb1.Length = 3, sb1.Capacity = 16\na2) sb2.Length = 3, sb2.Capacity = 16\na3) sb1.ToString() = &quot;abc&quot;, sb2.ToString() = &quot;abc&quot;\na4) sb1 equals sb2: True\n\nEnsure sb1 has a capacity of at least 50 characters.\n\nb1) sb1.Length = 3, sb1.Capacity = 50\nb2) sb2.Length = 3, sb2.Capacity = 16\nb3) sb1.ToString() = &quot;abc&quot;, sb2.ToString() = &quot;abc&quot;\nb4) sb1 equals sb2: False\n\nSet the length of sb1 to zero.\nSet the capacity of sb2 to 51 characters.\n\nc1) sb1.Length = 0, sb1.Capacity = 50\nc2) sb2.Length = 3, sb2.Capacity = 51\nc3) sb1.ToString() = &quot;&quot;, sb2.ToString() = &quot;abc&quot;\nc4) sb1 equals sb2: False\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"stringbuilder.ensurecapacity#1\">Imports System.Text\n\nClass Sample\n   Public Shared Sub Main()\n      Dim sb1 As New StringBuilder(&quot;abc&quot;)\n      Dim sb2 As New StringBuilder(&quot;abc&quot;, 16)\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;a1) sb1.Length = {0}, sb1.Capacity = {1}&quot;, sb1.Length, sb1.Capacity)\n      Console.WriteLine(&quot;a2) sb2.Length = {0}, sb2.Capacity = {1}&quot;, sb2.Length, sb2.Capacity)\n      Console.WriteLine(&quot;a3) sb1.ToString() = &quot;&quot;{0}&quot;&quot;, sb2.ToString() = &quot;&quot;{1}&quot;&quot;&quot;, _\n                             sb1.ToString(),           sb2.ToString())\n      Console.WriteLine(&quot;a4) sb1 equals sb2: {0}&quot;, sb1.Equals(sb2))\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;Ensure sb1 has a capacity of at least 50 characters.&quot;)\n      sb1.EnsureCapacity(50)\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;b1) sb1.Length = {0}, sb1.Capacity = {1}&quot;, sb1.Length, sb1.Capacity)\n      Console.WriteLine(&quot;b2) sb2.Length = {0}, sb2.Capacity = {1}&quot;, sb2.Length, sb2.Capacity)\n      Console.WriteLine(&quot;b3) sb1.ToString() = &quot;&quot;{0}&quot;&quot;, sb2.ToString() = &quot;&quot;{1}&quot;&quot;&quot;, _\n                             sb1.ToString(),           sb2.ToString())\n      Console.WriteLine(&quot;b4) sb1 equals sb2: {0}&quot;, sb1.Equals(sb2))\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;Set the length of sb1 to zero.&quot;)\n      Console.WriteLine(&quot;Set the capacity of sb2 to 51 characters.&quot;)\n      sb1.Length = 0\n      sb2.Capacity = 51\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;c1) sb1.Length = {0}, sb1.Capacity = {1}&quot;, sb1.Length, sb1.Capacity)\n      Console.WriteLine(&quot;c2) sb2.Length = {0}, sb2.Capacity = {1}&quot;, sb2.Length, sb2.Capacity)\n      Console.WriteLine(&quot;c3) sb1.ToString() = &quot;&quot;{0}&quot;&quot;, sb2.ToString() = &quot;&quot;{1}&quot;&quot;&quot;, _\n                             sb1.ToString(),           sb2.ToString())\n      Console.WriteLine(&quot;c4) sb1 equals sb2: {0}&quot;, sb1.Equals(sb2))\n   End Sub \nEnd Class\n&#39;The example displays the following output:\n&#39;       a1) sb1.Length = 3, sb1.Capacity = 16\n&#39;       a2) sb2.Length = 3, sb2.Capacity = 16\n&#39;       a3) sb1.ToString() = &quot;abc&quot;, sb2.ToString() = &quot;abc&quot;\n&#39;       a4) sb1 equals sb2: True\n&#39;       \n&#39;       Ensure sb1 has a capacity of at least 50 characters.\n&#39;       \n&#39;       b1) sb1.Length = 3, sb1.Capacity = 50\n&#39;       b2) sb2.Length = 3, sb2.Capacity = 16\n&#39;       b3) sb1.ToString() = &quot;abc&quot;, sb2.ToString() = &quot;abc&quot;\n&#39;       b4) sb1 equals sb2: False\n&#39;       \n&#39;       Set the length of sb1 to zero.\n&#39;       Set the capacity of sb2 to 51 characters.\n&#39;       \n&#39;       c1) sb1.Length = 0, sb1.Capacity = 50\n&#39;       c2) sb2.Length = 3, sb2.Capacity = 51\n&#39;       c3) sb1.ToString() = &quot;&quot;, sb2.ToString() = &quot;abc&quot;\n&#39;       c4) sb1 equals sb2: False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_MaxCapacity\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_MaxCapacity_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MaxCapacity</div>        \r\n          </div>\r\n    \r\n            <p>Gets the maximum capacity of this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int MaxCapacity { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The maximum number of characters this instance can hold.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The maximum capacity for this implementation is <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">System.Int32</a>. However, this value is implementation-specific and might be different in other or later implementations. You can explicitly set the maximum capacity of a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object by calling the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder__ctor_System_Int32_System_Int32_\" data-linktype=\"relative-path\">StringBuilder(Int32,Int32)</a> constructor.  </p>\n<p> In the<!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v40-short-md.md&quot; -->.NET Framework 4<!--END INCLUDE --> and the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v45-md.md&quot; -->.NET Framework 4.5<!--END INCLUDE -->, when you instantiate the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object by calling the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder__ctor_System_Int32_System_Int32_\" data-linktype=\"relative-path\">StringBuilder(Int32,Int32)</a> constructor, both the length and the capacity of the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> instance can grow beyond the value of its MaxCapacity property. This can occur particularly when you call the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Append_\" data-linktype=\"relative-path\">Append</a> and <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_AppendFormat_\" data-linktype=\"relative-path\">AppendFormat</a> methods to append small strings.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Append_System_Boolean_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Append_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Append(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the string representation of a specified Boolean value to this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Append (bool value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Boolean value to append.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the append operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object, as the following example illustrates.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Append#2\">      bool flag = false;\n      System.Text.StringBuilder sb = new System.Text.StringBuilder();\n      sb.Append(&quot;The value of the flag is &quot;).Append(flag).Append(&quot;.&quot;);\n      Console.WriteLine(sb.ToString());\n      // The example displays the following output:\n      //       The value of the flag is False.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Append#2\">      Dim flag As Boolean = false\n      Dim sb As New System.Text.StringBuilder\n      sb.Append(&quot;The value of the flag is &quot;).Append(flag).Append(&quot;.&quot;)\n      Console.WriteLine(sb.ToString())\n      &#39; The example displays the following output:\n      &#39;       The value of the flag is False.\n</code></pre><p> The Append method calls the <a class=\"xref\" href=\"system.boolean#System_Boolean_ToString\" data-linktype=\"relative-path\">System.Boolean.ToString()</a> method to get the string representation of <code>value</code>. The capacity of this instance is adjusted as needed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Append_System_Byte_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Append_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Append(Byte)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the string representation of a specified 8-bit unsigned integer to this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Append (byte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to append.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the append operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object, as the following example illustrates.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Append#3\">      Byte[] bytes = { 16, 132, 27, 253 };\n      System.Text.StringBuilder sb = new System.Text.StringBuilder();\n      foreach (var value in bytes)\n         sb.Append(value).Append(&quot; &quot;);         \n\n      Console.WriteLine(&quot;The byte array: {0}&quot;, sb.ToString());\n      // The example displays the following output:\n      //         The byte array: 16 132 27 253      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Append#3\">      Dim bytes() As Byte = { 16, 132, 27, 253 }\n      Dim sb As New System.Text.StringBuilder()\n      For Each value In bytes\n         sb.Append(value).Append(&quot; &quot;)         \n      Next\n      Console.WriteLine(&quot;The byte array: {0}&quot;, sb.ToString())\n      &#39; The example displays the following output:\n      &#39;         The byte array: 16 132 27 253      \n</code></pre><p> The Append method calls the <a class=\"xref\" href=\"system.byte#System_Byte_ToString_System_IFormatProvider_\" data-linktype=\"relative-path\">ToString(IFormatProvider)</a> method to get the string representation of <code>value</code> for the current culture. To control the formatting of <code>value</code>, call the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_AppendFormat_\" data-linktype=\"relative-path\">AppendFormat</a> method.  </p>\n<p> The capacity of this instance is adjusted as needed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Append_System_Char_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Append_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Append(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the string representation of a specified <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object to this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Append (char value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The UTF-16-encoded code unit to append.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the append operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object, as the following example illustrates.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Append#4\">      string str = &quot;Characters in a string.&quot;;\n      System.Text.StringBuilder sb = new System.Text.StringBuilder();\n      foreach (var ch in str)\n         sb.Append(&quot; &#39;&quot;).Append(ch).Append(&quot;&#39; &quot;);\n\n      Console.WriteLine(&quot;Characters in the string:&quot;);\n      Console.WriteLine(&quot;  {0}&quot;, sb);\n      // The example displays the following output:\n      //    Characters in the string:\n      //       &#39;C&#39;  &#39;h&#39;  &#39;a&#39;  &#39;r&#39;  &#39;a&#39;  &#39;c&#39;  &#39;t&#39;  &#39;e&#39;  &#39;r&#39;  &#39;s&#39;  &#39; &#39;  &#39;i&#39;  &#39;n&#39;  &#39; &#39;  &#39;a&#39;  &#39; &#39;  &#39;s&#39;  &#39;t&#39; &#39;r&#39;  &#39;i&#39;  &#39;n&#39;  &#39;g&#39;  &#39;.&#39;      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Append#4\">      Dim str As String = &quot;Characters in a string.&quot;\n      Dim sb As New System.Text.StringBuilder()\n      For Each ch In str\n         sb.Append(&quot; &#39;&quot;).Append(ch).Append(&quot;&#39; &quot;)\n      Next\n      Console.WriteLine(&quot;Characters in the string:&quot;)\n      Console.WriteLine(&quot;  {0}&quot;, sb)\n      &#39; The example displays the following output:\n      &#39;    Characters in the string:\n      &#39;       &#39;C&#39;  &#39;h&#39;  &#39;a&#39;  &#39;r&#39;  &#39;a&#39;  &#39;c&#39;  &#39;t&#39;  &#39;e&#39;  &#39;r&#39;  &#39;s&#39;  &#39; &#39;  &#39;i&#39;  &#39;n&#39;  &#39; &#39;  &#39;a&#39;  &#39; &#39;  &#39;s&#39;  &#39;t&#39; &#39;r&#39;  &#39;i&#39;  &#39;n&#39;  &#39;g&#39;  &#39;.&#39;      \n</code></pre><p> The capacity of this instance is adjusted as needed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Append_System_Char___\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Append_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Append(Char[])</div>        \r\n          </div>\r\n    \r\n            <p>Appends the string representation of the Unicode characters in a specified array to this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Append (char[] value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The array of characters to append.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the append operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method appends all the characters in the specified array to the current instance in the same order as they appear in <code>value</code>. If <code>value</code> is <code>null</code>, no changes are made.  </p>\n<p> The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object, as the following example illustrates.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Append#6\">      char[] chars = { &#39;a&#39;, &#39;e&#39;, &#39;i&#39;, &#39;o&#39;, &#39;u&#39; };\n      System.Text.StringBuilder sb = new System.Text.StringBuilder();\n      sb.Append(&quot;The characters in the array: &quot;).Append(chars);\n      Console.WriteLine(sb);\n      // The example displays the following output:\n      //      The characters in the array: aeiou\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Append#6\">      Dim chars() As Char = { &quot;a&quot;c, &quot;e&quot;c, &quot;i&quot;c, &quot;o&quot;c, &quot;u&quot;c }\n      Dim sb As New System.Text.StringBuilder()\n      sb.Append(&quot;The characters in the array: &quot;).Append(chars)\n      Console.WriteLine(sb)\n      &#39; The example displays the following output:\n      &#39;      The characters in the array: aeiou\n</code></pre><p> The capacity of this instance is adjusted as needed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Append_System_Decimal_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Append_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Append(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the string representation of a specified decimal number to this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Append (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to append.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the append operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object, as the following example illustrates.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Append#8\">      decimal value = 1346.19m;\n      System.Text.StringBuilder sb = new System.Text.StringBuilder();\n      sb.Append(&#39;*&#39;, 5).Append(value).Append(&#39;*&#39;, 5);\n      Console.WriteLine(sb);\n      // The example displays the following output:\n      //       *****1346.19*****\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Append#8\">      Dim value As Decimal = 1346.19d\n      Dim sb As New System.Text.StringBuilder()\n      sb.Append(&quot;*&quot;c, 5).Append(value).Append(&quot;*&quot;c, 5)\n      Console.WriteLine(sb)\n      &#39; The example displays the following output:\n      &#39;       *****1346.19*****\n</code></pre><p> The Append method calls the <a class=\"xref\" href=\"system.decimal#System_Decimal_ToString_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Decimal.ToString(IFormatProvider)</a> method to get the string representation of <code>value</code> for the current culture. To control the formatting of <code>value</code>, call the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_AppendFormat_\" data-linktype=\"relative-path\">AppendFormat</a> method.  </p>\n<p> The capacity of this instance is adjusted as needed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Append_System_Double_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Append_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Append(Double)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the string representation of a specified double-precision floating-point number to this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Append (double value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to append.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the append operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object, as the following example illustrates.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Append#9\">      double value = 1034769.47;\n      System.Text.StringBuilder sb = new System.Text.StringBuilder();\n      sb.Append(&#39;*&#39;, 5).Append(value).Append(&#39;*&#39;, 5);\n      Console.WriteLine(sb);\n      // The example displays the following output:\n      //       *****1034769.47*****\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Append#9\">      Dim value As Double = 1034769.47\n      Dim sb As New System.Text.StringBuilder()\n      sb.Append(&quot;*&quot;c, 5).Append(value).Append(&quot;*&quot;c, 5)\n      Console.WriteLine(sb)\n      &#39; The example displays the following output:\n      &#39;       *****1034769.47*****\n</code></pre><p> The Append method calls the <a class=\"xref\" href=\"system.double#System_Double_ToString_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Double.ToString(IFormatProvider)</a> method to get the string representation of <code>value</code> for the current culture. To control the formatting of <code>value</code>, call the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_AppendFormat_\" data-linktype=\"relative-path\">AppendFormat</a> method.  </p>\n<p> The capacity of this instance is adjusted as needed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Append_System_Int16_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Append_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Append(Int16)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the string representation of a specified 16-bit signed integer to this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Append (short value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to append.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the append operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object, as the following example illustrates.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Append#10\">      Dim sb As New System.Text.StringBuilder(&quot;The range of a 16-bit integer: &quot;)\n      sb.Append(Int16.MinValue).Append(&quot; to &quot;).Append(Int16.MaxValue)\n      Console.WriteLine(sb)\n      &#39; The example displays the following output:\n      &#39;       The range of a 16-bit integer: -32768 to 32767\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Append#10\">      System.Text.StringBuilder sb = new \n             System.Text.StringBuilder(&quot;The range of a 16-bit integer: &quot;);\n      sb.Append(Int16.MinValue).Append(&quot; to &quot;).Append(Int16.MaxValue);\n      Console.WriteLine(sb);\n      // The example displays the following output:\n      //       The range of a 16-bit integer: -32768 to 32767\n</code></pre><p> The Append method calls the <a class=\"xref\" href=\"system.int16#System_Int16_ToString_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Int16.ToString(IFormatProvider)</a> method to get the string representation of <code>value</code> for the current culture. To control the formatting of <code>value</code>, call the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_AppendFormat_\" data-linktype=\"relative-path\">AppendFormat</a> method.  </p>\n<p> The capacity of this instance is adjusted as needed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Append_System_Int32_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Append_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Append(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the string representation of a specified 32-bit signed integer to this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Append (int value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to append.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the append operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object, as the following example illustrates.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Append#11\">      Dim sb As New System.Text.StringBuilder(&quot;The range of a 32-bit integer: &quot;)\n      sb.Append(Int32.MinValue).Append(&quot; to &quot;).Append(Int32.MaxValue)\n      Console.WriteLine(sb)\n      &#39; The example displays the following output:\n      &#39;       The range of a 32-bit integer: -2147483648 to 2147483647\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Append#11\">      System.Text.StringBuilder sb = new \n             System.Text.StringBuilder(&quot;The range of a 32-bit integer: &quot;);\n      sb.Append(Int32.MinValue).Append(&quot; to &quot;).Append(Int32.MaxValue);\n      Console.WriteLine(sb);\n      // The example displays the following output:\n      //       The range of a 32-bit integer: -2147483648 to 2147483647\n</code></pre><p> The Append method calls the <a class=\"xref\" href=\"system.int32#System_Int32_ToString_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Int32.ToString(IFormatProvider)</a> method to get the string representation of <code>value</code> for the current culture. To control the formatting of <code>value</code>, call the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_AppendFormat_\" data-linktype=\"relative-path\">AppendFormat</a> method.  </p>\n<p> The capacity of this instance is adjusted as needed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Append_System_Int64_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Append_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Append(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the string representation of a specified 64-bit signed integer to this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Append (long value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to append.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the append operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object, as the following example illustrates.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Append#12\">      Dim sb As New System.Text.StringBuilder(&quot;The range of a 64-bit integer: &quot;)\n      sb.Append(Int64.MinValue).Append(&quot; to &quot;).Append(Int64.MaxValue)\n      Console.WriteLine(sb)\n      &#39; The example displays the following output:\n      &#39;       The range of a 64-bit integer:  -9223372036854775808 to 9223372036854775807\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Append#12\">      System.Text.StringBuilder sb = new \n                  System.Text.StringBuilder(&quot;The range of a 64-bit integer: &quot;);\n      sb.Append(Int64.MinValue).Append(&quot; to &quot;).Append(Int64.MaxValue);\n      Console.WriteLine(sb);\n      // The example displays the following output:\n      //       The range of a 64-bit integer:  -9223372036854775808 to 9223372036854775807\n</code></pre><p> The Append method calls the <a class=\"xref\" href=\"system.int64#System_Int64_ToString_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Int64.ToString(IFormatProvider)</a> to get the string representation of <code>value</code> for the current culture. To control the formatting of <code>value</code>, call the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_AppendFormat_\" data-linktype=\"relative-path\">AppendFormat</a> method.  </p>\n<p> The capacity of this instance is adjusted as needed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Append_System_Object_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Append_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Append(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the string representation of a specified object to this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Append (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to append.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the append operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object, as the following example illustrates. It defines a <code>Dog</code> class, creates a <code>Dog</code> object, and makes three calls to the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Append_\" data-linktype=\"relative-path\">Append</a> method to create a string that contains the dog&#39;s name and breed.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.Stringbuilder.Append#18\">using System;\n\npublic class Dog\n{\n   private string dogBreed;\n   private string dogName;\n   \n   public Dog(string name, string breed)\n   {\n      this.dogName = name;\n      this.dogBreed = breed;\n   }\n   \n   public string Breed {\n      get { return this.dogBreed; }\n   }\n   \n   public string Name {\n      get { return this.dogName; }\n   }\n   \n   public override string ToString()\n   {\n      return this.dogName;\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      Dog dog1 = new Dog(&quot;Yiska&quot;, &quot;Alaskan Malamute&quot;);\n      System.Text.StringBuilder sb = new System.Text.StringBuilder();     \n      sb.Append(dog1).Append(&quot;, Breed: &quot;).Append(dog1.Breed);  \n      Console.WriteLine(sb);\n   }\n}\n// The example displays the following output:\n//        Yiska, Breed: Alaskan Malamute\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Stringbuilder.Append#18\">Public Class Dog\n   Private dogBreed As String\n   Private dogName As String\n   \n   Public Sub New(name As String, breed As String)\n      Me.dogName = name\n      Me.dogBreed = breed\n   End Sub\n   \n   Public ReadOnly Property Breed As String\n      Get\n         Return Me.dogBreed\n      End Get\n   End Property\n   \n   Public ReadOnly Property Name As String\n      Get\n         Return Me.dogName\n      End Get\n   End Property\n   \n   Public Overrides Function ToString() As String\n      Return Me.dogName\n   End Function\nEnd Class\n   \nModule Example\n   Public Sub Main()\n      Dim dog1 As New Dog(&quot;Yiska&quot;, &quot;Alaskan Malamute&quot;)\n      Dim sb As New System.Text.StringBuilder()     \n      sb.Append(dog1).Append(&quot;, Breed: &quot;).Append(dog1.Breed)  \n      Console.WriteLine(sb)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Yiska, Breed: Alaskan Malamute\n</code></pre><p> The Append method calls the <a class=\"xref\" href=\"system.object#System_Object_ToString_\" data-linktype=\"relative-path\">ToString</a> method to get the string representation of <code>value</code>. If <code>value</code> is <code>null</code>, no changes are made to the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object.  </p>\n<p> The capacity of this instance is adjusted as needed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Append_System_SByte_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Append_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Append(SByte)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the string representation of a specified 8-bit signed integer to this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Append (sbyte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to append.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the append operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object, as the following example illustrates.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Append#13\">      Dim sb As New System.Text.StringBuilder(&quot;The range of an 8-bit signed integer: &quot;)\n      sb.Append(SByte.MinValue).Append(&quot; to &quot;).Append(SByte.MaxValue)\n      Console.WriteLine(sb)\n      &#39; The example displays the following output:\n      &#39;       The range of an 8-bit unsigned integer: -128 to 127 \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Append#13\">      System.Text.StringBuilder sb = new \n                  System.Text.StringBuilder(&quot;The range of an 8-bit signed integer: &quot;);\n      sb.Append(SByte.MinValue).Append(&quot; to &quot;).Append(SByte.MaxValue);\n      Console.WriteLine(sb);\n      // The example displays the following output:\n      //       The range of an 8-bit unsigned integer: -128 to 127 \n</code></pre><p> The Append method calls the <a class=\"xref\" href=\"system.sbyte#System_SByte_ToString_System_IFormatProvider_\" data-linktype=\"relative-path\">System.SByte.ToString(IFormatProvider)</a> method  to get the string representation of <code>value</code> for the current culture. To control the formatting of <code>value</code>, call the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_AppendFormat_\" data-linktype=\"relative-path\">AppendFormat</a> method.  </p>\n<p> The capacity of this instance is adjusted as needed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Append_System_Single_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Append_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Append(Single)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the string representation of a specified single-precision floating-point number to this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Append (float value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to append.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the append operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object, as the following example illustrates.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Append#14\">      Dim value As Single = 1034769.47\n      Dim sb As New System.Text.StringBuilder()\n      sb.Append(&quot;*&quot;c, 5).Append(value).Append(&quot;*&quot;c, 5)\n      Console.WriteLine(sb)\n      &#39; The example displays the following output:\n      &#39;       *****1034769.47*****\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Append#14\">      float value = 1034769.47f;\n      System.Text.StringBuilder sb = new System.Text.StringBuilder();\n      sb.Append(&#39;*&#39;, 5).Append(value).Append(&#39;*&#39;, 5);\n      Console.WriteLine(sb);\n      // The example displays the following output:\n      //       *****1034769.47*****\n</code></pre><p> The Append method calls the <a class=\"xref\" href=\"system.single#System_Single_ToString_\" data-linktype=\"relative-path\">ToString</a> method to get the string representation of <code>value</code> for the current culture. To control the formatting of <code>value</code>, call the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_AppendFormat_\" data-linktype=\"relative-path\">AppendFormat</a> method.  </p>\n<p> The capacity of this instance is adjusted as needed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Append_System_String_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Append_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Append(String)</div>        \r\n          </div>\r\n    \r\n            <p>Appends a copy of the specified string to this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Append (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to append.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the append operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object, as the following example illustrates.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Append#2\">      bool flag = false;\n      System.Text.StringBuilder sb = new System.Text.StringBuilder();\n      sb.Append(&quot;The value of the flag is &quot;).Append(flag).Append(&quot;.&quot;);\n      Console.WriteLine(sb.ToString());\n      // The example displays the following output:\n      //       The value of the flag is False.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Append#2\">      Dim flag As Boolean = false\n      Dim sb As New System.Text.StringBuilder\n      sb.Append(&quot;The value of the flag is &quot;).Append(flag).Append(&quot;.&quot;)\n      Console.WriteLine(sb.ToString())\n      &#39; The example displays the following output:\n      &#39;       The value of the flag is False.\n</code></pre><p> If <code>value</code> is <code>null</code>, no changes are made.  </p>\n<p> The capacity of this instance is adjusted as needed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Append_System_UInt16_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Append_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Append(UInt16)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the string representation of a specified 16-bit unsigned integer to this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Append (ushort value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to append.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the append operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object, as the following example illustrates.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Append#15\">      Dim sb As New System.Text.StringBuilder(&quot;The range of a 16-bit unsigned integer: &quot;)\n      sb.Append(UInt16.MinValue).Append(&quot; to &quot;).Append(UInt16.MaxValue)\n      Console.WriteLine(sb)\n      &#39; The example displays the following output:\n      &#39;       The range of a 16-bit unsigned integer: 0 to 65535\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Append#15\">      System.Text.StringBuilder sb = new \n                  System.Text.StringBuilder(&quot;The range of a 16-bit unsigned integer: &quot;);\n      sb.Append(UInt16.MinValue).Append(&quot; to &quot;).Append(UInt16.MaxValue);\n      Console.WriteLine(sb);\n      // The example displays the following output:\n      //       The range of a 16-bit unsigned integer: 0 to 65535\n</code></pre><p> The Append method calls the <a class=\"xref\" href=\"system.uint16#System_UInt16_ToString_System_IFormatProvider_\" data-linktype=\"relative-path\">System.UInt16.ToString(IFormatProvider)</a> method to get the string representation of <code>value</code>. To control the formatting of <code>value</code>, call the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_AppendFormat_\" data-linktype=\"relative-path\">AppendFormat</a> method.  </p>\n<p> The capacity of this instance is adjusted as needed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Append_System_UInt32_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Append_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Append(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the string representation of a specified 32-bit unsigned integer to this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Append (uint value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to append.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the append operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object, as the following example illustrates.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Append#16\">      Dim sb As New System.Text.StringBuilder(&quot;The range of a 32-bit unsigned integer: &quot;)\n      sb.Append(UInt32.MinValue).Append(&quot; to &quot;).Append(UInt32.MaxValue)\n      Console.WriteLine(sb)\n      &#39; The example displays the following output:\n      &#39;       The range of a 32-bit unsigned integer: 0 to 4294967295\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Append#16\">      System.Text.StringBuilder sb = new \n                  System.Text.StringBuilder(&quot;The range of a 32-bit unsigned integer: &quot;);\n      sb.Append(UInt32.MinValue).Append(&quot; to &quot;).Append(UInt32.MaxValue);\n      Console.WriteLine(sb);\n      // The example displays the following output:\n      //       The range of a 32-bit unsigned integer: 0 to 4294967295\n</code></pre><p> The Append calls the <a class=\"xref\" href=\"system.uint32#System_UInt32_ToString_\" data-linktype=\"relative-path\">ToString</a> method to get the string representation of <code>value</code> for the current culture. To control the formatting of <code>value</code>, call the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_AppendFormat_\" data-linktype=\"relative-path\">AppendFormat</a> method.  </p>\n<p> The capacity of this instance is adjusted as needed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Append_System_UInt64_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Append_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Append(UInt64)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the string representation of a specified 64-bit unsigned integer to this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Append (ulong value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to append.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the append operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object, as the following example illustrates.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Append#17\">      Dim sb As New System.Text.StringBuilder(&quot;The range of a 64-bit unsigned integer: &quot;)\n      sb.Append(UInt64.MinValue).Append(&quot; to &quot;).Append(UInt64.MaxValue)\n      Console.WriteLine(sb)\n      &#39; The example displays the following output:\n      &#39;       The range of a 64-bit unsigned integer: 0 to 18446744073709551615\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Append#17\">      System.Text.StringBuilder sb = new \n                  System.Text.StringBuilder(&quot;The range of a 64-bit unsigned integer: &quot;);\n      sb.Append(UInt64.MinValue).Append(&quot; to &quot;).Append(UInt64.MaxValue);\n      Console.WriteLine(sb);\n      // The example displays the following output:\n      //       The range of a 64-bit unsigned integer: 0 to 18446744073709551615\n</code></pre><p> The Append method calls the <a class=\"xref\" href=\"system.uint64#System_UInt64_ToString_System_IFormatProvider_\" data-linktype=\"relative-path\">System.UInt64.ToString(IFormatProvider)</a> method to get the string representation of <code>value</code> for the current culture. To control the formatting of <code>value</code>, call the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_AppendFormat_\" data-linktype=\"relative-path\">AppendFormat</a> method.  </p>\n<p> The capacity of this instance is adjusted as needed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Append_System_Char_System_Int32_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Append_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Append(Char,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Appends a specified number of copies of the string representation of a Unicode character to this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Append (char value, int repeatCount);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character to append.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>repeatCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of times to append <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the append operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>repeatCount</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>Out of memory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object, as the following example illustrates.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Append#5\">      decimal value = 1346.19m;\n      System.Text.StringBuilder sb = new System.Text.StringBuilder();\n      sb.Append(&#39;*&#39;, 5).AppendFormat(&quot;{0:C2}&quot;, value).Append(&#39;*&#39;, 5);\n      Console.WriteLine(sb);\n      // The example displays the following output:\n      //       *****$1,346.19*****\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Append#5\">      Dim value As Decimal = 1346.19d\n      Dim sb As New System.Text.StringBuilder()\n      sb.Append(&quot;*&quot;c, 5).AppendFormat(&quot;{0:C2}&quot;, value).Append(&quot;*&quot;c, 5)\n      Console.WriteLine(sb)\n      &#39; The example displays the following output:\n      &#39;       *****$1,346.19*****\n</code></pre><p> The capacity of this instance is adjusted as needed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Append_System_Char__System_Int32_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Append_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Append(Char*,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Appends an array of Unicode characters starting at a specified address to this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Append (char* value, int valueCount);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to an array of characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>valueCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters in the array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the append operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>valueCount</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is a null pointer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method appends <code>valueCount</code> characters starting at address <code>value</code> to the current instance.  </p>\n<p> The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object.  </p>\n<p> The capacity of this instance is adjusted as needed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Append_System_Char___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Append_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Append(Char[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the string representation of a specified subarray of Unicode characters to this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Append (char[] value, int startIndex, int charCount);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A character array.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting position in <code>value</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>charCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters to append.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the append operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>, and <code>startIndex</code> and <code>charCount</code> are not zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>charCount</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> + <code>charCount</code> is greater than the length of <code>value</code>.  </p>\n<p> -or-  </p>\n<p> Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method appends the specified range of characters in <code>value</code> to the current instance. If <code>value</code> is <code>null</code> and <code>startIndex</code> and <code>count</code> are both zero, no changes are made.  </p>\n<p> The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object, as the following example illustrates.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Append#7\">      char[] chars = { &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;};\n      System.Text.StringBuilder sb = new System.Text.StringBuilder();\n      int startPosition = Array.IndexOf(chars, &#39;a&#39;);\n      int endPosition = Array.IndexOf(chars, &#39;c&#39;);\n      if (startPosition &gt;= 0 &amp;&amp; endPosition &gt;= 0) {\n         sb.Append(&quot;The array from positions &quot;).Append(startPosition).\n                   Append(&quot; to &quot;).Append(endPosition).Append(&quot; contains &quot;).\n                   Append(chars, startPosition, endPosition + 1).Append(&quot;.&quot;);\n         Console.WriteLine(sb);\n      }             \n      // The example displays the following output:\n      //       The array from positions 0 to 2 contains abc.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Append#7\">      Dim chars() As Char = { &quot;a&quot;c, &quot;b&quot;c, &quot;c&quot;c, &quot;d&quot;c, &quot;e&quot;c}\n      Dim sb As New System.Text.StringBuilder()\n      Dim startPosition As Integer = Array.IndexOf(chars, &quot;a&quot;c)\n      Dim endPosition As Integer = Array.IndexOf(chars, &quot;c&quot;c)\n      If startPosition &gt;= 0 AndAlso endPosition &gt;= 0 Then\n         sb.Append(&quot;The array from positions &quot;).Append(startPosition).\n                   Append(&quot; to &quot;).Append(endPosition).Append(&quot; contains &quot;).\n                   Append(chars, startPosition, endPosition + 1).Append(&quot;.&quot;)\n         Console.WriteLine(sb)\n      End If             \n      &#39; The example displays the following output:\n      &#39;       The array from positions 0 to 2 contains abc.\n</code></pre><p> The capacity of this instance is adjusted as needed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Append_System_String_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Append_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Append(String,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Appends a copy of a specified substring to this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Append (string value, int startIndex, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string that contains the substring to append.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting position of the substring within <code>value</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters in <code>value</code> to append.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the append operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>, and <code>startIndex</code> and <code>count</code> are not zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>count</code> less than zero.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> less than zero.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> + <code>count</code> is greater than the length of <code>value</code>.  </p>\n<p> -or-  </p>\n<p> Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method appends the specified range of characters in <code>value</code> to the current instance. If <code>value</code> is <code>null</code> and <code>startIndex</code> and <code>count</code> are both zero, no changes are made.  </p>\n<p> The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object, as the following example illustrates.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Append#19\">      Dim str As String = &quot;First;George Washington;1789;1797&quot;\n      Dim index As Integer = 0\n      Dim sb As New System.Text.StringBuilder()\n      Dim length As Integer = str.IndexOf(&quot;;&quot;c, index)      \n      sb.Append(str, index, length).Append(&quot; President of the United States: &quot;)\n      index += length + 1\n      length = str.IndexOf(&quot;;&quot;c, index) - index\n      sb.Append(str, index, length).Append(&quot;, from &quot;)\n      index += length + 1\n      length = str.IndexOf(&quot;;&quot;c, index) - index\n      sb.Append(str, index, length).Append(&quot; to &quot;)\n      index += length + 1\n      sb.Append(str, index, str.Length - index)\n      Console.WriteLine(sb)\n      &#39; The example displays the following output:\n      &#39;    First President of the United States: George Washington, from 1789 to 1797      \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Append#19\">      string str = &quot;First;George Washington;1789;1797&quot;;\n      int index = 0;\n      System.Text.StringBuilder sb = new System.Text.StringBuilder();\n      int length = str.IndexOf(&#39;;&#39;, index);      \n      sb.Append(str, index, length).Append(&quot; President of the United States: &quot;);\n      index += length + 1;\n      length = str.IndexOf(&#39;;&#39;, index) - index;\n      sb.Append(str, index, length).Append(&quot;, from &quot;);\n      index += length + 1;\n      length = str.IndexOf(&#39;;&#39;, index) - index;\n      sb.Append(str, index, length).Append(&quot; to &quot;);\n      index += length + 1;\n      sb.Append(str, index, str.Length - index);\n      Console.WriteLine(sb);\n      // The example displays the following output:\n      //    First President of the United States: George Washington, from 1789 to 1797      \n</code></pre><p> The capacity of this instance is adjusted as needed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_AppendFormat_System_String_System_Object_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_AppendFormat_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendFormat(String,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder AppendFormat (string format, object arg0);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A composite format string (see Remarks).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance with <code>format</code> appended. Each format item in <code>format</code> is replaced by the string representation of <code>arg0</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is invalid.  </p>\n<p> -or-  </p>\n<p> The index of a format item is less than 0 (zero), or greater than or equal to 1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The length of the expanded string would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses the <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite formatting feature</a> of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object.  </p>\n<p> The <code>format</code> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items. The index of the format items must be 0, to correspond to <code>arg0</code>, the single object in the parameter list of this method. The formatting process replaces each format item with the string representation of <code>arg0</code>.  </p>\n<p> The syntax of a format item is as follows:  </p>\n<p> {<em>index</em>[,<em>length</em>][:<em>formatString</em>]}  </p>\n<p> Elements in square brackets are optional. The following table describes each element.  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>index</em></td>\n<td>The zero-based position in the parameter list of the object to be formatted. If the object specified by <em>index</em> is <code>null</code>, the format item is replaced by <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>. If there is no parameter in the <em>index</em> position, a <a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a> is thrown.</td>\n</tr>\n<tr>\n<td>,<em>length</em></td>\n<td>The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.</td>\n</tr>\n<tr>\n<td>:<em>formatString</em></td>\n<td>A standard or custom format string that is supported by the parameter.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"NOTE\"><h5>Note</h5><p> For the standard and custom format strings used with date and time values, see <a href=\"../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Date and Time Format Strings</a> and <a href=\"../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Date and Time Format Strings</a>. For the standard and custom format strings used with numeric values, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>. For the standard format strings used with enumerations, see <a href=\"../Topic/Enumeration%20Format%20Strings.md\" data-linktype=\"relative-path\">Enumeration Format Strings</a>.  </p>\n</div>\n<p> <code>arg0</code> represents the object to be formatted. Each format item in <code>format</code> is replaced with the string representation of <code>arg0</code>. If the format item includes <code>formatString</code> and <code>arg0</code> implements the <a class=\"xref\" href=\"system.iformattable\" data-linktype=\"relative-path\">IFormattable</a> interface, then <code>arg0.ToString(formatString, null)</code> defines the formatting. Otherwise, <code>arg0.ToString()</code> defines the formatting.  </p>\n<p> If the string assigned to <code>format</code> is &quot;Thank you for your donation of {0:####} cans of food to our charitable organization.&quot; and <code>arg0</code> is an integer with the value 10, the return value will be &quot;Thank you for your donation of 10 cans of food to our charitable organization.&quot;</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_AppendFormat_\" data-linktype=\"relative-path\">AppendFormat</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"stringbuilder.appendformat#1\">using System;\nusing System.Text;\nusing System.Globalization;\n\nclass Sample \n{\n    static StringBuilder sb = new StringBuilder();\n\n    public static void Main() \n    {\n    int    var1   = 111;\n    float  var2   = 2.22F;\n    string var3   = &quot;abcd&quot;;\n    object[] var4 = {3, 4.4, &#39;X&#39;};\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;StringBuilder.AppendFormat method:&quot;);\n    sb.AppendFormat(&quot;1) {0}&quot;, var1);\n    Show(sb);\n    sb.AppendFormat(&quot;2) {0}, {1}&quot;, var1, var2);\n    Show(sb);\n    sb.AppendFormat(&quot;3) {0}, {1}, {2}&quot;, var1, var2, var3);\n    Show(sb);\n    sb.AppendFormat(&quot;4) {0}, {1}, {2}&quot;, var4);\n    Show(sb);\n    CultureInfo ci = new CultureInfo(&quot;es-ES&quot;, true);\n    sb.AppendFormat(ci, &quot;5) {0}&quot;, var2);\n    Show(sb);\n    }\n\n    public static void Show(StringBuilder sbs)\n    {\n    Console.WriteLine(sbs.ToString());\n    sb.Length = 0;\n    }\n}\n/*\nThis example produces the following results:\n\nStringBuilder.AppendFormat method:\n1) 111\n2) 111, 2.22\n3) 111, 2.22, abcd\n4) 3, 4.4, X\n5) 2,22\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"stringbuilder.appendformat#1\">Imports System\nImports System.Text\nImports System.Globalization\n\nClass Sample\n   Private Shared sb As New StringBuilder()\n\n   Public Shared Sub Main()\n      Dim var1 As Integer = 111\n      Dim var2 As Single = 2.22F\n      Dim var3 As String = &quot;abcd&quot;\n      Dim var4 As Object() =  {3, 4.4, &quot;X&quot;c}\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;StringBuilder.AppendFormat method:&quot;)\n      sb.AppendFormat(&quot;1) {0}&quot;, var1)\n      Show(sb)\n      sb.AppendFormat(&quot;2) {0}, {1}&quot;, var1, var2)\n      Show(sb)\n      sb.AppendFormat(&quot;3) {0}, {1}, {2}&quot;, var1, var2, var3)\n      Show(sb)\n      sb.AppendFormat(&quot;4) {0}, {1}, {2}&quot;, var4)\n      Show(sb)\n      Dim ci As New CultureInfo(&quot;es-ES&quot;, True)\n      sb.AppendFormat(ci, &quot;5) {0}&quot;, var2)\n      Show(sb)\n   End Sub &#39;Main\n   \n   Public Shared Sub Show(sbs As StringBuilder)\n      Console.WriteLine(sbs.ToString())\n      sb.Length = 0\n   End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;StringBuilder.AppendFormat method:\n&#39;1) 111\n&#39;2) 111, 2.22\n&#39;3) 111, 2.22, abcd\n&#39;4) 3, 4.4, X\n&#39;5) 2,22\n</code></pre><pre><code class=\"lang-cpp\" name=\"stringbuilder.appendformat#1\">using namespace System;\nusing namespace System::Text;\nusing namespace System::Globalization;\nvoid Show( StringBuilder^ sbs )\n{\n   Console::WriteLine( sbs );\n   sbs-&gt;Length = 0;\n}\n\nint main()\n{\n   StringBuilder^ sb = gcnew StringBuilder;\n   int var1 = 111;\n   float var2 = 2.22F;\n   String^ var3 = &quot;abcd&quot;;\n   array&lt;Object^&gt;^var4 = {3,4.4,(Char)&#39;X&#39;};\n   Console::WriteLine();\n   Console::WriteLine( &quot;StringBuilder.AppendFormat method:&quot; );\n   sb-&gt;AppendFormat( &quot;1) {0}&quot;, var1 );\n   Show( sb );\n   sb-&gt;AppendFormat( &quot;2) {0}, {1}&quot;, var1, var2 );\n   Show( sb );\n   sb-&gt;AppendFormat( &quot;3) {0}, {1}, {2}&quot;, var1, var2, var3 );\n   Show( sb );\n   sb-&gt;AppendFormat( &quot;4) {0}, {1}, {2}&quot;, var4 );\n   Show( sb );\n   CultureInfo^ ci = gcnew CultureInfo( &quot;es-ES&quot;,true );\n   array&lt;Object^&gt;^temp1 = {var2};\n   sb-&gt;AppendFormat( ci, &quot;5) {0}&quot;, temp1 );\n   Show( sb );\n}\n\n/*\nThis example produces the following results:\n\nStringBuilder.AppendFormat method:\n1) 111\n2) 111, 2.22\n3) 111, 2.22, abcd\n4) 3, 4.4, X\n5) 2,22\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_AppendFormat_System_String_System_Object___\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_AppendFormat_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendFormat(String,Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a corresponding argument in a parameter array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder AppendFormat (string format, object[] args);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A composite format string (see Remarks).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>args</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of objects to format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance with <code>format</code> appended. Each format item in <code>format</code> is replaced by the string representation of the corresponding object argument.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> or <code>args</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is invalid.  </p>\n<p> -or-  </p>\n<p> The index of a format item is less than 0 (zero), or greater than or equal to the length of the <code>args</code> array.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The length of the expanded string would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses the <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite formatting feature</a> of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object.  </p>\n<p> The <code>format</code> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.  </p>\n<p> The syntax of a format item is as follows:  </p>\n<p> {<em>index</em>[,<em>length</em>][:<em>formatString</em>]}  </p>\n<p> Elements in square brackets are optional. The following table describes each element.  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>index</em></td>\n<td>The zero-based position in the parameter list of the object to be formatted. If the object specified by <em>index</em> is <code>null</code>, the format item is replaced by <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>. If there is no parameter in the <em>index</em> position, a <a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a> is thrown.</td>\n</tr>\n<tr>\n<td>,<em>length</em></td>\n<td>The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.</td>\n</tr>\n<tr>\n<td>:<em>formatString</em></td>\n<td>A standard or custom format string that is supported by the parameter.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"NOTE\"><h5>Note</h5><p> For the standard and custom format strings used with date and time values, see <a href=\"../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Date and Time Format Strings</a> and <a href=\"../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Date and Time Format Strings</a>. For the standard and custom format strings used with numeric values, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>. For the standard format strings used with enumerations, see <a href=\"../Topic/Enumeration%20Format%20Strings.md\" data-linktype=\"relative-path\">Enumeration Format Strings</a>.  </p>\n</div>\n<p> <code>args</code> represents the objects to be formatted. Each format item in <code>format</code> is replaced with the string representation of the corresponding object in <code>args</code>. If the format item includes <code>formatString</code> and the corresponding object in <code>args</code> implements the <a class=\"xref\" href=\"system.iformattable\" data-linktype=\"relative-path\">IFormattable</a> interface, then <code>args[index].ToString(formatString, provider)</code> defines the formatting. Otherwise, <code>args[index].ToString()</code> defines the formatting.  </p>\n<p> If the string assigned to <code>format</code> is &quot;Thank you for your donation of {0:####} cans of food to our charitable organization.&quot; and <code>arg0</code> is an integer with the value 10, the return value will be &quot;Thank you for your donation of 10 cans of food to our charitable organization.&quot;</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_AppendFormat_\" data-linktype=\"relative-path\">AppendFormat</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"stringbuilder.appendformat#1\">using System;\nusing System.Text;\nusing System.Globalization;\n\nclass Sample \n{\n    static StringBuilder sb = new StringBuilder();\n\n    public static void Main() \n    {\n    int    var1   = 111;\n    float  var2   = 2.22F;\n    string var3   = &quot;abcd&quot;;\n    object[] var4 = {3, 4.4, &#39;X&#39;};\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;StringBuilder.AppendFormat method:&quot;);\n    sb.AppendFormat(&quot;1) {0}&quot;, var1);\n    Show(sb);\n    sb.AppendFormat(&quot;2) {0}, {1}&quot;, var1, var2);\n    Show(sb);\n    sb.AppendFormat(&quot;3) {0}, {1}, {2}&quot;, var1, var2, var3);\n    Show(sb);\n    sb.AppendFormat(&quot;4) {0}, {1}, {2}&quot;, var4);\n    Show(sb);\n    CultureInfo ci = new CultureInfo(&quot;es-ES&quot;, true);\n    sb.AppendFormat(ci, &quot;5) {0}&quot;, var2);\n    Show(sb);\n    }\n\n    public static void Show(StringBuilder sbs)\n    {\n    Console.WriteLine(sbs.ToString());\n    sb.Length = 0;\n    }\n}\n/*\nThis example produces the following results:\n\nStringBuilder.AppendFormat method:\n1) 111\n2) 111, 2.22\n3) 111, 2.22, abcd\n4) 3, 4.4, X\n5) 2,22\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"stringbuilder.appendformat#1\">Imports System\nImports System.Text\nImports System.Globalization\n\nClass Sample\n   Private Shared sb As New StringBuilder()\n\n   Public Shared Sub Main()\n      Dim var1 As Integer = 111\n      Dim var2 As Single = 2.22F\n      Dim var3 As String = &quot;abcd&quot;\n      Dim var4 As Object() =  {3, 4.4, &quot;X&quot;c}\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;StringBuilder.AppendFormat method:&quot;)\n      sb.AppendFormat(&quot;1) {0}&quot;, var1)\n      Show(sb)\n      sb.AppendFormat(&quot;2) {0}, {1}&quot;, var1, var2)\n      Show(sb)\n      sb.AppendFormat(&quot;3) {0}, {1}, {2}&quot;, var1, var2, var3)\n      Show(sb)\n      sb.AppendFormat(&quot;4) {0}, {1}, {2}&quot;, var4)\n      Show(sb)\n      Dim ci As New CultureInfo(&quot;es-ES&quot;, True)\n      sb.AppendFormat(ci, &quot;5) {0}&quot;, var2)\n      Show(sb)\n   End Sub &#39;Main\n   \n   Public Shared Sub Show(sbs As StringBuilder)\n      Console.WriteLine(sbs.ToString())\n      sb.Length = 0\n   End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;StringBuilder.AppendFormat method:\n&#39;1) 111\n&#39;2) 111, 2.22\n&#39;3) 111, 2.22, abcd\n&#39;4) 3, 4.4, X\n&#39;5) 2,22\n</code></pre><pre><code class=\"lang-cpp\" name=\"stringbuilder.appendformat#1\">using namespace System;\nusing namespace System::Text;\nusing namespace System::Globalization;\nvoid Show( StringBuilder^ sbs )\n{\n   Console::WriteLine( sbs );\n   sbs-&gt;Length = 0;\n}\n\nint main()\n{\n   StringBuilder^ sb = gcnew StringBuilder;\n   int var1 = 111;\n   float var2 = 2.22F;\n   String^ var3 = &quot;abcd&quot;;\n   array&lt;Object^&gt;^var4 = {3,4.4,(Char)&#39;X&#39;};\n   Console::WriteLine();\n   Console::WriteLine( &quot;StringBuilder.AppendFormat method:&quot; );\n   sb-&gt;AppendFormat( &quot;1) {0}&quot;, var1 );\n   Show( sb );\n   sb-&gt;AppendFormat( &quot;2) {0}, {1}&quot;, var1, var2 );\n   Show( sb );\n   sb-&gt;AppendFormat( &quot;3) {0}, {1}, {2}&quot;, var1, var2, var3 );\n   Show( sb );\n   sb-&gt;AppendFormat( &quot;4) {0}, {1}, {2}&quot;, var4 );\n   Show( sb );\n   CultureInfo^ ci = gcnew CultureInfo( &quot;es-ES&quot;,true );\n   array&lt;Object^&gt;^temp1 = {var2};\n   sb-&gt;AppendFormat( ci, &quot;5) {0}&quot;, temp1 );\n   Show( sb );\n}\n\n/*\nThis example produces the following results:\n\nStringBuilder.AppendFormat method:\n1) 111\n2) 111, 2.22\n3) 111, 2.22, abcd\n4) 3, 4.4, X\n5) 2,22\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_AppendFormat_System_IFormatProvider_System_String_System_Object_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_AppendFormat_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendFormat(IFormatProvider,String,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument using a specified format provider.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder AppendFormat (IFormatProvider provider, string format, object arg0);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A composite format string (see Remarks).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <code>format</code> in which any format specification is replaced by the string representation of <code>arg0</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is invalid.  </p>\n<p> -or-  </p>\n<p> The index of a format item is less than 0 (zero), or greater than or equal to one (1).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The length of the expanded string would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses the  <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite formatting feature</a> of the .NET Framework to convert the value of <code>arg0</code> to its text representation and embed that representation in the current <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object.  </p>\n<p> The <code>format</code> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items. The index of each format item must be zero (0) since this method includes an argument list with a single argument. The formatting process replaces each format item with the string representation of <code>arg0</code>.  </p>\n<p> The syntax of a format item is as follows:  </p>\n<p> {<em>index</em>[,<em>length</em>][:<em>formatString</em>]}  </p>\n<p> Elements in square brackets are optional. The following table describes each element.  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>index</em></td>\n<td>The zero-based position in the parameter list of the object to be formatted. If the object specified by <em>index</em> is <code>null</code>, the format item is replaced by <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>. In this case, since the AppendFormat method has a single argument in the argument list, the value of <em>index</em> must always be 0. If it is not, a <a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a> is thrown.</td>\n</tr>\n<tr>\n<td>,<em>length</em></td>\n<td>The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.</td>\n</tr>\n<tr>\n<td>:<em>formatString</em></td>\n<td>A standard or custom format string that is supported by the parameter.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"NOTE\"><h5>Note</h5><p> For the standard and custom format strings used with date and time values, see <a href=\"../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Date and Time Format Strings</a> and <a href=\"../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Date and Time Format Strings</a>. For the standard and custom format strings used with numeric values, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>. For the standard format strings used with enumerations, see <a href=\"../Topic/Enumeration%20Format%20Strings.md\" data-linktype=\"relative-path\">Enumeration Format Strings</a>.  </p>\n</div>\n<p> The <code>provider</code> parameter specifies an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation that can provide formatting information for the objects in <code>args</code>. <code>provider</code> can be any of the following:  </p>\n<ul>\n<li><p>A <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that provides culture-specific formatting information.  </p>\n</li>\n<li><p>A <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides culture-specific formatting information for <code>arg0</code> if it is a numeric value.  </p>\n</li>\n<li><p>A <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that provides culture-specific formatting information for <code>arg0</code> if it is a date and time value.  </p>\n</li>\n<li><p>A custom <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation that provides formatting information for <code>arg0</code>. Typically, such an implementation also implements the <a class=\"xref\" href=\"system.icustomformatter\" data-linktype=\"relative-path\">ICustomFormatter</a> interface.  </p>\n<p>If the <code>provider</code> parameter is <code>null</code>, formatting information is obtained from the current culture.  </p>\n<p><code>arg0</code> represents the object to be formatted. Each format item in <code>format</code> is replaced with the string representation of <code>arg0</code>. If the format item includes <code>formatString</code> and <code>arg0</code> implements the <a class=\"xref\" href=\"system.iformattable\" data-linktype=\"relative-path\">IFormattable</a> interface, then <code>arg0.ToString(formatString, provider)</code> defines the formatting. Otherwise, <code>arg0.ToString()</code> defines the formatting.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following includes two calls to the AppendFormat method. Both use the formatting conventions of the English-Great Britain (en-GB) culture. The first inserts the string representation of a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value currency in a result string. The second inserts a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value in two places in a result string, the first including only the short date string and the second the short time string.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.AppendFormat#2\">Imports System.Globalization\nImports System.Text\n\nModule Example\n   Public Sub Main()\n      Dim sb As New StringBuilder()\n      Dim value As Decimal = 16.95d\n      Dim enGB As CultureInfo = CultureInfo.CreateSpecificCulture(&quot;en-GB&quot;)\n      Dim dateToday As DateTime = Date.Now\n      sb.AppendFormat(enGB, &quot;Final Price: {0:C2}&quot;, value)\n      sb.AppendLine()\n      sb.AppendFormat(enGB, &quot;Date and Time: {0:d} at {0:t}&quot;, dateToday)\n      Console.WriteLine(sb.ToString())\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;       Final Price: &#163;16.95\n&#39;       Date and Time: 01/10/2014 at 10:22\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.AppendFormat#2\">using System;\nusing System.Globalization;\nusing System.Text;\n\npublic class Example\n{\n   public static void Main()\n   {\n      StringBuilder sb = new StringBuilder();\n      Decimal value = 16.95m;\n      CultureInfo enGB = CultureInfo.CreateSpecificCulture(&quot;en-GB&quot;);\n      DateTime dateToday = DateTime.Now;\n      sb.AppendFormat(enGB, &quot;Final Price: {0:C2}&quot;, value);\n      sb.AppendLine();\n      sb.AppendFormat(enGB, &quot;Date and Time: {0:d} at {0:t}&quot;, dateToday);\n      Console.WriteLine(sb.ToString());\n   }\n}\n// The example displays the following output:\n//       Final Price: &#163;16.95\n//       Date and Time: 01/10/2014 at 10:22\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_AppendFormat_System_IFormatProvider_System_String_System_Object___\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_AppendFormat_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendFormat(IFormatProvider,String,Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a corresponding argument in a parameter array using a specified format provider.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder AppendFormat (IFormatProvider provider, string format, object[] args);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A composite format string (see Remarks).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>args</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of objects to format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <code>format</code> where any format specification is replaced by the string representation of the corresponding object argument.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is invalid.  </p>\n<p> -or-  </p>\n<p> The index of a format item is less than 0 (zero), or greater than or equal to the length of the <code>args</code> array.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The length of the expanded string would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses the <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite formatting feature</a> of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object.  </p>\n<p> The <code>format</code> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.  </p>\n<p> The syntax of a format item is as follows:  </p>\n<p> {<em>index</em>[,<em>length</em>][:<em>formatString</em>]}  </p>\n<p> Elements in square brackets are optional. The following table describes each element.  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>index</em></td>\n<td>The zero-based position in the parameter list of the object to be formatted. If the object specified by <em>index</em> is <code>null</code>, the format item is replaced by <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>. If there is no parameter in the <em>index</em> position, a <a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a> is thrown.</td>\n</tr>\n<tr>\n<td>,<em>length</em></td>\n<td>The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.</td>\n</tr>\n<tr>\n<td>:<em>formatString</em></td>\n<td>A standard or custom format string that is supported by the parameter.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"NOTE\"><h5>Note</h5><p> For the standard and custom format strings used with date and time values, see <a href=\"../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Date and Time Format Strings</a> and <a href=\"../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Date and Time Format Strings</a>. For the standard and custom format strings used with numeric values, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>. For the standard format strings used with enumerations, see <a href=\"../Topic/Enumeration%20Format%20Strings.md\" data-linktype=\"relative-path\">Enumeration Format Strings</a>.  </p>\n</div>\n<p> The <code>provider</code> parameter specifies an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation that can provide formatting information for the objects in <code>args</code>. <code>provider</code> can be any of the following:  </p>\n<ul>\n<li><p>A <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that provides culture-specific formatting information.  </p>\n</li>\n<li><p>A <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides culture-specific formatting information for numeric values in <code>args</code>.  </p>\n</li>\n<li><p>A <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that provides culture-specific formatting information for date and time values in <code>args</code>.  </p>\n</li>\n<li><p>A custom <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation that provides formatting information for one or more of the objects in <code>args</code>. Typically, such an implementation also implements the <a class=\"xref\" href=\"system.icustomformatter\" data-linktype=\"relative-path\">ICustomFormatter</a> interface. The second example in the next section illustrates an AppendFormat method call with a custom <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation.  </p>\n<p>If the <code>provider</code> parameter is <code>null</code>, format provider information is obtained from the current culture.  </p>\n<p><code>args</code> represents the objects to be formatted. Each format item in <code>format</code> is replaced with the string representation of the corresponding object in <code>args</code>. If the format item includes <code>formatString</code> and the corresponding object in <code>args</code> implements the <a class=\"xref\" href=\"system.iformattable\" data-linktype=\"relative-path\">IFormattable</a> interface, then <code>args[index].ToString(formatString, provider)</code> defines the formatting. Otherwise, <code>args[index].ToString()</code> defines the formatting.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_AppendFormat_\" data-linktype=\"relative-path\">AppendFormat</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"stringbuilder.appendformat#1\">using System;\nusing System.Text;\nusing System.Globalization;\n\nclass Sample \n{\n    static StringBuilder sb = new StringBuilder();\n\n    public static void Main() \n    {\n    int    var1   = 111;\n    float  var2   = 2.22F;\n    string var3   = &quot;abcd&quot;;\n    object[] var4 = {3, 4.4, &#39;X&#39;};\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;StringBuilder.AppendFormat method:&quot;);\n    sb.AppendFormat(&quot;1) {0}&quot;, var1);\n    Show(sb);\n    sb.AppendFormat(&quot;2) {0}, {1}&quot;, var1, var2);\n    Show(sb);\n    sb.AppendFormat(&quot;3) {0}, {1}, {2}&quot;, var1, var2, var3);\n    Show(sb);\n    sb.AppendFormat(&quot;4) {0}, {1}, {2}&quot;, var4);\n    Show(sb);\n    CultureInfo ci = new CultureInfo(&quot;es-ES&quot;, true);\n    sb.AppendFormat(ci, &quot;5) {0}&quot;, var2);\n    Show(sb);\n    }\n\n    public static void Show(StringBuilder sbs)\n    {\n    Console.WriteLine(sbs.ToString());\n    sb.Length = 0;\n    }\n}\n/*\nThis example produces the following results:\n\nStringBuilder.AppendFormat method:\n1) 111\n2) 111, 2.22\n3) 111, 2.22, abcd\n4) 3, 4.4, X\n5) 2,22\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"stringbuilder.appendformat#1\">Imports System\nImports System.Text\nImports System.Globalization\n\nClass Sample\n   Private Shared sb As New StringBuilder()\n\n   Public Shared Sub Main()\n      Dim var1 As Integer = 111\n      Dim var2 As Single = 2.22F\n      Dim var3 As String = &quot;abcd&quot;\n      Dim var4 As Object() =  {3, 4.4, &quot;X&quot;c}\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;StringBuilder.AppendFormat method:&quot;)\n      sb.AppendFormat(&quot;1) {0}&quot;, var1)\n      Show(sb)\n      sb.AppendFormat(&quot;2) {0}, {1}&quot;, var1, var2)\n      Show(sb)\n      sb.AppendFormat(&quot;3) {0}, {1}, {2}&quot;, var1, var2, var3)\n      Show(sb)\n      sb.AppendFormat(&quot;4) {0}, {1}, {2}&quot;, var4)\n      Show(sb)\n      Dim ci As New CultureInfo(&quot;es-ES&quot;, True)\n      sb.AppendFormat(ci, &quot;5) {0}&quot;, var2)\n      Show(sb)\n   End Sub &#39;Main\n   \n   Public Shared Sub Show(sbs As StringBuilder)\n      Console.WriteLine(sbs.ToString())\n      sb.Length = 0\n   End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;StringBuilder.AppendFormat method:\n&#39;1) 111\n&#39;2) 111, 2.22\n&#39;3) 111, 2.22, abcd\n&#39;4) 3, 4.4, X\n&#39;5) 2,22\n</code></pre><pre><code class=\"lang-cpp\" name=\"stringbuilder.appendformat#1\">using namespace System;\nusing namespace System::Text;\nusing namespace System::Globalization;\nvoid Show( StringBuilder^ sbs )\n{\n   Console::WriteLine( sbs );\n   sbs-&gt;Length = 0;\n}\n\nint main()\n{\n   StringBuilder^ sb = gcnew StringBuilder;\n   int var1 = 111;\n   float var2 = 2.22F;\n   String^ var3 = &quot;abcd&quot;;\n   array&lt;Object^&gt;^var4 = {3,4.4,(Char)&#39;X&#39;};\n   Console::WriteLine();\n   Console::WriteLine( &quot;StringBuilder.AppendFormat method:&quot; );\n   sb-&gt;AppendFormat( &quot;1) {0}&quot;, var1 );\n   Show( sb );\n   sb-&gt;AppendFormat( &quot;2) {0}, {1}&quot;, var1, var2 );\n   Show( sb );\n   sb-&gt;AppendFormat( &quot;3) {0}, {1}, {2}&quot;, var1, var2, var3 );\n   Show( sb );\n   sb-&gt;AppendFormat( &quot;4) {0}, {1}, {2}&quot;, var4 );\n   Show( sb );\n   CultureInfo^ ci = gcnew CultureInfo( &quot;es-ES&quot;,true );\n   array&lt;Object^&gt;^temp1 = {var2};\n   sb-&gt;AppendFormat( ci, &quot;5) {0}&quot;, temp1 );\n   Show( sb );\n}\n\n/*\nThis example produces the following results:\n\nStringBuilder.AppendFormat method:\n1) 111\n2) 111, 2.22\n3) 111, 2.22, abcd\n4) 3, 4.4, X\n5) 2,22\n*/\n</code></pre><p> The following example defines a custom <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation named <code>CustomerFormatter</code> that formats a 10-digit customer number with hyphens after the fourth and seventh digits. It is passed to the AppendFormat method to create a string that includes the formatted customer number and customer name.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.AppendFormat#1\">using System;\nusing System.Text;\n\npublic class Customer\n{\n   private string custName;\n   private int custNumber;\n   \n   public Customer(string name, int number)\n   {\n      this.custName = name;\n      this.custNumber = number;\n   }\n   \n   public string Name\n   {\n      get { return this.custName; }\n   }\n   \n   public int CustomerNumber\n   {\n      get { return this.custNumber; }\n   }\n}\n\npublic class CustomerNumberFormatter : IFormatProvider, ICustomFormatter\n{   \n   public object GetFormat(Type formatType)\n   {\n      if (formatType == typeof(ICustomFormatter))\n         return this;\n      return null;\n   }\n   \n   public string Format(string format, object arg, IFormatProvider provider)\n   {\n      if (arg is Int32)\n      {\n         string custNumber = ((int) arg).ToString(&quot;D10&quot;);\n         return custNumber.Substring(0, 4) + &quot;-&quot; + custNumber.Substring(4, 3) + \n                &quot;-&quot; + custNumber.Substring(7, 3);\n      }\n      else\n      {\n         return null;\n      }\n   }                   \n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      Customer customer = new Customer(&quot;A Plus Software&quot;, 903654);\n      StringBuilder sb = new StringBuilder();\n      sb.AppendFormat(new CustomerNumberFormatter(), &quot;{0}: {1}&quot;, \n                      customer.CustomerNumber, customer.Name);\n      Console.WriteLine(sb.ToString());\n   }\n}\n// The example displays the following output:\n//      0000-903-654: A Plus Software\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.AppendFormat#1\">Imports System.Text\n\nPublic Class Customer\n   Private custName As String\n   Private custNumber As Integer\n   \n   Public Sub New(name As String, number As Integer)\n      custName = name\n      custNumber = number\n   End Sub\n   \n   Public ReadOnly Property Name As String\n      Get\n         Return Me.custName\n      End Get\n   End Property\n   \n   Public ReadOnly Property CustomerNumber As Integer\n      Get\n         Return Me.custNumber\n      End Get\n   End Property\nEnd Class\n\nPublic Class CustomerNumberFormatter \n   Implements IFormatProvider, ICustomFormatter\n   \n   Public Function GetFormat(formatType As Type) As Object _\n                   Implements IFormatProvider.GetFormat\n      If formatType Is GetType(ICustomFormatter) Then\n         Return Me\n      End If\n      Return Nothing\n   End Function\n   \n   Public Function Format(fmt As String, arg As Object, provider As IFormatProvider) As String _\n                   Implements ICustomFormatter.Format\n      If typeof arg Is Int32 Then\n         Dim custNumber As String = CInt(arg).ToString(&quot;D10&quot;)\n         Return custNumber.Substring(0, 4) + &quot;-&quot; + custNumber.SubString(4, 3) + _\n                &quot;-&quot; + custNumber.Substring(7, 3)\n      Else\n         Return Nothing\n      End If\n   End Function                   \nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim customer As New Customer(&quot;A Plus Software&quot;, 903654)\n      Dim sb As New StringBuilder()\n      sb.AppendFormat(New CustomerNumberFormatter, &quot;{0}: {1}&quot;, _\n                      customer.CustomerNumber, customer.Name)\n      Console.WriteLine(sb.ToString())\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;      0000-903-654: A Plus Software\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_AppendFormat_System_String_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_AppendFormat_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendFormat(String,Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of two arguments.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder AppendFormat (string format, object arg0, object arg1);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A composite format string (see Remarks).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first object to format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second object to format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance with <code>format</code> appended. Each format item in <code>format</code> is replaced by the string representation of the corresponding object argument.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is invalid.  </p>\n<p> -or-  </p>\n<p> The index of a format item is less than 0 (zero), or greater than or equal to 2.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The length of the expanded string would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses the <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite formatting feature</a> of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object.  </p>\n<p> The <code>format</code> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to <code>arg0</code> and <code>arg1</code>, the two objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.  </p>\n<p> The syntax of a format item is as follows:  </p>\n<p> {<em>index</em>[,<em>length</em>][:<em>formatString</em>]}  </p>\n<p> Elements in square brackets are optional. The following table describes each element.  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>index</em></td>\n<td>The zero-based position in the parameter list of the object to be formatted. If the object specified by <em>index</em> is <code>null</code>, the format item is replaced by <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>. If there is no parameter in the <em>index</em> position, a <a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a> is thrown.</td>\n</tr>\n<tr>\n<td>,<em>length</em></td>\n<td>The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.</td>\n</tr>\n<tr>\n<td>:<em>formatString</em></td>\n<td>A standard or custom format string that is supported by the parameter.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"NOTE\"><h5>Note</h5><p> For the standard and custom format strings used with date and time values, see <a href=\"../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Date and Time Format Strings</a> and <a href=\"../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Date and Time Format Strings</a>. For the standard and custom format strings used with numeric values, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>. For the standard format strings used with enumerations, see <a href=\"../Topic/Enumeration%20Format%20Strings.md\" data-linktype=\"relative-path\">Enumeration Format Strings</a>.  </p>\n</div>\n<p> <code>arg0</code> and <code>arg1</code> represent the objects to be formatted. Each format item in <code>format</code> is replaced with the string representation of either <code>arg0</code> or <code>arg1</code>. If the format item includes <code>formatString</code> and the corresponding object implements the <a class=\"xref\" href=\"system.iformattable\" data-linktype=\"relative-path\">IFormattable</a> interface, then <code>arg</code><em>x</em><code>.ToString(formatString, provider)</code> defines the formatting, where <em>x</em> is the index of the argument. Otherwise, <code>arg</code><em>x</em><code>.ToString()</code> defines the formatting.  </p>\n<p> If the string assigned to <code>format</code> is &quot;Thank you for your donation of {0:####} cans of food to our charitable organization.&quot; and <code>arg0</code> is an integer with the value 10, the return value will be &quot;Thank you for your donation of 10 cans of food to our charitable organization.&quot;</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_AppendFormat_\" data-linktype=\"relative-path\">AppendFormat</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"stringbuilder.appendformat#1\">using System;\nusing System.Text;\nusing System.Globalization;\n\nclass Sample \n{\n    static StringBuilder sb = new StringBuilder();\n\n    public static void Main() \n    {\n    int    var1   = 111;\n    float  var2   = 2.22F;\n    string var3   = &quot;abcd&quot;;\n    object[] var4 = {3, 4.4, &#39;X&#39;};\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;StringBuilder.AppendFormat method:&quot;);\n    sb.AppendFormat(&quot;1) {0}&quot;, var1);\n    Show(sb);\n    sb.AppendFormat(&quot;2) {0}, {1}&quot;, var1, var2);\n    Show(sb);\n    sb.AppendFormat(&quot;3) {0}, {1}, {2}&quot;, var1, var2, var3);\n    Show(sb);\n    sb.AppendFormat(&quot;4) {0}, {1}, {2}&quot;, var4);\n    Show(sb);\n    CultureInfo ci = new CultureInfo(&quot;es-ES&quot;, true);\n    sb.AppendFormat(ci, &quot;5) {0}&quot;, var2);\n    Show(sb);\n    }\n\n    public static void Show(StringBuilder sbs)\n    {\n    Console.WriteLine(sbs.ToString());\n    sb.Length = 0;\n    }\n}\n/*\nThis example produces the following results:\n\nStringBuilder.AppendFormat method:\n1) 111\n2) 111, 2.22\n3) 111, 2.22, abcd\n4) 3, 4.4, X\n5) 2,22\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"stringbuilder.appendformat#1\">Imports System\nImports System.Text\nImports System.Globalization\n\nClass Sample\n   Private Shared sb As New StringBuilder()\n\n   Public Shared Sub Main()\n      Dim var1 As Integer = 111\n      Dim var2 As Single = 2.22F\n      Dim var3 As String = &quot;abcd&quot;\n      Dim var4 As Object() =  {3, 4.4, &quot;X&quot;c}\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;StringBuilder.AppendFormat method:&quot;)\n      sb.AppendFormat(&quot;1) {0}&quot;, var1)\n      Show(sb)\n      sb.AppendFormat(&quot;2) {0}, {1}&quot;, var1, var2)\n      Show(sb)\n      sb.AppendFormat(&quot;3) {0}, {1}, {2}&quot;, var1, var2, var3)\n      Show(sb)\n      sb.AppendFormat(&quot;4) {0}, {1}, {2}&quot;, var4)\n      Show(sb)\n      Dim ci As New CultureInfo(&quot;es-ES&quot;, True)\n      sb.AppendFormat(ci, &quot;5) {0}&quot;, var2)\n      Show(sb)\n   End Sub &#39;Main\n   \n   Public Shared Sub Show(sbs As StringBuilder)\n      Console.WriteLine(sbs.ToString())\n      sb.Length = 0\n   End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;StringBuilder.AppendFormat method:\n&#39;1) 111\n&#39;2) 111, 2.22\n&#39;3) 111, 2.22, abcd\n&#39;4) 3, 4.4, X\n&#39;5) 2,22\n</code></pre><pre><code class=\"lang-cpp\" name=\"stringbuilder.appendformat#1\">using namespace System;\nusing namespace System::Text;\nusing namespace System::Globalization;\nvoid Show( StringBuilder^ sbs )\n{\n   Console::WriteLine( sbs );\n   sbs-&gt;Length = 0;\n}\n\nint main()\n{\n   StringBuilder^ sb = gcnew StringBuilder;\n   int var1 = 111;\n   float var2 = 2.22F;\n   String^ var3 = &quot;abcd&quot;;\n   array&lt;Object^&gt;^var4 = {3,4.4,(Char)&#39;X&#39;};\n   Console::WriteLine();\n   Console::WriteLine( &quot;StringBuilder.AppendFormat method:&quot; );\n   sb-&gt;AppendFormat( &quot;1) {0}&quot;, var1 );\n   Show( sb );\n   sb-&gt;AppendFormat( &quot;2) {0}, {1}&quot;, var1, var2 );\n   Show( sb );\n   sb-&gt;AppendFormat( &quot;3) {0}, {1}, {2}&quot;, var1, var2, var3 );\n   Show( sb );\n   sb-&gt;AppendFormat( &quot;4) {0}, {1}, {2}&quot;, var4 );\n   Show( sb );\n   CultureInfo^ ci = gcnew CultureInfo( &quot;es-ES&quot;,true );\n   array&lt;Object^&gt;^temp1 = {var2};\n   sb-&gt;AppendFormat( ci, &quot;5) {0}&quot;, temp1 );\n   Show( sb );\n}\n\n/*\nThis example produces the following results:\n\nStringBuilder.AppendFormat method:\n1) 111\n2) 111, 2.22\n3) 111, 2.22, abcd\n4) 3, 4.4, X\n5) 2,22\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_AppendFormat_System_IFormatProvider_System_String_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_AppendFormat_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendFormat(IFormatProvider,String,Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of two arguments using a specified format provider.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder AppendFormat (IFormatProvider provider, string format, object arg0, object arg1);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A composite format string (see Remarks).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first object to format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second object to format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <code>format</code> where any format specification is replaced by the string representation of the corresponding object argument.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is invalid.  </p>\n<p> -or-  </p>\n<p> The index of a format item is less than 0 (zero), or greater than or equal to 2 (two).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The length of the expanded string would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses the <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite formatting feature</a> of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object.  </p>\n<p> The <code>format</code> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.  </p>\n<p> The syntax of a format item is as follows:  </p>\n<p> {<em>index</em>[,<em>length</em>][:<em>formatString</em>]}  </p>\n<p> Elements in square brackets are optional. The following table describes each element.  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>index</em></td>\n<td>The zero-based position in the parameter list of the object to be formatted. If the object specified by <em>index</em> is <code>null</code>, the format item is replaced by <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>. If there is no parameter in the <em>index</em> position, a <a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a> is thrown.</td>\n</tr>\n<tr>\n<td>,<em>length</em></td>\n<td>The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.</td>\n</tr>\n<tr>\n<td>:<em>formatString</em></td>\n<td>A standard or custom format string that is supported by the parameter.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"NOTE\"><h5>Note</h5><p> For the standard and custom format strings used with date and time values, see <a href=\"../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Date and Time Format Strings</a> and <a href=\"../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Date and Time Format Strings</a>. For the standard and custom format strings used with numeric values, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>. For the standard format strings used with enumerations, see <a href=\"../Topic/Enumeration%20Format%20Strings.md\" data-linktype=\"relative-path\">Enumeration Format Strings</a>.  </p>\n</div>\n<p> The <code>provider</code> parameter specifies an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation that can provide formatting information for <code>arg0</code> and <code>arg1</code>. <code>provider</code> can be any of the following:  </p>\n<ul>\n<li><p>A <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that provides culture-specific formatting information.  </p>\n</li>\n<li><p>A <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides culture-specific formatting information for <code>arg0</code> or <code>arg1</code> if they are numeric values.  </p>\n</li>\n<li><p>A <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that provides culture-specific formatting information for <code>arg0</code> or <code>arg1</code> if they are date and time values.  </p>\n</li>\n<li><p>A custom <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation that provides formatting information for <code>arg0</code> and <code>arg1</code>. Typically, such an implementation also implements the <a class=\"xref\" href=\"system.icustomformatter\" data-linktype=\"relative-path\">ICustomFormatter</a> interface.  </p>\n<p>If the <code>provider</code> parameter is <code>null</code>, format provider information is obtained from the current culture.  </p>\n<p><code>arg0</code> and <code>arg1</code> represent the objects to be formatted. Each format item in <code>format</code> is replaced with the string representation of the object that has the corresponding index. If the format item includes <code>formatString</code> and the corresponding argument implements the <a class=\"xref\" href=\"system.iformattable\" data-linktype=\"relative-path\">IFormattable</a> interface, then the argument&#39;s <code>ToString(formatString, provider)</code> method defines the formatting. Otherwise, the argument&#39;s <code>ToString()</code> method defines the formatting.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the AppendFormat method to display time and temperature data stored in a generic <a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a> object. Note that the format string has three format items, although there are only to objects to format. This is because the first object in the list (a date and time value) is used by two format items: The first format item displays the time, and the second displays the date.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.AppendFormat#3\">using System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Text;\n\npublic class Example\n{\n   public static void Main()\n   {\n      CultureInfo culture = new CultureInfo(&quot;en-US&quot;);\n      StringBuilder sb = new StringBuilder();\n      Dictionary&lt;DateTime, Double&gt; temperatureInfo = new Dictionary&lt;DateTime, Double&gt;(); \n      temperatureInfo.Add(new DateTime(2010, 6, 1, 14, 0, 0), 87.46);\n      temperatureInfo.Add(new DateTime(2010, 12, 1, 10, 0, 0), 36.81);\n      \n\n      sb.AppendLine(&quot;Temperature Information:<br>&quot;);\n      foreach (var item in temperatureInfo)\n      {\n         sb.AppendFormat(culture,\n                         &quot;Temperature at {0,8:t} on {0,9:d}: {1,5:N1}&#176;F<br>&quot;,\n                         item.Key, item.Value);\n      }\n      Console.WriteLine(sb.ToString());\n   }\n}\n// The example displays the following output:\n//       Temperature Information:\n//       \n//       Temperature at  2:00 PM on  6/1/2010:  87.5&#176;F\n//       Temperature at 10:00 AM on 12/1/2010:  36.8&#176;F\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.AppendFormat#3\">Imports System.Collections.Generic\nImports System.Globalization\nImports System.Text\n\nModule Example\n   Public Sub Main()\n      Dim culture As New CultureInfo(&quot;en-US&quot;)\n      Dim sb As New StringBuilder()\n      Dim temperatureInfo As New Dictionary(Of Date, Double) \n      temperatureInfo.Add(#6/1/2010 2:00PM#, 87.46)\n      temperatureInfo.Add(#12/1/2010 10:00AM#, 36.81)\n      \n      sb.AppendLine(&quot;Temperature Information:&quot;).AppendLine()\n      For Each item In temperatureInfo\n         sb.AppendFormat(culture,\n                         &quot;Temperature at {0,8:t} on {0,9:d}: {1,5:N1}&#176;F&quot;,\n                         item.Key, item.Value).AppendLine()\n      Next\n      Console.WriteLine(sb.ToString())\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Temperature Information:\n&#39;       \n&#39;       Temperature at  2:00 PM on  6/1/2010:  87.5&#176;F\n&#39;       Temperature at 10:00 AM on 12/1/2010:  36.8&#176;F\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_AppendFormat_System_String_System_Object_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_AppendFormat_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendFormat(String,Object,Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of three arguments.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder AppendFormat (string format, object arg0, object arg1, object arg2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A composite format string (see Remarks).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first object to format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second object to format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The third object to format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance with <code>format</code> appended. Each format item in <code>format</code> is replaced by the string representation of the corresponding object argument.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is invalid.  </p>\n<p> -or-  </p>\n<p> The index of a format item is less than 0 (zero), or greater than or equal to 3.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The length of the expanded string would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses the <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite formatting feature</a> of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object.  </p>\n<p> The <code>format</code> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to <code>arg0</code> through <code>arg2</code>, the objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.  </p>\n<p> The syntax of a format item is as follows:  </p>\n<p> {<em>index</em>[,<em>length</em>][:<em>formatString</em>]}  </p>\n<p> Elements in square brackets are optional. The following table describes each element.  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>index</em></td>\n<td>The zero-based position in the parameter list of the object to be formatted. If the object specified by <em>index</em> is <code>null</code>, the format item is replaced by <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>. If there is no parameter in the <em>index</em> position, a <a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a> is thrown.</td>\n</tr>\n<tr>\n<td>,<em>length</em></td>\n<td>The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.</td>\n</tr>\n<tr>\n<td>:<em>formatString</em></td>\n<td>A standard or custom format string that is supported by the parameter.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"NOTE\"><h5>Note</h5><p> For the standard and custom format strings used with date and time values, see <a href=\"../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Date and Time Format Strings</a> and <a href=\"../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Date and Time Format Strings</a>. For the standard and custom format strings used with numeric values, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>. For the standard format strings used with enumerations, see <a href=\"../Topic/Enumeration%20Format%20Strings.md\" data-linktype=\"relative-path\">Enumeration Format Strings</a>.  </p>\n</div>\n<p> <code>arg0</code>, <code>arg1</code>, and <code>arg2</code> represent the objects to be formatted. Each format item in <code>format</code> is replaced with the string representation of either <code>arg0</code>, <code>arg1</code>, or <code>arg2</code>, depending on the index of the format item. If the format item includes <code>formatString</code> and the corresponding object in <code>args</code> implements the <a class=\"xref\" href=\"system.iformattable\" data-linktype=\"relative-path\">IFormattable</a> interface, then <code>arg</code><em>x</em><code>.ToString(formatString, null)</code> defines the formatting, where <em>x</em> is the index of the argument. Otherwise, <code>arg</code><em>x</em><code>.ToString()</code> defines the formatting.  </p>\n<p> If the string assigned to <code>format</code> is &quot;Thank you for your donation of {0:####} cans of food to our charitable organization.&quot; and <code>arg0</code> is an integer with the value 10, the return value will be &quot;Thank you for your donation of 10 cans of food to our charitable organization.&quot;</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_AppendFormat_\" data-linktype=\"relative-path\">AppendFormat</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"stringbuilder.appendformat#1\">using System;\nusing System.Text;\nusing System.Globalization;\n\nclass Sample \n{\n    static StringBuilder sb = new StringBuilder();\n\n    public static void Main() \n    {\n    int    var1   = 111;\n    float  var2   = 2.22F;\n    string var3   = &quot;abcd&quot;;\n    object[] var4 = {3, 4.4, &#39;X&#39;};\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;StringBuilder.AppendFormat method:&quot;);\n    sb.AppendFormat(&quot;1) {0}&quot;, var1);\n    Show(sb);\n    sb.AppendFormat(&quot;2) {0}, {1}&quot;, var1, var2);\n    Show(sb);\n    sb.AppendFormat(&quot;3) {0}, {1}, {2}&quot;, var1, var2, var3);\n    Show(sb);\n    sb.AppendFormat(&quot;4) {0}, {1}, {2}&quot;, var4);\n    Show(sb);\n    CultureInfo ci = new CultureInfo(&quot;es-ES&quot;, true);\n    sb.AppendFormat(ci, &quot;5) {0}&quot;, var2);\n    Show(sb);\n    }\n\n    public static void Show(StringBuilder sbs)\n    {\n    Console.WriteLine(sbs.ToString());\n    sb.Length = 0;\n    }\n}\n/*\nThis example produces the following results:\n\nStringBuilder.AppendFormat method:\n1) 111\n2) 111, 2.22\n3) 111, 2.22, abcd\n4) 3, 4.4, X\n5) 2,22\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"stringbuilder.appendformat#1\">Imports System\nImports System.Text\nImports System.Globalization\n\nClass Sample\n   Private Shared sb As New StringBuilder()\n\n   Public Shared Sub Main()\n      Dim var1 As Integer = 111\n      Dim var2 As Single = 2.22F\n      Dim var3 As String = &quot;abcd&quot;\n      Dim var4 As Object() =  {3, 4.4, &quot;X&quot;c}\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;StringBuilder.AppendFormat method:&quot;)\n      sb.AppendFormat(&quot;1) {0}&quot;, var1)\n      Show(sb)\n      sb.AppendFormat(&quot;2) {0}, {1}&quot;, var1, var2)\n      Show(sb)\n      sb.AppendFormat(&quot;3) {0}, {1}, {2}&quot;, var1, var2, var3)\n      Show(sb)\n      sb.AppendFormat(&quot;4) {0}, {1}, {2}&quot;, var4)\n      Show(sb)\n      Dim ci As New CultureInfo(&quot;es-ES&quot;, True)\n      sb.AppendFormat(ci, &quot;5) {0}&quot;, var2)\n      Show(sb)\n   End Sub &#39;Main\n   \n   Public Shared Sub Show(sbs As StringBuilder)\n      Console.WriteLine(sbs.ToString())\n      sb.Length = 0\n   End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;StringBuilder.AppendFormat method:\n&#39;1) 111\n&#39;2) 111, 2.22\n&#39;3) 111, 2.22, abcd\n&#39;4) 3, 4.4, X\n&#39;5) 2,22\n</code></pre><pre><code class=\"lang-cpp\" name=\"stringbuilder.appendformat#1\">using namespace System;\nusing namespace System::Text;\nusing namespace System::Globalization;\nvoid Show( StringBuilder^ sbs )\n{\n   Console::WriteLine( sbs );\n   sbs-&gt;Length = 0;\n}\n\nint main()\n{\n   StringBuilder^ sb = gcnew StringBuilder;\n   int var1 = 111;\n   float var2 = 2.22F;\n   String^ var3 = &quot;abcd&quot;;\n   array&lt;Object^&gt;^var4 = {3,4.4,(Char)&#39;X&#39;};\n   Console::WriteLine();\n   Console::WriteLine( &quot;StringBuilder.AppendFormat method:&quot; );\n   sb-&gt;AppendFormat( &quot;1) {0}&quot;, var1 );\n   Show( sb );\n   sb-&gt;AppendFormat( &quot;2) {0}, {1}&quot;, var1, var2 );\n   Show( sb );\n   sb-&gt;AppendFormat( &quot;3) {0}, {1}, {2}&quot;, var1, var2, var3 );\n   Show( sb );\n   sb-&gt;AppendFormat( &quot;4) {0}, {1}, {2}&quot;, var4 );\n   Show( sb );\n   CultureInfo^ ci = gcnew CultureInfo( &quot;es-ES&quot;,true );\n   array&lt;Object^&gt;^temp1 = {var2};\n   sb-&gt;AppendFormat( ci, &quot;5) {0}&quot;, temp1 );\n   Show( sb );\n}\n\n/*\nThis example produces the following results:\n\nStringBuilder.AppendFormat method:\n1) 111\n2) 111, 2.22\n3) 111, 2.22, abcd\n4) 3, 4.4, X\n5) 2,22\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_AppendFormat_System_IFormatProvider_System_String_System_Object_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_AppendFormat_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendFormat(IFormatProvider,String,Object,Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of three arguments using a specified format provider.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder AppendFormat (IFormatProvider provider, string format, object arg0, object arg1, object arg2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A composite format string (see Remarks).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first object to format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second object to format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The third object to format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <code>format</code> where any format specification is replaced by the string representation of the corresponding object argument.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is invalid.  </p>\n<p> -or-  </p>\n<p> The index of a format item is less than 0 (zero), or greater than or equal to 3 (three).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The length of the expanded string would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses the <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite formatting feature</a> of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object.  </p>\n<p> The <code>format</code> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.  </p>\n<p> The syntax of a format item is as follows:  </p>\n<p> {<em>index</em>[,<em>length</em>][:<em>formatString</em>]}  </p>\n<p> Elements in square brackets are optional. The following table describes each element.  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>index</em></td>\n<td>The zero-based position in the parameter list of the object to be formatted. If the object specified by <em>index</em> is <code>null</code>, the format item is replaced by <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>. If there is no parameter in the <em>index</em> position, a <a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a> is thrown.</td>\n</tr>\n<tr>\n<td>,<em>length</em></td>\n<td>The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.</td>\n</tr>\n<tr>\n<td>:<em>formatString</em></td>\n<td>A standard or custom format string that is supported by the parameter.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"NOTE\"><h5>Note</h5><p> For the standard and custom format strings used with date and time values, see <a href=\"../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Date and Time Format Strings</a> and <a href=\"../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Date and Time Format Strings</a>. For the standard and custom format strings used with numeric values, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>. For the standard format strings used with enumerations, see <a href=\"../Topic/Enumeration%20Format%20Strings.md\" data-linktype=\"relative-path\">Enumeration Format Strings</a>.  </p>\n</div>\n<p> The <code>provider</code> parameter specifies an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation that can provide formatting information for <code>arg0</code> and <code>arg1</code>. <code>provider</code> can be any of the following:  </p>\n<ul>\n<li><p>A <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that provides culture-specific formatting information.  </p>\n</li>\n<li><p>A <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that provides culture-specific formatting information for <code>arg0</code> or <code>arg1</code> if they are numeric values.  </p>\n</li>\n<li><p>A <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that provides culture-specific formatting information for <code>arg0</code>, <code>arg1</code>, or <code>arg2</code> if they are date and time values.  </p>\n</li>\n<li><p>A custom <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation that provides formatting information for <code>arg0</code>,  <code>arg1</code>, and <code>arg2</code>. Typically, such an implementation also implements the <a class=\"xref\" href=\"system.icustomformatter\" data-linktype=\"relative-path\">ICustomFormatter</a> interface.  </p>\n<p>If the <code>provider</code> parameter is <code>null</code>, format provider information is obtained from the current culture.  </p>\n<p><code>arg0</code>, <code>arg1</code>, and <code>arg2</code> represent the objects to be formatted. Each format item in <code>format</code> is replaced with the string representation of the object that has the corresponding index. If the format item includes <code>formatString</code> and the corresponding argument implements the <a class=\"xref\" href=\"system.iformattable\" data-linktype=\"relative-path\">IFormattable</a> interface, then the argument&#39;s <code>ToString(formatString, provider)</code> method defines the formatting. Otherwise, the argument&#39;s <code>ToString()</code> method defines the formatting.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the AppendFormat method to illustrate the result of a Boolean <code>And</code> operation with integer values. Note that the format string includes six format items, but the method has only three items in its argument list, because each item is formatted in two different ways.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.AppendFormat#4\">Imports System.Globalization\nImports System.Text\n\nPublic Module Example\n   Public Sub Main()\n      Dim rnd As New Random()\n      Dim culture As CultureInfo = CultureInfo.CreateSpecificCulture(&quot;fr-FR&quot;)\n      Dim sb As New StringBuilder()\n      Dim formatString As String = &quot;    {0,12:N0} ({0,8:X8})&quot; + vbCrLf +\n                                   &quot;And {1,12:N0} ({1,8:X8})&quot; + vbCrLf +\n                                   &quot;  = {2,12:N0} ({2,8:X8})&quot; + vbCrLf\n      For ctr As Integer = 0 To 2\n         Dim value1 As Integer = rnd.Next()\n         Dim value2 As Integer = rnd.Next()\n         sb.AppendFormat(culture, formatString,\n                         value1, value2, value1 And value2).AppendLine()\n      Next\n      Console.WriteLine(sb.ToString())\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;           1&#160;984&#160;112&#160;195 (76432643)\n&#39;       And 1&#160;179&#160;778&#160;511 (4651FDCF)\n&#39;         = 1&#160;178&#160;674&#160;243 (46412443)\n&#39;\n&#39;           2&#160;034&#160;813&#160;710 (7948CB0E)\n&#39;       And  569&#160;333&#160;976 (21EF58D8)\n&#39;         =  558&#160;385&#160;160 (21484808)\n&#39;\n&#39;            126&#160;717&#160;735 (078D8F27)\n&#39;       And 1&#160;830&#160;715&#160;973 (6D1E8245)\n&#39;         =   84&#160;705&#160;797 (050C8205)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.AppendFormat#4\">using System;\nusing System.Globalization;\nusing System.Text;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Random rnd = new Random();\n      CultureInfo culture = CultureInfo.CreateSpecificCulture(&quot;fr-FR&quot;);\n      StringBuilder sb = new StringBuilder();\n      string formatString = &quot;    {0,12:N0} ({0,8:X8})<br>&quot; +\n                            &quot;And {1,12:N0} ({1,8:X8})<br>&quot; +\n                            &quot;  = {2,12:N0} ({2,8:X8})<br>&quot;;\n      for (int ctr = 0; ctr &lt;= 2; ctr++) {\n         int value1 = rnd.Next();\n         int value2 = rnd.Next();\n         sb.AppendFormat(culture, formatString,\n                         value1, value2, value1 &amp; value2).\n                         AppendLine();\n      }\n      Console.WriteLine(sb.ToString());\n   }\n}\n// The example displays output like the following:\n//           1&#160;984&#160;112&#160;195 (76432643)\n//       And 1&#160;179&#160;778&#160;511 (4651FDCF)\n//         = 1&#160;178&#160;674&#160;243 (46412443)\n//\n//           2&#160;034&#160;813&#160;710 (7948CB0E)\n//       And  569&#160;333&#160;976 (21EF58D8)\n//         =  558&#160;385&#160;160 (21484808)\n//\n//            126&#160;717&#160;735 (078D8F27)\n//       And 1&#160;830&#160;715&#160;973 (6D1E8245)\n//         =   84&#160;705&#160;797 (050C8205)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_AppendLine\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_AppendLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendLine()</div>        \r\n          </div>\r\n    \r\n            <p>Appends the default line terminator to the end of the current <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder AppendLine ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the append operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default line terminator is the current value of the <a class=\"xref\" href=\"system.environment#System_Environment_NewLine_\" data-linktype=\"relative-path\">NewLine</a> property.  </p>\n<p> The capacity of this instance is adjusted as needed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_AppendLine_\" data-linktype=\"relative-path\">AppendLine</a> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"stringbuilder.appendline#1\">// This example demonstrates the StringBuilder.AppendLine()\n// method.\n\nusing namespace System;\nusing namespace System::Text;\n\nint main()\n{\n    StringBuilder^ sb = gcnew StringBuilder;\n    String^ line = L&quot;A line of text.&quot;;\n    int number = 123;\n\n    // Append two lines of text.\n    sb-&gt;AppendLine( L&quot;The first line of text.&quot; );\n    sb-&gt;AppendLine( line );\n\n    // Append a new line, an empty string, and a null cast as a string.\n    sb-&gt;AppendLine();\n    sb-&gt;AppendLine( L&quot;&quot; );\n    sb-&gt;AppendLine( L&quot;&quot; );\n\n    // Append the non-string value, 123, and two new lines.\n    sb-&gt;Append( number )-&gt;AppendLine()-&gt;AppendLine();\n\n    // Append two lines of text.\n    sb-&gt;AppendLine( line );\n    sb-&gt;AppendLine( L&quot;The last line of text.&quot; );\n\n    // Convert the value of the StringBuilder to a string and display the string.\n    Console::WriteLine( sb );\n\n    return 0;\n}\n\n/*\nThis example produces the following results:\n\nThe first line of text.\nA line of text.\n\n\n\n123\n\nA line of text.\nThe last line of text.\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"stringbuilder.appendline#1\">// This example demonstrates the StringBuilder.AppendLine() \n// method.\n\nusing System;\nusing System.Text;\n\nclass Sample \n{\n    public static void Main() \n    {\n    StringBuilder sb = new StringBuilder();\n    string        line = &quot;A line of text.&quot;;\n    int           number = 123;\n\n// Append two lines of text.\n    sb.AppendLine(&quot;The first line of text.&quot;);\n    sb.AppendLine(line);\n\n// Append a new line, an empty string, and a null cast as a string.\n    sb.AppendLine();\n    sb.AppendLine(&quot;&quot;);\n    sb.AppendLine((string)null);\n\n// Append the non-string value, 123, and two new lines.\n    sb.Append(number).AppendLine().AppendLine();\n\n// Append two lines of text.\n    sb.AppendLine(line);\n    sb.AppendLine(&quot;The last line of text.&quot;);\n\n// Convert the value of the StringBuilder to a string and display the string.\n    Console.WriteLine(sb.ToString());\n    }\n}\n/*\nThis example produces the following results:\n\nThe first line of text.\nA line of text.\n\n\n\n123\n\nA line of text.\nThe last line of text.\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"stringbuilder.appendline#1\">&#39; This example demonstrates the StringBuilder.AppendLine() \n&#39; method.\nImports System\nImports System.Text\n\nClass Sample\n   Public Shared Sub Main()\n      Dim sb As New StringBuilder()\n      Dim line As String = &quot;A line of text.&quot;\n      Dim number As Integer = 123\n      \n      &#39; Append two lines of text.\n      sb.AppendLine(&quot;The first line of text.&quot;)\n      sb.AppendLine(line)\n      \n      &#39; Append a new line, an empty string, and a null cast as a string.\n      sb.AppendLine()\n      sb.AppendLine(&quot;&quot;)\n      sb.AppendLine(CStr(Nothing))\n      \n      &#39; Append the non-string value, 123, and two new lines.\n      sb.Append(number).AppendLine().AppendLine()\n      \n      &#39; Append two lines of text.\n      sb.AppendLine(line)\n      sb.AppendLine(&quot;The last line of text.&quot;)\n      \n      &#39; Convert the value of the StringBuilder to a string and display the string.\n      Console.WriteLine(sb.ToString())\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;The first line of text.\n&#39;A line of text.\n&#39;\n&#39;\n&#39;\n&#39;123\n&#39;\n&#39;A line of text.\n&#39;The last line of text.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_AppendLine_System_String_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_AppendLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendLine(String)</div>        \r\n          </div>\r\n    \r\n            <p>Appends a copy of the specified string followed by the default line terminator to the end of the current <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder AppendLine (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to append.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the append operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default line terminator is the current value of the <a class=\"xref\" href=\"system.environment#System_Environment_NewLine_\" data-linktype=\"relative-path\">NewLine</a> property.  </p>\n<p> The capacity of this instance is adjusted as needed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Clear\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Clear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clear()</div>        \r\n          </div>\r\n    \r\n            <p>Removes all characters from the current <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Clear ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>An object whose <span class=\"xref\">stem.Text.StringBuilder.Length*</span> is 0 (zero).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Clear is a convenience method that is equivalent to setting the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Length_\" data-linktype=\"relative-path\">Length</a> property of the current instance to 0 (zero).  </p>\n<p> Calling the Clear method does not modify the current instance&#39;s <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Capacity_\" data-linktype=\"relative-path\">Capacity</a> or <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_MaxCapacity_\" data-linktype=\"relative-path\">MaxCapacity</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example instantiates a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object with a string, calls the Clear method, and then appends a new string.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.StringBuilder.Clear#1\">Imports System.Text\n\nModule Example\n   Public Sub Main()\n      Dim sb As New StringBuilder(&quot;This is a string.&quot;)\n      Console.WriteLine(&quot;{0} ({1} characters)&quot;, sb.ToString(), sb.Length)\n      \n      sb.Clear()\n      Console.WriteLine(&quot;{0} ({1} characters)&quot;, sb.ToString(), sb.Length)\n\n      sb.Append(&quot;This is a second string.&quot;)\n      Console.WriteLine(&quot;{0} ({1} characters)&quot;, sb.ToString(), sb.Length)\n   End Sub            \nEnd Module\n&#39; The example displays the following output:\n&#39;       This is a string. (17 characters)\n&#39;        (0 characters)\n&#39;       This is a second string. (24 characters)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.StringBuilder.Clear#1\">using System;\nusing System.Text;\n\npublic class Class1\n{\n   public static void Main()\n   {\n      StringBuilder sb = new StringBuilder(&quot;This is a string.&quot;);\n      Console.WriteLine(&quot;{0} ({1} characters)&quot;, sb.ToString(), sb.Length);\n      \n      sb.Clear();\n      Console.WriteLine(&quot;{0} ({1} characters)&quot;, sb.ToString(), sb.Length);\n\n      sb.Append(&quot;This is a second string.&quot;);\n      Console.WriteLine(&quot;{0} ({1} characters)&quot;, sb.ToString(), sb.Length);\n   }\n}\n// The example displays the following output:\n//       This is a string. (17 characters)\n//        (0 characters)\n//       This is a second string. (24 characters)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_CopyTo_System_Int32_System_Char___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_CopyTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CopyTo(Int32,Char[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the characters from a specified segment of this instance to a specified segment of a destination <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void CopyTo (int sourceIndex, char[] destination, int destinationIndex, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>sourceIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting position in this instance where characters will be copied from. The index is zero-based.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destination</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The array where characters will be copied.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destinationIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting position in <code>destination</code> where characters will be copied. The index is zero-based.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters to be copied.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>destination</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>sourceIndex</code>, <code>destinationIndex</code>, or <code>count</code>, is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>sourceIndex</code> is greater than the length of this instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>sourceIndex</code> + <code>count</code> is greater than the length of this instance.  </p>\n<p> -or-  </p>\n<p> <code>destinationIndex</code> + <code>count</code> is greater than the length of <code>destination</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The CopyTo method is intended to be used in the rare situation when you need to efficiently copy successive sections of a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object to an array. The array should be a fixed size, preallocated, reusable, and possibly globally accessible.  </p>\n<p> For example, your application could populate a <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object with a large number of characters then use the CopyTo method to copy small, successive pieces of the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object to an array where the pieces are processed. When all the data in the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object is processed, the size of the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object is set to zero and the cycle is repeated.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the CopyTo method.  </p>\n<pre><code class=\"lang-vb\" name=\"stringbuilder.copyto2#1\">&#39; Typically the destination array is small, preallocated, and global while \n&#39; the StringBuilder is large with programmatically defined data. \n&#39; However, for this example both the array and StringBuilder are small \n&#39; and the StringBuilder has predefined data.\n\nImports System.Text\n\nClass Sample\n   Protected Shared dest(5) As Char\n   \n   Public Shared Sub Main()\n      Dim src As New StringBuilder(&quot;abcdefghijklmnopqrstuvwxyz!&quot;)\n      dest(1) = &quot;)&quot;c\n      dest(2) = &quot; &quot;c\n      \n      &#39; Copy the source to the destination in 9 pieces, 3 characters per piece.\n      Console.WriteLine(vbCrLf &amp; &quot;Piece) Data:&quot;)\n      Dim ix As Integer\n      For ix = 0 To 8\n         dest(0) = ix.ToString()(0)\n         src.CopyTo(ix * 3, dest, 3, 3)\n         Console.Write(&quot;    &quot;)\n         Console.WriteLine(dest)\n      Next ix\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39; This example produces the following results:\n&#39;\n&#39; Piece) Data:\n&#39;     0) abc\n&#39;     1) def\n&#39;     2) ghi\n&#39;     3) jkl\n&#39;     4) mno\n&#39;     5) pqr\n&#39;     6) stu\n&#39;     7) vwx\n&#39;     8) yz!\n</code></pre><pre><code class=\"lang-cs\" name=\"stringbuilder.copyto2#1\">// This example demonstrates the CopyTo(Int32, Char[], Int32, Int32) method.\n\n// Typically the destination array is small, preallocated, and global while \n// the StringBuilder is large with programmatically defined data. \n// However, for this example both the array and StringBuilder are small \n// and the StringBuilder has predefined data.\n\nusing System;\nusing System.Text;\n\nclass Sample \n{\n    protected static char[] dest = new char[6];\n    public static void Main() \n    {\n    StringBuilder src = new StringBuilder(&quot;abcdefghijklmnopqrstuvwxyz!&quot;);\n    dest[1] = &#39;)&#39;;\n    dest[2] = &#39; &#39;;\n\n// Copy the source to the destination in 9 pieces, 3 characters per piece.\n\n    Console.WriteLine(&quot;<br>Piece) Data:&quot;);\n    for(int ix = 0; ix &lt; 9; ix++)\n        {\n        dest[0] = ix.ToString()[0];\n        src.CopyTo(ix * 3, dest, 3, 3);\n        Console.Write(&quot;    &quot;);\n        Console.WriteLine(dest);\n        }\n    }\n}\n/*\nThis example produces the following results:\n\nPiece) Data:\n    0) abc\n    1) def\n    2) ghi\n    3) jkl\n    4) mno\n    5) pqr\n    6) stu\n    7) vwx\n    8) yz!\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"stringbuilder.copyto2#1\">// This example demonstrates the CopyTo(Int32, Char[], Int32, Int32) method.\n// Typically the destination array is small, preallocated, and global while \n// the StringBuilder is large with programmatically defined data. \n// However, for this example both the array and StringBuilder are small \n// and the StringBuilder has predefined data.\n\nusing namespace System;\nusing namespace System::Text;\n\nint main()\n{\n   array&lt;Char&gt;^dest = gcnew array&lt;Char&gt;(6);\n   StringBuilder^ src = gcnew StringBuilder( &quot;abcdefghijklmnopqrstuvwxyz!&quot; );\n   dest[ 1 ] = &#39;)&#39;;\n   dest[ 2 ] = &#39; &#39;;\n\n   // Copy the source to the destination in 9 pieces, 3 characters per piece.\n   Console::WriteLine( &quot;<br>Piece) Data:&quot; );\n   for ( int ix = 0; ix &lt; 9; ix++ )\n   {\n      dest[ 0 ] = ix.ToString()[ 0 ];\n      src-&gt;CopyTo( ix * 3, dest, 3, 3 );\n      Console::Write( &quot;    &quot; );\n      Console::WriteLine( dest );\n   }\n}\n\n/*\nThis example produces the following results:\n\nPiece) Data:\n    0) abc\n    1) def\n    2) ghi\n    3) jkl\n    4) mno\n    5) pqr\n    6) stu\n    7) vwx\n    8) yz!\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_EnsureCapacity_System_Int32_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_EnsureCapacity_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnsureCapacity(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Ensures that the capacity of this instance of <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> is at least the specified value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int EnsureCapacity (int capacity);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>capacity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The minimum capacity to ensure.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The new capacity of this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>capacity</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the current capacity is less than the <code>capacity</code> parameter, memory for this instance is reallocated to hold at least <code>capacity</code> number of characters; otherwise, no memory is changed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the EnsureCapacity method.  </p>\n<pre><code class=\"lang-cpp\" name=\"stringbuilder.ensurecapacity#1\">using namespace System;\nusing namespace System::Text;\nint main()\n{\n   StringBuilder^ sb1 = gcnew StringBuilder( &quot;abc&quot; );\n   StringBuilder^ sb2 = gcnew StringBuilder( &quot;abc&quot;,16 );\n   Console::WriteLine();\n   Console::WriteLine( &quot;a1) sb1-&gt;Length = {0}, sb1-&gt;Capacity = {1}&quot;, sb1-&gt;Length, sb1-&gt;Capacity );\n   Console::WriteLine( &quot;a2) sb2-&gt;Length = {0}, sb2-&gt;Capacity = {1}&quot;, sb2-&gt;Length, sb2-&gt;Capacity );\n   Console::WriteLine( &quot;a3) sb1 = \\&quot;{0}\\&quot;, sb2 = \\&quot;{1}\\&quot;&quot;, sb1, sb2 );\n   Console::WriteLine( &quot;a4) sb1 equals sb2: {0}&quot;, sb1-&gt;Equals( sb2 ) );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Ensure sb1 has a capacity of at least 50 characters.&quot; );\n   sb1-&gt;EnsureCapacity( 50 );\n   Console::WriteLine();\n   Console::WriteLine( &quot;b1) sb1-&gt;Length = {0}, sb1-&gt;Capacity = {1}&quot;, sb1-&gt;Length, sb1-&gt;Capacity );\n   Console::WriteLine( &quot;b2) sb2-&gt;Length = {0}, sb2-&gt;Capacity = {1}&quot;, sb2-&gt;Length, sb2-&gt;Capacity );\n   Console::WriteLine( &quot;b3) sb1 = \\&quot;{0}\\&quot;, sb2 = \\&quot;{1}\\&quot;&quot;, sb1, sb2 );\n   Console::WriteLine( &quot;b4) sb1 equals sb2: {0}&quot;, sb1-&gt;Equals( sb2 ) );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Set the length of sb1 to zero.&quot; );\n   Console::WriteLine( &quot;Set the capacity of sb2 to 51 characters.&quot; );\n   sb1-&gt;Length = 0;\n   sb2-&gt;Capacity = 51;\n   Console::WriteLine();\n   Console::WriteLine( &quot;c1) sb1-&gt;Length = {0}, sb1-&gt;Capacity = {1}&quot;, sb1-&gt;Length, sb1-&gt;Capacity );\n   Console::WriteLine( &quot;c2) sb2-&gt;Length = {0}, sb2-&gt;Capacity = {1}&quot;, sb2-&gt;Length, sb2-&gt;Capacity );\n   Console::WriteLine( &quot;c3) sb1 = \\&quot;{0}\\&quot;, sb2 = \\&quot;{1}\\&quot;&quot;, sb1, sb2 );\n   Console::WriteLine( &quot;c4) sb1 equals sb2: {0}&quot;, sb1-&gt;Equals( sb2 ) );\n}\n\n/*\nThe example displays the following output:\n\na1) sb1-&gt;Length = 3, sb1-&gt;Capacity = 16\na2) sb2-&gt;Length = 3, sb2-&gt;Capacity = 16\na3) sb1 = &quot;abc&quot;, sb2 = &quot;abc&quot;\na4) sb1 equals sb2: True\n\nEnsure sb1 has a capacity of at least 50 characters.\n\nb1) sb1-&gt;Length = 3, sb1-&gt;Capacity = 50\nb2) sb2-&gt;Length = 3, sb2-&gt;Capacity = 16\nb3) sb1 = &quot;abc&quot;, sb2 = &quot;abc&quot;\nb4) sb1 equals sb2: False\n\nSet the length of sb1 to zero.\nSet the capacity of sb2 to 51 characters.\n\nc1) sb1-&gt;Length = 0, sb1-&gt;Capacity = 50\nc2) sb2-&gt;Length = 3, sb2-&gt;Capacity = 51\nc3) sb1 = &quot;&quot;, sb2 = &quot;abc&quot;\nc4) sb1 equals sb2: False\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"stringbuilder.ensurecapacity#1\">using System;\nusing System.Text;\n\nclass Sample \n{\n    public static void Main() \n    {\n    StringBuilder sb1 = new StringBuilder(&quot;abc&quot;);\n    StringBuilder sb2 = new StringBuilder(&quot;abc&quot;, 16);\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;a1) sb1.Length = {0}, sb1.Capacity = {1}&quot;, sb1.Length, sb1.Capacity);\n    Console.WriteLine(&quot;a2) sb2.Length = {0}, sb2.Capacity = {1}&quot;, sb2.Length, sb2.Capacity);\n    Console.WriteLine(&quot;a3) sb1.ToString() = \\&quot;{0}\\&quot;, sb2.ToString() = \\&quot;{1}\\&quot;&quot;, \n                           sb1.ToString(),       sb2.ToString());\n    Console.WriteLine(&quot;a4) sb1 equals sb2: {0}&quot;, sb1.Equals(sb2));\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;Ensure sb1 has a capacity of at least 50 characters.&quot;);\n    sb1.EnsureCapacity(50);\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;b1) sb1.Length = {0}, sb1.Capacity = {1}&quot;, sb1.Length, sb1.Capacity);\n    Console.WriteLine(&quot;b2) sb2.Length = {0}, sb2.Capacity = {1}&quot;, sb2.Length, sb2.Capacity);\n    Console.WriteLine(&quot;b3) sb1.ToString() = \\&quot;{0}\\&quot;, sb2.ToString() = \\&quot;{1}\\&quot;&quot;, \n                           sb1.ToString(),       sb2.ToString());\n    Console.WriteLine(&quot;b4) sb1 equals sb2: {0}&quot;, sb1.Equals(sb2));\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;Set the length of sb1 to zero.&quot;);\n    Console.WriteLine(&quot;Set the capacity of sb2 to 51 characters.&quot;);\n    sb1.Length = 0;\n    sb2.Capacity = 51;\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;c1) sb1.Length = {0}, sb1.Capacity = {1}&quot;, sb1.Length, sb1.Capacity);\n    Console.WriteLine(&quot;c2) sb2.Length = {0}, sb2.Capacity = {1}&quot;, sb2.Length, sb2.Capacity);\n    Console.WriteLine(&quot;c3) sb1.ToString() = \\&quot;{0}\\&quot;, sb2.ToString() = \\&quot;{1}\\&quot;&quot;, \n                           sb1.ToString(),       sb2.ToString());\n    Console.WriteLine(&quot;c4) sb1 equals sb2: {0}&quot;, sb1.Equals(sb2));\n    }\n}\n/*\nThe example displays the following output:\n\na1) sb1.Length = 3, sb1.Capacity = 16\na2) sb2.Length = 3, sb2.Capacity = 16\na3) sb1.ToString() = &quot;abc&quot;, sb2.ToString() = &quot;abc&quot;\na4) sb1 equals sb2: True\n\nEnsure sb1 has a capacity of at least 50 characters.\n\nb1) sb1.Length = 3, sb1.Capacity = 50\nb2) sb2.Length = 3, sb2.Capacity = 16\nb3) sb1.ToString() = &quot;abc&quot;, sb2.ToString() = &quot;abc&quot;\nb4) sb1 equals sb2: False\n\nSet the length of sb1 to zero.\nSet the capacity of sb2 to 51 characters.\n\nc1) sb1.Length = 0, sb1.Capacity = 50\nc2) sb2.Length = 3, sb2.Capacity = 51\nc3) sb1.ToString() = &quot;&quot;, sb2.ToString() = &quot;abc&quot;\nc4) sb1 equals sb2: False\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"stringbuilder.ensurecapacity#1\">Imports System.Text\n\nClass Sample\n   Public Shared Sub Main()\n      Dim sb1 As New StringBuilder(&quot;abc&quot;)\n      Dim sb2 As New StringBuilder(&quot;abc&quot;, 16)\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;a1) sb1.Length = {0}, sb1.Capacity = {1}&quot;, sb1.Length, sb1.Capacity)\n      Console.WriteLine(&quot;a2) sb2.Length = {0}, sb2.Capacity = {1}&quot;, sb2.Length, sb2.Capacity)\n      Console.WriteLine(&quot;a3) sb1.ToString() = &quot;&quot;{0}&quot;&quot;, sb2.ToString() = &quot;&quot;{1}&quot;&quot;&quot;, _\n                             sb1.ToString(),           sb2.ToString())\n      Console.WriteLine(&quot;a4) sb1 equals sb2: {0}&quot;, sb1.Equals(sb2))\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;Ensure sb1 has a capacity of at least 50 characters.&quot;)\n      sb1.EnsureCapacity(50)\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;b1) sb1.Length = {0}, sb1.Capacity = {1}&quot;, sb1.Length, sb1.Capacity)\n      Console.WriteLine(&quot;b2) sb2.Length = {0}, sb2.Capacity = {1}&quot;, sb2.Length, sb2.Capacity)\n      Console.WriteLine(&quot;b3) sb1.ToString() = &quot;&quot;{0}&quot;&quot;, sb2.ToString() = &quot;&quot;{1}&quot;&quot;&quot;, _\n                             sb1.ToString(),           sb2.ToString())\n      Console.WriteLine(&quot;b4) sb1 equals sb2: {0}&quot;, sb1.Equals(sb2))\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;Set the length of sb1 to zero.&quot;)\n      Console.WriteLine(&quot;Set the capacity of sb2 to 51 characters.&quot;)\n      sb1.Length = 0\n      sb2.Capacity = 51\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;c1) sb1.Length = {0}, sb1.Capacity = {1}&quot;, sb1.Length, sb1.Capacity)\n      Console.WriteLine(&quot;c2) sb2.Length = {0}, sb2.Capacity = {1}&quot;, sb2.Length, sb2.Capacity)\n      Console.WriteLine(&quot;c3) sb1.ToString() = &quot;&quot;{0}&quot;&quot;, sb2.ToString() = &quot;&quot;{1}&quot;&quot;&quot;, _\n                             sb1.ToString(),           sb2.ToString())\n      Console.WriteLine(&quot;c4) sb1 equals sb2: {0}&quot;, sb1.Equals(sb2))\n   End Sub \nEnd Class\n&#39;The example displays the following output:\n&#39;       a1) sb1.Length = 3, sb1.Capacity = 16\n&#39;       a2) sb2.Length = 3, sb2.Capacity = 16\n&#39;       a3) sb1.ToString() = &quot;abc&quot;, sb2.ToString() = &quot;abc&quot;\n&#39;       a4) sb1 equals sb2: True\n&#39;       \n&#39;       Ensure sb1 has a capacity of at least 50 characters.\n&#39;       \n&#39;       b1) sb1.Length = 3, sb1.Capacity = 50\n&#39;       b2) sb2.Length = 3, sb2.Capacity = 16\n&#39;       b3) sb1.ToString() = &quot;abc&quot;, sb2.ToString() = &quot;abc&quot;\n&#39;       b4) sb1 equals sb2: False\n&#39;       \n&#39;       Set the length of sb1 to zero.\n&#39;       Set the capacity of sb2 to 51 characters.\n&#39;       \n&#39;       c1) sb1.Length = 0, sb1.Capacity = 50\n&#39;       c2) sb2.Length = 3, sb2.Capacity = 51\n&#39;       c3) sb1.ToString() = &quot;&quot;, sb2.ToString() = &quot;abc&quot;\n&#39;       c4) sb1 equals sb2: False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Equals_System_Text_StringBuilder_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(StringBuilder)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value indicating whether this instance is equal to a specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Equals (System.Text.StringBuilder sb);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>sb</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare with this instance, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this instance and <code>sb</code> have equal string, <span class=\"xref\">stem.Text.StringBuilder.Capacity*</span>, and <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span> values; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code uses the Equals method to check whether two <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> objects are equal. The method is called repeatedly after small changes are made to each object, and the results are displayed to the console.  </p>\n<pre><code class=\"lang-cpp\" name=\"stringbuilder.ensurecapacity#1\">using namespace System;\nusing namespace System::Text;\nint main()\n{\n   StringBuilder^ sb1 = gcnew StringBuilder( &quot;abc&quot; );\n   StringBuilder^ sb2 = gcnew StringBuilder( &quot;abc&quot;,16 );\n   Console::WriteLine();\n   Console::WriteLine( &quot;a1) sb1-&gt;Length = {0}, sb1-&gt;Capacity = {1}&quot;, sb1-&gt;Length, sb1-&gt;Capacity );\n   Console::WriteLine( &quot;a2) sb2-&gt;Length = {0}, sb2-&gt;Capacity = {1}&quot;, sb2-&gt;Length, sb2-&gt;Capacity );\n   Console::WriteLine( &quot;a3) sb1 = \\&quot;{0}\\&quot;, sb2 = \\&quot;{1}\\&quot;&quot;, sb1, sb2 );\n   Console::WriteLine( &quot;a4) sb1 equals sb2: {0}&quot;, sb1-&gt;Equals( sb2 ) );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Ensure sb1 has a capacity of at least 50 characters.&quot; );\n   sb1-&gt;EnsureCapacity( 50 );\n   Console::WriteLine();\n   Console::WriteLine( &quot;b1) sb1-&gt;Length = {0}, sb1-&gt;Capacity = {1}&quot;, sb1-&gt;Length, sb1-&gt;Capacity );\n   Console::WriteLine( &quot;b2) sb2-&gt;Length = {0}, sb2-&gt;Capacity = {1}&quot;, sb2-&gt;Length, sb2-&gt;Capacity );\n   Console::WriteLine( &quot;b3) sb1 = \\&quot;{0}\\&quot;, sb2 = \\&quot;{1}\\&quot;&quot;, sb1, sb2 );\n   Console::WriteLine( &quot;b4) sb1 equals sb2: {0}&quot;, sb1-&gt;Equals( sb2 ) );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Set the length of sb1 to zero.&quot; );\n   Console::WriteLine( &quot;Set the capacity of sb2 to 51 characters.&quot; );\n   sb1-&gt;Length = 0;\n   sb2-&gt;Capacity = 51;\n   Console::WriteLine();\n   Console::WriteLine( &quot;c1) sb1-&gt;Length = {0}, sb1-&gt;Capacity = {1}&quot;, sb1-&gt;Length, sb1-&gt;Capacity );\n   Console::WriteLine( &quot;c2) sb2-&gt;Length = {0}, sb2-&gt;Capacity = {1}&quot;, sb2-&gt;Length, sb2-&gt;Capacity );\n   Console::WriteLine( &quot;c3) sb1 = \\&quot;{0}\\&quot;, sb2 = \\&quot;{1}\\&quot;&quot;, sb1, sb2 );\n   Console::WriteLine( &quot;c4) sb1 equals sb2: {0}&quot;, sb1-&gt;Equals( sb2 ) );\n}\n\n/*\nThe example displays the following output:\n\na1) sb1-&gt;Length = 3, sb1-&gt;Capacity = 16\na2) sb2-&gt;Length = 3, sb2-&gt;Capacity = 16\na3) sb1 = &quot;abc&quot;, sb2 = &quot;abc&quot;\na4) sb1 equals sb2: True\n\nEnsure sb1 has a capacity of at least 50 characters.\n\nb1) sb1-&gt;Length = 3, sb1-&gt;Capacity = 50\nb2) sb2-&gt;Length = 3, sb2-&gt;Capacity = 16\nb3) sb1 = &quot;abc&quot;, sb2 = &quot;abc&quot;\nb4) sb1 equals sb2: False\n\nSet the length of sb1 to zero.\nSet the capacity of sb2 to 51 characters.\n\nc1) sb1-&gt;Length = 0, sb1-&gt;Capacity = 50\nc2) sb2-&gt;Length = 3, sb2-&gt;Capacity = 51\nc3) sb1 = &quot;&quot;, sb2 = &quot;abc&quot;\nc4) sb1 equals sb2: False\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"stringbuilder.ensurecapacity#1\">using System;\nusing System.Text;\n\nclass Sample \n{\n    public static void Main() \n    {\n    StringBuilder sb1 = new StringBuilder(&quot;abc&quot;);\n    StringBuilder sb2 = new StringBuilder(&quot;abc&quot;, 16);\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;a1) sb1.Length = {0}, sb1.Capacity = {1}&quot;, sb1.Length, sb1.Capacity);\n    Console.WriteLine(&quot;a2) sb2.Length = {0}, sb2.Capacity = {1}&quot;, sb2.Length, sb2.Capacity);\n    Console.WriteLine(&quot;a3) sb1.ToString() = \\&quot;{0}\\&quot;, sb2.ToString() = \\&quot;{1}\\&quot;&quot;, \n                           sb1.ToString(),       sb2.ToString());\n    Console.WriteLine(&quot;a4) sb1 equals sb2: {0}&quot;, sb1.Equals(sb2));\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;Ensure sb1 has a capacity of at least 50 characters.&quot;);\n    sb1.EnsureCapacity(50);\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;b1) sb1.Length = {0}, sb1.Capacity = {1}&quot;, sb1.Length, sb1.Capacity);\n    Console.WriteLine(&quot;b2) sb2.Length = {0}, sb2.Capacity = {1}&quot;, sb2.Length, sb2.Capacity);\n    Console.WriteLine(&quot;b3) sb1.ToString() = \\&quot;{0}\\&quot;, sb2.ToString() = \\&quot;{1}\\&quot;&quot;, \n                           sb1.ToString(),       sb2.ToString());\n    Console.WriteLine(&quot;b4) sb1 equals sb2: {0}&quot;, sb1.Equals(sb2));\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;Set the length of sb1 to zero.&quot;);\n    Console.WriteLine(&quot;Set the capacity of sb2 to 51 characters.&quot;);\n    sb1.Length = 0;\n    sb2.Capacity = 51;\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;c1) sb1.Length = {0}, sb1.Capacity = {1}&quot;, sb1.Length, sb1.Capacity);\n    Console.WriteLine(&quot;c2) sb2.Length = {0}, sb2.Capacity = {1}&quot;, sb2.Length, sb2.Capacity);\n    Console.WriteLine(&quot;c3) sb1.ToString() = \\&quot;{0}\\&quot;, sb2.ToString() = \\&quot;{1}\\&quot;&quot;, \n                           sb1.ToString(),       sb2.ToString());\n    Console.WriteLine(&quot;c4) sb1 equals sb2: {0}&quot;, sb1.Equals(sb2));\n    }\n}\n/*\nThe example displays the following output:\n\na1) sb1.Length = 3, sb1.Capacity = 16\na2) sb2.Length = 3, sb2.Capacity = 16\na3) sb1.ToString() = &quot;abc&quot;, sb2.ToString() = &quot;abc&quot;\na4) sb1 equals sb2: True\n\nEnsure sb1 has a capacity of at least 50 characters.\n\nb1) sb1.Length = 3, sb1.Capacity = 50\nb2) sb2.Length = 3, sb2.Capacity = 16\nb3) sb1.ToString() = &quot;abc&quot;, sb2.ToString() = &quot;abc&quot;\nb4) sb1 equals sb2: False\n\nSet the length of sb1 to zero.\nSet the capacity of sb2 to 51 characters.\n\nc1) sb1.Length = 0, sb1.Capacity = 50\nc2) sb2.Length = 3, sb2.Capacity = 51\nc3) sb1.ToString() = &quot;&quot;, sb2.ToString() = &quot;abc&quot;\nc4) sb1 equals sb2: False\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"stringbuilder.ensurecapacity#1\">Imports System.Text\n\nClass Sample\n   Public Shared Sub Main()\n      Dim sb1 As New StringBuilder(&quot;abc&quot;)\n      Dim sb2 As New StringBuilder(&quot;abc&quot;, 16)\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;a1) sb1.Length = {0}, sb1.Capacity = {1}&quot;, sb1.Length, sb1.Capacity)\n      Console.WriteLine(&quot;a2) sb2.Length = {0}, sb2.Capacity = {1}&quot;, sb2.Length, sb2.Capacity)\n      Console.WriteLine(&quot;a3) sb1.ToString() = &quot;&quot;{0}&quot;&quot;, sb2.ToString() = &quot;&quot;{1}&quot;&quot;&quot;, _\n                             sb1.ToString(),           sb2.ToString())\n      Console.WriteLine(&quot;a4) sb1 equals sb2: {0}&quot;, sb1.Equals(sb2))\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;Ensure sb1 has a capacity of at least 50 characters.&quot;)\n      sb1.EnsureCapacity(50)\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;b1) sb1.Length = {0}, sb1.Capacity = {1}&quot;, sb1.Length, sb1.Capacity)\n      Console.WriteLine(&quot;b2) sb2.Length = {0}, sb2.Capacity = {1}&quot;, sb2.Length, sb2.Capacity)\n      Console.WriteLine(&quot;b3) sb1.ToString() = &quot;&quot;{0}&quot;&quot;, sb2.ToString() = &quot;&quot;{1}&quot;&quot;&quot;, _\n                             sb1.ToString(),           sb2.ToString())\n      Console.WriteLine(&quot;b4) sb1 equals sb2: {0}&quot;, sb1.Equals(sb2))\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;Set the length of sb1 to zero.&quot;)\n      Console.WriteLine(&quot;Set the capacity of sb2 to 51 characters.&quot;)\n      sb1.Length = 0\n      sb2.Capacity = 51\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;c1) sb1.Length = {0}, sb1.Capacity = {1}&quot;, sb1.Length, sb1.Capacity)\n      Console.WriteLine(&quot;c2) sb2.Length = {0}, sb2.Capacity = {1}&quot;, sb2.Length, sb2.Capacity)\n      Console.WriteLine(&quot;c3) sb1.ToString() = &quot;&quot;{0}&quot;&quot;, sb2.ToString() = &quot;&quot;{1}&quot;&quot;&quot;, _\n                             sb1.ToString(),           sb2.ToString())\n      Console.WriteLine(&quot;c4) sb1 equals sb2: {0}&quot;, sb1.Equals(sb2))\n   End Sub \nEnd Class\n&#39;The example displays the following output:\n&#39;       a1) sb1.Length = 3, sb1.Capacity = 16\n&#39;       a2) sb2.Length = 3, sb2.Capacity = 16\n&#39;       a3) sb1.ToString() = &quot;abc&quot;, sb2.ToString() = &quot;abc&quot;\n&#39;       a4) sb1 equals sb2: True\n&#39;       \n&#39;       Ensure sb1 has a capacity of at least 50 characters.\n&#39;       \n&#39;       b1) sb1.Length = 3, sb1.Capacity = 50\n&#39;       b2) sb2.Length = 3, sb2.Capacity = 16\n&#39;       b3) sb1.ToString() = &quot;abc&quot;, sb2.ToString() = &quot;abc&quot;\n&#39;       b4) sb1 equals sb2: False\n&#39;       \n&#39;       Set the length of sb1 to zero.\n&#39;       Set the capacity of sb2 to 51 characters.\n&#39;       \n&#39;       c1) sb1.Length = 0, sb1.Capacity = 50\n&#39;       c2) sb2.Length = 3, sb2.Capacity = 51\n&#39;       c3) sb1.ToString() = &quot;&quot;, sb2.ToString() = &quot;abc&quot;\n&#39;       c4) sb1 equals sb2: False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Insert_System_Int32_System_Boolean_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Insert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Insert(Int32,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Inserts the string representation of a Boolean value into this instance at the specified character position.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Insert (int index, bool value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position in this instance where insertion begins.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to insert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the insert operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero or greater than the length of this instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.boolean#System_Boolean_ToString_\" data-linktype=\"relative-path\">ToString</a> is used to get a string representation of <code>value</code>. Existing characters are shifted to make room for the new text. The capacity is adjusted as needed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Insert_\" data-linktype=\"relative-path\">Insert</a> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"stringbuilder.insert#1\">using namespace System;\nusing namespace System::Text;\nref class Sample\n{\nprivate:\n\n   //                           index: 012345\n   static String^ initialValue = &quot;--[]--&quot;;\n   static StringBuilder^ sb;\n\npublic:\n   static void Main()\n   {\n      String^ xyz = &quot;xyz&quot;;\n      array&lt;Char&gt;^abc = {&#39;a&#39;,&#39;b&#39;,&#39;c&#39;};\n      Char star = &#39;*&#39;;\n      Object^ obj = 0;\n      bool xBool = true;\n      Byte xByte = 1;\n      short xInt16 = 2;\n      int xInt32 = 3;\n      long xInt64 = 4;\n      Decimal xDecimal = 5;\n      float xSingle = 6.6F;\n      double xDouble = 7.7;\n      \n      // The following types are not CLS-compliant.\n      UInt16 xUInt16 = 8;\n      UInt32 xUInt32 = 9;\n      UInt64 xUInt64 = 10;\n      SByte xSByte = -11;\n      \n      //\n      Console::WriteLine( &quot;StringBuilder.Insert method&quot; );\n      sb = gcnew StringBuilder( initialValue );\n      sb-&gt;Insert( 3, xyz, 2 );\n      Show( 1, sb );\n      sb-&gt;Insert( 3, xyz );\n      Show( 2, sb );\n      sb-&gt;Insert( 3, star );\n      Show( 3, sb );\n      sb-&gt;Insert( 3, abc );\n      Show( 4, sb );\n      sb-&gt;Insert( 3, abc, 1, 2 );\n      Show( 5, sb );\n      sb-&gt;Insert( 3, xBool ); // True\n      Show( 6, sb );\n      sb-&gt;Insert( 3, obj ); // 0\n      Show( 7, sb );\n      sb-&gt;Insert( 3, xByte ); // 1\n      Show( 8, sb );\n      sb-&gt;Insert( 3, xInt16 ); // 2\n      Show( 9, sb );\n      sb-&gt;Insert( 3, xInt32 ); // 3\n      Show( 10, sb );\n      sb-&gt;Insert( 3, xInt64 ); // 4\n      Show( 11, sb );\n      sb-&gt;Insert( 3, xDecimal ); // 5\n      Show( 12, sb );\n      sb-&gt;Insert( 3, xSingle ); // 6.6\n      Show( 13, sb );\n      sb-&gt;Insert( 3, xDouble ); // 7.7\n      Show( 14, sb );\n      \n      // The following Insert methods are not CLS-compliant.\n      sb-&gt;Insert( 3, xUInt16 ); // 8\n      Show( 15, sb );\n      sb-&gt;Insert( 3, xUInt32 ); // 9\n      Show( 16, sb );\n      sb-&gt;Insert( 3, xUInt64 ); // 10\n      Show( 17, sb );\n      sb-&gt;Insert( 3, xSByte ); // -11\n      Show( 18, sb );\n      \n      //\n   }\n\n   static void Show( int overloadNumber, StringBuilder^ sbs )\n   {\n      Console::WriteLine( &quot;{0,2:G} = {1}&quot;, overloadNumber, sbs );\n      sb = gcnew StringBuilder( initialValue );\n   }\n\n};\n\nint main()\n{\n   Sample::Main();\n}\n\n/*\nThis example produces the following results:\n\nStringBuilder.Insert method\n 1 = --[xyzxyz]--\n 2 = --[xyz]--\n 3 = --[*]--\n 4 = --[abc]--\n 5 = --[bc]--\n 6 = --[True]--\n 7 = --[0]--\n 8 = --[1]--\n 9 = --[2]--\n10 = --[3]--\n11 = --[4]--\n12 = --[5]--\n13 = --[6.6]--\n14 = --[7.7]--\n15 = --[8]--\n16 = --[9]--\n17 = --[10]--\n18 = --[-11]--\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"stringbuilder.insert#1\">using System;\nusing System.Text;\n\nclass Sample \n{\n//                         index: 012345\n    static string initialValue = &quot;--[]--&quot;;\n    static StringBuilder sb;\n\n    public static void Main() \n    {\n    string      xyz       = &quot;xyz&quot;;\n    char[]      abc       = {&#39;a&#39;, &#39;b&#39;, &#39;c&#39;};\n    char        star      = &#39;*&#39;;\n    Object \tobj       = 0;\n\n    bool        xBool     = true;\n    byte        xByte     = 1;\n    short       xInt16    = 2;\n    int         xInt32    = 3;\n    long        xInt64    = 4;\n    Decimal     xDecimal  = 5;\n    float       xSingle   = 6.6F;\n    double      xDouble   = 7.7;\n\n// The following types are not CLS-compliant.\n    ushort      xUInt16   = 8;\n    uint        xUInt32   = 9;\n    ulong       xUInt64   = 10;\n    sbyte       xSByte    = -11;\n//\n    Console.WriteLine(&quot;StringBuilder.Insert method&quot;);\n    sb = new StringBuilder(initialValue);\n\n    sb.Insert(3, xyz, 2);\n    Show(1, sb);\n\n    sb.Insert(3, xyz);\n    Show(2, sb);\n\n    sb.Insert(3, star);\n    Show(3, sb);\n\n    sb.Insert(3, abc);\n    Show(4, sb);\n\n    sb.Insert(3, abc, 1, 2);\n    Show(5, sb);\n\n    sb.Insert(3, xBool);     // True\n    Show(6, sb);\n\n    sb.Insert(3, obj);       // 0\n    Show(7, sb);\n\n    sb.Insert(3, xByte);     // 1\n    Show(8, sb);\n\n    sb.Insert(3, xInt16);    // 2\n    Show(9, sb);\n\n    sb.Insert(3, xInt32);    // 3\n    Show(10, sb);\n\n    sb.Insert(3, xInt64);    // 4\n    Show(11, sb);\n\n    sb.Insert(3, xDecimal);  // 5\n    Show(12, sb);\n\n    sb.Insert(3, xSingle);   // 6.6\n    Show(13, sb);\n\n    sb.Insert(3, xDouble);   // 7.7\n    Show(14, sb);\n\n// The following Insert methods are not CLS-compliant.\n    sb.Insert(3, xUInt16);   // 8\n    Show(15, sb);\n\n    sb.Insert(3, xUInt32);   // 9\n    Show(16, sb);\n\n    sb.Insert(3, xUInt64);   // 10\n    Show(17, sb);\n\n    sb.Insert(3, xSByte);    // -11\n    Show(18, sb);\n//\n    }\n\n    public static void Show(int overloadNumber, StringBuilder sbs)\n    {\n    Console.WriteLine(&quot;{0,2:G} = {1}&quot;, overloadNumber, sbs.ToString());\n    sb = new StringBuilder(initialValue);\n    }\n}\n/*\nThis example produces the following results:\n\nStringBuilder.Insert method\n 1 = --[xyzxyz]--\n 2 = --[xyz]--\n 3 = --[*]--\n 4 = --[abc]--\n 5 = --[bc]--\n 6 = --[True]--\n 7 = --[0]--\n 8 = --[1]--\n 9 = --[2]--\n10 = --[3]--\n11 = --[4]--\n12 = --[5]--\n13 = --[6.6]--\n14 = --[7.7]--\n15 = --[8]--\n16 = --[9]--\n17 = --[10]--\n18 = --[-11]--\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"stringbuilder.insert#1\">Imports System\nImports System.Text\n\nClass Sample\n   &#39;                                 index: 012345\n   Private Shared initialValue As String = &quot;--[]--&quot;\n   Private Shared sb As StringBuilder\n   \n   Public Shared Sub Main()\n      Dim xyz As String = &quot;xyz&quot;\n      Dim abc As Char() =  {&quot;a&quot;c, &quot;b&quot;c, &quot;c&quot;c}\n      Dim star As Char = &quot;*&quot;c\n      Dim obj As [Object] = 0\n      \n      Dim xBool As Boolean = True\n      Dim xByte As Byte = 1\n      Dim xInt16 As Short = 2\n      Dim xInt32 As Integer = 3\n      Dim xInt64 As Long = 4\n      Dim xDecimal As [Decimal] = 5\n      Dim xSingle As Single = 6.6F\n      Dim xDouble As Double = 7.7\n      \n      &#39; The following types are not CLS-compliant.\n      &#39; Dim xUInt16 As System.UInt16 = 8 \n      &#39; Dim xUInt32 As System.UInt32 = 9\n      &#39; Dim xUInt64 As System.UInt64 = 10 \n      &#39; Dim xSByte As System.SByte = - 11\n      &#39;\n      Console.WriteLine(&quot;StringBuilder.Insert method&quot;)\n      sb = New StringBuilder(initialValue)\n      \n      sb.Insert(3, xyz, 2)\n      Show(1, sb)\n      \n      sb.Insert(3, xyz)\n      Show(2, sb)\n      \n      sb.Insert(3, star)\n      Show(3, sb)\n      \n      sb.Insert(3, abc)\n      Show(4, sb)\n      \n      sb.Insert(3, abc, 1, 2)\n      Show(5, sb)\n      \n      sb.Insert(3, xBool)     &#39; True\n      Show(6, sb)\n      \n      sb.Insert(3, obj)       &#39; 0\n      Show(7, sb)\n      \n      sb.Insert(3, xByte)     &#39; 1\n      Show(8, sb)\n      \n      sb.Insert(3, xInt16)    &#39; 2\n      Show(9, sb)\n      \n      sb.Insert(3, xInt32)    &#39; 3\n      Show(10, sb)\n      \n      sb.Insert(3, xInt64)    &#39; 4\n      Show(11, sb)\n      \n      sb.Insert(3, xDecimal)  &#39; 5\n      Show(12, sb)\n      \n      sb.Insert(3, xSingle)   &#39; 6.6\n      Show(13, sb)\n      \n      sb.Insert(3, xDouble)   &#39; 7.7\n      Show(14, sb)\n      \n      &#39; The following Insert methods are not CLS-compliant.\n      &#39; sb.Insert(3, xUInt16) &#39; 8\n      &#39; sb.Insert(3, xUInt32) &#39; 9\n      &#39; sb.Insert(3, xUInt64) &#39; 10\n      &#39; sb.Insert(3, xSByte)  &#39; -11\n\n   End Sub &#39;Main\n   \n   Public Shared Sub Show(overloadNumber As Integer, sbs As StringBuilder)\n      Console.WriteLine(&quot;{0,2:G} = {1}&quot;, overloadNumber, sbs.ToString())\n      sb = New StringBuilder(initialValue)\n   End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;StringBuilder.Insert method\n&#39; 1 = --[xyzxyz]--\n&#39; 2 = --[xyz]--\n&#39; 3 = --[*]--\n&#39; 4 = --[abc]--\n&#39; 5 = --[bc]--\n&#39; 6 = --[True]--\n&#39; 7 = --[0]--\n&#39; 8 = --[1]--\n&#39; 9 = --[2]--\n&#39;10 = --[3]--\n&#39;11 = --[4]--\n&#39;12 = --[5]--\n&#39;13 = --[6.6]--\n&#39;14 = --[7.7]--\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Insert_System_Int32_System_Byte_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Insert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Insert(Int32,Byte)</div>        \r\n          </div>\r\n    \r\n            <p>Inserts the string representation of a specified 8-bit unsigned integer into this instance at the specified character position.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Insert (int index, byte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position in this instance where insertion begins.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to insert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the insert operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero or greater than the length of this instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.byte#System_Byte_ToString_\" data-linktype=\"relative-path\">ToString</a> is used to get a string representation of <code>value</code>. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Insert_\" data-linktype=\"relative-path\">Insert</a> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"stringbuilder.insert#1\">using namespace System;\nusing namespace System::Text;\nref class Sample\n{\nprivate:\n\n   //                           index: 012345\n   static String^ initialValue = &quot;--[]--&quot;;\n   static StringBuilder^ sb;\n\npublic:\n   static void Main()\n   {\n      String^ xyz = &quot;xyz&quot;;\n      array&lt;Char&gt;^abc = {&#39;a&#39;,&#39;b&#39;,&#39;c&#39;};\n      Char star = &#39;*&#39;;\n      Object^ obj = 0;\n      bool xBool = true;\n      Byte xByte = 1;\n      short xInt16 = 2;\n      int xInt32 = 3;\n      long xInt64 = 4;\n      Decimal xDecimal = 5;\n      float xSingle = 6.6F;\n      double xDouble = 7.7;\n      \n      // The following types are not CLS-compliant.\n      UInt16 xUInt16 = 8;\n      UInt32 xUInt32 = 9;\n      UInt64 xUInt64 = 10;\n      SByte xSByte = -11;\n      \n      //\n      Console::WriteLine( &quot;StringBuilder.Insert method&quot; );\n      sb = gcnew StringBuilder( initialValue );\n      sb-&gt;Insert( 3, xyz, 2 );\n      Show( 1, sb );\n      sb-&gt;Insert( 3, xyz );\n      Show( 2, sb );\n      sb-&gt;Insert( 3, star );\n      Show( 3, sb );\n      sb-&gt;Insert( 3, abc );\n      Show( 4, sb );\n      sb-&gt;Insert( 3, abc, 1, 2 );\n      Show( 5, sb );\n      sb-&gt;Insert( 3, xBool ); // True\n      Show( 6, sb );\n      sb-&gt;Insert( 3, obj ); // 0\n      Show( 7, sb );\n      sb-&gt;Insert( 3, xByte ); // 1\n      Show( 8, sb );\n      sb-&gt;Insert( 3, xInt16 ); // 2\n      Show( 9, sb );\n      sb-&gt;Insert( 3, xInt32 ); // 3\n      Show( 10, sb );\n      sb-&gt;Insert( 3, xInt64 ); // 4\n      Show( 11, sb );\n      sb-&gt;Insert( 3, xDecimal ); // 5\n      Show( 12, sb );\n      sb-&gt;Insert( 3, xSingle ); // 6.6\n      Show( 13, sb );\n      sb-&gt;Insert( 3, xDouble ); // 7.7\n      Show( 14, sb );\n      \n      // The following Insert methods are not CLS-compliant.\n      sb-&gt;Insert( 3, xUInt16 ); // 8\n      Show( 15, sb );\n      sb-&gt;Insert( 3, xUInt32 ); // 9\n      Show( 16, sb );\n      sb-&gt;Insert( 3, xUInt64 ); // 10\n      Show( 17, sb );\n      sb-&gt;Insert( 3, xSByte ); // -11\n      Show( 18, sb );\n      \n      //\n   }\n\n   static void Show( int overloadNumber, StringBuilder^ sbs )\n   {\n      Console::WriteLine( &quot;{0,2:G} = {1}&quot;, overloadNumber, sbs );\n      sb = gcnew StringBuilder( initialValue );\n   }\n\n};\n\nint main()\n{\n   Sample::Main();\n}\n\n/*\nThis example produces the following results:\n\nStringBuilder.Insert method\n 1 = --[xyzxyz]--\n 2 = --[xyz]--\n 3 = --[*]--\n 4 = --[abc]--\n 5 = --[bc]--\n 6 = --[True]--\n 7 = --[0]--\n 8 = --[1]--\n 9 = --[2]--\n10 = --[3]--\n11 = --[4]--\n12 = --[5]--\n13 = --[6.6]--\n14 = --[7.7]--\n15 = --[8]--\n16 = --[9]--\n17 = --[10]--\n18 = --[-11]--\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"stringbuilder.insert#1\">using System;\nusing System.Text;\n\nclass Sample \n{\n//                         index: 012345\n    static string initialValue = &quot;--[]--&quot;;\n    static StringBuilder sb;\n\n    public static void Main() \n    {\n    string      xyz       = &quot;xyz&quot;;\n    char[]      abc       = {&#39;a&#39;, &#39;b&#39;, &#39;c&#39;};\n    char        star      = &#39;*&#39;;\n    Object \tobj       = 0;\n\n    bool        xBool     = true;\n    byte        xByte     = 1;\n    short       xInt16    = 2;\n    int         xInt32    = 3;\n    long        xInt64    = 4;\n    Decimal     xDecimal  = 5;\n    float       xSingle   = 6.6F;\n    double      xDouble   = 7.7;\n\n// The following types are not CLS-compliant.\n    ushort      xUInt16   = 8;\n    uint        xUInt32   = 9;\n    ulong       xUInt64   = 10;\n    sbyte       xSByte    = -11;\n//\n    Console.WriteLine(&quot;StringBuilder.Insert method&quot;);\n    sb = new StringBuilder(initialValue);\n\n    sb.Insert(3, xyz, 2);\n    Show(1, sb);\n\n    sb.Insert(3, xyz);\n    Show(2, sb);\n\n    sb.Insert(3, star);\n    Show(3, sb);\n\n    sb.Insert(3, abc);\n    Show(4, sb);\n\n    sb.Insert(3, abc, 1, 2);\n    Show(5, sb);\n\n    sb.Insert(3, xBool);     // True\n    Show(6, sb);\n\n    sb.Insert(3, obj);       // 0\n    Show(7, sb);\n\n    sb.Insert(3, xByte);     // 1\n    Show(8, sb);\n\n    sb.Insert(3, xInt16);    // 2\n    Show(9, sb);\n\n    sb.Insert(3, xInt32);    // 3\n    Show(10, sb);\n\n    sb.Insert(3, xInt64);    // 4\n    Show(11, sb);\n\n    sb.Insert(3, xDecimal);  // 5\n    Show(12, sb);\n\n    sb.Insert(3, xSingle);   // 6.6\n    Show(13, sb);\n\n    sb.Insert(3, xDouble);   // 7.7\n    Show(14, sb);\n\n// The following Insert methods are not CLS-compliant.\n    sb.Insert(3, xUInt16);   // 8\n    Show(15, sb);\n\n    sb.Insert(3, xUInt32);   // 9\n    Show(16, sb);\n\n    sb.Insert(3, xUInt64);   // 10\n    Show(17, sb);\n\n    sb.Insert(3, xSByte);    // -11\n    Show(18, sb);\n//\n    }\n\n    public static void Show(int overloadNumber, StringBuilder sbs)\n    {\n    Console.WriteLine(&quot;{0,2:G} = {1}&quot;, overloadNumber, sbs.ToString());\n    sb = new StringBuilder(initialValue);\n    }\n}\n/*\nThis example produces the following results:\n\nStringBuilder.Insert method\n 1 = --[xyzxyz]--\n 2 = --[xyz]--\n 3 = --[*]--\n 4 = --[abc]--\n 5 = --[bc]--\n 6 = --[True]--\n 7 = --[0]--\n 8 = --[1]--\n 9 = --[2]--\n10 = --[3]--\n11 = --[4]--\n12 = --[5]--\n13 = --[6.6]--\n14 = --[7.7]--\n15 = --[8]--\n16 = --[9]--\n17 = --[10]--\n18 = --[-11]--\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"stringbuilder.insert#1\">Imports System\nImports System.Text\n\nClass Sample\n   &#39;                                 index: 012345\n   Private Shared initialValue As String = &quot;--[]--&quot;\n   Private Shared sb As StringBuilder\n   \n   Public Shared Sub Main()\n      Dim xyz As String = &quot;xyz&quot;\n      Dim abc As Char() =  {&quot;a&quot;c, &quot;b&quot;c, &quot;c&quot;c}\n      Dim star As Char = &quot;*&quot;c\n      Dim obj As [Object] = 0\n      \n      Dim xBool As Boolean = True\n      Dim xByte As Byte = 1\n      Dim xInt16 As Short = 2\n      Dim xInt32 As Integer = 3\n      Dim xInt64 As Long = 4\n      Dim xDecimal As [Decimal] = 5\n      Dim xSingle As Single = 6.6F\n      Dim xDouble As Double = 7.7\n      \n      &#39; The following types are not CLS-compliant.\n      &#39; Dim xUInt16 As System.UInt16 = 8 \n      &#39; Dim xUInt32 As System.UInt32 = 9\n      &#39; Dim xUInt64 As System.UInt64 = 10 \n      &#39; Dim xSByte As System.SByte = - 11\n      &#39;\n      Console.WriteLine(&quot;StringBuilder.Insert method&quot;)\n      sb = New StringBuilder(initialValue)\n      \n      sb.Insert(3, xyz, 2)\n      Show(1, sb)\n      \n      sb.Insert(3, xyz)\n      Show(2, sb)\n      \n      sb.Insert(3, star)\n      Show(3, sb)\n      \n      sb.Insert(3, abc)\n      Show(4, sb)\n      \n      sb.Insert(3, abc, 1, 2)\n      Show(5, sb)\n      \n      sb.Insert(3, xBool)     &#39; True\n      Show(6, sb)\n      \n      sb.Insert(3, obj)       &#39; 0\n      Show(7, sb)\n      \n      sb.Insert(3, xByte)     &#39; 1\n      Show(8, sb)\n      \n      sb.Insert(3, xInt16)    &#39; 2\n      Show(9, sb)\n      \n      sb.Insert(3, xInt32)    &#39; 3\n      Show(10, sb)\n      \n      sb.Insert(3, xInt64)    &#39; 4\n      Show(11, sb)\n      \n      sb.Insert(3, xDecimal)  &#39; 5\n      Show(12, sb)\n      \n      sb.Insert(3, xSingle)   &#39; 6.6\n      Show(13, sb)\n      \n      sb.Insert(3, xDouble)   &#39; 7.7\n      Show(14, sb)\n      \n      &#39; The following Insert methods are not CLS-compliant.\n      &#39; sb.Insert(3, xUInt16) &#39; 8\n      &#39; sb.Insert(3, xUInt32) &#39; 9\n      &#39; sb.Insert(3, xUInt64) &#39; 10\n      &#39; sb.Insert(3, xSByte)  &#39; -11\n\n   End Sub &#39;Main\n   \n   Public Shared Sub Show(overloadNumber As Integer, sbs As StringBuilder)\n      Console.WriteLine(&quot;{0,2:G} = {1}&quot;, overloadNumber, sbs.ToString())\n      sb = New StringBuilder(initialValue)\n   End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;StringBuilder.Insert method\n&#39; 1 = --[xyzxyz]--\n&#39; 2 = --[xyz]--\n&#39; 3 = --[*]--\n&#39; 4 = --[abc]--\n&#39; 5 = --[bc]--\n&#39; 6 = --[True]--\n&#39; 7 = --[0]--\n&#39; 8 = --[1]--\n&#39; 9 = --[2]--\n&#39;10 = --[3]--\n&#39;11 = --[4]--\n&#39;12 = --[5]--\n&#39;13 = --[6.6]--\n&#39;14 = --[7.7]--\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Insert_System_Int32_System_Char_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Insert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Insert(Int32,Char)</div>        \r\n          </div>\r\n    \r\n            <p>Inserts the string representation of a specified Unicode character into this instance at the specified character position.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Insert (int index, char value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position in this instance where insertion begins.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to insert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the insert operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero or greater than the length of this instance.  </p>\n<p> -or-  </p>\n<p> Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.char#System_Char_ToString_\" data-linktype=\"relative-path\">ToString</a> is used to get a string representation of <code>value</code>. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Insert_\" data-linktype=\"relative-path\">Insert</a> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"stringbuilder.insert#1\">using namespace System;\nusing namespace System::Text;\nref class Sample\n{\nprivate:\n\n   //                           index: 012345\n   static String^ initialValue = &quot;--[]--&quot;;\n   static StringBuilder^ sb;\n\npublic:\n   static void Main()\n   {\n      String^ xyz = &quot;xyz&quot;;\n      array&lt;Char&gt;^abc = {&#39;a&#39;,&#39;b&#39;,&#39;c&#39;};\n      Char star = &#39;*&#39;;\n      Object^ obj = 0;\n      bool xBool = true;\n      Byte xByte = 1;\n      short xInt16 = 2;\n      int xInt32 = 3;\n      long xInt64 = 4;\n      Decimal xDecimal = 5;\n      float xSingle = 6.6F;\n      double xDouble = 7.7;\n      \n      // The following types are not CLS-compliant.\n      UInt16 xUInt16 = 8;\n      UInt32 xUInt32 = 9;\n      UInt64 xUInt64 = 10;\n      SByte xSByte = -11;\n      \n      //\n      Console::WriteLine( &quot;StringBuilder.Insert method&quot; );\n      sb = gcnew StringBuilder( initialValue );\n      sb-&gt;Insert( 3, xyz, 2 );\n      Show( 1, sb );\n      sb-&gt;Insert( 3, xyz );\n      Show( 2, sb );\n      sb-&gt;Insert( 3, star );\n      Show( 3, sb );\n      sb-&gt;Insert( 3, abc );\n      Show( 4, sb );\n      sb-&gt;Insert( 3, abc, 1, 2 );\n      Show( 5, sb );\n      sb-&gt;Insert( 3, xBool ); // True\n      Show( 6, sb );\n      sb-&gt;Insert( 3, obj ); // 0\n      Show( 7, sb );\n      sb-&gt;Insert( 3, xByte ); // 1\n      Show( 8, sb );\n      sb-&gt;Insert( 3, xInt16 ); // 2\n      Show( 9, sb );\n      sb-&gt;Insert( 3, xInt32 ); // 3\n      Show( 10, sb );\n      sb-&gt;Insert( 3, xInt64 ); // 4\n      Show( 11, sb );\n      sb-&gt;Insert( 3, xDecimal ); // 5\n      Show( 12, sb );\n      sb-&gt;Insert( 3, xSingle ); // 6.6\n      Show( 13, sb );\n      sb-&gt;Insert( 3, xDouble ); // 7.7\n      Show( 14, sb );\n      \n      // The following Insert methods are not CLS-compliant.\n      sb-&gt;Insert( 3, xUInt16 ); // 8\n      Show( 15, sb );\n      sb-&gt;Insert( 3, xUInt32 ); // 9\n      Show( 16, sb );\n      sb-&gt;Insert( 3, xUInt64 ); // 10\n      Show( 17, sb );\n      sb-&gt;Insert( 3, xSByte ); // -11\n      Show( 18, sb );\n      \n      //\n   }\n\n   static void Show( int overloadNumber, StringBuilder^ sbs )\n   {\n      Console::WriteLine( &quot;{0,2:G} = {1}&quot;, overloadNumber, sbs );\n      sb = gcnew StringBuilder( initialValue );\n   }\n\n};\n\nint main()\n{\n   Sample::Main();\n}\n\n/*\nThis example produces the following results:\n\nStringBuilder.Insert method\n 1 = --[xyzxyz]--\n 2 = --[xyz]--\n 3 = --[*]--\n 4 = --[abc]--\n 5 = --[bc]--\n 6 = --[True]--\n 7 = --[0]--\n 8 = --[1]--\n 9 = --[2]--\n10 = --[3]--\n11 = --[4]--\n12 = --[5]--\n13 = --[6.6]--\n14 = --[7.7]--\n15 = --[8]--\n16 = --[9]--\n17 = --[10]--\n18 = --[-11]--\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"stringbuilder.insert#1\">using System;\nusing System.Text;\n\nclass Sample \n{\n//                         index: 012345\n    static string initialValue = &quot;--[]--&quot;;\n    static StringBuilder sb;\n\n    public static void Main() \n    {\n    string      xyz       = &quot;xyz&quot;;\n    char[]      abc       = {&#39;a&#39;, &#39;b&#39;, &#39;c&#39;};\n    char        star      = &#39;*&#39;;\n    Object \tobj       = 0;\n\n    bool        xBool     = true;\n    byte        xByte     = 1;\n    short       xInt16    = 2;\n    int         xInt32    = 3;\n    long        xInt64    = 4;\n    Decimal     xDecimal  = 5;\n    float       xSingle   = 6.6F;\n    double      xDouble   = 7.7;\n\n// The following types are not CLS-compliant.\n    ushort      xUInt16   = 8;\n    uint        xUInt32   = 9;\n    ulong       xUInt64   = 10;\n    sbyte       xSByte    = -11;\n//\n    Console.WriteLine(&quot;StringBuilder.Insert method&quot;);\n    sb = new StringBuilder(initialValue);\n\n    sb.Insert(3, xyz, 2);\n    Show(1, sb);\n\n    sb.Insert(3, xyz);\n    Show(2, sb);\n\n    sb.Insert(3, star);\n    Show(3, sb);\n\n    sb.Insert(3, abc);\n    Show(4, sb);\n\n    sb.Insert(3, abc, 1, 2);\n    Show(5, sb);\n\n    sb.Insert(3, xBool);     // True\n    Show(6, sb);\n\n    sb.Insert(3, obj);       // 0\n    Show(7, sb);\n\n    sb.Insert(3, xByte);     // 1\n    Show(8, sb);\n\n    sb.Insert(3, xInt16);    // 2\n    Show(9, sb);\n\n    sb.Insert(3, xInt32);    // 3\n    Show(10, sb);\n\n    sb.Insert(3, xInt64);    // 4\n    Show(11, sb);\n\n    sb.Insert(3, xDecimal);  // 5\n    Show(12, sb);\n\n    sb.Insert(3, xSingle);   // 6.6\n    Show(13, sb);\n\n    sb.Insert(3, xDouble);   // 7.7\n    Show(14, sb);\n\n// The following Insert methods are not CLS-compliant.\n    sb.Insert(3, xUInt16);   // 8\n    Show(15, sb);\n\n    sb.Insert(3, xUInt32);   // 9\n    Show(16, sb);\n\n    sb.Insert(3, xUInt64);   // 10\n    Show(17, sb);\n\n    sb.Insert(3, xSByte);    // -11\n    Show(18, sb);\n//\n    }\n\n    public static void Show(int overloadNumber, StringBuilder sbs)\n    {\n    Console.WriteLine(&quot;{0,2:G} = {1}&quot;, overloadNumber, sbs.ToString());\n    sb = new StringBuilder(initialValue);\n    }\n}\n/*\nThis example produces the following results:\n\nStringBuilder.Insert method\n 1 = --[xyzxyz]--\n 2 = --[xyz]--\n 3 = --[*]--\n 4 = --[abc]--\n 5 = --[bc]--\n 6 = --[True]--\n 7 = --[0]--\n 8 = --[1]--\n 9 = --[2]--\n10 = --[3]--\n11 = --[4]--\n12 = --[5]--\n13 = --[6.6]--\n14 = --[7.7]--\n15 = --[8]--\n16 = --[9]--\n17 = --[10]--\n18 = --[-11]--\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"stringbuilder.insert#1\">Imports System\nImports System.Text\n\nClass Sample\n   &#39;                                 index: 012345\n   Private Shared initialValue As String = &quot;--[]--&quot;\n   Private Shared sb As StringBuilder\n   \n   Public Shared Sub Main()\n      Dim xyz As String = &quot;xyz&quot;\n      Dim abc As Char() =  {&quot;a&quot;c, &quot;b&quot;c, &quot;c&quot;c}\n      Dim star As Char = &quot;*&quot;c\n      Dim obj As [Object] = 0\n      \n      Dim xBool As Boolean = True\n      Dim xByte As Byte = 1\n      Dim xInt16 As Short = 2\n      Dim xInt32 As Integer = 3\n      Dim xInt64 As Long = 4\n      Dim xDecimal As [Decimal] = 5\n      Dim xSingle As Single = 6.6F\n      Dim xDouble As Double = 7.7\n      \n      &#39; The following types are not CLS-compliant.\n      &#39; Dim xUInt16 As System.UInt16 = 8 \n      &#39; Dim xUInt32 As System.UInt32 = 9\n      &#39; Dim xUInt64 As System.UInt64 = 10 \n      &#39; Dim xSByte As System.SByte = - 11\n      &#39;\n      Console.WriteLine(&quot;StringBuilder.Insert method&quot;)\n      sb = New StringBuilder(initialValue)\n      \n      sb.Insert(3, xyz, 2)\n      Show(1, sb)\n      \n      sb.Insert(3, xyz)\n      Show(2, sb)\n      \n      sb.Insert(3, star)\n      Show(3, sb)\n      \n      sb.Insert(3, abc)\n      Show(4, sb)\n      \n      sb.Insert(3, abc, 1, 2)\n      Show(5, sb)\n      \n      sb.Insert(3, xBool)     &#39; True\n      Show(6, sb)\n      \n      sb.Insert(3, obj)       &#39; 0\n      Show(7, sb)\n      \n      sb.Insert(3, xByte)     &#39; 1\n      Show(8, sb)\n      \n      sb.Insert(3, xInt16)    &#39; 2\n      Show(9, sb)\n      \n      sb.Insert(3, xInt32)    &#39; 3\n      Show(10, sb)\n      \n      sb.Insert(3, xInt64)    &#39; 4\n      Show(11, sb)\n      \n      sb.Insert(3, xDecimal)  &#39; 5\n      Show(12, sb)\n      \n      sb.Insert(3, xSingle)   &#39; 6.6\n      Show(13, sb)\n      \n      sb.Insert(3, xDouble)   &#39; 7.7\n      Show(14, sb)\n      \n      &#39; The following Insert methods are not CLS-compliant.\n      &#39; sb.Insert(3, xUInt16) &#39; 8\n      &#39; sb.Insert(3, xUInt32) &#39; 9\n      &#39; sb.Insert(3, xUInt64) &#39; 10\n      &#39; sb.Insert(3, xSByte)  &#39; -11\n\n   End Sub &#39;Main\n   \n   Public Shared Sub Show(overloadNumber As Integer, sbs As StringBuilder)\n      Console.WriteLine(&quot;{0,2:G} = {1}&quot;, overloadNumber, sbs.ToString())\n      sb = New StringBuilder(initialValue)\n   End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;StringBuilder.Insert method\n&#39; 1 = --[xyzxyz]--\n&#39; 2 = --[xyz]--\n&#39; 3 = --[*]--\n&#39; 4 = --[abc]--\n&#39; 5 = --[bc]--\n&#39; 6 = --[True]--\n&#39; 7 = --[0]--\n&#39; 8 = --[1]--\n&#39; 9 = --[2]--\n&#39;10 = --[3]--\n&#39;11 = --[4]--\n&#39;12 = --[5]--\n&#39;13 = --[6.6]--\n&#39;14 = --[7.7]--\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Insert_System_Int32_System_Char___\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Insert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Insert(Int32,Char[])</div>        \r\n          </div>\r\n    \r\n            <p>Inserts the string representation of a specified array of Unicode characters into this instance at the specified character position.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Insert (int index, char[] value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position in this instance where insertion begins.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character array to insert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the insert operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero or greater than the length of this instance.  </p>\n<p> -or-  </p>\n<p> Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.  </p>\n<p> If <code>value</code> is <code>null</code>, the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> is not changed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Insert_\" data-linktype=\"relative-path\">Insert</a> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"stringbuilder.insert#1\">using namespace System;\nusing namespace System::Text;\nref class Sample\n{\nprivate:\n\n   //                           index: 012345\n   static String^ initialValue = &quot;--[]--&quot;;\n   static StringBuilder^ sb;\n\npublic:\n   static void Main()\n   {\n      String^ xyz = &quot;xyz&quot;;\n      array&lt;Char&gt;^abc = {&#39;a&#39;,&#39;b&#39;,&#39;c&#39;};\n      Char star = &#39;*&#39;;\n      Object^ obj = 0;\n      bool xBool = true;\n      Byte xByte = 1;\n      short xInt16 = 2;\n      int xInt32 = 3;\n      long xInt64 = 4;\n      Decimal xDecimal = 5;\n      float xSingle = 6.6F;\n      double xDouble = 7.7;\n      \n      // The following types are not CLS-compliant.\n      UInt16 xUInt16 = 8;\n      UInt32 xUInt32 = 9;\n      UInt64 xUInt64 = 10;\n      SByte xSByte = -11;\n      \n      //\n      Console::WriteLine( &quot;StringBuilder.Insert method&quot; );\n      sb = gcnew StringBuilder( initialValue );\n      sb-&gt;Insert( 3, xyz, 2 );\n      Show( 1, sb );\n      sb-&gt;Insert( 3, xyz );\n      Show( 2, sb );\n      sb-&gt;Insert( 3, star );\n      Show( 3, sb );\n      sb-&gt;Insert( 3, abc );\n      Show( 4, sb );\n      sb-&gt;Insert( 3, abc, 1, 2 );\n      Show( 5, sb );\n      sb-&gt;Insert( 3, xBool ); // True\n      Show( 6, sb );\n      sb-&gt;Insert( 3, obj ); // 0\n      Show( 7, sb );\n      sb-&gt;Insert( 3, xByte ); // 1\n      Show( 8, sb );\n      sb-&gt;Insert( 3, xInt16 ); // 2\n      Show( 9, sb );\n      sb-&gt;Insert( 3, xInt32 ); // 3\n      Show( 10, sb );\n      sb-&gt;Insert( 3, xInt64 ); // 4\n      Show( 11, sb );\n      sb-&gt;Insert( 3, xDecimal ); // 5\n      Show( 12, sb );\n      sb-&gt;Insert( 3, xSingle ); // 6.6\n      Show( 13, sb );\n      sb-&gt;Insert( 3, xDouble ); // 7.7\n      Show( 14, sb );\n      \n      // The following Insert methods are not CLS-compliant.\n      sb-&gt;Insert( 3, xUInt16 ); // 8\n      Show( 15, sb );\n      sb-&gt;Insert( 3, xUInt32 ); // 9\n      Show( 16, sb );\n      sb-&gt;Insert( 3, xUInt64 ); // 10\n      Show( 17, sb );\n      sb-&gt;Insert( 3, xSByte ); // -11\n      Show( 18, sb );\n      \n      //\n   }\n\n   static void Show( int overloadNumber, StringBuilder^ sbs )\n   {\n      Console::WriteLine( &quot;{0,2:G} = {1}&quot;, overloadNumber, sbs );\n      sb = gcnew StringBuilder( initialValue );\n   }\n\n};\n\nint main()\n{\n   Sample::Main();\n}\n\n/*\nThis example produces the following results:\n\nStringBuilder.Insert method\n 1 = --[xyzxyz]--\n 2 = --[xyz]--\n 3 = --[*]--\n 4 = --[abc]--\n 5 = --[bc]--\n 6 = --[True]--\n 7 = --[0]--\n 8 = --[1]--\n 9 = --[2]--\n10 = --[3]--\n11 = --[4]--\n12 = --[5]--\n13 = --[6.6]--\n14 = --[7.7]--\n15 = --[8]--\n16 = --[9]--\n17 = --[10]--\n18 = --[-11]--\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"stringbuilder.insert#1\">using System;\nusing System.Text;\n\nclass Sample \n{\n//                         index: 012345\n    static string initialValue = &quot;--[]--&quot;;\n    static StringBuilder sb;\n\n    public static void Main() \n    {\n    string      xyz       = &quot;xyz&quot;;\n    char[]      abc       = {&#39;a&#39;, &#39;b&#39;, &#39;c&#39;};\n    char        star      = &#39;*&#39;;\n    Object \tobj       = 0;\n\n    bool        xBool     = true;\n    byte        xByte     = 1;\n    short       xInt16    = 2;\n    int         xInt32    = 3;\n    long        xInt64    = 4;\n    Decimal     xDecimal  = 5;\n    float       xSingle   = 6.6F;\n    double      xDouble   = 7.7;\n\n// The following types are not CLS-compliant.\n    ushort      xUInt16   = 8;\n    uint        xUInt32   = 9;\n    ulong       xUInt64   = 10;\n    sbyte       xSByte    = -11;\n//\n    Console.WriteLine(&quot;StringBuilder.Insert method&quot;);\n    sb = new StringBuilder(initialValue);\n\n    sb.Insert(3, xyz, 2);\n    Show(1, sb);\n\n    sb.Insert(3, xyz);\n    Show(2, sb);\n\n    sb.Insert(3, star);\n    Show(3, sb);\n\n    sb.Insert(3, abc);\n    Show(4, sb);\n\n    sb.Insert(3, abc, 1, 2);\n    Show(5, sb);\n\n    sb.Insert(3, xBool);     // True\n    Show(6, sb);\n\n    sb.Insert(3, obj);       // 0\n    Show(7, sb);\n\n    sb.Insert(3, xByte);     // 1\n    Show(8, sb);\n\n    sb.Insert(3, xInt16);    // 2\n    Show(9, sb);\n\n    sb.Insert(3, xInt32);    // 3\n    Show(10, sb);\n\n    sb.Insert(3, xInt64);    // 4\n    Show(11, sb);\n\n    sb.Insert(3, xDecimal);  // 5\n    Show(12, sb);\n\n    sb.Insert(3, xSingle);   // 6.6\n    Show(13, sb);\n\n    sb.Insert(3, xDouble);   // 7.7\n    Show(14, sb);\n\n// The following Insert methods are not CLS-compliant.\n    sb.Insert(3, xUInt16);   // 8\n    Show(15, sb);\n\n    sb.Insert(3, xUInt32);   // 9\n    Show(16, sb);\n\n    sb.Insert(3, xUInt64);   // 10\n    Show(17, sb);\n\n    sb.Insert(3, xSByte);    // -11\n    Show(18, sb);\n//\n    }\n\n    public static void Show(int overloadNumber, StringBuilder sbs)\n    {\n    Console.WriteLine(&quot;{0,2:G} = {1}&quot;, overloadNumber, sbs.ToString());\n    sb = new StringBuilder(initialValue);\n    }\n}\n/*\nThis example produces the following results:\n\nStringBuilder.Insert method\n 1 = --[xyzxyz]--\n 2 = --[xyz]--\n 3 = --[*]--\n 4 = --[abc]--\n 5 = --[bc]--\n 6 = --[True]--\n 7 = --[0]--\n 8 = --[1]--\n 9 = --[2]--\n10 = --[3]--\n11 = --[4]--\n12 = --[5]--\n13 = --[6.6]--\n14 = --[7.7]--\n15 = --[8]--\n16 = --[9]--\n17 = --[10]--\n18 = --[-11]--\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"stringbuilder.insert#1\">Imports System\nImports System.Text\n\nClass Sample\n   &#39;                                 index: 012345\n   Private Shared initialValue As String = &quot;--[]--&quot;\n   Private Shared sb As StringBuilder\n   \n   Public Shared Sub Main()\n      Dim xyz As String = &quot;xyz&quot;\n      Dim abc As Char() =  {&quot;a&quot;c, &quot;b&quot;c, &quot;c&quot;c}\n      Dim star As Char = &quot;*&quot;c\n      Dim obj As [Object] = 0\n      \n      Dim xBool As Boolean = True\n      Dim xByte As Byte = 1\n      Dim xInt16 As Short = 2\n      Dim xInt32 As Integer = 3\n      Dim xInt64 As Long = 4\n      Dim xDecimal As [Decimal] = 5\n      Dim xSingle As Single = 6.6F\n      Dim xDouble As Double = 7.7\n      \n      &#39; The following types are not CLS-compliant.\n      &#39; Dim xUInt16 As System.UInt16 = 8 \n      &#39; Dim xUInt32 As System.UInt32 = 9\n      &#39; Dim xUInt64 As System.UInt64 = 10 \n      &#39; Dim xSByte As System.SByte = - 11\n      &#39;\n      Console.WriteLine(&quot;StringBuilder.Insert method&quot;)\n      sb = New StringBuilder(initialValue)\n      \n      sb.Insert(3, xyz, 2)\n      Show(1, sb)\n      \n      sb.Insert(3, xyz)\n      Show(2, sb)\n      \n      sb.Insert(3, star)\n      Show(3, sb)\n      \n      sb.Insert(3, abc)\n      Show(4, sb)\n      \n      sb.Insert(3, abc, 1, 2)\n      Show(5, sb)\n      \n      sb.Insert(3, xBool)     &#39; True\n      Show(6, sb)\n      \n      sb.Insert(3, obj)       &#39; 0\n      Show(7, sb)\n      \n      sb.Insert(3, xByte)     &#39; 1\n      Show(8, sb)\n      \n      sb.Insert(3, xInt16)    &#39; 2\n      Show(9, sb)\n      \n      sb.Insert(3, xInt32)    &#39; 3\n      Show(10, sb)\n      \n      sb.Insert(3, xInt64)    &#39; 4\n      Show(11, sb)\n      \n      sb.Insert(3, xDecimal)  &#39; 5\n      Show(12, sb)\n      \n      sb.Insert(3, xSingle)   &#39; 6.6\n      Show(13, sb)\n      \n      sb.Insert(3, xDouble)   &#39; 7.7\n      Show(14, sb)\n      \n      &#39; The following Insert methods are not CLS-compliant.\n      &#39; sb.Insert(3, xUInt16) &#39; 8\n      &#39; sb.Insert(3, xUInt32) &#39; 9\n      &#39; sb.Insert(3, xUInt64) &#39; 10\n      &#39; sb.Insert(3, xSByte)  &#39; -11\n\n   End Sub &#39;Main\n   \n   Public Shared Sub Show(overloadNumber As Integer, sbs As StringBuilder)\n      Console.WriteLine(&quot;{0,2:G} = {1}&quot;, overloadNumber, sbs.ToString())\n      sb = New StringBuilder(initialValue)\n   End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;StringBuilder.Insert method\n&#39; 1 = --[xyzxyz]--\n&#39; 2 = --[xyz]--\n&#39; 3 = --[*]--\n&#39; 4 = --[abc]--\n&#39; 5 = --[bc]--\n&#39; 6 = --[True]--\n&#39; 7 = --[0]--\n&#39; 8 = --[1]--\n&#39; 9 = --[2]--\n&#39;10 = --[3]--\n&#39;11 = --[4]--\n&#39;12 = --[5]--\n&#39;13 = --[6.6]--\n&#39;14 = --[7.7]--\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Insert_System_Int32_System_Decimal_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Insert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Insert(Int32,Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Inserts the string representation of a decimal number into this instance at the specified character position.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Insert (int index, decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position in this instance where insertion begins.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to insert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the insert operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero or greater than the length of this instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.decimal#System_Decimal_ToString_\" data-linktype=\"relative-path\">ToString</a> is used to get a string representation of <code>value</code>. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Insert_\" data-linktype=\"relative-path\">Insert</a> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"stringbuilder.insert#1\">using namespace System;\nusing namespace System::Text;\nref class Sample\n{\nprivate:\n\n   //                           index: 012345\n   static String^ initialValue = &quot;--[]--&quot;;\n   static StringBuilder^ sb;\n\npublic:\n   static void Main()\n   {\n      String^ xyz = &quot;xyz&quot;;\n      array&lt;Char&gt;^abc = {&#39;a&#39;,&#39;b&#39;,&#39;c&#39;};\n      Char star = &#39;*&#39;;\n      Object^ obj = 0;\n      bool xBool = true;\n      Byte xByte = 1;\n      short xInt16 = 2;\n      int xInt32 = 3;\n      long xInt64 = 4;\n      Decimal xDecimal = 5;\n      float xSingle = 6.6F;\n      double xDouble = 7.7;\n      \n      // The following types are not CLS-compliant.\n      UInt16 xUInt16 = 8;\n      UInt32 xUInt32 = 9;\n      UInt64 xUInt64 = 10;\n      SByte xSByte = -11;\n      \n      //\n      Console::WriteLine( &quot;StringBuilder.Insert method&quot; );\n      sb = gcnew StringBuilder( initialValue );\n      sb-&gt;Insert( 3, xyz, 2 );\n      Show( 1, sb );\n      sb-&gt;Insert( 3, xyz );\n      Show( 2, sb );\n      sb-&gt;Insert( 3, star );\n      Show( 3, sb );\n      sb-&gt;Insert( 3, abc );\n      Show( 4, sb );\n      sb-&gt;Insert( 3, abc, 1, 2 );\n      Show( 5, sb );\n      sb-&gt;Insert( 3, xBool ); // True\n      Show( 6, sb );\n      sb-&gt;Insert( 3, obj ); // 0\n      Show( 7, sb );\n      sb-&gt;Insert( 3, xByte ); // 1\n      Show( 8, sb );\n      sb-&gt;Insert( 3, xInt16 ); // 2\n      Show( 9, sb );\n      sb-&gt;Insert( 3, xInt32 ); // 3\n      Show( 10, sb );\n      sb-&gt;Insert( 3, xInt64 ); // 4\n      Show( 11, sb );\n      sb-&gt;Insert( 3, xDecimal ); // 5\n      Show( 12, sb );\n      sb-&gt;Insert( 3, xSingle ); // 6.6\n      Show( 13, sb );\n      sb-&gt;Insert( 3, xDouble ); // 7.7\n      Show( 14, sb );\n      \n      // The following Insert methods are not CLS-compliant.\n      sb-&gt;Insert( 3, xUInt16 ); // 8\n      Show( 15, sb );\n      sb-&gt;Insert( 3, xUInt32 ); // 9\n      Show( 16, sb );\n      sb-&gt;Insert( 3, xUInt64 ); // 10\n      Show( 17, sb );\n      sb-&gt;Insert( 3, xSByte ); // -11\n      Show( 18, sb );\n      \n      //\n   }\n\n   static void Show( int overloadNumber, StringBuilder^ sbs )\n   {\n      Console::WriteLine( &quot;{0,2:G} = {1}&quot;, overloadNumber, sbs );\n      sb = gcnew StringBuilder( initialValue );\n   }\n\n};\n\nint main()\n{\n   Sample::Main();\n}\n\n/*\nThis example produces the following results:\n\nStringBuilder.Insert method\n 1 = --[xyzxyz]--\n 2 = --[xyz]--\n 3 = --[*]--\n 4 = --[abc]--\n 5 = --[bc]--\n 6 = --[True]--\n 7 = --[0]--\n 8 = --[1]--\n 9 = --[2]--\n10 = --[3]--\n11 = --[4]--\n12 = --[5]--\n13 = --[6.6]--\n14 = --[7.7]--\n15 = --[8]--\n16 = --[9]--\n17 = --[10]--\n18 = --[-11]--\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"stringbuilder.insert#1\">using System;\nusing System.Text;\n\nclass Sample \n{\n//                         index: 012345\n    static string initialValue = &quot;--[]--&quot;;\n    static StringBuilder sb;\n\n    public static void Main() \n    {\n    string      xyz       = &quot;xyz&quot;;\n    char[]      abc       = {&#39;a&#39;, &#39;b&#39;, &#39;c&#39;};\n    char        star      = &#39;*&#39;;\n    Object \tobj       = 0;\n\n    bool        xBool     = true;\n    byte        xByte     = 1;\n    short       xInt16    = 2;\n    int         xInt32    = 3;\n    long        xInt64    = 4;\n    Decimal     xDecimal  = 5;\n    float       xSingle   = 6.6F;\n    double      xDouble   = 7.7;\n\n// The following types are not CLS-compliant.\n    ushort      xUInt16   = 8;\n    uint        xUInt32   = 9;\n    ulong       xUInt64   = 10;\n    sbyte       xSByte    = -11;\n//\n    Console.WriteLine(&quot;StringBuilder.Insert method&quot;);\n    sb = new StringBuilder(initialValue);\n\n    sb.Insert(3, xyz, 2);\n    Show(1, sb);\n\n    sb.Insert(3, xyz);\n    Show(2, sb);\n\n    sb.Insert(3, star);\n    Show(3, sb);\n\n    sb.Insert(3, abc);\n    Show(4, sb);\n\n    sb.Insert(3, abc, 1, 2);\n    Show(5, sb);\n\n    sb.Insert(3, xBool);     // True\n    Show(6, sb);\n\n    sb.Insert(3, obj);       // 0\n    Show(7, sb);\n\n    sb.Insert(3, xByte);     // 1\n    Show(8, sb);\n\n    sb.Insert(3, xInt16);    // 2\n    Show(9, sb);\n\n    sb.Insert(3, xInt32);    // 3\n    Show(10, sb);\n\n    sb.Insert(3, xInt64);    // 4\n    Show(11, sb);\n\n    sb.Insert(3, xDecimal);  // 5\n    Show(12, sb);\n\n    sb.Insert(3, xSingle);   // 6.6\n    Show(13, sb);\n\n    sb.Insert(3, xDouble);   // 7.7\n    Show(14, sb);\n\n// The following Insert methods are not CLS-compliant.\n    sb.Insert(3, xUInt16);   // 8\n    Show(15, sb);\n\n    sb.Insert(3, xUInt32);   // 9\n    Show(16, sb);\n\n    sb.Insert(3, xUInt64);   // 10\n    Show(17, sb);\n\n    sb.Insert(3, xSByte);    // -11\n    Show(18, sb);\n//\n    }\n\n    public static void Show(int overloadNumber, StringBuilder sbs)\n    {\n    Console.WriteLine(&quot;{0,2:G} = {1}&quot;, overloadNumber, sbs.ToString());\n    sb = new StringBuilder(initialValue);\n    }\n}\n/*\nThis example produces the following results:\n\nStringBuilder.Insert method\n 1 = --[xyzxyz]--\n 2 = --[xyz]--\n 3 = --[*]--\n 4 = --[abc]--\n 5 = --[bc]--\n 6 = --[True]--\n 7 = --[0]--\n 8 = --[1]--\n 9 = --[2]--\n10 = --[3]--\n11 = --[4]--\n12 = --[5]--\n13 = --[6.6]--\n14 = --[7.7]--\n15 = --[8]--\n16 = --[9]--\n17 = --[10]--\n18 = --[-11]--\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"stringbuilder.insert#1\">Imports System\nImports System.Text\n\nClass Sample\n   &#39;                                 index: 012345\n   Private Shared initialValue As String = &quot;--[]--&quot;\n   Private Shared sb As StringBuilder\n   \n   Public Shared Sub Main()\n      Dim xyz As String = &quot;xyz&quot;\n      Dim abc As Char() =  {&quot;a&quot;c, &quot;b&quot;c, &quot;c&quot;c}\n      Dim star As Char = &quot;*&quot;c\n      Dim obj As [Object] = 0\n      \n      Dim xBool As Boolean = True\n      Dim xByte As Byte = 1\n      Dim xInt16 As Short = 2\n      Dim xInt32 As Integer = 3\n      Dim xInt64 As Long = 4\n      Dim xDecimal As [Decimal] = 5\n      Dim xSingle As Single = 6.6F\n      Dim xDouble As Double = 7.7\n      \n      &#39; The following types are not CLS-compliant.\n      &#39; Dim xUInt16 As System.UInt16 = 8 \n      &#39; Dim xUInt32 As System.UInt32 = 9\n      &#39; Dim xUInt64 As System.UInt64 = 10 \n      &#39; Dim xSByte As System.SByte = - 11\n      &#39;\n      Console.WriteLine(&quot;StringBuilder.Insert method&quot;)\n      sb = New StringBuilder(initialValue)\n      \n      sb.Insert(3, xyz, 2)\n      Show(1, sb)\n      \n      sb.Insert(3, xyz)\n      Show(2, sb)\n      \n      sb.Insert(3, star)\n      Show(3, sb)\n      \n      sb.Insert(3, abc)\n      Show(4, sb)\n      \n      sb.Insert(3, abc, 1, 2)\n      Show(5, sb)\n      \n      sb.Insert(3, xBool)     &#39; True\n      Show(6, sb)\n      \n      sb.Insert(3, obj)       &#39; 0\n      Show(7, sb)\n      \n      sb.Insert(3, xByte)     &#39; 1\n      Show(8, sb)\n      \n      sb.Insert(3, xInt16)    &#39; 2\n      Show(9, sb)\n      \n      sb.Insert(3, xInt32)    &#39; 3\n      Show(10, sb)\n      \n      sb.Insert(3, xInt64)    &#39; 4\n      Show(11, sb)\n      \n      sb.Insert(3, xDecimal)  &#39; 5\n      Show(12, sb)\n      \n      sb.Insert(3, xSingle)   &#39; 6.6\n      Show(13, sb)\n      \n      sb.Insert(3, xDouble)   &#39; 7.7\n      Show(14, sb)\n      \n      &#39; The following Insert methods are not CLS-compliant.\n      &#39; sb.Insert(3, xUInt16) &#39; 8\n      &#39; sb.Insert(3, xUInt32) &#39; 9\n      &#39; sb.Insert(3, xUInt64) &#39; 10\n      &#39; sb.Insert(3, xSByte)  &#39; -11\n\n   End Sub &#39;Main\n   \n   Public Shared Sub Show(overloadNumber As Integer, sbs As StringBuilder)\n      Console.WriteLine(&quot;{0,2:G} = {1}&quot;, overloadNumber, sbs.ToString())\n      sb = New StringBuilder(initialValue)\n   End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;StringBuilder.Insert method\n&#39; 1 = --[xyzxyz]--\n&#39; 2 = --[xyz]--\n&#39; 3 = --[*]--\n&#39; 4 = --[abc]--\n&#39; 5 = --[bc]--\n&#39; 6 = --[True]--\n&#39; 7 = --[0]--\n&#39; 8 = --[1]--\n&#39; 9 = --[2]--\n&#39;10 = --[3]--\n&#39;11 = --[4]--\n&#39;12 = --[5]--\n&#39;13 = --[6.6]--\n&#39;14 = --[7.7]--\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Insert_System_Int32_System_Double_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Insert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Insert(Int32,Double)</div>        \r\n          </div>\r\n    \r\n            <p>Inserts the string representation of a double-precision floating-point number into this instance at the specified character position.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Insert (int index, double value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position in this instance where insertion begins.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to insert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the insert operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero or greater than the length of this instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.double#System_Double_ToString_\" data-linktype=\"relative-path\">ToString</a> is used to get a string representation of <code>value</code>. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Insert_\" data-linktype=\"relative-path\">Insert</a> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"stringbuilder.insert#1\">using namespace System;\nusing namespace System::Text;\nref class Sample\n{\nprivate:\n\n   //                           index: 012345\n   static String^ initialValue = &quot;--[]--&quot;;\n   static StringBuilder^ sb;\n\npublic:\n   static void Main()\n   {\n      String^ xyz = &quot;xyz&quot;;\n      array&lt;Char&gt;^abc = {&#39;a&#39;,&#39;b&#39;,&#39;c&#39;};\n      Char star = &#39;*&#39;;\n      Object^ obj = 0;\n      bool xBool = true;\n      Byte xByte = 1;\n      short xInt16 = 2;\n      int xInt32 = 3;\n      long xInt64 = 4;\n      Decimal xDecimal = 5;\n      float xSingle = 6.6F;\n      double xDouble = 7.7;\n      \n      // The following types are not CLS-compliant.\n      UInt16 xUInt16 = 8;\n      UInt32 xUInt32 = 9;\n      UInt64 xUInt64 = 10;\n      SByte xSByte = -11;\n      \n      //\n      Console::WriteLine( &quot;StringBuilder.Insert method&quot; );\n      sb = gcnew StringBuilder( initialValue );\n      sb-&gt;Insert( 3, xyz, 2 );\n      Show( 1, sb );\n      sb-&gt;Insert( 3, xyz );\n      Show( 2, sb );\n      sb-&gt;Insert( 3, star );\n      Show( 3, sb );\n      sb-&gt;Insert( 3, abc );\n      Show( 4, sb );\n      sb-&gt;Insert( 3, abc, 1, 2 );\n      Show( 5, sb );\n      sb-&gt;Insert( 3, xBool ); // True\n      Show( 6, sb );\n      sb-&gt;Insert( 3, obj ); // 0\n      Show( 7, sb );\n      sb-&gt;Insert( 3, xByte ); // 1\n      Show( 8, sb );\n      sb-&gt;Insert( 3, xInt16 ); // 2\n      Show( 9, sb );\n      sb-&gt;Insert( 3, xInt32 ); // 3\n      Show( 10, sb );\n      sb-&gt;Insert( 3, xInt64 ); // 4\n      Show( 11, sb );\n      sb-&gt;Insert( 3, xDecimal ); // 5\n      Show( 12, sb );\n      sb-&gt;Insert( 3, xSingle ); // 6.6\n      Show( 13, sb );\n      sb-&gt;Insert( 3, xDouble ); // 7.7\n      Show( 14, sb );\n      \n      // The following Insert methods are not CLS-compliant.\n      sb-&gt;Insert( 3, xUInt16 ); // 8\n      Show( 15, sb );\n      sb-&gt;Insert( 3, xUInt32 ); // 9\n      Show( 16, sb );\n      sb-&gt;Insert( 3, xUInt64 ); // 10\n      Show( 17, sb );\n      sb-&gt;Insert( 3, xSByte ); // -11\n      Show( 18, sb );\n      \n      //\n   }\n\n   static void Show( int overloadNumber, StringBuilder^ sbs )\n   {\n      Console::WriteLine( &quot;{0,2:G} = {1}&quot;, overloadNumber, sbs );\n      sb = gcnew StringBuilder( initialValue );\n   }\n\n};\n\nint main()\n{\n   Sample::Main();\n}\n\n/*\nThis example produces the following results:\n\nStringBuilder.Insert method\n 1 = --[xyzxyz]--\n 2 = --[xyz]--\n 3 = --[*]--\n 4 = --[abc]--\n 5 = --[bc]--\n 6 = --[True]--\n 7 = --[0]--\n 8 = --[1]--\n 9 = --[2]--\n10 = --[3]--\n11 = --[4]--\n12 = --[5]--\n13 = --[6.6]--\n14 = --[7.7]--\n15 = --[8]--\n16 = --[9]--\n17 = --[10]--\n18 = --[-11]--\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"stringbuilder.insert#1\">using System;\nusing System.Text;\n\nclass Sample \n{\n//                         index: 012345\n    static string initialValue = &quot;--[]--&quot;;\n    static StringBuilder sb;\n\n    public static void Main() \n    {\n    string      xyz       = &quot;xyz&quot;;\n    char[]      abc       = {&#39;a&#39;, &#39;b&#39;, &#39;c&#39;};\n    char        star      = &#39;*&#39;;\n    Object \tobj       = 0;\n\n    bool        xBool     = true;\n    byte        xByte     = 1;\n    short       xInt16    = 2;\n    int         xInt32    = 3;\n    long        xInt64    = 4;\n    Decimal     xDecimal  = 5;\n    float       xSingle   = 6.6F;\n    double      xDouble   = 7.7;\n\n// The following types are not CLS-compliant.\n    ushort      xUInt16   = 8;\n    uint        xUInt32   = 9;\n    ulong       xUInt64   = 10;\n    sbyte       xSByte    = -11;\n//\n    Console.WriteLine(&quot;StringBuilder.Insert method&quot;);\n    sb = new StringBuilder(initialValue);\n\n    sb.Insert(3, xyz, 2);\n    Show(1, sb);\n\n    sb.Insert(3, xyz);\n    Show(2, sb);\n\n    sb.Insert(3, star);\n    Show(3, sb);\n\n    sb.Insert(3, abc);\n    Show(4, sb);\n\n    sb.Insert(3, abc, 1, 2);\n    Show(5, sb);\n\n    sb.Insert(3, xBool);     // True\n    Show(6, sb);\n\n    sb.Insert(3, obj);       // 0\n    Show(7, sb);\n\n    sb.Insert(3, xByte);     // 1\n    Show(8, sb);\n\n    sb.Insert(3, xInt16);    // 2\n    Show(9, sb);\n\n    sb.Insert(3, xInt32);    // 3\n    Show(10, sb);\n\n    sb.Insert(3, xInt64);    // 4\n    Show(11, sb);\n\n    sb.Insert(3, xDecimal);  // 5\n    Show(12, sb);\n\n    sb.Insert(3, xSingle);   // 6.6\n    Show(13, sb);\n\n    sb.Insert(3, xDouble);   // 7.7\n    Show(14, sb);\n\n// The following Insert methods are not CLS-compliant.\n    sb.Insert(3, xUInt16);   // 8\n    Show(15, sb);\n\n    sb.Insert(3, xUInt32);   // 9\n    Show(16, sb);\n\n    sb.Insert(3, xUInt64);   // 10\n    Show(17, sb);\n\n    sb.Insert(3, xSByte);    // -11\n    Show(18, sb);\n//\n    }\n\n    public static void Show(int overloadNumber, StringBuilder sbs)\n    {\n    Console.WriteLine(&quot;{0,2:G} = {1}&quot;, overloadNumber, sbs.ToString());\n    sb = new StringBuilder(initialValue);\n    }\n}\n/*\nThis example produces the following results:\n\nStringBuilder.Insert method\n 1 = --[xyzxyz]--\n 2 = --[xyz]--\n 3 = --[*]--\n 4 = --[abc]--\n 5 = --[bc]--\n 6 = --[True]--\n 7 = --[0]--\n 8 = --[1]--\n 9 = --[2]--\n10 = --[3]--\n11 = --[4]--\n12 = --[5]--\n13 = --[6.6]--\n14 = --[7.7]--\n15 = --[8]--\n16 = --[9]--\n17 = --[10]--\n18 = --[-11]--\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"stringbuilder.insert#1\">Imports System\nImports System.Text\n\nClass Sample\n   &#39;                                 index: 012345\n   Private Shared initialValue As String = &quot;--[]--&quot;\n   Private Shared sb As StringBuilder\n   \n   Public Shared Sub Main()\n      Dim xyz As String = &quot;xyz&quot;\n      Dim abc As Char() =  {&quot;a&quot;c, &quot;b&quot;c, &quot;c&quot;c}\n      Dim star As Char = &quot;*&quot;c\n      Dim obj As [Object] = 0\n      \n      Dim xBool As Boolean = True\n      Dim xByte As Byte = 1\n      Dim xInt16 As Short = 2\n      Dim xInt32 As Integer = 3\n      Dim xInt64 As Long = 4\n      Dim xDecimal As [Decimal] = 5\n      Dim xSingle As Single = 6.6F\n      Dim xDouble As Double = 7.7\n      \n      &#39; The following types are not CLS-compliant.\n      &#39; Dim xUInt16 As System.UInt16 = 8 \n      &#39; Dim xUInt32 As System.UInt32 = 9\n      &#39; Dim xUInt64 As System.UInt64 = 10 \n      &#39; Dim xSByte As System.SByte = - 11\n      &#39;\n      Console.WriteLine(&quot;StringBuilder.Insert method&quot;)\n      sb = New StringBuilder(initialValue)\n      \n      sb.Insert(3, xyz, 2)\n      Show(1, sb)\n      \n      sb.Insert(3, xyz)\n      Show(2, sb)\n      \n      sb.Insert(3, star)\n      Show(3, sb)\n      \n      sb.Insert(3, abc)\n      Show(4, sb)\n      \n      sb.Insert(3, abc, 1, 2)\n      Show(5, sb)\n      \n      sb.Insert(3, xBool)     &#39; True\n      Show(6, sb)\n      \n      sb.Insert(3, obj)       &#39; 0\n      Show(7, sb)\n      \n      sb.Insert(3, xByte)     &#39; 1\n      Show(8, sb)\n      \n      sb.Insert(3, xInt16)    &#39; 2\n      Show(9, sb)\n      \n      sb.Insert(3, xInt32)    &#39; 3\n      Show(10, sb)\n      \n      sb.Insert(3, xInt64)    &#39; 4\n      Show(11, sb)\n      \n      sb.Insert(3, xDecimal)  &#39; 5\n      Show(12, sb)\n      \n      sb.Insert(3, xSingle)   &#39; 6.6\n      Show(13, sb)\n      \n      sb.Insert(3, xDouble)   &#39; 7.7\n      Show(14, sb)\n      \n      &#39; The following Insert methods are not CLS-compliant.\n      &#39; sb.Insert(3, xUInt16) &#39; 8\n      &#39; sb.Insert(3, xUInt32) &#39; 9\n      &#39; sb.Insert(3, xUInt64) &#39; 10\n      &#39; sb.Insert(3, xSByte)  &#39; -11\n\n   End Sub &#39;Main\n   \n   Public Shared Sub Show(overloadNumber As Integer, sbs As StringBuilder)\n      Console.WriteLine(&quot;{0,2:G} = {1}&quot;, overloadNumber, sbs.ToString())\n      sb = New StringBuilder(initialValue)\n   End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;StringBuilder.Insert method\n&#39; 1 = --[xyzxyz]--\n&#39; 2 = --[xyz]--\n&#39; 3 = --[*]--\n&#39; 4 = --[abc]--\n&#39; 5 = --[bc]--\n&#39; 6 = --[True]--\n&#39; 7 = --[0]--\n&#39; 8 = --[1]--\n&#39; 9 = --[2]--\n&#39;10 = --[3]--\n&#39;11 = --[4]--\n&#39;12 = --[5]--\n&#39;13 = --[6.6]--\n&#39;14 = --[7.7]--\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Insert_System_Int32_System_Int16_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Insert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Insert(Int32,Int16)</div>        \r\n          </div>\r\n    \r\n            <p>Inserts the string representation of a specified 16-bit signed integer into this instance at the specified character position.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Insert (int index, short value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position in this instance where insertion begins.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to insert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the insert operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero or greater than the length of this instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.int16#System_Int16_ToString_\" data-linktype=\"relative-path\">ToString</a> is used to get a string representation of <code>value</code>. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Insert_\" data-linktype=\"relative-path\">Insert</a> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"stringbuilder.insert#1\">using namespace System;\nusing namespace System::Text;\nref class Sample\n{\nprivate:\n\n   //                           index: 012345\n   static String^ initialValue = &quot;--[]--&quot;;\n   static StringBuilder^ sb;\n\npublic:\n   static void Main()\n   {\n      String^ xyz = &quot;xyz&quot;;\n      array&lt;Char&gt;^abc = {&#39;a&#39;,&#39;b&#39;,&#39;c&#39;};\n      Char star = &#39;*&#39;;\n      Object^ obj = 0;\n      bool xBool = true;\n      Byte xByte = 1;\n      short xInt16 = 2;\n      int xInt32 = 3;\n      long xInt64 = 4;\n      Decimal xDecimal = 5;\n      float xSingle = 6.6F;\n      double xDouble = 7.7;\n      \n      // The following types are not CLS-compliant.\n      UInt16 xUInt16 = 8;\n      UInt32 xUInt32 = 9;\n      UInt64 xUInt64 = 10;\n      SByte xSByte = -11;\n      \n      //\n      Console::WriteLine( &quot;StringBuilder.Insert method&quot; );\n      sb = gcnew StringBuilder( initialValue );\n      sb-&gt;Insert( 3, xyz, 2 );\n      Show( 1, sb );\n      sb-&gt;Insert( 3, xyz );\n      Show( 2, sb );\n      sb-&gt;Insert( 3, star );\n      Show( 3, sb );\n      sb-&gt;Insert( 3, abc );\n      Show( 4, sb );\n      sb-&gt;Insert( 3, abc, 1, 2 );\n      Show( 5, sb );\n      sb-&gt;Insert( 3, xBool ); // True\n      Show( 6, sb );\n      sb-&gt;Insert( 3, obj ); // 0\n      Show( 7, sb );\n      sb-&gt;Insert( 3, xByte ); // 1\n      Show( 8, sb );\n      sb-&gt;Insert( 3, xInt16 ); // 2\n      Show( 9, sb );\n      sb-&gt;Insert( 3, xInt32 ); // 3\n      Show( 10, sb );\n      sb-&gt;Insert( 3, xInt64 ); // 4\n      Show( 11, sb );\n      sb-&gt;Insert( 3, xDecimal ); // 5\n      Show( 12, sb );\n      sb-&gt;Insert( 3, xSingle ); // 6.6\n      Show( 13, sb );\n      sb-&gt;Insert( 3, xDouble ); // 7.7\n      Show( 14, sb );\n      \n      // The following Insert methods are not CLS-compliant.\n      sb-&gt;Insert( 3, xUInt16 ); // 8\n      Show( 15, sb );\n      sb-&gt;Insert( 3, xUInt32 ); // 9\n      Show( 16, sb );\n      sb-&gt;Insert( 3, xUInt64 ); // 10\n      Show( 17, sb );\n      sb-&gt;Insert( 3, xSByte ); // -11\n      Show( 18, sb );\n      \n      //\n   }\n\n   static void Show( int overloadNumber, StringBuilder^ sbs )\n   {\n      Console::WriteLine( &quot;{0,2:G} = {1}&quot;, overloadNumber, sbs );\n      sb = gcnew StringBuilder( initialValue );\n   }\n\n};\n\nint main()\n{\n   Sample::Main();\n}\n\n/*\nThis example produces the following results:\n\nStringBuilder.Insert method\n 1 = --[xyzxyz]--\n 2 = --[xyz]--\n 3 = --[*]--\n 4 = --[abc]--\n 5 = --[bc]--\n 6 = --[True]--\n 7 = --[0]--\n 8 = --[1]--\n 9 = --[2]--\n10 = --[3]--\n11 = --[4]--\n12 = --[5]--\n13 = --[6.6]--\n14 = --[7.7]--\n15 = --[8]--\n16 = --[9]--\n17 = --[10]--\n18 = --[-11]--\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"stringbuilder.insert#1\">using System;\nusing System.Text;\n\nclass Sample \n{\n//                         index: 012345\n    static string initialValue = &quot;--[]--&quot;;\n    static StringBuilder sb;\n\n    public static void Main() \n    {\n    string      xyz       = &quot;xyz&quot;;\n    char[]      abc       = {&#39;a&#39;, &#39;b&#39;, &#39;c&#39;};\n    char        star      = &#39;*&#39;;\n    Object \tobj       = 0;\n\n    bool        xBool     = true;\n    byte        xByte     = 1;\n    short       xInt16    = 2;\n    int         xInt32    = 3;\n    long        xInt64    = 4;\n    Decimal     xDecimal  = 5;\n    float       xSingle   = 6.6F;\n    double      xDouble   = 7.7;\n\n// The following types are not CLS-compliant.\n    ushort      xUInt16   = 8;\n    uint        xUInt32   = 9;\n    ulong       xUInt64   = 10;\n    sbyte       xSByte    = -11;\n//\n    Console.WriteLine(&quot;StringBuilder.Insert method&quot;);\n    sb = new StringBuilder(initialValue);\n\n    sb.Insert(3, xyz, 2);\n    Show(1, sb);\n\n    sb.Insert(3, xyz);\n    Show(2, sb);\n\n    sb.Insert(3, star);\n    Show(3, sb);\n\n    sb.Insert(3, abc);\n    Show(4, sb);\n\n    sb.Insert(3, abc, 1, 2);\n    Show(5, sb);\n\n    sb.Insert(3, xBool);     // True\n    Show(6, sb);\n\n    sb.Insert(3, obj);       // 0\n    Show(7, sb);\n\n    sb.Insert(3, xByte);     // 1\n    Show(8, sb);\n\n    sb.Insert(3, xInt16);    // 2\n    Show(9, sb);\n\n    sb.Insert(3, xInt32);    // 3\n    Show(10, sb);\n\n    sb.Insert(3, xInt64);    // 4\n    Show(11, sb);\n\n    sb.Insert(3, xDecimal);  // 5\n    Show(12, sb);\n\n    sb.Insert(3, xSingle);   // 6.6\n    Show(13, sb);\n\n    sb.Insert(3, xDouble);   // 7.7\n    Show(14, sb);\n\n// The following Insert methods are not CLS-compliant.\n    sb.Insert(3, xUInt16);   // 8\n    Show(15, sb);\n\n    sb.Insert(3, xUInt32);   // 9\n    Show(16, sb);\n\n    sb.Insert(3, xUInt64);   // 10\n    Show(17, sb);\n\n    sb.Insert(3, xSByte);    // -11\n    Show(18, sb);\n//\n    }\n\n    public static void Show(int overloadNumber, StringBuilder sbs)\n    {\n    Console.WriteLine(&quot;{0,2:G} = {1}&quot;, overloadNumber, sbs.ToString());\n    sb = new StringBuilder(initialValue);\n    }\n}\n/*\nThis example produces the following results:\n\nStringBuilder.Insert method\n 1 = --[xyzxyz]--\n 2 = --[xyz]--\n 3 = --[*]--\n 4 = --[abc]--\n 5 = --[bc]--\n 6 = --[True]--\n 7 = --[0]--\n 8 = --[1]--\n 9 = --[2]--\n10 = --[3]--\n11 = --[4]--\n12 = --[5]--\n13 = --[6.6]--\n14 = --[7.7]--\n15 = --[8]--\n16 = --[9]--\n17 = --[10]--\n18 = --[-11]--\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"stringbuilder.insert#1\">Imports System\nImports System.Text\n\nClass Sample\n   &#39;                                 index: 012345\n   Private Shared initialValue As String = &quot;--[]--&quot;\n   Private Shared sb As StringBuilder\n   \n   Public Shared Sub Main()\n      Dim xyz As String = &quot;xyz&quot;\n      Dim abc As Char() =  {&quot;a&quot;c, &quot;b&quot;c, &quot;c&quot;c}\n      Dim star As Char = &quot;*&quot;c\n      Dim obj As [Object] = 0\n      \n      Dim xBool As Boolean = True\n      Dim xByte As Byte = 1\n      Dim xInt16 As Short = 2\n      Dim xInt32 As Integer = 3\n      Dim xInt64 As Long = 4\n      Dim xDecimal As [Decimal] = 5\n      Dim xSingle As Single = 6.6F\n      Dim xDouble As Double = 7.7\n      \n      &#39; The following types are not CLS-compliant.\n      &#39; Dim xUInt16 As System.UInt16 = 8 \n      &#39; Dim xUInt32 As System.UInt32 = 9\n      &#39; Dim xUInt64 As System.UInt64 = 10 \n      &#39; Dim xSByte As System.SByte = - 11\n      &#39;\n      Console.WriteLine(&quot;StringBuilder.Insert method&quot;)\n      sb = New StringBuilder(initialValue)\n      \n      sb.Insert(3, xyz, 2)\n      Show(1, sb)\n      \n      sb.Insert(3, xyz)\n      Show(2, sb)\n      \n      sb.Insert(3, star)\n      Show(3, sb)\n      \n      sb.Insert(3, abc)\n      Show(4, sb)\n      \n      sb.Insert(3, abc, 1, 2)\n      Show(5, sb)\n      \n      sb.Insert(3, xBool)     &#39; True\n      Show(6, sb)\n      \n      sb.Insert(3, obj)       &#39; 0\n      Show(7, sb)\n      \n      sb.Insert(3, xByte)     &#39; 1\n      Show(8, sb)\n      \n      sb.Insert(3, xInt16)    &#39; 2\n      Show(9, sb)\n      \n      sb.Insert(3, xInt32)    &#39; 3\n      Show(10, sb)\n      \n      sb.Insert(3, xInt64)    &#39; 4\n      Show(11, sb)\n      \n      sb.Insert(3, xDecimal)  &#39; 5\n      Show(12, sb)\n      \n      sb.Insert(3, xSingle)   &#39; 6.6\n      Show(13, sb)\n      \n      sb.Insert(3, xDouble)   &#39; 7.7\n      Show(14, sb)\n      \n      &#39; The following Insert methods are not CLS-compliant.\n      &#39; sb.Insert(3, xUInt16) &#39; 8\n      &#39; sb.Insert(3, xUInt32) &#39; 9\n      &#39; sb.Insert(3, xUInt64) &#39; 10\n      &#39; sb.Insert(3, xSByte)  &#39; -11\n\n   End Sub &#39;Main\n   \n   Public Shared Sub Show(overloadNumber As Integer, sbs As StringBuilder)\n      Console.WriteLine(&quot;{0,2:G} = {1}&quot;, overloadNumber, sbs.ToString())\n      sb = New StringBuilder(initialValue)\n   End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;StringBuilder.Insert method\n&#39; 1 = --[xyzxyz]--\n&#39; 2 = --[xyz]--\n&#39; 3 = --[*]--\n&#39; 4 = --[abc]--\n&#39; 5 = --[bc]--\n&#39; 6 = --[True]--\n&#39; 7 = --[0]--\n&#39; 8 = --[1]--\n&#39; 9 = --[2]--\n&#39;10 = --[3]--\n&#39;11 = --[4]--\n&#39;12 = --[5]--\n&#39;13 = --[6.6]--\n&#39;14 = --[7.7]--\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Insert_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Insert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Insert(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Inserts the string representation of a specified 32-bit signed integer into this instance at the specified character position.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Insert (int index, int value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position in this instance where insertion begins.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to insert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the insert operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero or greater than the length of this instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.int32#System_Int32_ToString_\" data-linktype=\"relative-path\">ToString</a> is used to get a string representation of <code>value</code>. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Insert_\" data-linktype=\"relative-path\">Insert</a> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"stringbuilder.insert#1\">using namespace System;\nusing namespace System::Text;\nref class Sample\n{\nprivate:\n\n   //                           index: 012345\n   static String^ initialValue = &quot;--[]--&quot;;\n   static StringBuilder^ sb;\n\npublic:\n   static void Main()\n   {\n      String^ xyz = &quot;xyz&quot;;\n      array&lt;Char&gt;^abc = {&#39;a&#39;,&#39;b&#39;,&#39;c&#39;};\n      Char star = &#39;*&#39;;\n      Object^ obj = 0;\n      bool xBool = true;\n      Byte xByte = 1;\n      short xInt16 = 2;\n      int xInt32 = 3;\n      long xInt64 = 4;\n      Decimal xDecimal = 5;\n      float xSingle = 6.6F;\n      double xDouble = 7.7;\n      \n      // The following types are not CLS-compliant.\n      UInt16 xUInt16 = 8;\n      UInt32 xUInt32 = 9;\n      UInt64 xUInt64 = 10;\n      SByte xSByte = -11;\n      \n      //\n      Console::WriteLine( &quot;StringBuilder.Insert method&quot; );\n      sb = gcnew StringBuilder( initialValue );\n      sb-&gt;Insert( 3, xyz, 2 );\n      Show( 1, sb );\n      sb-&gt;Insert( 3, xyz );\n      Show( 2, sb );\n      sb-&gt;Insert( 3, star );\n      Show( 3, sb );\n      sb-&gt;Insert( 3, abc );\n      Show( 4, sb );\n      sb-&gt;Insert( 3, abc, 1, 2 );\n      Show( 5, sb );\n      sb-&gt;Insert( 3, xBool ); // True\n      Show( 6, sb );\n      sb-&gt;Insert( 3, obj ); // 0\n      Show( 7, sb );\n      sb-&gt;Insert( 3, xByte ); // 1\n      Show( 8, sb );\n      sb-&gt;Insert( 3, xInt16 ); // 2\n      Show( 9, sb );\n      sb-&gt;Insert( 3, xInt32 ); // 3\n      Show( 10, sb );\n      sb-&gt;Insert( 3, xInt64 ); // 4\n      Show( 11, sb );\n      sb-&gt;Insert( 3, xDecimal ); // 5\n      Show( 12, sb );\n      sb-&gt;Insert( 3, xSingle ); // 6.6\n      Show( 13, sb );\n      sb-&gt;Insert( 3, xDouble ); // 7.7\n      Show( 14, sb );\n      \n      // The following Insert methods are not CLS-compliant.\n      sb-&gt;Insert( 3, xUInt16 ); // 8\n      Show( 15, sb );\n      sb-&gt;Insert( 3, xUInt32 ); // 9\n      Show( 16, sb );\n      sb-&gt;Insert( 3, xUInt64 ); // 10\n      Show( 17, sb );\n      sb-&gt;Insert( 3, xSByte ); // -11\n      Show( 18, sb );\n      \n      //\n   }\n\n   static void Show( int overloadNumber, StringBuilder^ sbs )\n   {\n      Console::WriteLine( &quot;{0,2:G} = {1}&quot;, overloadNumber, sbs );\n      sb = gcnew StringBuilder( initialValue );\n   }\n\n};\n\nint main()\n{\n   Sample::Main();\n}\n\n/*\nThis example produces the following results:\n\nStringBuilder.Insert method\n 1 = --[xyzxyz]--\n 2 = --[xyz]--\n 3 = --[*]--\n 4 = --[abc]--\n 5 = --[bc]--\n 6 = --[True]--\n 7 = --[0]--\n 8 = --[1]--\n 9 = --[2]--\n10 = --[3]--\n11 = --[4]--\n12 = --[5]--\n13 = --[6.6]--\n14 = --[7.7]--\n15 = --[8]--\n16 = --[9]--\n17 = --[10]--\n18 = --[-11]--\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"stringbuilder.insert#1\">using System;\nusing System.Text;\n\nclass Sample \n{\n//                         index: 012345\n    static string initialValue = &quot;--[]--&quot;;\n    static StringBuilder sb;\n\n    public static void Main() \n    {\n    string      xyz       = &quot;xyz&quot;;\n    char[]      abc       = {&#39;a&#39;, &#39;b&#39;, &#39;c&#39;};\n    char        star      = &#39;*&#39;;\n    Object \tobj       = 0;\n\n    bool        xBool     = true;\n    byte        xByte     = 1;\n    short       xInt16    = 2;\n    int         xInt32    = 3;\n    long        xInt64    = 4;\n    Decimal     xDecimal  = 5;\n    float       xSingle   = 6.6F;\n    double      xDouble   = 7.7;\n\n// The following types are not CLS-compliant.\n    ushort      xUInt16   = 8;\n    uint        xUInt32   = 9;\n    ulong       xUInt64   = 10;\n    sbyte       xSByte    = -11;\n//\n    Console.WriteLine(&quot;StringBuilder.Insert method&quot;);\n    sb = new StringBuilder(initialValue);\n\n    sb.Insert(3, xyz, 2);\n    Show(1, sb);\n\n    sb.Insert(3, xyz);\n    Show(2, sb);\n\n    sb.Insert(3, star);\n    Show(3, sb);\n\n    sb.Insert(3, abc);\n    Show(4, sb);\n\n    sb.Insert(3, abc, 1, 2);\n    Show(5, sb);\n\n    sb.Insert(3, xBool);     // True\n    Show(6, sb);\n\n    sb.Insert(3, obj);       // 0\n    Show(7, sb);\n\n    sb.Insert(3, xByte);     // 1\n    Show(8, sb);\n\n    sb.Insert(3, xInt16);    // 2\n    Show(9, sb);\n\n    sb.Insert(3, xInt32);    // 3\n    Show(10, sb);\n\n    sb.Insert(3, xInt64);    // 4\n    Show(11, sb);\n\n    sb.Insert(3, xDecimal);  // 5\n    Show(12, sb);\n\n    sb.Insert(3, xSingle);   // 6.6\n    Show(13, sb);\n\n    sb.Insert(3, xDouble);   // 7.7\n    Show(14, sb);\n\n// The following Insert methods are not CLS-compliant.\n    sb.Insert(3, xUInt16);   // 8\n    Show(15, sb);\n\n    sb.Insert(3, xUInt32);   // 9\n    Show(16, sb);\n\n    sb.Insert(3, xUInt64);   // 10\n    Show(17, sb);\n\n    sb.Insert(3, xSByte);    // -11\n    Show(18, sb);\n//\n    }\n\n    public static void Show(int overloadNumber, StringBuilder sbs)\n    {\n    Console.WriteLine(&quot;{0,2:G} = {1}&quot;, overloadNumber, sbs.ToString());\n    sb = new StringBuilder(initialValue);\n    }\n}\n/*\nThis example produces the following results:\n\nStringBuilder.Insert method\n 1 = --[xyzxyz]--\n 2 = --[xyz]--\n 3 = --[*]--\n 4 = --[abc]--\n 5 = --[bc]--\n 6 = --[True]--\n 7 = --[0]--\n 8 = --[1]--\n 9 = --[2]--\n10 = --[3]--\n11 = --[4]--\n12 = --[5]--\n13 = --[6.6]--\n14 = --[7.7]--\n15 = --[8]--\n16 = --[9]--\n17 = --[10]--\n18 = --[-11]--\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"stringbuilder.insert#1\">Imports System\nImports System.Text\n\nClass Sample\n   &#39;                                 index: 012345\n   Private Shared initialValue As String = &quot;--[]--&quot;\n   Private Shared sb As StringBuilder\n   \n   Public Shared Sub Main()\n      Dim xyz As String = &quot;xyz&quot;\n      Dim abc As Char() =  {&quot;a&quot;c, &quot;b&quot;c, &quot;c&quot;c}\n      Dim star As Char = &quot;*&quot;c\n      Dim obj As [Object] = 0\n      \n      Dim xBool As Boolean = True\n      Dim xByte As Byte = 1\n      Dim xInt16 As Short = 2\n      Dim xInt32 As Integer = 3\n      Dim xInt64 As Long = 4\n      Dim xDecimal As [Decimal] = 5\n      Dim xSingle As Single = 6.6F\n      Dim xDouble As Double = 7.7\n      \n      &#39; The following types are not CLS-compliant.\n      &#39; Dim xUInt16 As System.UInt16 = 8 \n      &#39; Dim xUInt32 As System.UInt32 = 9\n      &#39; Dim xUInt64 As System.UInt64 = 10 \n      &#39; Dim xSByte As System.SByte = - 11\n      &#39;\n      Console.WriteLine(&quot;StringBuilder.Insert method&quot;)\n      sb = New StringBuilder(initialValue)\n      \n      sb.Insert(3, xyz, 2)\n      Show(1, sb)\n      \n      sb.Insert(3, xyz)\n      Show(2, sb)\n      \n      sb.Insert(3, star)\n      Show(3, sb)\n      \n      sb.Insert(3, abc)\n      Show(4, sb)\n      \n      sb.Insert(3, abc, 1, 2)\n      Show(5, sb)\n      \n      sb.Insert(3, xBool)     &#39; True\n      Show(6, sb)\n      \n      sb.Insert(3, obj)       &#39; 0\n      Show(7, sb)\n      \n      sb.Insert(3, xByte)     &#39; 1\n      Show(8, sb)\n      \n      sb.Insert(3, xInt16)    &#39; 2\n      Show(9, sb)\n      \n      sb.Insert(3, xInt32)    &#39; 3\n      Show(10, sb)\n      \n      sb.Insert(3, xInt64)    &#39; 4\n      Show(11, sb)\n      \n      sb.Insert(3, xDecimal)  &#39; 5\n      Show(12, sb)\n      \n      sb.Insert(3, xSingle)   &#39; 6.6\n      Show(13, sb)\n      \n      sb.Insert(3, xDouble)   &#39; 7.7\n      Show(14, sb)\n      \n      &#39; The following Insert methods are not CLS-compliant.\n      &#39; sb.Insert(3, xUInt16) &#39; 8\n      &#39; sb.Insert(3, xUInt32) &#39; 9\n      &#39; sb.Insert(3, xUInt64) &#39; 10\n      &#39; sb.Insert(3, xSByte)  &#39; -11\n\n   End Sub &#39;Main\n   \n   Public Shared Sub Show(overloadNumber As Integer, sbs As StringBuilder)\n      Console.WriteLine(&quot;{0,2:G} = {1}&quot;, overloadNumber, sbs.ToString())\n      sb = New StringBuilder(initialValue)\n   End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;StringBuilder.Insert method\n&#39; 1 = --[xyzxyz]--\n&#39; 2 = --[xyz]--\n&#39; 3 = --[*]--\n&#39; 4 = --[abc]--\n&#39; 5 = --[bc]--\n&#39; 6 = --[True]--\n&#39; 7 = --[0]--\n&#39; 8 = --[1]--\n&#39; 9 = --[2]--\n&#39;10 = --[3]--\n&#39;11 = --[4]--\n&#39;12 = --[5]--\n&#39;13 = --[6.6]--\n&#39;14 = --[7.7]--\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Insert_System_Int32_System_Int64_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Insert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Insert(Int32,Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Inserts the string representation of a 64-bit signed integer into this instance at the specified character position.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Insert (int index, long value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position in this instance where insertion begins.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to insert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the insert operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero or greater than the length of this instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.int64#System_Int64_ToString_\" data-linktype=\"relative-path\">ToString</a> is used to get a string representation of <code>value</code>. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Insert_\" data-linktype=\"relative-path\">Insert</a> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"stringbuilder.insert#1\">using namespace System;\nusing namespace System::Text;\nref class Sample\n{\nprivate:\n\n   //                           index: 012345\n   static String^ initialValue = &quot;--[]--&quot;;\n   static StringBuilder^ sb;\n\npublic:\n   static void Main()\n   {\n      String^ xyz = &quot;xyz&quot;;\n      array&lt;Char&gt;^abc = {&#39;a&#39;,&#39;b&#39;,&#39;c&#39;};\n      Char star = &#39;*&#39;;\n      Object^ obj = 0;\n      bool xBool = true;\n      Byte xByte = 1;\n      short xInt16 = 2;\n      int xInt32 = 3;\n      long xInt64 = 4;\n      Decimal xDecimal = 5;\n      float xSingle = 6.6F;\n      double xDouble = 7.7;\n      \n      // The following types are not CLS-compliant.\n      UInt16 xUInt16 = 8;\n      UInt32 xUInt32 = 9;\n      UInt64 xUInt64 = 10;\n      SByte xSByte = -11;\n      \n      //\n      Console::WriteLine( &quot;StringBuilder.Insert method&quot; );\n      sb = gcnew StringBuilder( initialValue );\n      sb-&gt;Insert( 3, xyz, 2 );\n      Show( 1, sb );\n      sb-&gt;Insert( 3, xyz );\n      Show( 2, sb );\n      sb-&gt;Insert( 3, star );\n      Show( 3, sb );\n      sb-&gt;Insert( 3, abc );\n      Show( 4, sb );\n      sb-&gt;Insert( 3, abc, 1, 2 );\n      Show( 5, sb );\n      sb-&gt;Insert( 3, xBool ); // True\n      Show( 6, sb );\n      sb-&gt;Insert( 3, obj ); // 0\n      Show( 7, sb );\n      sb-&gt;Insert( 3, xByte ); // 1\n      Show( 8, sb );\n      sb-&gt;Insert( 3, xInt16 ); // 2\n      Show( 9, sb );\n      sb-&gt;Insert( 3, xInt32 ); // 3\n      Show( 10, sb );\n      sb-&gt;Insert( 3, xInt64 ); // 4\n      Show( 11, sb );\n      sb-&gt;Insert( 3, xDecimal ); // 5\n      Show( 12, sb );\n      sb-&gt;Insert( 3, xSingle ); // 6.6\n      Show( 13, sb );\n      sb-&gt;Insert( 3, xDouble ); // 7.7\n      Show( 14, sb );\n      \n      // The following Insert methods are not CLS-compliant.\n      sb-&gt;Insert( 3, xUInt16 ); // 8\n      Show( 15, sb );\n      sb-&gt;Insert( 3, xUInt32 ); // 9\n      Show( 16, sb );\n      sb-&gt;Insert( 3, xUInt64 ); // 10\n      Show( 17, sb );\n      sb-&gt;Insert( 3, xSByte ); // -11\n      Show( 18, sb );\n      \n      //\n   }\n\n   static void Show( int overloadNumber, StringBuilder^ sbs )\n   {\n      Console::WriteLine( &quot;{0,2:G} = {1}&quot;, overloadNumber, sbs );\n      sb = gcnew StringBuilder( initialValue );\n   }\n\n};\n\nint main()\n{\n   Sample::Main();\n}\n\n/*\nThis example produces the following results:\n\nStringBuilder.Insert method\n 1 = --[xyzxyz]--\n 2 = --[xyz]--\n 3 = --[*]--\n 4 = --[abc]--\n 5 = --[bc]--\n 6 = --[True]--\n 7 = --[0]--\n 8 = --[1]--\n 9 = --[2]--\n10 = --[3]--\n11 = --[4]--\n12 = --[5]--\n13 = --[6.6]--\n14 = --[7.7]--\n15 = --[8]--\n16 = --[9]--\n17 = --[10]--\n18 = --[-11]--\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"stringbuilder.insert#1\">using System;\nusing System.Text;\n\nclass Sample \n{\n//                         index: 012345\n    static string initialValue = &quot;--[]--&quot;;\n    static StringBuilder sb;\n\n    public static void Main() \n    {\n    string      xyz       = &quot;xyz&quot;;\n    char[]      abc       = {&#39;a&#39;, &#39;b&#39;, &#39;c&#39;};\n    char        star      = &#39;*&#39;;\n    Object \tobj       = 0;\n\n    bool        xBool     = true;\n    byte        xByte     = 1;\n    short       xInt16    = 2;\n    int         xInt32    = 3;\n    long        xInt64    = 4;\n    Decimal     xDecimal  = 5;\n    float       xSingle   = 6.6F;\n    double      xDouble   = 7.7;\n\n// The following types are not CLS-compliant.\n    ushort      xUInt16   = 8;\n    uint        xUInt32   = 9;\n    ulong       xUInt64   = 10;\n    sbyte       xSByte    = -11;\n//\n    Console.WriteLine(&quot;StringBuilder.Insert method&quot;);\n    sb = new StringBuilder(initialValue);\n\n    sb.Insert(3, xyz, 2);\n    Show(1, sb);\n\n    sb.Insert(3, xyz);\n    Show(2, sb);\n\n    sb.Insert(3, star);\n    Show(3, sb);\n\n    sb.Insert(3, abc);\n    Show(4, sb);\n\n    sb.Insert(3, abc, 1, 2);\n    Show(5, sb);\n\n    sb.Insert(3, xBool);     // True\n    Show(6, sb);\n\n    sb.Insert(3, obj);       // 0\n    Show(7, sb);\n\n    sb.Insert(3, xByte);     // 1\n    Show(8, sb);\n\n    sb.Insert(3, xInt16);    // 2\n    Show(9, sb);\n\n    sb.Insert(3, xInt32);    // 3\n    Show(10, sb);\n\n    sb.Insert(3, xInt64);    // 4\n    Show(11, sb);\n\n    sb.Insert(3, xDecimal);  // 5\n    Show(12, sb);\n\n    sb.Insert(3, xSingle);   // 6.6\n    Show(13, sb);\n\n    sb.Insert(3, xDouble);   // 7.7\n    Show(14, sb);\n\n// The following Insert methods are not CLS-compliant.\n    sb.Insert(3, xUInt16);   // 8\n    Show(15, sb);\n\n    sb.Insert(3, xUInt32);   // 9\n    Show(16, sb);\n\n    sb.Insert(3, xUInt64);   // 10\n    Show(17, sb);\n\n    sb.Insert(3, xSByte);    // -11\n    Show(18, sb);\n//\n    }\n\n    public static void Show(int overloadNumber, StringBuilder sbs)\n    {\n    Console.WriteLine(&quot;{0,2:G} = {1}&quot;, overloadNumber, sbs.ToString());\n    sb = new StringBuilder(initialValue);\n    }\n}\n/*\nThis example produces the following results:\n\nStringBuilder.Insert method\n 1 = --[xyzxyz]--\n 2 = --[xyz]--\n 3 = --[*]--\n 4 = --[abc]--\n 5 = --[bc]--\n 6 = --[True]--\n 7 = --[0]--\n 8 = --[1]--\n 9 = --[2]--\n10 = --[3]--\n11 = --[4]--\n12 = --[5]--\n13 = --[6.6]--\n14 = --[7.7]--\n15 = --[8]--\n16 = --[9]--\n17 = --[10]--\n18 = --[-11]--\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"stringbuilder.insert#1\">Imports System\nImports System.Text\n\nClass Sample\n   &#39;                                 index: 012345\n   Private Shared initialValue As String = &quot;--[]--&quot;\n   Private Shared sb As StringBuilder\n   \n   Public Shared Sub Main()\n      Dim xyz As String = &quot;xyz&quot;\n      Dim abc As Char() =  {&quot;a&quot;c, &quot;b&quot;c, &quot;c&quot;c}\n      Dim star As Char = &quot;*&quot;c\n      Dim obj As [Object] = 0\n      \n      Dim xBool As Boolean = True\n      Dim xByte As Byte = 1\n      Dim xInt16 As Short = 2\n      Dim xInt32 As Integer = 3\n      Dim xInt64 As Long = 4\n      Dim xDecimal As [Decimal] = 5\n      Dim xSingle As Single = 6.6F\n      Dim xDouble As Double = 7.7\n      \n      &#39; The following types are not CLS-compliant.\n      &#39; Dim xUInt16 As System.UInt16 = 8 \n      &#39; Dim xUInt32 As System.UInt32 = 9\n      &#39; Dim xUInt64 As System.UInt64 = 10 \n      &#39; Dim xSByte As System.SByte = - 11\n      &#39;\n      Console.WriteLine(&quot;StringBuilder.Insert method&quot;)\n      sb = New StringBuilder(initialValue)\n      \n      sb.Insert(3, xyz, 2)\n      Show(1, sb)\n      \n      sb.Insert(3, xyz)\n      Show(2, sb)\n      \n      sb.Insert(3, star)\n      Show(3, sb)\n      \n      sb.Insert(3, abc)\n      Show(4, sb)\n      \n      sb.Insert(3, abc, 1, 2)\n      Show(5, sb)\n      \n      sb.Insert(3, xBool)     &#39; True\n      Show(6, sb)\n      \n      sb.Insert(3, obj)       &#39; 0\n      Show(7, sb)\n      \n      sb.Insert(3, xByte)     &#39; 1\n      Show(8, sb)\n      \n      sb.Insert(3, xInt16)    &#39; 2\n      Show(9, sb)\n      \n      sb.Insert(3, xInt32)    &#39; 3\n      Show(10, sb)\n      \n      sb.Insert(3, xInt64)    &#39; 4\n      Show(11, sb)\n      \n      sb.Insert(3, xDecimal)  &#39; 5\n      Show(12, sb)\n      \n      sb.Insert(3, xSingle)   &#39; 6.6\n      Show(13, sb)\n      \n      sb.Insert(3, xDouble)   &#39; 7.7\n      Show(14, sb)\n      \n      &#39; The following Insert methods are not CLS-compliant.\n      &#39; sb.Insert(3, xUInt16) &#39; 8\n      &#39; sb.Insert(3, xUInt32) &#39; 9\n      &#39; sb.Insert(3, xUInt64) &#39; 10\n      &#39; sb.Insert(3, xSByte)  &#39; -11\n\n   End Sub &#39;Main\n   \n   Public Shared Sub Show(overloadNumber As Integer, sbs As StringBuilder)\n      Console.WriteLine(&quot;{0,2:G} = {1}&quot;, overloadNumber, sbs.ToString())\n      sb = New StringBuilder(initialValue)\n   End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;StringBuilder.Insert method\n&#39; 1 = --[xyzxyz]--\n&#39; 2 = --[xyz]--\n&#39; 3 = --[*]--\n&#39; 4 = --[abc]--\n&#39; 5 = --[bc]--\n&#39; 6 = --[True]--\n&#39; 7 = --[0]--\n&#39; 8 = --[1]--\n&#39; 9 = --[2]--\n&#39;10 = --[3]--\n&#39;11 = --[4]--\n&#39;12 = --[5]--\n&#39;13 = --[6.6]--\n&#39;14 = --[7.7]--\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Insert_System_Int32_System_Object_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Insert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Insert(Int32,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Inserts the string representation of an object into this instance at the specified character position.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Insert (int index, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position in this instance where insertion begins.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to insert, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the insert operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero or greater than the length of this instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.object#System_Object_ToString_\" data-linktype=\"relative-path\">ToString</a> is used to get a string representation of <code>value</code>. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.  </p>\n<p> If <code>value</code> is <code>null</code>, the value of this instance is unchanged.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Insert_\" data-linktype=\"relative-path\">Insert</a> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"stringbuilder.insert#1\">using namespace System;\nusing namespace System::Text;\nref class Sample\n{\nprivate:\n\n   //                           index: 012345\n   static String^ initialValue = &quot;--[]--&quot;;\n   static StringBuilder^ sb;\n\npublic:\n   static void Main()\n   {\n      String^ xyz = &quot;xyz&quot;;\n      array&lt;Char&gt;^abc = {&#39;a&#39;,&#39;b&#39;,&#39;c&#39;};\n      Char star = &#39;*&#39;;\n      Object^ obj = 0;\n      bool xBool = true;\n      Byte xByte = 1;\n      short xInt16 = 2;\n      int xInt32 = 3;\n      long xInt64 = 4;\n      Decimal xDecimal = 5;\n      float xSingle = 6.6F;\n      double xDouble = 7.7;\n      \n      // The following types are not CLS-compliant.\n      UInt16 xUInt16 = 8;\n      UInt32 xUInt32 = 9;\n      UInt64 xUInt64 = 10;\n      SByte xSByte = -11;\n      \n      //\n      Console::WriteLine( &quot;StringBuilder.Insert method&quot; );\n      sb = gcnew StringBuilder( initialValue );\n      sb-&gt;Insert( 3, xyz, 2 );\n      Show( 1, sb );\n      sb-&gt;Insert( 3, xyz );\n      Show( 2, sb );\n      sb-&gt;Insert( 3, star );\n      Show( 3, sb );\n      sb-&gt;Insert( 3, abc );\n      Show( 4, sb );\n      sb-&gt;Insert( 3, abc, 1, 2 );\n      Show( 5, sb );\n      sb-&gt;Insert( 3, xBool ); // True\n      Show( 6, sb );\n      sb-&gt;Insert( 3, obj ); // 0\n      Show( 7, sb );\n      sb-&gt;Insert( 3, xByte ); // 1\n      Show( 8, sb );\n      sb-&gt;Insert( 3, xInt16 ); // 2\n      Show( 9, sb );\n      sb-&gt;Insert( 3, xInt32 ); // 3\n      Show( 10, sb );\n      sb-&gt;Insert( 3, xInt64 ); // 4\n      Show( 11, sb );\n      sb-&gt;Insert( 3, xDecimal ); // 5\n      Show( 12, sb );\n      sb-&gt;Insert( 3, xSingle ); // 6.6\n      Show( 13, sb );\n      sb-&gt;Insert( 3, xDouble ); // 7.7\n      Show( 14, sb );\n      \n      // The following Insert methods are not CLS-compliant.\n      sb-&gt;Insert( 3, xUInt16 ); // 8\n      Show( 15, sb );\n      sb-&gt;Insert( 3, xUInt32 ); // 9\n      Show( 16, sb );\n      sb-&gt;Insert( 3, xUInt64 ); // 10\n      Show( 17, sb );\n      sb-&gt;Insert( 3, xSByte ); // -11\n      Show( 18, sb );\n      \n      //\n   }\n\n   static void Show( int overloadNumber, StringBuilder^ sbs )\n   {\n      Console::WriteLine( &quot;{0,2:G} = {1}&quot;, overloadNumber, sbs );\n      sb = gcnew StringBuilder( initialValue );\n   }\n\n};\n\nint main()\n{\n   Sample::Main();\n}\n\n/*\nThis example produces the following results:\n\nStringBuilder.Insert method\n 1 = --[xyzxyz]--\n 2 = --[xyz]--\n 3 = --[*]--\n 4 = --[abc]--\n 5 = --[bc]--\n 6 = --[True]--\n 7 = --[0]--\n 8 = --[1]--\n 9 = --[2]--\n10 = --[3]--\n11 = --[4]--\n12 = --[5]--\n13 = --[6.6]--\n14 = --[7.7]--\n15 = --[8]--\n16 = --[9]--\n17 = --[10]--\n18 = --[-11]--\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"stringbuilder.insert#1\">using System;\nusing System.Text;\n\nclass Sample \n{\n//                         index: 012345\n    static string initialValue = &quot;--[]--&quot;;\n    static StringBuilder sb;\n\n    public static void Main() \n    {\n    string      xyz       = &quot;xyz&quot;;\n    char[]      abc       = {&#39;a&#39;, &#39;b&#39;, &#39;c&#39;};\n    char        star      = &#39;*&#39;;\n    Object \tobj       = 0;\n\n    bool        xBool     = true;\n    byte        xByte     = 1;\n    short       xInt16    = 2;\n    int         xInt32    = 3;\n    long        xInt64    = 4;\n    Decimal     xDecimal  = 5;\n    float       xSingle   = 6.6F;\n    double      xDouble   = 7.7;\n\n// The following types are not CLS-compliant.\n    ushort      xUInt16   = 8;\n    uint        xUInt32   = 9;\n    ulong       xUInt64   = 10;\n    sbyte       xSByte    = -11;\n//\n    Console.WriteLine(&quot;StringBuilder.Insert method&quot;);\n    sb = new StringBuilder(initialValue);\n\n    sb.Insert(3, xyz, 2);\n    Show(1, sb);\n\n    sb.Insert(3, xyz);\n    Show(2, sb);\n\n    sb.Insert(3, star);\n    Show(3, sb);\n\n    sb.Insert(3, abc);\n    Show(4, sb);\n\n    sb.Insert(3, abc, 1, 2);\n    Show(5, sb);\n\n    sb.Insert(3, xBool);     // True\n    Show(6, sb);\n\n    sb.Insert(3, obj);       // 0\n    Show(7, sb);\n\n    sb.Insert(3, xByte);     // 1\n    Show(8, sb);\n\n    sb.Insert(3, xInt16);    // 2\n    Show(9, sb);\n\n    sb.Insert(3, xInt32);    // 3\n    Show(10, sb);\n\n    sb.Insert(3, xInt64);    // 4\n    Show(11, sb);\n\n    sb.Insert(3, xDecimal);  // 5\n    Show(12, sb);\n\n    sb.Insert(3, xSingle);   // 6.6\n    Show(13, sb);\n\n    sb.Insert(3, xDouble);   // 7.7\n    Show(14, sb);\n\n// The following Insert methods are not CLS-compliant.\n    sb.Insert(3, xUInt16);   // 8\n    Show(15, sb);\n\n    sb.Insert(3, xUInt32);   // 9\n    Show(16, sb);\n\n    sb.Insert(3, xUInt64);   // 10\n    Show(17, sb);\n\n    sb.Insert(3, xSByte);    // -11\n    Show(18, sb);\n//\n    }\n\n    public static void Show(int overloadNumber, StringBuilder sbs)\n    {\n    Console.WriteLine(&quot;{0,2:G} = {1}&quot;, overloadNumber, sbs.ToString());\n    sb = new StringBuilder(initialValue);\n    }\n}\n/*\nThis example produces the following results:\n\nStringBuilder.Insert method\n 1 = --[xyzxyz]--\n 2 = --[xyz]--\n 3 = --[*]--\n 4 = --[abc]--\n 5 = --[bc]--\n 6 = --[True]--\n 7 = --[0]--\n 8 = --[1]--\n 9 = --[2]--\n10 = --[3]--\n11 = --[4]--\n12 = --[5]--\n13 = --[6.6]--\n14 = --[7.7]--\n15 = --[8]--\n16 = --[9]--\n17 = --[10]--\n18 = --[-11]--\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"stringbuilder.insert#1\">Imports System\nImports System.Text\n\nClass Sample\n   &#39;                                 index: 012345\n   Private Shared initialValue As String = &quot;--[]--&quot;\n   Private Shared sb As StringBuilder\n   \n   Public Shared Sub Main()\n      Dim xyz As String = &quot;xyz&quot;\n      Dim abc As Char() =  {&quot;a&quot;c, &quot;b&quot;c, &quot;c&quot;c}\n      Dim star As Char = &quot;*&quot;c\n      Dim obj As [Object] = 0\n      \n      Dim xBool As Boolean = True\n      Dim xByte As Byte = 1\n      Dim xInt16 As Short = 2\n      Dim xInt32 As Integer = 3\n      Dim xInt64 As Long = 4\n      Dim xDecimal As [Decimal] = 5\n      Dim xSingle As Single = 6.6F\n      Dim xDouble As Double = 7.7\n      \n      &#39; The following types are not CLS-compliant.\n      &#39; Dim xUInt16 As System.UInt16 = 8 \n      &#39; Dim xUInt32 As System.UInt32 = 9\n      &#39; Dim xUInt64 As System.UInt64 = 10 \n      &#39; Dim xSByte As System.SByte = - 11\n      &#39;\n      Console.WriteLine(&quot;StringBuilder.Insert method&quot;)\n      sb = New StringBuilder(initialValue)\n      \n      sb.Insert(3, xyz, 2)\n      Show(1, sb)\n      \n      sb.Insert(3, xyz)\n      Show(2, sb)\n      \n      sb.Insert(3, star)\n      Show(3, sb)\n      \n      sb.Insert(3, abc)\n      Show(4, sb)\n      \n      sb.Insert(3, abc, 1, 2)\n      Show(5, sb)\n      \n      sb.Insert(3, xBool)     &#39; True\n      Show(6, sb)\n      \n      sb.Insert(3, obj)       &#39; 0\n      Show(7, sb)\n      \n      sb.Insert(3, xByte)     &#39; 1\n      Show(8, sb)\n      \n      sb.Insert(3, xInt16)    &#39; 2\n      Show(9, sb)\n      \n      sb.Insert(3, xInt32)    &#39; 3\n      Show(10, sb)\n      \n      sb.Insert(3, xInt64)    &#39; 4\n      Show(11, sb)\n      \n      sb.Insert(3, xDecimal)  &#39; 5\n      Show(12, sb)\n      \n      sb.Insert(3, xSingle)   &#39; 6.6\n      Show(13, sb)\n      \n      sb.Insert(3, xDouble)   &#39; 7.7\n      Show(14, sb)\n      \n      &#39; The following Insert methods are not CLS-compliant.\n      &#39; sb.Insert(3, xUInt16) &#39; 8\n      &#39; sb.Insert(3, xUInt32) &#39; 9\n      &#39; sb.Insert(3, xUInt64) &#39; 10\n      &#39; sb.Insert(3, xSByte)  &#39; -11\n\n   End Sub &#39;Main\n   \n   Public Shared Sub Show(overloadNumber As Integer, sbs As StringBuilder)\n      Console.WriteLine(&quot;{0,2:G} = {1}&quot;, overloadNumber, sbs.ToString())\n      sb = New StringBuilder(initialValue)\n   End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;StringBuilder.Insert method\n&#39; 1 = --[xyzxyz]--\n&#39; 2 = --[xyz]--\n&#39; 3 = --[*]--\n&#39; 4 = --[abc]--\n&#39; 5 = --[bc]--\n&#39; 6 = --[True]--\n&#39; 7 = --[0]--\n&#39; 8 = --[1]--\n&#39; 9 = --[2]--\n&#39;10 = --[3]--\n&#39;11 = --[4]--\n&#39;12 = --[5]--\n&#39;13 = --[6.6]--\n&#39;14 = --[7.7]--\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Insert_System_Int32_System_SByte_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Insert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Insert(Int32,SByte)</div>        \r\n          </div>\r\n    \r\n            <p>Inserts the string representation of a specified 8-bit signed integer into this instance at the specified character position.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Insert (int index, sbyte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position in this instance where insertion begins.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to insert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the insert operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero or greater than the length of this instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.sbyte#System_SByte_ToString_\" data-linktype=\"relative-path\">ToString</a> is used to get a string representation of <code>value</code>. Existing characters are shifted to make room for the new text. The capacity is adjusted as needed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Insert_\" data-linktype=\"relative-path\">Insert</a> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"stringbuilder.insert#1\">using namespace System;\nusing namespace System::Text;\nref class Sample\n{\nprivate:\n\n   //                           index: 012345\n   static String^ initialValue = &quot;--[]--&quot;;\n   static StringBuilder^ sb;\n\npublic:\n   static void Main()\n   {\n      String^ xyz = &quot;xyz&quot;;\n      array&lt;Char&gt;^abc = {&#39;a&#39;,&#39;b&#39;,&#39;c&#39;};\n      Char star = &#39;*&#39;;\n      Object^ obj = 0;\n      bool xBool = true;\n      Byte xByte = 1;\n      short xInt16 = 2;\n      int xInt32 = 3;\n      long xInt64 = 4;\n      Decimal xDecimal = 5;\n      float xSingle = 6.6F;\n      double xDouble = 7.7;\n      \n      // The following types are not CLS-compliant.\n      UInt16 xUInt16 = 8;\n      UInt32 xUInt32 = 9;\n      UInt64 xUInt64 = 10;\n      SByte xSByte = -11;\n      \n      //\n      Console::WriteLine( &quot;StringBuilder.Insert method&quot; );\n      sb = gcnew StringBuilder( initialValue );\n      sb-&gt;Insert( 3, xyz, 2 );\n      Show( 1, sb );\n      sb-&gt;Insert( 3, xyz );\n      Show( 2, sb );\n      sb-&gt;Insert( 3, star );\n      Show( 3, sb );\n      sb-&gt;Insert( 3, abc );\n      Show( 4, sb );\n      sb-&gt;Insert( 3, abc, 1, 2 );\n      Show( 5, sb );\n      sb-&gt;Insert( 3, xBool ); // True\n      Show( 6, sb );\n      sb-&gt;Insert( 3, obj ); // 0\n      Show( 7, sb );\n      sb-&gt;Insert( 3, xByte ); // 1\n      Show( 8, sb );\n      sb-&gt;Insert( 3, xInt16 ); // 2\n      Show( 9, sb );\n      sb-&gt;Insert( 3, xInt32 ); // 3\n      Show( 10, sb );\n      sb-&gt;Insert( 3, xInt64 ); // 4\n      Show( 11, sb );\n      sb-&gt;Insert( 3, xDecimal ); // 5\n      Show( 12, sb );\n      sb-&gt;Insert( 3, xSingle ); // 6.6\n      Show( 13, sb );\n      sb-&gt;Insert( 3, xDouble ); // 7.7\n      Show( 14, sb );\n      \n      // The following Insert methods are not CLS-compliant.\n      sb-&gt;Insert( 3, xUInt16 ); // 8\n      Show( 15, sb );\n      sb-&gt;Insert( 3, xUInt32 ); // 9\n      Show( 16, sb );\n      sb-&gt;Insert( 3, xUInt64 ); // 10\n      Show( 17, sb );\n      sb-&gt;Insert( 3, xSByte ); // -11\n      Show( 18, sb );\n      \n      //\n   }\n\n   static void Show( int overloadNumber, StringBuilder^ sbs )\n   {\n      Console::WriteLine( &quot;{0,2:G} = {1}&quot;, overloadNumber, sbs );\n      sb = gcnew StringBuilder( initialValue );\n   }\n\n};\n\nint main()\n{\n   Sample::Main();\n}\n\n/*\nThis example produces the following results:\n\nStringBuilder.Insert method\n 1 = --[xyzxyz]--\n 2 = --[xyz]--\n 3 = --[*]--\n 4 = --[abc]--\n 5 = --[bc]--\n 6 = --[True]--\n 7 = --[0]--\n 8 = --[1]--\n 9 = --[2]--\n10 = --[3]--\n11 = --[4]--\n12 = --[5]--\n13 = --[6.6]--\n14 = --[7.7]--\n15 = --[8]--\n16 = --[9]--\n17 = --[10]--\n18 = --[-11]--\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"stringbuilder.insert#1\">using System;\nusing System.Text;\n\nclass Sample \n{\n//                         index: 012345\n    static string initialValue = &quot;--[]--&quot;;\n    static StringBuilder sb;\n\n    public static void Main() \n    {\n    string      xyz       = &quot;xyz&quot;;\n    char[]      abc       = {&#39;a&#39;, &#39;b&#39;, &#39;c&#39;};\n    char        star      = &#39;*&#39;;\n    Object \tobj       = 0;\n\n    bool        xBool     = true;\n    byte        xByte     = 1;\n    short       xInt16    = 2;\n    int         xInt32    = 3;\n    long        xInt64    = 4;\n    Decimal     xDecimal  = 5;\n    float       xSingle   = 6.6F;\n    double      xDouble   = 7.7;\n\n// The following types are not CLS-compliant.\n    ushort      xUInt16   = 8;\n    uint        xUInt32   = 9;\n    ulong       xUInt64   = 10;\n    sbyte       xSByte    = -11;\n//\n    Console.WriteLine(&quot;StringBuilder.Insert method&quot;);\n    sb = new StringBuilder(initialValue);\n\n    sb.Insert(3, xyz, 2);\n    Show(1, sb);\n\n    sb.Insert(3, xyz);\n    Show(2, sb);\n\n    sb.Insert(3, star);\n    Show(3, sb);\n\n    sb.Insert(3, abc);\n    Show(4, sb);\n\n    sb.Insert(3, abc, 1, 2);\n    Show(5, sb);\n\n    sb.Insert(3, xBool);     // True\n    Show(6, sb);\n\n    sb.Insert(3, obj);       // 0\n    Show(7, sb);\n\n    sb.Insert(3, xByte);     // 1\n    Show(8, sb);\n\n    sb.Insert(3, xInt16);    // 2\n    Show(9, sb);\n\n    sb.Insert(3, xInt32);    // 3\n    Show(10, sb);\n\n    sb.Insert(3, xInt64);    // 4\n    Show(11, sb);\n\n    sb.Insert(3, xDecimal);  // 5\n    Show(12, sb);\n\n    sb.Insert(3, xSingle);   // 6.6\n    Show(13, sb);\n\n    sb.Insert(3, xDouble);   // 7.7\n    Show(14, sb);\n\n// The following Insert methods are not CLS-compliant.\n    sb.Insert(3, xUInt16);   // 8\n    Show(15, sb);\n\n    sb.Insert(3, xUInt32);   // 9\n    Show(16, sb);\n\n    sb.Insert(3, xUInt64);   // 10\n    Show(17, sb);\n\n    sb.Insert(3, xSByte);    // -11\n    Show(18, sb);\n//\n    }\n\n    public static void Show(int overloadNumber, StringBuilder sbs)\n    {\n    Console.WriteLine(&quot;{0,2:G} = {1}&quot;, overloadNumber, sbs.ToString());\n    sb = new StringBuilder(initialValue);\n    }\n}\n/*\nThis example produces the following results:\n\nStringBuilder.Insert method\n 1 = --[xyzxyz]--\n 2 = --[xyz]--\n 3 = --[*]--\n 4 = --[abc]--\n 5 = --[bc]--\n 6 = --[True]--\n 7 = --[0]--\n 8 = --[1]--\n 9 = --[2]--\n10 = --[3]--\n11 = --[4]--\n12 = --[5]--\n13 = --[6.6]--\n14 = --[7.7]--\n15 = --[8]--\n16 = --[9]--\n17 = --[10]--\n18 = --[-11]--\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"stringbuilder.insert#1\">Imports System\nImports System.Text\n\nClass Sample\n   &#39;                                 index: 012345\n   Private Shared initialValue As String = &quot;--[]--&quot;\n   Private Shared sb As StringBuilder\n   \n   Public Shared Sub Main()\n      Dim xyz As String = &quot;xyz&quot;\n      Dim abc As Char() =  {&quot;a&quot;c, &quot;b&quot;c, &quot;c&quot;c}\n      Dim star As Char = &quot;*&quot;c\n      Dim obj As [Object] = 0\n      \n      Dim xBool As Boolean = True\n      Dim xByte As Byte = 1\n      Dim xInt16 As Short = 2\n      Dim xInt32 As Integer = 3\n      Dim xInt64 As Long = 4\n      Dim xDecimal As [Decimal] = 5\n      Dim xSingle As Single = 6.6F\n      Dim xDouble As Double = 7.7\n      \n      &#39; The following types are not CLS-compliant.\n      &#39; Dim xUInt16 As System.UInt16 = 8 \n      &#39; Dim xUInt32 As System.UInt32 = 9\n      &#39; Dim xUInt64 As System.UInt64 = 10 \n      &#39; Dim xSByte As System.SByte = - 11\n      &#39;\n      Console.WriteLine(&quot;StringBuilder.Insert method&quot;)\n      sb = New StringBuilder(initialValue)\n      \n      sb.Insert(3, xyz, 2)\n      Show(1, sb)\n      \n      sb.Insert(3, xyz)\n      Show(2, sb)\n      \n      sb.Insert(3, star)\n      Show(3, sb)\n      \n      sb.Insert(3, abc)\n      Show(4, sb)\n      \n      sb.Insert(3, abc, 1, 2)\n      Show(5, sb)\n      \n      sb.Insert(3, xBool)     &#39; True\n      Show(6, sb)\n      \n      sb.Insert(3, obj)       &#39; 0\n      Show(7, sb)\n      \n      sb.Insert(3, xByte)     &#39; 1\n      Show(8, sb)\n      \n      sb.Insert(3, xInt16)    &#39; 2\n      Show(9, sb)\n      \n      sb.Insert(3, xInt32)    &#39; 3\n      Show(10, sb)\n      \n      sb.Insert(3, xInt64)    &#39; 4\n      Show(11, sb)\n      \n      sb.Insert(3, xDecimal)  &#39; 5\n      Show(12, sb)\n      \n      sb.Insert(3, xSingle)   &#39; 6.6\n      Show(13, sb)\n      \n      sb.Insert(3, xDouble)   &#39; 7.7\n      Show(14, sb)\n      \n      &#39; The following Insert methods are not CLS-compliant.\n      &#39; sb.Insert(3, xUInt16) &#39; 8\n      &#39; sb.Insert(3, xUInt32) &#39; 9\n      &#39; sb.Insert(3, xUInt64) &#39; 10\n      &#39; sb.Insert(3, xSByte)  &#39; -11\n\n   End Sub &#39;Main\n   \n   Public Shared Sub Show(overloadNumber As Integer, sbs As StringBuilder)\n      Console.WriteLine(&quot;{0,2:G} = {1}&quot;, overloadNumber, sbs.ToString())\n      sb = New StringBuilder(initialValue)\n   End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;StringBuilder.Insert method\n&#39; 1 = --[xyzxyz]--\n&#39; 2 = --[xyz]--\n&#39; 3 = --[*]--\n&#39; 4 = --[abc]--\n&#39; 5 = --[bc]--\n&#39; 6 = --[True]--\n&#39; 7 = --[0]--\n&#39; 8 = --[1]--\n&#39; 9 = --[2]--\n&#39;10 = --[3]--\n&#39;11 = --[4]--\n&#39;12 = --[5]--\n&#39;13 = --[6.6]--\n&#39;14 = --[7.7]--\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Insert_System_Int32_System_Single_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Insert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Insert(Int32,Single)</div>        \r\n          </div>\r\n    \r\n            <p>Inserts the string representation of a single-precision floating point number into this instance at the specified character position.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Insert (int index, float value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position in this instance where insertion begins.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to insert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the insert operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero or greater than the length of this instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.single#System_Single_ToString_\" data-linktype=\"relative-path\">ToString</a> is used to get a string representation of <code>value</code>. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Insert_\" data-linktype=\"relative-path\">Insert</a> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"stringbuilder.insert#1\">using namespace System;\nusing namespace System::Text;\nref class Sample\n{\nprivate:\n\n   //                           index: 012345\n   static String^ initialValue = &quot;--[]--&quot;;\n   static StringBuilder^ sb;\n\npublic:\n   static void Main()\n   {\n      String^ xyz = &quot;xyz&quot;;\n      array&lt;Char&gt;^abc = {&#39;a&#39;,&#39;b&#39;,&#39;c&#39;};\n      Char star = &#39;*&#39;;\n      Object^ obj = 0;\n      bool xBool = true;\n      Byte xByte = 1;\n      short xInt16 = 2;\n      int xInt32 = 3;\n      long xInt64 = 4;\n      Decimal xDecimal = 5;\n      float xSingle = 6.6F;\n      double xDouble = 7.7;\n      \n      // The following types are not CLS-compliant.\n      UInt16 xUInt16 = 8;\n      UInt32 xUInt32 = 9;\n      UInt64 xUInt64 = 10;\n      SByte xSByte = -11;\n      \n      //\n      Console::WriteLine( &quot;StringBuilder.Insert method&quot; );\n      sb = gcnew StringBuilder( initialValue );\n      sb-&gt;Insert( 3, xyz, 2 );\n      Show( 1, sb );\n      sb-&gt;Insert( 3, xyz );\n      Show( 2, sb );\n      sb-&gt;Insert( 3, star );\n      Show( 3, sb );\n      sb-&gt;Insert( 3, abc );\n      Show( 4, sb );\n      sb-&gt;Insert( 3, abc, 1, 2 );\n      Show( 5, sb );\n      sb-&gt;Insert( 3, xBool ); // True\n      Show( 6, sb );\n      sb-&gt;Insert( 3, obj ); // 0\n      Show( 7, sb );\n      sb-&gt;Insert( 3, xByte ); // 1\n      Show( 8, sb );\n      sb-&gt;Insert( 3, xInt16 ); // 2\n      Show( 9, sb );\n      sb-&gt;Insert( 3, xInt32 ); // 3\n      Show( 10, sb );\n      sb-&gt;Insert( 3, xInt64 ); // 4\n      Show( 11, sb );\n      sb-&gt;Insert( 3, xDecimal ); // 5\n      Show( 12, sb );\n      sb-&gt;Insert( 3, xSingle ); // 6.6\n      Show( 13, sb );\n      sb-&gt;Insert( 3, xDouble ); // 7.7\n      Show( 14, sb );\n      \n      // The following Insert methods are not CLS-compliant.\n      sb-&gt;Insert( 3, xUInt16 ); // 8\n      Show( 15, sb );\n      sb-&gt;Insert( 3, xUInt32 ); // 9\n      Show( 16, sb );\n      sb-&gt;Insert( 3, xUInt64 ); // 10\n      Show( 17, sb );\n      sb-&gt;Insert( 3, xSByte ); // -11\n      Show( 18, sb );\n      \n      //\n   }\n\n   static void Show( int overloadNumber, StringBuilder^ sbs )\n   {\n      Console::WriteLine( &quot;{0,2:G} = {1}&quot;, overloadNumber, sbs );\n      sb = gcnew StringBuilder( initialValue );\n   }\n\n};\n\nint main()\n{\n   Sample::Main();\n}\n\n/*\nThis example produces the following results:\n\nStringBuilder.Insert method\n 1 = --[xyzxyz]--\n 2 = --[xyz]--\n 3 = --[*]--\n 4 = --[abc]--\n 5 = --[bc]--\n 6 = --[True]--\n 7 = --[0]--\n 8 = --[1]--\n 9 = --[2]--\n10 = --[3]--\n11 = --[4]--\n12 = --[5]--\n13 = --[6.6]--\n14 = --[7.7]--\n15 = --[8]--\n16 = --[9]--\n17 = --[10]--\n18 = --[-11]--\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"stringbuilder.insert#1\">using System;\nusing System.Text;\n\nclass Sample \n{\n//                         index: 012345\n    static string initialValue = &quot;--[]--&quot;;\n    static StringBuilder sb;\n\n    public static void Main() \n    {\n    string      xyz       = &quot;xyz&quot;;\n    char[]      abc       = {&#39;a&#39;, &#39;b&#39;, &#39;c&#39;};\n    char        star      = &#39;*&#39;;\n    Object \tobj       = 0;\n\n    bool        xBool     = true;\n    byte        xByte     = 1;\n    short       xInt16    = 2;\n    int         xInt32    = 3;\n    long        xInt64    = 4;\n    Decimal     xDecimal  = 5;\n    float       xSingle   = 6.6F;\n    double      xDouble   = 7.7;\n\n// The following types are not CLS-compliant.\n    ushort      xUInt16   = 8;\n    uint        xUInt32   = 9;\n    ulong       xUInt64   = 10;\n    sbyte       xSByte    = -11;\n//\n    Console.WriteLine(&quot;StringBuilder.Insert method&quot;);\n    sb = new StringBuilder(initialValue);\n\n    sb.Insert(3, xyz, 2);\n    Show(1, sb);\n\n    sb.Insert(3, xyz);\n    Show(2, sb);\n\n    sb.Insert(3, star);\n    Show(3, sb);\n\n    sb.Insert(3, abc);\n    Show(4, sb);\n\n    sb.Insert(3, abc, 1, 2);\n    Show(5, sb);\n\n    sb.Insert(3, xBool);     // True\n    Show(6, sb);\n\n    sb.Insert(3, obj);       // 0\n    Show(7, sb);\n\n    sb.Insert(3, xByte);     // 1\n    Show(8, sb);\n\n    sb.Insert(3, xInt16);    // 2\n    Show(9, sb);\n\n    sb.Insert(3, xInt32);    // 3\n    Show(10, sb);\n\n    sb.Insert(3, xInt64);    // 4\n    Show(11, sb);\n\n    sb.Insert(3, xDecimal);  // 5\n    Show(12, sb);\n\n    sb.Insert(3, xSingle);   // 6.6\n    Show(13, sb);\n\n    sb.Insert(3, xDouble);   // 7.7\n    Show(14, sb);\n\n// The following Insert methods are not CLS-compliant.\n    sb.Insert(3, xUInt16);   // 8\n    Show(15, sb);\n\n    sb.Insert(3, xUInt32);   // 9\n    Show(16, sb);\n\n    sb.Insert(3, xUInt64);   // 10\n    Show(17, sb);\n\n    sb.Insert(3, xSByte);    // -11\n    Show(18, sb);\n//\n    }\n\n    public static void Show(int overloadNumber, StringBuilder sbs)\n    {\n    Console.WriteLine(&quot;{0,2:G} = {1}&quot;, overloadNumber, sbs.ToString());\n    sb = new StringBuilder(initialValue);\n    }\n}\n/*\nThis example produces the following results:\n\nStringBuilder.Insert method\n 1 = --[xyzxyz]--\n 2 = --[xyz]--\n 3 = --[*]--\n 4 = --[abc]--\n 5 = --[bc]--\n 6 = --[True]--\n 7 = --[0]--\n 8 = --[1]--\n 9 = --[2]--\n10 = --[3]--\n11 = --[4]--\n12 = --[5]--\n13 = --[6.6]--\n14 = --[7.7]--\n15 = --[8]--\n16 = --[9]--\n17 = --[10]--\n18 = --[-11]--\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"stringbuilder.insert#1\">Imports System\nImports System.Text\n\nClass Sample\n   &#39;                                 index: 012345\n   Private Shared initialValue As String = &quot;--[]--&quot;\n   Private Shared sb As StringBuilder\n   \n   Public Shared Sub Main()\n      Dim xyz As String = &quot;xyz&quot;\n      Dim abc As Char() =  {&quot;a&quot;c, &quot;b&quot;c, &quot;c&quot;c}\n      Dim star As Char = &quot;*&quot;c\n      Dim obj As [Object] = 0\n      \n      Dim xBool As Boolean = True\n      Dim xByte As Byte = 1\n      Dim xInt16 As Short = 2\n      Dim xInt32 As Integer = 3\n      Dim xInt64 As Long = 4\n      Dim xDecimal As [Decimal] = 5\n      Dim xSingle As Single = 6.6F\n      Dim xDouble As Double = 7.7\n      \n      &#39; The following types are not CLS-compliant.\n      &#39; Dim xUInt16 As System.UInt16 = 8 \n      &#39; Dim xUInt32 As System.UInt32 = 9\n      &#39; Dim xUInt64 As System.UInt64 = 10 \n      &#39; Dim xSByte As System.SByte = - 11\n      &#39;\n      Console.WriteLine(&quot;StringBuilder.Insert method&quot;)\n      sb = New StringBuilder(initialValue)\n      \n      sb.Insert(3, xyz, 2)\n      Show(1, sb)\n      \n      sb.Insert(3, xyz)\n      Show(2, sb)\n      \n      sb.Insert(3, star)\n      Show(3, sb)\n      \n      sb.Insert(3, abc)\n      Show(4, sb)\n      \n      sb.Insert(3, abc, 1, 2)\n      Show(5, sb)\n      \n      sb.Insert(3, xBool)     &#39; True\n      Show(6, sb)\n      \n      sb.Insert(3, obj)       &#39; 0\n      Show(7, sb)\n      \n      sb.Insert(3, xByte)     &#39; 1\n      Show(8, sb)\n      \n      sb.Insert(3, xInt16)    &#39; 2\n      Show(9, sb)\n      \n      sb.Insert(3, xInt32)    &#39; 3\n      Show(10, sb)\n      \n      sb.Insert(3, xInt64)    &#39; 4\n      Show(11, sb)\n      \n      sb.Insert(3, xDecimal)  &#39; 5\n      Show(12, sb)\n      \n      sb.Insert(3, xSingle)   &#39; 6.6\n      Show(13, sb)\n      \n      sb.Insert(3, xDouble)   &#39; 7.7\n      Show(14, sb)\n      \n      &#39; The following Insert methods are not CLS-compliant.\n      &#39; sb.Insert(3, xUInt16) &#39; 8\n      &#39; sb.Insert(3, xUInt32) &#39; 9\n      &#39; sb.Insert(3, xUInt64) &#39; 10\n      &#39; sb.Insert(3, xSByte)  &#39; -11\n\n   End Sub &#39;Main\n   \n   Public Shared Sub Show(overloadNumber As Integer, sbs As StringBuilder)\n      Console.WriteLine(&quot;{0,2:G} = {1}&quot;, overloadNumber, sbs.ToString())\n      sb = New StringBuilder(initialValue)\n   End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;StringBuilder.Insert method\n&#39; 1 = --[xyzxyz]--\n&#39; 2 = --[xyz]--\n&#39; 3 = --[*]--\n&#39; 4 = --[abc]--\n&#39; 5 = --[bc]--\n&#39; 6 = --[True]--\n&#39; 7 = --[0]--\n&#39; 8 = --[1]--\n&#39; 9 = --[2]--\n&#39;10 = --[3]--\n&#39;11 = --[4]--\n&#39;12 = --[5]--\n&#39;13 = --[6.6]--\n&#39;14 = --[7.7]--\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Insert_System_Int32_System_String_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Insert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Insert(Int32,String)</div>        \r\n          </div>\r\n    \r\n            <p>Inserts a string into this instance at the specified character position.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Insert (int index, string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position in this instance where insertion begins.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to insert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the insert operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero or greater than the current length of this instance.  </p>\n<p> -or-  </p>\n<p> The current length of this <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object plus the length of <code>value</code> exceeds <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Existing characters are shifted to make room for the new text. The capacity is adjusted as needed.  </p>\n<p> This instance of <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> is not changed if <code>value</code> is <code>null</code>, or <code>value</code> is not <code>null</code> but its length is zero.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Insert_\" data-linktype=\"relative-path\">Insert</a> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"stringbuilder.insert#1\">using namespace System;\nusing namespace System::Text;\nref class Sample\n{\nprivate:\n\n   //                           index: 012345\n   static String^ initialValue = &quot;--[]--&quot;;\n   static StringBuilder^ sb;\n\npublic:\n   static void Main()\n   {\n      String^ xyz = &quot;xyz&quot;;\n      array&lt;Char&gt;^abc = {&#39;a&#39;,&#39;b&#39;,&#39;c&#39;};\n      Char star = &#39;*&#39;;\n      Object^ obj = 0;\n      bool xBool = true;\n      Byte xByte = 1;\n      short xInt16 = 2;\n      int xInt32 = 3;\n      long xInt64 = 4;\n      Decimal xDecimal = 5;\n      float xSingle = 6.6F;\n      double xDouble = 7.7;\n      \n      // The following types are not CLS-compliant.\n      UInt16 xUInt16 = 8;\n      UInt32 xUInt32 = 9;\n      UInt64 xUInt64 = 10;\n      SByte xSByte = -11;\n      \n      //\n      Console::WriteLine( &quot;StringBuilder.Insert method&quot; );\n      sb = gcnew StringBuilder( initialValue );\n      sb-&gt;Insert( 3, xyz, 2 );\n      Show( 1, sb );\n      sb-&gt;Insert( 3, xyz );\n      Show( 2, sb );\n      sb-&gt;Insert( 3, star );\n      Show( 3, sb );\n      sb-&gt;Insert( 3, abc );\n      Show( 4, sb );\n      sb-&gt;Insert( 3, abc, 1, 2 );\n      Show( 5, sb );\n      sb-&gt;Insert( 3, xBool ); // True\n      Show( 6, sb );\n      sb-&gt;Insert( 3, obj ); // 0\n      Show( 7, sb );\n      sb-&gt;Insert( 3, xByte ); // 1\n      Show( 8, sb );\n      sb-&gt;Insert( 3, xInt16 ); // 2\n      Show( 9, sb );\n      sb-&gt;Insert( 3, xInt32 ); // 3\n      Show( 10, sb );\n      sb-&gt;Insert( 3, xInt64 ); // 4\n      Show( 11, sb );\n      sb-&gt;Insert( 3, xDecimal ); // 5\n      Show( 12, sb );\n      sb-&gt;Insert( 3, xSingle ); // 6.6\n      Show( 13, sb );\n      sb-&gt;Insert( 3, xDouble ); // 7.7\n      Show( 14, sb );\n      \n      // The following Insert methods are not CLS-compliant.\n      sb-&gt;Insert( 3, xUInt16 ); // 8\n      Show( 15, sb );\n      sb-&gt;Insert( 3, xUInt32 ); // 9\n      Show( 16, sb );\n      sb-&gt;Insert( 3, xUInt64 ); // 10\n      Show( 17, sb );\n      sb-&gt;Insert( 3, xSByte ); // -11\n      Show( 18, sb );\n      \n      //\n   }\n\n   static void Show( int overloadNumber, StringBuilder^ sbs )\n   {\n      Console::WriteLine( &quot;{0,2:G} = {1}&quot;, overloadNumber, sbs );\n      sb = gcnew StringBuilder( initialValue );\n   }\n\n};\n\nint main()\n{\n   Sample::Main();\n}\n\n/*\nThis example produces the following results:\n\nStringBuilder.Insert method\n 1 = --[xyzxyz]--\n 2 = --[xyz]--\n 3 = --[*]--\n 4 = --[abc]--\n 5 = --[bc]--\n 6 = --[True]--\n 7 = --[0]--\n 8 = --[1]--\n 9 = --[2]--\n10 = --[3]--\n11 = --[4]--\n12 = --[5]--\n13 = --[6.6]--\n14 = --[7.7]--\n15 = --[8]--\n16 = --[9]--\n17 = --[10]--\n18 = --[-11]--\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"stringbuilder.insert#1\">using System;\nusing System.Text;\n\nclass Sample \n{\n//                         index: 012345\n    static string initialValue = &quot;--[]--&quot;;\n    static StringBuilder sb;\n\n    public static void Main() \n    {\n    string      xyz       = &quot;xyz&quot;;\n    char[]      abc       = {&#39;a&#39;, &#39;b&#39;, &#39;c&#39;};\n    char        star      = &#39;*&#39;;\n    Object \tobj       = 0;\n\n    bool        xBool     = true;\n    byte        xByte     = 1;\n    short       xInt16    = 2;\n    int         xInt32    = 3;\n    long        xInt64    = 4;\n    Decimal     xDecimal  = 5;\n    float       xSingle   = 6.6F;\n    double      xDouble   = 7.7;\n\n// The following types are not CLS-compliant.\n    ushort      xUInt16   = 8;\n    uint        xUInt32   = 9;\n    ulong       xUInt64   = 10;\n    sbyte       xSByte    = -11;\n//\n    Console.WriteLine(&quot;StringBuilder.Insert method&quot;);\n    sb = new StringBuilder(initialValue);\n\n    sb.Insert(3, xyz, 2);\n    Show(1, sb);\n\n    sb.Insert(3, xyz);\n    Show(2, sb);\n\n    sb.Insert(3, star);\n    Show(3, sb);\n\n    sb.Insert(3, abc);\n    Show(4, sb);\n\n    sb.Insert(3, abc, 1, 2);\n    Show(5, sb);\n\n    sb.Insert(3, xBool);     // True\n    Show(6, sb);\n\n    sb.Insert(3, obj);       // 0\n    Show(7, sb);\n\n    sb.Insert(3, xByte);     // 1\n    Show(8, sb);\n\n    sb.Insert(3, xInt16);    // 2\n    Show(9, sb);\n\n    sb.Insert(3, xInt32);    // 3\n    Show(10, sb);\n\n    sb.Insert(3, xInt64);    // 4\n    Show(11, sb);\n\n    sb.Insert(3, xDecimal);  // 5\n    Show(12, sb);\n\n    sb.Insert(3, xSingle);   // 6.6\n    Show(13, sb);\n\n    sb.Insert(3, xDouble);   // 7.7\n    Show(14, sb);\n\n// The following Insert methods are not CLS-compliant.\n    sb.Insert(3, xUInt16);   // 8\n    Show(15, sb);\n\n    sb.Insert(3, xUInt32);   // 9\n    Show(16, sb);\n\n    sb.Insert(3, xUInt64);   // 10\n    Show(17, sb);\n\n    sb.Insert(3, xSByte);    // -11\n    Show(18, sb);\n//\n    }\n\n    public static void Show(int overloadNumber, StringBuilder sbs)\n    {\n    Console.WriteLine(&quot;{0,2:G} = {1}&quot;, overloadNumber, sbs.ToString());\n    sb = new StringBuilder(initialValue);\n    }\n}\n/*\nThis example produces the following results:\n\nStringBuilder.Insert method\n 1 = --[xyzxyz]--\n 2 = --[xyz]--\n 3 = --[*]--\n 4 = --[abc]--\n 5 = --[bc]--\n 6 = --[True]--\n 7 = --[0]--\n 8 = --[1]--\n 9 = --[2]--\n10 = --[3]--\n11 = --[4]--\n12 = --[5]--\n13 = --[6.6]--\n14 = --[7.7]--\n15 = --[8]--\n16 = --[9]--\n17 = --[10]--\n18 = --[-11]--\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"stringbuilder.insert#1\">Imports System\nImports System.Text\n\nClass Sample\n   &#39;                                 index: 012345\n   Private Shared initialValue As String = &quot;--[]--&quot;\n   Private Shared sb As StringBuilder\n   \n   Public Shared Sub Main()\n      Dim xyz As String = &quot;xyz&quot;\n      Dim abc As Char() =  {&quot;a&quot;c, &quot;b&quot;c, &quot;c&quot;c}\n      Dim star As Char = &quot;*&quot;c\n      Dim obj As [Object] = 0\n      \n      Dim xBool As Boolean = True\n      Dim xByte As Byte = 1\n      Dim xInt16 As Short = 2\n      Dim xInt32 As Integer = 3\n      Dim xInt64 As Long = 4\n      Dim xDecimal As [Decimal] = 5\n      Dim xSingle As Single = 6.6F\n      Dim xDouble As Double = 7.7\n      \n      &#39; The following types are not CLS-compliant.\n      &#39; Dim xUInt16 As System.UInt16 = 8 \n      &#39; Dim xUInt32 As System.UInt32 = 9\n      &#39; Dim xUInt64 As System.UInt64 = 10 \n      &#39; Dim xSByte As System.SByte = - 11\n      &#39;\n      Console.WriteLine(&quot;StringBuilder.Insert method&quot;)\n      sb = New StringBuilder(initialValue)\n      \n      sb.Insert(3, xyz, 2)\n      Show(1, sb)\n      \n      sb.Insert(3, xyz)\n      Show(2, sb)\n      \n      sb.Insert(3, star)\n      Show(3, sb)\n      \n      sb.Insert(3, abc)\n      Show(4, sb)\n      \n      sb.Insert(3, abc, 1, 2)\n      Show(5, sb)\n      \n      sb.Insert(3, xBool)     &#39; True\n      Show(6, sb)\n      \n      sb.Insert(3, obj)       &#39; 0\n      Show(7, sb)\n      \n      sb.Insert(3, xByte)     &#39; 1\n      Show(8, sb)\n      \n      sb.Insert(3, xInt16)    &#39; 2\n      Show(9, sb)\n      \n      sb.Insert(3, xInt32)    &#39; 3\n      Show(10, sb)\n      \n      sb.Insert(3, xInt64)    &#39; 4\n      Show(11, sb)\n      \n      sb.Insert(3, xDecimal)  &#39; 5\n      Show(12, sb)\n      \n      sb.Insert(3, xSingle)   &#39; 6.6\n      Show(13, sb)\n      \n      sb.Insert(3, xDouble)   &#39; 7.7\n      Show(14, sb)\n      \n      &#39; The following Insert methods are not CLS-compliant.\n      &#39; sb.Insert(3, xUInt16) &#39; 8\n      &#39; sb.Insert(3, xUInt32) &#39; 9\n      &#39; sb.Insert(3, xUInt64) &#39; 10\n      &#39; sb.Insert(3, xSByte)  &#39; -11\n\n   End Sub &#39;Main\n   \n   Public Shared Sub Show(overloadNumber As Integer, sbs As StringBuilder)\n      Console.WriteLine(&quot;{0,2:G} = {1}&quot;, overloadNumber, sbs.ToString())\n      sb = New StringBuilder(initialValue)\n   End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;StringBuilder.Insert method\n&#39; 1 = --[xyzxyz]--\n&#39; 2 = --[xyz]--\n&#39; 3 = --[*]--\n&#39; 4 = --[abc]--\n&#39; 5 = --[bc]--\n&#39; 6 = --[True]--\n&#39; 7 = --[0]--\n&#39; 8 = --[1]--\n&#39; 9 = --[2]--\n&#39;10 = --[3]--\n&#39;11 = --[4]--\n&#39;12 = --[5]--\n&#39;13 = --[6.6]--\n&#39;14 = --[7.7]--\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Insert_System_Int32_System_UInt16_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Insert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Insert(Int32,UInt16)</div>        \r\n          </div>\r\n    \r\n            <p>Inserts the string representation of a 16-bit unsigned integer into this instance at the specified character position.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Insert (int index, ushort value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position in this instance where insertion begins.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to insert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the insert operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero or greater than the length of this instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.uint16#System_UInt16_ToString_\" data-linktype=\"relative-path\">ToString</a> is used to get a string representation of <code>value</code>. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Insert_\" data-linktype=\"relative-path\">Insert</a> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"stringbuilder.insert#1\">using namespace System;\nusing namespace System::Text;\nref class Sample\n{\nprivate:\n\n   //                           index: 012345\n   static String^ initialValue = &quot;--[]--&quot;;\n   static StringBuilder^ sb;\n\npublic:\n   static void Main()\n   {\n      String^ xyz = &quot;xyz&quot;;\n      array&lt;Char&gt;^abc = {&#39;a&#39;,&#39;b&#39;,&#39;c&#39;};\n      Char star = &#39;*&#39;;\n      Object^ obj = 0;\n      bool xBool = true;\n      Byte xByte = 1;\n      short xInt16 = 2;\n      int xInt32 = 3;\n      long xInt64 = 4;\n      Decimal xDecimal = 5;\n      float xSingle = 6.6F;\n      double xDouble = 7.7;\n      \n      // The following types are not CLS-compliant.\n      UInt16 xUInt16 = 8;\n      UInt32 xUInt32 = 9;\n      UInt64 xUInt64 = 10;\n      SByte xSByte = -11;\n      \n      //\n      Console::WriteLine( &quot;StringBuilder.Insert method&quot; );\n      sb = gcnew StringBuilder( initialValue );\n      sb-&gt;Insert( 3, xyz, 2 );\n      Show( 1, sb );\n      sb-&gt;Insert( 3, xyz );\n      Show( 2, sb );\n      sb-&gt;Insert( 3, star );\n      Show( 3, sb );\n      sb-&gt;Insert( 3, abc );\n      Show( 4, sb );\n      sb-&gt;Insert( 3, abc, 1, 2 );\n      Show( 5, sb );\n      sb-&gt;Insert( 3, xBool ); // True\n      Show( 6, sb );\n      sb-&gt;Insert( 3, obj ); // 0\n      Show( 7, sb );\n      sb-&gt;Insert( 3, xByte ); // 1\n      Show( 8, sb );\n      sb-&gt;Insert( 3, xInt16 ); // 2\n      Show( 9, sb );\n      sb-&gt;Insert( 3, xInt32 ); // 3\n      Show( 10, sb );\n      sb-&gt;Insert( 3, xInt64 ); // 4\n      Show( 11, sb );\n      sb-&gt;Insert( 3, xDecimal ); // 5\n      Show( 12, sb );\n      sb-&gt;Insert( 3, xSingle ); // 6.6\n      Show( 13, sb );\n      sb-&gt;Insert( 3, xDouble ); // 7.7\n      Show( 14, sb );\n      \n      // The following Insert methods are not CLS-compliant.\n      sb-&gt;Insert( 3, xUInt16 ); // 8\n      Show( 15, sb );\n      sb-&gt;Insert( 3, xUInt32 ); // 9\n      Show( 16, sb );\n      sb-&gt;Insert( 3, xUInt64 ); // 10\n      Show( 17, sb );\n      sb-&gt;Insert( 3, xSByte ); // -11\n      Show( 18, sb );\n      \n      //\n   }\n\n   static void Show( int overloadNumber, StringBuilder^ sbs )\n   {\n      Console::WriteLine( &quot;{0,2:G} = {1}&quot;, overloadNumber, sbs );\n      sb = gcnew StringBuilder( initialValue );\n   }\n\n};\n\nint main()\n{\n   Sample::Main();\n}\n\n/*\nThis example produces the following results:\n\nStringBuilder.Insert method\n 1 = --[xyzxyz]--\n 2 = --[xyz]--\n 3 = --[*]--\n 4 = --[abc]--\n 5 = --[bc]--\n 6 = --[True]--\n 7 = --[0]--\n 8 = --[1]--\n 9 = --[2]--\n10 = --[3]--\n11 = --[4]--\n12 = --[5]--\n13 = --[6.6]--\n14 = --[7.7]--\n15 = --[8]--\n16 = --[9]--\n17 = --[10]--\n18 = --[-11]--\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"stringbuilder.insert#1\">using System;\nusing System.Text;\n\nclass Sample \n{\n//                         index: 012345\n    static string initialValue = &quot;--[]--&quot;;\n    static StringBuilder sb;\n\n    public static void Main() \n    {\n    string      xyz       = &quot;xyz&quot;;\n    char[]      abc       = {&#39;a&#39;, &#39;b&#39;, &#39;c&#39;};\n    char        star      = &#39;*&#39;;\n    Object \tobj       = 0;\n\n    bool        xBool     = true;\n    byte        xByte     = 1;\n    short       xInt16    = 2;\n    int         xInt32    = 3;\n    long        xInt64    = 4;\n    Decimal     xDecimal  = 5;\n    float       xSingle   = 6.6F;\n    double      xDouble   = 7.7;\n\n// The following types are not CLS-compliant.\n    ushort      xUInt16   = 8;\n    uint        xUInt32   = 9;\n    ulong       xUInt64   = 10;\n    sbyte       xSByte    = -11;\n//\n    Console.WriteLine(&quot;StringBuilder.Insert method&quot;);\n    sb = new StringBuilder(initialValue);\n\n    sb.Insert(3, xyz, 2);\n    Show(1, sb);\n\n    sb.Insert(3, xyz);\n    Show(2, sb);\n\n    sb.Insert(3, star);\n    Show(3, sb);\n\n    sb.Insert(3, abc);\n    Show(4, sb);\n\n    sb.Insert(3, abc, 1, 2);\n    Show(5, sb);\n\n    sb.Insert(3, xBool);     // True\n    Show(6, sb);\n\n    sb.Insert(3, obj);       // 0\n    Show(7, sb);\n\n    sb.Insert(3, xByte);     // 1\n    Show(8, sb);\n\n    sb.Insert(3, xInt16);    // 2\n    Show(9, sb);\n\n    sb.Insert(3, xInt32);    // 3\n    Show(10, sb);\n\n    sb.Insert(3, xInt64);    // 4\n    Show(11, sb);\n\n    sb.Insert(3, xDecimal);  // 5\n    Show(12, sb);\n\n    sb.Insert(3, xSingle);   // 6.6\n    Show(13, sb);\n\n    sb.Insert(3, xDouble);   // 7.7\n    Show(14, sb);\n\n// The following Insert methods are not CLS-compliant.\n    sb.Insert(3, xUInt16);   // 8\n    Show(15, sb);\n\n    sb.Insert(3, xUInt32);   // 9\n    Show(16, sb);\n\n    sb.Insert(3, xUInt64);   // 10\n    Show(17, sb);\n\n    sb.Insert(3, xSByte);    // -11\n    Show(18, sb);\n//\n    }\n\n    public static void Show(int overloadNumber, StringBuilder sbs)\n    {\n    Console.WriteLine(&quot;{0,2:G} = {1}&quot;, overloadNumber, sbs.ToString());\n    sb = new StringBuilder(initialValue);\n    }\n}\n/*\nThis example produces the following results:\n\nStringBuilder.Insert method\n 1 = --[xyzxyz]--\n 2 = --[xyz]--\n 3 = --[*]--\n 4 = --[abc]--\n 5 = --[bc]--\n 6 = --[True]--\n 7 = --[0]--\n 8 = --[1]--\n 9 = --[2]--\n10 = --[3]--\n11 = --[4]--\n12 = --[5]--\n13 = --[6.6]--\n14 = --[7.7]--\n15 = --[8]--\n16 = --[9]--\n17 = --[10]--\n18 = --[-11]--\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"stringbuilder.insert#1\">Imports System\nImports System.Text\n\nClass Sample\n   &#39;                                 index: 012345\n   Private Shared initialValue As String = &quot;--[]--&quot;\n   Private Shared sb As StringBuilder\n   \n   Public Shared Sub Main()\n      Dim xyz As String = &quot;xyz&quot;\n      Dim abc As Char() =  {&quot;a&quot;c, &quot;b&quot;c, &quot;c&quot;c}\n      Dim star As Char = &quot;*&quot;c\n      Dim obj As [Object] = 0\n      \n      Dim xBool As Boolean = True\n      Dim xByte As Byte = 1\n      Dim xInt16 As Short = 2\n      Dim xInt32 As Integer = 3\n      Dim xInt64 As Long = 4\n      Dim xDecimal As [Decimal] = 5\n      Dim xSingle As Single = 6.6F\n      Dim xDouble As Double = 7.7\n      \n      &#39; The following types are not CLS-compliant.\n      &#39; Dim xUInt16 As System.UInt16 = 8 \n      &#39; Dim xUInt32 As System.UInt32 = 9\n      &#39; Dim xUInt64 As System.UInt64 = 10 \n      &#39; Dim xSByte As System.SByte = - 11\n      &#39;\n      Console.WriteLine(&quot;StringBuilder.Insert method&quot;)\n      sb = New StringBuilder(initialValue)\n      \n      sb.Insert(3, xyz, 2)\n      Show(1, sb)\n      \n      sb.Insert(3, xyz)\n      Show(2, sb)\n      \n      sb.Insert(3, star)\n      Show(3, sb)\n      \n      sb.Insert(3, abc)\n      Show(4, sb)\n      \n      sb.Insert(3, abc, 1, 2)\n      Show(5, sb)\n      \n      sb.Insert(3, xBool)     &#39; True\n      Show(6, sb)\n      \n      sb.Insert(3, obj)       &#39; 0\n      Show(7, sb)\n      \n      sb.Insert(3, xByte)     &#39; 1\n      Show(8, sb)\n      \n      sb.Insert(3, xInt16)    &#39; 2\n      Show(9, sb)\n      \n      sb.Insert(3, xInt32)    &#39; 3\n      Show(10, sb)\n      \n      sb.Insert(3, xInt64)    &#39; 4\n      Show(11, sb)\n      \n      sb.Insert(3, xDecimal)  &#39; 5\n      Show(12, sb)\n      \n      sb.Insert(3, xSingle)   &#39; 6.6\n      Show(13, sb)\n      \n      sb.Insert(3, xDouble)   &#39; 7.7\n      Show(14, sb)\n      \n      &#39; The following Insert methods are not CLS-compliant.\n      &#39; sb.Insert(3, xUInt16) &#39; 8\n      &#39; sb.Insert(3, xUInt32) &#39; 9\n      &#39; sb.Insert(3, xUInt64) &#39; 10\n      &#39; sb.Insert(3, xSByte)  &#39; -11\n\n   End Sub &#39;Main\n   \n   Public Shared Sub Show(overloadNumber As Integer, sbs As StringBuilder)\n      Console.WriteLine(&quot;{0,2:G} = {1}&quot;, overloadNumber, sbs.ToString())\n      sb = New StringBuilder(initialValue)\n   End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;StringBuilder.Insert method\n&#39; 1 = --[xyzxyz]--\n&#39; 2 = --[xyz]--\n&#39; 3 = --[*]--\n&#39; 4 = --[abc]--\n&#39; 5 = --[bc]--\n&#39; 6 = --[True]--\n&#39; 7 = --[0]--\n&#39; 8 = --[1]--\n&#39; 9 = --[2]--\n&#39;10 = --[3]--\n&#39;11 = --[4]--\n&#39;12 = --[5]--\n&#39;13 = --[6.6]--\n&#39;14 = --[7.7]--\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Insert_System_Int32_System_UInt32_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Insert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Insert(Int32,UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Inserts the string representation of a 32-bit unsigned integer into this instance at the specified character position.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Insert (int index, uint value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position in this instance where insertion begins.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to insert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the insert operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero or greater than the length of this instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.uint32#System_UInt32_ToString_\" data-linktype=\"relative-path\">ToString</a> is used to get a string representation of <code>value</code>. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Insert_\" data-linktype=\"relative-path\">Insert</a> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"stringbuilder.insert#1\">using namespace System;\nusing namespace System::Text;\nref class Sample\n{\nprivate:\n\n   //                           index: 012345\n   static String^ initialValue = &quot;--[]--&quot;;\n   static StringBuilder^ sb;\n\npublic:\n   static void Main()\n   {\n      String^ xyz = &quot;xyz&quot;;\n      array&lt;Char&gt;^abc = {&#39;a&#39;,&#39;b&#39;,&#39;c&#39;};\n      Char star = &#39;*&#39;;\n      Object^ obj = 0;\n      bool xBool = true;\n      Byte xByte = 1;\n      short xInt16 = 2;\n      int xInt32 = 3;\n      long xInt64 = 4;\n      Decimal xDecimal = 5;\n      float xSingle = 6.6F;\n      double xDouble = 7.7;\n      \n      // The following types are not CLS-compliant.\n      UInt16 xUInt16 = 8;\n      UInt32 xUInt32 = 9;\n      UInt64 xUInt64 = 10;\n      SByte xSByte = -11;\n      \n      //\n      Console::WriteLine( &quot;StringBuilder.Insert method&quot; );\n      sb = gcnew StringBuilder( initialValue );\n      sb-&gt;Insert( 3, xyz, 2 );\n      Show( 1, sb );\n      sb-&gt;Insert( 3, xyz );\n      Show( 2, sb );\n      sb-&gt;Insert( 3, star );\n      Show( 3, sb );\n      sb-&gt;Insert( 3, abc );\n      Show( 4, sb );\n      sb-&gt;Insert( 3, abc, 1, 2 );\n      Show( 5, sb );\n      sb-&gt;Insert( 3, xBool ); // True\n      Show( 6, sb );\n      sb-&gt;Insert( 3, obj ); // 0\n      Show( 7, sb );\n      sb-&gt;Insert( 3, xByte ); // 1\n      Show( 8, sb );\n      sb-&gt;Insert( 3, xInt16 ); // 2\n      Show( 9, sb );\n      sb-&gt;Insert( 3, xInt32 ); // 3\n      Show( 10, sb );\n      sb-&gt;Insert( 3, xInt64 ); // 4\n      Show( 11, sb );\n      sb-&gt;Insert( 3, xDecimal ); // 5\n      Show( 12, sb );\n      sb-&gt;Insert( 3, xSingle ); // 6.6\n      Show( 13, sb );\n      sb-&gt;Insert( 3, xDouble ); // 7.7\n      Show( 14, sb );\n      \n      // The following Insert methods are not CLS-compliant.\n      sb-&gt;Insert( 3, xUInt16 ); // 8\n      Show( 15, sb );\n      sb-&gt;Insert( 3, xUInt32 ); // 9\n      Show( 16, sb );\n      sb-&gt;Insert( 3, xUInt64 ); // 10\n      Show( 17, sb );\n      sb-&gt;Insert( 3, xSByte ); // -11\n      Show( 18, sb );\n      \n      //\n   }\n\n   static void Show( int overloadNumber, StringBuilder^ sbs )\n   {\n      Console::WriteLine( &quot;{0,2:G} = {1}&quot;, overloadNumber, sbs );\n      sb = gcnew StringBuilder( initialValue );\n   }\n\n};\n\nint main()\n{\n   Sample::Main();\n}\n\n/*\nThis example produces the following results:\n\nStringBuilder.Insert method\n 1 = --[xyzxyz]--\n 2 = --[xyz]--\n 3 = --[*]--\n 4 = --[abc]--\n 5 = --[bc]--\n 6 = --[True]--\n 7 = --[0]--\n 8 = --[1]--\n 9 = --[2]--\n10 = --[3]--\n11 = --[4]--\n12 = --[5]--\n13 = --[6.6]--\n14 = --[7.7]--\n15 = --[8]--\n16 = --[9]--\n17 = --[10]--\n18 = --[-11]--\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"stringbuilder.insert#1\">using System;\nusing System.Text;\n\nclass Sample \n{\n//                         index: 012345\n    static string initialValue = &quot;--[]--&quot;;\n    static StringBuilder sb;\n\n    public static void Main() \n    {\n    string      xyz       = &quot;xyz&quot;;\n    char[]      abc       = {&#39;a&#39;, &#39;b&#39;, &#39;c&#39;};\n    char        star      = &#39;*&#39;;\n    Object \tobj       = 0;\n\n    bool        xBool     = true;\n    byte        xByte     = 1;\n    short       xInt16    = 2;\n    int         xInt32    = 3;\n    long        xInt64    = 4;\n    Decimal     xDecimal  = 5;\n    float       xSingle   = 6.6F;\n    double      xDouble   = 7.7;\n\n// The following types are not CLS-compliant.\n    ushort      xUInt16   = 8;\n    uint        xUInt32   = 9;\n    ulong       xUInt64   = 10;\n    sbyte       xSByte    = -11;\n//\n    Console.WriteLine(&quot;StringBuilder.Insert method&quot;);\n    sb = new StringBuilder(initialValue);\n\n    sb.Insert(3, xyz, 2);\n    Show(1, sb);\n\n    sb.Insert(3, xyz);\n    Show(2, sb);\n\n    sb.Insert(3, star);\n    Show(3, sb);\n\n    sb.Insert(3, abc);\n    Show(4, sb);\n\n    sb.Insert(3, abc, 1, 2);\n    Show(5, sb);\n\n    sb.Insert(3, xBool);     // True\n    Show(6, sb);\n\n    sb.Insert(3, obj);       // 0\n    Show(7, sb);\n\n    sb.Insert(3, xByte);     // 1\n    Show(8, sb);\n\n    sb.Insert(3, xInt16);    // 2\n    Show(9, sb);\n\n    sb.Insert(3, xInt32);    // 3\n    Show(10, sb);\n\n    sb.Insert(3, xInt64);    // 4\n    Show(11, sb);\n\n    sb.Insert(3, xDecimal);  // 5\n    Show(12, sb);\n\n    sb.Insert(3, xSingle);   // 6.6\n    Show(13, sb);\n\n    sb.Insert(3, xDouble);   // 7.7\n    Show(14, sb);\n\n// The following Insert methods are not CLS-compliant.\n    sb.Insert(3, xUInt16);   // 8\n    Show(15, sb);\n\n    sb.Insert(3, xUInt32);   // 9\n    Show(16, sb);\n\n    sb.Insert(3, xUInt64);   // 10\n    Show(17, sb);\n\n    sb.Insert(3, xSByte);    // -11\n    Show(18, sb);\n//\n    }\n\n    public static void Show(int overloadNumber, StringBuilder sbs)\n    {\n    Console.WriteLine(&quot;{0,2:G} = {1}&quot;, overloadNumber, sbs.ToString());\n    sb = new StringBuilder(initialValue);\n    }\n}\n/*\nThis example produces the following results:\n\nStringBuilder.Insert method\n 1 = --[xyzxyz]--\n 2 = --[xyz]--\n 3 = --[*]--\n 4 = --[abc]--\n 5 = --[bc]--\n 6 = --[True]--\n 7 = --[0]--\n 8 = --[1]--\n 9 = --[2]--\n10 = --[3]--\n11 = --[4]--\n12 = --[5]--\n13 = --[6.6]--\n14 = --[7.7]--\n15 = --[8]--\n16 = --[9]--\n17 = --[10]--\n18 = --[-11]--\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"stringbuilder.insert#1\">Imports System\nImports System.Text\n\nClass Sample\n   &#39;                                 index: 012345\n   Private Shared initialValue As String = &quot;--[]--&quot;\n   Private Shared sb As StringBuilder\n   \n   Public Shared Sub Main()\n      Dim xyz As String = &quot;xyz&quot;\n      Dim abc As Char() =  {&quot;a&quot;c, &quot;b&quot;c, &quot;c&quot;c}\n      Dim star As Char = &quot;*&quot;c\n      Dim obj As [Object] = 0\n      \n      Dim xBool As Boolean = True\n      Dim xByte As Byte = 1\n      Dim xInt16 As Short = 2\n      Dim xInt32 As Integer = 3\n      Dim xInt64 As Long = 4\n      Dim xDecimal As [Decimal] = 5\n      Dim xSingle As Single = 6.6F\n      Dim xDouble As Double = 7.7\n      \n      &#39; The following types are not CLS-compliant.\n      &#39; Dim xUInt16 As System.UInt16 = 8 \n      &#39; Dim xUInt32 As System.UInt32 = 9\n      &#39; Dim xUInt64 As System.UInt64 = 10 \n      &#39; Dim xSByte As System.SByte = - 11\n      &#39;\n      Console.WriteLine(&quot;StringBuilder.Insert method&quot;)\n      sb = New StringBuilder(initialValue)\n      \n      sb.Insert(3, xyz, 2)\n      Show(1, sb)\n      \n      sb.Insert(3, xyz)\n      Show(2, sb)\n      \n      sb.Insert(3, star)\n      Show(3, sb)\n      \n      sb.Insert(3, abc)\n      Show(4, sb)\n      \n      sb.Insert(3, abc, 1, 2)\n      Show(5, sb)\n      \n      sb.Insert(3, xBool)     &#39; True\n      Show(6, sb)\n      \n      sb.Insert(3, obj)       &#39; 0\n      Show(7, sb)\n      \n      sb.Insert(3, xByte)     &#39; 1\n      Show(8, sb)\n      \n      sb.Insert(3, xInt16)    &#39; 2\n      Show(9, sb)\n      \n      sb.Insert(3, xInt32)    &#39; 3\n      Show(10, sb)\n      \n      sb.Insert(3, xInt64)    &#39; 4\n      Show(11, sb)\n      \n      sb.Insert(3, xDecimal)  &#39; 5\n      Show(12, sb)\n      \n      sb.Insert(3, xSingle)   &#39; 6.6\n      Show(13, sb)\n      \n      sb.Insert(3, xDouble)   &#39; 7.7\n      Show(14, sb)\n      \n      &#39; The following Insert methods are not CLS-compliant.\n      &#39; sb.Insert(3, xUInt16) &#39; 8\n      &#39; sb.Insert(3, xUInt32) &#39; 9\n      &#39; sb.Insert(3, xUInt64) &#39; 10\n      &#39; sb.Insert(3, xSByte)  &#39; -11\n\n   End Sub &#39;Main\n   \n   Public Shared Sub Show(overloadNumber As Integer, sbs As StringBuilder)\n      Console.WriteLine(&quot;{0,2:G} = {1}&quot;, overloadNumber, sbs.ToString())\n      sb = New StringBuilder(initialValue)\n   End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;StringBuilder.Insert method\n&#39; 1 = --[xyzxyz]--\n&#39; 2 = --[xyz]--\n&#39; 3 = --[*]--\n&#39; 4 = --[abc]--\n&#39; 5 = --[bc]--\n&#39; 6 = --[True]--\n&#39; 7 = --[0]--\n&#39; 8 = --[1]--\n&#39; 9 = --[2]--\n&#39;10 = --[3]--\n&#39;11 = --[4]--\n&#39;12 = --[5]--\n&#39;13 = --[6.6]--\n&#39;14 = --[7.7]--\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Insert_System_Int32_System_UInt64_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Insert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Insert(Int32,UInt64)</div>        \r\n          </div>\r\n    \r\n            <p>Inserts the string representation of a 64-bit unsigned integer into this instance at the specified character position.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Insert (int index, ulong value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position in this instance where insertion begins.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to insert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the insert operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero or greater than the length of this instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.uint64#System_UInt64_ToString_\" data-linktype=\"relative-path\">ToString</a> is used to get a string representation of <code>value</code>. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Insert_\" data-linktype=\"relative-path\">Insert</a> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"stringbuilder.insert#1\">using namespace System;\nusing namespace System::Text;\nref class Sample\n{\nprivate:\n\n   //                           index: 012345\n   static String^ initialValue = &quot;--[]--&quot;;\n   static StringBuilder^ sb;\n\npublic:\n   static void Main()\n   {\n      String^ xyz = &quot;xyz&quot;;\n      array&lt;Char&gt;^abc = {&#39;a&#39;,&#39;b&#39;,&#39;c&#39;};\n      Char star = &#39;*&#39;;\n      Object^ obj = 0;\n      bool xBool = true;\n      Byte xByte = 1;\n      short xInt16 = 2;\n      int xInt32 = 3;\n      long xInt64 = 4;\n      Decimal xDecimal = 5;\n      float xSingle = 6.6F;\n      double xDouble = 7.7;\n      \n      // The following types are not CLS-compliant.\n      UInt16 xUInt16 = 8;\n      UInt32 xUInt32 = 9;\n      UInt64 xUInt64 = 10;\n      SByte xSByte = -11;\n      \n      //\n      Console::WriteLine( &quot;StringBuilder.Insert method&quot; );\n      sb = gcnew StringBuilder( initialValue );\n      sb-&gt;Insert( 3, xyz, 2 );\n      Show( 1, sb );\n      sb-&gt;Insert( 3, xyz );\n      Show( 2, sb );\n      sb-&gt;Insert( 3, star );\n      Show( 3, sb );\n      sb-&gt;Insert( 3, abc );\n      Show( 4, sb );\n      sb-&gt;Insert( 3, abc, 1, 2 );\n      Show( 5, sb );\n      sb-&gt;Insert( 3, xBool ); // True\n      Show( 6, sb );\n      sb-&gt;Insert( 3, obj ); // 0\n      Show( 7, sb );\n      sb-&gt;Insert( 3, xByte ); // 1\n      Show( 8, sb );\n      sb-&gt;Insert( 3, xInt16 ); // 2\n      Show( 9, sb );\n      sb-&gt;Insert( 3, xInt32 ); // 3\n      Show( 10, sb );\n      sb-&gt;Insert( 3, xInt64 ); // 4\n      Show( 11, sb );\n      sb-&gt;Insert( 3, xDecimal ); // 5\n      Show( 12, sb );\n      sb-&gt;Insert( 3, xSingle ); // 6.6\n      Show( 13, sb );\n      sb-&gt;Insert( 3, xDouble ); // 7.7\n      Show( 14, sb );\n      \n      // The following Insert methods are not CLS-compliant.\n      sb-&gt;Insert( 3, xUInt16 ); // 8\n      Show( 15, sb );\n      sb-&gt;Insert( 3, xUInt32 ); // 9\n      Show( 16, sb );\n      sb-&gt;Insert( 3, xUInt64 ); // 10\n      Show( 17, sb );\n      sb-&gt;Insert( 3, xSByte ); // -11\n      Show( 18, sb );\n      \n      //\n   }\n\n   static void Show( int overloadNumber, StringBuilder^ sbs )\n   {\n      Console::WriteLine( &quot;{0,2:G} = {1}&quot;, overloadNumber, sbs );\n      sb = gcnew StringBuilder( initialValue );\n   }\n\n};\n\nint main()\n{\n   Sample::Main();\n}\n\n/*\nThis example produces the following results:\n\nStringBuilder.Insert method\n 1 = --[xyzxyz]--\n 2 = --[xyz]--\n 3 = --[*]--\n 4 = --[abc]--\n 5 = --[bc]--\n 6 = --[True]--\n 7 = --[0]--\n 8 = --[1]--\n 9 = --[2]--\n10 = --[3]--\n11 = --[4]--\n12 = --[5]--\n13 = --[6.6]--\n14 = --[7.7]--\n15 = --[8]--\n16 = --[9]--\n17 = --[10]--\n18 = --[-11]--\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"stringbuilder.insert#1\">using System;\nusing System.Text;\n\nclass Sample \n{\n//                         index: 012345\n    static string initialValue = &quot;--[]--&quot;;\n    static StringBuilder sb;\n\n    public static void Main() \n    {\n    string      xyz       = &quot;xyz&quot;;\n    char[]      abc       = {&#39;a&#39;, &#39;b&#39;, &#39;c&#39;};\n    char        star      = &#39;*&#39;;\n    Object \tobj       = 0;\n\n    bool        xBool     = true;\n    byte        xByte     = 1;\n    short       xInt16    = 2;\n    int         xInt32    = 3;\n    long        xInt64    = 4;\n    Decimal     xDecimal  = 5;\n    float       xSingle   = 6.6F;\n    double      xDouble   = 7.7;\n\n// The following types are not CLS-compliant.\n    ushort      xUInt16   = 8;\n    uint        xUInt32   = 9;\n    ulong       xUInt64   = 10;\n    sbyte       xSByte    = -11;\n//\n    Console.WriteLine(&quot;StringBuilder.Insert method&quot;);\n    sb = new StringBuilder(initialValue);\n\n    sb.Insert(3, xyz, 2);\n    Show(1, sb);\n\n    sb.Insert(3, xyz);\n    Show(2, sb);\n\n    sb.Insert(3, star);\n    Show(3, sb);\n\n    sb.Insert(3, abc);\n    Show(4, sb);\n\n    sb.Insert(3, abc, 1, 2);\n    Show(5, sb);\n\n    sb.Insert(3, xBool);     // True\n    Show(6, sb);\n\n    sb.Insert(3, obj);       // 0\n    Show(7, sb);\n\n    sb.Insert(3, xByte);     // 1\n    Show(8, sb);\n\n    sb.Insert(3, xInt16);    // 2\n    Show(9, sb);\n\n    sb.Insert(3, xInt32);    // 3\n    Show(10, sb);\n\n    sb.Insert(3, xInt64);    // 4\n    Show(11, sb);\n\n    sb.Insert(3, xDecimal);  // 5\n    Show(12, sb);\n\n    sb.Insert(3, xSingle);   // 6.6\n    Show(13, sb);\n\n    sb.Insert(3, xDouble);   // 7.7\n    Show(14, sb);\n\n// The following Insert methods are not CLS-compliant.\n    sb.Insert(3, xUInt16);   // 8\n    Show(15, sb);\n\n    sb.Insert(3, xUInt32);   // 9\n    Show(16, sb);\n\n    sb.Insert(3, xUInt64);   // 10\n    Show(17, sb);\n\n    sb.Insert(3, xSByte);    // -11\n    Show(18, sb);\n//\n    }\n\n    public static void Show(int overloadNumber, StringBuilder sbs)\n    {\n    Console.WriteLine(&quot;{0,2:G} = {1}&quot;, overloadNumber, sbs.ToString());\n    sb = new StringBuilder(initialValue);\n    }\n}\n/*\nThis example produces the following results:\n\nStringBuilder.Insert method\n 1 = --[xyzxyz]--\n 2 = --[xyz]--\n 3 = --[*]--\n 4 = --[abc]--\n 5 = --[bc]--\n 6 = --[True]--\n 7 = --[0]--\n 8 = --[1]--\n 9 = --[2]--\n10 = --[3]--\n11 = --[4]--\n12 = --[5]--\n13 = --[6.6]--\n14 = --[7.7]--\n15 = --[8]--\n16 = --[9]--\n17 = --[10]--\n18 = --[-11]--\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"stringbuilder.insert#1\">Imports System\nImports System.Text\n\nClass Sample\n   &#39;                                 index: 012345\n   Private Shared initialValue As String = &quot;--[]--&quot;\n   Private Shared sb As StringBuilder\n   \n   Public Shared Sub Main()\n      Dim xyz As String = &quot;xyz&quot;\n      Dim abc As Char() =  {&quot;a&quot;c, &quot;b&quot;c, &quot;c&quot;c}\n      Dim star As Char = &quot;*&quot;c\n      Dim obj As [Object] = 0\n      \n      Dim xBool As Boolean = True\n      Dim xByte As Byte = 1\n      Dim xInt16 As Short = 2\n      Dim xInt32 As Integer = 3\n      Dim xInt64 As Long = 4\n      Dim xDecimal As [Decimal] = 5\n      Dim xSingle As Single = 6.6F\n      Dim xDouble As Double = 7.7\n      \n      &#39; The following types are not CLS-compliant.\n      &#39; Dim xUInt16 As System.UInt16 = 8 \n      &#39; Dim xUInt32 As System.UInt32 = 9\n      &#39; Dim xUInt64 As System.UInt64 = 10 \n      &#39; Dim xSByte As System.SByte = - 11\n      &#39;\n      Console.WriteLine(&quot;StringBuilder.Insert method&quot;)\n      sb = New StringBuilder(initialValue)\n      \n      sb.Insert(3, xyz, 2)\n      Show(1, sb)\n      \n      sb.Insert(3, xyz)\n      Show(2, sb)\n      \n      sb.Insert(3, star)\n      Show(3, sb)\n      \n      sb.Insert(3, abc)\n      Show(4, sb)\n      \n      sb.Insert(3, abc, 1, 2)\n      Show(5, sb)\n      \n      sb.Insert(3, xBool)     &#39; True\n      Show(6, sb)\n      \n      sb.Insert(3, obj)       &#39; 0\n      Show(7, sb)\n      \n      sb.Insert(3, xByte)     &#39; 1\n      Show(8, sb)\n      \n      sb.Insert(3, xInt16)    &#39; 2\n      Show(9, sb)\n      \n      sb.Insert(3, xInt32)    &#39; 3\n      Show(10, sb)\n      \n      sb.Insert(3, xInt64)    &#39; 4\n      Show(11, sb)\n      \n      sb.Insert(3, xDecimal)  &#39; 5\n      Show(12, sb)\n      \n      sb.Insert(3, xSingle)   &#39; 6.6\n      Show(13, sb)\n      \n      sb.Insert(3, xDouble)   &#39; 7.7\n      Show(14, sb)\n      \n      &#39; The following Insert methods are not CLS-compliant.\n      &#39; sb.Insert(3, xUInt16) &#39; 8\n      &#39; sb.Insert(3, xUInt32) &#39; 9\n      &#39; sb.Insert(3, xUInt64) &#39; 10\n      &#39; sb.Insert(3, xSByte)  &#39; -11\n\n   End Sub &#39;Main\n   \n   Public Shared Sub Show(overloadNumber As Integer, sbs As StringBuilder)\n      Console.WriteLine(&quot;{0,2:G} = {1}&quot;, overloadNumber, sbs.ToString())\n      sb = New StringBuilder(initialValue)\n   End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;StringBuilder.Insert method\n&#39; 1 = --[xyzxyz]--\n&#39; 2 = --[xyz]--\n&#39; 3 = --[*]--\n&#39; 4 = --[abc]--\n&#39; 5 = --[bc]--\n&#39; 6 = --[True]--\n&#39; 7 = --[0]--\n&#39; 8 = --[1]--\n&#39; 9 = --[2]--\n&#39;10 = --[3]--\n&#39;11 = --[4]--\n&#39;12 = --[5]--\n&#39;13 = --[6.6]--\n&#39;14 = --[7.7]--\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Insert_System_Int32_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Insert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Insert(Int32,String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Inserts one or more copies of a specified string into this instance at the specified character position.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Insert (int index, string value, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position in this instance where insertion begins.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to insert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of times to insert <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after insertion has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero or greater than the current length of this instance.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>The current length of this <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object plus the length of <code>value</code> times <code>count</code> exceeds <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.  </p>\n<p> This <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object is not changed if <code>value</code> is <code>null</code>, <code>value</code> is not <code>null</code> but its length is zero, or <code>count</code> is zero.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Insert_\" data-linktype=\"relative-path\">Insert</a> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"stringbuilder.insert#1\">using namespace System;\nusing namespace System::Text;\nref class Sample\n{\nprivate:\n\n   //                           index: 012345\n   static String^ initialValue = &quot;--[]--&quot;;\n   static StringBuilder^ sb;\n\npublic:\n   static void Main()\n   {\n      String^ xyz = &quot;xyz&quot;;\n      array&lt;Char&gt;^abc = {&#39;a&#39;,&#39;b&#39;,&#39;c&#39;};\n      Char star = &#39;*&#39;;\n      Object^ obj = 0;\n      bool xBool = true;\n      Byte xByte = 1;\n      short xInt16 = 2;\n      int xInt32 = 3;\n      long xInt64 = 4;\n      Decimal xDecimal = 5;\n      float xSingle = 6.6F;\n      double xDouble = 7.7;\n      \n      // The following types are not CLS-compliant.\n      UInt16 xUInt16 = 8;\n      UInt32 xUInt32 = 9;\n      UInt64 xUInt64 = 10;\n      SByte xSByte = -11;\n      \n      //\n      Console::WriteLine( &quot;StringBuilder.Insert method&quot; );\n      sb = gcnew StringBuilder( initialValue );\n      sb-&gt;Insert( 3, xyz, 2 );\n      Show( 1, sb );\n      sb-&gt;Insert( 3, xyz );\n      Show( 2, sb );\n      sb-&gt;Insert( 3, star );\n      Show( 3, sb );\n      sb-&gt;Insert( 3, abc );\n      Show( 4, sb );\n      sb-&gt;Insert( 3, abc, 1, 2 );\n      Show( 5, sb );\n      sb-&gt;Insert( 3, xBool ); // True\n      Show( 6, sb );\n      sb-&gt;Insert( 3, obj ); // 0\n      Show( 7, sb );\n      sb-&gt;Insert( 3, xByte ); // 1\n      Show( 8, sb );\n      sb-&gt;Insert( 3, xInt16 ); // 2\n      Show( 9, sb );\n      sb-&gt;Insert( 3, xInt32 ); // 3\n      Show( 10, sb );\n      sb-&gt;Insert( 3, xInt64 ); // 4\n      Show( 11, sb );\n      sb-&gt;Insert( 3, xDecimal ); // 5\n      Show( 12, sb );\n      sb-&gt;Insert( 3, xSingle ); // 6.6\n      Show( 13, sb );\n      sb-&gt;Insert( 3, xDouble ); // 7.7\n      Show( 14, sb );\n      \n      // The following Insert methods are not CLS-compliant.\n      sb-&gt;Insert( 3, xUInt16 ); // 8\n      Show( 15, sb );\n      sb-&gt;Insert( 3, xUInt32 ); // 9\n      Show( 16, sb );\n      sb-&gt;Insert( 3, xUInt64 ); // 10\n      Show( 17, sb );\n      sb-&gt;Insert( 3, xSByte ); // -11\n      Show( 18, sb );\n      \n      //\n   }\n\n   static void Show( int overloadNumber, StringBuilder^ sbs )\n   {\n      Console::WriteLine( &quot;{0,2:G} = {1}&quot;, overloadNumber, sbs );\n      sb = gcnew StringBuilder( initialValue );\n   }\n\n};\n\nint main()\n{\n   Sample::Main();\n}\n\n/*\nThis example produces the following results:\n\nStringBuilder.Insert method\n 1 = --[xyzxyz]--\n 2 = --[xyz]--\n 3 = --[*]--\n 4 = --[abc]--\n 5 = --[bc]--\n 6 = --[True]--\n 7 = --[0]--\n 8 = --[1]--\n 9 = --[2]--\n10 = --[3]--\n11 = --[4]--\n12 = --[5]--\n13 = --[6.6]--\n14 = --[7.7]--\n15 = --[8]--\n16 = --[9]--\n17 = --[10]--\n18 = --[-11]--\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"stringbuilder.insert#1\">using System;\nusing System.Text;\n\nclass Sample \n{\n//                         index: 012345\n    static string initialValue = &quot;--[]--&quot;;\n    static StringBuilder sb;\n\n    public static void Main() \n    {\n    string      xyz       = &quot;xyz&quot;;\n    char[]      abc       = {&#39;a&#39;, &#39;b&#39;, &#39;c&#39;};\n    char        star      = &#39;*&#39;;\n    Object \tobj       = 0;\n\n    bool        xBool     = true;\n    byte        xByte     = 1;\n    short       xInt16    = 2;\n    int         xInt32    = 3;\n    long        xInt64    = 4;\n    Decimal     xDecimal  = 5;\n    float       xSingle   = 6.6F;\n    double      xDouble   = 7.7;\n\n// The following types are not CLS-compliant.\n    ushort      xUInt16   = 8;\n    uint        xUInt32   = 9;\n    ulong       xUInt64   = 10;\n    sbyte       xSByte    = -11;\n//\n    Console.WriteLine(&quot;StringBuilder.Insert method&quot;);\n    sb = new StringBuilder(initialValue);\n\n    sb.Insert(3, xyz, 2);\n    Show(1, sb);\n\n    sb.Insert(3, xyz);\n    Show(2, sb);\n\n    sb.Insert(3, star);\n    Show(3, sb);\n\n    sb.Insert(3, abc);\n    Show(4, sb);\n\n    sb.Insert(3, abc, 1, 2);\n    Show(5, sb);\n\n    sb.Insert(3, xBool);     // True\n    Show(6, sb);\n\n    sb.Insert(3, obj);       // 0\n    Show(7, sb);\n\n    sb.Insert(3, xByte);     // 1\n    Show(8, sb);\n\n    sb.Insert(3, xInt16);    // 2\n    Show(9, sb);\n\n    sb.Insert(3, xInt32);    // 3\n    Show(10, sb);\n\n    sb.Insert(3, xInt64);    // 4\n    Show(11, sb);\n\n    sb.Insert(3, xDecimal);  // 5\n    Show(12, sb);\n\n    sb.Insert(3, xSingle);   // 6.6\n    Show(13, sb);\n\n    sb.Insert(3, xDouble);   // 7.7\n    Show(14, sb);\n\n// The following Insert methods are not CLS-compliant.\n    sb.Insert(3, xUInt16);   // 8\n    Show(15, sb);\n\n    sb.Insert(3, xUInt32);   // 9\n    Show(16, sb);\n\n    sb.Insert(3, xUInt64);   // 10\n    Show(17, sb);\n\n    sb.Insert(3, xSByte);    // -11\n    Show(18, sb);\n//\n    }\n\n    public static void Show(int overloadNumber, StringBuilder sbs)\n    {\n    Console.WriteLine(&quot;{0,2:G} = {1}&quot;, overloadNumber, sbs.ToString());\n    sb = new StringBuilder(initialValue);\n    }\n}\n/*\nThis example produces the following results:\n\nStringBuilder.Insert method\n 1 = --[xyzxyz]--\n 2 = --[xyz]--\n 3 = --[*]--\n 4 = --[abc]--\n 5 = --[bc]--\n 6 = --[True]--\n 7 = --[0]--\n 8 = --[1]--\n 9 = --[2]--\n10 = --[3]--\n11 = --[4]--\n12 = --[5]--\n13 = --[6.6]--\n14 = --[7.7]--\n15 = --[8]--\n16 = --[9]--\n17 = --[10]--\n18 = --[-11]--\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"stringbuilder.insert#1\">Imports System\nImports System.Text\n\nClass Sample\n   &#39;                                 index: 012345\n   Private Shared initialValue As String = &quot;--[]--&quot;\n   Private Shared sb As StringBuilder\n   \n   Public Shared Sub Main()\n      Dim xyz As String = &quot;xyz&quot;\n      Dim abc As Char() =  {&quot;a&quot;c, &quot;b&quot;c, &quot;c&quot;c}\n      Dim star As Char = &quot;*&quot;c\n      Dim obj As [Object] = 0\n      \n      Dim xBool As Boolean = True\n      Dim xByte As Byte = 1\n      Dim xInt16 As Short = 2\n      Dim xInt32 As Integer = 3\n      Dim xInt64 As Long = 4\n      Dim xDecimal As [Decimal] = 5\n      Dim xSingle As Single = 6.6F\n      Dim xDouble As Double = 7.7\n      \n      &#39; The following types are not CLS-compliant.\n      &#39; Dim xUInt16 As System.UInt16 = 8 \n      &#39; Dim xUInt32 As System.UInt32 = 9\n      &#39; Dim xUInt64 As System.UInt64 = 10 \n      &#39; Dim xSByte As System.SByte = - 11\n      &#39;\n      Console.WriteLine(&quot;StringBuilder.Insert method&quot;)\n      sb = New StringBuilder(initialValue)\n      \n      sb.Insert(3, xyz, 2)\n      Show(1, sb)\n      \n      sb.Insert(3, xyz)\n      Show(2, sb)\n      \n      sb.Insert(3, star)\n      Show(3, sb)\n      \n      sb.Insert(3, abc)\n      Show(4, sb)\n      \n      sb.Insert(3, abc, 1, 2)\n      Show(5, sb)\n      \n      sb.Insert(3, xBool)     &#39; True\n      Show(6, sb)\n      \n      sb.Insert(3, obj)       &#39; 0\n      Show(7, sb)\n      \n      sb.Insert(3, xByte)     &#39; 1\n      Show(8, sb)\n      \n      sb.Insert(3, xInt16)    &#39; 2\n      Show(9, sb)\n      \n      sb.Insert(3, xInt32)    &#39; 3\n      Show(10, sb)\n      \n      sb.Insert(3, xInt64)    &#39; 4\n      Show(11, sb)\n      \n      sb.Insert(3, xDecimal)  &#39; 5\n      Show(12, sb)\n      \n      sb.Insert(3, xSingle)   &#39; 6.6\n      Show(13, sb)\n      \n      sb.Insert(3, xDouble)   &#39; 7.7\n      Show(14, sb)\n      \n      &#39; The following Insert methods are not CLS-compliant.\n      &#39; sb.Insert(3, xUInt16) &#39; 8\n      &#39; sb.Insert(3, xUInt32) &#39; 9\n      &#39; sb.Insert(3, xUInt64) &#39; 10\n      &#39; sb.Insert(3, xSByte)  &#39; -11\n\n   End Sub &#39;Main\n   \n   Public Shared Sub Show(overloadNumber As Integer, sbs As StringBuilder)\n      Console.WriteLine(&quot;{0,2:G} = {1}&quot;, overloadNumber, sbs.ToString())\n      sb = New StringBuilder(initialValue)\n   End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;StringBuilder.Insert method\n&#39; 1 = --[xyzxyz]--\n&#39; 2 = --[xyz]--\n&#39; 3 = --[*]--\n&#39; 4 = --[abc]--\n&#39; 5 = --[bc]--\n&#39; 6 = --[True]--\n&#39; 7 = --[0]--\n&#39; 8 = --[1]--\n&#39; 9 = --[2]--\n&#39;10 = --[3]--\n&#39;11 = --[4]--\n&#39;12 = --[5]--\n&#39;13 = --[6.6]--\n&#39;14 = --[7.7]--\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Insert_System_Int32_System_Char___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Insert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Insert(Int32,Char[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Inserts the string representation of a specified subarray of Unicode characters into this instance at the specified character position.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Insert (int index, char[] value, int startIndex, int charCount);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position in this instance where insertion begins.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A character array.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting index within <code>value</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>charCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters to insert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the insert operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>, and <code>startIndex</code> and <code>charCount</code> are not zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code>, <code>startIndex</code>, or <code>charCount</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> is greater than the length of this instance.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> plus <code>charCount</code> is not a position within <code>value</code>.  </p>\n<p> -or-  </p>\n<p> Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Insert_\" data-linktype=\"relative-path\">Insert</a> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"stringbuilder.insert#1\">using namespace System;\nusing namespace System::Text;\nref class Sample\n{\nprivate:\n\n   //                           index: 012345\n   static String^ initialValue = &quot;--[]--&quot;;\n   static StringBuilder^ sb;\n\npublic:\n   static void Main()\n   {\n      String^ xyz = &quot;xyz&quot;;\n      array&lt;Char&gt;^abc = {&#39;a&#39;,&#39;b&#39;,&#39;c&#39;};\n      Char star = &#39;*&#39;;\n      Object^ obj = 0;\n      bool xBool = true;\n      Byte xByte = 1;\n      short xInt16 = 2;\n      int xInt32 = 3;\n      long xInt64 = 4;\n      Decimal xDecimal = 5;\n      float xSingle = 6.6F;\n      double xDouble = 7.7;\n      \n      // The following types are not CLS-compliant.\n      UInt16 xUInt16 = 8;\n      UInt32 xUInt32 = 9;\n      UInt64 xUInt64 = 10;\n      SByte xSByte = -11;\n      \n      //\n      Console::WriteLine( &quot;StringBuilder.Insert method&quot; );\n      sb = gcnew StringBuilder( initialValue );\n      sb-&gt;Insert( 3, xyz, 2 );\n      Show( 1, sb );\n      sb-&gt;Insert( 3, xyz );\n      Show( 2, sb );\n      sb-&gt;Insert( 3, star );\n      Show( 3, sb );\n      sb-&gt;Insert( 3, abc );\n      Show( 4, sb );\n      sb-&gt;Insert( 3, abc, 1, 2 );\n      Show( 5, sb );\n      sb-&gt;Insert( 3, xBool ); // True\n      Show( 6, sb );\n      sb-&gt;Insert( 3, obj ); // 0\n      Show( 7, sb );\n      sb-&gt;Insert( 3, xByte ); // 1\n      Show( 8, sb );\n      sb-&gt;Insert( 3, xInt16 ); // 2\n      Show( 9, sb );\n      sb-&gt;Insert( 3, xInt32 ); // 3\n      Show( 10, sb );\n      sb-&gt;Insert( 3, xInt64 ); // 4\n      Show( 11, sb );\n      sb-&gt;Insert( 3, xDecimal ); // 5\n      Show( 12, sb );\n      sb-&gt;Insert( 3, xSingle ); // 6.6\n      Show( 13, sb );\n      sb-&gt;Insert( 3, xDouble ); // 7.7\n      Show( 14, sb );\n      \n      // The following Insert methods are not CLS-compliant.\n      sb-&gt;Insert( 3, xUInt16 ); // 8\n      Show( 15, sb );\n      sb-&gt;Insert( 3, xUInt32 ); // 9\n      Show( 16, sb );\n      sb-&gt;Insert( 3, xUInt64 ); // 10\n      Show( 17, sb );\n      sb-&gt;Insert( 3, xSByte ); // -11\n      Show( 18, sb );\n      \n      //\n   }\n\n   static void Show( int overloadNumber, StringBuilder^ sbs )\n   {\n      Console::WriteLine( &quot;{0,2:G} = {1}&quot;, overloadNumber, sbs );\n      sb = gcnew StringBuilder( initialValue );\n   }\n\n};\n\nint main()\n{\n   Sample::Main();\n}\n\n/*\nThis example produces the following results:\n\nStringBuilder.Insert method\n 1 = --[xyzxyz]--\n 2 = --[xyz]--\n 3 = --[*]--\n 4 = --[abc]--\n 5 = --[bc]--\n 6 = --[True]--\n 7 = --[0]--\n 8 = --[1]--\n 9 = --[2]--\n10 = --[3]--\n11 = --[4]--\n12 = --[5]--\n13 = --[6.6]--\n14 = --[7.7]--\n15 = --[8]--\n16 = --[9]--\n17 = --[10]--\n18 = --[-11]--\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"stringbuilder.insert#1\">using System;\nusing System.Text;\n\nclass Sample \n{\n//                         index: 012345\n    static string initialValue = &quot;--[]--&quot;;\n    static StringBuilder sb;\n\n    public static void Main() \n    {\n    string      xyz       = &quot;xyz&quot;;\n    char[]      abc       = {&#39;a&#39;, &#39;b&#39;, &#39;c&#39;};\n    char        star      = &#39;*&#39;;\n    Object \tobj       = 0;\n\n    bool        xBool     = true;\n    byte        xByte     = 1;\n    short       xInt16    = 2;\n    int         xInt32    = 3;\n    long        xInt64    = 4;\n    Decimal     xDecimal  = 5;\n    float       xSingle   = 6.6F;\n    double      xDouble   = 7.7;\n\n// The following types are not CLS-compliant.\n    ushort      xUInt16   = 8;\n    uint        xUInt32   = 9;\n    ulong       xUInt64   = 10;\n    sbyte       xSByte    = -11;\n//\n    Console.WriteLine(&quot;StringBuilder.Insert method&quot;);\n    sb = new StringBuilder(initialValue);\n\n    sb.Insert(3, xyz, 2);\n    Show(1, sb);\n\n    sb.Insert(3, xyz);\n    Show(2, sb);\n\n    sb.Insert(3, star);\n    Show(3, sb);\n\n    sb.Insert(3, abc);\n    Show(4, sb);\n\n    sb.Insert(3, abc, 1, 2);\n    Show(5, sb);\n\n    sb.Insert(3, xBool);     // True\n    Show(6, sb);\n\n    sb.Insert(3, obj);       // 0\n    Show(7, sb);\n\n    sb.Insert(3, xByte);     // 1\n    Show(8, sb);\n\n    sb.Insert(3, xInt16);    // 2\n    Show(9, sb);\n\n    sb.Insert(3, xInt32);    // 3\n    Show(10, sb);\n\n    sb.Insert(3, xInt64);    // 4\n    Show(11, sb);\n\n    sb.Insert(3, xDecimal);  // 5\n    Show(12, sb);\n\n    sb.Insert(3, xSingle);   // 6.6\n    Show(13, sb);\n\n    sb.Insert(3, xDouble);   // 7.7\n    Show(14, sb);\n\n// The following Insert methods are not CLS-compliant.\n    sb.Insert(3, xUInt16);   // 8\n    Show(15, sb);\n\n    sb.Insert(3, xUInt32);   // 9\n    Show(16, sb);\n\n    sb.Insert(3, xUInt64);   // 10\n    Show(17, sb);\n\n    sb.Insert(3, xSByte);    // -11\n    Show(18, sb);\n//\n    }\n\n    public static void Show(int overloadNumber, StringBuilder sbs)\n    {\n    Console.WriteLine(&quot;{0,2:G} = {1}&quot;, overloadNumber, sbs.ToString());\n    sb = new StringBuilder(initialValue);\n    }\n}\n/*\nThis example produces the following results:\n\nStringBuilder.Insert method\n 1 = --[xyzxyz]--\n 2 = --[xyz]--\n 3 = --[*]--\n 4 = --[abc]--\n 5 = --[bc]--\n 6 = --[True]--\n 7 = --[0]--\n 8 = --[1]--\n 9 = --[2]--\n10 = --[3]--\n11 = --[4]--\n12 = --[5]--\n13 = --[6.6]--\n14 = --[7.7]--\n15 = --[8]--\n16 = --[9]--\n17 = --[10]--\n18 = --[-11]--\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"stringbuilder.insert#1\">Imports System\nImports System.Text\n\nClass Sample\n   &#39;                                 index: 012345\n   Private Shared initialValue As String = &quot;--[]--&quot;\n   Private Shared sb As StringBuilder\n   \n   Public Shared Sub Main()\n      Dim xyz As String = &quot;xyz&quot;\n      Dim abc As Char() =  {&quot;a&quot;c, &quot;b&quot;c, &quot;c&quot;c}\n      Dim star As Char = &quot;*&quot;c\n      Dim obj As [Object] = 0\n      \n      Dim xBool As Boolean = True\n      Dim xByte As Byte = 1\n      Dim xInt16 As Short = 2\n      Dim xInt32 As Integer = 3\n      Dim xInt64 As Long = 4\n      Dim xDecimal As [Decimal] = 5\n      Dim xSingle As Single = 6.6F\n      Dim xDouble As Double = 7.7\n      \n      &#39; The following types are not CLS-compliant.\n      &#39; Dim xUInt16 As System.UInt16 = 8 \n      &#39; Dim xUInt32 As System.UInt32 = 9\n      &#39; Dim xUInt64 As System.UInt64 = 10 \n      &#39; Dim xSByte As System.SByte = - 11\n      &#39;\n      Console.WriteLine(&quot;StringBuilder.Insert method&quot;)\n      sb = New StringBuilder(initialValue)\n      \n      sb.Insert(3, xyz, 2)\n      Show(1, sb)\n      \n      sb.Insert(3, xyz)\n      Show(2, sb)\n      \n      sb.Insert(3, star)\n      Show(3, sb)\n      \n      sb.Insert(3, abc)\n      Show(4, sb)\n      \n      sb.Insert(3, abc, 1, 2)\n      Show(5, sb)\n      \n      sb.Insert(3, xBool)     &#39; True\n      Show(6, sb)\n      \n      sb.Insert(3, obj)       &#39; 0\n      Show(7, sb)\n      \n      sb.Insert(3, xByte)     &#39; 1\n      Show(8, sb)\n      \n      sb.Insert(3, xInt16)    &#39; 2\n      Show(9, sb)\n      \n      sb.Insert(3, xInt32)    &#39; 3\n      Show(10, sb)\n      \n      sb.Insert(3, xInt64)    &#39; 4\n      Show(11, sb)\n      \n      sb.Insert(3, xDecimal)  &#39; 5\n      Show(12, sb)\n      \n      sb.Insert(3, xSingle)   &#39; 6.6\n      Show(13, sb)\n      \n      sb.Insert(3, xDouble)   &#39; 7.7\n      Show(14, sb)\n      \n      &#39; The following Insert methods are not CLS-compliant.\n      &#39; sb.Insert(3, xUInt16) &#39; 8\n      &#39; sb.Insert(3, xUInt32) &#39; 9\n      &#39; sb.Insert(3, xUInt64) &#39; 10\n      &#39; sb.Insert(3, xSByte)  &#39; -11\n\n   End Sub &#39;Main\n   \n   Public Shared Sub Show(overloadNumber As Integer, sbs As StringBuilder)\n      Console.WriteLine(&quot;{0,2:G} = {1}&quot;, overloadNumber, sbs.ToString())\n      sb = New StringBuilder(initialValue)\n   End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;StringBuilder.Insert method\n&#39; 1 = --[xyzxyz]--\n&#39; 2 = --[xyz]--\n&#39; 3 = --[*]--\n&#39; 4 = --[abc]--\n&#39; 5 = --[bc]--\n&#39; 6 = --[True]--\n&#39; 7 = --[0]--\n&#39; 8 = --[1]--\n&#39; 9 = --[2]--\n&#39;10 = --[3]--\n&#39;11 = --[4]--\n&#39;12 = --[5]--\n&#39;13 = --[6.6]--\n&#39;14 = --[7.7]--\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Remove_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Remove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Remove(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the specified range of characters from this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Remove (int startIndex, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters to remove.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance after the excise operation has completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>If <code>startIndex</code> or <code>length</code> is less than zero, or <code>startIndex</code> + <code>length</code> is greater than the length of this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The current method removes the specified range of characters from the current instance. The characters at (<code>startIndex</code> + <code>length</code>) are moved to <code>startIndex</code>, and the string value of the current instance is shortened by <code>length</code>. The capacity of the current instance is unaffected.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The Remove method modifies the value of the current <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> instance and returns that instance. It does not create and return a new <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the Remove method.  </p>\n<pre><code class=\"lang-cs\" name=\"stringbuilder.remove#1\">using System;\nusing System.Text;\n\nclass Sample \n{\n    public static void Main() \n    {\n    string rule1 = &quot;0----+----1----+----2----+----3----+----4---&quot;;\n    string rule2 = &quot;01234567890123456789012345678901234567890123&quot;;\n    string str =   &quot;The quick brown fox jumps over the lazy dog.&quot;;\n    StringBuilder sb = new StringBuilder(str);\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;StringBuilder.Remove method&quot;);\n    Console.WriteLine();\n    Console.WriteLine(&quot;Original value:&quot;);\n    Console.WriteLine(rule1);\n    Console.WriteLine(rule2);\n    Console.WriteLine(&quot;{0}&quot;, sb.ToString());\n    Console.WriteLine();\n\n    sb.Remove(10, 6); // Remove &quot;brown &quot;\n\n    Console.WriteLine(&quot;New value:&quot;);\n    Console.WriteLine(rule1);\n    Console.WriteLine(rule2);\n    Console.WriteLine(&quot;{0}&quot;, sb.ToString());\n    }\n}\n/*\nThis example produces the following results:\n\nStringBuilder.Remove method\n\nOriginal value:\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick brown fox jumps over the lazy dog.\n\nNew value:\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick fox jumps over the lazy dog.\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"stringbuilder.remove#1\">using namespace System;\nusing namespace System::Text;\nint main()\n{\n   String^ rule1 = &quot;0----+----1----+----2----+----3----+----4---&quot;;\n   String^ rule2 = &quot;01234567890123456789012345678901234567890123&quot;;\n   String^ str = &quot;The quick brown fox jumps over the lazy dog.&quot;;\n   StringBuilder^ sb = gcnew StringBuilder( str );\n   Console::WriteLine();\n   Console::WriteLine( &quot;StringBuilder.Remove method&quot; );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Original value:&quot; );\n   Console::WriteLine( rule1 );\n   Console::WriteLine( rule2 );\n   Console::WriteLine( &quot;{0}&quot;, sb );\n   Console::WriteLine();\n   sb-&gt;Remove( 10, 6 ); // Remove &quot;brown &quot;\n   Console::WriteLine( &quot;New value:&quot; );\n   Console::WriteLine( rule1 );\n   Console::WriteLine( rule2 );\n   Console::WriteLine( &quot;{0}&quot;, sb );\n}\n\n/*\nThis example produces the following results:\n\nStringBuilder.Remove method\n\nOriginal value:\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick brown fox jumps over the lazy dog.\n\nNew value:\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick fox jumps over the lazy dog.\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"stringbuilder.remove#1\">Imports System\nImports System.Text\n\nClass Sample\n   Public Shared Sub Main()\n      Dim rule1 As String = &quot;0----+----1----+----2----+----3----+----4---&quot;\n      Dim rule2 As String = &quot;01234567890123456789012345678901234567890123&quot;\n      Dim str As String   = &quot;The quick brown fox jumps over the lazy dog.&quot;\n      Dim sb As New StringBuilder(str)\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;StringBuilder.Remove method&quot;)\n      Console.WriteLine()\n      Console.WriteLine(&quot;Original value:&quot;)\n      Console.WriteLine(rule1)\n      Console.WriteLine(rule2)\n      Console.WriteLine(&quot;{0}&quot;, sb.ToString())\n      Console.WriteLine()\n      \n      sb.Remove(10, 6) &#39; Remove &quot;brown &quot;\n\n      Console.WriteLine(&quot;New value:&quot;)\n      Console.WriteLine(rule1)\n      Console.WriteLine(rule2)\n      Console.WriteLine(&quot;{0}&quot;, sb.ToString())\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;StringBuilder.Remove method\n&#39;\n&#39;Original value:\n&#39;0----+----1----+----2----+----3----+----4---\n&#39;01234567890123456789012345678901234567890123\n&#39;The quick brown fox jumps over the lazy dog.\n&#39;\n&#39;New value:\n&#39;0----+----1----+----2----+----3----+----4---\n&#39;01234567890123456789012345678901234567890123\n&#39;The quick fox jumps over the lazy dog.\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Replace_System_Char_System_Char_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Replace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Replace(Char,Char)</div>        \r\n          </div>\r\n    \r\n            <p>Replaces all occurrences of a specified character in this instance with another specified character.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Replace (char oldChar, char newChar);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>oldChar</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character to replace.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>newChar</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character that replaces <code>oldChar</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance with <code>oldChar</code> replaced by <code>newChar</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method performs an ordinal, case-sensitive comparison to identify occurrences of <code>oldChar</code> in the current instance. The size of the current <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> instance is unchanged after the replacement.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Replace_\" data-linktype=\"relative-path\">Replace</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"stringbuilder.replace#1\">using System;\nusing System.Text;\n\nclass Sample \n{\n    public static void Main() \n    {\n//                0----+----1----+----2----+----3----+----4---\n//                01234567890123456789012345678901234567890123\n    string str = &quot;The quick br!wn d#g jumps #ver the lazy cat.&quot;;\n    StringBuilder sb = new StringBuilder(str);\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;StringBuilder.Replace method&quot;);\n    Console.WriteLine();\n\n    Console.WriteLine(&quot;Original value:&quot;);\n    Show(sb);\n\n    sb.Replace(&#39;#&#39;, &#39;!&#39;, 15, 29);        // Some &#39;#&#39; -&gt; &#39;!&#39;\n    Show(sb);\n    sb.Replace(&#39;!&#39;, &#39;o&#39;);                // All &#39;!&#39; -&gt; &#39;o&#39;\n    Show(sb);\n    sb.Replace(&quot;cat&quot;, &quot;dog&quot;);            // All &quot;cat&quot; -&gt; &quot;dog&quot;\n    Show(sb);\n    sb.Replace(&quot;dog&quot;, &quot;fox&quot;, 15, 20);    // Some &quot;dog&quot; -&gt; &quot;fox&quot;\n\n    Console.WriteLine(&quot;Final value:&quot;);\n    Show(sb);\n    }\n\n    public static void Show(StringBuilder sbs)\n    {\n    string rule1 = &quot;0----+----1----+----2----+----3----+----4---&quot;;\n    string rule2 = &quot;01234567890123456789012345678901234567890123&quot;;\n\n    Console.WriteLine(rule1);\n    Console.WriteLine(rule2);\n    Console.WriteLine(&quot;{0}&quot;, sbs.ToString());\n    Console.WriteLine();\n    }\n}\n/*\nThis example produces the following results:\n\nStringBuilder.Replace method\n\nOriginal value:\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick br!wn d#g jumps #ver the lazy cat.\n\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick br!wn d!g jumps !ver the lazy cat.\n\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick brown dog jumps over the lazy cat.\n\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick brown dog jumps over the lazy dog.\n\nFinal value:\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick brown fox jumps over the lazy dog.\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"stringbuilder.replace#1\">Imports System\nImports System.Text\n\nClass Sample\n   Public Shared Sub Main()\n      &#39;                    0----+----1----+----2----+----3----+----4---\n      &#39;                    01234567890123456789012345678901234567890123\n      Dim str As String = &quot;The quick br!wn d#g jumps #ver the lazy cat.&quot;\n      Dim sb As New StringBuilder(str)\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;StringBuilder.Replace method&quot;)\n      Console.WriteLine()\n      \n      Console.WriteLine(&quot;Original value:&quot;)\n      Show(sb)\n      \n      sb.Replace(&quot;#&quot;c, &quot;!&quot;c, 15, 29)   &#39; Some &#39;#&#39; -&gt; &#39;!&#39;\n      Show(sb)\n      sb.Replace(&quot;!&quot;c, &quot;o&quot;c)           &#39; All &#39;!&#39; -&gt; &#39;o&#39;\n      Show(sb)\n      sb.Replace(&quot;cat&quot;, &quot;dog&quot;)         &#39; All &quot;cat&quot; -&gt; &quot;dog&quot;\n      Show(sb)\n      sb.Replace(&quot;dog&quot;, &quot;fox&quot;, 15, 20) &#39; Some &quot;dog&quot; -&gt; &quot;fox&quot;\n      Console.WriteLine(&quot;Final value:&quot;)\n      Show(sb)\n   End Sub &#39;Main\n   \n   Public Shared Sub Show(sbs As StringBuilder)\n      Dim rule1 As String = &quot;0----+----1----+----2----+----3----+----4---&quot;\n      Dim rule2 As String = &quot;01234567890123456789012345678901234567890123&quot;\n      \n      Console.WriteLine(rule1)\n      Console.WriteLine(rule2)\n      Console.WriteLine(&quot;{0}&quot;, sbs.ToString())\n      Console.WriteLine()\n   End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;StringBuilder.Replace method\n&#39;\n&#39;Original value:\n&#39;0----+----1----+----2----+----3----+----4---\n&#39;01234567890123456789012345678901234567890123\n&#39;The quick br!wn d#g jumps #ver the lazy cat.\n&#39;\n&#39;0----+----1----+----2----+----3----+----4---\n&#39;01234567890123456789012345678901234567890123\n&#39;The quick br!wn d!g jumps !ver the lazy cat.\n&#39;\n&#39;0----+----1----+----2----+----3----+----4---\n&#39;01234567890123456789012345678901234567890123\n&#39;The quick brown dog jumps over the lazy cat.\n&#39;\n&#39;0----+----1----+----2----+----3----+----4---\n&#39;01234567890123456789012345678901234567890123\n&#39;The quick brown dog jumps over the lazy dog.\n&#39;\n&#39;Final value:\n&#39;0----+----1----+----2----+----3----+----4---\n&#39;01234567890123456789012345678901234567890123\n&#39;The quick brown fox jumps over the lazy dog.\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"stringbuilder.replace#1\">using namespace System;\nusing namespace System::Text;\nvoid Show( StringBuilder^ sbs )\n{\n   String^ rule1 = &quot;0----+----1----+----2----+----3----+----4---&quot;;\n   String^ rule2 = &quot;01234567890123456789012345678901234567890123&quot;;\n   Console::WriteLine( rule1 );\n   Console::WriteLine( rule2 );\n   Console::WriteLine( &quot;{0}&quot;, sbs );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   //                  0----+----1----+----2----+----3----+----4---\n   //                  01234567890123456789012345678901234567890123\n   String^ str = &quot;The quick br!wn d#g jumps #ver the lazy cat.&quot;;\n   StringBuilder^ sb = gcnew StringBuilder( str );\n   Console::WriteLine();\n   Console::WriteLine( &quot;StringBuilder.Replace method&quot; );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Original value:&quot; );\n   Show( sb );\n   sb-&gt;Replace( &#39;#&#39;, &#39;!&#39;, 15, 29 ); // Some &#39;#&#39; -&gt; &#39;!&#39;\n   Show( sb );\n   sb-&gt;Replace( &#39;!&#39;, &#39;o&#39; ); // All &#39;!&#39; -&gt; &#39;o&#39;\n   Show( sb );\n   sb-&gt;Replace( &quot;cat&quot;, &quot;dog&quot; ); // All &quot;cat&quot; -&gt; &quot;dog&quot;\n   Show( sb );\n   sb-&gt;Replace( &quot;dog&quot;, &quot;fox&quot;, 15, 20 ); // Some &quot;dog&quot; -&gt; &quot;fox&quot;\n   Console::WriteLine( &quot;Final value:&quot; );\n   Show( sb );\n}\n\n/*\nThis example produces the following results:\n\nStringBuilder.Replace method\n\nOriginal value:\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick br!wn d#g jumps #ver the lazy cat.\n\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick br!wn d!g jumps !ver the lazy cat.\n\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick brown dog jumps over the lazy cat.\n\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick brown dog jumps over the lazy dog.\n\nFinal value:\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick brown fox jumps over the lazy dog.\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Replace_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Replace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Replace(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Replaces all occurrences of a specified string in this instance with another specified string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Replace (string oldValue, string newValue);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>oldValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to replace.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>newValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string that replaces <code>oldValue</code>, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance with all instances of <code>oldValue</code> replaced by <code>newValue</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>oldValue</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>oldValue</code> is zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method performs an ordinal, case-sensitive comparison to identify occurrences of <code>oldValue</code> in the current instance. If <code>newValue</code> is <code>null</code>or<a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>, all occurrences of <code>oldValue</code> are removed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Replace_\" data-linktype=\"relative-path\">Replace</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"stringbuilder.replace#1\">using System;\nusing System.Text;\n\nclass Sample \n{\n    public static void Main() \n    {\n//                0----+----1----+----2----+----3----+----4---\n//                01234567890123456789012345678901234567890123\n    string str = &quot;The quick br!wn d#g jumps #ver the lazy cat.&quot;;\n    StringBuilder sb = new StringBuilder(str);\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;StringBuilder.Replace method&quot;);\n    Console.WriteLine();\n\n    Console.WriteLine(&quot;Original value:&quot;);\n    Show(sb);\n\n    sb.Replace(&#39;#&#39;, &#39;!&#39;, 15, 29);        // Some &#39;#&#39; -&gt; &#39;!&#39;\n    Show(sb);\n    sb.Replace(&#39;!&#39;, &#39;o&#39;);                // All &#39;!&#39; -&gt; &#39;o&#39;\n    Show(sb);\n    sb.Replace(&quot;cat&quot;, &quot;dog&quot;);            // All &quot;cat&quot; -&gt; &quot;dog&quot;\n    Show(sb);\n    sb.Replace(&quot;dog&quot;, &quot;fox&quot;, 15, 20);    // Some &quot;dog&quot; -&gt; &quot;fox&quot;\n\n    Console.WriteLine(&quot;Final value:&quot;);\n    Show(sb);\n    }\n\n    public static void Show(StringBuilder sbs)\n    {\n    string rule1 = &quot;0----+----1----+----2----+----3----+----4---&quot;;\n    string rule2 = &quot;01234567890123456789012345678901234567890123&quot;;\n\n    Console.WriteLine(rule1);\n    Console.WriteLine(rule2);\n    Console.WriteLine(&quot;{0}&quot;, sbs.ToString());\n    Console.WriteLine();\n    }\n}\n/*\nThis example produces the following results:\n\nStringBuilder.Replace method\n\nOriginal value:\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick br!wn d#g jumps #ver the lazy cat.\n\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick br!wn d!g jumps !ver the lazy cat.\n\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick brown dog jumps over the lazy cat.\n\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick brown dog jumps over the lazy dog.\n\nFinal value:\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick brown fox jumps over the lazy dog.\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"stringbuilder.replace#1\">Imports System\nImports System.Text\n\nClass Sample\n   Public Shared Sub Main()\n      &#39;                    0----+----1----+----2----+----3----+----4---\n      &#39;                    01234567890123456789012345678901234567890123\n      Dim str As String = &quot;The quick br!wn d#g jumps #ver the lazy cat.&quot;\n      Dim sb As New StringBuilder(str)\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;StringBuilder.Replace method&quot;)\n      Console.WriteLine()\n      \n      Console.WriteLine(&quot;Original value:&quot;)\n      Show(sb)\n      \n      sb.Replace(&quot;#&quot;c, &quot;!&quot;c, 15, 29)   &#39; Some &#39;#&#39; -&gt; &#39;!&#39;\n      Show(sb)\n      sb.Replace(&quot;!&quot;c, &quot;o&quot;c)           &#39; All &#39;!&#39; -&gt; &#39;o&#39;\n      Show(sb)\n      sb.Replace(&quot;cat&quot;, &quot;dog&quot;)         &#39; All &quot;cat&quot; -&gt; &quot;dog&quot;\n      Show(sb)\n      sb.Replace(&quot;dog&quot;, &quot;fox&quot;, 15, 20) &#39; Some &quot;dog&quot; -&gt; &quot;fox&quot;\n      Console.WriteLine(&quot;Final value:&quot;)\n      Show(sb)\n   End Sub &#39;Main\n   \n   Public Shared Sub Show(sbs As StringBuilder)\n      Dim rule1 As String = &quot;0----+----1----+----2----+----3----+----4---&quot;\n      Dim rule2 As String = &quot;01234567890123456789012345678901234567890123&quot;\n      \n      Console.WriteLine(rule1)\n      Console.WriteLine(rule2)\n      Console.WriteLine(&quot;{0}&quot;, sbs.ToString())\n      Console.WriteLine()\n   End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;StringBuilder.Replace method\n&#39;\n&#39;Original value:\n&#39;0----+----1----+----2----+----3----+----4---\n&#39;01234567890123456789012345678901234567890123\n&#39;The quick br!wn d#g jumps #ver the lazy cat.\n&#39;\n&#39;0----+----1----+----2----+----3----+----4---\n&#39;01234567890123456789012345678901234567890123\n&#39;The quick br!wn d!g jumps !ver the lazy cat.\n&#39;\n&#39;0----+----1----+----2----+----3----+----4---\n&#39;01234567890123456789012345678901234567890123\n&#39;The quick brown dog jumps over the lazy cat.\n&#39;\n&#39;0----+----1----+----2----+----3----+----4---\n&#39;01234567890123456789012345678901234567890123\n&#39;The quick brown dog jumps over the lazy dog.\n&#39;\n&#39;Final value:\n&#39;0----+----1----+----2----+----3----+----4---\n&#39;01234567890123456789012345678901234567890123\n&#39;The quick brown fox jumps over the lazy dog.\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"stringbuilder.replace#1\">using namespace System;\nusing namespace System::Text;\nvoid Show( StringBuilder^ sbs )\n{\n   String^ rule1 = &quot;0----+----1----+----2----+----3----+----4---&quot;;\n   String^ rule2 = &quot;01234567890123456789012345678901234567890123&quot;;\n   Console::WriteLine( rule1 );\n   Console::WriteLine( rule2 );\n   Console::WriteLine( &quot;{0}&quot;, sbs );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   //                  0----+----1----+----2----+----3----+----4---\n   //                  01234567890123456789012345678901234567890123\n   String^ str = &quot;The quick br!wn d#g jumps #ver the lazy cat.&quot;;\n   StringBuilder^ sb = gcnew StringBuilder( str );\n   Console::WriteLine();\n   Console::WriteLine( &quot;StringBuilder.Replace method&quot; );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Original value:&quot; );\n   Show( sb );\n   sb-&gt;Replace( &#39;#&#39;, &#39;!&#39;, 15, 29 ); // Some &#39;#&#39; -&gt; &#39;!&#39;\n   Show( sb );\n   sb-&gt;Replace( &#39;!&#39;, &#39;o&#39; ); // All &#39;!&#39; -&gt; &#39;o&#39;\n   Show( sb );\n   sb-&gt;Replace( &quot;cat&quot;, &quot;dog&quot; ); // All &quot;cat&quot; -&gt; &quot;dog&quot;\n   Show( sb );\n   sb-&gt;Replace( &quot;dog&quot;, &quot;fox&quot;, 15, 20 ); // Some &quot;dog&quot; -&gt; &quot;fox&quot;\n   Console::WriteLine( &quot;Final value:&quot; );\n   Show( sb );\n}\n\n/*\nThis example produces the following results:\n\nStringBuilder.Replace method\n\nOriginal value:\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick br!wn d#g jumps #ver the lazy cat.\n\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick br!wn d!g jumps !ver the lazy cat.\n\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick brown dog jumps over the lazy cat.\n\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick brown dog jumps over the lazy dog.\n\nFinal value:\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick brown fox jumps over the lazy dog.\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Replace_System_Char_System_Char_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Replace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Replace(Char,Char,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Replaces, within a substring of this instance, all occurrences of a specified character with another specified character.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Replace (char oldChar, char newChar, int startIndex, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>oldChar</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character to replace.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>newChar</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character that replaces <code>oldChar</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position in this instance where the substring begins.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The length of the substring.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance with <code>oldChar</code> replaced by <code>newChar</code> in the range from <code>startIndex</code> to <code>startIndex</code> + <code>count</code> -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> + <code>count</code> is greater than the length of the value of this instance.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> or <code>count</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method performs an ordinal, case-sensitive comparison to identify occurrences of <code>oldChar</code> in the current instance. The size of the current <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object is unchanged after the replacement.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Replace_\" data-linktype=\"relative-path\">Replace</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"stringbuilder.replace#1\">using System;\nusing System.Text;\n\nclass Sample \n{\n    public static void Main() \n    {\n//                0----+----1----+----2----+----3----+----4---\n//                01234567890123456789012345678901234567890123\n    string str = &quot;The quick br!wn d#g jumps #ver the lazy cat.&quot;;\n    StringBuilder sb = new StringBuilder(str);\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;StringBuilder.Replace method&quot;);\n    Console.WriteLine();\n\n    Console.WriteLine(&quot;Original value:&quot;);\n    Show(sb);\n\n    sb.Replace(&#39;#&#39;, &#39;!&#39;, 15, 29);        // Some &#39;#&#39; -&gt; &#39;!&#39;\n    Show(sb);\n    sb.Replace(&#39;!&#39;, &#39;o&#39;);                // All &#39;!&#39; -&gt; &#39;o&#39;\n    Show(sb);\n    sb.Replace(&quot;cat&quot;, &quot;dog&quot;);            // All &quot;cat&quot; -&gt; &quot;dog&quot;\n    Show(sb);\n    sb.Replace(&quot;dog&quot;, &quot;fox&quot;, 15, 20);    // Some &quot;dog&quot; -&gt; &quot;fox&quot;\n\n    Console.WriteLine(&quot;Final value:&quot;);\n    Show(sb);\n    }\n\n    public static void Show(StringBuilder sbs)\n    {\n    string rule1 = &quot;0----+----1----+----2----+----3----+----4---&quot;;\n    string rule2 = &quot;01234567890123456789012345678901234567890123&quot;;\n\n    Console.WriteLine(rule1);\n    Console.WriteLine(rule2);\n    Console.WriteLine(&quot;{0}&quot;, sbs.ToString());\n    Console.WriteLine();\n    }\n}\n/*\nThis example produces the following results:\n\nStringBuilder.Replace method\n\nOriginal value:\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick br!wn d#g jumps #ver the lazy cat.\n\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick br!wn d!g jumps !ver the lazy cat.\n\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick brown dog jumps over the lazy cat.\n\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick brown dog jumps over the lazy dog.\n\nFinal value:\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick brown fox jumps over the lazy dog.\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"stringbuilder.replace#1\">Imports System\nImports System.Text\n\nClass Sample\n   Public Shared Sub Main()\n      &#39;                    0----+----1----+----2----+----3----+----4---\n      &#39;                    01234567890123456789012345678901234567890123\n      Dim str As String = &quot;The quick br!wn d#g jumps #ver the lazy cat.&quot;\n      Dim sb As New StringBuilder(str)\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;StringBuilder.Replace method&quot;)\n      Console.WriteLine()\n      \n      Console.WriteLine(&quot;Original value:&quot;)\n      Show(sb)\n      \n      sb.Replace(&quot;#&quot;c, &quot;!&quot;c, 15, 29)   &#39; Some &#39;#&#39; -&gt; &#39;!&#39;\n      Show(sb)\n      sb.Replace(&quot;!&quot;c, &quot;o&quot;c)           &#39; All &#39;!&#39; -&gt; &#39;o&#39;\n      Show(sb)\n      sb.Replace(&quot;cat&quot;, &quot;dog&quot;)         &#39; All &quot;cat&quot; -&gt; &quot;dog&quot;\n      Show(sb)\n      sb.Replace(&quot;dog&quot;, &quot;fox&quot;, 15, 20) &#39; Some &quot;dog&quot; -&gt; &quot;fox&quot;\n      Console.WriteLine(&quot;Final value:&quot;)\n      Show(sb)\n   End Sub &#39;Main\n   \n   Public Shared Sub Show(sbs As StringBuilder)\n      Dim rule1 As String = &quot;0----+----1----+----2----+----3----+----4---&quot;\n      Dim rule2 As String = &quot;01234567890123456789012345678901234567890123&quot;\n      \n      Console.WriteLine(rule1)\n      Console.WriteLine(rule2)\n      Console.WriteLine(&quot;{0}&quot;, sbs.ToString())\n      Console.WriteLine()\n   End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;StringBuilder.Replace method\n&#39;\n&#39;Original value:\n&#39;0----+----1----+----2----+----3----+----4---\n&#39;01234567890123456789012345678901234567890123\n&#39;The quick br!wn d#g jumps #ver the lazy cat.\n&#39;\n&#39;0----+----1----+----2----+----3----+----4---\n&#39;01234567890123456789012345678901234567890123\n&#39;The quick br!wn d!g jumps !ver the lazy cat.\n&#39;\n&#39;0----+----1----+----2----+----3----+----4---\n&#39;01234567890123456789012345678901234567890123\n&#39;The quick brown dog jumps over the lazy cat.\n&#39;\n&#39;0----+----1----+----2----+----3----+----4---\n&#39;01234567890123456789012345678901234567890123\n&#39;The quick brown dog jumps over the lazy dog.\n&#39;\n&#39;Final value:\n&#39;0----+----1----+----2----+----3----+----4---\n&#39;01234567890123456789012345678901234567890123\n&#39;The quick brown fox jumps over the lazy dog.\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"stringbuilder.replace#1\">using namespace System;\nusing namespace System::Text;\nvoid Show( StringBuilder^ sbs )\n{\n   String^ rule1 = &quot;0----+----1----+----2----+----3----+----4---&quot;;\n   String^ rule2 = &quot;01234567890123456789012345678901234567890123&quot;;\n   Console::WriteLine( rule1 );\n   Console::WriteLine( rule2 );\n   Console::WriteLine( &quot;{0}&quot;, sbs );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   //                  0----+----1----+----2----+----3----+----4---\n   //                  01234567890123456789012345678901234567890123\n   String^ str = &quot;The quick br!wn d#g jumps #ver the lazy cat.&quot;;\n   StringBuilder^ sb = gcnew StringBuilder( str );\n   Console::WriteLine();\n   Console::WriteLine( &quot;StringBuilder.Replace method&quot; );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Original value:&quot; );\n   Show( sb );\n   sb-&gt;Replace( &#39;#&#39;, &#39;!&#39;, 15, 29 ); // Some &#39;#&#39; -&gt; &#39;!&#39;\n   Show( sb );\n   sb-&gt;Replace( &#39;!&#39;, &#39;o&#39; ); // All &#39;!&#39; -&gt; &#39;o&#39;\n   Show( sb );\n   sb-&gt;Replace( &quot;cat&quot;, &quot;dog&quot; ); // All &quot;cat&quot; -&gt; &quot;dog&quot;\n   Show( sb );\n   sb-&gt;Replace( &quot;dog&quot;, &quot;fox&quot;, 15, 20 ); // Some &quot;dog&quot; -&gt; &quot;fox&quot;\n   Console::WriteLine( &quot;Final value:&quot; );\n   Show( sb );\n}\n\n/*\nThis example produces the following results:\n\nStringBuilder.Replace method\n\nOriginal value:\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick br!wn d#g jumps #ver the lazy cat.\n\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick br!wn d!g jumps !ver the lazy cat.\n\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick brown dog jumps over the lazy cat.\n\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick brown dog jumps over the lazy dog.\n\nFinal value:\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick brown fox jumps over the lazy dog.\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_Replace_System_String_System_String_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_Replace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Replace(String,String,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Replaces, within a substring of this instance, all occurrences of a specified string with another specified string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.StringBuilder Replace (string oldValue, string newValue, int startIndex, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>oldValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to replace.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>newValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string that replaces <code>oldValue</code>, or <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position in this instance where the substring begins.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The length of the substring.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></div>\r\n                  </div>\r\n                  <p>A reference to this instance with all instances of <code>oldValue</code> replaced by <code>newValue</code> in the range from <code>startIndex</code> to <code>startIndex</code> + <code>count</code> - 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>oldValue</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>oldValue</code> is zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> or <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> plus <code>count</code> indicates a character position not within this instance.  </p>\n<p> -or-  </p>\n<p> Enlarging the value of this instance would exceed <span class=\"xref\">stem.Text.StringBuilder.MaxCapacity*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method performs an ordinal, case-sensitive comparison to identify occurrences of <code>oldValue</code> in the specified substring. If <code>newValue</code> is <code>null</code>or<a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>, all occurrences of <code>oldValue</code> are removed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_Replace_\" data-linktype=\"relative-path\">Replace</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"stringbuilder.replace#1\">using System;\nusing System.Text;\n\nclass Sample \n{\n    public static void Main() \n    {\n//                0----+----1----+----2----+----3----+----4---\n//                01234567890123456789012345678901234567890123\n    string str = &quot;The quick br!wn d#g jumps #ver the lazy cat.&quot;;\n    StringBuilder sb = new StringBuilder(str);\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;StringBuilder.Replace method&quot;);\n    Console.WriteLine();\n\n    Console.WriteLine(&quot;Original value:&quot;);\n    Show(sb);\n\n    sb.Replace(&#39;#&#39;, &#39;!&#39;, 15, 29);        // Some &#39;#&#39; -&gt; &#39;!&#39;\n    Show(sb);\n    sb.Replace(&#39;!&#39;, &#39;o&#39;);                // All &#39;!&#39; -&gt; &#39;o&#39;\n    Show(sb);\n    sb.Replace(&quot;cat&quot;, &quot;dog&quot;);            // All &quot;cat&quot; -&gt; &quot;dog&quot;\n    Show(sb);\n    sb.Replace(&quot;dog&quot;, &quot;fox&quot;, 15, 20);    // Some &quot;dog&quot; -&gt; &quot;fox&quot;\n\n    Console.WriteLine(&quot;Final value:&quot;);\n    Show(sb);\n    }\n\n    public static void Show(StringBuilder sbs)\n    {\n    string rule1 = &quot;0----+----1----+----2----+----3----+----4---&quot;;\n    string rule2 = &quot;01234567890123456789012345678901234567890123&quot;;\n\n    Console.WriteLine(rule1);\n    Console.WriteLine(rule2);\n    Console.WriteLine(&quot;{0}&quot;, sbs.ToString());\n    Console.WriteLine();\n    }\n}\n/*\nThis example produces the following results:\n\nStringBuilder.Replace method\n\nOriginal value:\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick br!wn d#g jumps #ver the lazy cat.\n\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick br!wn d!g jumps !ver the lazy cat.\n\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick brown dog jumps over the lazy cat.\n\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick brown dog jumps over the lazy dog.\n\nFinal value:\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick brown fox jumps over the lazy dog.\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"stringbuilder.replace#1\">Imports System\nImports System.Text\n\nClass Sample\n   Public Shared Sub Main()\n      &#39;                    0----+----1----+----2----+----3----+----4---\n      &#39;                    01234567890123456789012345678901234567890123\n      Dim str As String = &quot;The quick br!wn d#g jumps #ver the lazy cat.&quot;\n      Dim sb As New StringBuilder(str)\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;StringBuilder.Replace method&quot;)\n      Console.WriteLine()\n      \n      Console.WriteLine(&quot;Original value:&quot;)\n      Show(sb)\n      \n      sb.Replace(&quot;#&quot;c, &quot;!&quot;c, 15, 29)   &#39; Some &#39;#&#39; -&gt; &#39;!&#39;\n      Show(sb)\n      sb.Replace(&quot;!&quot;c, &quot;o&quot;c)           &#39; All &#39;!&#39; -&gt; &#39;o&#39;\n      Show(sb)\n      sb.Replace(&quot;cat&quot;, &quot;dog&quot;)         &#39; All &quot;cat&quot; -&gt; &quot;dog&quot;\n      Show(sb)\n      sb.Replace(&quot;dog&quot;, &quot;fox&quot;, 15, 20) &#39; Some &quot;dog&quot; -&gt; &quot;fox&quot;\n      Console.WriteLine(&quot;Final value:&quot;)\n      Show(sb)\n   End Sub &#39;Main\n   \n   Public Shared Sub Show(sbs As StringBuilder)\n      Dim rule1 As String = &quot;0----+----1----+----2----+----3----+----4---&quot;\n      Dim rule2 As String = &quot;01234567890123456789012345678901234567890123&quot;\n      \n      Console.WriteLine(rule1)\n      Console.WriteLine(rule2)\n      Console.WriteLine(&quot;{0}&quot;, sbs.ToString())\n      Console.WriteLine()\n   End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;StringBuilder.Replace method\n&#39;\n&#39;Original value:\n&#39;0----+----1----+----2----+----3----+----4---\n&#39;01234567890123456789012345678901234567890123\n&#39;The quick br!wn d#g jumps #ver the lazy cat.\n&#39;\n&#39;0----+----1----+----2----+----3----+----4---\n&#39;01234567890123456789012345678901234567890123\n&#39;The quick br!wn d!g jumps !ver the lazy cat.\n&#39;\n&#39;0----+----1----+----2----+----3----+----4---\n&#39;01234567890123456789012345678901234567890123\n&#39;The quick brown dog jumps over the lazy cat.\n&#39;\n&#39;0----+----1----+----2----+----3----+----4---\n&#39;01234567890123456789012345678901234567890123\n&#39;The quick brown dog jumps over the lazy dog.\n&#39;\n&#39;Final value:\n&#39;0----+----1----+----2----+----3----+----4---\n&#39;01234567890123456789012345678901234567890123\n&#39;The quick brown fox jumps over the lazy dog.\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"stringbuilder.replace#1\">using namespace System;\nusing namespace System::Text;\nvoid Show( StringBuilder^ sbs )\n{\n   String^ rule1 = &quot;0----+----1----+----2----+----3----+----4---&quot;;\n   String^ rule2 = &quot;01234567890123456789012345678901234567890123&quot;;\n   Console::WriteLine( rule1 );\n   Console::WriteLine( rule2 );\n   Console::WriteLine( &quot;{0}&quot;, sbs );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   //                  0----+----1----+----2----+----3----+----4---\n   //                  01234567890123456789012345678901234567890123\n   String^ str = &quot;The quick br!wn d#g jumps #ver the lazy cat.&quot;;\n   StringBuilder^ sb = gcnew StringBuilder( str );\n   Console::WriteLine();\n   Console::WriteLine( &quot;StringBuilder.Replace method&quot; );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Original value:&quot; );\n   Show( sb );\n   sb-&gt;Replace( &#39;#&#39;, &#39;!&#39;, 15, 29 ); // Some &#39;#&#39; -&gt; &#39;!&#39;\n   Show( sb );\n   sb-&gt;Replace( &#39;!&#39;, &#39;o&#39; ); // All &#39;!&#39; -&gt; &#39;o&#39;\n   Show( sb );\n   sb-&gt;Replace( &quot;cat&quot;, &quot;dog&quot; ); // All &quot;cat&quot; -&gt; &quot;dog&quot;\n   Show( sb );\n   sb-&gt;Replace( &quot;dog&quot;, &quot;fox&quot;, 15, 20 ); // Some &quot;dog&quot; -&gt; &quot;fox&quot;\n   Console::WriteLine( &quot;Final value:&quot; );\n   Show( sb );\n}\n\n/*\nThis example produces the following results:\n\nStringBuilder.Replace method\n\nOriginal value:\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick br!wn d#g jumps #ver the lazy cat.\n\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick br!wn d!g jumps !ver the lazy cat.\n\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick brown dog jumps over the lazy cat.\n\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick brown dog jumps over the lazy dog.\n\nFinal value:\n0----+----1----+----2----+----3----+----4---\n01234567890123456789012345678901234567890123\nThe quick brown fox jumps over the lazy dog.\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_ToString\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of this instance to a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string whose value is the same as this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You must call the ToString method to convert the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object to a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object before you can pass the string represented by the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object to a method that has a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> parameter or display it in the user interface.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates calling the ToString method. This example is part of a larger example provided for the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"StringBuilder#5\">        // Display the number of characters in the StringBuilder and its string.\n        Console.WriteLine(&quot;{0} chars: {1}&quot;, sb.Length, sb.ToString());\n</code></pre><pre><code class=\"lang-cpp\" name=\"StringBuilder#5\">    // Display the number of characters in the StringBuilder\n    // and its string.\n    Console::WriteLine(&quot;{0} chars: {1}&quot;, sb-&gt;Length, sb-&gt;ToString());\n</code></pre><pre><code class=\"lang-vb\" name=\"StringBuilder#5\">        &#39; Display the number of characters in the StringBuilder and its string.\n        Console.WriteLine(&quot;{0} chars: {1}&quot;, sb.Length, sb.ToString())\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_ToString_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of a substring of this instance to a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToString (int startIndex, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting position of the substring in this instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The length of the substring.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string whose value is the same as the specified substring of this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> or <code>length</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> The sum of <code>startIndex</code> and <code>length</code> is greater than the length of the current instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You must call the <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_ToString_\" data-linktype=\"relative-path\">ToString</a> method to convert the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object to a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object before you can pass the string represented by the <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object to a method that has a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> parameter or display it in the user interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Text_StringBuilder_System_Runtime_Serialization_ISerializable_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_Text_StringBuilder_System_Runtime_Serialization_ISerializable_GetObjectData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ISerializable.GetObjectData(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Populates a <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> object with the data necessary to deserialize the current <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>info</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to populate with serialization information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The place to store and retrieve serialized data. Reserved for future use.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>info</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>context</code> parameter is reserved for future use and does not participate in this operation.  </p>\n<p> For more information, see the <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo#System_Runtime_Serialization_SerializationInfo_AddValue_System_String_System_Object_System_Type_\" data-linktype=\"relative-path\">System.Runtime.Serialization.SerializationInfo.AddValue(String,Object,Type)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Text.StringBuilder.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Text.StringBuilder.yml\">\r\n<meta name=\"APIName\" content=\"System.Text.StringBuilder\">\r\n<meta name=\"APIName\" content=\"System.Text.StringBuilder..ctor\">\r\n<meta name=\"APIName\" content=\"System.Text.StringBuilder.Append\">\r\n<meta name=\"APIName\" content=\"System.Text.StringBuilder.AppendFormat\">\r\n<meta name=\"APIName\" content=\"System.Text.StringBuilder.AppendLine\">\r\n<meta name=\"APIName\" content=\"System.Text.StringBuilder.Capacity\">\r\n<meta name=\"APIName\" content=\"System.Text.StringBuilder.Chars\">\r\n<meta name=\"APIName\" content=\"System.Text.StringBuilder.Clear\">\r\n<meta name=\"APIName\" content=\"System.Text.StringBuilder.CopyTo\">\r\n<meta name=\"APIName\" content=\"System.Text.StringBuilder.EnsureCapacity\">\r\n<meta name=\"APIName\" content=\"System.Text.StringBuilder.Equals\">\r\n<meta name=\"APIName\" content=\"System.Text.StringBuilder.Insert\">\r\n<meta name=\"APIName\" content=\"System.Text.StringBuilder.Length\">\r\n<meta name=\"APIName\" content=\"System.Text.StringBuilder.MaxCapacity\">\r\n<meta name=\"APIName\" content=\"System.Text.StringBuilder.Remove\">\r\n<meta name=\"APIName\" content=\"System.Text.StringBuilder.Replace\">\r\n<meta name=\"APIName\" content=\"System.Text.StringBuilder.ISerializable.GetObjectData\">\r\n<meta name=\"APIName\" content=\"System.Text.StringBuilder.ToString\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"811de5da-f730-8100-c717-900e95ad94b0\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Text\\StringBuilder.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a mutable string of characters. This class cannot be inherited.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Text/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Text.StringBuilder\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Text.StringBuilder.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Text.StringBuilder.yml","open_to_public_contributors":true,"api_name":["System.Text.StringBuilder","System.Text.StringBuilder..ctor","System.Text.StringBuilder.Append","System.Text.StringBuilder.AppendFormat","System.Text.StringBuilder.AppendLine","System.Text.StringBuilder.Capacity","System.Text.StringBuilder.Chars","System.Text.StringBuilder.Clear","System.Text.StringBuilder.CopyTo","System.Text.StringBuilder.EnsureCapacity","System.Text.StringBuilder.Equals","System.Text.StringBuilder.Insert","System.Text.StringBuilder.Length","System.Text.StringBuilder.MaxCapacity","System.Text.StringBuilder.Remove","System.Text.StringBuilder.Replace","System.Text.StringBuilder.ISerializable.GetObjectData","System.Text.StringBuilder.ToString"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Text.StringBuilder","System::Text::StringBuilder","System.Text.StringBuilder.#ctor","System::Text::StringBuilder::#ctor","System.Text.StringBuilder.Append","System::Text::StringBuilder::Append","System.Text.StringBuilder.AppendFormat","System::Text::StringBuilder::AppendFormat","System.Text.StringBuilder.AppendLine","System::Text::StringBuilder::AppendLine","System.Text.StringBuilder.Capacity","System::Text::StringBuilder::Capacity","System.Text.StringBuilder.Chars","System::Text::StringBuilder::Chars","System.Text.StringBuilder.Clear","System::Text::StringBuilder::Clear","System.Text.StringBuilder.CopyTo","System::Text::StringBuilder::CopyTo","System.Text.StringBuilder.EnsureCapacity","System::Text::StringBuilder::EnsureCapacity","System.Text.StringBuilder.Equals","System::Text::StringBuilder::Equals","System.Text.StringBuilder.Insert","System::Text::StringBuilder::Insert","System.Text.StringBuilder.Length","System::Text::StringBuilder::Length","System.Text.StringBuilder.MaxCapacity","System::Text::StringBuilder::MaxCapacity","System.Text.StringBuilder.Remove","System::Text::StringBuilder::Remove","System.Text.StringBuilder.Replace","System::Text::StringBuilder::Replace","System.Text.StringBuilder.System#Runtime#Serialization#ISerializable#GetObjectData","System::Text::StringBuilder::System#Runtime#Serialization#ISerializable#GetObjectData","System.Text.StringBuilder.ToString","System::Text::StringBuilder::ToString"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"811de5da-f730-8100-c717-900e95ad94b0","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Text\\StringBuilder.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Text/StringBuilder.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"StringBuilder class | Microsoft Docs","_op_ogTitle":"StringBuilder class","description":"Represents a mutable string of characters. This class cannot be inherited.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n","toc_asset_id":"_splitted/System.Text/toc.json","toc_rel":"_splitted/System.Text/toc.json","source_url":"","ms.assetid":"System.Text.StringBuilder","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.text.stringbuilder","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.text.stringbuilder","fileRelativePath":"System.Text.StringBuilder.html"},"themesRelativePathToOutputRoot":"_themes/"}