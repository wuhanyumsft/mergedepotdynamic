{"content":"    \r\n    <h1 id=\"Microsoft_SqlServer_Server_IBinarySerialize\">\r\n      <span class=\"lang-csharp\">IBinarySerialize</span>\r\n        Interface\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides custom implementation for user-defined type (UDT) and user-defined aggregate serialization and deserialization.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public interface IBinarySerialize</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>User-defined types (UDTs) and user-defined aggregates are required to define a storage format, which can be either <a class=\"xref\" href=\"microsoft.sqlserver.server.format\" data-linktype=\"relative-path\">Format</a>.<code>Native</code> or <a class=\"xref\" href=\"microsoft.sqlserver.server.format\" data-linktype=\"relative-path\">Format</a>.<code>UserDefined</code>.  </p>\n<p> <a class=\"xref\" href=\"microsoft.sqlserver.server.format\" data-linktype=\"relative-path\">Format</a>.<code>Native</code> allows SQL Server to handle serialization and deserialization automatically, but the format has restrictions on the kind of types it can handle. <a class=\"xref\" href=\"microsoft.sqlserver.server.format\" data-linktype=\"relative-path\">Format</a>.<code>UserDefined</code> allows user-defined types and aggregates to handle their own serialization. User-defined types and aggregates must be marked with <a class=\"xref\" href=\"microsoft.sqlserver.server.format\" data-linktype=\"relative-path\">Format</a>.<code>UserDefined</code> in the <code>SqlUserDefinedType</code> or <code>SqlUserDefinedAggregate</code> attribute, and must implement the IBinarySerialize interface.  </p>\n<p> Note that even with custom serialization, the total size of each instance must be under the maximum allowed limit, currently 8000 bytes.</p>\n\r\n    \r\n    \r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_SqlServer_Server_IBinarySerialize_Read_System_IO_BinaryReader_\" data-linktype=\"self-bookmark\">Read(BinaryReader)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Generates a user-defined type (UDT) or user-defined aggregate from its binary form.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_SqlServer_Server_IBinarySerialize_Write_System_IO_BinaryWriter_\" data-linktype=\"self-bookmark\">Write(BinaryWriter)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts a user-defined type (UDT) or user-defined aggregate into its binary format so that it may be persisted.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_SqlServer_Server_IBinarySerialize_Read_System_IO_BinaryReader_\">\r\n    \r\n            <a id=\"Microsoft_SqlServer_Server_IBinarySerialize_Read_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Read(BinaryReader)</div>        \r\n          </div>\r\n    \r\n            <p>Generates a user-defined type (UDT) or user-defined aggregate from its binary form.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Read (System.IO.BinaryReader r);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>r</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> stream from which the object is deserialized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Read method must reconstitute your object using the information written by the <a class=\"xref\" href=\"microsoft.sqlserver.server.ibinaryserialize#Microsoft_SqlServer_Server_IBinarySerialize_Write_\" data-linktype=\"relative-path\">Write</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows the implementation of the Read method of a UDT, which uses a <a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> to de-serialize a previously persisted UDT. This example assumes that the UDT has two data properties: <code>StringValue</code> and <code>DoubleValue</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"DataWorks IBinarySerialize Samples#1\">// The binary layout is as follows:\n//    Bytes 0 - 19: string text, padded to the right with null characters\n//    Bytes 20+: Double value\n\npublic void Read(System.IO.BinaryReader r)\n{\n\n    int maxStringSize = 20;\n    char[] chars;\n    int stringEnd;\n    string stringValue;\n    double doubleValue;\n\n    // Read the characters from the binary stream.\n    chars = r.ReadChars(maxStringSize);\n\n    // Find the start of the null character padding.\n    stringEnd = Array.IndexOf(chars, &#39;\\0&#39;);\n\n    if (stringEnd == 0)\n    {\n        stringValue = null;\n        return;\n    }\n\n    // Build the string from the array of characters.\n    stringValue = new String(chars, 0, stringEnd);\n\n    // Read the double value from the binary stream.\n    doubleValue = r.ReadDouble();\n\n    // Set the object&#39;s properties equal to the values.\n    this.StringValue = stringValue;\n    this.DoubleValue = doubleValue;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks IBinarySerialize Samples#1\">&#39; The binary layout is as follows:\n&#39;    Bytes 0 - 19: string text, padded to the right with null\n&#39;    characters\n&#39;    Bytes 20+: double value\nPublic Sub Read(ByVal r As System.IO.BinaryReader) _\n  Implements Microsoft.SqlServer.Server.IBinarySerialize.Read\n    \n    Dim maxStringSize As Integer = 20\n    Dim chars As Char()\n    Dim stringEnd As Integer\n    Dim stringValue As String\n    Dim value As double\n\n    &#39; Read the characters from the binary stream.\n    chars = r.ReadChars(maxStringSize)\n    \n    &#39; Find the start of the null character padding.\n    stringEnd = Array.IndexOf(chars, ControlChars.NullChar)\n\n    If StringEnd = 0 Then\n       stringValue = Nothing\n       Exit Sub\n    End If\n\n    &#39; Build the string from the array of characters.\n    stringValue = new String(chars, 0, stringEnd)\n\n    &#39; Read the double value from the binary stream.\n    value = r.ReadDouble()\n\n    &#39; Set the object&#39;s properties equal to the values.\n    Me.StringValue = stringValue\n    Me.DoubleValue = value\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_SqlServer_Server_IBinarySerialize_Write_System_IO_BinaryWriter_\">\r\n    \r\n            <a id=\"Microsoft_SqlServer_Server_IBinarySerialize_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(BinaryWriter)</div>        \r\n          </div>\r\n    \r\n            <p>Converts a user-defined type (UDT) or user-defined aggregate into its binary format so that it may be persisted.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Write (System.IO.BinaryWriter w);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>w</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.binarywriter\" data-linktype=\"relative-path\">BinaryWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.io.binarywriter\" data-linktype=\"relative-path\">BinaryWriter</a> stream to which the UDT or user-defined aggregate is serialized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Write sufficient information to the binary stream to allow the <a class=\"xref\" href=\"microsoft.sqlserver.server.ibinaryserialize#Microsoft_SqlServer_Server_IBinarySerialize_Read_\" data-linktype=\"relative-path\">Read</a> method to reconstitute your UDT or user-defined aggregate.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows the implementation of the Writemethod of a UDT, which uses a <a class=\"xref\" href=\"system.io.binarywriter\" data-linktype=\"relative-path\">BinaryWriter</a> to serialize the UDT in the user-defined binary format. The purpose of the null character padding is to ensure that the string value is completely separated from the double value, so that one UDT is compared to another in Transact-SQL code, string bytes are compared to string bytes and double bytes are compared to double bytes.  </p>\n<pre><code class=\"lang-cs\" name=\"DataWorks IBinarySerialize Samples#2\">// The binary layout is as follows:\n//    Bytes 0 - 19: string text, padded to the right with null characters\n//    Bytes 20+: Double value\npublic void Write(System.IO.BinaryWriter w)\n{        \n    int maxStringSize = 20;\n    string stringValue = &quot;The value of PI: &quot;;\n    string paddedString; \n    double value = 3.14159;\n\n    // Pad the string from the right with null characters.\n    paddedString = stringValue.PadRight(maxStringSize, &#39;\\0&#39;);\n\n    // Write the string value one byte at a time.\n    for (int i = 0; i &lt; paddedString.Length; i++)\n    {\n        w.Write(paddedString[i]);\n    }\n\n    // Write the double value.\n    w.Write(value);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks IBinarySerialize Samples#2\">&#39; The binary layout is as follows:\n&#39;    Bytes 0 - 19: string text, padded to the right with null characters\n&#39;    Bytes 20+: Double value\nPublic Sub Write(ByVal w As System.IO.BinaryWriter) _\n  Implements Microsoft.SqlServer.Server.IBinarySerialize.Write\n\n    Dim maxStringSize As Integer = 20\n    Dim stringValue As String = &quot;The value of PI: &quot;\n    Dim paddedString As String\n    Dim value As Double = 3.14159\n\n    &#39; Pad the string from the right with null characters.\n    paddedString = stringValue.PadRight(maxStringSize, ControlChars.NullChar)\n    \n    \n    &#39; Write the string value one byte at a time.\n    Dim i As Integer\n    For i = 0 To paddedString.Length - 1 Step 1 \n        w.Write(paddedString(i))\n    Next\n\n    &#39; Write the double value.\n    w.Write(value)\n    \nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/Microsoft.SqlServer.Server.IBinarySerialize.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/Microsoft.SqlServer.Server.IBinarySerialize.yml\">\r\n<meta name=\"APIName\" content=\"Microsoft.SqlServer.Server.IBinarySerialize\">\r\n<meta name=\"APIName\" content=\"Microsoft.SqlServer.Server.IBinarySerialize.Read\">\r\n<meta name=\"APIName\" content=\"Microsoft.SqlServer.Server.IBinarySerialize.Write\">\r\n<meta name=\"APILocation\" content=\"System.Data.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"d89a06cb-d70f-58f1-5bd4-734dddfbb440\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\Microsoft.SqlServer.Server\\IBinarySerialize.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides custom implementation for user-defined type (UDT) and user-defined aggregate serialization and deserialization.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/Microsoft.SqlServer.Server/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"Microsoft.SqlServer.Server.IBinarySerialize\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/Microsoft.SqlServer.Server.IBinarySerialize.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/Microsoft.SqlServer.Server.IBinarySerialize.yml","open_to_public_contributors":true,"api_name":["Microsoft.SqlServer.Server.IBinarySerialize","Microsoft.SqlServer.Server.IBinarySerialize.Read","Microsoft.SqlServer.Server.IBinarySerialize.Write"],"api_location":["System.Data.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["Microsoft.SqlServer.Server.IBinarySerialize","Microsoft::SqlServer::Server::IBinarySerialize","Microsoft.SqlServer.Server.IBinarySerialize.Read","Microsoft::SqlServer::Server::IBinarySerialize::Read","Microsoft.SqlServer.Server.IBinarySerialize.Write","Microsoft::SqlServer::Server::IBinarySerialize::Write"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"d89a06cb-d70f-58f1-5bd4-734dddfbb440","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\Microsoft.SqlServer.Server\\IBinarySerialize.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/Microsoft.SqlServer.Server/IBinarySerialize.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IBinarySerialize interface | Microsoft Docs","_op_ogTitle":"IBinarySerialize interface","description":"Provides custom implementation for user-defined type (UDT) and user-defined aggregate serialization and deserialization.\n","toc_asset_id":"_splitted/Microsoft.SqlServer.Server/toc.json","toc_rel":"_splitted/Microsoft.SqlServer.Server/toc.json","source_url":"","ms.assetid":"Microsoft.SqlServer.Server.IBinarySerialize","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/microsoft.sqlserver.server.ibinaryserialize","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/microsoft.sqlserver.server.ibinaryserialize","fileRelativePath":"Microsoft.SqlServer.Server.IBinarySerialize.html"},"themesRelativePathToOutputRoot":"_themes/"}