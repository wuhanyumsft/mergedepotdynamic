{"content":"    \r\n    <h1 id=\"System_Buffer\">\r\n      <span class=\"lang-csharp\">Buffer</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Manipulates arrays of primitive types.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic static class Buffer</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Buffer</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Buffer only affects arrays of primitive types; this class does not apply to objects. Each primitive type is treated as a series of bytes without regard to any behavior or limitation associated with the primitive type.  </p>\n<p> Buffer provides methods to copy bytes from one array of primitive types to another array of primitive types, get a byte from an array, set a byte in an array, and obtain the length of an array. This class provides better performance for manipulating primitive types than similar methods in the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">System.Array</a> class.  </p>\n<p> Buffer is applicable to the following primitive types: <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>, <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>, <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>, <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>, <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>, <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>, <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a>, <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>, <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a>, <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a>, <a class=\"xref\" href=\"system.uintptr\" data-linktype=\"relative-path\">UIntPtr</a>, <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>, and <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>.</p>\n\r\n    \r\n    \r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Buffer_BlockCopy_System_Array_System_Int32_System_Array_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">BlockCopy(Array,Int32,Array,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies a specified number of bytes from a source array starting at a particular offset to a destination array starting at a particular offset.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Buffer_ByteLength_System_Array_\" data-linktype=\"self-bookmark\">ByteLength(Array)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the number of bytes in the specified array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Buffer_GetByte_System_Array_System_Int32_\" data-linktype=\"self-bookmark\">GetByte(Array,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the byte at a specified location in a specified array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Buffer_MemoryCopy_System_Void__System_Void__System_Int64_System_Int64_\" data-linktype=\"self-bookmark\">MemoryCopy(Void*,Void*,Int64,Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies a number of bytes specified as a long integer value from one address in memory to another.  </p>\n<p> This API is not CLS-compliant.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Buffer_MemoryCopy_System_Void__System_Void__System_UInt64_System_UInt64_\" data-linktype=\"self-bookmark\">MemoryCopy(Void*,Void*,UInt64,UInt64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies a number of bytes specified as an unsigned long integer value from one address in memory to another.  </p>\n<p> This API is not CLS-compliant.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Buffer_SetByte_System_Array_System_Int32_System_Byte_\" data-linktype=\"self-bookmark\">SetByte(Array,Int32,Byte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Assigns a specified value to a byte at a particular location in a specified array.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Buffer_BlockCopy_System_Array_System_Int32_System_Array_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Buffer_BlockCopy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BlockCopy(Array,Int32,Array,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies a specified number of bytes from a source array starting at a particular offset to a destination array starting at a particular offset.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void BlockCopy (Array src, int srcOffset, Array dst, int dstOffset, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>src</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The source buffer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>srcOffset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based byte offset into <code>src</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>dst</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The destination buffer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>dstOffset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based byte offset into <code>dst</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes to copy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>src</code> or <code>dst</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>src</code> or <code>dst</code> is not an array of primitives.  </p>\n<p> -or-  </p>\n<p> The number of bytes in <code>src</code> is less than <code>srcOffset</code> plus <code>count</code>.  </p>\n<p> -or-  </p>\n<p> The number of bytes in <code>dst</code> is less than <code>dstOffset</code> plus <code>count</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>srcOffset</code>, <code>dstOffset</code>, or <code>count</code> is less than 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method copies <code>count</code> bytes from <code>src</code>, beginning at <code>srcOffset</code>, to <code>dst</code>, beginning at <code>dstOffset</code>. Both <code>srcOffset</code> and <code>dstOffset</code> are zero-based; that is, the first byte in each buffer is at position 0, not position 1.  </p>\n<p> The BlockCopy method accesses the bytes in the <code>src</code> parameter array using offsets into memory, not programming constructs such as indexes or upper and lower array bounds. For example, if in the programming language of your application you declare an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> array with a zero-based lower bound of -50, and then pass the array and an offset of 5 to the BlockCopy method, the first array element the method will access is the second element of the array, which is at index -49. Furthermore, which byte of array element -49 is accessed first depends on the endianness of the computer that is executing your application.  </p>\n<p> As its name suggests, the BlockCopy method copies a block of bytes as a whole, rather than copying one byte at a time. Therefore, if <code>src</code> and <code>dst</code> reference the same array, and the range from <code>srcOffset</code> + <code>count</code> -1 overlaps the range from <code>dstOffset</code> + <code>count</code> - 1, the values of the overlapping bytes are not overwritten before they are copied to the destination. In the following example, the values of bytes 0-16 in an array named <code>arr</code> are copied to bytes 12-28. Despite the overlapping range, the values of the source bytes are successfully copied.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Buffer.BlockCopy#3\">   const int INT_SIZE = 4;\n   array&lt;Int32&gt;^ arr = gcnew array&lt;Int32&gt; { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20 };\n   Buffer::BlockCopy(arr, 0 * INT_SIZE, arr, 3 * INT_SIZE, 4 * INT_SIZE);\n   for each (int value in arr)\n      Console::Write(&quot;{0}  &quot;, value);\n   // The example displays the following output:\n   //       2  4  6  2  4  6  8  16  18  20\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Buffer.BlockCopy#3\">      const int INT_SIZE = 4;\n      int[] arr = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20 };\n      Buffer.BlockCopy(arr, 0 * INT_SIZE, arr, 3 * INT_SIZE, 4 * INT_SIZE);\n      foreach (int value in arr)\n         Console.Write(&quot;{0}  &quot;, value);\n      // The example displays the following output:\n      //       2  4  6  2  4  6  8  16  18  20      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Buffer.BlockCopy#3\">      Const INT_SIZE As Integer = 4\n      Dim arr() As Integer = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20 }\n      Buffer.BlockCopy(arr, 0 * INT_SIZE, arr, 3 * INT_SIZE, 4 * INT_SIZE)\n      For Each value As Integer In arr\n         Console.Write(&quot;{0}  &quot;, value)\n      Next\n      &#39; The example displays the following output:\n      &#39;       2  4  6  2  4  6  8  16  18  20      \n</code></pre><p> In the following example, the values of bytes 12-28 in an array named <code>arr</code> are copied to bytes 0-16. Again, despite the overlapping range, the values of the source bytes are successfully copied.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Buffer.BlockCopy#4\">   const int INT_SIZE = 4;\n   array&lt;Int32&gt;^ arr = gcnew array&lt;Int32&gt; { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20 };\n   Buffer::BlockCopy(arr, 3 * INT_SIZE, arr, 0 * INT_SIZE, 4 * INT_SIZE);\n   for each (int value in arr)\n      Console::Write(&quot;{0}  &quot;, value);\n   // The example displays the following output:\n   //       8  10  12  14  10  12  14  16  18  20\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Buffer.BlockCopy#4\">      const int INT_SIZE = 4;\n      int[] arr = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20 };\n      Buffer.BlockCopy(arr, 3 * INT_SIZE, arr, 0 * INT_SIZE, 4 * INT_SIZE);\n      foreach (int value in arr)\n         Console.Write(&quot;{0}  &quot;, value);\n      // The example displays the following output:\n      //       8  10  12  14  10  12  14  16  18  20      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Buffer.BlockCopy#4\">      Const INT_SIZE As Integer = 4\n      Dim arr() As Integer = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20 }\n      Buffer.BlockCopy(arr, 3 * INT_SIZE, arr, 0 * INT_SIZE, 4 * INT_SIZE)\n      For Each value As Integer In arr\n         Console.Write(&quot;{0}  &quot;, value)\n      Next\n      &#39; The example displays the following output:\n      &#39;       8  10  12  14  10  12  14  16  18  20      \n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example copies regions of arrays by using the BlockCopy method. For each BlockCopy operation, it lists the source and destination arrays as both an array of values and as a sequence of bytes. The example illustrates the importance of considering a system&#39;s endianness when working with the BlockCopy method: Because Windows systems are little-endian, the lower-order bytes of a primitive data type&#39;s value precede the higher-order bytes.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Buffer.BlockCopy#2\">using System;\n\nclass Example\n{\n    // Display the individual bytes in the array in hexadecimal.\n    public static void DisplayArray(Array arr, string name)\n    {\n        Console.WindowWidth = 120;\n        Console.Write(&quot;{0,11}:&quot;, name);\n        for (int ctr = 0; ctr &lt; arr.Length; ctr++)\n        {\n            byte[] bytes;\n            if (arr is long[])\n               bytes = BitConverter.GetBytes((long) arr.GetValue(ctr));\n            else\n               bytes = BitConverter.GetBytes((short) arr.GetValue(ctr));\n            \n            foreach (byte byteValue in bytes)\n               Console.Write(&quot; {0:X2}&quot;, byteValue);\n        }\n        Console.WriteLine();\n    }\n\n    // Display the individual array element values in hexadecimal.\n    public static void DisplayArrayValues(Array arr, string name)\n    {\n        // Get the length of one element in the array.\n        int elementLength = Buffer.ByteLength(arr) / arr.Length;\n        string formatString = String.Format(&quot; {{0:X{0}}}&quot;, 2 * elementLength);\n        Console.Write( &quot;{0,11}:&quot;, name);\n        for (int ctr = 0; ctr &lt; arr.Length; ctr++)\n            Console.Write(formatString, arr.GetValue(ctr));\n\n        Console.WriteLine();\n    }\n\n    public static void Main( )\n    {\n        // These are the source and destination arrays for BlockCopy.\n        short[] src  = { 258, 259, 260, 261, 262, 263, 264, \n                          265, 266, 267, 268, 269, 270 };\n        long[] dest = { 17, 18, 19, 20 };\n\n        // Display the initial value of the arrays in memory.\n        Console.WriteLine( &quot;Initial values of arrays:&quot;);\n        Console.WriteLine(&quot;   Array values as Bytes:&quot;);\n        DisplayArray(src, &quot;src&quot; );\n        DisplayArray(dest, &quot;dest&quot;);\n        Console.WriteLine(&quot;   Array values:&quot;);\n        DisplayArrayValues(src, &quot;src&quot;);\n        DisplayArrayValues(dest, &quot;dest&quot;);\n        Console.WriteLine();\n\n        // Copy bytes 5-10 from source to index 7 in destination and display the result.\n        Buffer.BlockCopy(src, 5, dest, 7, 6);\n        Console.WriteLine(&quot;Buffer.BlockCopy(src, 5, dest, 7, 6 )&quot;);\n        Console.WriteLine(&quot;   Array values as Bytes:&quot;);\n        DisplayArray(src, &quot;src&quot;);\n        DisplayArray(dest, &quot;dest&quot;);\n        Console.WriteLine(&quot;   Array values:&quot;);\n        DisplayArrayValues(src, &quot;src&quot;);\n        DisplayArrayValues(dest, &quot;dest&quot;);\n        Console.WriteLine();\n        \n        // Copy bytes 16-20 from source to index 22 in destination and display the result. \n        Buffer.BlockCopy(src, 16, dest, 22, 5);\n        Console.WriteLine(&quot;Buffer.BlockCopy(src, 16, dest, 22, 5)&quot;);\n        Console.WriteLine(&quot;   Array values as Bytes:&quot;);\n        DisplayArray(src, &quot;src&quot;);\n        DisplayArray(dest, &quot;dest&quot;);\n        Console.WriteLine(&quot;   Array values:&quot;);\n        DisplayArrayValues(src, &quot;src&quot;);\n        DisplayArrayValues(dest, &quot;dest&quot;);\n        Console.WriteLine();\n         \n        // Copy overlapping range of bytes 4-10 to index 5 in source.\n        Buffer.BlockCopy(src, 4, src, 5, 7 );\n        Console.WriteLine(&quot;Buffer.BlockCopy( src, 4, src, 5, 7)&quot;);\n        Console.WriteLine(&quot;   Array values as Bytes:&quot;);\n        DisplayArray(src, &quot;src&quot;);\n        DisplayArray(dest, &quot;dest&quot;);\n        Console.WriteLine(&quot;   Array values:&quot;);\n        DisplayArrayValues(src, &quot;src&quot;);\n        DisplayArrayValues(dest, &quot;dest&quot;);\n        Console.WriteLine();\n        \n        // Copy overlapping range of bytes 16-22 to index 15 in source. \n        Buffer.BlockCopy(src, 16, src, 15, 7);\n        Console.WriteLine(&quot;Buffer.BlockCopy( src, 16, src, 15, 7)&quot;);\n        Console.WriteLine(&quot;   Array values as Bytes:&quot;);\n        DisplayArray(src, &quot;src&quot;);\n        DisplayArray(dest, &quot;dest&quot;);\n        Console.WriteLine(&quot;   Array values:&quot;);\n        DisplayArrayValues(src, &quot;src&quot;);\n        DisplayArrayValues(dest, &quot;dest&quot;);\n    }\n}\n// The example displays the following output:\n//    Initial values of arrays:\n//       Array values as Bytes:\n//            src: 02 01 03 01 04 01 05 01 06 01 07 01 08 01 09 01 0A 01 0B 01 0C 01 0D 01 0E 01\n//           dest: 11 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 13 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00\n//       Array values:\n//            src: 0102 0103 0104 0105 0106 0107 0108 0109 010A 010B 010C 010D 010E\n//           dest: 0000000000000011 0000000000000012 0000000000000013 0000000000000014\n//    \n//    Buffer.BlockCopy(src, 5, dest, 7, 6 )\n//       Array values as Bytes:\n//            src: 02 01 03 01 04 01 05 01 06 01 07 01 08 01 09 01 0A 01 0B 01 0C 01 0D 01 0E 01\n//           dest: 11 00 00 00 00 00 00 01 05 01 06 01 07 00 00 00 13 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00\n//       Array values:\n//            src: 0102 0103 0104 0105 0106 0107 0108 0109 010A 010B 010C 010D 010E\n//           dest: 0100000000000011 0000000701060105 0000000000000013 0000000000000014\n//    \n//    Buffer.BlockCopy(src, 16, dest, 22, 5)\n//       Array values as Bytes:\n//            src: 02 01 03 01 04 01 05 01 06 01 07 01 08 01 09 01 0A 01 0B 01 0C 01 0D 01 0E 01\n//           dest: 11 00 00 00 00 00 00 01 05 01 06 01 07 00 00 00 13 00 00 00 00 00 0A 01 0B 01 0C 00 00 00 00 00\n//       Array values:\n//            src: 0102 0103 0104 0105 0106 0107 0108 0109 010A 010B 010C 010D 010E\n//           dest: 0100000000000011 0000000701060105 010A000000000013 00000000000C010B\n//    \n//    Buffer.BlockCopy( src, 4, src, 5, 7)\n//       Array values as Bytes:\n//            src: 02 01 03 01 04 04 01 05 01 06 01 07 08 01 09 01 0A 01 0B 01 0C 01 0D 01 0E 01\n//           dest: 11 00 00 00 00 00 00 01 05 01 06 01 07 00 00 00 13 00 00 00 00 00 0A 01 0B 01 0C 00 00 00 00 00\n//       Array values:\n//            src: 0102 0103 0404 0501 0601 0701 0108 0109 010A 010B 010C 010D 010E\n//           dest: 0100000000000011 0000000701060105 010A000000000013 00000000000C010B\n//    \n//    Buffer.BlockCopy( src, 16, src, 15, 7)\n//       Array values as Bytes:\n//            src: 02 01 03 01 04 04 01 05 01 06 01 07 08 01 09 0A 01 0B 01 0C 01 0D 0D 01 0E 01\n//           dest: 11 00 00 00 00 00 00 01 05 01 06 01 07 00 00 00 13 00 00 00 00 00 0A 01 0B 01 0C 00 00 00 00 00\n//       Array values:\n//            src: 0102 0103 0404 0501 0601 0701 0108 0A09 0B01 0C01 0D01 010D 010E\n//           dest: 0100000000000011 0000000701060105 010A000000000013 00000000000C010B\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Buffer.BlockCopy#2\">Module Example\n    &#39; Display the individual bytes in the array in hexadecimal.\n    Sub DisplayArray(arr As Array, name As String)\n        Console.Write(&quot;{0,11}:&quot;, name)\n        For ctr As Integer = 0 to arr.Length - 1\n            Dim bytes() As Byte = BitConverter.GetBytes(arr(ctr))\n            For Each byteValue As Byte In bytes\n               Console.Write(&quot; {0:X2}&quot;, byteValue)\n            Next\n        Next\n        Console.WriteLine()\n    End Sub\n\n    &#39; Display the individual array element values in hexadecimal.\n    Sub DisplayArrayValues(arr As Array, name As String)\n       &#39; Get the length of one element in the array.\n       Dim elementLength As Integer = Buffer.ByteLength(arr) / arr.Length\n       Dim formatString As String = String.Format(&quot; {{0:X{0}}}&quot;, 2 * elementLength)\n       Console.Write(&quot;{0,11}:&quot;, name)\n       For ctr As Integer = 0 to arr.Length - 1\n         Console.Write(formatString, arr(ctr))\n       Next\n       Console.WriteLine()  \n    End Sub\n    \n    Sub Main()\n       Console.WindowWidth = 120\n        &#39; These are source and destination arrays for BlockCopy.\n        Dim src()  As Short = { 258, 259, 260, 261, 262, 263, 264, _\n                                 265, 266, 267, 268, 269, 270 }\n        Dim dest() As Long = { 17, 18, 19, 20 }\n\n        &#39; Display the initial value of the arrays in memory.\n        Console.WriteLine( &quot;Initial values of arrays:&quot;)\n        Console.WriteLine(&quot;   Array values as Bytes:&quot;) \n        DisplayArray(src, &quot;src&quot; )\n        DisplayArray(dest, &quot;dest&quot; )\n        Console.WriteLine(&quot;   Array values:&quot;)\n        DisplayArrayValues(src, &quot;src&quot;)\n        DisplayArrayValues(dest, &quot;dest&quot;)\n        Console.WriteLine()\n\n        &#39; Copy bytes 5-10 from source to index 7 in destination and display the result.\n        Buffer.BlockCopy( src, 5, dest, 7, 6 )\n        Console.WriteLine(&quot;Buffer.BlockCopy(src, 5, dest, 7, 6 )&quot;)\n        Console.WriteLine(&quot;   Array values as Bytes:&quot;)\n        DisplayArray(src, &quot;src&quot;)\n        DisplayArray(dest, &quot;dest&quot;)\n        Console.WriteLine(&quot;   Array values:&quot;)\n        DisplayArrayValues(src, &quot;src&quot;)\n        DisplayArrayValues(dest, &quot;dest&quot;)\n        Console.WriteLine()\n        \n        &#39; Copy bytes 16-20 from source to index 22 in destination and display the result. \n        Buffer.BlockCopy( src, 16, dest, 22, 5 )\n        Console.WriteLine(&quot;Buffer.BlockCopy(src, 16, dest, 22, 5)&quot;)\n        Console.WriteLine(&quot;   Array values as Bytes:&quot;)\n        DisplayArray(src, &quot;src&quot;)\n        DisplayArray(dest, &quot;dest&quot;)\n        Console.WriteLine(&quot;   Array values:&quot;)\n        DisplayArrayValues(src, &quot;src&quot;)\n        DisplayArrayValues(dest, &quot;dest&quot;)\n        Console.WriteLine()\n         \n        &#39; Copy overlapping range of bytes 4-10 to index 5 in source.\n        Buffer.BlockCopy( src, 4, src, 5, 7 )\n        Console.WriteLine(&quot;Buffer.BlockCopy( src, 4, src, 5, 7)&quot;)\n        Console.WriteLine(&quot;   Array values as Bytes:&quot;)\n        DisplayArray(src, &quot;src&quot;)\n        DisplayArray(dest, &quot;dest&quot;)\n        Console.WriteLine(&quot;   Array values:&quot;)\n        DisplayArrayValues(src, &quot;src&quot;)\n        DisplayArrayValues(dest, &quot;dest&quot;)\n        Console.WriteLine()\n        \n        &#39; Copy overlapping range of bytes 16-22 to index 15 in source. \n        Buffer.BlockCopy(src, 16, src, 15, 7)\n        Console.WriteLine(&quot;Buffer.BlockCopy( src, 16, src, 15, 7)&quot;)\n        Console.WriteLine(&quot;   Array values as Bytes:&quot;)\n        DisplayArray(src, &quot;src&quot;)\n        DisplayArray(dest, &quot;dest&quot;)\n        Console.WriteLine(&quot;   Array values:&quot;)\n        DisplayArrayValues(src, &quot;src&quot;)\n        DisplayArrayValues(dest, &quot;dest&quot;)\n    End Sub \nEnd Module \n&#39; This example displays the following output:\n&#39;    Initial values of arrays:\n&#39;       Array values as Bytes:\n&#39;            src: 02 01 03 01 04 01 05 01 06 01 07 01 08 01 09 01 0A 01 0B 01 0C 01 0D 01 0E 01\n&#39;           dest: 11 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 13 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00\n&#39;       Array values:\n&#39;            src: 0102 0103 0104 0105 0106 0107 0108 0109 010A 010B 010C 010D 010E\n&#39;           dest: 0000000000000011 0000000000000012 0000000000000013 0000000000000014\n&#39;    \n&#39;    Buffer.BlockCopy(src, 5, dest, 7, 6 )\n&#39;       Array values as Bytes:\n&#39;            src: 02 01 03 01 04 01 05 01 06 01 07 01 08 01 09 01 0A 01 0B 01 0C 01 0D 01 0E 01\n&#39;           dest: 11 00 00 00 00 00 00 01 05 01 06 01 07 00 00 00 13 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00\n&#39;       Array values:\n&#39;            src: 0102 0103 0104 0105 0106 0107 0108 0109 010A 010B 010C 010D 010E\n&#39;           dest: 0100000000000011 0000000701060105 0000000000000013 0000000000000014\n&#39;    \n&#39;    Buffer.BlockCopy(src, 16, dest, 22, 5)\n&#39;       Array values as Bytes:\n&#39;            src: 02 01 03 01 04 01 05 01 06 01 07 01 08 01 09 01 0A 01 0B 01 0C 01 0D 01 0E 01\n&#39;           dest: 11 00 00 00 00 00 00 01 05 01 06 01 07 00 00 00 13 00 00 00 00 00 0A 01 0B 01 0C 00 00 00 00 00\n&#39;       Array values:\n&#39;            src: 0102 0103 0104 0105 0106 0107 0108 0109 010A 010B 010C 010D 010E\n&#39;           dest: 0100000000000011 0000000701060105 010A000000000013 00000000000C010B\n&#39;    \n&#39;    Buffer.BlockCopy( src, 4, src, 5, 7)\n&#39;       Array values as Bytes:\n&#39;            src: 02 01 03 01 04 04 01 05 01 06 01 07 08 01 09 01 0A 01 0B 01 0C 01 0D 01 0E 01\n&#39;           dest: 11 00 00 00 00 00 00 01 05 01 06 01 07 00 00 00 13 00 00 00 00 00 0A 01 0B 01 0C 00 00 00 00 00\n&#39;       Array values:\n&#39;            src: 0102 0103 0404 0501 0601 0701 0108 0109 010A 010B 010C 010D 010E\n&#39;           dest: 0100000000000011 0000000701060105 010A000000000013 00000000000C010B\n&#39;    \n&#39;    Buffer.BlockCopy( src, 16, src, 15, 7)\n&#39;       Array values as Bytes:\n&#39;            src: 02 01 03 01 04 04 01 05 01 06 01 07 08 01 09 0A 01 0B 01 0C 01 0D 0D 01 0E 01\n&#39;           dest: 11 00 00 00 00 00 00 01 05 01 06 01 07 00 00 00 13 00 00 00 00 00 0A 01 0B 01 0C 00 00 00 00 00\n&#39;       Array values:\n&#39;            src: 0102 0103 0404 0501 0601 0701 0108 0A09 0B01 0C01 0D01 010D 010E\n&#39;           dest: 0100000000000011 0000000701060105 010A000000000013 00000000000C010B\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Buffer.BlockCopy#2\">using namespace System;\n\n// Display the individual bytes in the array in hexadecimal.\nvoid DisplayArray(System::Array^ arr, String^ name)\n{\n   Console::WindowWidth = 120;\n   Console::Write(&quot;{0,11}:&quot;, name);\n   for (int ctr = 0; ctr &lt; arr-&gt;Length; ctr++)\n   {\n      array&lt;Byte&gt;^ bytes;\n      if (arr-&gt;GetType() == array&lt;Int64&gt;::typeid)      \n         bytes = BitConverter::GetBytes((Int64) arr-&gt;GetValue(ctr));\n      else\n         bytes = BitConverter::GetBytes((Int16) arr-&gt;GetValue(ctr));\n\n      for each (Byte byteValue in bytes)\n         Console::Write(&quot; {0:X2}&quot;, byteValue);\n   }\n   Console::WriteLine();\n}\n\n// Display the individual array element values in hexadecimal.\nvoid DisplayArrayValues(Array^ arr, String^ name)\n{\n   // Get the length of one element in the array.\n   int elementLength = Buffer::ByteLength(arr) / arr-&gt;Length;\n   String^ formatString = String::Format(&quot; {{0:X{0}}}&quot;, 2 * elementLength);\n   Console::Write( &quot;{0,11}:&quot;, name);\n   for (int ctr = 0; ctr &lt; arr-&gt;Length; ctr++)\n      Console::Write(formatString, arr-&gt;GetValue(ctr));\n\n   Console::WriteLine();\n}\n\nvoid main()\n{\n   // These are the source and destination arrays for BlockCopy.\n   array&lt;Int16&gt;^ src = gcnew array&lt;Int16&gt; { 258, 259, 260, 261, 262, 263, 264, \n                                            265, 266, 267, 268, 269, 270 };\n   array&lt;Int64&gt;^ dest = gcnew array&lt;Int64&gt; { 17, 18, 19, 20 };\n\n   // Display the initial value of the arrays in memory.\n   Console::WriteLine( &quot;Initial values of arrays:&quot;);\n   Console::WriteLine(&quot;   Array values as Bytes:&quot;);\n   DisplayArray(src, &quot;src&quot; );\n   DisplayArray(dest, &quot;dest&quot;);\n   Console::WriteLine(&quot;   Array values:&quot;);\n   DisplayArrayValues(src, &quot;src&quot;);\n   DisplayArrayValues(dest, &quot;dest&quot;);\n   Console::WriteLine();\n\n   // Copy bytes 5-10 from source to index 7 in destination and display the result.\n   Buffer::BlockCopy(src, 5, dest, 7, 6);\n   Console::WriteLine(&quot;Buffer::BlockCopy(src, 5, dest, 7, 6 )&quot;);\n   Console::WriteLine(&quot;   Array values as Bytes:&quot;);\n   DisplayArray(src, &quot;src&quot;);\n   DisplayArray(dest, &quot;dest&quot;);\n   Console::WriteLine(&quot;   Array values:&quot;);\n   DisplayArrayValues(src, &quot;src&quot;);\n   DisplayArrayValues(dest, &quot;dest&quot;);\n   Console::WriteLine();\n\n   // Copy bytes 16-20 from source to index 22 in destination and display the result. \n   Buffer::BlockCopy(src, 16, dest, 22, 5);\n   Console::WriteLine(&quot;Buffer.BlockCopy(src, 16, dest, 22, 5)&quot;);\n   Console::WriteLine(&quot;   Array values as Bytes:&quot;);\n   DisplayArray(src, &quot;src&quot;);\n   DisplayArray(dest, &quot;dest&quot;);\n   Console::WriteLine(&quot;   Array values:&quot;);\n   DisplayArrayValues(src, &quot;src&quot;);\n   DisplayArrayValues(dest, &quot;dest&quot;);\n   Console::WriteLine();\n\n   // Copy overlapping range of bytes 4-10 to index 5 in source.\n   Buffer::BlockCopy(src, 4, src, 5, 7 );\n   Console::WriteLine(&quot;Buffer.BlockCopy( src, 4, src, 5, 7)&quot;);\n   Console::WriteLine(&quot;   Array values as Bytes:&quot;);\n   DisplayArray(src, &quot;src&quot;);\n   DisplayArray(dest, &quot;dest&quot;);\n   Console::WriteLine(&quot;   Array values:&quot;);\n   DisplayArrayValues(src, &quot;src&quot;);\n   DisplayArrayValues(dest, &quot;dest&quot;);\n   Console::WriteLine();\n\n   // Copy overlapping range of bytes 16-22 to index 15 in source. \n   Buffer::BlockCopy(src, 16, src, 15, 7);\n   Console::WriteLine(&quot;Buffer.BlockCopy( src, 16, src, 15, 7)&quot;);\n   Console::WriteLine(&quot;   Array values as Bytes:&quot;);\n   DisplayArray(src, &quot;src&quot;);\n   DisplayArray(dest, &quot;dest&quot;);\n   Console::WriteLine(&quot;   Array values:&quot;);\n   DisplayArrayValues(src, &quot;src&quot;);\n}\n// The example displays the following output:\n//    Initial values of arrays:\n//       Array values as Bytes:\n//            src: 02 01 03 01 04 01 05 01 06 01 07 01 08 01 09 01 0A 01 0B 01 0C 01 0D 01 0E 01\n//           dest: 11 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 13 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00\n//       Array values:\n//            src: 0102 0103 0104 0105 0106 0107 0108 0109 010A 010B 010C 010D 010E\n//           dest: 0000000000000011 0000000000000012 0000000000000013 0000000000000014\n//    \n//    Buffer.BlockCopy(src, 5, dest, 7, 6 )\n//       Array values as Bytes:\n//            src: 02 01 03 01 04 01 05 01 06 01 07 01 08 01 09 01 0A 01 0B 01 0C 01 0D 01 0E 01\n//           dest: 11 00 00 00 00 00 00 01 05 01 06 01 07 00 00 00 13 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00\n//       Array values:\n//            src: 0102 0103 0104 0105 0106 0107 0108 0109 010A 010B 010C 010D 010E\n//           dest: 0100000000000011 0000000701060105 0000000000000013 0000000000000014\n//    \n//    Buffer.BlockCopy(src, 16, dest, 22, 5)\n//       Array values as Bytes:\n//            src: 02 01 03 01 04 01 05 01 06 01 07 01 08 01 09 01 0A 01 0B 01 0C 01 0D 01 0E 01\n//           dest: 11 00 00 00 00 00 00 01 05 01 06 01 07 00 00 00 13 00 00 00 00 00 0A 01 0B 01 0C 00 00 00 00 00\n//       Array values:\n//            src: 0102 0103 0104 0105 0106 0107 0108 0109 010A 010B 010C 010D 010E\n//           dest: 0100000000000011 0000000701060105 010A000000000013 00000000000C010B\n//    \n//    Buffer.BlockCopy( src, 4, src, 5, 7)\n//       Array values as Bytes:\n//            src: 02 01 03 01 04 04 01 05 01 06 01 07 08 01 09 01 0A 01 0B 01 0C 01 0D 01 0E 01\n//           dest: 11 00 00 00 00 00 00 01 05 01 06 01 07 00 00 00 13 00 00 00 00 00 0A 01 0B 01 0C 00 00 00 00 00\n//       Array values:\n//            src: 0102 0103 0404 0501 0601 0701 0108 0109 010A 010B 010C 010D 010E\n//           dest: 0100000000000011 0000000701060105 010A000000000013 00000000000C010B\n//    \n//    Buffer.BlockCopy( src, 16, src, 15, 7)\n//       Array values as Bytes:\n//            src: 02 01 03 01 04 04 01 05 01 06 01 07 08 01 09 0A 01 0B 01 0C 01 0D 0D 01 0E 01\n//           dest: 11 00 00 00 00 00 00 01 05 01 06 01 07 00 00 00 13 00 00 00 00 00 0A 01 0B 01 0C 00 00 00 00 00\n//       Array values:\n//            src: 0102 0103 0404 0501 0601 0701 0108 0A09 0B01 0C01 0D01 010D 010E\n//           dest: 0100000000000011 0000000701060105 010A000000000013 00000000000C010B\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Buffer_ByteLength_System_Array_\">\r\n    \r\n            <a id=\"System_Buffer_ByteLength_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ByteLength(Array)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the number of bytes in the specified array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int ByteLength (Array array);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes in the array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is not a primitive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is larger than 2 gigabytes (GB).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example illustrates the use of the <code>ByteLength</code> method to return the number of bytes in an array.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Buffer.Bytes#1\">&#39; Example of the Buffer.ByteLength method.\nImports System\nImports Microsoft.VisualBasic\n\nModule ByteLengthDemo\n\n    Const formatter As String = &quot;{0,10}{1,20}{2,9}{3,12}&quot;\n\n    Sub ArrayInfo( arr As Array, name As String )\n\n        Dim byteLength As Integer = Buffer.ByteLength( arr )\n\n        &#39; Display the array name, type, Length, and ByteLength.\n        Console.WriteLine( formatter, name, arr.GetType, arr.Length, _\n            byteLength )\n    End Sub\n\n    Sub Main( )\n        Dim bytes( )   As Byte    = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }\n        Dim bools( )   As Boolean = { True, False, True, False, True }\n        Dim chars( )   As Char    = { &quot; &quot;c, &quot;$&quot;c, &quot;&quot;&quot;&quot;c, &quot;A&quot;c, &quot;{&quot;c }\n        Dim shorts( )  As Short   = { 258, 259, 260, 261, 262, 263 }\n        Dim singles( ) As Single  = { 1, 678, 2.37E33, .00415, 8.9 }\n        Dim doubles( ) As Double  = { 2E-22, .003, 4.4E44, 555E55 }\n        Dim longs( )   As Long    = { 1, 10, 100, 1000, 10000, 100000 }\n\n        Console.WriteLine( _\n            &quot;This example of the Buffer.ByteLength( Array ) &quot; &amp; _\n            vbCrLf &amp; &quot;method generates the following output.&quot; &amp; vbCrLf )\n        Console.WriteLine( formatter, &quot;Array name&quot;, &quot;Array type&quot;, _\n            &quot;Length&quot;, &quot;ByteLength&quot; )\n        Console.WriteLine( formatter, &quot;----------&quot;, &quot;----------&quot;, _\n            &quot;------&quot;, &quot;----------&quot; )\n\n        &#39; Display the Length and ByteLength for each array.\n        ArrayInfo( bytes, &quot;bytes&quot; )\n        ArrayInfo( bools, &quot;bools&quot; )\n        ArrayInfo( chars, &quot;chars&quot; )\n        ArrayInfo( shorts, &quot;shorts&quot; )\n        ArrayInfo( singles, &quot;singles&quot; )\n        ArrayInfo( doubles, &quot;doubles&quot; )\n        ArrayInfo( longs, &quot;longs&quot; )\n    End Sub \nEnd Module \n\n&#39; This example of the Buffer.ByteLength( Array )\n&#39; method generates the following output.\n&#39; \n&#39; Array name          Array type   Length  ByteLength\n&#39; ----------          ----------   ------  ----------\n&#39;      bytes       System.Byte[]       10          10\n&#39;      bools    System.Boolean[]        5           5\n&#39;      chars       System.Char[]        5          10\n&#39;     shorts      System.Int16[]        6          12\n&#39;    singles     System.Single[]        5          20\n&#39;    doubles     System.Double[]        4          32\n&#39;      longs      System.Int64[]        6          48\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Buffer.Bytes#1\">// Example of the Buffer::ByteLength method.\nusing namespace System;\n\nvoid ArrayInfo( Array^ arr, String^ name )\n{\n   int byteLength = Buffer::ByteLength( arr );\n   \n   // Display the array name, type, Length, and ByteLength.\n   Console::WriteLine( &quot;{0,10}{1,20}{2,9}{3,12}&quot;, name, arr-&gt;GetType(), arr-&gt;Length, byteLength );\n}\n\nint main()\n{\n   array&lt;unsigned char&gt;^bytes = {1,2,3,4,5,6,7,8,9,0};\n   array&lt;bool&gt;^bools = {true,false,true,false,true};\n   array&lt;Char&gt;^chars = {&#39; &#39;,&#39;$&#39;,&#39;\\&quot;&#39;,&#39;A&#39;,&#39;{&#39;};\n   array&lt;short&gt;^shorts = {258,259,260,261,262,263};\n   array&lt;float&gt;^singles = {1,678,2.37E33F,.00415F,8.9F};\n   array&lt;double&gt;^doubles = {2E-22,.003,4.4E44,555E55};\n   array&lt;long&gt;^longs = {1,10,100,1000,10000,100000};\n   Console::WriteLine( &quot;This example of the Buffer::ByteLength( Array* ) &quot;\n   &quot;<br>method generates the following output.<br>&quot; );\n   Console::WriteLine( &quot;{0,10}{1,20}{2,9}{3,12}&quot;, &quot;Array name&quot;, &quot;Array type&quot;, &quot;Length&quot;, &quot;ByteLength&quot; );\n   Console::WriteLine( &quot;{0,10}{1,20}{2,9}{3,12}&quot;, &quot;----------&quot;, &quot;----------&quot;, &quot;------&quot;, &quot;----------&quot; );\n   \n   // Display the Length and ByteLength for each array.\n   ArrayInfo( bytes, &quot;bytes&quot; );\n   ArrayInfo( bools, &quot;bools&quot; );\n   ArrayInfo( chars, &quot;chars&quot; );\n   ArrayInfo( shorts, &quot;shorts&quot; );\n   ArrayInfo( singles, &quot;singles&quot; );\n   ArrayInfo( doubles, &quot;doubles&quot; );\n   ArrayInfo( longs, &quot;longs&quot; );\n}\n\n/*\nThis example of the Buffer::ByteLength( Array* )\nmethod generates the following output.\n\nArray name          Array type   Length  ByteLength\n----------          ----------   ------  ----------\n     bytes       System.Byte[]       10          10\n     bools    System.Boolean[]        5           5\n     chars       System.Char[]        5          10\n    shorts      System.Int16[]        6          12\n   singles     System.Single[]        5          20\n   doubles     System.Double[]        4          32\n     longs      System.Int32[]        6          24\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Buffer.Bytes#1\">// Example of the Buffer.ByteLength method.\nusing System;\n\nclass ByteLengthDemo\n{\n    const string formatter = &quot;{0,10}{1,20}{2,9}{3,12}&quot;;\n\n    public static void ArrayInfo( Array arr, string name )\n    {\n        int byteLength = Buffer.ByteLength( arr );\n\n        // Display the array name, type, Length, and ByteLength.\n        Console.WriteLine( formatter, name, arr.GetType( ), \n            arr.Length, byteLength );\n    }\n\n    public static void Main( )\n    {\n        byte[ ]   bytes   = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };\n        bool[ ]   bools   = { true, false, true, false, true };\n        char[ ]   chars   = { &#39; &#39;, &#39;$&#39;, &#39;\\&quot;&#39;, &#39;A&#39;, &#39;{&#39; };\n        short[ ]  shorts  = { 258, 259, 260, 261, 262, 263 };\n        float[ ]  singles = { 1, 678, 2.37E33F, .00415F, 8.9F };\n        double[ ] doubles = { 2E-22, .003, 4.4E44, 555E55 };\n        long[ ]   longs   = { 1, 10, 100, 1000, 10000, 100000 };\n\n        Console.WriteLine( \n            &quot;This example of the Buffer.ByteLength( Array ) &quot; +\n            &quot;<br>method generates the following output.<br>&quot; );\n        Console.WriteLine( formatter, &quot;Array name&quot;, &quot;Array type&quot;, \n            &quot;Length&quot;, &quot;ByteLength&quot; );\n        Console.WriteLine( formatter, &quot;----------&quot;, &quot;----------&quot;, \n            &quot;------&quot;, &quot;----------&quot; );\n\n        // Display the Length and ByteLength for each array.\n        ArrayInfo( bytes, &quot;bytes&quot; );\n        ArrayInfo( bools, &quot;bools&quot; );\n        ArrayInfo( chars, &quot;chars&quot; );\n        ArrayInfo( shorts, &quot;shorts&quot; );\n        ArrayInfo( singles, &quot;singles&quot; );\n        ArrayInfo( doubles, &quot;doubles&quot; );\n        ArrayInfo( longs, &quot;longs&quot; );\n    }\n}\n\n/*\nThis example of the Buffer.ByteLength( Array )\nmethod generates the following output.\n\nArray name          Array type   Length  ByteLength\n----------          ----------   ------  ----------\n     bytes       System.Byte[]       10          10\n     bools    System.Boolean[]        5           5\n     chars       System.Char[]        5          10\n    shorts      System.Int16[]        6          12\n   singles     System.Single[]        5          20\n   doubles     System.Double[]        4          32\n     longs      System.Int64[]        6          48\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Buffer_GetByte_System_Array_System_Int32_\">\r\n    \r\n            <a id=\"System_Buffer_GetByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetByte(Array,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the byte at a specified location in a specified array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte GetByte (Array array, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A location in the array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p>Returns the <code>index</code> byte in the array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is not a primitive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is negative or greater than the length of <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is larger than 2 gigabytes (GB).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>GetByte</code> method gets a particular byte out of the array. The array must be an array of primitives.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the byte values at specified locations within arrays using the <code>GetByte</code> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Buffer.Bytes#3\">// Example of the Buffer.GetByte method.\nusing System;\n\nclass GetByteDemo\n{\n    const string formatter = &quot;{0,10}{1,10}{2,9} {3}&quot;;\n\n    // Display the array contents in hexadecimal.\n    public static void DisplayArray( Array arr, string name )\n    {\n        // Get the array element width; format the formatting string.\n        int elemWidth = Buffer.ByteLength( arr ) / arr.Length;\n        string format = String.Format( &quot; {{0:X{0}}}&quot;, 2 * elemWidth );\n\n        // Display the array elements from right to left.\n        Console.Write( &quot;{0,5}:&quot;, name );\n        for( int loopX = arr.Length - 1; loopX &gt;= 0; loopX-- )\n            Console.Write( format, arr.GetValue( loopX ) );\n        Console.WriteLine( );\n    }\n\n    public static void ArrayInfo( Array arr, string name, int index )\n    {\n        byte value = Buffer.GetByte( arr, index );\n\n        // Display the array name, index, and byte to be viewed.\n        Console.WriteLine( formatter, name, index, value, \n            String.Format( &quot;0x{0:X2}&quot;, value ) );\n    }\n\n    public static void Main( )\n    {\n        // These are the arrays to be viewed with GetByte.\n        long[ ] longs = \n            { 333333333333333333, 666666666666666666, 999999999999999999 };\n        int[ ]  ints  = \n            { 111111111, 222222222, 333333333, 444444444, 555555555 };\n\n        Console.WriteLine( &quot;This example of the &quot; +\n            &quot;Buffer.GetByte( Array, int ) <br>&quot; +\n            &quot;method generates the following output.<br>&quot; +\n            &quot;Note: The arrays are displayed from right to left.<br>&quot; );\n        Console.WriteLine( &quot;  Values of arrays:<br>&quot; );\n\n        // Display the values of the arrays.\n        DisplayArray( longs, &quot;longs&quot; );\n        DisplayArray( ints, &quot;ints&quot; );\n        Console.WriteLine( );\n\n        Console.WriteLine( formatter, &quot;Array&quot;, &quot;index&quot;, &quot;value&quot;, &quot;&quot; );\n        Console.WriteLine( formatter, &quot;-----&quot;, &quot;-----&quot;, &quot;-----&quot;, \n            &quot;----&quot; );\n\n        // Display the Length and ByteLength for each array.\n        ArrayInfo( ints, &quot;ints&quot;, 0 );\n        ArrayInfo( ints, &quot;ints&quot;, 7 );\n        ArrayInfo( ints, &quot;ints&quot;, 10 );\n        ArrayInfo( ints, &quot;ints&quot;, 17 );\n        ArrayInfo( longs, &quot;longs&quot;, 0 );\n        ArrayInfo( longs, &quot;longs&quot;, 6 );\n        ArrayInfo( longs, &quot;longs&quot;, 10 );\n        ArrayInfo( longs, &quot;longs&quot;, 17 );\n        ArrayInfo( longs, &quot;longs&quot;, 21 );\n    }\n}\n\n/*\nThis example of the Buffer.GetByte( Array, int )\nmethod generates the following output.\nNote: The arrays are displayed from right to left.\n\n  Values of arrays:\n\nlongs: 0DE0B6B3A763FFFF 094079CD1A42AAAA 04A03CE68D215555\n ints: 211D1AE3 1A7DAF1C 13DE4355 0D3ED78E 069F6BC7\n\n     Array     index    value\n     -----     -----    ----- ----\n      ints         0      199 0xC7\n      ints         7       13 0x0D\n      ints        10      222 0xDE\n      ints        17       26 0x1A\n     longs         0       85 0x55\n     longs         6      160 0xA0\n     longs        10       66 0x42\n     longs        17      255 0xFF\n     longs        21      182 0xB6\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Buffer.Bytes#3\">&#39; Example of the Buffer.GetByte method.\nImports System\nImports Microsoft.VisualBasic\n\nModule GetByteDemo\n\n    Const formatter As String = &quot;{0,10}{1,10}{2,9} {3}&quot;\n\n    &#39; Display the array contents in hexadecimal.\n    Sub DisplayArray( arr As Array, name As String )\n\n        &#39; Get the array element width; format the formatting string.\n        Dim loopX     As Integer\n        Dim elemWidth As Integer = _\n            Buffer.ByteLength( arr ) / arr.Length\n        Dim format    As String = _\n            String.Format( &quot; {{0:X{0}}}&quot;, 2 * elemWidth )\n\n        &#39; Display the array elements from right to left.\n        Console.Write( &quot;{0,7}:&quot;, name )\n        For loopX = arr.Length - 1 to 0 Step -1\n            Console.Write( format, arr( loopX ) )\n        Next loopX\n        Console.WriteLine( )\n    End Sub\n\n    Sub ArrayInfo( arr As Array, name As String, index As Integer )\n        \n        Dim value As Byte = Buffer.GetByte( arr, index )\n\n        &#39; Display the array name, index, and byte to be viewed.\n        Console.WriteLine( formatter, name, index, value, _\n            String.Format( &quot;&amp;H{0:X2}&quot;, value ) )\n    End Sub\n\n    Sub Main( )\n\n        &#39; These are the arrays to be viewed with GetByte.\n        Dim longs( ) As Long  = _\n            { 333333333333333333, 666666666666666666, 999999999999999999 }\n        Dim ints( )  As Integer = _\n            { 111111111, 222222222, 333333333, 444444444, 555555555 }\n\n        Console.WriteLine( &quot;This example of the &quot; &amp; _\n            &quot;Buffer.GetByte( Array, Integer ) &quot; &amp; vbCrLf &amp; _\n            &quot;method generates the following output.&quot; &amp; vbCrLf &amp; _\n            &quot;Note: The arrays are displayed from right to left.&quot; )\n        Console.WriteLine( vbCrLf &amp; &quot;  Values of arrays:&quot; &amp; vbCrLf )\n\n        &#39; Display the values of the arrays.\n        DisplayArray( longs, &quot;longs&quot; )\n        DisplayArray( ints, &quot;ints&quot; )\n        Console.WriteLine( )\n\n        Console.WriteLine( formatter, &quot;Array&quot;, &quot;index&quot;, _\n            &quot;value&quot;, &quot;&quot; )\n        Console.WriteLine( formatter, &quot;-----&quot;, &quot;-----&quot;, _\n            &quot;-----&quot;, &quot;----&quot; )\n\n        &#39; Display the Length and ByteLength for each array.\n        ArrayInfo( ints, &quot;ints&quot;, 0 )\n        ArrayInfo( ints, &quot;ints&quot;, 7 )\n        ArrayInfo( ints, &quot;ints&quot;, 10 )\n        ArrayInfo( ints, &quot;ints&quot;, 17 )\n        ArrayInfo( longs, &quot;longs&quot;, 0 )\n        ArrayInfo( longs, &quot;longs&quot;, 6 )\n        ArrayInfo( longs, &quot;longs&quot;, 10 )\n        ArrayInfo( longs, &quot;longs&quot;, 17 )\n        ArrayInfo( longs, &quot;longs&quot;, 21 )\n    End Sub \nEnd Module \n\n&#39; This example of the Buffer.GetByte( Array, Integer )\n&#39; method generates the following output.\n&#39; Note: The arrays are displayed from right to left.\n&#39; \n&#39;   Values of arrays:\n&#39; \n&#39;   longs: 0DE0B6B3A763FFFF 094079CD1A42AAAA 04A03CE68D215555\n&#39;    ints: 211D1AE3 1A7DAF1C 13DE4355 0D3ED78E 069F6BC7\n&#39; \n&#39;      Array     index    value\n&#39;      -----     -----    ----- ----\n&#39;       ints         0      199 &amp;HC7\n&#39;       ints         7       13 &amp;H0D\n&#39;       ints        10      222 &amp;HDE\n&#39;       ints        17       26 &amp;H1A\n&#39;      longs         0       85 &amp;H55\n&#39;      longs         6      160 &amp;HA0\n&#39;      longs        10       66 &amp;H42\n&#39;      longs        17      255 &amp;HFF\n&#39;      longs        21      182 &amp;HB6\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Buffer.Bytes#3\">// Example of the Buffer::GetByte method.\nusing namespace System;\n#define formatter &quot;{0,10}{1,10}{2,9} {3}&quot;\n\n// Display the array contents in hexadecimal.\nvoid DisplayArray( Array^ arr, String^ name )\n{\n   \n   // Get the array element width; format the formatting string.\n   int elemWidth = Buffer::ByteLength( arr ) / arr-&gt;Length;\n   String^ format = String::Format( &quot; {{0:X{0}}}&quot;, 2 * elemWidth );\n   \n   // Display the array elements from right to left.\n   Console::Write( &quot;{0,5}:&quot;, name );\n   for ( int loopX = arr-&gt;Length - 1; loopX &gt;= 0; loopX-- )\n      Console::Write( format, arr-&gt;GetValue( loopX ) );\n   Console::WriteLine();\n}\n\nvoid ArrayInfo( Array^ arr, String^ name, int index )\n{\n   unsigned char value = Buffer::GetByte( arr, index );\n   \n   // Display the array name, index, and byte to be viewed.\n   Console::WriteLine( formatter, name, index, value, String::Format( &quot;0x{0:X2}&quot;, value ) );\n}\n\nint main()\n{\n   \n   // These are the arrays to be viewed with GetByte.\n   array&lt;__int64&gt;^longs = {333333333333333333,666666666666666666,999999999999999999};\n   array&lt;int&gt;^ints = {111111111,222222222,333333333,444444444,555555555};\n   Console::WriteLine( &quot;This example of the &quot;\n   &quot;Buffer::GetByte( Array*, int ) <br>&quot;\n   &quot;method generates the following output.<br>&quot;\n   &quot;Note: The arrays are displayed from right to left.<br>&quot; );\n   Console::WriteLine( &quot;  Values of arrays:<br>&quot; );\n   \n   // Display the values of the arrays.\n   DisplayArray( longs, &quot;longs&quot; );\n   DisplayArray( ints, &quot;ints&quot; );\n   Console::WriteLine();\n   Console::WriteLine( formatter, &quot;Array&quot;, &quot;index&quot;, &quot;value&quot;, &quot;&quot; );\n   Console::WriteLine( formatter, &quot;-----&quot;, &quot;-----&quot;, &quot;-----&quot;, &quot;----&quot; );\n   \n   // Display the Length and ByteLength for each array.\n   ArrayInfo( ints, &quot;ints&quot;, 0 );\n   ArrayInfo( ints, &quot;ints&quot;, 7 );\n   ArrayInfo( ints, &quot;ints&quot;, 10 );\n   ArrayInfo( ints, &quot;ints&quot;, 17 );\n   ArrayInfo( longs, &quot;longs&quot;, 0 );\n   ArrayInfo( longs, &quot;longs&quot;, 6 );\n   ArrayInfo( longs, &quot;longs&quot;, 10 );\n   ArrayInfo( longs, &quot;longs&quot;, 17 );\n   ArrayInfo( longs, &quot;longs&quot;, 21 );\n}\n\n/*\nThis example of the Buffer::GetByte( Array*, int )\nmethod generates the following output.\nNote: The arrays are displayed from right to left.\n\n  Values of arrays:\n\nlongs: 0DE0B6B3A763FFFF 094079CD1A42AAAA 04A03CE68D215555\n ints: 211D1AE3 1A7DAF1C 13DE4355 0D3ED78E 069F6BC7\n\n     Array     index    value\n     -----     -----    ----- ----\n      ints         0      199 0xC7\n      ints         7       13 0x0D\n      ints        10      222 0xDE\n      ints        17       26 0x1A\n     longs         0       85 0x55\n     longs         6      160 0xA0\n     longs        10       66 0x42\n     longs        17      255 0xFF\n     longs        21      182 0xB6\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Buffer_MemoryCopy_System_Void__System_Void__System_Int64_System_Int64_\">\r\n    \r\n            <a id=\"System_Buffer_MemoryCopy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MemoryCopy(Void*,Void*,Int64,Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Copies a number of bytes specified as a long integer value from one address in memory to another.  </p>\n<p> This API is not CLS-compliant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void MemoryCopy (void* source, void* destination, long destinationSizeInBytes, long sourceBytesToCopy);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.void\" data-linktype=\"relative-path\">Void</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The address of the bytes to copy.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destination</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.void\" data-linktype=\"relative-path\">Void</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The target address.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destinationSizeInBytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes available in the destination memory block.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>sourceBytesToCopy</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes to copy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>sourceBytesToCopy</code> is greater than <code>destinationSizeInBytes</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method copies <code>sourceBytesToCopy</code> bytes from the address specified by <code>source</code> to the address specified by <code>destination</code>. If the buffers overlap and the difference between <code>destination</code> minus <code>source</code> is less than <code>sourceBytesToCopy</code>, the source block is copied to the destination block in reverse order.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Buffer_MemoryCopy_System_Void__System_Void__System_UInt64_System_UInt64_\">\r\n    \r\n            <a id=\"System_Buffer_MemoryCopy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MemoryCopy(Void*,Void*,UInt64,UInt64)</div>        \r\n          </div>\r\n    \r\n            <p>Copies a number of bytes specified as an unsigned long integer value from one address in memory to another.  </p>\n<p> This API is not CLS-compliant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void MemoryCopy (void* source, void* destination, ulong destinationSizeInBytes, ulong sourceBytesToCopy);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.void\" data-linktype=\"relative-path\">Void</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The address of the bytes to copy.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destination</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.void\" data-linktype=\"relative-path\">Void</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The target address.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destinationSizeInBytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes available in the destination memory block.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>sourceBytesToCopy</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes to copy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>sourceBytesToCopy</code> is greater than <code>destinationSizeInBytes</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method copies <code>sourceBytesToCopy</code> bytes from the address specified by <code>source</code> to the address specified by <code>destination</code>. If the buffers overlap and the difference between <code>destination</code> minus <code>source</code> is less than <code>sourceBytesToCopy</code>, the source block is copied to the destination block in reverse order.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Buffer_SetByte_System_Array_System_Int32_System_Byte_\">\r\n    \r\n            <a id=\"System_Buffer_SetByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetByte(Array,Int32,Byte)</div>        \r\n          </div>\r\n    \r\n            <p>Assigns a specified value to a byte at a particular location in a specified array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void SetByte (Array array, int index, byte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A location in the array.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value to assign.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is not a primitive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is negative or greater than the length of <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is larger than 2 gigabytes (GB).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>array</code> must be an array of primitives.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example assigns values to bytes at particular locations within arrays using the <code>SetByte</code> method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Buffer.Bytes#2\">&#39; Example of the Buffer.SetByte method.\nImports System\nImports Microsoft.VisualBasic\n\nModule SetByteDemo\n\n    &#39; Display the array contents in hexadecimal.\n    Sub DisplayArray( arr As Array, name As String )\n\n        &#39; Get the array element width; format the formatting string.\n        Dim loopX     As Integer\n        Dim elemWidth As Integer = _\n            Buffer.ByteLength( arr ) / arr.Length\n        Dim format    As String = _\n            String.Format( &quot; {{0:X{0}}}&quot;, 2 * elemWidth )\n\n        &#39; Display the array elements from right to left.\n        Console.Write( &quot;{0,7}:&quot;, name )\n        For loopX = arr.Length - 1 to 0 Step -1\n            Console.Write( format, arr( loopX ) )\n        Next loopX\n        Console.WriteLine( )\n    End Sub\n\n    Sub Main( )\n\n        &#39; These are the arrays to be modified with SetByte.\n        &#39; This allocates 10 elements for shorts and 3 elements\n        &#39; for longs in Visual Basic.\n        Dim shorts( 9 ) As Short\n        Dim longs( 2 )  As Long  \n\n        Console.WriteLine( &quot;This example of the &quot; &amp; _\n            &quot;Buffer.SetByte( Array, Integer, Byte ) &quot; &amp; vbCrLf &amp; _\n            &quot;method generates the following output.&quot; &amp; vbCrLf &amp; _\n            &quot;Note: The arrays are displayed from right to left.&quot; &amp; _\n            vbCrLf )\n        Console.WriteLine( &quot;  Initial values of arrays:&quot; &amp; vbCrLf )\n\n        &#39; Display the initial values of the arrays.\n        DisplayArray( shorts, &quot;shorts&quot; )\n        DisplayArray( longs, &quot;longs&quot; )\n\n        &#39; Copy two regions of source array to destination array,\n        &#39; and two overlapped copies from source to source.\n        Console.WriteLine( vbCrLf &amp; _\n            &quot;  Array values after setting byte 3 = 25, &quot; &amp; vbCrLf &amp; _\n            &quot;  byte 6 = 64, byte 12 = 121, and byte 17 = 196:&quot; &amp; vbCrLf )\n\n        Buffer.SetByte( shorts, 3, 25 )\n        Buffer.SetByte( shorts, 6, 64 )\n        Buffer.SetByte( shorts, 12, 121 )\n        Buffer.SetByte( shorts, 17, 196 )\n        Buffer.SetByte( longs, 3, 25 )\n        Buffer.SetByte( longs, 6, 64 )\n        Buffer.SetByte( longs, 12, 121 )\n        Buffer.SetByte( longs, 17, 196 )\n\n        &#39; Display the arrays again.\n        DisplayArray( shorts, &quot;shorts&quot; )\n        DisplayArray( longs, &quot;longs&quot; )\n    End Sub \nEnd Module \n\n&#39; This example of the Buffer.SetByte( Array, Integer, Byte )\n&#39; method generates the following output.\n&#39; Note: The arrays are displayed from right to left.\n&#39; \n&#39;   Initial values of arrays:\n&#39; \n&#39;  shorts: 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000\n&#39;   longs: 0000000000000000 0000000000000000 0000000000000000\n&#39; \n&#39;   Array values after setting byte 3 = 25,\n&#39;   byte 6 = 64, byte 12 = 121, and byte 17 = 196:\n&#39; \n&#39;  shorts: 0000 C400 0000 0079 0000 0000 0040 0000 1900 0000\n&#39;   longs: 000000000000C400 0000007900000000 0040000019000000\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Buffer.Bytes#2\">// Example of the Buffer.SetByte method.\nusing System;\n\nclass SetByteDemo\n{\n    // Display the array contents in hexadecimal.\n    public static void DisplayArray( Array arr, string name )\n    {\n        // Get the array element width; format the formatting string.\n        int elemWidth = Buffer.ByteLength( arr ) / arr.Length;\n        string format = String.Format( &quot; {{0:X{0}}}&quot;, 2 * elemWidth );\n\n        // Display the array elements from right to left.\n        Console.Write( &quot;{0,7}:&quot;, name );\n        for( int loopX = arr.Length - 1; loopX &gt;= 0; loopX-- )\n            Console.Write( format, arr.GetValue( loopX ) );\n        Console.WriteLine( );\n    }\n\n    public static void Main( )\n    {\n        // These are the arrays to be modified with SetByte.\n        short[ ] shorts = new short[ 10 ];\n        long[ ]  longs  = new long[ 3 ];\n\n        Console.WriteLine( &quot;This example of the &quot; +\n            &quot;Buffer.SetByte( Array, int, byte ) <br>&quot; +\n            &quot;method generates the following output.<br>&quot; +\n            &quot;Note: The arrays are displayed from right to left.<br>&quot; );\n        Console.WriteLine( &quot;  Initial values of arrays:<br>&quot; );\n\n        // Display the initial values of the arrays.\n        DisplayArray( shorts, &quot;shorts&quot; );\n        DisplayArray( longs, &quot;longs&quot; );\n\n        // Copy two regions of source array to destination array,\n        // and two overlapped copies from source to source.\n        Console.WriteLine( &quot;<br>&quot; +\n            &quot;  Array values after setting byte 3 = 25, <br>&quot; +\n            &quot;  byte 6 = 64, byte 12 = 121, and byte 17 = 196:<br>&quot; );\n\n        Buffer.SetByte( shorts, 3, 25 );\n        Buffer.SetByte( shorts, 6, 64 );\n        Buffer.SetByte( shorts, 12, 121 );\n        Buffer.SetByte( shorts, 17, 196 );\n        Buffer.SetByte( longs, 3, 25 );\n        Buffer.SetByte( longs, 6, 64 );\n        Buffer.SetByte( longs, 12, 121 );\n        Buffer.SetByte( longs, 17, 196 );\n\n        // Display the arrays again.\n        DisplayArray( shorts, &quot;shorts&quot; );\n        DisplayArray( longs, &quot;longs&quot; );\n    }\n}\n\n/*\nThis example of the Buffer.SetByte( Array, int, byte )\nmethod generates the following output.\nNote: The arrays are displayed from right to left.\n\n  Initial values of arrays:\n\n shorts: 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000\n  longs: 0000000000000000 0000000000000000 0000000000000000\n\n  Array values after setting byte 3 = 25,\n  byte 6 = 64, byte 12 = 121, and byte 17 = 196:\n\n shorts: 0000 C400 0000 0079 0000 0000 0040 0000 1900 0000\n  longs: 000000000000C400 0000007900000000 0040000019000000\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Buffer.Bytes#2\">// Example of the Buffer::SetByte method.\nusing namespace System;\n\n// Display the array contents in hexadecimal.\nvoid DisplayArray( Array^ arr, String^ name )\n{\n   \n   // Get the array element width; format the formatting string.\n   int elemWidth = Buffer::ByteLength( arr ) / arr-&gt;Length;\n   String^ format = String::Format( &quot; {{0:X{0}}}&quot;, 2 * elemWidth );\n   \n   // Display the array elements from right to left.\n   Console::Write( &quot;{0,7}:&quot;, name );\n   for ( int loopX = arr-&gt;Length - 1; loopX &gt;= 0; loopX-- )\n      Console::Write( format, arr-&gt;GetValue( loopX ) );\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // These are the arrays to be modified with SetByte.\n   array&lt;Int16&gt;^shorts = gcnew array&lt;Int16&gt;(10);\n   array&lt;Int64&gt;^longs = gcnew array&lt;Int64&gt;(3);\n   Console::WriteLine( &quot;This example of the &quot;\n   &quot;Buffer::SetByte( Array*, int, unsigned char ) <br>&quot;\n   &quot;method generates the following output.<br>&quot;\n   &quot;Note: The arrays are displayed from right to left.<br>&quot; );\n   Console::WriteLine( &quot;  Initial values of arrays:<br>&quot; );\n   \n   // Display the initial values of the arrays.\n   DisplayArray( shorts, &quot;shorts&quot; );\n   DisplayArray( longs, &quot;longs&quot; );\n   \n   // Copy two regions of source array to destination array,\n   // and two overlapped copies from source to source.\n   Console::WriteLine( &quot;<br>  Array values after setting byte 3 = 25, <br>&quot;\n   &quot;  byte 6 = 64, byte 12 = 121, and byte 17 = 196:<br>&quot; );\n   Buffer::SetByte( shorts, 3, 25 );\n   Buffer::SetByte( shorts, 6, 64 );\n   Buffer::SetByte( shorts, 12, 121 );\n   Buffer::SetByte( shorts, 17, 196 );\n   Buffer::SetByte( longs, 3, 25 );\n   Buffer::SetByte( longs, 6, 64 );\n   Buffer::SetByte( longs, 12, 121 );\n   Buffer::SetByte( longs, 17, 196 );\n   \n   // Display the arrays again.\n   DisplayArray( shorts, &quot;shorts&quot; );\n   DisplayArray( longs, &quot;longs&quot; );\n}\n\n/*\nThis example of the Buffer::SetByte( Array*, int, unsigned char )\nmethod generates the following output.\nNote: The arrays are displayed from right to left.\n\n  Initial values of arrays:\n\n shorts: 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000\n  longs: 0000000000000000 0000000000000000 0000000000000000\n\n  Array values after setting byte 3 = 25,\n  byte 6 = 64, byte 12 = 121, and byte 17 = 196:\n\n shorts: 0000 C400 0000 0079 0000 0000 0040 0000 1900 0000\n  longs: 000000000000C400 0000007900000000 0040000019000000\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Buffer.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Buffer.yml\">\r\n<meta name=\"APIName\" content=\"System.Buffer\">\r\n<meta name=\"APIName\" content=\"System.Buffer.BlockCopy\">\r\n<meta name=\"APIName\" content=\"System.Buffer.ByteLength\">\r\n<meta name=\"APIName\" content=\"System.Buffer.GetByte\">\r\n<meta name=\"APIName\" content=\"System.Buffer.MemoryCopy\">\r\n<meta name=\"APIName\" content=\"System.Buffer.SetByte\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"dd28fb46-ebd0-02ef-528f-1aa61f9f02d6\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System\\Buffer.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Manipulates arrays of primitive types.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Buffer\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Buffer.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Buffer.yml","open_to_public_contributors":true,"api_name":["System.Buffer","System.Buffer.BlockCopy","System.Buffer.ByteLength","System.Buffer.GetByte","System.Buffer.MemoryCopy","System.Buffer.SetByte"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Buffer","System::Buffer","System.Buffer.BlockCopy","System::Buffer::BlockCopy","System.Buffer.ByteLength","System::Buffer::ByteLength","System.Buffer.GetByte","System::Buffer::GetByte","System.Buffer.MemoryCopy","System::Buffer::MemoryCopy","System.Buffer.SetByte","System::Buffer::SetByte"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"dd28fb46-ebd0-02ef-528f-1aa61f9f02d6","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System\\Buffer.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/Buffer.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Buffer class | Microsoft Docs","_op_ogTitle":"Buffer class","description":"Manipulates arrays of primitive types.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Buffer","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.buffer","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.buffer","fileRelativePath":"System.Buffer.html"},"themesRelativePathToOutputRoot":"_themes/"}