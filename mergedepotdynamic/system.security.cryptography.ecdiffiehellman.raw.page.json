{"content":"    \r\n    <h1 id=\"System_Security_Cryptography_ECDiffieHellman\">\r\n      <span class=\"lang-csharp\">ECDiffieHellman</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides an abstract base class that Elliptic Curve Diffie-Hellman (ECDH) algorithm implementations can derive from. This class provides the basic set of operations that all ECDH implementations must support.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract class ECDiffieHellman : System.Security.Cryptography.AsymmetricAlgorithm</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">System.Security.Cryptography.AsymmetricAlgorithm</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">ECDiffieHellman</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm#System_Security_Cryptography_AsymmetricAlgorithm_Clear\" data-linktype=\"relative-path\">Clear()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm#System_Security_Cryptography_AsymmetricAlgorithm_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm#System_Security_Cryptography_AsymmetricAlgorithm_Dispose_System_Boolean_\" data-linktype=\"relative-path\">Dispose(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm#System_Security_Cryptography_AsymmetricAlgorithm_FromXmlString_System_String_\" data-linktype=\"relative-path\">FromXmlString(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm#System_Security_Cryptography_AsymmetricAlgorithm_KeySize\" data-linktype=\"relative-path\">KeySize</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm#System_Security_Cryptography_AsymmetricAlgorithm_KeySizeValue\" data-linktype=\"relative-path\">KeySizeValue</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm#System_Security_Cryptography_AsymmetricAlgorithm_LegalKeySizes\" data-linktype=\"relative-path\">LegalKeySizes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm#System_Security_Cryptography_AsymmetricAlgorithm_LegalKeySizesValue\" data-linktype=\"relative-path\">LegalKeySizesValue</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm#System_Security_Cryptography_AsymmetricAlgorithm_ToXmlString_System_Boolean_\" data-linktype=\"relative-path\">ToXmlString(Boolean)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>This class serves as the abstract base class for ECDH implementations.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_ECDiffieHellman__ctor\" data-linktype=\"self-bookmark\">ECDiffieHellman()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellman\" data-linktype=\"relative-path\">ECDiffieHellman</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_ECDiffieHellman_KeyExchangeAlgorithm\" data-linktype=\"self-bookmark\">KeyExchangeAlgorithm</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the name of the key exchange algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_ECDiffieHellman_PublicKey\" data-linktype=\"self-bookmark\">PublicKey</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the public key that is being used by the current Elliptic Curve Diffie-Hellman (ECDH) instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_ECDiffieHellman_SignatureAlgorithm\" data-linktype=\"self-bookmark\">SignatureAlgorithm</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the name of the signature algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_ECDiffieHellman_Create\" data-linktype=\"self-bookmark\">Create()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_ECDiffieHellman_Create_System_String_\" data-linktype=\"self-bookmark\">Create(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new instance of the specified implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_ECDiffieHellman_DeriveKeyFromHash_System_Security_Cryptography_ECDiffieHellmanPublicKey_System_Security_Cryptography_HashAlgorithmName_\" data-linktype=\"self-bookmark\">DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Derives bytes that can be used as a key using a hash function, given another party&#39;s public key and hash algorithm&#39;s name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_ECDiffieHellman_DeriveKeyFromHash_System_Security_Cryptography_ECDiffieHellmanPublicKey_System_Security_Cryptography_HashAlgorithmName_System_Byte___System_Byte___\" data-linktype=\"self-bookmark\">DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When implemented in a derived class, derives bytes that can be used as a key using a hash function, given another party&#39;s public key, hash algorithm&#39;s name, a prepend value and an append value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_ECDiffieHellman_DeriveKeyFromHmac_System_Security_Cryptography_ECDiffieHellmanPublicKey_System_Security_Cryptography_HashAlgorithmName_System_Byte___\" data-linktype=\"self-bookmark\">DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_ECDiffieHellman_DeriveKeyFromHmac_System_Security_Cryptography_ECDiffieHellmanPublicKey_System_Security_Cryptography_HashAlgorithmName_System_Byte___System_Byte___System_Byte___\" data-linktype=\"self-bookmark\">DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When implemented in a derived class, derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_ECDiffieHellman_DeriveKeyMaterial_System_Security_Cryptography_ECDiffieHellmanPublicKey_\" data-linktype=\"self-bookmark\">DeriveKeyMaterial(ECDiffieHellmanPublicKey)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Derives bytes that can be used as a key, given another party&#39;s public key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_ECDiffieHellman_DeriveKeyTls_System_Security_Cryptography_ECDiffieHellmanPublicKey_System_Byte___System_Byte___\" data-linktype=\"self-bookmark\">DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When implemented in a derived class, derives bytes that can be used as a key using a Transport Layer Security (TLS) Pseudo-Random Function (PRF) derivation algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_ECDiffieHellman__ctor\">\r\n    \r\n            <a id=\"System_Security_Cryptography_ECDiffieHellman__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ECDiffieHellman()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellman\" data-linktype=\"relative-path\">ECDiffieHellman</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected ECDiffieHellman ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor is called by classes that derive from the <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellman\" data-linktype=\"relative-path\">ECDiffieHellman</a> class. The <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmancng\" data-linktype=\"relative-path\">ECDiffieHellmanCng</a> class is the only implementation that is currently included in the .NET Framework. For information about how to create a new implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm, see the <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellman#System_Security_Cryptography_ECDiffieHellman_Create_\" data-linktype=\"relative-path\">Create</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_ECDiffieHellman_KeyExchangeAlgorithm\">\r\n    \r\n            <a id=\"System_Security_Cryptography_ECDiffieHellman_KeyExchangeAlgorithm_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeyExchangeAlgorithm</div>        \r\n          </div>\r\n    \r\n            <p>Gets the name of the key exchange algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string KeyExchangeAlgorithm { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the key exchange algorithm.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default (non-overridden) implementation of this property returns the string &quot;ECDiffieHellman&quot;.  </p>\n<p> This property is inherited from the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> base class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_ECDiffieHellman_PublicKey\">\r\n    \r\n            <a id=\"System_Security_Cryptography_ECDiffieHellman_PublicKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PublicKey</div>        \r\n          </div>\r\n    \r\n            <p>Gets the public key that is being used by the current Elliptic Curve Diffie-Hellman (ECDH) instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract System.Security.Cryptography.ECDiffieHellmanPublicKey PublicKey { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmanpublickey\" data-linktype=\"relative-path\">ECDiffieHellmanPublicKey</a></div>\r\n                  </div>\r\n                  <p>The public part of the ECDH key pair that is being used by this <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellman\" data-linktype=\"relative-path\">ECDiffieHellman</a> instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_ECDiffieHellman_SignatureAlgorithm\">\r\n    \r\n            <a id=\"System_Security_Cryptography_ECDiffieHellman_SignatureAlgorithm_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SignatureAlgorithm</div>        \r\n          </div>\r\n    \r\n            <p>Gets the name of the signature algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string SignatureAlgorithm { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Always <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is inherited from the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> base class.  </p>\n<p> The Elliptic Curve Diffie-Hellman (ECDH) algorithm is used for key derivation, not digital signature generation. Therefore, this property returns <code>null</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_ECDiffieHellman_Create\">\r\n    \r\n            <a id=\"System_Security_Cryptography_ECDiffieHellman_Create_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Create()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Security.Cryptography.ECDiffieHellman Create ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellman\" data-linktype=\"relative-path\">ECDiffieHellman</a></div>\r\n                  </div>\r\n                  <p>A new instance of the default implementation of this class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_ECDiffieHellman_Create_System_String_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_ECDiffieHellman_Create_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Create(String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new instance of the specified implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Security.Cryptography.ECDiffieHellman Create (string algorithm);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>algorithm</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of an implementation of the ECDH algorithm.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellman\" data-linktype=\"relative-path\">ECDiffieHellman</a></div>\r\n                  </div>\r\n                  <p>A new instance of the specified implementation of this class. If the specified algorithm name does not map to an ECDH implementation, this method returns <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>algorithm</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you develop your own implementation of an <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellman\" data-linktype=\"relative-path\">ECDiffieHellman</a> object, you can use the Create method overload to create a custom <code>algorithm</code> string that specifies your implementation.  </p>\n<p> The <code>algorithm</code> parameter specifies the name of an implementation of the ECDH algorithm. The following strings all refer to the same implementation, which is the only implementation currently supported in the .NET Framework:  </p>\n<ul>\n<li><p>&quot;ECDH&quot;  </p>\n</li>\n<li><p>&quot;ECDiffieHellman&quot;  </p>\n</li>\n<li><p>&quot;ECDiffieHellmanCng&quot;  </p>\n</li>\n<li><p>&quot;System.Security.Cryptography.ECDiffieHellmanCng&quot;  </p>\n<p>You can also provide the name of a custom ECDH implementation for the <code>algorithm</code> parameter. If you do that, the <a class=\"xref\" href=\"system.security.cryptography.cryptoconfig\" data-linktype=\"relative-path\">CryptoConfig</a> object will use it to determine whether an ECDH object can be created.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_ECDiffieHellman_DeriveKeyFromHash_System_Security_Cryptography_ECDiffieHellmanPublicKey_System_Security_Cryptography_HashAlgorithmName_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_ECDiffieHellman_DeriveKeyFromHash_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName)</div>        \r\n          </div>\r\n    \r\n            <p>Derives bytes that can be used as a key using a hash function, given another party&#39;s public key and hash algorithm&#39;s name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public byte[] DeriveKeyFromHash (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>otherPartyPublicKey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmanpublickey\" data-linktype=\"relative-path\">ECDiffieHellmanPublicKey</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The other party&#39;s public key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hashAlgorithm</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithmname\" data-linktype=\"relative-path\">HashAlgorithmName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The hash algorithm  to use to derive the key material.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>The key material from the key exchange with the other partyâ€™s public key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This overload calls the <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellman#System_Security_Cryptography_ECDiffieHellman_DeriveKeyFromHash_\" data-linktype=\"relative-path\">DeriveKeyFromHash</a> method passing <code>null</code> as the prepend and append values.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_ECDiffieHellman_DeriveKeyFromHash_System_Security_Cryptography_ECDiffieHellmanPublicKey_System_Security_Cryptography_HashAlgorithmName_System_Byte___System_Byte___\">\r\n    \r\n            <a id=\"System_Security_Cryptography_ECDiffieHellman_DeriveKeyFromHash_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>When implemented in a derived class, derives bytes that can be used as a key using a hash function, given another party&#39;s public key, hash algorithm&#39;s name, a prepend value and an append value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual byte[] DeriveKeyFromHash (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] secretPrepend, byte[] secretAppend);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>otherPartyPublicKey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmanpublickey\" data-linktype=\"relative-path\">ECDiffieHellmanPublicKey</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The other party&#39;s public key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hashAlgorithm</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithmname\" data-linktype=\"relative-path\">HashAlgorithmName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The hash algorithm  to use to derive the key material.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>secretPrepend</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value to prepend to the derived secret before hashing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>secretAppend</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value to append to the derived secret before hashing.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>The key material from the key exchange with the other partyâ€™s public key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>A derived class must override this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_ECDiffieHellman_DeriveKeyFromHmac_System_Security_Cryptography_ECDiffieHellmanPublicKey_System_Security_Cryptography_HashAlgorithmName_System_Byte___\">\r\n    \r\n            <a id=\"System_Security_Cryptography_ECDiffieHellman_DeriveKeyFromHmac_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public byte[] DeriveKeyFromHmac (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>otherPartyPublicKey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmanpublickey\" data-linktype=\"relative-path\">ECDiffieHellmanPublicKey</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The other party&#39;s public key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hashAlgorithm</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithmname\" data-linktype=\"relative-path\">HashAlgorithmName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The hash algorithm to use to derive the key material.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hmacKey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key for the HMAC.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>The key material from the key exchange with the other partyâ€™s public key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This overload calls the <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellman#System_Security_Cryptography_ECDiffieHellman_DeriveKeyFromHmac_\" data-linktype=\"relative-path\">DeriveKeyFromHmac</a> method passing <code>null</code> as the prepend and append values.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_ECDiffieHellman_DeriveKeyFromHmac_System_Security_Cryptography_ECDiffieHellmanPublicKey_System_Security_Cryptography_HashAlgorithmName_System_Byte___System_Byte___System_Byte___\">\r\n    \r\n            <a id=\"System_Security_Cryptography_ECDiffieHellman_DeriveKeyFromHmac_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>When implemented in a derived class, derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual byte[] DeriveKeyFromHmac (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey, byte[] secretPrepend, byte[] secretAppend);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>otherPartyPublicKey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmanpublickey\" data-linktype=\"relative-path\">ECDiffieHellmanPublicKey</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The other party&#39;s public key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hashAlgorithm</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithmname\" data-linktype=\"relative-path\">HashAlgorithmName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The hash algorithm to use to derive the key material.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hmacKey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key for the HMAC.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>secretPrepend</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value to prepend to the derived secret before hashing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>secretAppend</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value to append to the derived secret before hashing.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>The key material from the key exchange with the other partyâ€™s public key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>A derived class must override this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_ECDiffieHellman_DeriveKeyMaterial_System_Security_Cryptography_ECDiffieHellmanPublicKey_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_ECDiffieHellman_DeriveKeyMaterial_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeriveKeyMaterial(ECDiffieHellmanPublicKey)</div>        \r\n          </div>\r\n    \r\n            <p>Derives bytes that can be used as a key, given another party&#39;s public key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual byte[] DeriveKeyMaterial (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>otherPartyPublicKey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmanpublickey\" data-linktype=\"relative-path\">ECDiffieHellmanPublicKey</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The other party&#39;s public key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>The key material from the key exchange with the other partyâ€™s public key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about public keys, see the <a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmanpublickey\" data-linktype=\"relative-path\">ECDiffieHellmanPublicKey</a> class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_ECDiffieHellman_DeriveKeyTls_System_Security_Cryptography_ECDiffieHellmanPublicKey_System_Byte___System_Byte___\">\r\n    \r\n            <a id=\"System_Security_Cryptography_ECDiffieHellman_DeriveKeyTls_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>When implemented in a derived class, derives bytes that can be used as a key using a Transport Layer Security (TLS) Pseudo-Random Function (PRF) derivation algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual byte[] DeriveKeyTls (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, byte[] prfLabel, byte[] prfSeed);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>otherPartyPublicKey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmanpublickey\" data-linktype=\"relative-path\">ECDiffieHellmanPublicKey</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The other party&#39;s public key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>prfLabel</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The ASCII-encoded PRF label.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>prfSeed</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The 64-byte PRF seed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>The key material from the key exchange with the other partyâ€™s public key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>A derived class must override this method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/417c04fd1daf0cb211ec4909020356fc1fe69260/fulldocset/System.Security.Cryptography.ECDiffieHellman.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.ECDiffieHellman.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.ECDiffieHellman\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.ECDiffieHellman..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.ECDiffieHellman.Create\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.ECDiffieHellman.PublicKey\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm\">\r\n<meta name=\"APILocation\" content=\"System.Core.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-02-28 06:06 AM\">\r\n<meta name=\"document_id\" content=\"52db4a7a-a6d6-03e4-fead-3ba6621ef944\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides an abstract base class that Elliptic Curve Diffie-Hellman (ECDH) algorithm implementations can derive from. This class provides the basic set of operations that all ECDH implementations mustâ€¦\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Security.Cryptography/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Cryptography.ECDiffieHellman\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/417c04fd1daf0cb211ec4909020356fc1fe69260/fulldocset/System.Security.Cryptography.ECDiffieHellman.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.ECDiffieHellman.yml","open_to_public_contributors":true,"api_name":["System.Security.Cryptography.ECDiffieHellman","System.Security.Cryptography.ECDiffieHellman..ctor","System.Security.Cryptography.ECDiffieHellman.Create","System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash","System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac","System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial","System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls","System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm","System.Security.Cryptography.ECDiffieHellman.PublicKey","System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm"],"api_location":["System.Core.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Cryptography.ECDiffieHellman","System::Security::Cryptography::ECDiffieHellman","System.Security.Cryptography.ECDiffieHellman.#ctor","System::Security::Cryptography::ECDiffieHellman::#ctor","System.Security.Cryptography.ECDiffieHellman.Create","System::Security::Cryptography::ECDiffieHellman::Create","System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash","System::Security::Cryptography::ECDiffieHellman::DeriveKeyFromHash","System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac","System::Security::Cryptography::ECDiffieHellman::DeriveKeyFromHmac","System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial","System::Security::Cryptography::ECDiffieHellman::DeriveKeyMaterial","System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls","System::Security::Cryptography::ECDiffieHellman::DeriveKeyTls","System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm","System::Security::Cryptography::ECDiffieHellman::KeyExchangeAlgorithm","System.Security.Cryptography.ECDiffieHellman.PublicKey","System::Security::Cryptography::ECDiffieHellman::PublicKey","System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm","System::Security::Cryptography::ECDiffieHellman::SignatureAlgorithm"],"dev_langs":["csharp"],"updated_at":"2017-02-28 06:06 AM","document_id":"52db4a7a-a6d6-03e4-fead-3ba6621ef944","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Security.Cryptography/ECDiffieHellman.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ECDiffieHellman class | Microsoft Docs","_op_ogTitle":"ECDiffieHellman class","description":"Provides an abstract base class that Elliptic Curve Diffie-Hellman (ECDH) algorithm implementations can derive from. This class provides the basic set of operations that all ECDH implementations mustâ€¦","toc_asset_id":"_splitted/System.Security.Cryptography/toc.json","toc_rel":"_splitted/System.Security.Cryptography/toc.json","source_url":"","ms.assetid":"System.Security.Cryptography.ECDiffieHellman","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.ecdiffiehellman","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.ecdiffiehellman","fileRelativePath":"System.Security.Cryptography.ECDiffieHellman.html"},"themesRelativePathToOutputRoot":"_themes/"}