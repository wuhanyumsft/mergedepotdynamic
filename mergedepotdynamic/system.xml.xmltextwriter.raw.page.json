{"content":"    \r\n    <h1 id=\"System_Xml_XmlTextWriter\">\r\n      <span class=\"lang-csharp\">XmlTextWriter</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a writer that provides a fast, non-cached, forward-only way of generating streams or files containing XML data that conforms to the W3C Extensible Markup Language (XML) 1.0 and the Namespaces in XML recommendations.  </p>\n<p> Starting with the .NET Framework 2.0, we recommend that you use the <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> class instead.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]\npublic class XmlTextWriter : System.Xml.XmlWriter</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">System.Xml.XmlWriter</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">XmlTextWriter</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_System_IO_Stream_\" data-linktype=\"relative-path\">Create(Stream)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_System_IO_Stream_System_Xml_XmlWriterSettings_\" data-linktype=\"relative-path\">Create(Stream,XmlWriterSettings)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_System_IO_TextWriter_\" data-linktype=\"relative-path\">Create(TextWriter)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_System_IO_TextWriter_System_Xml_XmlWriterSettings_\" data-linktype=\"relative-path\">Create(TextWriter,XmlWriterSettings)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_System_String_\" data-linktype=\"relative-path\">Create(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_System_String_System_Xml_XmlWriterSettings_\" data-linktype=\"relative-path\">Create(String,XmlWriterSettings)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_System_Text_StringBuilder_\" data-linktype=\"relative-path\">Create(StringBuilder)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_System_Text_StringBuilder_System_Xml_XmlWriterSettings_\" data-linktype=\"relative-path\">Create(StringBuilder,XmlWriterSettings)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_System_Xml_XmlWriter_\" data-linktype=\"relative-path\">Create(XmlWriter)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_System_Xml_XmlWriter_System_Xml_XmlWriterSettings_\" data-linktype=\"relative-path\">Create(XmlWriter,XmlWriterSettings)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Dispose_System_Boolean_\" data-linktype=\"relative-path\">Dispose(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_FlushAsync\" data-linktype=\"relative-path\">FlushAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Settings\" data-linktype=\"relative-path\">Settings</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteAttributes_System_Xml_XmlReader_System_Boolean_\" data-linktype=\"relative-path\">WriteAttributes(XmlReader,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteAttributesAsync_System_Xml_XmlReader_System_Boolean_\" data-linktype=\"relative-path\">WriteAttributesAsync(XmlReader,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteAttributeString_System_String_System_String_\" data-linktype=\"relative-path\">WriteAttributeString(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteAttributeString_System_String_System_String_System_String_\" data-linktype=\"relative-path\">WriteAttributeString(String,String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteAttributeString_System_String_System_String_System_String_System_String_\" data-linktype=\"relative-path\">WriteAttributeString(String,String,String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteAttributeStringAsync_System_String_System_String_System_String_System_String_\" data-linktype=\"relative-path\">WriteAttributeStringAsync(String,String,String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteBase64Async_System_Byte___System_Int32_System_Int32_\" data-linktype=\"relative-path\">WriteBase64Async(Byte[],Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteBinHexAsync_System_Byte___System_Int32_System_Int32_\" data-linktype=\"relative-path\">WriteBinHexAsync(Byte[],Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteCDataAsync_System_String_\" data-linktype=\"relative-path\">WriteCDataAsync(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteCharEntityAsync_System_Char_\" data-linktype=\"relative-path\">WriteCharEntityAsync(Char)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteCharsAsync_System_Char___System_Int32_System_Int32_\" data-linktype=\"relative-path\">WriteCharsAsync(Char[],Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteCommentAsync_System_String_\" data-linktype=\"relative-path\">WriteCommentAsync(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteDocTypeAsync_System_String_System_String_System_String_System_String_\" data-linktype=\"relative-path\">WriteDocTypeAsync(String,String,String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteElementString_System_String_System_String_\" data-linktype=\"relative-path\">WriteElementString(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteElementString_System_String_System_String_System_String_\" data-linktype=\"relative-path\">WriteElementString(String,String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteElementString_System_String_System_String_System_String_System_String_\" data-linktype=\"relative-path\">WriteElementString(String,String,String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteElementStringAsync_System_String_System_String_System_String_System_String_\" data-linktype=\"relative-path\">WriteElementStringAsync(String,String,String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteEndAttributeAsync\" data-linktype=\"relative-path\">WriteEndAttributeAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteEndDocumentAsync\" data-linktype=\"relative-path\">WriteEndDocumentAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteEndElementAsync\" data-linktype=\"relative-path\">WriteEndElementAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteEntityRefAsync_System_String_\" data-linktype=\"relative-path\">WriteEntityRefAsync(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteFullEndElementAsync\" data-linktype=\"relative-path\">WriteFullEndElementAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteNameAsync_System_String_\" data-linktype=\"relative-path\">WriteNameAsync(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteNmTokenAsync_System_String_\" data-linktype=\"relative-path\">WriteNmTokenAsync(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteNode_System_Xml_XmlReader_System_Boolean_\" data-linktype=\"relative-path\">WriteNode(XmlReader,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteNode_System_Xml_XPath_XPathNavigator_System_Boolean_\" data-linktype=\"relative-path\">WriteNode(XPathNavigator,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteNodeAsync_System_Xml_XmlReader_System_Boolean_\" data-linktype=\"relative-path\">WriteNodeAsync(XmlReader,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteNodeAsync_System_Xml_XPath_XPathNavigator_System_Boolean_\" data-linktype=\"relative-path\">WriteNodeAsync(XPathNavigator,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteProcessingInstructionAsync_System_String_System_String_\" data-linktype=\"relative-path\">WriteProcessingInstructionAsync(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteQualifiedNameAsync_System_String_System_String_\" data-linktype=\"relative-path\">WriteQualifiedNameAsync(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteRawAsync_System_Char___System_Int32_System_Int32_\" data-linktype=\"relative-path\">WriteRawAsync(Char[],Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteRawAsync_System_String_\" data-linktype=\"relative-path\">WriteRawAsync(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteStartAttribute_System_String_\" data-linktype=\"relative-path\">WriteStartAttribute(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteStartAttribute_System_String_System_String_\" data-linktype=\"relative-path\">WriteStartAttribute(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteStartAttributeAsync_System_String_System_String_System_String_\" data-linktype=\"relative-path\">WriteStartAttributeAsync(String,String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteStartDocumentAsync\" data-linktype=\"relative-path\">WriteStartDocumentAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteStartDocumentAsync_System_Boolean_\" data-linktype=\"relative-path\">WriteStartDocumentAsync(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteStartElement_System_String_\" data-linktype=\"relative-path\">WriteStartElement(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteStartElement_System_String_System_String_\" data-linktype=\"relative-path\">WriteStartElement(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteStartElementAsync_System_String_System_String_System_String_\" data-linktype=\"relative-path\">WriteStartElementAsync(String,String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteStringAsync_System_String_\" data-linktype=\"relative-path\">WriteStringAsync(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteSurrogateCharEntityAsync_System_Char_System_Char_\" data-linktype=\"relative-path\">WriteSurrogateCharEntityAsync(Char,Char)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteValue_System_Boolean_\" data-linktype=\"relative-path\">WriteValue(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteValue_System_DateTime_\" data-linktype=\"relative-path\">WriteValue(DateTime)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteValue_System_DateTimeOffset_\" data-linktype=\"relative-path\">WriteValue(DateTimeOffset)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteValue_System_Decimal_\" data-linktype=\"relative-path\">WriteValue(Decimal)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteValue_System_Double_\" data-linktype=\"relative-path\">WriteValue(Double)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteValue_System_Int32_\" data-linktype=\"relative-path\">WriteValue(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteValue_System_Int64_\" data-linktype=\"relative-path\">WriteValue(Int64)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteValue_System_Object_\" data-linktype=\"relative-path\">WriteValue(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteValue_System_Single_\" data-linktype=\"relative-path\">WriteValue(Single)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteValue_System_String_\" data-linktype=\"relative-path\">WriteValue(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteWhitespaceAsync_System_String_\" data-linktype=\"relative-path\">WriteWhitespaceAsync(String)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>This class implements the <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> class.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.  </p>\n</div>\n<p> <code>XmlTextWriter</code> maintains a namespace stack corresponding to all the namespaces defined in the current element stack. Using <code>XmlTextWriter</code> you can declare namespaces manually.  </p>\n<pre><code>w.WriteStartElement(&quot;root&quot;);  \nw.WriteAttributeString(&quot;xmlns&quot;, &quot;x&quot;, null, &quot;urn:1&quot;);  \n w.WriteStartElement(&quot;item&quot;,&quot;urn:1&quot;);  \n w.WriteEndElement();  \n w.WriteStartElement(&quot;item&quot;,&quot;urn:1&quot;);  \n w.WriteEndElement();  \nw.WriteEndElement();  \n</code></pre><p> The above C# code produces the following output. <code>XmlTextWriter</code> promotes the namespace declaration to the root element to avoid having it duplicated on the two child elements. The child elements pick up the prefix from the namespace declaration.  </p>\n<pre><code>&lt;root xmlns:x=&quot;urn:1&quot;&gt;  \n &lt;x:item/&gt;  \n &lt;x:item/&gt;  \n&lt;/x:root&gt;  \n</code></pre><p> <code>XmlTextWriter</code> also allows you to override the current namespace declaration. In the following example, the namespace URI &quot;123&quot; is overridden by &quot;abc&quot; to produce the XML element <code>&lt;x:node xmlns:x=&quot;abc&quot;/&gt;</code>.  </p>\n<pre><code>w.WriteStartElement(&quot;x&quot;,&quot;node&quot;,&quot;123&quot;);  \nw.WriteAttributeString(&quot;xmlns&quot;,&quot;x&quot;,null,&quot;abc&quot;);  \n</code></pre><p> By using the write methods that take a prefix as an argument you can also specify which prefix to use. In the following example, two different prefixes are mapped to the same namespace URI to produce the XML text <code>&lt;x:root xmlns:x=&quot;urn:1&quot;&gt;&lt;y:item xmlns:y=&quot;urn:1&quot;/&gt;&lt;/x:root&gt;</code>.  </p>\n<pre><code>XmlTextWriter w = new XmlTextWriter(Console.Out);  \nw.WriteStartElement(&quot;x&quot;,&quot;root&quot;,&quot;urn:1&quot;);  \n w.WriteStartElement(&quot;y&quot;,&quot;item&quot;,&quot;urn:1&quot;);  \n w.WriteEndElement();  \nw.WriteEndElement();  \nw.Close();  \n</code></pre><p> If there are multiple namespace declarations mapping different prefixes to the same namespace URI, <code>XmlTextWriter</code> walks the stack of namespace declarations backwards and picks the closest one.  </p>\n<pre><code>XmlTextWriter w = new XmlTextWriter(Console.Out);  \nw.Formatting = Formatting.Indented;  \nw.WriteStartElement(&quot;x&quot;,&quot;root&quot;,&quot;urn:1&quot;);  \nw.WriteStartElement(&quot;y&quot;,&quot;item&quot;,&quot;urn:1&quot;);  \nw.WriteAttributeString(&quot;attr&quot;,&quot;urn:1&quot;,&quot;123&quot;);  \nw.WriteEndElement();  \nw.WriteEndElement();  \nw.Close();  \n</code></pre><p> In the above C# example, because the <code>WriteAttributeString</code> call does not specify a prefix, the writer uses the last prefix pushed onto the namespace stack, and produces the following XML:  </p>\n<pre><code>&lt;x:root xmlns:x=&quot;urn:1&quot;&gt;  \n &lt;y:item y:attr=&quot;123&quot; xmlns:y=&quot;urn:1&quot; /&gt;  \n&lt;/x:root&gt;  \n</code></pre><p> If namespace conflicts occur, <code>XmlTextWriter</code> resolves them by generating alternate prefixes. For example, if an attribute and element have the same prefix but different namespaces, <code>XmlWriter</code> generates an alternate prefix for the attribute. The generated prefixes are named <code>n{i}</code> where <code>i</code> is a number beginning at 1. The number is reset to 1 for each element.  </p>\n<p> Attributes which are associated with a namespace URI must have a prefix (default namespaces do not apply to attributes). This conforms to section 5.2 of the W3C Namespaces in XML recommendation. If an attribute references a namespace URI, but does not specify a prefix, the writer generates a prefix for the attribute.  </p>\n<p> When writing an empty element, an additional space is added between tag name and the closing tag, for example <code>&lt;item /&gt;</code>. This provides compatibility with older browsers.  </p>\n<p> When a <code>String</code> is used as method parameter, <code>null</code> and <code>String.Empty</code> are equivalent. <code>String.Empty</code> follows the W3C rules.  </p>\n<p> To write strongly typed data, use the <a class=\"xref\" href=\"system.xml.xmlconvert\" data-linktype=\"relative-path\">XmlConvert</a> class to convert data types to string. For example, the following C# code converts the data from <code>Double</code> to <code>String</code> and writes the element <code>&lt;price&gt;19.95&lt;/price&gt;</code>.  </p>\n<pre><code>Double price = 19.95;  \nwriter.WriteElementString(&quot;price&quot;, XmlConvert.ToString(price));  \n</code></pre><p> <code>XmlTextWriter</code> does not check for the following:  </p>\n<ul>\n<li><p>Invalid characters in attribute and element names.  </p>\n</li>\n<li><p>Unicode characters that do not fit the specified encoding. If the Unicode characters do not fit the specified encoding, the <code>XmlTextWriter</code> does not escape the Unicode characters into character entities.  </p>\n</li>\n<li><p>Duplicate attributes.  </p>\n</li>\n<li><p>Characters in the DOCTYPE public identifier or system identifier.  </p>\n</li>\n</ul>\n<h2 id=\"security-considerations\">Security Considerations</h2>\n<p> The following items are things to consider when working with the XmlTextWriter class.  </p>\n<ul>\n<li><p>Exceptions thrown by the XmlTextWriter can disclose path information that you do not want bubbled up to the application. Your applications must catch exceptions and process them appropriately.  </p>\n</li>\n<li><p>When you pass the XmlTextWriter to another application the underlying stream is exposed to that application. If you need to pass the XmlTextWriter to a semi-trusted application, you should use an <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> object created by the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method instead.  </p>\n</li>\n<li><p>The XmlTextWriter does not validate any data that is passed to the <a class=\"xref\" href=\"system.xml.xmltextwriter#System_Xml_XmlTextWriter_WriteDocType_\" data-linktype=\"relative-path\">WriteDocType</a> or <a class=\"xref\" href=\"system.xml.xmltextwriter#System_Xml_XmlTextWriter_WriteRaw_\" data-linktype=\"relative-path\">WriteRaw</a> methods. You should not pass arbitrary data to these methods.  </p>\n</li>\n<li><p>If the default settings are changed, there is no guarantee that the generated output is well-formed XML data.  </p>\n</li>\n<li><p>Do not accept supporting components, such as an <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> object, from an untrusted source.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter__ctor_System_IO_TextWriter_\" data-linktype=\"self-bookmark\">XmlTextWriter(TextWriter)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an instance of the <code>XmlTextWriter</code> class using the specified <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter__ctor_System_IO_Stream_System_Text_Encoding_\" data-linktype=\"self-bookmark\">XmlTextWriter(Stream,Encoding)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an instance of the <code>XmlTextWriter</code> class using the specified stream and encoding.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter__ctor_System_String_System_Text_Encoding_\" data-linktype=\"self-bookmark\">XmlTextWriter(String,Encoding)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an instance of the <a class=\"xref\" href=\"system.xml.xmltextwriter\" data-linktype=\"relative-path\">XmlTextWriter</a> class using the specified file.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter_BaseStream\" data-linktype=\"self-bookmark\">BaseStream</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the underlying stream object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter_Formatting\" data-linktype=\"self-bookmark\">Formatting</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates how the output is formatted.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter_Indentation\" data-linktype=\"self-bookmark\">Indentation</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets how many IndentChars to write for each level in the hierarchy when <span class=\"xref\">stem.Xml.XmlTextWriter.Formatting*</span> is set to <code>Formatting.Indented</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter_IndentChar\" data-linktype=\"self-bookmark\">IndentChar</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets which character to use for indenting when <span class=\"xref\">stem.Xml.XmlTextWriter.Formatting*</span> is set to <code>Formatting.Indented</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter_Namespaces\" data-linktype=\"self-bookmark\">Namespaces</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether to do namespace support.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter_QuoteChar\" data-linktype=\"self-bookmark\">QuoteChar</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets which character to use to quote attribute values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter_WriteState\" data-linktype=\"self-bookmark\">WriteState</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the state of the writer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter_XmlLang\" data-linktype=\"self-bookmark\">XmlLang</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the current <code>xml:lang</code> scope.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter_XmlSpace\" data-linktype=\"self-bookmark\">XmlSpace</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an <a class=\"xref\" href=\"system.xml.xmlspace\" data-linktype=\"relative-path\">XmlSpace</a> representing the current <code>xml:space</code> scope.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter_Close\" data-linktype=\"self-bookmark\">Close()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Closes this stream and the underlying stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter_Flush\" data-linktype=\"self-bookmark\">Flush()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter_LookupPrefix_System_String_\" data-linktype=\"self-bookmark\">LookupPrefix(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the closest prefix defined in the current namespace scope for the namespace URI.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter_WriteBase64_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">WriteBase64(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Encodes the specified binary bytes as base64 and writes out the resulting text.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter_WriteBinHex_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">WriteBinHex(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Encodes the specified binary bytes as binhex and writes out the resulting text.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter_WriteCData_System_String_\" data-linktype=\"self-bookmark\">WriteCData(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes out a &lt;![CDATA[...]]&gt; block containing the specified text.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter_WriteCharEntity_System_Char_\" data-linktype=\"self-bookmark\">WriteCharEntity(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Forces the generation of a character entity for the specified Unicode character value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter_WriteChars_System_Char___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">WriteChars(Char[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes text one buffer at a time.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter_WriteComment_System_String_\" data-linktype=\"self-bookmark\">WriteComment(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes out a comment <!--...--> containing the specified text.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter_WriteDocType_System_String_System_String_System_String_System_String_\" data-linktype=\"self-bookmark\">WriteDocType(String,String,String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the DOCTYPE declaration with the specified name and optional attributes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter_WriteEndAttribute\" data-linktype=\"self-bookmark\">WriteEndAttribute()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Closes the previous <span class=\"xref\">stem.Xml.XmlTextWriter.WriteStartAttribute*</span> call.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter_WriteEndDocument\" data-linktype=\"self-bookmark\">WriteEndDocument()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Closes any open elements or attributes and puts the writer back in the Start state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter_WriteEndElement\" data-linktype=\"self-bookmark\">WriteEndElement()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Closes one element and pops the corresponding namespace scope.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter_WriteEntityRef_System_String_\" data-linktype=\"self-bookmark\">WriteEntityRef(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes out an entity reference as <code>&amp;name;</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter_WriteFullEndElement\" data-linktype=\"self-bookmark\">WriteFullEndElement()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Closes one element and pops the corresponding namespace scope.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter_WriteName_System_String_\" data-linktype=\"self-bookmark\">WriteName(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes out the specified name, ensuring it is a valid name according to the W3C XML 1.0 recommendation (<a href=\"http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name\" data-linktype=\"external\">http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name</a>).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter_WriteNmToken_System_String_\" data-linktype=\"self-bookmark\">WriteNmToken(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes out the specified name, ensuring it is a valid <code>NmToken</code> according to the W3C XML 1.0 recommendation (<a href=\"http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name\" data-linktype=\"external\">http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name</a>).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter_WriteProcessingInstruction_System_String_System_String_\" data-linktype=\"self-bookmark\">WriteProcessingInstruction(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes out a processing instruction with a space between the name and text as follows: &lt;?name text?&gt;.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter_WriteQualifiedName_System_String_System_String_\" data-linktype=\"self-bookmark\">WriteQualifiedName(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes out the namespace-qualified name. This method looks up the prefix that is in scope for the given namespace.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter_WriteRaw_System_String_\" data-linktype=\"self-bookmark\">WriteRaw(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes raw markup manually from a string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter_WriteRaw_System_Char___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">WriteRaw(Char[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes raw markup manually from a character buffer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter_WriteStartAttribute_System_String_System_String_System_String_\" data-linktype=\"self-bookmark\">WriteStartAttribute(String,String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the start of an attribute.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter_WriteStartDocument\" data-linktype=\"self-bookmark\">WriteStartDocument()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the XML declaration with the version &quot;1.0&quot;.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter_WriteStartDocument_System_Boolean_\" data-linktype=\"self-bookmark\">WriteStartDocument(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the XML declaration with the version &quot;1.0&quot; and the standalone attribute.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter_WriteStartElement_System_String_System_String_System_String_\" data-linktype=\"self-bookmark\">WriteStartElement(String,String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the specified start tag and associates it with the given namespace and prefix.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter_WriteString_System_String_\" data-linktype=\"self-bookmark\">WriteString(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the given text content.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter_WriteSurrogateCharEntity_System_Char_System_Char_\" data-linktype=\"self-bookmark\">WriteSurrogateCharEntity(Char,Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Generates and writes the surrogate character entity for the surrogate character pair.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_XmlTextWriter_WriteWhitespace_System_String_\" data-linktype=\"self-bookmark\">WriteWhitespace(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes out the given white space.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter__ctor_System_IO_TextWriter_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlTextWriter(TextWriter)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an instance of the <code>XmlTextWriter</code> class using the specified <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XmlTextWriter (System.IO.TextWriter w);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>w</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>TextWriter</code> to write to. It is assumed that the <code>TextWriter</code> is already set to the correct encoding.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter__ctor_System_IO_Stream_System_Text_Encoding_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlTextWriter(Stream,Encoding)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an instance of the <code>XmlTextWriter</code> class using the specified stream and encoding.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XmlTextWriter (System.IO.Stream w, System.Text.Encoding encoding);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>w</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream to which you want to write.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>encoding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The encoding to generate. If encoding is <code>null</code> it writes out the stream as UTF-8 and omits the encoding attribute from the <code>ProcessingInstruction</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The encoding is not supported or the stream cannot be written to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>w</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter__ctor_System_String_System_Text_Encoding_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlTextWriter(String,Encoding)</div>        \r\n          </div>\r\n    \r\n            <p>Creates an instance of the <a class=\"xref\" href=\"system.xml.xmltextwriter\" data-linktype=\"relative-path\">XmlTextWriter</a> class using the specified file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XmlTextWriter (string filename, System.Text.Encoding encoding);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>filename</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The filename to write to. If the file exists, it truncates it and overwrites it with the new content.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>encoding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The encoding to generate. If encoding is <code>null</code> it writes the file out as UTF-8, and omits the encoding attribute from the <code>ProcessingInstruction</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The encoding is not supported; the filename is empty, contains only white space, or contains one or more invalid characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>Access is denied.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The filename is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The directory to write to is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The filename includes an incorrect or invalid syntax for file name, directory name, or volume label syntax.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter_BaseStream\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter_BaseStream_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BaseStream</div>        \r\n          </div>\r\n    \r\n            <p>Gets the underlying stream object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.Stream BaseStream { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </div>\r\n                  <p>The stream to which the <code>XmlTextWriter</code> is writing or <code>null</code> if the <code>XmlTextWriter</code> was constructed using a <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> that does not inherit from the <a class=\"xref\" href=\"system.io.streamwriter\" data-linktype=\"relative-path\">StreamWriter</a> class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.  </p>\n</div>\n<p> If the writer was constructed using a <code>TextWriter</code> that is derived from the <code>StreamWriter</code> class, this property is equivalent to the <a class=\"xref\" href=\"system.io.streamwriter#System_IO_StreamWriter_BaseStream_\" data-linktype=\"relative-path\">BaseStream</a> property. If the writer was constructed using a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, this property returns the <code>Stream</code> passed to the constructor. If the writer was constructed using a file name, this property returns the <code>Stream</code> representing the file.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter_Formatting\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter_Formatting_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Formatting</div>        \r\n          </div>\r\n    \r\n            <p>Indicates how the output is formatted.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Formatting Formatting { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.formatting\" data-linktype=\"relative-path\">Formatting</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.xml.formatting\" data-linktype=\"relative-path\">Formatting</a> values. The default is <code>Formatting.None</code> (no special formatting).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.  </p>\n</div>\n<p> If the <code>Indented</code> option is set, child elements are indented using the <a class=\"xref\" href=\"system.xml.xmltextwriter#System_Xml_XmlTextWriter_Indentation_\" data-linktype=\"relative-path\">Indentation</a> and <a class=\"xref\" href=\"system.xml.xmltextwriter#System_Xml_XmlTextWriter_IndentChar_\" data-linktype=\"relative-path\">IndentChar</a> properties. Only element content is indented. The following C# code writes out HTML elements including mixed content:  </p>\n<pre><code>XmlTextWriter w = new XmlTextWriter(Console.Out);   \n w.Formatting = Formatting.Indented;   \n w.WriteStartElement(&quot;ol&quot;);   \n w.WriteStartElement(&quot;li&quot;);   \n w.WriteString(&quot;The big &quot;); // This means &quot;li&quot; now has a mixed content model.  \n w.WriteElementString(&quot;b&quot;, &quot;E&quot;);   \n w.WriteElementString(&quot;i&quot;, &quot;lephant&quot;);   \n w.WriteString(&quot; walks slowly.&quot;);   \n w.WriteEndElement();   \n w.WriteEndElement();  \n</code></pre><p> The above code produces the following output:  </p>\n<pre><code>&lt;ol&gt;   \n  &lt;li&gt;The big &lt;b&gt;E&lt;/b&gt;&lt;i&gt;lephant&lt;/i&gt; walks slowly.&lt;/li&gt;   \n&lt;/ol&gt;  \n</code></pre><p> When this is viewed in HTML no white space appears between the bold and italic elements. In fact, in this example, if indenting was added between these elements the word &quot;Elephant&quot; would be incorrectly broken.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Writing any text content, excluding <code>String.Empty</code> puts that element into mixed content mode. Child elements do not inherit this &quot;mixed&quot; mode status. A child element of a &quot;mixed&quot; element does indenting, unless it is also contains &quot;mixed&quot; content. Element content (<a href=\"http://www.w3.org/TR/1998/REC-xml-19980210#sec-element-content\" data-linktype=\"external\">http://www.w3.org/TR/1998/REC-xml-19980210#sec-element-content</a>) and mixed content (<a href=\"http://www.w3.org/TR/1998/REC-xml-19980210#sec-mixed-content\" data-linktype=\"external\">http://www.w3.org/TR/1998/REC-xml-19980210#sec-mixed-content</a>) are defined according to the XML 1.0 definitions of these terms.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example writes an XML fragment.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextWriter.Formatting Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   \n   //Create a writer to write XML to the console.\n   XmlTextWriter^ writer = nullptr;\n   writer = gcnew XmlTextWriter( Console::Out );\n   \n   //Use indentation for readability.\n   writer-&gt;Formatting = Formatting::Indented;\n   writer-&gt;Indentation = 4;\n   \n   //Write an element (this one is the root).\n   writer-&gt;WriteStartElement( &quot;book&quot; );\n   \n   //Write the title element.\n   writer-&gt;WriteStartElement( &quot;title&quot; );\n   writer-&gt;WriteString( &quot;Pride And Prejudice&quot; );\n   writer-&gt;WriteEndElement();\n   \n   //Write the close tag for the root element.\n   writer-&gt;WriteEndElement();\n   \n   //Write the XML to file and close the writer.\n   writer-&gt;Close();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextWriter.Formatting Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  \n  public static void Main()\n  {\n     //Create a writer to write XML to the console.\n     XmlTextWriter writer = null;\n     writer = new XmlTextWriter (Console.Out);\n\n     //Use indentation for readability.\n     writer.Formatting = Formatting.Indented;\n     writer.Indentation = 4;\n        \n     //Write an element (this one is the root).\n     writer.WriteStartElement(&quot;book&quot;);\n\n     //Write the title element.\n     writer.WriteStartElement(&quot;title&quot;);\n     writer.WriteString(&quot;Pride And Prejudice&quot;);\n     writer.WriteEndElement();\n\n     //Write the close tag for the root element.\n     writer.WriteEndElement();\n             \n     //Write the XML to file and close the writer.\n     writer.Close();  \n\n  }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextWriter.Formatting Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        &#39;Create a writer to write XML to the console.\n        Dim writer As XmlTextWriter = Nothing\n        writer = New XmlTextWriter(Console.Out)\n        \n        &#39;Use indentation for readability.\n        writer.Formatting = Formatting.Indented\n        writer.Indentation = 4\n        \n        &#39;Write an element (this one is the root).\n        writer.WriteStartElement(&quot;book&quot;)\n        \n        &#39;Write the title element.\n        writer.WriteStartElement(&quot;title&quot;)\n        writer.WriteString(&quot;Pride And Prejudice&quot;)\n        writer.WriteEndElement()\n        \n        &#39;Write the close tag for the root element.\n        writer.WriteEndElement()\n        \n        &#39;Write the XML to file and close the writer.\n        writer.Close()\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter_Indentation\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter_Indentation_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Indentation</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets how many IndentChars to write for each level in the hierarchy when <span class=\"xref\">stem.Xml.XmlTextWriter.Formatting*</span> is set to <code>Formatting.Indented</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Indentation { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>Number of <code>IndentChars</code> for each level. The default is 2.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Setting this property to a negative value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.  </p>\n</div>\n<p> Indentation is performed on following node types: <code>DocumentType</code>, <code>Element</code>, <code>Comment</code>, <code>ProcessingInstruction</code>, and <code>CDATASection</code>. All other node types are not affected. The <code>XmlTextWriter</code> does not indent the internal DTD subset. However, you could do the following to apply formatting to the internal DTD subset.  </p>\n<pre><code>String name = &quot;Employees&quot;;  \nString pubid = null;  \nString sysid = null;  \nString subset =  \n@&quot;  \n    &lt;!ELEMENT Employees (Employee)+&gt;  \n    &lt;!ELEMENT Employee EMPTY&gt;  \n    &lt;!ATTLIST Employee firstname CDATA #REQUIRED&gt;  \n    &lt;!ENTITY Company &#39;Microsoft&#39;&gt;]&gt;  \n&quot;;  \nXmlTextWriter tw = new XmlTextWriter(Console.Out);  \ntw.WriteDocType(name, pubid, sysid, subset);  \n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example writes an XML fragment.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextWriter.Formatting Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   \n   //Create a writer to write XML to the console.\n   XmlTextWriter^ writer = nullptr;\n   writer = gcnew XmlTextWriter( Console::Out );\n   \n   //Use indentation for readability.\n   writer-&gt;Formatting = Formatting::Indented;\n   writer-&gt;Indentation = 4;\n   \n   //Write an element (this one is the root).\n   writer-&gt;WriteStartElement( &quot;book&quot; );\n   \n   //Write the title element.\n   writer-&gt;WriteStartElement( &quot;title&quot; );\n   writer-&gt;WriteString( &quot;Pride And Prejudice&quot; );\n   writer-&gt;WriteEndElement();\n   \n   //Write the close tag for the root element.\n   writer-&gt;WriteEndElement();\n   \n   //Write the XML to file and close the writer.\n   writer-&gt;Close();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextWriter.Formatting Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  \n  public static void Main()\n  {\n     //Create a writer to write XML to the console.\n     XmlTextWriter writer = null;\n     writer = new XmlTextWriter (Console.Out);\n\n     //Use indentation for readability.\n     writer.Formatting = Formatting.Indented;\n     writer.Indentation = 4;\n        \n     //Write an element (this one is the root).\n     writer.WriteStartElement(&quot;book&quot;);\n\n     //Write the title element.\n     writer.WriteStartElement(&quot;title&quot;);\n     writer.WriteString(&quot;Pride And Prejudice&quot;);\n     writer.WriteEndElement();\n\n     //Write the close tag for the root element.\n     writer.WriteEndElement();\n             \n     //Write the XML to file and close the writer.\n     writer.Close();  \n\n  }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextWriter.Formatting Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        &#39;Create a writer to write XML to the console.\n        Dim writer As XmlTextWriter = Nothing\n        writer = New XmlTextWriter(Console.Out)\n        \n        &#39;Use indentation for readability.\n        writer.Formatting = Formatting.Indented\n        writer.Indentation = 4\n        \n        &#39;Write an element (this one is the root).\n        writer.WriteStartElement(&quot;book&quot;)\n        \n        &#39;Write the title element.\n        writer.WriteStartElement(&quot;title&quot;)\n        writer.WriteString(&quot;Pride And Prejudice&quot;)\n        writer.WriteEndElement()\n        \n        &#39;Write the close tag for the root element.\n        writer.WriteEndElement()\n        \n        &#39;Write the XML to file and close the writer.\n        writer.Close()\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter_IndentChar\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter_IndentChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndentChar</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets which character to use for indenting when <span class=\"xref\">stem.Xml.XmlTextWriter.Formatting*</span> is set to <code>Formatting.Indented</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public char IndentChar { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>The character to use for indenting. The default is space.  </p>\n <div class=\"alert NOTE\"><br> The <code>XmlTextWriter</code> allows you to set this property to any character. To ensure valid XML, you must specify a valid white space character, 0x9, 0x10, 0x13 or 0x20.<br>\n</div>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter_Namespaces\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter_Namespaces_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Namespaces</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether to do namespace support.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Namespaces { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to support namespaces; otherwise, <code>false</code>.  </p>\n<p> The default is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>You can only change this property when in the <code>WriteState.Start</code> state.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.  </p>\n</div>\n<p> This property determines whether the writer supports the W3C Namespaces in XML recommendation located at www.w3.org/TR/REC-xml-names.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter_QuoteChar\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter_QuoteChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">QuoteChar</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets which character to use to quote attribute values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public char QuoteChar { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>The character to use to quote attribute values. This must be a single quote (&#39;) or a double quote (&#34;). The default is a double quote.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Setting this property to something other than either a single or double quote.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter_WriteState\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter_WriteState_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteState</div>        \r\n          </div>\r\n    \r\n            <p>Gets the state of the writer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Xml.WriteState WriteState { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.writestate\" data-linktype=\"relative-path\">WriteState</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.xml.writestate\" data-linktype=\"relative-path\">WriteState</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter_XmlLang\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter_XmlLang_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlLang</div>        \r\n          </div>\r\n    \r\n            <p>Gets the current <code>xml:lang</code> scope.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string XmlLang { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The current <code>xml:lang</code> or <code>null</code> if there is no <code>xml:lang</code> in the current scope.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.  </p>\n</div>\n<p> This property allows one component to find out what state another component has left the writer in. For example, perhaps one component wants to tell another which language help text to generate. The language information is communicated by writing an <code>xml:lang</code> attribute.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter_XmlSpace\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter_XmlSpace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlSpace</div>        \r\n          </div>\r\n    \r\n            <p>Gets an <a class=\"xref\" href=\"system.xml.xmlspace\" data-linktype=\"relative-path\">XmlSpace</a> representing the current <code>xml:space</code> scope.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Xml.XmlSpace XmlSpace { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlspace\" data-linktype=\"relative-path\">XmlSpace</a></div>\r\n                  </div>\r\n                  <p>An <code>XmlSpace</code> representing the current <code>xml:space</code> scope.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Meaning<br>\n </th></tr></thead><tbody><tr><td> None<br>\n </td><td> This is the default if no <code>xml:space</code> scope exists.<br>\n </td></tr><tr><td> Default<br>\n </td><td> The current scope is <code>xml:space</code>=&quot;default&quot;.<br>\n </td></tr><tr><td> Preserve<br>\n </td><td> The current scope is <code>xml:space</code>=&quot;preserve&quot;.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.  </p>\n</div>\n<p> This property allows one component to find out in what state another component has left the writer.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <code>WriteWhitespace</code> method to control how the file is formatted.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextWriter.XmlSpace Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{  \n  public static void Main()\n  {\n    // Create the writer.\n    XmlTextWriter writer = null;\n    writer = new XmlTextWriter (&quot;ws.html&quot;, null);\n\n    // Write an element (this one is the root).\n    writer.WriteStartElement(&quot;p&quot;);\n\n    // Write the xml:space attribute.\n    writer.WriteAttributeString(&quot;xml&quot;, &quot;space&quot;, null, &quot;preserve&quot;);\n\n    // Verify that xml:space is set properly.\n    if (writer.XmlSpace == XmlSpace.Preserve)\n      Console.WriteLine(&quot;xmlspace is correct!&quot;);\n\n    // Write out the HTML elements.  Insert white space\n    // between &#39;something&#39; and &#39;Big&#39;\n    writer.WriteString(&quot;something&quot;);\n    writer.WriteWhitespace(&quot;  &quot;);\n    writer.WriteElementString(&quot;b&quot;, &quot;B&quot;);\n    writer.WriteString(&quot;ig&quot;);\n\n    // Write the root end element.\n    writer.WriteEndElement();\n             \n    // Write the XML to file and close the writer.\n    writer.Close();  \n  }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextWriter.XmlSpace Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   \n   // Create the writer.\n   XmlTextWriter^ writer = nullptr;\n   writer = gcnew XmlTextWriter( &quot;ws.html&quot;, nullptr );\n   \n   // Write an element (this one is the root).\n   writer-&gt;WriteStartElement( &quot;p&quot; );\n   \n   // Write the xml:space attribute.\n   writer-&gt;WriteAttributeString( &quot;xml&quot;, &quot;space&quot;, nullptr, &quot;preserve&quot; );\n   \n   // Verify that xml:space is set properly.\n   if ( writer-&gt;XmlSpace == XmlSpace::Preserve )\n      Console::WriteLine( &quot;xmlspace is correct!&quot; );\n\n   \n   // Write out the HTML elements.  Insert white space\n   // between &#39;something&#39; and &#39;Big&#39;\n   writer-&gt;WriteString( &quot;something&quot; );\n   writer-&gt;WriteWhitespace( &quot;  &quot; );\n   writer-&gt;WriteElementString( &quot;b&quot;, &quot;B&quot; );\n   writer-&gt;WriteString( &quot;ig&quot; );\n   \n   // Write the root end element.\n   writer-&gt;WriteEndElement();\n   \n   // Write the XML to file and close the writer.\n   writer-&gt;Close();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextWriter.XmlSpace Example#1\">Option Strict\nOption Explicit\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        &#39; Create the writer.\n        Dim writer As XmlTextWriter = Nothing\n        writer = New XmlTextWriter(&quot;ws.html&quot;, Nothing)\n        \n        &#39; Write an element (this one is the root).\n        writer.WriteStartElement(&quot;p&quot;)\n        \n        &#39; Write the xml:space attribute.\n        writer.WriteAttributeString(&quot;xml&quot;, &quot;space&quot;, Nothing, &quot;preserve&quot;)\n        \n        &#39; Verify that xml:space is set properly.\n        If writer.XmlSpace = XmlSpace.Preserve Then\n            Console.WriteLine(&quot;xmlspace is correct!&quot;)\n        End If \n        &#39; Write out the HTML elements.  Insert white space\n        &#39; between &#39;something&#39; and &#39;Big&#39;.\n        writer.WriteString(&quot;something&quot;)\n        writer.WriteWhitespace(&quot;  &quot;)\n        writer.WriteElementString(&quot;b&quot;, &quot;B&quot;)\n        writer.WriteString(&quot;ig&quot;)\n        \n        &#39; Write the root end element.\n        writer.WriteEndElement()\n        \n        &#39; Write the XML to file and close the writer.\n        writer.Close()\n    End Sub &#39;Main\nEnd Class &#39;Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter_Close\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter_Close_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Close()</div>        \r\n          </div>\r\n    \r\n            <p>Closes this stream and the underlying stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Close ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.  </p>\n</div>\n<p> Any elements or attributes left open are automatically closed.  </p>\n<p> This method does not throw any exceptions.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example writes an XML fragment.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextWriter.Formatting Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   \n   //Create a writer to write XML to the console.\n   XmlTextWriter^ writer = nullptr;\n   writer = gcnew XmlTextWriter( Console::Out );\n   \n   //Use indentation for readability.\n   writer-&gt;Formatting = Formatting::Indented;\n   writer-&gt;Indentation = 4;\n   \n   //Write an element (this one is the root).\n   writer-&gt;WriteStartElement( &quot;book&quot; );\n   \n   //Write the title element.\n   writer-&gt;WriteStartElement( &quot;title&quot; );\n   writer-&gt;WriteString( &quot;Pride And Prejudice&quot; );\n   writer-&gt;WriteEndElement();\n   \n   //Write the close tag for the root element.\n   writer-&gt;WriteEndElement();\n   \n   //Write the XML to file and close the writer.\n   writer-&gt;Close();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextWriter.Formatting Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  \n  public static void Main()\n  {\n     //Create a writer to write XML to the console.\n     XmlTextWriter writer = null;\n     writer = new XmlTextWriter (Console.Out);\n\n     //Use indentation for readability.\n     writer.Formatting = Formatting.Indented;\n     writer.Indentation = 4;\n        \n     //Write an element (this one is the root).\n     writer.WriteStartElement(&quot;book&quot;);\n\n     //Write the title element.\n     writer.WriteStartElement(&quot;title&quot;);\n     writer.WriteString(&quot;Pride And Prejudice&quot;);\n     writer.WriteEndElement();\n\n     //Write the close tag for the root element.\n     writer.WriteEndElement();\n             \n     //Write the XML to file and close the writer.\n     writer.Close();  \n\n  }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextWriter.Formatting Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        &#39;Create a writer to write XML to the console.\n        Dim writer As XmlTextWriter = Nothing\n        writer = New XmlTextWriter(Console.Out)\n        \n        &#39;Use indentation for readability.\n        writer.Formatting = Formatting.Indented\n        writer.Indentation = 4\n        \n        &#39;Write an element (this one is the root).\n        writer.WriteStartElement(&quot;book&quot;)\n        \n        &#39;Write the title element.\n        writer.WriteStartElement(&quot;title&quot;)\n        writer.WriteString(&quot;Pride And Prejudice&quot;)\n        writer.WriteEndElement()\n        \n        &#39;Write the close tag for the root element.\n        writer.WriteEndElement()\n        \n        &#39;Write the XML to file and close the writer.\n        writer.Close()\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter_Flush\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter_Flush_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Flush()</div>        \r\n          </div>\r\n    \r\n            <p>Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Flush ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.  </p>\n</div>\n<p> This is called instead of <a class=\"xref\" href=\"system.xml.xmltextwriter#System_Xml_XmlTextWriter_Close_\" data-linktype=\"relative-path\">Close</a> when you want to write more to the underlying stream without losing what is still in the buffer.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example writes out two XML fragments.  </p>\n<pre><code class=\"lang-cs\" name=\"XmlTextWriter.Flush#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n\n  public static void Main()\n  {\n     XmlTextWriter writer = new XmlTextWriter (Console.Out);\n     //Use indenting for readability\n     writer.Formatting = Formatting.Indented;\n\t\n     //Write an XML fragment.\n     writer.WriteStartElement(&quot;book&quot;);\n     writer.WriteElementString(&quot;title&quot;, &quot;Pride And Prejudice&quot;);\n     writer.WriteEndElement();\n     writer.Flush();\n\n     //Write another XML fragment.\n     writer.WriteStartElement(&quot;cd&quot;);\n     writer.WriteElementString(&quot;title&quot;, &quot;Americana&quot;);\n     writer.WriteEndElement();\n     writer.Flush();  \n\n     //Close the writer.\n     writer.Close();\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XmlTextWriter.Flush#1\">Imports System\nImports System.IO\nImports System.Xml\n\npublic class Sample\n\n  public shared sub Main()\n\n     Dim writer as XmlTextWriter = new XmlTextWriter (Console.Out)\n     &#39;Use indenting for readability\n     writer.Formatting = Formatting.Indented\n\t\n     &#39;Write an XML fragment.\n     writer.WriteStartElement(&quot;book&quot;)\n     writer.WriteElementString(&quot;title&quot;, &quot;Pride And Prejudice&quot;)\n     writer.WriteEndElement()\n     writer.Flush()\n\n     &#39;Write another XML fragment.\n     writer.WriteStartElement(&quot;cd&quot;)\n     writer.WriteElementString(&quot;title&quot;, &quot;Americana&quot;)\n     writer.WriteEndElement()\n     writer.Flush()  \n\n     &#39;Close the writer.\n     writer.Close()\n\n  end sub\nend class\n</code></pre><pre><code class=\"lang-cpp\" name=\"XmlTextWriter.Flush#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlTextWriter^ writer = gcnew XmlTextWriter( Console::Out );\n   \n   // Use indenting for readability\n   writer-&gt;Formatting = Formatting::Indented;\n   \n   // Write an XML fragment.\n   writer-&gt;WriteStartElement( &quot;book&quot; );\n   writer-&gt;WriteElementString( &quot;title&quot;, &quot;Pride And Prejudice&quot; );\n   writer-&gt;WriteEndElement();\n   writer-&gt;Flush();\n   \n   // Write another XML fragment.\n   writer-&gt;WriteStartElement( &quot;cd&quot; );\n   writer-&gt;WriteElementString( &quot;title&quot;, &quot;Americana&quot; );\n   writer-&gt;WriteEndElement();\n   writer-&gt;Flush();\n   \n   // Close the writer.\n   writer-&gt;Close();\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter_LookupPrefix_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter_LookupPrefix_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LookupPrefix(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the closest prefix defined in the current namespace scope for the namespace URI.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string LookupPrefix (string ns);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ns</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Namespace URI whose prefix you want to find.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The matching prefix. Or <code>null</code> if no matching namespace URI is found in the current scope.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>ns</code> is either <code>null</code> or <code>String.Empty</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example writes out a book.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextWriter.WriteStartElement Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  private const string filename = &quot;sampledata.xml&quot;;\n\n  public static void Main()\n  {\n\n     XmlTextWriter writer = new XmlTextWriter (filename, null);\n     //Use indenting for readability.\n     writer.Formatting = Formatting.Indented;\n        \n     writer.WriteComment(&quot;sample XML fragment&quot;);\n    \n     //Write an element (this one is the root).\n     writer.WriteStartElement(&quot;bookstore&quot;);\n\n     //Write the namespace declaration.\n     writer.WriteAttributeString(&quot;xmlns&quot;, &quot;bk&quot;, null, &quot;urn:samples&quot;);\n\n     writer.WriteStartElement(&quot;book&quot;);\n\n     //Lookup the prefix and then write the ISBN attribute.\n     string prefix = writer.LookupPrefix(&quot;urn:samples&quot;);\n     writer.WriteStartAttribute(prefix, &quot;ISBN&quot;, &quot;urn:samples&quot;);\n     writer.WriteString(&quot;1-861003-78&quot;);\n     writer.WriteEndAttribute();     \n\n     //Write the title.\n     writer.WriteStartElement(&quot;title&quot;);\n     writer.WriteString(&quot;The Handmaid&#39;s Tale&quot;);\n     writer.WriteEndElement();\n              \n     //Write the price.\n     writer.WriteElementString(&quot;price&quot;, &quot;19.95&quot;);\n     \n     //Write the style element.\n     writer.WriteStartElement(prefix, &quot;style&quot;, &quot;urn:samples&quot;);\n     writer.WriteString(&quot;hardcover&quot;);\n     writer.WriteEndElement();\n\n     //Write the end tag for the book element.\n     writer.WriteEndElement();\n\n     //Write the close tag for the root element.\n     writer.WriteEndElement();\n             \n     //Write the XML to file and close the writer.\n     writer.Flush();\n     writer.Close();\n\n     //Read the file back in and parse to ensure well formed XML.\n     XmlDocument doc = new XmlDocument();\n     //Preserve white space for readability.\n     doc.PreserveWhitespace = true;\n     //Load the file\n     doc.Load(filename);\n    \n     //Write the XML content to the console.\n     Console.Write(doc.InnerXml);  \n\n  }\n\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextWriter.WriteStartElement Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   String^ filename = &quot;sampledata.xml&quot;;\n   XmlTextWriter^ writer = gcnew XmlTextWriter( filename, nullptr );\n   \n   //Use indenting for readability.\n   writer-&gt;Formatting = Formatting::Indented;\n   writer-&gt;WriteComment( &quot;sample XML fragment&quot; );\n   \n   //Write an element (this one is the root).\n   writer-&gt;WriteStartElement( &quot;bookstore&quot; );\n   \n   //Write the namespace declaration.\n   writer-&gt;WriteAttributeString( &quot;xmlns&quot;, &quot;bk&quot;, nullptr, &quot;urn:samples&quot; );\n   writer-&gt;WriteStartElement( &quot;book&quot; );\n   \n   //Lookup the prefix and then write the ISBN attribute.\n   String^ prefix = writer-&gt;LookupPrefix( &quot;urn:samples&quot; );\n   writer-&gt;WriteStartAttribute( prefix, &quot;ISBN&quot;, &quot;urn:samples&quot; );\n   writer-&gt;WriteString( &quot;1-861003-78&quot; );\n   writer-&gt;WriteEndAttribute();\n   \n   //Write the title.\n   writer-&gt;WriteStartElement( &quot;title&quot; );\n   writer-&gt;WriteString( &quot;The Handmaid&#39;s Tale&quot; );\n   writer-&gt;WriteEndElement();\n   \n   //Write the price.\n   writer-&gt;WriteElementString( &quot;price&quot;, &quot;19.95&quot; );\n   \n   //Write the style element.\n   writer-&gt;WriteStartElement( prefix, &quot;style&quot;, &quot;urn:samples&quot; );\n   writer-&gt;WriteString( &quot;hardcover&quot; );\n   writer-&gt;WriteEndElement();\n   \n   //Write the end tag for the book element.\n   writer-&gt;WriteEndElement();\n   \n   //Write the close tag for the root element.\n   writer-&gt;WriteEndElement();\n   \n   //Write the XML to file and close the writer.\n   writer-&gt;Flush();\n   writer-&gt;Close();\n   \n   //Read the file back in and parse to ensure well formed XML.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   //Preserve white space for readability.\n   doc-&gt;PreserveWhitespace = true;\n   \n   //Load the file\n   doc-&gt;Load( filename );\n   \n   //Write the XML content to the console.\n   Console::Write( doc-&gt;InnerXml );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextWriter.WriteStartElement Example#1\">Option Strict\nOption Explicit\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    Private Shared filename As String = &quot;sampledata.xml&quot;\n    Public Shared Sub Main()\n        \n        Dim writer As New XmlTextWriter(filename, Nothing)\n        &#39;Use indenting for readability.\n        writer.Formatting = Formatting.Indented\n        \n        writer.WriteComment(&quot;sample XML fragment&quot;)\n        \n        &#39;Write an element (this one is the root).\n        writer.WriteStartElement(&quot;bookstore&quot;)\n        \n        &#39;Write the namespace declaration.\n        writer.WriteAttributeString(&quot;xmlns&quot;, &quot;bk&quot;, Nothing, &quot;urn:samples&quot;)\n        \n        writer.WriteStartElement(&quot;book&quot;)\n        \n        &#39;Lookup the prefix and then write the ISBN attribute.\n        Dim prefix As String = writer.LookupPrefix(&quot;urn:samples&quot;)\n        writer.WriteStartAttribute(prefix, &quot;ISBN&quot;, &quot;urn:samples&quot;)\n        writer.WriteString(&quot;1-861003-78&quot;)\n        writer.WriteEndAttribute()\n        \n        &#39;Write the title.\n        writer.WriteStartElement(&quot;title&quot;)\n        writer.WriteString(&quot;The Handmaid&#39;s Tale&quot;)\n        writer.WriteEndElement()\n        \n        &#39;Write the price.\n        writer.WriteElementString(&quot;price&quot;, &quot;19.95&quot;)\n        \n        &#39;Write the style element.\n        writer.WriteStartElement(prefix, &quot;style&quot;, &quot;urn:samples&quot;)\n        writer.WriteString(&quot;hardcover&quot;)\n        writer.WriteEndElement()\n        \n        &#39;Write the end tag for the book element.\n        writer.WriteEndElement()\n        \n        &#39;Write the close tag for the root element.\n        writer.WriteEndElement()\n        \n        &#39;Write the XML to file and close the writer.\n        writer.Flush()\n        writer.Close()\n        \n        &#39;Read the file back in and parse to ensure well formed XML.\n        Dim doc As New XmlDocument()\n        &#39;Preserve white space for readability.\n        doc.PreserveWhitespace = True\n        &#39;Load the file.\n        doc.Load(filename)\n        \n        &#39;Write the XML content to the console.\n        Console.Write(doc.InnerXml)\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter_WriteBase64_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter_WriteBase64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteBase64(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Encodes the specified binary bytes as base64 and writes out the resulting text.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void WriteBase64 (byte[] buffer, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Byte array to encode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position within the buffer indicating the start of the bytes to write.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>buffer</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The buffer length minus <code>index</code> is less than <code>count</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> or <code>count</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Xml.XmlTextWriter.WriteState*</span> is <code>Closed</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example encodes an input file using <code>WriteBase64</code> and generates a temporary XML file. The temporary XML file is decoded using the <a class=\"xref\" href=\"system.xml.xmltextreader#System_Xml_XmlTextReader_ReadBase64_\" data-linktype=\"relative-path\">ReadBase64</a> method and compared to the original file.  </p>\n<pre><code class=\"lang-cs\" name=\"XmlWriter.WriteBase64#1\">using System;\nusing System.IO;\nusing System.Xml;\nusing System.Text;\n\nclass TestBase64 {\n\n    private const int bufferSize=4096;\n\n    public static void Main(String[] args) {\n\n        TestBase64 testBase64=new TestBase64();\n\n        //Check that the usage string is correct.\n        if (args.Length &lt; 2 ) {\n            testBase64.Usage();\n            return;\n        }\n\n        FileStream fileOld = new FileStream(args[0], FileMode.OpenOrCreate, FileAccess.Read, FileShare.Read);\n        testBase64.EncodeXmlFile(&quot;temp.xml&quot;, fileOld);\n\n        FileStream fileNew = new FileStream(args[1], FileMode.Create, FileAccess.ReadWrite, FileShare.ReadWrite);\n\n        testBase64.DecodeOrignalObject(&quot;temp.xml&quot;, fileNew);\n\n        //Compare the two files.\n        if (testBase64.CompareResult( fileOld, fileNew)) {\n            Console.WriteLine(&quot;The recreated binary file {0} is the same as {1}&quot;, args[1], args[0] );\n        } else {\n            Console.WriteLine(&quot;The recreated binary file {0} is not the same as {1}&quot;, args[1], args[0] );\n        }\n\n        fileOld.Flush();\n        fileNew.Flush();\n        fileOld.Close();\n        fileNew.Close();\n\n    }\n\n    //Use the WriteBase64 method to create an XML document.  The object  \n    //passed by the user is encoded and included in the document.\n    public void EncodeXmlFile(String xmlFileName, FileStream fileOld) {\n\n        byte[] buffer = new byte[bufferSize];\n        int readByte=0;\n\n        XmlTextWriter xw = new XmlTextWriter(xmlFileName, Encoding.UTF8);\n        xw.WriteStartDocument();\n        xw.WriteStartElement(&quot;root&quot;);\n        // Create a Char writer.\n        BinaryReader br = new BinaryReader(fileOld);\n        // Set the file pointer to the end.\n\n        try {\n              do {\n                  readByte=br.Read(buffer, 0, bufferSize);\n                  xw.WriteBase64(buffer, 0, readByte);\n              } while (bufferSize &lt;= readByte );\n\n        } catch (Exception ex) {\n            EndOfStreamException ex1= new EndOfStreamException();\n\n            if (ex1.Equals(ex)) {\n                Console.WriteLine(&quot;We are at end of file&quot;);\n            } else {\n                Console.WriteLine(ex);\n            }\n        }\n        xw.WriteEndElement();\n        xw.WriteEndDocument();\n\n        xw.Flush();\n        xw.Close();\n    }\n\n    //Use the ReadBase64 method to decode the new XML document \n    //and generate the original object.\n    public void DecodeOrignalObject(String xmlFileName, FileStream fileNew) {\n\n        byte[] buffer = new byte[bufferSize];\n        int readByte=0;\n\n        //Create a file to write the bmp back.\n        BinaryWriter bw = new BinaryWriter(fileNew);\n\n        XmlTextReader tr = new XmlTextReader(xmlFileName);\n        tr.MoveToContent();\n        Console.WriteLine(tr.Name);\n\n        do {\n          readByte=tr.ReadBase64(buffer, 0, bufferSize);\n          bw.Write(buffer, 0, readByte);\n        } while(readByte&gt;=bufferSize);\n\n        bw.Flush();\n\n    }\n\n    //Compare the two files.\n    public bool CompareResult(FileStream fileOld, FileStream fileNew) {\n\n        int readByteOld=0;\n        int readByteNew=0;\n        int count, readByte=0;\n\n        byte[] bufferOld = new byte[bufferSize];\n        byte[] bufferNew = new byte[bufferSize];\n\n\n        BinaryReader binaryReaderOld = new BinaryReader(fileOld);\n        BinaryReader binaryReaderNew = new BinaryReader(fileNew);\n\n        binaryReaderOld.BaseStream.Seek(0, SeekOrigin.Begin);\n        binaryReaderNew.BaseStream.Seek(0, SeekOrigin.Begin);\n\n\n        do {\n          readByteOld=binaryReaderOld.Read(bufferOld, 0, bufferSize);\n          readByteNew=binaryReaderNew.Read(bufferNew, 0, bufferSize);\n\n          if (readByteOld!=readByteNew) {\n              return false;\n          }\n\n          for (count=0; count &lt;bufferSize; ++count) {\n              if (bufferOld[count]!=bufferNew[count]) {\n                  return false;\n              }\n          }\n\n        } while (count&lt;readByte );\n\n        return true;\n\n    }\n\n    //Display the usage statement.\n    public void Usage() {\n        Console.WriteLine(&quot;TestBase64 sourceFile, targetFile <br>&quot;);\n        Console.WriteLine(&quot;For example: TestBase64 winlogon.bmp, target.bmp<br>&quot;);\n    }\n\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"XmlWriter.WriteBase64#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nusing namespace System::Text;\nref class TestBase64\n{\nprivate:\n   static int bufferSize = 4096;\n\npublic:\n\n   // Use the WriteBase64 method to create an XML document.  The object  \n   // passed by the user is encoded and included in the document.\n   void EncodeXmlFile( String^ xmlFileName, FileStream^ fileOld )\n   {\n      array&lt;Byte&gt;^buffer = gcnew array&lt;Byte&gt;(bufferSize);\n      int readByte = 0;\n      XmlTextWriter^ xw = gcnew XmlTextWriter( xmlFileName,Encoding::UTF8 );\n      xw-&gt;WriteStartDocument();\n      xw-&gt;WriteStartElement( &quot;root&quot; );\n\n      // Create a Char writer.\n      BinaryReader^ br = gcnew BinaryReader( fileOld );\n\n      // Set the file pointer to the end.\n      try\n      {\n         do\n         {\n            readByte = br-&gt;Read( buffer, 0, bufferSize );\n            xw-&gt;WriteBase64( buffer, 0, readByte );\n         }\n         while ( bufferSize &lt;= readByte );\n      }\n      catch ( Exception^ ex ) \n      {\n         EndOfStreamException^ ex1 = gcnew EndOfStreamException;\n         if ( ex1-&gt;Equals( ex ) )\n                  Console::WriteLine( &quot;We are at end of file&quot; );\n         else\n                  Console::WriteLine( ex );\n      }\n\n      xw-&gt;WriteEndElement();\n      xw-&gt;WriteEndDocument();\n      xw-&gt;Flush();\n      xw-&gt;Close();\n   }\n\n   // Use the ReadBase64 method to decode the new XML document \n   // and generate the original object.\n   void DecodeOrignalObject( String^ xmlFileName, FileStream^ fileNew )\n   {\n      array&lt;Byte&gt;^buffer = gcnew array&lt;Byte&gt;(bufferSize);\n      int readByte = 0;\n\n      // Create a file to write the bmp back.\n      BinaryWriter^ bw = gcnew BinaryWriter( fileNew );\n      XmlTextReader^ tr = gcnew XmlTextReader( xmlFileName );\n      tr-&gt;MoveToContent();\n      Console::WriteLine( tr-&gt;Name );\n      do\n      {\n         readByte = tr-&gt;ReadBase64( buffer, 0, bufferSize );\n         bw-&gt;Write( buffer, 0, readByte );\n      }\n      while ( readByte &gt;= bufferSize );\n\n      bw-&gt;Flush();\n   }\n\n   // Compare the two files.\n   bool CompareResult( FileStream^ fileOld, FileStream^ fileNew )\n   {\n      int readByteOld = 0;\n      int readByteNew = 0;\n      int count;\n      int readByte = 0;\n      array&lt;Byte&gt;^bufferOld = gcnew array&lt;Byte&gt;(bufferSize);\n      array&lt;Byte&gt;^bufferNew = gcnew array&lt;Byte&gt;(bufferSize);\n      BinaryReader^ binaryReaderOld = gcnew BinaryReader( fileOld );\n      BinaryReader^ binaryReaderNew = gcnew BinaryReader( fileNew );\n      binaryReaderOld-&gt;BaseStream-&gt;Seek( 0, SeekOrigin::Begin );\n      binaryReaderNew-&gt;BaseStream-&gt;Seek( 0, SeekOrigin::Begin );\n      do\n      {\n         readByteOld = binaryReaderOld-&gt;Read( bufferOld, 0, bufferSize );\n         readByteNew = binaryReaderNew-&gt;Read( bufferNew, 0, bufferSize );\n         if ( readByteOld != readByteNew )\n                  return false;\n\n         for ( count = 0; count &lt; bufferSize; ++count )\n            if ( bufferOld[ count ] != bufferNew[ count ] )\n                        return false;\n      }\n      while ( count &lt; readByte );\n\n      return true;\n   }\n\n   // Display the usage statement.\n   void Usage()\n   {\n      Console::WriteLine( &quot;TestBase64 sourceFile, targetFile <br>&quot; );\n      Console::WriteLine( &quot;For example: TestBase64 winlogon.bmp, target.bmp<br>&quot; );\n   }\n};\n\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n   TestBase64^ testBase64 = gcnew TestBase64;\n\n   // Check that the usage is correct.\n   if ( args-&gt;Length &lt; 3 )\n   {\n      testBase64-&gt;Usage();\n      return 1;\n   }\n\n   FileStream^ fileOld = gcnew FileStream( args[ 1 ],FileMode::OpenOrCreate,FileAccess::Read,FileShare::Read );\n   testBase64-&gt;EncodeXmlFile( &quot;temp.xml&quot;, fileOld );\n   FileStream^ fileNew = gcnew FileStream( args[ 2 ],FileMode::Create,FileAccess::ReadWrite,FileShare::ReadWrite );\n   testBase64-&gt;DecodeOrignalObject( &quot;temp.xml&quot;, fileNew );\n\n   // Compare the two files.\n   if ( testBase64-&gt;CompareResult( fileOld, fileNew ) )\n      Console::WriteLine( &quot;The recreated binary file {0} is the same as {1}&quot;, args[ 2 ], args[ 1 ] );\n   else\n      Console::WriteLine( &quot;The recreated binary file {0} is not the same as {1}&quot;, args[ 2 ], args[ 1 ] );\n\n   fileOld-&gt;Flush();\n   fileNew-&gt;Flush();\n   fileOld-&gt;Close();\n   fileNew-&gt;Close();\n   return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XmlWriter.WriteBase64#1\">Imports System\nImports System.IO\nImports System.Xml\nImports System.Text\n\nclass TestBase64 \n\n    private const bufferSize as integer = 4096\n\n    public shared sub Main() \n \n        Dim args() As String = System.Environment.GetCommandLineArgs()\n        Dim myTestBase64 as TestBase64 = new TestBase64()\n        \n        &#39;Check that the usage string is correct.\n        if (args.Length &lt; 3 ) \n           myTestBase64.Usage()\n           return\n        end if\n\n        Dim fileOld as FileStream = new FileStream(args(1), FileMode.OpenOrCreate, FileAccess.Read, FileShare.Read)\n        myTestBase64.EncodeXmlFile(&quot;temp.xml&quot;, fileOld)\n\n        Dim fileNew as FileStream = new FileStream(args(2), FileMode.Create, FileAccess.ReadWrite, FileShare.ReadWrite)\n\n        myTestBase64.DecodeOrignalObject(&quot;temp.xml&quot;, fileNew)\n\n        &#39;Compare the two files.\n        if (myTestBase64.CompareResult(fileOld, fileNew))\n            Console.WriteLine(&quot;The recreated binary file {0} is the same as {1}&quot;, args(2), args(1))\n        else \n            Console.WriteLine(&quot;The recreated binary file {0} is not the same as {1}&quot;, args(2), args(1))\n        end if\n\n        fileOld.Flush()\n        fileNew.Flush()\n        fileOld.Close()\n        fileNew.Close()\n\n    end sub\n\n    &#39;Use the WriteBase64 method to create an XML document.  The object  \n    &#39;passed by the user is encoded and included in the document.\n    public shared sub EncodeXmlFile(xmlFileName as String, fileOld as FileStream) \n\n        Dim buffer(bufferSize) as byte\n        Dim readByte as integer=0\n\n        Dim xw as XmlTextWriter = new XmlTextWriter(xmlFileName, Encoding.UTF8)\n        xw.WriteStartDocument()\n        xw.WriteStartElement(&quot;root&quot;)\n        &#39; Create a Char writer.\n        Dim br as BinaryReader = new BinaryReader(fileOld)\n        &#39; Set the file pointer to the end.\n\n        try \n              do \n                  readByte=br.Read(buffer, 0, bufferSize)\n                  xw.WriteBase64(buffer, 0, readByte)\n              loop while (bufferSize &lt;= readByte )\n\n        catch ex as Exception\n            Dim ex1 as EndOfStreamException = new EndOfStreamException()\n\n            if (ex1.Equals(ex)) \n                Console.WriteLine(&quot;We are at end of file&quot;)\n            else \n                Console.WriteLine(ex)\n            end if\n        end try\n        xw.WriteEndElement()\n        xw.WriteEndDocument()\n\n        xw.Flush()\n        xw.Close()\n    end sub\n\n    &#39;Use the ReadBase64 method to decode the new XML document \n    &#39;and generate the original object.\n    public shared sub DecodeOrignalObject(xmlFileName as String, fileNew as FileStream) \n\n        Dim buffer(bufferSize) as byte\n        Dim readByte as integer =0\n\n        &#39;Create a file to write the bmp back.\n        Dim bw as BinaryWriter = new BinaryWriter(fileNew)\n\n        Dim tr as XmlTextReader = new XmlTextReader(xmlFileName)\n        tr.MoveToContent()\n        Console.WriteLine(tr.Name)\n\n        do \n          readByte=tr.ReadBase64(buffer, 0, bufferSize)\n          bw.Write(buffer, 0, readByte)\n        loop while(readByte&gt;=bufferSize)\n\n        bw.Flush()\n\n    end sub\n\n    &#39;Compare the two files.\n    public function CompareResult(fileOld as FileStream, fileNew as FileStream) as boolean\n\n        Dim readByteOld as integer=0\n        Dim readByteNew as integer=0\n        Dim count as integer\n        Dim readByte as integer=0\n\n        Dim bufferOld(bufferSize) as byte\n        Dim bufferNew(bufferSize) as byte\n\n        Dim binaryReaderOld as BinaryReader = new BinaryReader(fileOld)\n        Dim binaryReaderNew as BinaryReader = new BinaryReader(fileNew)\n\n        binaryReaderOld.BaseStream.Seek(0, SeekOrigin.Begin)\n        binaryReaderNew.BaseStream.Seek(0, SeekOrigin.Begin)\n\n        do \n          readByteOld=binaryReaderOld.Read(bufferOld, 0, bufferSize)\n          readByteNew=binaryReaderNew.Read(bufferNew, 0, bufferSize)\n\n          if not (readByteOld=readByteNew) \n              return false\n          end if\n\n          for count=0 to bufferSize-1\n              if not (bufferOld(count)=bufferNew(count)) \n                  return false\n              end if\n          next\n\n        loop while (count&lt;readByte)\n        return true\n    end function\n\n    &#39;Display the usage statement.\n    public shared sub Usage()\n        Console.WriteLine(&quot;TestBase64 sourceFile, targetFile&quot;)\n        Console.WriteLine(&quot;For example: TestBase64 winlogon.bmp, target.bmp&quot;)\n    end sub\n\nend class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter_WriteBinHex_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter_WriteBinHex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteBinHex(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Encodes the specified binary bytes as binhex and writes out the resulting text.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void WriteBinHex (byte[] buffer, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Byte array to encode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position in the buffer indicating the start of the bytes to write.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>buffer</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The buffer length minus <code>index</code> is less than <code>count</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> or <code>count</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Xml.XmlTextWriter.WriteState*</span> is Closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter_WriteCData_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter_WriteCData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteCData(String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes out a &lt;![CDATA[...]]&gt; block containing the specified text.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void WriteCData (string text);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>text</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Text to place inside the CDATA block.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The text would result in a non-well formed XML document.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Xml.XmlTextWriter.WriteState*</span> is <code>Closed</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.  </p>\n</div>\n<p> If <code>text</code> is either <code>null</code> or <code>String.Empty</code>, this method writes an empty CDATA block, for example &lt;![CDATA[]]&gt;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example writes an XML file representing a book.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextWriter.WriteStartDocument Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlTextWriter^ writer = nullptr;\n   String^ filename = &quot;sampledata.xml&quot;;\n   writer = gcnew XmlTextWriter( filename, nullptr );\n   \n   //Use indenting for readability.\n   writer-&gt;Formatting = Formatting::Indented;\n   \n   //Write the XML delcaration. \n   writer-&gt;WriteStartDocument();\n   \n   //Write the ProcessingInstruction node.\n   String^ PItext = &quot;type=&#39;text/xsl&#39; href=&#39;book.xsl&#39;&quot;;\n   writer-&gt;WriteProcessingInstruction( &quot;xml-stylesheet&quot;, PItext );\n   \n   //Write the DocumentType node.\n   writer-&gt;WriteDocType( &quot;book&quot;, nullptr, nullptr, &quot;&lt;!ENTITY h &#39;hardcover&#39;&gt;&quot; );\n   \n   //Write a Comment node.\n   writer-&gt;WriteComment( &quot;sample XML&quot; );\n   \n   //Write a root element.\n   writer-&gt;WriteStartElement( &quot;book&quot; );\n   \n   //Write the genre attribute.\n   writer-&gt;WriteAttributeString( &quot;genre&quot;, &quot;novel&quot; );\n   \n   //Write the ISBN attribute.\n   writer-&gt;WriteAttributeString( &quot;ISBN&quot;, &quot;1-8630-014&quot; );\n   \n   //Write the title.\n   writer-&gt;WriteElementString( &quot;title&quot;, &quot;The Handmaid&#39;s Tale&quot; );\n   \n   //Write the style element.\n   writer-&gt;WriteStartElement( &quot;style&quot; );\n   writer-&gt;WriteEntityRef( &quot;h&quot; );\n   writer-&gt;WriteEndElement();\n   \n   //Write the price.\n   writer-&gt;WriteElementString( &quot;price&quot;, &quot;19.95&quot; );\n   \n   //Write CDATA.\n   writer-&gt;WriteCData( &quot;Prices 15% off!!&quot; );\n   \n   //Write the close tag for the root element.\n   writer-&gt;WriteEndElement();\n   writer-&gt;WriteEndDocument();\n   \n   //Write the XML to file and close the writer.\n   writer-&gt;Flush();\n   writer-&gt;Close();\n   \n   //Load the file into an XmlDocument to ensure well formed XML.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   //Preserve white space for readability.\n   doc-&gt;PreserveWhitespace = true;\n   \n   //Load the file.\n   doc-&gt;Load( filename );\n   \n   //Display the XML content to the console.\n   Console::Write( doc-&gt;InnerXml );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextWriter.WriteStartDocument Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  private const string filename = &quot;sampledata.xml&quot;;\n\n  public static void Main()\n  {\n     XmlTextWriter writer = null;\n\n     writer = new XmlTextWriter (filename, null);\n     //Use indenting for readability.\n     writer.Formatting = Formatting.Indented;\n\n     //Write the XML delcaration. \n     writer.WriteStartDocument();\n\n     //Write the ProcessingInstruction node.\n     String PItext=&quot;type=&#39;text/xsl&#39; href=&#39;book.xsl&#39;&quot;;\n     writer.WriteProcessingInstruction(&quot;xml-stylesheet&quot;, PItext);\n\n     //Write the DocumentType node.\n     writer.WriteDocType(&quot;book&quot;, null , null, &quot;&lt;!ENTITY h &#39;hardcover&#39;&gt;&quot;);\n        \n     //Write a Comment node.\n     writer.WriteComment(&quot;sample XML&quot;);\n    \n     //Write a root element.\n     writer.WriteStartElement(&quot;book&quot;);\n\n     //Write the genre attribute.\n     writer.WriteAttributeString(&quot;genre&quot;, &quot;novel&quot;);\n    \n     //Write the ISBN attribute.\n     writer.WriteAttributeString(&quot;ISBN&quot;, &quot;1-8630-014&quot;);\n\n     //Write the title.\n     writer.WriteElementString(&quot;title&quot;, &quot;The Handmaid&#39;s Tale&quot;);\n              \n     //Write the style element.\n     writer.WriteStartElement(&quot;style&quot;);\n     writer.WriteEntityRef(&quot;h&quot;);\n     writer.WriteEndElement(); \n\n     //Write the price.\n     writer.WriteElementString(&quot;price&quot;, &quot;19.95&quot;);\n\n     //Write CDATA.\n     writer.WriteCData(&quot;Prices 15% off!!&quot;);\n\n     //Write the close tag for the root element.\n     writer.WriteEndElement();\n             \n     writer.WriteEndDocument();\n\n     //Write the XML to file and close the writer.\n     writer.Flush();\n     writer.Close();  \n\n     //Load the file into an XmlDocument to ensure well formed XML.\n     XmlDocument doc = new XmlDocument();\n     //Preserve white space for readability.\n     doc.PreserveWhitespace = true;\n     //Load the file.\n     doc.Load(filename);  \n    \n     //Display the XML content to the console.\n     Console.Write(doc.InnerXml);  \n\n  }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextWriter.WriteStartDocument Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    Private Shared filename As String = &quot;sampledata.xml&quot;\n    Public Shared Sub Main()\n        Dim writer As XmlTextWriter = Nothing\n        \n        writer = New XmlTextWriter(filename, Nothing)\n        &#39;Use indenting for readability.\n        writer.Formatting = Formatting.Indented\n        \n        &#39;Write the XML delcaration. \n        writer.WriteStartDocument()\n        \n        &#39;Write the ProcessingInstruction node.\n        Dim PItext As String = &quot;type=&#39;text/xsl&#39; href=&#39;book.xsl&#39;&quot;\n        writer.WriteProcessingInstruction(&quot;xml-stylesheet&quot;, PItext)\n        \n        &#39;Write the DocumentType node.\n        writer.WriteDocType(&quot;book&quot;, Nothing, Nothing, &quot;&lt;!ENTITY h &#39;hardcover&#39;&gt;&quot;)\n        \n        &#39;Write a Comment node.\n        writer.WriteComment(&quot;sample XML&quot;)\n        \n        &#39;Write a root element.\n        writer.WriteStartElement(&quot;book&quot;)\n        \n        &#39;Write the genre attribute.\n        writer.WriteAttributeString(&quot;genre&quot;, &quot;novel&quot;)\n        \n        &#39;Write the ISBN attribute.\n        writer.WriteAttributeString(&quot;ISBN&quot;, &quot;1-8630-014&quot;)\n        \n        &#39;Write the title.\n        writer.WriteElementString(&quot;title&quot;, &quot;The Handmaid&#39;s Tale&quot;)\n        \n        &#39;Write the style element.\n        writer.WriteStartElement(&quot;style&quot;)\n        writer.WriteEntityRef(&quot;h&quot;)\n        writer.WriteEndElement()\n        \n        &#39;Write the price.\n        writer.WriteElementString(&quot;price&quot;, &quot;19.95&quot;)\n        \n        &#39;Write CDATA.\n        writer.WriteCData(&quot;Prices 15% off!!&quot;)\n        \n        &#39;Write the close tag for the root element.\n        writer.WriteEndElement()\n        \n        writer.WriteEndDocument()\n        \n        &#39;Write the XML to file and close the writer.\n        writer.Flush()\n        writer.Close()\n        \n        &#39;Load the file into an XmlDocument to ensure well formed XML.\n        Dim doc As New XmlDocument()\n        &#39;Preserve white space for readability.\n        doc.PreserveWhitespace = True\n        &#39;Load the file.\n        doc.Load(filename)\n        \n        &#39;Display the XML content to the console.\n        Console.Write(doc.InnerXml)\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter_WriteCharEntity_System_Char_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter_WriteCharEntity_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteCharEntity(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Forces the generation of a character entity for the specified Unicode character value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void WriteCharEntity (char ch);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ch</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Unicode character for which to generate a character entity.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The character is in the surrogate pair character range, <code>0xd800</code> - <code>0xdfff</code>; or the text would result in a non-well formed XML document.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Xml.XmlTextWriter.WriteState*</span> is <code>Closed</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.  </p>\n</div>\n<p> This method writes the Unicode character in hexadecimal character entity reference format.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <code>WriteCharEntity</code> method to write an e-mail address.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextWriter.WriteTimeSpan Example#1\">using System;\nusing System.Xml;\n\npublic class Sample {\n \n  public static void Main() {\n   \n    XmlTextWriter writer = null;\n     \n      try {\n    \n        writer = new XmlTextWriter (Console.Out);\n \n        // Write an element.\n        writer.WriteStartElement(&quot;address&quot;);\n     \n        // Write an e-mail address using entities\n        // for the @ and . characters.\n        writer.WriteString(&quot;someone&quot;);\n        writer.WriteCharEntity(&#39;@&#39;);\n        writer.WriteString(&quot;example&quot;);\n        writer.WriteCharEntity(&#39;.&#39;);\n        writer.WriteString(&quot;com&quot;);\n        writer.WriteEndElement();\n \n    }        \n \n    finally {\n      // Close the writer.\n      if (writer != null)\n        writer.Close();\n    } \n  }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextWriter.WriteTimeSpan Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Xml;\nint main()\n{\n   XmlTextWriter^ writer = nullptr;\n   try\n   {\n      writer = gcnew XmlTextWriter( Console::Out );\n      \n      // Write an element.\n      writer-&gt;WriteStartElement( &quot;address&quot; );\n      \n      // Write an e-mail address using entities\n      // for the @ and . characters.\n      writer-&gt;WriteString( &quot;someone&quot; );\n      writer-&gt;WriteCharEntity( &#39;@&#39; );\n      writer-&gt;WriteString( &quot;example&quot; );\n      writer-&gt;WriteCharEntity( &#39;.&#39; );\n      writer-&gt;WriteString( &quot;com&quot; );\n      writer-&gt;WriteEndElement();\n   }\n   finally\n   {\n      \n      // Close the writer.\n      if ( writer != nullptr )\n            writer-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextWriter.WriteTimeSpan Example#1\">Imports System\nImports System.Xml\n\npublic class Sample \n \n  public shared sub Main() \n   \n    Dim writer as XmlTextWriter = nothing\n     \n      try \n    \n        writer = new XmlTextWriter (Console.Out)\n \n        &#39; Write an element.\n        writer.WriteStartElement(&quot;address&quot;)\n     \n        &#39; Write an e-mail address using entities\n        &#39; for the @ and . characters.\n        writer.WriteString(&quot;someone&quot;)\n        writer.WriteCharEntity(&quot;@&quot;c)\n        writer.WriteString(&quot;example&quot;)\n        writer.WriteCharEntity(&quot;.&quot;c)\n        writer.WriteString(&quot;com&quot;)\n        writer.WriteEndElement()        \n \n    finally \n      &#39; Close the writer.\n      if not writer is nothing\n        writer.Close()\n      end if\n    end try \n\n  end sub\nend class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter_WriteChars_System_Char___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter_WriteChars_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteChars(Char[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Writes text one buffer at a time.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void WriteChars (char[] buffer, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Character array containing the text to write.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position in the buffer indicating the start of the text to write.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>buffer</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> or <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> The buffer length minus <code>index</code> is less than <code>count</code>; the call results in surrogate pair characters being split or an invalid surrogate pair being written.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Xml.XmlTextWriter.WriteState*</span> is Closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.  </p>\n</div>\n<p> This method can be used to write large amounts of text one buffer at a time.  </p>\n<p> Special handling must be done to ensure the <code>WriteChars</code> method does not split surrogate pair characters across multiple buffer writes. The XML specification defines the valid ranges for surrogate pairs.  </p>\n<p> An exception is thrown if surrogate pair characters are written that would result in the surrogate pair characters being split in the buffer.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"XmlTextWriter.WriteChars#1\">            using (XmlTextWriter writer = new XmlTextWriter(Console.Out))\n            {\n                writer.WriteStartDocument();\n\n                char[] ch = new char[4];\n                ch[0] = &#39;t&#39;;\n                ch[1] = &#39;e&#39;;\n                ch[2] = &#39;x&#39;;\n                ch[3] = &#39;t&#39;;\n\n                writer.WriteStartElement(&quot;WriteCharacters&quot;);\n                writer.WriteChars(ch, 0, ch.Length);\n                writer.WriteEndElement();\n                writer.WriteEndDocument();\n            }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter_WriteComment_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter_WriteComment_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteComment(String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes out a comment <!--...--> containing the specified text.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void WriteComment (string text);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>text</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Text to place inside the comment.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The text would result in a non-well formed XML document</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Xml.XmlTextWriter.WriteState*</span> is <code>Closed</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.  </p>\n</div>\n<p> If <code>text</code> is either <code>null</code> or <code>String.Empty</code>, this method writes a <code>Comment</code> with no data content, for example &lt;!----&gt;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example writes an XML file representing a book.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextWriter.WriteStartDocument Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlTextWriter^ writer = nullptr;\n   String^ filename = &quot;sampledata.xml&quot;;\n   writer = gcnew XmlTextWriter( filename, nullptr );\n   \n   //Use indenting for readability.\n   writer-&gt;Formatting = Formatting::Indented;\n   \n   //Write the XML delcaration. \n   writer-&gt;WriteStartDocument();\n   \n   //Write the ProcessingInstruction node.\n   String^ PItext = &quot;type=&#39;text/xsl&#39; href=&#39;book.xsl&#39;&quot;;\n   writer-&gt;WriteProcessingInstruction( &quot;xml-stylesheet&quot;, PItext );\n   \n   //Write the DocumentType node.\n   writer-&gt;WriteDocType( &quot;book&quot;, nullptr, nullptr, &quot;&lt;!ENTITY h &#39;hardcover&#39;&gt;&quot; );\n   \n   //Write a Comment node.\n   writer-&gt;WriteComment( &quot;sample XML&quot; );\n   \n   //Write a root element.\n   writer-&gt;WriteStartElement( &quot;book&quot; );\n   \n   //Write the genre attribute.\n   writer-&gt;WriteAttributeString( &quot;genre&quot;, &quot;novel&quot; );\n   \n   //Write the ISBN attribute.\n   writer-&gt;WriteAttributeString( &quot;ISBN&quot;, &quot;1-8630-014&quot; );\n   \n   //Write the title.\n   writer-&gt;WriteElementString( &quot;title&quot;, &quot;The Handmaid&#39;s Tale&quot; );\n   \n   //Write the style element.\n   writer-&gt;WriteStartElement( &quot;style&quot; );\n   writer-&gt;WriteEntityRef( &quot;h&quot; );\n   writer-&gt;WriteEndElement();\n   \n   //Write the price.\n   writer-&gt;WriteElementString( &quot;price&quot;, &quot;19.95&quot; );\n   \n   //Write CDATA.\n   writer-&gt;WriteCData( &quot;Prices 15% off!!&quot; );\n   \n   //Write the close tag for the root element.\n   writer-&gt;WriteEndElement();\n   writer-&gt;WriteEndDocument();\n   \n   //Write the XML to file and close the writer.\n   writer-&gt;Flush();\n   writer-&gt;Close();\n   \n   //Load the file into an XmlDocument to ensure well formed XML.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   //Preserve white space for readability.\n   doc-&gt;PreserveWhitespace = true;\n   \n   //Load the file.\n   doc-&gt;Load( filename );\n   \n   //Display the XML content to the console.\n   Console::Write( doc-&gt;InnerXml );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextWriter.WriteStartDocument Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  private const string filename = &quot;sampledata.xml&quot;;\n\n  public static void Main()\n  {\n     XmlTextWriter writer = null;\n\n     writer = new XmlTextWriter (filename, null);\n     //Use indenting for readability.\n     writer.Formatting = Formatting.Indented;\n\n     //Write the XML delcaration. \n     writer.WriteStartDocument();\n\n     //Write the ProcessingInstruction node.\n     String PItext=&quot;type=&#39;text/xsl&#39; href=&#39;book.xsl&#39;&quot;;\n     writer.WriteProcessingInstruction(&quot;xml-stylesheet&quot;, PItext);\n\n     //Write the DocumentType node.\n     writer.WriteDocType(&quot;book&quot;, null , null, &quot;&lt;!ENTITY h &#39;hardcover&#39;&gt;&quot;);\n        \n     //Write a Comment node.\n     writer.WriteComment(&quot;sample XML&quot;);\n    \n     //Write a root element.\n     writer.WriteStartElement(&quot;book&quot;);\n\n     //Write the genre attribute.\n     writer.WriteAttributeString(&quot;genre&quot;, &quot;novel&quot;);\n    \n     //Write the ISBN attribute.\n     writer.WriteAttributeString(&quot;ISBN&quot;, &quot;1-8630-014&quot;);\n\n     //Write the title.\n     writer.WriteElementString(&quot;title&quot;, &quot;The Handmaid&#39;s Tale&quot;);\n              \n     //Write the style element.\n     writer.WriteStartElement(&quot;style&quot;);\n     writer.WriteEntityRef(&quot;h&quot;);\n     writer.WriteEndElement(); \n\n     //Write the price.\n     writer.WriteElementString(&quot;price&quot;, &quot;19.95&quot;);\n\n     //Write CDATA.\n     writer.WriteCData(&quot;Prices 15% off!!&quot;);\n\n     //Write the close tag for the root element.\n     writer.WriteEndElement();\n             \n     writer.WriteEndDocument();\n\n     //Write the XML to file and close the writer.\n     writer.Flush();\n     writer.Close();  \n\n     //Load the file into an XmlDocument to ensure well formed XML.\n     XmlDocument doc = new XmlDocument();\n     //Preserve white space for readability.\n     doc.PreserveWhitespace = true;\n     //Load the file.\n     doc.Load(filename);  \n    \n     //Display the XML content to the console.\n     Console.Write(doc.InnerXml);  \n\n  }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextWriter.WriteStartDocument Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    Private Shared filename As String = &quot;sampledata.xml&quot;\n    Public Shared Sub Main()\n        Dim writer As XmlTextWriter = Nothing\n        \n        writer = New XmlTextWriter(filename, Nothing)\n        &#39;Use indenting for readability.\n        writer.Formatting = Formatting.Indented\n        \n        &#39;Write the XML delcaration. \n        writer.WriteStartDocument()\n        \n        &#39;Write the ProcessingInstruction node.\n        Dim PItext As String = &quot;type=&#39;text/xsl&#39; href=&#39;book.xsl&#39;&quot;\n        writer.WriteProcessingInstruction(&quot;xml-stylesheet&quot;, PItext)\n        \n        &#39;Write the DocumentType node.\n        writer.WriteDocType(&quot;book&quot;, Nothing, Nothing, &quot;&lt;!ENTITY h &#39;hardcover&#39;&gt;&quot;)\n        \n        &#39;Write a Comment node.\n        writer.WriteComment(&quot;sample XML&quot;)\n        \n        &#39;Write a root element.\n        writer.WriteStartElement(&quot;book&quot;)\n        \n        &#39;Write the genre attribute.\n        writer.WriteAttributeString(&quot;genre&quot;, &quot;novel&quot;)\n        \n        &#39;Write the ISBN attribute.\n        writer.WriteAttributeString(&quot;ISBN&quot;, &quot;1-8630-014&quot;)\n        \n        &#39;Write the title.\n        writer.WriteElementString(&quot;title&quot;, &quot;The Handmaid&#39;s Tale&quot;)\n        \n        &#39;Write the style element.\n        writer.WriteStartElement(&quot;style&quot;)\n        writer.WriteEntityRef(&quot;h&quot;)\n        writer.WriteEndElement()\n        \n        &#39;Write the price.\n        writer.WriteElementString(&quot;price&quot;, &quot;19.95&quot;)\n        \n        &#39;Write CDATA.\n        writer.WriteCData(&quot;Prices 15% off!!&quot;)\n        \n        &#39;Write the close tag for the root element.\n        writer.WriteEndElement()\n        \n        writer.WriteEndDocument()\n        \n        &#39;Write the XML to file and close the writer.\n        writer.Flush()\n        writer.Close()\n        \n        &#39;Load the file into an XmlDocument to ensure well formed XML.\n        Dim doc As New XmlDocument()\n        &#39;Preserve white space for readability.\n        doc.PreserveWhitespace = True\n        &#39;Load the file.\n        doc.Load(filename)\n        \n        &#39;Display the XML content to the console.\n        Console.Write(doc.InnerXml)\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter_WriteDocType_System_String_System_String_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter_WriteDocType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteDocType(String,String,String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the DOCTYPE declaration with the specified name and optional attributes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void WriteDocType (string name, string pubid, string sysid, string subset);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the DOCTYPE. This must be non-empty.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pubid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>If non-null it also writes PUBLIC &quot;pubid&quot; &quot;sysid&quot; where <code>pubid</code> and <code>sysid</code> are replaced with the value of the given arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>sysid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>If <code>pubid</code> is null and <code>sysid</code> is non-null it writes SYSTEM &quot;sysid&quot; where <code>sysid</code> is replaced with the value of this argument.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>subset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>If non-null it writes [subset] where subset is replaced with the value of this argument.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This method was called outside the prolog (after the root element).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code> or <code>String.Empty</code>  </p>\n<p> -or-  </p>\n<p> the value for <code>name</code> would result in invalid XML.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.  </p>\n</div>\n<p> This method does not check for invalid characters in <code>pubid</code>, <code>sysid</code> or <code>subset</code>. It also does not check that the internal subset is well-formed.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> The <a class=\"xref\" href=\"system.xml.xmltextwriter\" data-linktype=\"relative-path\">XmlTextWriter</a> does not validate any data that is passed to the WriteDocType method. You should not pass arbitrary data to this method.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example writes an XML file representing a book.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextWriter.WriteStartDocument Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlTextWriter^ writer = nullptr;\n   String^ filename = &quot;sampledata.xml&quot;;\n   writer = gcnew XmlTextWriter( filename, nullptr );\n   \n   //Use indenting for readability.\n   writer-&gt;Formatting = Formatting::Indented;\n   \n   //Write the XML delcaration. \n   writer-&gt;WriteStartDocument();\n   \n   //Write the ProcessingInstruction node.\n   String^ PItext = &quot;type=&#39;text/xsl&#39; href=&#39;book.xsl&#39;&quot;;\n   writer-&gt;WriteProcessingInstruction( &quot;xml-stylesheet&quot;, PItext );\n   \n   //Write the DocumentType node.\n   writer-&gt;WriteDocType( &quot;book&quot;, nullptr, nullptr, &quot;&lt;!ENTITY h &#39;hardcover&#39;&gt;&quot; );\n   \n   //Write a Comment node.\n   writer-&gt;WriteComment( &quot;sample XML&quot; );\n   \n   //Write a root element.\n   writer-&gt;WriteStartElement( &quot;book&quot; );\n   \n   //Write the genre attribute.\n   writer-&gt;WriteAttributeString( &quot;genre&quot;, &quot;novel&quot; );\n   \n   //Write the ISBN attribute.\n   writer-&gt;WriteAttributeString( &quot;ISBN&quot;, &quot;1-8630-014&quot; );\n   \n   //Write the title.\n   writer-&gt;WriteElementString( &quot;title&quot;, &quot;The Handmaid&#39;s Tale&quot; );\n   \n   //Write the style element.\n   writer-&gt;WriteStartElement( &quot;style&quot; );\n   writer-&gt;WriteEntityRef( &quot;h&quot; );\n   writer-&gt;WriteEndElement();\n   \n   //Write the price.\n   writer-&gt;WriteElementString( &quot;price&quot;, &quot;19.95&quot; );\n   \n   //Write CDATA.\n   writer-&gt;WriteCData( &quot;Prices 15% off!!&quot; );\n   \n   //Write the close tag for the root element.\n   writer-&gt;WriteEndElement();\n   writer-&gt;WriteEndDocument();\n   \n   //Write the XML to file and close the writer.\n   writer-&gt;Flush();\n   writer-&gt;Close();\n   \n   //Load the file into an XmlDocument to ensure well formed XML.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   //Preserve white space for readability.\n   doc-&gt;PreserveWhitespace = true;\n   \n   //Load the file.\n   doc-&gt;Load( filename );\n   \n   //Display the XML content to the console.\n   Console::Write( doc-&gt;InnerXml );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextWriter.WriteStartDocument Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  private const string filename = &quot;sampledata.xml&quot;;\n\n  public static void Main()\n  {\n     XmlTextWriter writer = null;\n\n     writer = new XmlTextWriter (filename, null);\n     //Use indenting for readability.\n     writer.Formatting = Formatting.Indented;\n\n     //Write the XML delcaration. \n     writer.WriteStartDocument();\n\n     //Write the ProcessingInstruction node.\n     String PItext=&quot;type=&#39;text/xsl&#39; href=&#39;book.xsl&#39;&quot;;\n     writer.WriteProcessingInstruction(&quot;xml-stylesheet&quot;, PItext);\n\n     //Write the DocumentType node.\n     writer.WriteDocType(&quot;book&quot;, null , null, &quot;&lt;!ENTITY h &#39;hardcover&#39;&gt;&quot;);\n        \n     //Write a Comment node.\n     writer.WriteComment(&quot;sample XML&quot;);\n    \n     //Write a root element.\n     writer.WriteStartElement(&quot;book&quot;);\n\n     //Write the genre attribute.\n     writer.WriteAttributeString(&quot;genre&quot;, &quot;novel&quot;);\n    \n     //Write the ISBN attribute.\n     writer.WriteAttributeString(&quot;ISBN&quot;, &quot;1-8630-014&quot;);\n\n     //Write the title.\n     writer.WriteElementString(&quot;title&quot;, &quot;The Handmaid&#39;s Tale&quot;);\n              \n     //Write the style element.\n     writer.WriteStartElement(&quot;style&quot;);\n     writer.WriteEntityRef(&quot;h&quot;);\n     writer.WriteEndElement(); \n\n     //Write the price.\n     writer.WriteElementString(&quot;price&quot;, &quot;19.95&quot;);\n\n     //Write CDATA.\n     writer.WriteCData(&quot;Prices 15% off!!&quot;);\n\n     //Write the close tag for the root element.\n     writer.WriteEndElement();\n             \n     writer.WriteEndDocument();\n\n     //Write the XML to file and close the writer.\n     writer.Flush();\n     writer.Close();  \n\n     //Load the file into an XmlDocument to ensure well formed XML.\n     XmlDocument doc = new XmlDocument();\n     //Preserve white space for readability.\n     doc.PreserveWhitespace = true;\n     //Load the file.\n     doc.Load(filename);  \n    \n     //Display the XML content to the console.\n     Console.Write(doc.InnerXml);  \n\n  }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextWriter.WriteStartDocument Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    Private Shared filename As String = &quot;sampledata.xml&quot;\n    Public Shared Sub Main()\n        Dim writer As XmlTextWriter = Nothing\n        \n        writer = New XmlTextWriter(filename, Nothing)\n        &#39;Use indenting for readability.\n        writer.Formatting = Formatting.Indented\n        \n        &#39;Write the XML delcaration. \n        writer.WriteStartDocument()\n        \n        &#39;Write the ProcessingInstruction node.\n        Dim PItext As String = &quot;type=&#39;text/xsl&#39; href=&#39;book.xsl&#39;&quot;\n        writer.WriteProcessingInstruction(&quot;xml-stylesheet&quot;, PItext)\n        \n        &#39;Write the DocumentType node.\n        writer.WriteDocType(&quot;book&quot;, Nothing, Nothing, &quot;&lt;!ENTITY h &#39;hardcover&#39;&gt;&quot;)\n        \n        &#39;Write a Comment node.\n        writer.WriteComment(&quot;sample XML&quot;)\n        \n        &#39;Write a root element.\n        writer.WriteStartElement(&quot;book&quot;)\n        \n        &#39;Write the genre attribute.\n        writer.WriteAttributeString(&quot;genre&quot;, &quot;novel&quot;)\n        \n        &#39;Write the ISBN attribute.\n        writer.WriteAttributeString(&quot;ISBN&quot;, &quot;1-8630-014&quot;)\n        \n        &#39;Write the title.\n        writer.WriteElementString(&quot;title&quot;, &quot;The Handmaid&#39;s Tale&quot;)\n        \n        &#39;Write the style element.\n        writer.WriteStartElement(&quot;style&quot;)\n        writer.WriteEntityRef(&quot;h&quot;)\n        writer.WriteEndElement()\n        \n        &#39;Write the price.\n        writer.WriteElementString(&quot;price&quot;, &quot;19.95&quot;)\n        \n        &#39;Write CDATA.\n        writer.WriteCData(&quot;Prices 15% off!!&quot;)\n        \n        &#39;Write the close tag for the root element.\n        writer.WriteEndElement()\n        \n        writer.WriteEndDocument()\n        \n        &#39;Write the XML to file and close the writer.\n        writer.Flush()\n        writer.Close()\n        \n        &#39;Load the file into an XmlDocument to ensure well formed XML.\n        Dim doc As New XmlDocument()\n        &#39;Preserve white space for readability.\n        doc.PreserveWhitespace = True\n        &#39;Load the file.\n        doc.Load(filename)\n        \n        &#39;Display the XML content to the console.\n        Console.Write(doc.InnerXml)\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter_WriteEndAttribute\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter_WriteEndAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteEndAttribute()</div>        \r\n          </div>\r\n    \r\n            <p>Closes the previous <span class=\"xref\">stem.Xml.XmlTextWriter.WriteStartAttribute*</span> call.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void WriteEndAttribute ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.  </p>\n</div>\n<p> If you call <code>WriteStartAttribute</code>, you can close the attribute with this method.  </p>\n<p> You can also close the attribute by calling <code>WriteStartAttribute</code> again, calling <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteAttributeString_\" data-linktype=\"relative-path\">WriteAttributeString</a>, or calling <a class=\"xref\" href=\"system.xml.xmltextwriter#System_Xml_XmlTextWriter_WriteEndElement_\" data-linktype=\"relative-path\">WriteEndElement</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example writes out a book.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextWriter.WriteStartElement Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  private const string filename = &quot;sampledata.xml&quot;;\n\n  public static void Main()\n  {\n\n     XmlTextWriter writer = new XmlTextWriter (filename, null);\n     //Use indenting for readability.\n     writer.Formatting = Formatting.Indented;\n        \n     writer.WriteComment(&quot;sample XML fragment&quot;);\n    \n     //Write an element (this one is the root).\n     writer.WriteStartElement(&quot;bookstore&quot;);\n\n     //Write the namespace declaration.\n     writer.WriteAttributeString(&quot;xmlns&quot;, &quot;bk&quot;, null, &quot;urn:samples&quot;);\n\n     writer.WriteStartElement(&quot;book&quot;);\n\n     //Lookup the prefix and then write the ISBN attribute.\n     string prefix = writer.LookupPrefix(&quot;urn:samples&quot;);\n     writer.WriteStartAttribute(prefix, &quot;ISBN&quot;, &quot;urn:samples&quot;);\n     writer.WriteString(&quot;1-861003-78&quot;);\n     writer.WriteEndAttribute();     \n\n     //Write the title.\n     writer.WriteStartElement(&quot;title&quot;);\n     writer.WriteString(&quot;The Handmaid&#39;s Tale&quot;);\n     writer.WriteEndElement();\n              \n     //Write the price.\n     writer.WriteElementString(&quot;price&quot;, &quot;19.95&quot;);\n     \n     //Write the style element.\n     writer.WriteStartElement(prefix, &quot;style&quot;, &quot;urn:samples&quot;);\n     writer.WriteString(&quot;hardcover&quot;);\n     writer.WriteEndElement();\n\n     //Write the end tag for the book element.\n     writer.WriteEndElement();\n\n     //Write the close tag for the root element.\n     writer.WriteEndElement();\n             \n     //Write the XML to file and close the writer.\n     writer.Flush();\n     writer.Close();\n\n     //Read the file back in and parse to ensure well formed XML.\n     XmlDocument doc = new XmlDocument();\n     //Preserve white space for readability.\n     doc.PreserveWhitespace = true;\n     //Load the file\n     doc.Load(filename);\n    \n     //Write the XML content to the console.\n     Console.Write(doc.InnerXml);  \n\n  }\n\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextWriter.WriteStartElement Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   String^ filename = &quot;sampledata.xml&quot;;\n   XmlTextWriter^ writer = gcnew XmlTextWriter( filename, nullptr );\n   \n   //Use indenting for readability.\n   writer-&gt;Formatting = Formatting::Indented;\n   writer-&gt;WriteComment( &quot;sample XML fragment&quot; );\n   \n   //Write an element (this one is the root).\n   writer-&gt;WriteStartElement( &quot;bookstore&quot; );\n   \n   //Write the namespace declaration.\n   writer-&gt;WriteAttributeString( &quot;xmlns&quot;, &quot;bk&quot;, nullptr, &quot;urn:samples&quot; );\n   writer-&gt;WriteStartElement( &quot;book&quot; );\n   \n   //Lookup the prefix and then write the ISBN attribute.\n   String^ prefix = writer-&gt;LookupPrefix( &quot;urn:samples&quot; );\n   writer-&gt;WriteStartAttribute( prefix, &quot;ISBN&quot;, &quot;urn:samples&quot; );\n   writer-&gt;WriteString( &quot;1-861003-78&quot; );\n   writer-&gt;WriteEndAttribute();\n   \n   //Write the title.\n   writer-&gt;WriteStartElement( &quot;title&quot; );\n   writer-&gt;WriteString( &quot;The Handmaid&#39;s Tale&quot; );\n   writer-&gt;WriteEndElement();\n   \n   //Write the price.\n   writer-&gt;WriteElementString( &quot;price&quot;, &quot;19.95&quot; );\n   \n   //Write the style element.\n   writer-&gt;WriteStartElement( prefix, &quot;style&quot;, &quot;urn:samples&quot; );\n   writer-&gt;WriteString( &quot;hardcover&quot; );\n   writer-&gt;WriteEndElement();\n   \n   //Write the end tag for the book element.\n   writer-&gt;WriteEndElement();\n   \n   //Write the close tag for the root element.\n   writer-&gt;WriteEndElement();\n   \n   //Write the XML to file and close the writer.\n   writer-&gt;Flush();\n   writer-&gt;Close();\n   \n   //Read the file back in and parse to ensure well formed XML.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   //Preserve white space for readability.\n   doc-&gt;PreserveWhitespace = true;\n   \n   //Load the file\n   doc-&gt;Load( filename );\n   \n   //Write the XML content to the console.\n   Console::Write( doc-&gt;InnerXml );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextWriter.WriteStartElement Example#1\">Option Strict\nOption Explicit\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    Private Shared filename As String = &quot;sampledata.xml&quot;\n    Public Shared Sub Main()\n        \n        Dim writer As New XmlTextWriter(filename, Nothing)\n        &#39;Use indenting for readability.\n        writer.Formatting = Formatting.Indented\n        \n        writer.WriteComment(&quot;sample XML fragment&quot;)\n        \n        &#39;Write an element (this one is the root).\n        writer.WriteStartElement(&quot;bookstore&quot;)\n        \n        &#39;Write the namespace declaration.\n        writer.WriteAttributeString(&quot;xmlns&quot;, &quot;bk&quot;, Nothing, &quot;urn:samples&quot;)\n        \n        writer.WriteStartElement(&quot;book&quot;)\n        \n        &#39;Lookup the prefix and then write the ISBN attribute.\n        Dim prefix As String = writer.LookupPrefix(&quot;urn:samples&quot;)\n        writer.WriteStartAttribute(prefix, &quot;ISBN&quot;, &quot;urn:samples&quot;)\n        writer.WriteString(&quot;1-861003-78&quot;)\n        writer.WriteEndAttribute()\n        \n        &#39;Write the title.\n        writer.WriteStartElement(&quot;title&quot;)\n        writer.WriteString(&quot;The Handmaid&#39;s Tale&quot;)\n        writer.WriteEndElement()\n        \n        &#39;Write the price.\n        writer.WriteElementString(&quot;price&quot;, &quot;19.95&quot;)\n        \n        &#39;Write the style element.\n        writer.WriteStartElement(prefix, &quot;style&quot;, &quot;urn:samples&quot;)\n        writer.WriteString(&quot;hardcover&quot;)\n        writer.WriteEndElement()\n        \n        &#39;Write the end tag for the book element.\n        writer.WriteEndElement()\n        \n        &#39;Write the close tag for the root element.\n        writer.WriteEndElement()\n        \n        &#39;Write the XML to file and close the writer.\n        writer.Flush()\n        writer.Close()\n        \n        &#39;Read the file back in and parse to ensure well formed XML.\n        Dim doc As New XmlDocument()\n        &#39;Preserve white space for readability.\n        doc.PreserveWhitespace = True\n        &#39;Load the file.\n        doc.Load(filename)\n        \n        &#39;Write the XML content to the console.\n        Console.Write(doc.InnerXml)\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter_WriteEndDocument\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter_WriteEndDocument_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteEndDocument()</div>        \r\n          </div>\r\n    \r\n            <p>Closes any open elements or attributes and puts the writer back in the Start state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void WriteEndDocument ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The XML document is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example writes an XML file representing a book.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextWriter.WriteStartDocument Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlTextWriter^ writer = nullptr;\n   String^ filename = &quot;sampledata.xml&quot;;\n   writer = gcnew XmlTextWriter( filename, nullptr );\n   \n   //Use indenting for readability.\n   writer-&gt;Formatting = Formatting::Indented;\n   \n   //Write the XML delcaration. \n   writer-&gt;WriteStartDocument();\n   \n   //Write the ProcessingInstruction node.\n   String^ PItext = &quot;type=&#39;text/xsl&#39; href=&#39;book.xsl&#39;&quot;;\n   writer-&gt;WriteProcessingInstruction( &quot;xml-stylesheet&quot;, PItext );\n   \n   //Write the DocumentType node.\n   writer-&gt;WriteDocType( &quot;book&quot;, nullptr, nullptr, &quot;&lt;!ENTITY h &#39;hardcover&#39;&gt;&quot; );\n   \n   //Write a Comment node.\n   writer-&gt;WriteComment( &quot;sample XML&quot; );\n   \n   //Write a root element.\n   writer-&gt;WriteStartElement( &quot;book&quot; );\n   \n   //Write the genre attribute.\n   writer-&gt;WriteAttributeString( &quot;genre&quot;, &quot;novel&quot; );\n   \n   //Write the ISBN attribute.\n   writer-&gt;WriteAttributeString( &quot;ISBN&quot;, &quot;1-8630-014&quot; );\n   \n   //Write the title.\n   writer-&gt;WriteElementString( &quot;title&quot;, &quot;The Handmaid&#39;s Tale&quot; );\n   \n   //Write the style element.\n   writer-&gt;WriteStartElement( &quot;style&quot; );\n   writer-&gt;WriteEntityRef( &quot;h&quot; );\n   writer-&gt;WriteEndElement();\n   \n   //Write the price.\n   writer-&gt;WriteElementString( &quot;price&quot;, &quot;19.95&quot; );\n   \n   //Write CDATA.\n   writer-&gt;WriteCData( &quot;Prices 15% off!!&quot; );\n   \n   //Write the close tag for the root element.\n   writer-&gt;WriteEndElement();\n   writer-&gt;WriteEndDocument();\n   \n   //Write the XML to file and close the writer.\n   writer-&gt;Flush();\n   writer-&gt;Close();\n   \n   //Load the file into an XmlDocument to ensure well formed XML.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   //Preserve white space for readability.\n   doc-&gt;PreserveWhitespace = true;\n   \n   //Load the file.\n   doc-&gt;Load( filename );\n   \n   //Display the XML content to the console.\n   Console::Write( doc-&gt;InnerXml );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextWriter.WriteStartDocument Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  private const string filename = &quot;sampledata.xml&quot;;\n\n  public static void Main()\n  {\n     XmlTextWriter writer = null;\n\n     writer = new XmlTextWriter (filename, null);\n     //Use indenting for readability.\n     writer.Formatting = Formatting.Indented;\n\n     //Write the XML delcaration. \n     writer.WriteStartDocument();\n\n     //Write the ProcessingInstruction node.\n     String PItext=&quot;type=&#39;text/xsl&#39; href=&#39;book.xsl&#39;&quot;;\n     writer.WriteProcessingInstruction(&quot;xml-stylesheet&quot;, PItext);\n\n     //Write the DocumentType node.\n     writer.WriteDocType(&quot;book&quot;, null , null, &quot;&lt;!ENTITY h &#39;hardcover&#39;&gt;&quot;);\n        \n     //Write a Comment node.\n     writer.WriteComment(&quot;sample XML&quot;);\n    \n     //Write a root element.\n     writer.WriteStartElement(&quot;book&quot;);\n\n     //Write the genre attribute.\n     writer.WriteAttributeString(&quot;genre&quot;, &quot;novel&quot;);\n    \n     //Write the ISBN attribute.\n     writer.WriteAttributeString(&quot;ISBN&quot;, &quot;1-8630-014&quot;);\n\n     //Write the title.\n     writer.WriteElementString(&quot;title&quot;, &quot;The Handmaid&#39;s Tale&quot;);\n              \n     //Write the style element.\n     writer.WriteStartElement(&quot;style&quot;);\n     writer.WriteEntityRef(&quot;h&quot;);\n     writer.WriteEndElement(); \n\n     //Write the price.\n     writer.WriteElementString(&quot;price&quot;, &quot;19.95&quot;);\n\n     //Write CDATA.\n     writer.WriteCData(&quot;Prices 15% off!!&quot;);\n\n     //Write the close tag for the root element.\n     writer.WriteEndElement();\n             \n     writer.WriteEndDocument();\n\n     //Write the XML to file and close the writer.\n     writer.Flush();\n     writer.Close();  \n\n     //Load the file into an XmlDocument to ensure well formed XML.\n     XmlDocument doc = new XmlDocument();\n     //Preserve white space for readability.\n     doc.PreserveWhitespace = true;\n     //Load the file.\n     doc.Load(filename);  \n    \n     //Display the XML content to the console.\n     Console.Write(doc.InnerXml);  \n\n  }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextWriter.WriteStartDocument Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    Private Shared filename As String = &quot;sampledata.xml&quot;\n    Public Shared Sub Main()\n        Dim writer As XmlTextWriter = Nothing\n        \n        writer = New XmlTextWriter(filename, Nothing)\n        &#39;Use indenting for readability.\n        writer.Formatting = Formatting.Indented\n        \n        &#39;Write the XML delcaration. \n        writer.WriteStartDocument()\n        \n        &#39;Write the ProcessingInstruction node.\n        Dim PItext As String = &quot;type=&#39;text/xsl&#39; href=&#39;book.xsl&#39;&quot;\n        writer.WriteProcessingInstruction(&quot;xml-stylesheet&quot;, PItext)\n        \n        &#39;Write the DocumentType node.\n        writer.WriteDocType(&quot;book&quot;, Nothing, Nothing, &quot;&lt;!ENTITY h &#39;hardcover&#39;&gt;&quot;)\n        \n        &#39;Write a Comment node.\n        writer.WriteComment(&quot;sample XML&quot;)\n        \n        &#39;Write a root element.\n        writer.WriteStartElement(&quot;book&quot;)\n        \n        &#39;Write the genre attribute.\n        writer.WriteAttributeString(&quot;genre&quot;, &quot;novel&quot;)\n        \n        &#39;Write the ISBN attribute.\n        writer.WriteAttributeString(&quot;ISBN&quot;, &quot;1-8630-014&quot;)\n        \n        &#39;Write the title.\n        writer.WriteElementString(&quot;title&quot;, &quot;The Handmaid&#39;s Tale&quot;)\n        \n        &#39;Write the style element.\n        writer.WriteStartElement(&quot;style&quot;)\n        writer.WriteEntityRef(&quot;h&quot;)\n        writer.WriteEndElement()\n        \n        &#39;Write the price.\n        writer.WriteElementString(&quot;price&quot;, &quot;19.95&quot;)\n        \n        &#39;Write CDATA.\n        writer.WriteCData(&quot;Prices 15% off!!&quot;)\n        \n        &#39;Write the close tag for the root element.\n        writer.WriteEndElement()\n        \n        writer.WriteEndDocument()\n        \n        &#39;Write the XML to file and close the writer.\n        writer.Flush()\n        writer.Close()\n        \n        &#39;Load the file into an XmlDocument to ensure well formed XML.\n        Dim doc As New XmlDocument()\n        &#39;Preserve white space for readability.\n        doc.PreserveWhitespace = True\n        &#39;Load the file.\n        doc.Load(filename)\n        \n        &#39;Display the XML content to the console.\n        Console.Write(doc.InnerXml)\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter_WriteEndElement\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter_WriteEndElement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteEndElement()</div>        \r\n          </div>\r\n    \r\n            <p>Closes one element and pops the corresponding namespace scope.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void WriteEndElement ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.  </p>\n</div>\n<p> If the element contains no content a short end tag &quot;/&gt;&quot; is written; otherwise a full end tag is written.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example writes an XML file representing a book.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextWriter.WriteEndElement Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlTextWriter^ writer = nullptr;\n   String^ filename = &quot;sampledata.xml&quot;;\n   writer = gcnew XmlTextWriter( filename, nullptr );\n   \n   //Use indenting for readability.\n   writer-&gt;Formatting = Formatting::Indented;\n   \n   //Write the XML delcaration \n   writer-&gt;WriteStartDocument();\n   \n   //Write the ProcessingInstruction node.\n   String^ PItext = &quot;type=\\&quot;text/xsl\\&quot; href=\\&quot;book.xsl\\&quot;&quot;;\n   writer-&gt;WriteProcessingInstruction( &quot;xml-stylesheet&quot;, PItext );\n   \n   //Write the DocumentType node.\n   writer-&gt;WriteDocType( &quot;book&quot;, nullptr, nullptr, &quot;&lt;!ENTITY h \\&quot;hardcover\\&quot;&gt;&quot; );\n   \n   //Write a Comment node.\n   writer-&gt;WriteComment( &quot;sample XML&quot; );\n   \n   //Write the root element.\n   writer-&gt;WriteStartElement( &quot;book&quot; );\n   \n   //Write the genre attribute.\n   writer-&gt;WriteAttributeString( &quot;genre&quot;, &quot;novel&quot; );\n   \n   //Write the ISBN attribute.\n   writer-&gt;WriteAttributeString( &quot;ISBN&quot;, &quot;1-8630-014&quot; );\n   \n   //Write the title.\n   writer-&gt;WriteElementString( &quot;title&quot;, &quot;The Handmaid&#39;s Tale&quot; );\n   \n   //Write the style element.\n   writer-&gt;WriteStartElement( &quot;style&quot; );\n   writer-&gt;WriteEntityRef( &quot;h&quot; );\n   writer-&gt;WriteEndElement();\n   \n   //Write the price.\n   writer-&gt;WriteElementString( &quot;price&quot;, &quot;19.95&quot; );\n   \n   //Write CDATA.\n   writer-&gt;WriteCData( &quot;Prices 15% off!!&quot; );\n   \n   //Write the close tag for the root element.\n   writer-&gt;WriteEndElement();\n   writer-&gt;WriteEndDocument();\n   \n   //Write the XML to file and close the writer.\n   writer-&gt;Flush();\n   writer-&gt;Close();\n   \n   //Load the file into an XmlDocument to ensure well formed XML.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   //Preserve white space for readability.\n   doc-&gt;PreserveWhitespace = true;\n   \n   //Load the file.\n   doc-&gt;Load( filename );\n   \n   //Display the XML content to the console.\n   Console::Write( doc-&gt;InnerXml );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextWriter.WriteEndElement Example#1\">Option Strict\nOption Explicit\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    Private Const filename As String = &quot;sampledata.xml&quot;\n    \n    Public Shared Sub Main()\n        Dim writer As XmlTextWriter = Nothing\n        \n        writer = New XmlTextWriter(filename, Nothing)\n        &#39;Use indenting for readability.\n        writer.Formatting = Formatting.Indented\n        \n        &#39;Write the XML delcaration. \n        writer.WriteStartDocument()\n        \n        &#39;Write the ProcessingInstruction node.\n        Dim PItext As String = &quot;type=&quot;&quot;text/xsl&quot;&quot; href=&quot;&quot;book.xsl&quot;&quot;&quot;\n        writer.WriteProcessingInstruction(&quot;xml-stylesheet&quot;, PItext)\n        \n        &#39;Write the DocumentType node.\n        writer.WriteDocType(&quot;book&quot;, Nothing, Nothing, &quot;&lt;!ENTITY h &quot;&quot;hardcover&gt;&quot;)\n        \n        &#39;Write a Comment node.\n        writer.WriteComment(&quot;sample XML&quot;)\n        \n        &#39;Write the root element.\n        writer.WriteStartElement(&quot;book&quot;)\n        \n        &#39;Write the genre attribute\n        writer.WriteAttributeString(&quot;genre&quot;, &quot;novel&quot;)\n        \n        &#39;Write the ISBN attribute.\n        writer.WriteAttributeString(&quot;ISBN&quot;, &quot;1-8630-014&quot;)\n        \n        &#39;Write the title.\n        writer.WriteElementString(&quot;title&quot;, &quot;The Handmaid&#39;s Tale&quot;)\n        \n        &#39;Write the style element.\n        writer.WriteStartElement(&quot;style&quot;)\n        writer.WriteEntityRef(&quot;h&quot;)\n        writer.WriteEndElement()\n        \n        &#39;Write the price.\n        writer.WriteElementString(&quot;price&quot;, &quot;19.95&quot;)\n        \n        &#39;Write CDATA.\n        writer.WriteCData(&quot;Prices 15% off!!&quot;)\n        \n        &#39;Write the close tag for the root element.\n        writer.WriteEndElement()\n        \n        writer.WriteEndDocument()\n        \n        &#39;Write the XML to file and close the writer\n        writer.Flush()\n        writer.Close()\n        \n        &#39;Load the file into an XmlDocument to ensure well formed XML.\n        Dim doc As New XmlDocument()\n        &#39;Preserve white space for readability.\n        doc.PreserveWhitespace = True\n        &#39;Load the file.\n        doc.Load(filename)\n        \n        &#39;Display the XML content to the console.\n        Console.Write(doc.InnerXml)\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextWriter.WriteEndElement Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  private const string filename = &quot;sampledata.xml&quot;;\n\n  public static void Main()\n  {\n     XmlTextWriter writer = null;\n\n     writer = new XmlTextWriter (filename, null);\n     //Use indenting for readability.\n     writer.Formatting = Formatting.Indented;\n\n     //Write the XML delcaration \n     writer.WriteStartDocument();\n\n     //Write the ProcessingInstruction node.\n     String PItext=&quot;type=\\&quot;text/xsl\\&quot; href=\\&quot;book.xsl\\&quot;&quot;;\n     writer.WriteProcessingInstruction(&quot;xml-stylesheet&quot;, PItext);\n\n     //Write the DocumentType node.\n     writer.WriteDocType(&quot;book&quot;, null , null, &quot;&lt;!ENTITY h \\&quot;hardcover\\&quot;&gt;&quot;);\n        \n     //Write a Comment node.\n     writer.WriteComment(&quot;sample XML&quot;);\n    \n     //Write the root element.\n     writer.WriteStartElement(&quot;book&quot;);\n\n     //Write the genre attribute.\n     writer.WriteAttributeString(&quot;genre&quot;, &quot;novel&quot;);\n    \n     //Write the ISBN attribute.\n     writer.WriteAttributeString(&quot;ISBN&quot;, &quot;1-8630-014&quot;);\n\n     //Write the title.\n     writer.WriteElementString(&quot;title&quot;, &quot;The Handmaid&#39;s Tale&quot;);\n              \n     //Write the style element.\n     writer.WriteStartElement(&quot;style&quot;);\n     writer.WriteEntityRef(&quot;h&quot;);\n     writer.WriteEndElement(); \n\n     //Write the price.\n     writer.WriteElementString(&quot;price&quot;, &quot;19.95&quot;);\n\n     //Write CDATA.\n     writer.WriteCData(&quot;Prices 15% off!!&quot;);\n\n     //Write the close tag for the root element.\n     writer.WriteEndElement();\n             \n     writer.WriteEndDocument();\n\n     //Write the XML to file and close the writer.\n     writer.Flush();\n     writer.Close();  \n\n     //Load the file into an XmlDocument to ensure well formed XML.\n     XmlDocument doc = new XmlDocument();\n     //Preserve white space for readability.\n     doc.PreserveWhitespace = true;\n     //Load the file.\n     doc.Load(filename);  \n    \n     //Display the XML content to the console.\n     Console.Write(doc.InnerXml);  \n\n  }\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter_WriteEntityRef_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter_WriteEntityRef_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteEntityRef(String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes out an entity reference as <code>&amp;name;</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void WriteEntityRef (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Name of the entity reference.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The text would result in a non-well formed XML document or <code>name</code> is either <code>null</code> or <code>String.Empty</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example writes an XML file representing a book.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextWriter.WriteStartDocument Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlTextWriter^ writer = nullptr;\n   String^ filename = &quot;sampledata.xml&quot;;\n   writer = gcnew XmlTextWriter( filename, nullptr );\n   \n   //Use indenting for readability.\n   writer-&gt;Formatting = Formatting::Indented;\n   \n   //Write the XML delcaration. \n   writer-&gt;WriteStartDocument();\n   \n   //Write the ProcessingInstruction node.\n   String^ PItext = &quot;type=&#39;text/xsl&#39; href=&#39;book.xsl&#39;&quot;;\n   writer-&gt;WriteProcessingInstruction( &quot;xml-stylesheet&quot;, PItext );\n   \n   //Write the DocumentType node.\n   writer-&gt;WriteDocType( &quot;book&quot;, nullptr, nullptr, &quot;&lt;!ENTITY h &#39;hardcover&#39;&gt;&quot; );\n   \n   //Write a Comment node.\n   writer-&gt;WriteComment( &quot;sample XML&quot; );\n   \n   //Write a root element.\n   writer-&gt;WriteStartElement( &quot;book&quot; );\n   \n   //Write the genre attribute.\n   writer-&gt;WriteAttributeString( &quot;genre&quot;, &quot;novel&quot; );\n   \n   //Write the ISBN attribute.\n   writer-&gt;WriteAttributeString( &quot;ISBN&quot;, &quot;1-8630-014&quot; );\n   \n   //Write the title.\n   writer-&gt;WriteElementString( &quot;title&quot;, &quot;The Handmaid&#39;s Tale&quot; );\n   \n   //Write the style element.\n   writer-&gt;WriteStartElement( &quot;style&quot; );\n   writer-&gt;WriteEntityRef( &quot;h&quot; );\n   writer-&gt;WriteEndElement();\n   \n   //Write the price.\n   writer-&gt;WriteElementString( &quot;price&quot;, &quot;19.95&quot; );\n   \n   //Write CDATA.\n   writer-&gt;WriteCData( &quot;Prices 15% off!!&quot; );\n   \n   //Write the close tag for the root element.\n   writer-&gt;WriteEndElement();\n   writer-&gt;WriteEndDocument();\n   \n   //Write the XML to file and close the writer.\n   writer-&gt;Flush();\n   writer-&gt;Close();\n   \n   //Load the file into an XmlDocument to ensure well formed XML.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   //Preserve white space for readability.\n   doc-&gt;PreserveWhitespace = true;\n   \n   //Load the file.\n   doc-&gt;Load( filename );\n   \n   //Display the XML content to the console.\n   Console::Write( doc-&gt;InnerXml );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextWriter.WriteStartDocument Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  private const string filename = &quot;sampledata.xml&quot;;\n\n  public static void Main()\n  {\n     XmlTextWriter writer = null;\n\n     writer = new XmlTextWriter (filename, null);\n     //Use indenting for readability.\n     writer.Formatting = Formatting.Indented;\n\n     //Write the XML delcaration. \n     writer.WriteStartDocument();\n\n     //Write the ProcessingInstruction node.\n     String PItext=&quot;type=&#39;text/xsl&#39; href=&#39;book.xsl&#39;&quot;;\n     writer.WriteProcessingInstruction(&quot;xml-stylesheet&quot;, PItext);\n\n     //Write the DocumentType node.\n     writer.WriteDocType(&quot;book&quot;, null , null, &quot;&lt;!ENTITY h &#39;hardcover&#39;&gt;&quot;);\n        \n     //Write a Comment node.\n     writer.WriteComment(&quot;sample XML&quot;);\n    \n     //Write a root element.\n     writer.WriteStartElement(&quot;book&quot;);\n\n     //Write the genre attribute.\n     writer.WriteAttributeString(&quot;genre&quot;, &quot;novel&quot;);\n    \n     //Write the ISBN attribute.\n     writer.WriteAttributeString(&quot;ISBN&quot;, &quot;1-8630-014&quot;);\n\n     //Write the title.\n     writer.WriteElementString(&quot;title&quot;, &quot;The Handmaid&#39;s Tale&quot;);\n              \n     //Write the style element.\n     writer.WriteStartElement(&quot;style&quot;);\n     writer.WriteEntityRef(&quot;h&quot;);\n     writer.WriteEndElement(); \n\n     //Write the price.\n     writer.WriteElementString(&quot;price&quot;, &quot;19.95&quot;);\n\n     //Write CDATA.\n     writer.WriteCData(&quot;Prices 15% off!!&quot;);\n\n     //Write the close tag for the root element.\n     writer.WriteEndElement();\n             \n     writer.WriteEndDocument();\n\n     //Write the XML to file and close the writer.\n     writer.Flush();\n     writer.Close();  \n\n     //Load the file into an XmlDocument to ensure well formed XML.\n     XmlDocument doc = new XmlDocument();\n     //Preserve white space for readability.\n     doc.PreserveWhitespace = true;\n     //Load the file.\n     doc.Load(filename);  \n    \n     //Display the XML content to the console.\n     Console.Write(doc.InnerXml);  \n\n  }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextWriter.WriteStartDocument Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    Private Shared filename As String = &quot;sampledata.xml&quot;\n    Public Shared Sub Main()\n        Dim writer As XmlTextWriter = Nothing\n        \n        writer = New XmlTextWriter(filename, Nothing)\n        &#39;Use indenting for readability.\n        writer.Formatting = Formatting.Indented\n        \n        &#39;Write the XML delcaration. \n        writer.WriteStartDocument()\n        \n        &#39;Write the ProcessingInstruction node.\n        Dim PItext As String = &quot;type=&#39;text/xsl&#39; href=&#39;book.xsl&#39;&quot;\n        writer.WriteProcessingInstruction(&quot;xml-stylesheet&quot;, PItext)\n        \n        &#39;Write the DocumentType node.\n        writer.WriteDocType(&quot;book&quot;, Nothing, Nothing, &quot;&lt;!ENTITY h &#39;hardcover&#39;&gt;&quot;)\n        \n        &#39;Write a Comment node.\n        writer.WriteComment(&quot;sample XML&quot;)\n        \n        &#39;Write a root element.\n        writer.WriteStartElement(&quot;book&quot;)\n        \n        &#39;Write the genre attribute.\n        writer.WriteAttributeString(&quot;genre&quot;, &quot;novel&quot;)\n        \n        &#39;Write the ISBN attribute.\n        writer.WriteAttributeString(&quot;ISBN&quot;, &quot;1-8630-014&quot;)\n        \n        &#39;Write the title.\n        writer.WriteElementString(&quot;title&quot;, &quot;The Handmaid&#39;s Tale&quot;)\n        \n        &#39;Write the style element.\n        writer.WriteStartElement(&quot;style&quot;)\n        writer.WriteEntityRef(&quot;h&quot;)\n        writer.WriteEndElement()\n        \n        &#39;Write the price.\n        writer.WriteElementString(&quot;price&quot;, &quot;19.95&quot;)\n        \n        &#39;Write CDATA.\n        writer.WriteCData(&quot;Prices 15% off!!&quot;)\n        \n        &#39;Write the close tag for the root element.\n        writer.WriteEndElement()\n        \n        writer.WriteEndDocument()\n        \n        &#39;Write the XML to file and close the writer.\n        writer.Flush()\n        writer.Close()\n        \n        &#39;Load the file into an XmlDocument to ensure well formed XML.\n        Dim doc As New XmlDocument()\n        &#39;Preserve white space for readability.\n        doc.PreserveWhitespace = True\n        &#39;Load the file.\n        doc.Load(filename)\n        \n        &#39;Display the XML content to the console.\n        Console.Write(doc.InnerXml)\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter_WriteFullEndElement\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter_WriteFullEndElement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteFullEndElement()</div>        \r\n          </div>\r\n    \r\n            <p>Closes one element and pops the corresponding namespace scope.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void WriteFullEndElement ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.  </p>\n</div>\n<p> This method always writes the full end tag. This is useful when dealing with elements that must include a full end tag. For example, browsers expect HTML script blocks to be closed with &quot;&lt;/script&gt;&quot;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example writes out an element with no content. It uses WriteFullEndElement to write the full end element tag.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextWriter.WriteFullEndElement Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   \n   //Create a writer to write XML to the console.\n   XmlTextWriter^ writer = nullptr;\n   writer = gcnew XmlTextWriter( Console::Out );\n   \n   //Use indentation for readability.\n   writer-&gt;Formatting = Formatting::Indented;\n   \n   //Write an element (this one is the root).\n   writer-&gt;WriteStartElement( &quot;order&quot; );\n   \n   //Write some attributes.\n   writer-&gt;WriteAttributeString( &quot;date&quot;, &quot;2/19/01&quot; );\n   writer-&gt;WriteAttributeString( &quot;orderID&quot;, &quot;136A5&quot; );\n   \n   //Write a full end element. Because this element has no\n   //content, calling WriteEndElement would have written a\n   //short end tag &#39;/&gt;&#39;.\n   writer-&gt;WriteFullEndElement();\n   \n   //Write the XML to file and close the writer\n   writer-&gt;Close();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextWriter.WriteFullEndElement Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        &#39;Create a writer to write XML to the console.\n        Dim writer As XmlTextWriter = Nothing\n        writer = New XmlTextWriter(Console.Out)\n        \n        &#39;Use indentation for readability.\n        writer.Formatting = Formatting.Indented\n        \n        &#39;Write an element (this one is the root).\n        writer.WriteStartElement(&quot;order&quot;)\n        \n        &#39;Write some attributes.\n        writer.WriteAttributeString(&quot;date&quot;, &quot;2/19/01&quot;)\n        writer.WriteAttributeString(&quot;orderID&quot;, &quot;136A5&quot;)\n        \n        &#39;Write a full end element. Because this element has no\n        &#39;content, calling WriteEndElement would have written a\n        &#39;short end tag &#39;/&gt;&#39;.\n        writer.WriteFullEndElement()\n        \n        &#39;Write the XML to file and close the writer\n        writer.Close()\n    End Sub &#39;Main\nEnd Class &#39;Sample\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextWriter.WriteFullEndElement Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{ \n  public static void Main()\n  {\n     //Create a writer to write XML to the console.\n     XmlTextWriter writer = null;\n     writer = new XmlTextWriter (Console.Out);\n\n     //Use indentation for readability.\n     writer.Formatting = Formatting.Indented;\n        \n     //Write an element (this one is the root).\n     writer.WriteStartElement(&quot;order&quot;);\n\n     //Write some attributes.\n     writer.WriteAttributeString(&quot;date&quot;, &quot;2/19/01&quot;);\n     writer.WriteAttributeString(&quot;orderID&quot;, &quot;136A5&quot;);\n\n     //Write a full end element. Because this element has no\n     //content, calling WriteEndElement would have written a\n     //short end tag &#39;/&gt;&#39;.\n     writer.WriteFullEndElement();\n             \n     //Write the XML to file and close the writer\n     writer.Close();  \n  }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter_WriteName_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter_WriteName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteName(String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes out the specified name, ensuring it is a valid name according to the W3C XML 1.0 recommendation (<a href=\"http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name\" data-linktype=\"external\">http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name</a>).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void WriteName (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Name to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is not a valid XML name; or <code>name</code> is either <code>null</code> or <code>String.Empty</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.  </p>\n</div>\n<p> If <a class=\"xref\" href=\"system.xml.xmltextwriter#System_Xml_XmlTextWriter_Namespaces_\" data-linktype=\"relative-path\">Namespaces</a> is set to <code>true</code>, <code>WriteName</code> also checks that the name is also valid according to the W3C Namespaces in XML recommendation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter_WriteNmToken_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter_WriteNmToken_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteNmToken(String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes out the specified name, ensuring it is a valid <code>NmToken</code> according to the W3C XML 1.0 recommendation (<a href=\"http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name\" data-linktype=\"external\">http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name</a>).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void WriteNmToken (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Name to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is not a valid <code>NmToken</code>; or <code>name</code> is either <code>null</code> or <code>String.Empty</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter_WriteProcessingInstruction_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter_WriteProcessingInstruction_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteProcessingInstruction(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes out a processing instruction with a space between the name and text as follows: &lt;?name text?&gt;.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void WriteProcessingInstruction (string name, string text);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Name of the processing instruction.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>text</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Text to include in the processing instruction.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The text would result in a non-well formed XML document.  </p>\n<p> <code>name</code> is either <code>null</code> or <code>String.Empty</code>.  </p>\n<p> This method is being used to create an XML declaration after <span class=\"xref\">stem.Xml.XmlTextWriter.WriteStartDocument*</span> has already been called.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.  </p>\n</div>\n<p> If <code>text</code> is either <code>null</code> or <code>String.Empty</code>, this method writes a <code>ProcessingInstruction</code> with no data content, for example &lt;?name?&gt;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example writes an XML file representing a book.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextWriter.WriteStartDocument Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlTextWriter^ writer = nullptr;\n   String^ filename = &quot;sampledata.xml&quot;;\n   writer = gcnew XmlTextWriter( filename, nullptr );\n   \n   //Use indenting for readability.\n   writer-&gt;Formatting = Formatting::Indented;\n   \n   //Write the XML delcaration. \n   writer-&gt;WriteStartDocument();\n   \n   //Write the ProcessingInstruction node.\n   String^ PItext = &quot;type=&#39;text/xsl&#39; href=&#39;book.xsl&#39;&quot;;\n   writer-&gt;WriteProcessingInstruction( &quot;xml-stylesheet&quot;, PItext );\n   \n   //Write the DocumentType node.\n   writer-&gt;WriteDocType( &quot;book&quot;, nullptr, nullptr, &quot;&lt;!ENTITY h &#39;hardcover&#39;&gt;&quot; );\n   \n   //Write a Comment node.\n   writer-&gt;WriteComment( &quot;sample XML&quot; );\n   \n   //Write a root element.\n   writer-&gt;WriteStartElement( &quot;book&quot; );\n   \n   //Write the genre attribute.\n   writer-&gt;WriteAttributeString( &quot;genre&quot;, &quot;novel&quot; );\n   \n   //Write the ISBN attribute.\n   writer-&gt;WriteAttributeString( &quot;ISBN&quot;, &quot;1-8630-014&quot; );\n   \n   //Write the title.\n   writer-&gt;WriteElementString( &quot;title&quot;, &quot;The Handmaid&#39;s Tale&quot; );\n   \n   //Write the style element.\n   writer-&gt;WriteStartElement( &quot;style&quot; );\n   writer-&gt;WriteEntityRef( &quot;h&quot; );\n   writer-&gt;WriteEndElement();\n   \n   //Write the price.\n   writer-&gt;WriteElementString( &quot;price&quot;, &quot;19.95&quot; );\n   \n   //Write CDATA.\n   writer-&gt;WriteCData( &quot;Prices 15% off!!&quot; );\n   \n   //Write the close tag for the root element.\n   writer-&gt;WriteEndElement();\n   writer-&gt;WriteEndDocument();\n   \n   //Write the XML to file and close the writer.\n   writer-&gt;Flush();\n   writer-&gt;Close();\n   \n   //Load the file into an XmlDocument to ensure well formed XML.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   //Preserve white space for readability.\n   doc-&gt;PreserveWhitespace = true;\n   \n   //Load the file.\n   doc-&gt;Load( filename );\n   \n   //Display the XML content to the console.\n   Console::Write( doc-&gt;InnerXml );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextWriter.WriteStartDocument Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  private const string filename = &quot;sampledata.xml&quot;;\n\n  public static void Main()\n  {\n     XmlTextWriter writer = null;\n\n     writer = new XmlTextWriter (filename, null);\n     //Use indenting for readability.\n     writer.Formatting = Formatting.Indented;\n\n     //Write the XML delcaration. \n     writer.WriteStartDocument();\n\n     //Write the ProcessingInstruction node.\n     String PItext=&quot;type=&#39;text/xsl&#39; href=&#39;book.xsl&#39;&quot;;\n     writer.WriteProcessingInstruction(&quot;xml-stylesheet&quot;, PItext);\n\n     //Write the DocumentType node.\n     writer.WriteDocType(&quot;book&quot;, null , null, &quot;&lt;!ENTITY h &#39;hardcover&#39;&gt;&quot;);\n        \n     //Write a Comment node.\n     writer.WriteComment(&quot;sample XML&quot;);\n    \n     //Write a root element.\n     writer.WriteStartElement(&quot;book&quot;);\n\n     //Write the genre attribute.\n     writer.WriteAttributeString(&quot;genre&quot;, &quot;novel&quot;);\n    \n     //Write the ISBN attribute.\n     writer.WriteAttributeString(&quot;ISBN&quot;, &quot;1-8630-014&quot;);\n\n     //Write the title.\n     writer.WriteElementString(&quot;title&quot;, &quot;The Handmaid&#39;s Tale&quot;);\n              \n     //Write the style element.\n     writer.WriteStartElement(&quot;style&quot;);\n     writer.WriteEntityRef(&quot;h&quot;);\n     writer.WriteEndElement(); \n\n     //Write the price.\n     writer.WriteElementString(&quot;price&quot;, &quot;19.95&quot;);\n\n     //Write CDATA.\n     writer.WriteCData(&quot;Prices 15% off!!&quot;);\n\n     //Write the close tag for the root element.\n     writer.WriteEndElement();\n             \n     writer.WriteEndDocument();\n\n     //Write the XML to file and close the writer.\n     writer.Flush();\n     writer.Close();  \n\n     //Load the file into an XmlDocument to ensure well formed XML.\n     XmlDocument doc = new XmlDocument();\n     //Preserve white space for readability.\n     doc.PreserveWhitespace = true;\n     //Load the file.\n     doc.Load(filename);  \n    \n     //Display the XML content to the console.\n     Console.Write(doc.InnerXml);  \n\n  }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextWriter.WriteStartDocument Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    Private Shared filename As String = &quot;sampledata.xml&quot;\n    Public Shared Sub Main()\n        Dim writer As XmlTextWriter = Nothing\n        \n        writer = New XmlTextWriter(filename, Nothing)\n        &#39;Use indenting for readability.\n        writer.Formatting = Formatting.Indented\n        \n        &#39;Write the XML delcaration. \n        writer.WriteStartDocument()\n        \n        &#39;Write the ProcessingInstruction node.\n        Dim PItext As String = &quot;type=&#39;text/xsl&#39; href=&#39;book.xsl&#39;&quot;\n        writer.WriteProcessingInstruction(&quot;xml-stylesheet&quot;, PItext)\n        \n        &#39;Write the DocumentType node.\n        writer.WriteDocType(&quot;book&quot;, Nothing, Nothing, &quot;&lt;!ENTITY h &#39;hardcover&#39;&gt;&quot;)\n        \n        &#39;Write a Comment node.\n        writer.WriteComment(&quot;sample XML&quot;)\n        \n        &#39;Write a root element.\n        writer.WriteStartElement(&quot;book&quot;)\n        \n        &#39;Write the genre attribute.\n        writer.WriteAttributeString(&quot;genre&quot;, &quot;novel&quot;)\n        \n        &#39;Write the ISBN attribute.\n        writer.WriteAttributeString(&quot;ISBN&quot;, &quot;1-8630-014&quot;)\n        \n        &#39;Write the title.\n        writer.WriteElementString(&quot;title&quot;, &quot;The Handmaid&#39;s Tale&quot;)\n        \n        &#39;Write the style element.\n        writer.WriteStartElement(&quot;style&quot;)\n        writer.WriteEntityRef(&quot;h&quot;)\n        writer.WriteEndElement()\n        \n        &#39;Write the price.\n        writer.WriteElementString(&quot;price&quot;, &quot;19.95&quot;)\n        \n        &#39;Write CDATA.\n        writer.WriteCData(&quot;Prices 15% off!!&quot;)\n        \n        &#39;Write the close tag for the root element.\n        writer.WriteEndElement()\n        \n        writer.WriteEndDocument()\n        \n        &#39;Write the XML to file and close the writer.\n        writer.Flush()\n        writer.Close()\n        \n        &#39;Load the file into an XmlDocument to ensure well formed XML.\n        Dim doc As New XmlDocument()\n        &#39;Preserve white space for readability.\n        doc.PreserveWhitespace = True\n        &#39;Load the file.\n        doc.Load(filename)\n        \n        &#39;Display the XML content to the console.\n        Console.Write(doc.InnerXml)\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter_WriteQualifiedName_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter_WriteQualifiedName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteQualifiedName(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes out the namespace-qualified name. This method looks up the prefix that is in scope for the given namespace.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void WriteQualifiedName (string localName, string ns);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>localName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name to write.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ns</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI to associate with the name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>localName</code> is either <code>null</code> or <code>String.Empty</code>.  </p>\n<p> <code>localName</code> is not a valid name according to the W3C Namespaces spec.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.  </p>\n</div>\n<p> For example, the following Microsoft Visual C# code:  </p>\n<pre><code>writer.Formatting = Formatting.Indented;  \nwriter.WriteStartElement(&quot;root&quot;);  \n writer.WriteAttributeString(&quot;xmlns&quot;,&quot;x&quot;,null,&quot;urn:abc&quot;);  \n writer.WriteStartElement(&quot;item&quot;);  \n writer.WriteStartAttribute(&quot;href&quot;,null);  \n writer.WriteString(&quot;#&quot;);  \n writer.WriteQualifiedName(&quot;test&quot;,&quot;urn:abc&quot;);  \n writer.WriteEndAttribute();  \n writer.WriteEndElement();  \n writer.WriteEndElement();  \n writer.Close();  \n</code></pre><p> Generates the following output:  </p>\n<pre><code>&lt;root xmlns:x=&quot;urn:abc&quot;&gt;  \n &lt;item href=&quot;#x:test&quot;/&gt;  \n &lt;/root&gt;  \n</code></pre><p> If <code>ns</code> maps to the current default namespace, no prefix is generated.  </p>\n<p> When writing attribute values, this method generates a prefix if <code>ns</code> is not found. When writing element content, it throws an exception if <code>ns</code> is not found.  </p>\n<p> If this writer supports namespaces (<a class=\"xref\" href=\"system.xml.xmltextwriter#System_Xml_XmlTextWriter_Namespaces_\" data-linktype=\"relative-path\">Namespaces</a> is set to <code>true</code>), this method also checks that the name is valid according to the W3C Namespaces in XML recommendation (<a href=\"http://www.w3.org/TR/REC-xml-names\" data-linktype=\"external\">http://www.w3.org/TR/REC-xml-names</a>).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example writes out a portion of a XSD schema.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextWriter.WriteQualifiedName Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlTextWriter^ writer = nullptr;\n   String^ filename = &quot;sampledata.xml&quot;;\n   writer = gcnew XmlTextWriter( filename, nullptr );\n   \n   // Use indenting for readability.\n   writer-&gt;Formatting = Formatting::Indented;\n   \n   // Write the root element.\n   writer-&gt;WriteStartElement( &quot;schema&quot; );\n   \n   // Write the namespace declarations.\n   writer-&gt;WriteAttributeString( &quot;xmlns&quot;, nullptr, &quot;http://www.w3.org/2001/XMLSchema&quot; );\n   writer-&gt;WriteAttributeString( &quot;xmlns&quot;, &quot;po&quot;, nullptr, &quot;http://contoso.com/po&quot; );\n   writer-&gt;WriteStartElement( &quot;element&quot; );\n   writer-&gt;WriteAttributeString( &quot;name&quot;, &quot;purchaseOrder&quot; );\n   \n   // Write the type attribute.\n   writer-&gt;WriteStartAttribute( nullptr, &quot;type&quot;, nullptr );\n   writer-&gt;WriteQualifiedName( &quot;PurchaseOrder&quot;, &quot;http://contoso.com/po&quot; );\n   writer-&gt;WriteEndAttribute();\n   writer-&gt;WriteEndElement();\n   \n   // Write the close tag for the root element.\n   writer-&gt;WriteEndElement();\n   \n   // Write the XML to file and close the writer.\n   writer-&gt;Flush();\n   writer-&gt;Close();\n   \n   // Read the file back in and parse to ensure well formed XML.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   // Preserve white space for readability.\n   doc-&gt;PreserveWhitespace = true;\n   \n   // Load the file.\n   doc-&gt;Load( filename );\n   \n   // Write the XML content to the console.\n   Console::Write( doc-&gt;InnerXml );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextWriter.WriteQualifiedName Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    Private Shared filename As String = &quot;sampledata.xml&quot;\n    Public Shared Sub Main()\n        Dim writer As XmlTextWriter = Nothing\n        \n        writer = New XmlTextWriter(filename, Nothing)\n        &#39; Use indenting for readability.\n        writer.Formatting = Formatting.Indented\n        \n        &#39; Write the root element.\n        writer.WriteStartElement(&quot;schema&quot;)\n        \n        &#39; Write the namespace declarations.\n        writer.WriteAttributeString(&quot;xmlns&quot;, Nothing, &quot;http://www.w3.org/2001/XMLSchema&quot;)\n        writer.WriteAttributeString(&quot;xmlns&quot;, &quot;po&quot;, Nothing, &quot;http://contoso.com/po&quot;)\n        \n        writer.WriteStartElement(&quot;element&quot;)\n        \n        writer.WriteAttributeString(&quot;name&quot;, &quot;purchaseOrder&quot;)\n        \n        &#39; Write the type attribute.\n        writer.WriteStartAttribute(Nothing, &quot;type&quot;, Nothing)\n        writer.WriteQualifiedName(&quot;PurchaseOrder&quot;, &quot;http://contoso.com/po&quot;)\n        writer.WriteEndAttribute()\n        \n        writer.WriteEndElement()\n        \n        &#39; Write the close tag for the root element.\n        writer.WriteEndElement()\n        \n        &#39; Write the XML to file and close the writer.\n        writer.Flush()\n        writer.Close()\n        \n        &#39; Read the file back in and parse to ensure well formed XML.\n        Dim doc As New XmlDocument()\n        &#39; Preserve white space for readability.\n        doc.PreserveWhitespace = True\n        &#39; Load the file.\n        doc.Load(filename)\n        \n        &#39; Write the XML content to the console.\n        Console.Write(doc.InnerXml)\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextWriter.WriteQualifiedName Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  private const string filename = &quot;sampledata.xml&quot;;\n\n  public static void Main()\n  {\n     XmlTextWriter writer = null;\n\n     writer = new XmlTextWriter (filename, null);\n     // Use indenting for readability.\n     writer.Formatting = Formatting.Indented;\n        \n     // Write the root element.\n     writer.WriteStartElement(&quot;schema&quot;);\n\n     // Write the namespace declarations.\n     writer.WriteAttributeString(&quot;xmlns&quot;, null,&quot;http://www.w3.org/2001/XMLSchema&quot;);\n     writer.WriteAttributeString(&quot;xmlns&quot;,&quot;po&quot;,null,&quot;http://contoso.com/po&quot;);\n\n     writer.WriteStartElement(&quot;element&quot;);\n\n     writer.WriteAttributeString(&quot;name&quot;, &quot;purchaseOrder&quot;);\n\n     // Write the type attribute.\n     writer.WriteStartAttribute(null,&quot;type&quot;, null);\n     writer.WriteQualifiedName(&quot;PurchaseOrder&quot;, &quot;http://contoso.com/po&quot;);\n     writer.WriteEndAttribute();\n\n     writer.WriteEndElement();\n\n     // Write the close tag for the root element.\n     writer.WriteEndElement();\n             \n     // Write the XML to file and close the writer.\n     writer.Flush();\n     writer.Close();  \n\n     // Read the file back in and parse to ensure well formed XML.\n     XmlDocument doc = new XmlDocument();\n     // Preserve white space for readability.\n     doc.PreserveWhitespace = true;\n     // Load the file.\n     doc.Load(filename);\n    \n     // Write the XML content to the console.\n     Console.Write(doc.InnerXml);\n\n  }\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter_WriteRaw_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter_WriteRaw_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteRaw(String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes raw markup manually from a string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void WriteRaw (string data);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>data</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>String containing the text to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.  </p>\n</div>\n<p> This method does not escape special characters.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> The <a class=\"xref\" href=\"system.xml.xmltextwriter\" data-linktype=\"relative-path\">XmlTextWriter</a> does not validate any data that is passed to the WriteRaw method. You should not pass arbitrary data to this method.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example writes a string using the <code>WriteRaw</code> method.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextWriter.WriteRaw1 Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  public static void Main()\n  {\n     // Create a writer that outputs to the console.\n     XmlTextWriter writer = new XmlTextWriter (Console.Out);\n     writer.Formatting = Formatting.Indented;\n    \n     // Write the root element.\n     writer.WriteStartElement(&quot;Items&quot;);\n\n     // Write a string using WriteRaw. Note that the special\n     // characters are not escaped.\n     writer.WriteStartElement(&quot;Item&quot;);\n     writer.WriteString(&quot;Write unescaped text:  &quot;);\n     writer.WriteRaw(&quot;this &amp; that&quot;);\n     writer.WriteEndElement();\n\n     // Write the same string using WriteString. Note that the \n     // special characters are escaped.\n     writer.WriteStartElement(&quot;Item&quot;);\n     writer.WriteString(&quot;Write the same string using WriteString:  &quot;);\n     writer.WriteString(&quot;this &amp; that&quot;);\n     writer.WriteEndElement();\n\n     // Write the close tag for the root element.\n     writer.WriteEndElement();\n           \n     // Write the XML to file and close the writer.\n     writer.Close();  \n  }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextWriter.WriteRaw1 Example#1\">Option Strict\nOption Explicit\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        &#39; Create a writer that outputs to the console.\n        Dim writer As New XmlTextWriter(Console.Out)\n        writer.Formatting = Formatting.Indented\n        \n        &#39; Write the root element.\n        writer.WriteStartElement(&quot;Items&quot;)\n        \n        &#39; Write a string using WriteRaw. Note that the special\n        &#39; characters are not escaped.\n        writer.WriteStartElement(&quot;Item&quot;)\n        writer.WriteString(&quot;Write unescaped text:  &quot;)\n        writer.WriteRaw(&quot;this &amp; that&quot;)\n        writer.WriteEndElement()\n        \n        &#39; Write the same string using WriteString. Note that the \n        &#39; special characters are escaped.\n        writer.WriteStartElement(&quot;Item&quot;)\n        writer.WriteString(&quot;Write the same string using WriteString:  &quot;)\n        writer.WriteString(&quot;this &amp; that&quot;)\n        writer.WriteEndElement()\n        \n        &#39; Write the close tag for the root element.\n        writer.WriteEndElement()\n        \n        &#39; Write the XML to file and close the writer.\n        writer.Close()\n    End Sub &#39;Main\nEnd Class &#39;Sample \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextWriter.WriteRaw1 Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   \n   // Create a writer that outputs to the console.\n   XmlTextWriter^ writer = gcnew XmlTextWriter( Console::Out );\n   writer-&gt;Formatting = Formatting::Indented;\n   \n   // Write the root element.\n   writer-&gt;WriteStartElement( &quot;Items&quot; );\n   \n   // Write a string using WriteRaw. Note that the special\n   // characters are not escaped.\n   writer-&gt;WriteStartElement( &quot;Item&quot; );\n   writer-&gt;WriteString( &quot;Write unescaped text:  &quot; );\n   writer-&gt;WriteRaw( &quot;this &amp; that&quot; );\n   writer-&gt;WriteEndElement();\n   \n   // Write the same string using WriteString. Note that the \n   // special characters are escaped.\n   writer-&gt;WriteStartElement( &quot;Item&quot; );\n   writer-&gt;WriteString( &quot;Write the same string using WriteString:  &quot; );\n   writer-&gt;WriteString( &quot;this &amp; that&quot; );\n   writer-&gt;WriteEndElement();\n   \n   // Write the close tag for the root element.\n   writer-&gt;WriteEndElement();\n   \n   // Write the XML to file and close the writer.\n   writer-&gt;Close();\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter_WriteRaw_System_Char___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter_WriteRaw_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteRaw(Char[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Writes raw markup manually from a character buffer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void WriteRaw (char[] buffer, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Character array containing the text to write.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position within the buffer indicating the start of the text to write.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>buffer</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> or <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> The buffer length minus <code>index</code> is less than <code>count</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.  </p>\n</div>\n<p> This method does not escape special characters.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> The <a class=\"xref\" href=\"system.xml.xmltextwriter\" data-linktype=\"relative-path\">XmlTextWriter</a> does not validate any data that is passed to the WriteRaw method. You should not pass arbitrary data to this method.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter_WriteStartAttribute_System_String_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter_WriteStartAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteStartAttribute(String,String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the start of an attribute.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void WriteStartAttribute (string prefix, string localName, string ns);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>prefix</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>Namespace</code> prefix of the attribute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>localName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>LocalName</code> of the attribute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ns</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>NamespaceURI</code> of the attribute</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>localName</code> is either <code>null</code> or <code>String.Empty</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.  </p>\n</div>\n<p> This is a more advanced version of <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_WriteAttributeString_\" data-linktype=\"relative-path\">WriteAttributeString</a> that allows you to write an attribute value using multiple write methods, such as <a class=\"xref\" href=\"system.xml.xmltextwriter#System_Xml_XmlTextWriter_WriteString_\" data-linktype=\"relative-path\">WriteString</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example writes out a book.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextWriter.WriteStartElement Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  private const string filename = &quot;sampledata.xml&quot;;\n\n  public static void Main()\n  {\n\n     XmlTextWriter writer = new XmlTextWriter (filename, null);\n     //Use indenting for readability.\n     writer.Formatting = Formatting.Indented;\n        \n     writer.WriteComment(&quot;sample XML fragment&quot;);\n    \n     //Write an element (this one is the root).\n     writer.WriteStartElement(&quot;bookstore&quot;);\n\n     //Write the namespace declaration.\n     writer.WriteAttributeString(&quot;xmlns&quot;, &quot;bk&quot;, null, &quot;urn:samples&quot;);\n\n     writer.WriteStartElement(&quot;book&quot;);\n\n     //Lookup the prefix and then write the ISBN attribute.\n     string prefix = writer.LookupPrefix(&quot;urn:samples&quot;);\n     writer.WriteStartAttribute(prefix, &quot;ISBN&quot;, &quot;urn:samples&quot;);\n     writer.WriteString(&quot;1-861003-78&quot;);\n     writer.WriteEndAttribute();     \n\n     //Write the title.\n     writer.WriteStartElement(&quot;title&quot;);\n     writer.WriteString(&quot;The Handmaid&#39;s Tale&quot;);\n     writer.WriteEndElement();\n              \n     //Write the price.\n     writer.WriteElementString(&quot;price&quot;, &quot;19.95&quot;);\n     \n     //Write the style element.\n     writer.WriteStartElement(prefix, &quot;style&quot;, &quot;urn:samples&quot;);\n     writer.WriteString(&quot;hardcover&quot;);\n     writer.WriteEndElement();\n\n     //Write the end tag for the book element.\n     writer.WriteEndElement();\n\n     //Write the close tag for the root element.\n     writer.WriteEndElement();\n             \n     //Write the XML to file and close the writer.\n     writer.Flush();\n     writer.Close();\n\n     //Read the file back in and parse to ensure well formed XML.\n     XmlDocument doc = new XmlDocument();\n     //Preserve white space for readability.\n     doc.PreserveWhitespace = true;\n     //Load the file\n     doc.Load(filename);\n    \n     //Write the XML content to the console.\n     Console.Write(doc.InnerXml);  \n\n  }\n\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextWriter.WriteStartElement Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   String^ filename = &quot;sampledata.xml&quot;;\n   XmlTextWriter^ writer = gcnew XmlTextWriter( filename, nullptr );\n   \n   //Use indenting for readability.\n   writer-&gt;Formatting = Formatting::Indented;\n   writer-&gt;WriteComment( &quot;sample XML fragment&quot; );\n   \n   //Write an element (this one is the root).\n   writer-&gt;WriteStartElement( &quot;bookstore&quot; );\n   \n   //Write the namespace declaration.\n   writer-&gt;WriteAttributeString( &quot;xmlns&quot;, &quot;bk&quot;, nullptr, &quot;urn:samples&quot; );\n   writer-&gt;WriteStartElement( &quot;book&quot; );\n   \n   //Lookup the prefix and then write the ISBN attribute.\n   String^ prefix = writer-&gt;LookupPrefix( &quot;urn:samples&quot; );\n   writer-&gt;WriteStartAttribute( prefix, &quot;ISBN&quot;, &quot;urn:samples&quot; );\n   writer-&gt;WriteString( &quot;1-861003-78&quot; );\n   writer-&gt;WriteEndAttribute();\n   \n   //Write the title.\n   writer-&gt;WriteStartElement( &quot;title&quot; );\n   writer-&gt;WriteString( &quot;The Handmaid&#39;s Tale&quot; );\n   writer-&gt;WriteEndElement();\n   \n   //Write the price.\n   writer-&gt;WriteElementString( &quot;price&quot;, &quot;19.95&quot; );\n   \n   //Write the style element.\n   writer-&gt;WriteStartElement( prefix, &quot;style&quot;, &quot;urn:samples&quot; );\n   writer-&gt;WriteString( &quot;hardcover&quot; );\n   writer-&gt;WriteEndElement();\n   \n   //Write the end tag for the book element.\n   writer-&gt;WriteEndElement();\n   \n   //Write the close tag for the root element.\n   writer-&gt;WriteEndElement();\n   \n   //Write the XML to file and close the writer.\n   writer-&gt;Flush();\n   writer-&gt;Close();\n   \n   //Read the file back in and parse to ensure well formed XML.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   //Preserve white space for readability.\n   doc-&gt;PreserveWhitespace = true;\n   \n   //Load the file\n   doc-&gt;Load( filename );\n   \n   //Write the XML content to the console.\n   Console::Write( doc-&gt;InnerXml );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextWriter.WriteStartElement Example#1\">Option Strict\nOption Explicit\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    Private Shared filename As String = &quot;sampledata.xml&quot;\n    Public Shared Sub Main()\n        \n        Dim writer As New XmlTextWriter(filename, Nothing)\n        &#39;Use indenting for readability.\n        writer.Formatting = Formatting.Indented\n        \n        writer.WriteComment(&quot;sample XML fragment&quot;)\n        \n        &#39;Write an element (this one is the root).\n        writer.WriteStartElement(&quot;bookstore&quot;)\n        \n        &#39;Write the namespace declaration.\n        writer.WriteAttributeString(&quot;xmlns&quot;, &quot;bk&quot;, Nothing, &quot;urn:samples&quot;)\n        \n        writer.WriteStartElement(&quot;book&quot;)\n        \n        &#39;Lookup the prefix and then write the ISBN attribute.\n        Dim prefix As String = writer.LookupPrefix(&quot;urn:samples&quot;)\n        writer.WriteStartAttribute(prefix, &quot;ISBN&quot;, &quot;urn:samples&quot;)\n        writer.WriteString(&quot;1-861003-78&quot;)\n        writer.WriteEndAttribute()\n        \n        &#39;Write the title.\n        writer.WriteStartElement(&quot;title&quot;)\n        writer.WriteString(&quot;The Handmaid&#39;s Tale&quot;)\n        writer.WriteEndElement()\n        \n        &#39;Write the price.\n        writer.WriteElementString(&quot;price&quot;, &quot;19.95&quot;)\n        \n        &#39;Write the style element.\n        writer.WriteStartElement(prefix, &quot;style&quot;, &quot;urn:samples&quot;)\n        writer.WriteString(&quot;hardcover&quot;)\n        writer.WriteEndElement()\n        \n        &#39;Write the end tag for the book element.\n        writer.WriteEndElement()\n        \n        &#39;Write the close tag for the root element.\n        writer.WriteEndElement()\n        \n        &#39;Write the XML to file and close the writer.\n        writer.Flush()\n        writer.Close()\n        \n        &#39;Read the file back in and parse to ensure well formed XML.\n        Dim doc As New XmlDocument()\n        &#39;Preserve white space for readability.\n        doc.PreserveWhitespace = True\n        &#39;Load the file.\n        doc.Load(filename)\n        \n        &#39;Write the XML content to the console.\n        Console.Write(doc.InnerXml)\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter_WriteStartDocument\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter_WriteStartDocument_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteStartDocument()</div>        \r\n          </div>\r\n    \r\n            <p>Writes the XML declaration with the version &quot;1.0&quot;.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void WriteStartDocument ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This is not the first write method called after the constructor.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.  </p>\n</div>\n<p> The encoding level of the document is determined by how the writer is implemented. For example, if an <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> object is specified in the <code>XmlTextWriter</code> constructor, this determines the value of the encoding attribute. This method does not create a standalone attribute.  </p>\n<p> When <code>WriteStartDocument</code> is called the writer validates that what you are writing is a well-formed XML document. For example, it checks that the XML declaration is the first node, that one and only one root-level element exists and so on. If this method is not called, the writer assumes an XML fragment is being written and applies no root level rules.  </p>\n<p> If <code>WriteStartDocument</code> has been called and then the <a class=\"xref\" href=\"system.xml.xmltextwriter#System_Xml_XmlTextWriter_WriteProcessingInstruction_\" data-linktype=\"relative-path\">WriteProcessingInstruction</a> method is used to create another XML declaration, an exception is thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example writes an XML file representing a book.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextWriter.WriteStartDocument Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   XmlTextWriter^ writer = nullptr;\n   String^ filename = &quot;sampledata.xml&quot;;\n   writer = gcnew XmlTextWriter( filename, nullptr );\n   \n   //Use indenting for readability.\n   writer-&gt;Formatting = Formatting::Indented;\n   \n   //Write the XML delcaration. \n   writer-&gt;WriteStartDocument();\n   \n   //Write the ProcessingInstruction node.\n   String^ PItext = &quot;type=&#39;text/xsl&#39; href=&#39;book.xsl&#39;&quot;;\n   writer-&gt;WriteProcessingInstruction( &quot;xml-stylesheet&quot;, PItext );\n   \n   //Write the DocumentType node.\n   writer-&gt;WriteDocType( &quot;book&quot;, nullptr, nullptr, &quot;&lt;!ENTITY h &#39;hardcover&#39;&gt;&quot; );\n   \n   //Write a Comment node.\n   writer-&gt;WriteComment( &quot;sample XML&quot; );\n   \n   //Write a root element.\n   writer-&gt;WriteStartElement( &quot;book&quot; );\n   \n   //Write the genre attribute.\n   writer-&gt;WriteAttributeString( &quot;genre&quot;, &quot;novel&quot; );\n   \n   //Write the ISBN attribute.\n   writer-&gt;WriteAttributeString( &quot;ISBN&quot;, &quot;1-8630-014&quot; );\n   \n   //Write the title.\n   writer-&gt;WriteElementString( &quot;title&quot;, &quot;The Handmaid&#39;s Tale&quot; );\n   \n   //Write the style element.\n   writer-&gt;WriteStartElement( &quot;style&quot; );\n   writer-&gt;WriteEntityRef( &quot;h&quot; );\n   writer-&gt;WriteEndElement();\n   \n   //Write the price.\n   writer-&gt;WriteElementString( &quot;price&quot;, &quot;19.95&quot; );\n   \n   //Write CDATA.\n   writer-&gt;WriteCData( &quot;Prices 15% off!!&quot; );\n   \n   //Write the close tag for the root element.\n   writer-&gt;WriteEndElement();\n   writer-&gt;WriteEndDocument();\n   \n   //Write the XML to file and close the writer.\n   writer-&gt;Flush();\n   writer-&gt;Close();\n   \n   //Load the file into an XmlDocument to ensure well formed XML.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   //Preserve white space for readability.\n   doc-&gt;PreserveWhitespace = true;\n   \n   //Load the file.\n   doc-&gt;Load( filename );\n   \n   //Display the XML content to the console.\n   Console::Write( doc-&gt;InnerXml );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextWriter.WriteStartDocument Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  private const string filename = &quot;sampledata.xml&quot;;\n\n  public static void Main()\n  {\n     XmlTextWriter writer = null;\n\n     writer = new XmlTextWriter (filename, null);\n     //Use indenting for readability.\n     writer.Formatting = Formatting.Indented;\n\n     //Write the XML delcaration. \n     writer.WriteStartDocument();\n\n     //Write the ProcessingInstruction node.\n     String PItext=&quot;type=&#39;text/xsl&#39; href=&#39;book.xsl&#39;&quot;;\n     writer.WriteProcessingInstruction(&quot;xml-stylesheet&quot;, PItext);\n\n     //Write the DocumentType node.\n     writer.WriteDocType(&quot;book&quot;, null , null, &quot;&lt;!ENTITY h &#39;hardcover&#39;&gt;&quot;);\n        \n     //Write a Comment node.\n     writer.WriteComment(&quot;sample XML&quot;);\n    \n     //Write a root element.\n     writer.WriteStartElement(&quot;book&quot;);\n\n     //Write the genre attribute.\n     writer.WriteAttributeString(&quot;genre&quot;, &quot;novel&quot;);\n    \n     //Write the ISBN attribute.\n     writer.WriteAttributeString(&quot;ISBN&quot;, &quot;1-8630-014&quot;);\n\n     //Write the title.\n     writer.WriteElementString(&quot;title&quot;, &quot;The Handmaid&#39;s Tale&quot;);\n              \n     //Write the style element.\n     writer.WriteStartElement(&quot;style&quot;);\n     writer.WriteEntityRef(&quot;h&quot;);\n     writer.WriteEndElement(); \n\n     //Write the price.\n     writer.WriteElementString(&quot;price&quot;, &quot;19.95&quot;);\n\n     //Write CDATA.\n     writer.WriteCData(&quot;Prices 15% off!!&quot;);\n\n     //Write the close tag for the root element.\n     writer.WriteEndElement();\n             \n     writer.WriteEndDocument();\n\n     //Write the XML to file and close the writer.\n     writer.Flush();\n     writer.Close();  \n\n     //Load the file into an XmlDocument to ensure well formed XML.\n     XmlDocument doc = new XmlDocument();\n     //Preserve white space for readability.\n     doc.PreserveWhitespace = true;\n     //Load the file.\n     doc.Load(filename);  \n    \n     //Display the XML content to the console.\n     Console.Write(doc.InnerXml);  \n\n  }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextWriter.WriteStartDocument Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    Private Shared filename As String = &quot;sampledata.xml&quot;\n    Public Shared Sub Main()\n        Dim writer As XmlTextWriter = Nothing\n        \n        writer = New XmlTextWriter(filename, Nothing)\n        &#39;Use indenting for readability.\n        writer.Formatting = Formatting.Indented\n        \n        &#39;Write the XML delcaration. \n        writer.WriteStartDocument()\n        \n        &#39;Write the ProcessingInstruction node.\n        Dim PItext As String = &quot;type=&#39;text/xsl&#39; href=&#39;book.xsl&#39;&quot;\n        writer.WriteProcessingInstruction(&quot;xml-stylesheet&quot;, PItext)\n        \n        &#39;Write the DocumentType node.\n        writer.WriteDocType(&quot;book&quot;, Nothing, Nothing, &quot;&lt;!ENTITY h &#39;hardcover&#39;&gt;&quot;)\n        \n        &#39;Write a Comment node.\n        writer.WriteComment(&quot;sample XML&quot;)\n        \n        &#39;Write a root element.\n        writer.WriteStartElement(&quot;book&quot;)\n        \n        &#39;Write the genre attribute.\n        writer.WriteAttributeString(&quot;genre&quot;, &quot;novel&quot;)\n        \n        &#39;Write the ISBN attribute.\n        writer.WriteAttributeString(&quot;ISBN&quot;, &quot;1-8630-014&quot;)\n        \n        &#39;Write the title.\n        writer.WriteElementString(&quot;title&quot;, &quot;The Handmaid&#39;s Tale&quot;)\n        \n        &#39;Write the style element.\n        writer.WriteStartElement(&quot;style&quot;)\n        writer.WriteEntityRef(&quot;h&quot;)\n        writer.WriteEndElement()\n        \n        &#39;Write the price.\n        writer.WriteElementString(&quot;price&quot;, &quot;19.95&quot;)\n        \n        &#39;Write CDATA.\n        writer.WriteCData(&quot;Prices 15% off!!&quot;)\n        \n        &#39;Write the close tag for the root element.\n        writer.WriteEndElement()\n        \n        writer.WriteEndDocument()\n        \n        &#39;Write the XML to file and close the writer.\n        writer.Flush()\n        writer.Close()\n        \n        &#39;Load the file into an XmlDocument to ensure well formed XML.\n        Dim doc As New XmlDocument()\n        &#39;Preserve white space for readability.\n        doc.PreserveWhitespace = True\n        &#39;Load the file.\n        doc.Load(filename)\n        \n        &#39;Display the XML content to the console.\n        Console.Write(doc.InnerXml)\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter_WriteStartDocument_System_Boolean_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter_WriteStartDocument_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteStartDocument(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the XML declaration with the version &quot;1.0&quot; and the standalone attribute.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void WriteStartDocument (bool standalone);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>standalone</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>If <code>true</code>, it writes &quot;standalone=yes&quot;; if <code>false</code>, it writes &quot;standalone=no&quot;.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This is not the first write method called after the constructor.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.  </p>\n</div>\n<p> The encoding level of the document is determined by how the writer is implemented. For example, if an <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> object is specified in the <code>XmlTextWriter</code> constructor, this determines the value of the encoding attribute.  </p>\n<p> When <code>WriteStartDocument</code> is called the writer validates that what you are writing is a well-formed XML document. For example, it checks that the XML declaration is the first node, that one and only one root-level element exists and so on. If this method is not called, the writer assumes an XML fragment is being written and applies no root level rules.  </p>\n<p> If <code>WriteStartDocument</code> has been called and then the <a class=\"xref\" href=\"system.xml.xmltextwriter#System_Xml_XmlTextWriter_WriteProcessingInstruction_\" data-linktype=\"relative-path\">WriteProcessingInstruction</a> method is used to create another XML declaration, an exception is thrown.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter_WriteStartElement_System_String_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter_WriteStartElement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteStartElement(String,String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the specified start tag and associates it with the given namespace and prefix.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void WriteStartElement (string prefix, string localName, string ns);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>prefix</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace prefix of the element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>localName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The local name of the element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ns</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The namespace URI to associate with the element. If this namespace is already in scope and has an associated prefix then the writer automatically writes that prefix also.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The writer is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.  </p>\n</div>\n<p> After calling this method you can either write attributes or create content using <a class=\"xref\" href=\"system.xml.xmltextwriter#System_Xml_XmlTextWriter_WriteComment_\" data-linktype=\"relative-path\">WriteComment</a>, <a class=\"xref\" href=\"system.xml.xmltextwriter#System_Xml_XmlTextWriter_WriteString_\" data-linktype=\"relative-path\">WriteString</a>, or WriteStartElement for child elements. You can close the element with <a class=\"xref\" href=\"system.xml.xmltextwriter#System_Xml_XmlTextWriter_WriteEndElement_\" data-linktype=\"relative-path\">WriteEndElement</a> at which time an end tag is written out.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example writes out a book.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextWriter.WriteStartElement Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  private const string filename = &quot;sampledata.xml&quot;;\n\n  public static void Main()\n  {\n\n     XmlTextWriter writer = new XmlTextWriter (filename, null);\n     //Use indenting for readability.\n     writer.Formatting = Formatting.Indented;\n        \n     writer.WriteComment(&quot;sample XML fragment&quot;);\n    \n     //Write an element (this one is the root).\n     writer.WriteStartElement(&quot;bookstore&quot;);\n\n     //Write the namespace declaration.\n     writer.WriteAttributeString(&quot;xmlns&quot;, &quot;bk&quot;, null, &quot;urn:samples&quot;);\n\n     writer.WriteStartElement(&quot;book&quot;);\n\n     //Lookup the prefix and then write the ISBN attribute.\n     string prefix = writer.LookupPrefix(&quot;urn:samples&quot;);\n     writer.WriteStartAttribute(prefix, &quot;ISBN&quot;, &quot;urn:samples&quot;);\n     writer.WriteString(&quot;1-861003-78&quot;);\n     writer.WriteEndAttribute();     \n\n     //Write the title.\n     writer.WriteStartElement(&quot;title&quot;);\n     writer.WriteString(&quot;The Handmaid&#39;s Tale&quot;);\n     writer.WriteEndElement();\n              \n     //Write the price.\n     writer.WriteElementString(&quot;price&quot;, &quot;19.95&quot;);\n     \n     //Write the style element.\n     writer.WriteStartElement(prefix, &quot;style&quot;, &quot;urn:samples&quot;);\n     writer.WriteString(&quot;hardcover&quot;);\n     writer.WriteEndElement();\n\n     //Write the end tag for the book element.\n     writer.WriteEndElement();\n\n     //Write the close tag for the root element.\n     writer.WriteEndElement();\n             \n     //Write the XML to file and close the writer.\n     writer.Flush();\n     writer.Close();\n\n     //Read the file back in and parse to ensure well formed XML.\n     XmlDocument doc = new XmlDocument();\n     //Preserve white space for readability.\n     doc.PreserveWhitespace = true;\n     //Load the file\n     doc.Load(filename);\n    \n     //Write the XML content to the console.\n     Console.Write(doc.InnerXml);  \n\n  }\n\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextWriter.WriteStartElement Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   String^ filename = &quot;sampledata.xml&quot;;\n   XmlTextWriter^ writer = gcnew XmlTextWriter( filename, nullptr );\n   \n   //Use indenting for readability.\n   writer-&gt;Formatting = Formatting::Indented;\n   writer-&gt;WriteComment( &quot;sample XML fragment&quot; );\n   \n   //Write an element (this one is the root).\n   writer-&gt;WriteStartElement( &quot;bookstore&quot; );\n   \n   //Write the namespace declaration.\n   writer-&gt;WriteAttributeString( &quot;xmlns&quot;, &quot;bk&quot;, nullptr, &quot;urn:samples&quot; );\n   writer-&gt;WriteStartElement( &quot;book&quot; );\n   \n   //Lookup the prefix and then write the ISBN attribute.\n   String^ prefix = writer-&gt;LookupPrefix( &quot;urn:samples&quot; );\n   writer-&gt;WriteStartAttribute( prefix, &quot;ISBN&quot;, &quot;urn:samples&quot; );\n   writer-&gt;WriteString( &quot;1-861003-78&quot; );\n   writer-&gt;WriteEndAttribute();\n   \n   //Write the title.\n   writer-&gt;WriteStartElement( &quot;title&quot; );\n   writer-&gt;WriteString( &quot;The Handmaid&#39;s Tale&quot; );\n   writer-&gt;WriteEndElement();\n   \n   //Write the price.\n   writer-&gt;WriteElementString( &quot;price&quot;, &quot;19.95&quot; );\n   \n   //Write the style element.\n   writer-&gt;WriteStartElement( prefix, &quot;style&quot;, &quot;urn:samples&quot; );\n   writer-&gt;WriteString( &quot;hardcover&quot; );\n   writer-&gt;WriteEndElement();\n   \n   //Write the end tag for the book element.\n   writer-&gt;WriteEndElement();\n   \n   //Write the close tag for the root element.\n   writer-&gt;WriteEndElement();\n   \n   //Write the XML to file and close the writer.\n   writer-&gt;Flush();\n   writer-&gt;Close();\n   \n   //Read the file back in and parse to ensure well formed XML.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   //Preserve white space for readability.\n   doc-&gt;PreserveWhitespace = true;\n   \n   //Load the file\n   doc-&gt;Load( filename );\n   \n   //Write the XML content to the console.\n   Console::Write( doc-&gt;InnerXml );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextWriter.WriteStartElement Example#1\">Option Strict\nOption Explicit\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    Private Shared filename As String = &quot;sampledata.xml&quot;\n    Public Shared Sub Main()\n        \n        Dim writer As New XmlTextWriter(filename, Nothing)\n        &#39;Use indenting for readability.\n        writer.Formatting = Formatting.Indented\n        \n        writer.WriteComment(&quot;sample XML fragment&quot;)\n        \n        &#39;Write an element (this one is the root).\n        writer.WriteStartElement(&quot;bookstore&quot;)\n        \n        &#39;Write the namespace declaration.\n        writer.WriteAttributeString(&quot;xmlns&quot;, &quot;bk&quot;, Nothing, &quot;urn:samples&quot;)\n        \n        writer.WriteStartElement(&quot;book&quot;)\n        \n        &#39;Lookup the prefix and then write the ISBN attribute.\n        Dim prefix As String = writer.LookupPrefix(&quot;urn:samples&quot;)\n        writer.WriteStartAttribute(prefix, &quot;ISBN&quot;, &quot;urn:samples&quot;)\n        writer.WriteString(&quot;1-861003-78&quot;)\n        writer.WriteEndAttribute()\n        \n        &#39;Write the title.\n        writer.WriteStartElement(&quot;title&quot;)\n        writer.WriteString(&quot;The Handmaid&#39;s Tale&quot;)\n        writer.WriteEndElement()\n        \n        &#39;Write the price.\n        writer.WriteElementString(&quot;price&quot;, &quot;19.95&quot;)\n        \n        &#39;Write the style element.\n        writer.WriteStartElement(prefix, &quot;style&quot;, &quot;urn:samples&quot;)\n        writer.WriteString(&quot;hardcover&quot;)\n        writer.WriteEndElement()\n        \n        &#39;Write the end tag for the book element.\n        writer.WriteEndElement()\n        \n        &#39;Write the close tag for the root element.\n        writer.WriteEndElement()\n        \n        &#39;Write the XML to file and close the writer.\n        writer.Flush()\n        writer.Close()\n        \n        &#39;Read the file back in and parse to ensure well formed XML.\n        Dim doc As New XmlDocument()\n        &#39;Preserve white space for readability.\n        doc.PreserveWhitespace = True\n        &#39;Load the file.\n        doc.Load(filename)\n        \n        &#39;Write the XML content to the console.\n        Console.Write(doc.InnerXml)\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter_WriteString_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter_WriteString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteString(String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the given text content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void WriteString (string text);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>text</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Text to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The text string contains an invalid surrogate pair.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.  </p>\n</div>\n<p> <code>WriteString</code> does the following  </p>\n<ul>\n<li><p>The characters <code>&amp;</code>, <code>&lt;</code>, and <code>&gt;</code> are replaced with <code>&amp;amp;</code>, <code>&amp;lt;</code>, and <code>&amp;gt;</code>, respectively.  </p>\n</li>\n<li><p>Character values in the range 0x-0x1F (excluding white space characters 0x9, 0xA, and 0xD) are replaced with numeric character entities (<code>&amp;#0;</code> through <code>&amp;#0x1F</code>).  </p>\n</li>\n<li><p>If <code>WriteString</code> is called in the context of an attribute value, double and single quotes are replaced with <code>&amp;quot;</code> and <code>&amp;apos;</code> respectively.  </p>\n<p>For example, this input string <code>test&lt;item&gt;test</code> is written as  </p>\n</li>\n</ul>\n<pre><code>test&amp;lt;item&amp;gt;test  \n</code></pre><p> If <code>text</code> is either <code>null</code> or <code>String.Empty</code>, this method writes a text node with no data content.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example writes an XML fragment.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextWriter.Formatting Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   \n   //Create a writer to write XML to the console.\n   XmlTextWriter^ writer = nullptr;\n   writer = gcnew XmlTextWriter( Console::Out );\n   \n   //Use indentation for readability.\n   writer-&gt;Formatting = Formatting::Indented;\n   writer-&gt;Indentation = 4;\n   \n   //Write an element (this one is the root).\n   writer-&gt;WriteStartElement( &quot;book&quot; );\n   \n   //Write the title element.\n   writer-&gt;WriteStartElement( &quot;title&quot; );\n   writer-&gt;WriteString( &quot;Pride And Prejudice&quot; );\n   writer-&gt;WriteEndElement();\n   \n   //Write the close tag for the root element.\n   writer-&gt;WriteEndElement();\n   \n   //Write the XML to file and close the writer.\n   writer-&gt;Close();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextWriter.Formatting Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{\n  \n  public static void Main()\n  {\n     //Create a writer to write XML to the console.\n     XmlTextWriter writer = null;\n     writer = new XmlTextWriter (Console.Out);\n\n     //Use indentation for readability.\n     writer.Formatting = Formatting.Indented;\n     writer.Indentation = 4;\n        \n     //Write an element (this one is the root).\n     writer.WriteStartElement(&quot;book&quot;);\n\n     //Write the title element.\n     writer.WriteStartElement(&quot;title&quot;);\n     writer.WriteString(&quot;Pride And Prejudice&quot;);\n     writer.WriteEndElement();\n\n     //Write the close tag for the root element.\n     writer.WriteEndElement();\n             \n     //Write the XML to file and close the writer.\n     writer.Close();  \n\n  }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextWriter.Formatting Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        &#39;Create a writer to write XML to the console.\n        Dim writer As XmlTextWriter = Nothing\n        writer = New XmlTextWriter(Console.Out)\n        \n        &#39;Use indentation for readability.\n        writer.Formatting = Formatting.Indented\n        writer.Indentation = 4\n        \n        &#39;Write an element (this one is the root).\n        writer.WriteStartElement(&quot;book&quot;)\n        \n        &#39;Write the title element.\n        writer.WriteStartElement(&quot;title&quot;)\n        writer.WriteString(&quot;Pride And Prejudice&quot;)\n        writer.WriteEndElement()\n        \n        &#39;Write the close tag for the root element.\n        writer.WriteEndElement()\n        \n        &#39;Write the XML to file and close the writer.\n        writer.Close()\n    End Sub &#39;Main \nEnd Class &#39;Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter_WriteSurrogateCharEntity_System_Char_System_Char_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter_WriteSurrogateCharEntity_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteSurrogateCharEntity(Char,Char)</div>        \r\n          </div>\r\n    \r\n            <p>Generates and writes the surrogate character entity for the surrogate character pair.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void WriteSurrogateCharEntity (char lowChar, char highChar);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>lowChar</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The low surrogate. This must be a value between <code>0xDC00</code> and <code>0xDFFF</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>highChar</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The high surrogate. This must be a value between <code>0xD800</code> and <code>0xDBFF</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a></div>\r\n                  </div>\r\n                  <p>An invalid surrogate character pair was passed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.  </p>\n</div>\n<p> This method is only applicable on systems that use UTF-16 encoding.  </p>\n<p> The surrogate character entity is written in hexadecimal format. The range for surrogate characters is <code>#x10000</code> to <code>#x10FFFF</code>. The following formula is used to generate the surrogate character entity: (<code>highChar</code> - <code>0xD800</code>) * <code>0x400</code> + (<code>lowChar</code> - <code>0xDC00</code>) + <code>0x10000</code>.  </p>\n<p> For both HTML and XML, the document character set (and therefore the notation of numeric character references) is based on UCS [ISO-10646]. A single numeric character reference in a source document may therefore in some cases correspond to two 16-bit units in a string (a high surrogate and a low surrogate). These 16-bit units are referred to as a surrogate pair.  </p>\n<p> For more information regarding surrogates or characters, refer to section 3.7 of the Unicode 3.0/Unicode 2.0 standard located at <a href=\"http://www.unicode.org\" data-linktype=\"external\">http://www.unicode.org</a>, or section 2.2 of the W3C XML 1.0 Recommendation located at <a href=\"http://www.w3.org/TR/REC-xml#charsets\" data-linktype=\"external\">http://www.w3.org/TR/REC-xml#charsets</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_XmlTextWriter_WriteWhitespace_System_String_\">\r\n    \r\n            <a id=\"System_Xml_XmlTextWriter_WriteWhitespace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteWhitespace(String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes out the given white space.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void WriteWhitespace (string ws);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ws</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string of white space characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The string contains non-white space characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0, we recommend that you create <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> instances by using the <a class=\"xref\" href=\"system.xml.xmlwriter#System_Xml_XmlWriter_Create_\" data-linktype=\"relative-path\">Create</a> method and the <a class=\"xref\" href=\"system.xml.xmlwritersettings\" data-linktype=\"relative-path\">XmlWriterSettings</a> class to take advantage of new functionality.  </p>\n</div>\n<p> This method is used to manually format your document. Use the <a class=\"xref\" href=\"system.xml.xmltextwriter#System_Xml_XmlTextWriter_Formatting_\" data-linktype=\"relative-path\">Formatting</a> property to have the writer format the output automatically.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <code>WriteWhitespace</code> method to control how the file is formatted.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic WebData XmlTextWriter.XmlSpace Example#1\">using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample\n{  \n  public static void Main()\n  {\n    // Create the writer.\n    XmlTextWriter writer = null;\n    writer = new XmlTextWriter (&quot;ws.html&quot;, null);\n\n    // Write an element (this one is the root).\n    writer.WriteStartElement(&quot;p&quot;);\n\n    // Write the xml:space attribute.\n    writer.WriteAttributeString(&quot;xml&quot;, &quot;space&quot;, null, &quot;preserve&quot;);\n\n    // Verify that xml:space is set properly.\n    if (writer.XmlSpace == XmlSpace.Preserve)\n      Console.WriteLine(&quot;xmlspace is correct!&quot;);\n\n    // Write out the HTML elements.  Insert white space\n    // between &#39;something&#39; and &#39;Big&#39;\n    writer.WriteString(&quot;something&quot;);\n    writer.WriteWhitespace(&quot;  &quot;);\n    writer.WriteElementString(&quot;b&quot;, &quot;B&quot;);\n    writer.WriteString(&quot;ig&quot;);\n\n    // Write the root end element.\n    writer.WriteEndElement();\n             \n    // Write the XML to file and close the writer.\n    writer.Close();  \n  }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic WebData XmlTextWriter.XmlSpace Example#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nint main()\n{\n   \n   // Create the writer.\n   XmlTextWriter^ writer = nullptr;\n   writer = gcnew XmlTextWriter( &quot;ws.html&quot;, nullptr );\n   \n   // Write an element (this one is the root).\n   writer-&gt;WriteStartElement( &quot;p&quot; );\n   \n   // Write the xml:space attribute.\n   writer-&gt;WriteAttributeString( &quot;xml&quot;, &quot;space&quot;, nullptr, &quot;preserve&quot; );\n   \n   // Verify that xml:space is set properly.\n   if ( writer-&gt;XmlSpace == XmlSpace::Preserve )\n      Console::WriteLine( &quot;xmlspace is correct!&quot; );\n\n   \n   // Write out the HTML elements.  Insert white space\n   // between &#39;something&#39; and &#39;Big&#39;\n   writer-&gt;WriteString( &quot;something&quot; );\n   writer-&gt;WriteWhitespace( &quot;  &quot; );\n   writer-&gt;WriteElementString( &quot;b&quot;, &quot;B&quot; );\n   writer-&gt;WriteString( &quot;ig&quot; );\n   \n   // Write the root end element.\n   writer-&gt;WriteEndElement();\n   \n   // Write the XML to file and close the writer.\n   writer-&gt;Close();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic WebData XmlTextWriter.XmlSpace Example#1\">Option Strict\nOption Explicit\n\nImports System\nImports System.IO\nImports System.Xml\n\nPublic Class Sample\n    \n    Public Shared Sub Main()\n        &#39; Create the writer.\n        Dim writer As XmlTextWriter = Nothing\n        writer = New XmlTextWriter(&quot;ws.html&quot;, Nothing)\n        \n        &#39; Write an element (this one is the root).\n        writer.WriteStartElement(&quot;p&quot;)\n        \n        &#39; Write the xml:space attribute.\n        writer.WriteAttributeString(&quot;xml&quot;, &quot;space&quot;, Nothing, &quot;preserve&quot;)\n        \n        &#39; Verify that xml:space is set properly.\n        If writer.XmlSpace = XmlSpace.Preserve Then\n            Console.WriteLine(&quot;xmlspace is correct!&quot;)\n        End If \n        &#39; Write out the HTML elements.  Insert white space\n        &#39; between &#39;something&#39; and &#39;Big&#39;.\n        writer.WriteString(&quot;something&quot;)\n        writer.WriteWhitespace(&quot;  &quot;)\n        writer.WriteElementString(&quot;b&quot;, &quot;B&quot;)\n        writer.WriteString(&quot;ig&quot;)\n        \n        &#39; Write the root end element.\n        writer.WriteEndElement()\n        \n        &#39; Write the XML to file and close the writer.\n        writer.Close()\n    End Sub &#39;Main\nEnd Class &#39;Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.XmlTextWriter.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.XmlTextWriter.yml\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextWriter\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextWriter..ctor\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextWriter.BaseStream\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextWriter.Close\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextWriter.Flush\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextWriter.Formatting\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextWriter.Indentation\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextWriter.IndentChar\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextWriter.LookupPrefix\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextWriter.Namespaces\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextWriter.QuoteChar\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextWriter.WriteBase64\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextWriter.WriteBinHex\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextWriter.WriteCData\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextWriter.WriteCharEntity\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextWriter.WriteChars\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextWriter.WriteComment\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextWriter.WriteDocType\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextWriter.WriteEndAttribute\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextWriter.WriteEndDocument\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextWriter.WriteEndElement\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextWriter.WriteEntityRef\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextWriter.WriteFullEndElement\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextWriter.WriteName\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextWriter.WriteNmToken\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextWriter.WriteProcessingInstruction\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextWriter.WriteQualifiedName\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextWriter.WriteRaw\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextWriter.WriteStartAttribute\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextWriter.WriteStartDocument\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextWriter.WriteStartElement\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextWriter.WriteState\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextWriter.WriteString\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextWriter.WriteSurrogateCharEntity\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextWriter.WriteWhitespace\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextWriter.XmlLang\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlTextWriter.XmlSpace\">\r\n<meta name=\"APILocation\" content=\"System.Xml.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"43424fd1-83e2-a740-5a4b-337cab1962ad\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a writer that provides a fast, non-cached, forward-only way of generating streams or files containing XML data that conforms to the W3C Extensible Markup Language (XML) 1.0 and the Namespa…\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Xml/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Xml.XmlTextWriter\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.XmlTextWriter.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.XmlTextWriter.yml","open_to_public_contributors":true,"api_name":["System.Xml.XmlTextWriter","System.Xml.XmlTextWriter..ctor","System.Xml.XmlTextWriter.BaseStream","System.Xml.XmlTextWriter.Close","System.Xml.XmlTextWriter.Flush","System.Xml.XmlTextWriter.Formatting","System.Xml.XmlTextWriter.Indentation","System.Xml.XmlTextWriter.IndentChar","System.Xml.XmlTextWriter.LookupPrefix","System.Xml.XmlTextWriter.Namespaces","System.Xml.XmlTextWriter.QuoteChar","System.Xml.XmlTextWriter.WriteBase64","System.Xml.XmlTextWriter.WriteBinHex","System.Xml.XmlTextWriter.WriteCData","System.Xml.XmlTextWriter.WriteCharEntity","System.Xml.XmlTextWriter.WriteChars","System.Xml.XmlTextWriter.WriteComment","System.Xml.XmlTextWriter.WriteDocType","System.Xml.XmlTextWriter.WriteEndAttribute","System.Xml.XmlTextWriter.WriteEndDocument","System.Xml.XmlTextWriter.WriteEndElement","System.Xml.XmlTextWriter.WriteEntityRef","System.Xml.XmlTextWriter.WriteFullEndElement","System.Xml.XmlTextWriter.WriteName","System.Xml.XmlTextWriter.WriteNmToken","System.Xml.XmlTextWriter.WriteProcessingInstruction","System.Xml.XmlTextWriter.WriteQualifiedName","System.Xml.XmlTextWriter.WriteRaw","System.Xml.XmlTextWriter.WriteStartAttribute","System.Xml.XmlTextWriter.WriteStartDocument","System.Xml.XmlTextWriter.WriteStartElement","System.Xml.XmlTextWriter.WriteState","System.Xml.XmlTextWriter.WriteString","System.Xml.XmlTextWriter.WriteSurrogateCharEntity","System.Xml.XmlTextWriter.WriteWhitespace","System.Xml.XmlTextWriter.XmlLang","System.Xml.XmlTextWriter.XmlSpace"],"api_location":["System.Xml.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Xml.XmlTextWriter","System::Xml::XmlTextWriter","System.Xml.XmlTextWriter.#ctor","System::Xml::XmlTextWriter::#ctor","System.Xml.XmlTextWriter.BaseStream","System::Xml::XmlTextWriter::BaseStream","System.Xml.XmlTextWriter.Close","System::Xml::XmlTextWriter::Close","System.Xml.XmlTextWriter.Flush","System::Xml::XmlTextWriter::Flush","System.Xml.XmlTextWriter.Formatting","System::Xml::XmlTextWriter::Formatting","System.Xml.XmlTextWriter.Indentation","System::Xml::XmlTextWriter::Indentation","System.Xml.XmlTextWriter.IndentChar","System::Xml::XmlTextWriter::IndentChar","System.Xml.XmlTextWriter.LookupPrefix","System::Xml::XmlTextWriter::LookupPrefix","System.Xml.XmlTextWriter.Namespaces","System::Xml::XmlTextWriter::Namespaces","System.Xml.XmlTextWriter.QuoteChar","System::Xml::XmlTextWriter::QuoteChar","System.Xml.XmlTextWriter.WriteBase64","System::Xml::XmlTextWriter::WriteBase64","System.Xml.XmlTextWriter.WriteBinHex","System::Xml::XmlTextWriter::WriteBinHex","System.Xml.XmlTextWriter.WriteCData","System::Xml::XmlTextWriter::WriteCData","System.Xml.XmlTextWriter.WriteCharEntity","System::Xml::XmlTextWriter::WriteCharEntity","System.Xml.XmlTextWriter.WriteChars","System::Xml::XmlTextWriter::WriteChars","System.Xml.XmlTextWriter.WriteComment","System::Xml::XmlTextWriter::WriteComment","System.Xml.XmlTextWriter.WriteDocType","System::Xml::XmlTextWriter::WriteDocType","System.Xml.XmlTextWriter.WriteEndAttribute","System::Xml::XmlTextWriter::WriteEndAttribute","System.Xml.XmlTextWriter.WriteEndDocument","System::Xml::XmlTextWriter::WriteEndDocument","System.Xml.XmlTextWriter.WriteEndElement","System::Xml::XmlTextWriter::WriteEndElement","System.Xml.XmlTextWriter.WriteEntityRef","System::Xml::XmlTextWriter::WriteEntityRef","System.Xml.XmlTextWriter.WriteFullEndElement","System::Xml::XmlTextWriter::WriteFullEndElement","System.Xml.XmlTextWriter.WriteName","System::Xml::XmlTextWriter::WriteName","System.Xml.XmlTextWriter.WriteNmToken","System::Xml::XmlTextWriter::WriteNmToken","System.Xml.XmlTextWriter.WriteProcessingInstruction","System::Xml::XmlTextWriter::WriteProcessingInstruction","System.Xml.XmlTextWriter.WriteQualifiedName","System::Xml::XmlTextWriter::WriteQualifiedName","System.Xml.XmlTextWriter.WriteRaw","System::Xml::XmlTextWriter::WriteRaw","System.Xml.XmlTextWriter.WriteStartAttribute","System::Xml::XmlTextWriter::WriteStartAttribute","System.Xml.XmlTextWriter.WriteStartDocument","System::Xml::XmlTextWriter::WriteStartDocument","System.Xml.XmlTextWriter.WriteStartElement","System::Xml::XmlTextWriter::WriteStartElement","System.Xml.XmlTextWriter.WriteState","System::Xml::XmlTextWriter::WriteState","System.Xml.XmlTextWriter.WriteString","System::Xml::XmlTextWriter::WriteString","System.Xml.XmlTextWriter.WriteSurrogateCharEntity","System::Xml::XmlTextWriter::WriteSurrogateCharEntity","System.Xml.XmlTextWriter.WriteWhitespace","System::Xml::XmlTextWriter::WriteWhitespace","System.Xml.XmlTextWriter.XmlLang","System::Xml::XmlTextWriter::XmlLang","System.Xml.XmlTextWriter.XmlSpace","System::Xml::XmlTextWriter::XmlSpace"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"43424fd1-83e2-a740-5a4b-337cab1962ad","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Xml/XmlTextWriter.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"XmlTextWriter class | Microsoft Docs","_op_ogTitle":"XmlTextWriter class","description":"Represents a writer that provides a fast, non-cached, forward-only way of generating streams or files containing XML data that conforms to the W3C Extensible Markup Language (XML) 1.0 and the Namespa…","toc_asset_id":"_splitted/System.Xml/toc.json","toc_rel":"_splitted/System.Xml/toc.json","source_url":"","ms.assetid":"System.Xml.XmlTextWriter","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.xmltextwriter","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.xmltextwriter","fileRelativePath":"System.Xml.XmlTextWriter.html"},"themesRelativePathToOutputRoot":"_themes/"}