{"content":"    \r\n    <h1 id=\"System_Runtime_Remoting_Messaging_IMethodCallMessage\">\r\n      <span class=\"lang-csharp\">IMethodCallMessage</span>\r\n        Interface\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Defines the method call message interface.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic interface IMethodCallMessage : System.Runtime.Remoting.Messaging.IMethodMessage</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>An IMethodCallMessage is generated as a result of a method called on a remote object, and is used to transport details about the remote method call to the server side.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_Messaging_IMethodCallMessage_InArgCount\" data-linktype=\"self-bookmark\">InArgCount</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of arguments in the call that are not marked as <code>out</code> parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_Messaging_IMethodCallMessage_InArgs\" data-linktype=\"self-bookmark\">InArgs</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an array of arguments that are not marked as <code>out</code> parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_Messaging_IMethodCallMessage_GetInArg_System_Int32_\" data-linktype=\"self-bookmark\">GetInArg(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the specified argument that is not marked as an <code>out</code> parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_Messaging_IMethodCallMessage_GetInArgName_System_Int32_\" data-linktype=\"self-bookmark\">GetInArgName(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the name of the specified argument that is not marked as an <code>out</code> parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_Messaging_IMethodCallMessage_InArgCount\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_Messaging_IMethodCallMessage_InArgCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InArgCount</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of arguments in the call that are not marked as <code>out</code> parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int InArgCount { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of arguments in the call that are not marked as <code>out</code> parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example code shows a custom proxy that overrides RealProxy.Invoke in order to write the call message information to the console.  </p>\n<pre><code class=\"lang-cs\" name=\"IMethodCallMessage_GetInArg#2\">\n      public override IMessage Invoke(IMessage myIMessage)\n      {\n         Console.WriteLine(&quot;MyProxy.Invoke Start&quot;);\n         Console.WriteLine(&quot;&quot;);\n         ReturnMessage myReturnMessage = null;\n         \n         if (myIMessage is IMethodCallMessage)\n         {\n            Console.WriteLine(&quot;Message is of type &#39;IMethodCallMessage&#39;.&quot;);\n            Console.WriteLine(&quot;&quot;);\n\n            IMethodCallMessage myIMethodCallMessage;\n            myIMethodCallMessage=(IMethodCallMessage)myIMessage;\n            Console.WriteLine(&quot;InArgCount is  : &quot; + \n                              myIMethodCallMessage.InArgCount.ToString());\n         \n            foreach (object myObj in myIMethodCallMessage.InArgs)\n            {\n               Console.WriteLine(&quot;InArgs is : &quot; + myObj.ToString());\n            }\n\n            for(int i=0; i&lt;myIMethodCallMessage.InArgCount; i++)\n            {\n               Console.WriteLine(&quot;GetArgName(&quot; +i.ToString() +&quot;) is : &quot; + \n                                       myIMethodCallMessage.GetArgName(i));\n               Console.WriteLine(&quot;GetInArg(&quot;+i.ToString() +&quot;) is : &quot; +\n                              myIMethodCallMessage.GetInArg(i).ToString());\n            }\n            Console.WriteLine(&quot;&quot;);\n         }\n         else if (myIMessage is IMethodReturnMessage)\n            Console.WriteLine(&quot;Message is of type &#39;IMethodReturnMessage&#39;.&quot;);\n                  \n         // Build Return Message\n         myReturnMessage = new ReturnMessage(5,null,0,null,\n                                       (IMethodCallMessage)myIMessage);\n      \n         Console.WriteLine(&quot;MyProxy.Invoke - Finish&quot;);\n         return myReturnMessage;\n      }\n\n\n   }\n  \n   \n   // The class used to obtain Metadata.\n   [PermissionSet(SecurityAction.Demand, Name=&quot;FullTrust&quot;)]\n   public class MyMarshalByRefClass : MarshalByRefObject\n   {\n      public int MyMethod(string str, double dbl, int i)\n      {\n         Console.WriteLine(&quot;MyMarshalByRefClass.MyMethod {0} {1} {2}&quot;, str, dbl, i);\n         return 0;\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"IMethodCallMessage_GetInArg#2\">      Public Overrides Function Invoke(ByVal myIMessage As IMessage) As IMessage\n         Console.WriteLine(&quot;MyProxy.Invoke Start&quot;)\n         Console.WriteLine(&quot;&quot;)\n\n         If TypeOf myIMessage Is IMethodCallMessage Then\n            Console.WriteLine(&quot;Message is of type &#39;IMethodCallMessage&#39;.&quot;)\n            Console.WriteLine(&quot;&quot;)\n\n            Dim myIMethodCallMessage As IMethodCallMessage\n            myIMethodCallMessage = CType(myIMessage, IMethodCallMessage)\n\n            Console.WriteLine(&quot;InArgCount is : &quot; + myIMethodCallMessage.InArgCount.ToString)\n            Dim myObj As Object\n            For Each myObj In myIMethodCallMessage.InArgs\n               Console.WriteLine(&quot;InArgs is : &quot; + myObj.ToString())\n            Next\n\n            Dim i As Integer\n            For i = 0 To myIMethodCallMessage.InArgCount - 1\n               Console.WriteLine(&quot;GetArgName(&quot; + i.ToString() + &quot;) is : &quot; + myIMethodCallMessage.GetArgName(i))\n               Console.WriteLine(&quot;GetInArg(&quot; + i.ToString() + &quot;) is : &quot; + myIMethodCallMessage.GetInArg(i).ToString)\n            Next i\n\n            Console.WriteLine(&quot;&quot;)\n         ElseIf TypeOf myIMessage Is IMethodReturnMessage Then\n            Console.WriteLine(&quot;Message is of type &#39;IMethodReturnMessage&#39;.&quot;)\n         End If\n\n         &#39; Build Return Message\n         Dim myReturnMessage As New ReturnMessage(5, Nothing, 0, Nothing, _\n                                    CType(myIMessage, IMethodCallMessage))\n\n         Console.WriteLine(&quot;MyProxy.Invoke - Finish&quot;)\n         Return myReturnMessage\n\n      End Function &#39;Invoke\n\n\n\n   End Class &#39;MyProxy\n\n   &#39; The class used to obtain Metadata.\n   &lt;PermissionSet(SecurityAction.Demand, Name:=&quot;FullTrust&quot;)&gt; _\n   Public Class MyMarshalByRefClass\n      Inherits MarshalByRefObject\n\n      Public Function MyMethod(ByVal str As String, ByVal dbl As Double, ByVal i As Integer) As Integer\n         Console.WriteLine(&quot;MyMarshalByRefClass.MyMethod {0} {1} {2}&quot;, str, dbl, i)\n         Return 0\n      End Function &#39;MyMethod\n   End Class &#39;MyMarshalByRefClass\n</code></pre><pre><code class=\"lang-cpp\" name=\"IMethodCallMessage_GetInArg#2\">   virtual IMessage^ Invoke( IMessage^ myIMessage ) override\n   {\n      Console::WriteLine( &quot;MyProxy::Invoke Start&quot; );\n      Console::WriteLine( &quot;&quot; );\n      ReturnMessage^ myReturnMessage = nullptr;\n      if ( dynamic_cast&lt;IMethodCallMessage^&gt;(myIMessage) )\n      {\n         Console::WriteLine( &quot;Message is of type &#39;IMethodCallMessage*&#39;.&quot; );\n         Console::WriteLine( &quot;&quot; );\n         IMethodCallMessage^ myIMethodCallMessage;\n         myIMethodCallMessage = dynamic_cast&lt;IMethodCallMessage^&gt;(myIMessage);\n         Console::WriteLine( &quot;InArgCount is  : {0}&quot;, myIMethodCallMessage-&gt;InArgCount );\n         IEnumerator^ myEnum = myIMethodCallMessage-&gt;InArgs-&gt;GetEnumerator();\n         while ( myEnum-&gt;MoveNext() )\n         {\n            Object^ myObj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n            Console::WriteLine( &quot;InArgs is : {0}&quot;, myObj );\n         }\n\n         for ( int i = 0; i &lt; myIMethodCallMessage-&gt;InArgCount; i++ )\n         {\n            Console::WriteLine( &quot;GetArgName({0}) is : {1}&quot;, i, myIMethodCallMessage-&gt;GetArgName( i ) );\n            Console::WriteLine( &quot;GetInArg({0}) is : {0}&quot;, i, myIMethodCallMessage-&gt;GetInArg( i ) );\n\n         }\n         Console::WriteLine( &quot;&quot; );\n      }\n      else\n      if ( dynamic_cast&lt;IMethodReturnMessage^&gt;(myIMessage) )\n            Console::WriteLine( &quot;Message is of type &#39;IMethodReturnMessage*&#39;.&quot; );\n\n      // Build Return Message \n      myReturnMessage = gcnew ReturnMessage( 5,nullptr,0,nullptr,dynamic_cast&lt;IMethodCallMessage^&gt;(myIMessage) );\n      Console::WriteLine( &quot;MyProxy::Invoke - Finish&quot; );\n      return myReturnMessage;\n   }\n};\n\n// The class used to obtain Metadata.\npublic ref class MyMarshalByRefClass: public MarshalByRefObject\n{\npublic:\n   int MyMethod( String^ str, double dbl, int i )\n   {\n      Console::WriteLine( &quot;MyMarshalByRefClass::MyMethod {0} {1} {2}&quot;, str, dbl, i );\n      return 0;\n   }\n\n};\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_Messaging_IMethodCallMessage_InArgs\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_Messaging_IMethodCallMessage_InArgs_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InArgs</div>        \r\n          </div>\r\n    \r\n            <p>Gets an array of arguments that are not marked as <code>out</code> parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object[] InArgs { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </div>\r\n                  <p>An array of arguments that are not marked as <code>out</code> parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Although the InArgs property is redundant since the same functionality can be achieved with the <a class=\"xref\" href=\"system.runtime.remoting.messaging.imethodcallmessage#System_Runtime_Remoting_Messaging_IMethodCallMessage_InArgCount_\" data-linktype=\"relative-path\">InArgCount</a> and <a class=\"xref\" href=\"system.runtime.remoting.messaging.imethodcallmessage#System_Runtime_Remoting_Messaging_IMethodCallMessage_GetInArg_\" data-linktype=\"relative-path\">GetInArg</a> methods, there might be performance optimization available if the implementer understands when all the arguments will be retrieved.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"IMethodCallMessage_GetInArg#2\">\n      public override IMessage Invoke(IMessage myIMessage)\n      {\n         Console.WriteLine(&quot;MyProxy.Invoke Start&quot;);\n         Console.WriteLine(&quot;&quot;);\n         ReturnMessage myReturnMessage = null;\n         \n         if (myIMessage is IMethodCallMessage)\n         {\n            Console.WriteLine(&quot;Message is of type &#39;IMethodCallMessage&#39;.&quot;);\n            Console.WriteLine(&quot;&quot;);\n\n            IMethodCallMessage myIMethodCallMessage;\n            myIMethodCallMessage=(IMethodCallMessage)myIMessage;\n            Console.WriteLine(&quot;InArgCount is  : &quot; + \n                              myIMethodCallMessage.InArgCount.ToString());\n         \n            foreach (object myObj in myIMethodCallMessage.InArgs)\n            {\n               Console.WriteLine(&quot;InArgs is : &quot; + myObj.ToString());\n            }\n\n            for(int i=0; i&lt;myIMethodCallMessage.InArgCount; i++)\n            {\n               Console.WriteLine(&quot;GetArgName(&quot; +i.ToString() +&quot;) is : &quot; + \n                                       myIMethodCallMessage.GetArgName(i));\n               Console.WriteLine(&quot;GetInArg(&quot;+i.ToString() +&quot;) is : &quot; +\n                              myIMethodCallMessage.GetInArg(i).ToString());\n            }\n            Console.WriteLine(&quot;&quot;);\n         }\n         else if (myIMessage is IMethodReturnMessage)\n            Console.WriteLine(&quot;Message is of type &#39;IMethodReturnMessage&#39;.&quot;);\n                  \n         // Build Return Message\n         myReturnMessage = new ReturnMessage(5,null,0,null,\n                                       (IMethodCallMessage)myIMessage);\n      \n         Console.WriteLine(&quot;MyProxy.Invoke - Finish&quot;);\n         return myReturnMessage;\n      }\n\n\n   }\n  \n   \n   // The class used to obtain Metadata.\n   [PermissionSet(SecurityAction.Demand, Name=&quot;FullTrust&quot;)]\n   public class MyMarshalByRefClass : MarshalByRefObject\n   {\n      public int MyMethod(string str, double dbl, int i)\n      {\n         Console.WriteLine(&quot;MyMarshalByRefClass.MyMethod {0} {1} {2}&quot;, str, dbl, i);\n         return 0;\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"IMethodCallMessage_GetInArg#2\">      Public Overrides Function Invoke(ByVal myIMessage As IMessage) As IMessage\n         Console.WriteLine(&quot;MyProxy.Invoke Start&quot;)\n         Console.WriteLine(&quot;&quot;)\n\n         If TypeOf myIMessage Is IMethodCallMessage Then\n            Console.WriteLine(&quot;Message is of type &#39;IMethodCallMessage&#39;.&quot;)\n            Console.WriteLine(&quot;&quot;)\n\n            Dim myIMethodCallMessage As IMethodCallMessage\n            myIMethodCallMessage = CType(myIMessage, IMethodCallMessage)\n\n            Console.WriteLine(&quot;InArgCount is : &quot; + myIMethodCallMessage.InArgCount.ToString)\n            Dim myObj As Object\n            For Each myObj In myIMethodCallMessage.InArgs\n               Console.WriteLine(&quot;InArgs is : &quot; + myObj.ToString())\n            Next\n\n            Dim i As Integer\n            For i = 0 To myIMethodCallMessage.InArgCount - 1\n               Console.WriteLine(&quot;GetArgName(&quot; + i.ToString() + &quot;) is : &quot; + myIMethodCallMessage.GetArgName(i))\n               Console.WriteLine(&quot;GetInArg(&quot; + i.ToString() + &quot;) is : &quot; + myIMethodCallMessage.GetInArg(i).ToString)\n            Next i\n\n            Console.WriteLine(&quot;&quot;)\n         ElseIf TypeOf myIMessage Is IMethodReturnMessage Then\n            Console.WriteLine(&quot;Message is of type &#39;IMethodReturnMessage&#39;.&quot;)\n         End If\n\n         &#39; Build Return Message\n         Dim myReturnMessage As New ReturnMessage(5, Nothing, 0, Nothing, _\n                                    CType(myIMessage, IMethodCallMessage))\n\n         Console.WriteLine(&quot;MyProxy.Invoke - Finish&quot;)\n         Return myReturnMessage\n\n      End Function &#39;Invoke\n\n\n\n   End Class &#39;MyProxy\n\n   &#39; The class used to obtain Metadata.\n   &lt;PermissionSet(SecurityAction.Demand, Name:=&quot;FullTrust&quot;)&gt; _\n   Public Class MyMarshalByRefClass\n      Inherits MarshalByRefObject\n\n      Public Function MyMethod(ByVal str As String, ByVal dbl As Double, ByVal i As Integer) As Integer\n         Console.WriteLine(&quot;MyMarshalByRefClass.MyMethod {0} {1} {2}&quot;, str, dbl, i)\n         Return 0\n      End Function &#39;MyMethod\n   End Class &#39;MyMarshalByRefClass\n</code></pre><pre><code class=\"lang-cpp\" name=\"IMethodCallMessage_GetInArg#2\">   virtual IMessage^ Invoke( IMessage^ myIMessage ) override\n   {\n      Console::WriteLine( &quot;MyProxy::Invoke Start&quot; );\n      Console::WriteLine( &quot;&quot; );\n      ReturnMessage^ myReturnMessage = nullptr;\n      if ( dynamic_cast&lt;IMethodCallMessage^&gt;(myIMessage) )\n      {\n         Console::WriteLine( &quot;Message is of type &#39;IMethodCallMessage*&#39;.&quot; );\n         Console::WriteLine( &quot;&quot; );\n         IMethodCallMessage^ myIMethodCallMessage;\n         myIMethodCallMessage = dynamic_cast&lt;IMethodCallMessage^&gt;(myIMessage);\n         Console::WriteLine( &quot;InArgCount is  : {0}&quot;, myIMethodCallMessage-&gt;InArgCount );\n         IEnumerator^ myEnum = myIMethodCallMessage-&gt;InArgs-&gt;GetEnumerator();\n         while ( myEnum-&gt;MoveNext() )\n         {\n            Object^ myObj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n            Console::WriteLine( &quot;InArgs is : {0}&quot;, myObj );\n         }\n\n         for ( int i = 0; i &lt; myIMethodCallMessage-&gt;InArgCount; i++ )\n         {\n            Console::WriteLine( &quot;GetArgName({0}) is : {1}&quot;, i, myIMethodCallMessage-&gt;GetArgName( i ) );\n            Console::WriteLine( &quot;GetInArg({0}) is : {0}&quot;, i, myIMethodCallMessage-&gt;GetInArg( i ) );\n\n         }\n         Console::WriteLine( &quot;&quot; );\n      }\n      else\n      if ( dynamic_cast&lt;IMethodReturnMessage^&gt;(myIMessage) )\n            Console::WriteLine( &quot;Message is of type &#39;IMethodReturnMessage*&#39;.&quot; );\n\n      // Build Return Message \n      myReturnMessage = gcnew ReturnMessage( 5,nullptr,0,nullptr,dynamic_cast&lt;IMethodCallMessage^&gt;(myIMessage) );\n      Console::WriteLine( &quot;MyProxy::Invoke - Finish&quot; );\n      return myReturnMessage;\n   }\n};\n\n// The class used to obtain Metadata.\npublic ref class MyMarshalByRefClass: public MarshalByRefObject\n{\npublic:\n   int MyMethod( String^ str, double dbl, int i )\n   {\n      Console::WriteLine( &quot;MyMarshalByRefClass::MyMethod {0} {1} {2}&quot;, str, dbl, i );\n      return 0;\n   }\n\n};\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_Messaging_IMethodCallMessage_GetInArg_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_Messaging_IMethodCallMessage_GetInArg_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetInArg(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the specified argument that is not marked as an <code>out</code> parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object GetInArg (int argNum);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>argNum</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of the requested <code>in</code> argument.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The requested argument that is not marked as an <code>out</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_Messaging_IMethodCallMessage_GetInArgName_System_Int32_\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_Messaging_IMethodCallMessage_GetInArgName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetInArgName(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the name of the specified argument that is not marked as an <code>out</code> parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string GetInArgName (int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of the requested <code>in</code> argument.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of a specific argument that is not marked as an <code>out</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Runtime.Remoting.Messaging.IMethodCallMessage.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Runtime.Remoting.Messaging.IMethodCallMessage.yml\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Messaging.IMethodCallMessage\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Messaging.IMethodCallMessage.GetInArg\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Messaging.IMethodCallMessage.GetInArgName\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Messaging.IMethodCallMessage.InArgCount\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Messaging.IMethodCallMessage.InArgs\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"8b21854e-302b-acf7-cacf-73685f5dcfad\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines the method call message interface.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Runtime.Remoting.Messaging/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Runtime.Remoting.Messaging.IMethodCallMessage\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Runtime.Remoting.Messaging.IMethodCallMessage.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Runtime.Remoting.Messaging.IMethodCallMessage.yml","open_to_public_contributors":true,"api_name":["System.Runtime.Remoting.Messaging.IMethodCallMessage","System.Runtime.Remoting.Messaging.IMethodCallMessage.GetInArg","System.Runtime.Remoting.Messaging.IMethodCallMessage.GetInArgName","System.Runtime.Remoting.Messaging.IMethodCallMessage.InArgCount","System.Runtime.Remoting.Messaging.IMethodCallMessage.InArgs"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Runtime.Remoting.Messaging.IMethodCallMessage","System::Runtime::Remoting::Messaging::IMethodCallMessage","System.Runtime.Remoting.Messaging.IMethodCallMessage.GetInArg","System::Runtime::Remoting::Messaging::IMethodCallMessage::GetInArg","System.Runtime.Remoting.Messaging.IMethodCallMessage.GetInArgName","System::Runtime::Remoting::Messaging::IMethodCallMessage::GetInArgName","System.Runtime.Remoting.Messaging.IMethodCallMessage.InArgCount","System::Runtime::Remoting::Messaging::IMethodCallMessage::InArgCount","System.Runtime.Remoting.Messaging.IMethodCallMessage.InArgs","System::Runtime::Remoting::Messaging::IMethodCallMessage::InArgs"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"8b21854e-302b-acf7-cacf-73685f5dcfad","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Runtime.Remoting.Messaging/IMethodCallMessage.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IMethodCallMessage interface | Microsoft Docs","_op_ogTitle":"IMethodCallMessage interface","description":"Defines the method call message interface.\n","toc_asset_id":"_splitted/System.Runtime.Remoting.Messaging/toc.json","toc_rel":"_splitted/System.Runtime.Remoting.Messaging/toc.json","source_url":"","ms.assetid":"System.Runtime.Remoting.Messaging.IMethodCallMessage","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.runtime.remoting.messaging.imethodcallmessage","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.runtime.remoting.messaging.imethodcallmessage","fileRelativePath":"System.Runtime.Remoting.Messaging.IMethodCallMessage.html"},"themesRelativePathToOutputRoot":"_themes/"}