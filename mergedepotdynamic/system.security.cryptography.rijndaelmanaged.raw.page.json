{"content":"    \r\n    <h1 id=\"System_Security_Cryptography_RijndaelManaged\">\r\n      <span class=\"lang-csharp\">RijndaelManaged</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Accesses the managed version of the <a class=\"xref\" href=\"system.security.cryptography.rijndael\" data-linktype=\"relative-path\">Rijndael</a> algorithm. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class RijndaelManaged : System.Security.Cryptography.Rijndael</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm\" data-linktype=\"relative-path\">SymmetricAlgorithm</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.rijndael\" data-linktype=\"relative-path\">System.Security.Cryptography.Rijndael</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">RijndaelManaged</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.rijndael#System_Security_Cryptography_Rijndael_Create\" data-linktype=\"relative-path\">Create()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.rijndael#System_Security_Cryptography_Rijndael_Create_System_String_\" data-linktype=\"relative-path\">Create(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_BlockSize\" data-linktype=\"relative-path\">BlockSize</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_BlockSizeValue\" data-linktype=\"relative-path\">BlockSizeValue</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_Clear\" data-linktype=\"relative-path\">Clear()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_CreateDecryptor\" data-linktype=\"relative-path\">CreateDecryptor()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_CreateEncryptor\" data-linktype=\"relative-path\">CreateEncryptor()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_Dispose_System_Boolean_\" data-linktype=\"relative-path\">Dispose(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_FeedbackSize\" data-linktype=\"relative-path\">FeedbackSize</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_FeedbackSizeValue\" data-linktype=\"relative-path\">FeedbackSizeValue</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_IV\" data-linktype=\"relative-path\">IV</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_IVValue\" data-linktype=\"relative-path\">IVValue</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_Key\" data-linktype=\"relative-path\">Key</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_KeySize\" data-linktype=\"relative-path\">KeySize</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_KeySizeValue\" data-linktype=\"relative-path\">KeySizeValue</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_KeyValue\" data-linktype=\"relative-path\">KeyValue</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_LegalBlockSizes\" data-linktype=\"relative-path\">LegalBlockSizes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_LegalBlockSizesValue\" data-linktype=\"relative-path\">LegalBlockSizesValue</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_LegalKeySizes\" data-linktype=\"relative-path\">LegalKeySizes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_LegalKeySizesValue\" data-linktype=\"relative-path\">LegalKeySizesValue</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_Mode\" data-linktype=\"relative-path\">Mode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_ModeValue\" data-linktype=\"relative-path\">ModeValue</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_Padding\" data-linktype=\"relative-path\">Padding</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_PaddingValue\" data-linktype=\"relative-path\">PaddingValue</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.symmetricalgorithm#System_Security_Cryptography_SymmetricAlgorithm_ValidKeySize_System_Int32_\" data-linktype=\"relative-path\">ValidKeySize(Int32)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>This algorithm supports key lengths of 128, 192, or 256 bits; defaulting to 256 bits. This algorithm supports block sizes of 128, 192, or 256 bits; defaulting to 128 bits (<a class=\"xref\" href=\"system.security.cryptography.aes\" data-linktype=\"relative-path\">Aes</a>-compatible).  </p>\n<p> The <a class=\"xref\" href=\"system.security.cryptography.rijndael\" data-linktype=\"relative-path\">Rijndael</a> algorithm is the predecessor of <a class=\"xref\" href=\"system.security.cryptography.aes\" data-linktype=\"relative-path\">Aes</a>. You should use the <a class=\"xref\" href=\"system.security.cryptography.aes\" data-linktype=\"relative-path\">Aes</a> class instead of RijndaelManaged. For more information, see the entry <a href=\"http://go.microsoft.com/fwlink/?LinkId=200932\" data-linktype=\"external\">The Differences Between Rijndael and AES</a> in the .NET Security blog.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RijndaelManaged__ctor\" data-linktype=\"self-bookmark\">RijndaelManaged()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.rijndaelmanaged\" data-linktype=\"relative-path\">RijndaelManaged</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RijndaelManaged_CreateDecryptor_System_Byte___System_Byte___\" data-linktype=\"self-bookmark\">CreateDecryptor(Byte[],Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a symmetric <a class=\"xref\" href=\"system.security.cryptography.rijndael\" data-linktype=\"relative-path\">Rijndael</a> decryptor object with the specified <span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.Key*</span> and initialization vector (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.IV*</span>).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RijndaelManaged_CreateEncryptor_System_Byte___System_Byte___\" data-linktype=\"self-bookmark\">CreateEncryptor(Byte[],Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a symmetric <a class=\"xref\" href=\"system.security.cryptography.rijndael\" data-linktype=\"relative-path\">Rijndael</a> encryptor object with the specified <span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.Key*</span> and initialization vector (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.IV*</span>).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RijndaelManaged_GenerateIV\" data-linktype=\"self-bookmark\">GenerateIV()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Generates a random initialization vector (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.IV*</span>) to be used for the algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_RijndaelManaged_GenerateKey\" data-linktype=\"self-bookmark\">GenerateKey()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Generates a random <span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.Key*</span> to be used for the algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RijndaelManaged__ctor\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RijndaelManaged__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RijndaelManaged()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.rijndaelmanaged\" data-linktype=\"relative-path\">RijndaelManaged</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public RijndaelManaged ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This class is not compliant with the FIPS algorithm.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a new instance of the <code>RijndaelManaged</code> class.  </p>\n<pre><code class=\"lang-cs\" name=\"RijndaelManaged Example#1\">using System;\nusing System.IO;\nusing System.Security.Cryptography;\n\nnamespace RijndaelManaged_Example\n{\n    class RijndaelExample\n    {\n        public static void Main()\n        {\n            try\n            {\n\n                string original = &quot;Here is some data to encrypt!&quot;;\n\n                // Create a new instance of the RijndaelManaged\n                // class.  This generates a new key and initialization \n                // vector (IV).\n                using (RijndaelManaged myRijndael = new RijndaelManaged())\n                {\n\n\t\t\t\t\tmyRijndael.GenerateKey();\n                \tmyRijndael.GenerateIV();\n                    // Encrypt the string to an array of bytes.\n                    byte[] encrypted = EncryptStringToBytes(original, myRijndael.Key, myRijndael.IV);\n\n                    // Decrypt the bytes to a string.\n                    string roundtrip = DecryptStringFromBytes(encrypted, myRijndael.Key, myRijndael.IV);\n\n                    //Display the original data and the decrypted data.\n                    Console.WriteLine(&quot;Original:   {0}&quot;, original);\n                    Console.WriteLine(&quot;Round Trip: {0}&quot;, roundtrip);\n                }\n\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(&quot;Error: {0}&quot;, e.Message);\n            }\n        }\n        static byte[] EncryptStringToBytes(string plainText, byte[] Key, byte[] IV)\n        {\n            // Check arguments.\n            if (plainText == null || plainText.Length &lt;= 0)\n                throw new ArgumentNullException(&quot;plainText&quot;);\n            if (Key == null || Key.Length &lt;= 0)\n                throw new ArgumentNullException(&quot;Key&quot;);\n            if (IV == null || IV.Length &lt;= 0)\n                throw new ArgumentNullException(&quot;IV&quot;);\n            byte[] encrypted;\n            // Create an RijndaelManaged object\n            // with the specified key and IV.\n            using (RijndaelManaged rijAlg = new RijndaelManaged())\n            {\n                rijAlg.Key = Key;\n                rijAlg.IV = IV;\n\n                // Create a decrytor to perform the stream transform.\n                ICryptoTransform encryptor = rijAlg.CreateEncryptor(rijAlg.Key, rijAlg.IV);\n\n                // Create the streams used for encryption.\n                using (MemoryStream msEncrypt = new MemoryStream())\n                {\n                    using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))\n                    {\n                        using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))\n                        {\n\n                            //Write all data to the stream.\n                            swEncrypt.Write(plainText);\n                        }\n                        encrypted = msEncrypt.ToArray();\n                    }\n                }\n            }\n\n\n            // Return the encrypted bytes from the memory stream.\n            return encrypted;\n\n        }\n\n        static string DecryptStringFromBytes(byte[] cipherText, byte[] Key, byte[] IV)\n        {\n            // Check arguments.\n            if (cipherText == null || cipherText.Length &lt;= 0)\n                throw new ArgumentNullException(&quot;cipherText&quot;);\n            if (Key == null || Key.Length &lt;= 0)\n                throw new ArgumentNullException(&quot;Key&quot;);\n            if (IV == null || IV.Length &lt;= 0)\n                throw new ArgumentNullException(&quot;IV&quot;);\n\n            // Declare the string used to hold\n            // the decrypted text.\n            string plaintext = null;\n\n            // Create an RijndaelManaged object\n            // with the specified key and IV.\n            using (RijndaelManaged rijAlg = new RijndaelManaged())\n            {\n                rijAlg.Key = Key;\n                rijAlg.IV = IV;\n\n                // Create a decrytor to perform the stream transform.\n                ICryptoTransform decryptor = rijAlg.CreateDecryptor(rijAlg.Key, rijAlg.IV);\n\n                // Create the streams used for decryption.\n                using (MemoryStream msDecrypt = new MemoryStream(cipherText))\n                {\n                    using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))\n                    {\n                        using (StreamReader srDecrypt = new StreamReader(csDecrypt))\n                        {\n\n                            // Read the decrypted bytes from the decrypting stream\n                            // and place them in a string.\n                            plaintext = srDecrypt.ReadToEnd();\n                        }\n                    }\n                }\n\n            }\n\n            return plaintext;\n\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"RijndaelManaged Example#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Security::Cryptography;\n\n\nclass RijndaelMemoryExample\n{\npublic:\n    static array&lt;Byte&gt;^ encryptStringToBytes_AES(String^ plainText, array&lt;Byte&gt;^ Key, array&lt;Byte&gt;^ IV)\n    {\n        // Check arguments.\n        if (!plainText || plainText-&gt;Length &lt;= 0)\n            throw gcnew ArgumentNullException(&quot;plainText&quot;);\n        if (!Key || Key-&gt;Length &lt;= 0)\n            throw gcnew ArgumentNullException(&quot;Key&quot;);\n        if (!IV  || IV-&gt;Length &lt;= 0)\n            throw gcnew ArgumentNullException(&quot;IV&quot;);\n\n        // Declare the streams used\n        // to encrypt to an in memory\n        // array of bytes.\n\t\tMemoryStream^   msEncrypt;\n        CryptoStream^   csEncrypt;\n        StreamWriter^   swEncrypt;\n\n        // Declare the RijndaelManaged object\n        // used to encrypt the data.\n        RijndaelManaged^ aesAlg;\n\n        try\n        {\n            // Create a RijndaelManaged object\n            // with the specified key and IV.\n            aesAlg = gcnew RijndaelManaged();\n\t\t\taesAlg-&gt;Padding = PaddingMode::PKCS7;\n            aesAlg-&gt;Key = Key;\n            aesAlg-&gt;IV = IV;\n\n            // Create an encryptor to perform the stream transform.\n            ICryptoTransform^ encryptor = aesAlg-&gt;CreateEncryptor(aesAlg-&gt;Key, aesAlg-&gt;IV);\n\n            // Create the streams used for encryption.\n            msEncrypt = gcnew MemoryStream();\n\t\t\tcsEncrypt = gcnew CryptoStream(msEncrypt, encryptor, CryptoStreamMode::Write);\n            swEncrypt = gcnew StreamWriter(csEncrypt);\n\n            //Write all data to the stream.\n            swEncrypt-&gt;Write(plainText);\n\t\t\tswEncrypt-&gt;Flush();\n\t\t\tcsEncrypt-&gt;FlushFinalBlock();\n\t\t\tmsEncrypt-&gt;Flush();\n        }\n        finally\n        {\n            // Clean things up.\n\n            // Close the streams.\n            if(swEncrypt)\n                swEncrypt-&gt;Close();\n            if (csEncrypt)\n                csEncrypt-&gt;Close();\n\n\n            // Clear the RijndaelManaged object.\n            if (aesAlg)\n                aesAlg-&gt;Clear();\n        }\n\n        // Return the encrypted bytes from the memory stream.\n        return msEncrypt-&gt;ToArray();\n    }\n\n    static String^ decryptStringFromBytes_AES(array&lt;Byte&gt;^ cipherText, array&lt;Byte&gt;^ Key, array&lt;Byte&gt;^ IV)\n    {\n        // Check arguments.\n        if (!cipherText || cipherText-&gt;Length &lt;= 0)\n            throw gcnew ArgumentNullException(&quot;cipherText&quot;);\n        if (!Key || Key-&gt;Length &lt;= 0)\n            throw gcnew ArgumentNullException(&quot;Key&quot;);\n        if (!IV || IV-&gt;Length &lt;= 0)\n            throw gcnew ArgumentNullException(&quot;IV&quot;);\n\n        // TDeclare the streams used\n        // to decrypt to an in memory\n        // array of bytes.\n        MemoryStream^ msDecrypt;\n        CryptoStream^ csDecrypt;\n        StreamReader^ srDecrypt;\n\n        // Declare the RijndaelManaged object\n        // used to decrypt the data.\n        RijndaelManaged^ aesAlg;\n\n        // Declare the string used to hold\n        // the decrypted text.\n        String^ plaintext;\n\n        try\n        {\n            // Create a RijndaelManaged object\n            // with the specified key and IV.\n            aesAlg = gcnew RijndaelManaged();\n\t\t\taesAlg-&gt;Padding = PaddingMode::PKCS7;\n            aesAlg-&gt;Key = Key;\n            aesAlg-&gt;IV = IV;\n\n            // Create a decrytor to perform the stream transform.\n\t\t\tICryptoTransform^ decryptor = aesAlg-&gt;CreateDecryptor(aesAlg-&gt;Key, aesAlg-&gt;IV);\n\n            // Create the streams used for decryption.\n            msDecrypt = gcnew MemoryStream(cipherText);\n\t\t\tcsDecrypt = gcnew CryptoStream(msDecrypt, decryptor, CryptoStreamMode::Read);\n            srDecrypt = gcnew StreamReader(csDecrypt);\n\n            // Read the decrypted bytes from the decrypting stream\n            // and place them in a string.\n            plaintext = srDecrypt-&gt;ReadToEnd();\n        }\n        finally\n        {\n            // Clean things up.\n\n            // Close the streams.\n            if (srDecrypt)\n                srDecrypt-&gt;Close();\n            if (csDecrypt)\n                csDecrypt-&gt;Close();\n            if (msDecrypt)\n                msDecrypt-&gt;Close();\n\n            // Clear the RijndaelManaged object.\n            if (aesAlg)\n                aesAlg-&gt;Clear();\n        }\n\n        return plaintext;\n    }\n};\n\nint main()\n{\n    try\n    {\n        String^ original = &quot;Here is some data to encrypt!&quot;;\n\n        // Create a new instance of the RijndaelManaged\n        // class.  This generates a new key and initialization\n        // vector (IV).\n        RijndaelManaged^ myRijndael = gcnew RijndaelManaged();\n\n        // Encrypt the string to an array of bytes.\n\t\tarray&lt;Byte&gt;^ encrypted = RijndaelMemoryExample::encryptStringToBytes_AES(original, myRijndael-&gt;Key, myRijndael-&gt;IV);\n\n        // Decrypt the bytes to a string.\n        String^ roundtrip = RijndaelMemoryExample::decryptStringFromBytes_AES(encrypted, myRijndael-&gt;Key, myRijndael-&gt;IV);\n\n        //Display the original data and the decrypted data.\n\t\tConsole::WriteLine(&quot;Original:   {0}&quot;, original);\n\t\tConsole::WriteLine(&quot;Round Trip: {0}&quot;, roundtrip);\n    }\n    catch (Exception^ e)\n    {\n\t\tConsole::WriteLine(&quot;Error: {0}&quot;, e-&gt;Message);\n    }\n\n\treturn 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"RijndaelManaged Example#1\">Imports System\nImports System.IO\nImports System.Security.Cryptography\n\n\n\nClass RijndaelExample\n\n    Public Shared Sub Main()\n        Try\n\n            Dim original As String = &quot;Here is some data to encrypt!&quot;\n\n            &#39; Create a new instance of the RijndaelManaged\n            &#39; class.  This generates a new key and initialization \n            &#39; vector (IV).\n            Using myRijndael As New RijndaelManaged()\n            \n            \tmyRijndael.GenerateKey()\n                myRijndael.GenerateIV()\n\n                &#39; Encrypt the string to an array of bytes.\n                Dim encrypted As Byte() = EncryptStringToBytes(original, myRijndael.Key, myRijndael.IV)\n\n                &#39; Decrypt the bytes to a string.\n                Dim roundtrip As String = DecryptStringFromBytes(encrypted, myRijndael.Key, myRijndael.IV)\n\n                &#39;Display the original data and the decrypted data.\n                Console.WriteLine(&quot;Original:   {0}&quot;, original)\n                Console.WriteLine(&quot;Round Trip: {0}&quot;, roundtrip)\n            End Using\n        Catch e As Exception\n            Console.WriteLine(&quot;Error: {0}&quot;, e.Message)\n        End Try\n\n    End Sub &#39;Main\n\n    Shared Function EncryptStringToBytes(ByVal plainText As String, ByVal Key() As Byte, ByVal IV() As Byte) As Byte()\n        &#39; Check arguments.\n        If plainText Is Nothing OrElse plainText.Length &lt;= 0 Then\n            Throw New ArgumentNullException(&quot;plainText&quot;)\n        End If\n        If Key Is Nothing OrElse Key.Length &lt;= 0 Then\n            Throw New ArgumentNullException(&quot;Key&quot;)\n        End If\n        If IV Is Nothing OrElse IV.Length &lt;= 0 Then\n            Throw New ArgumentNullException(&quot;IV&quot;)\n        End If\n        Dim encrypted() As Byte\n        &#39; Create an RijndaelManaged object\n        &#39; with the specified key and IV.\n        Using rijAlg As New RijndaelManaged()\n\n            rijAlg.Key = Key\n            rijAlg.IV = IV\n\n            &#39; Create a decrytor to perform the stream transform.\n            Dim encryptor As ICryptoTransform = rijAlg.CreateEncryptor(rijAlg.Key, rijAlg.IV)\n            &#39; Create the streams used for encryption.\n            Using msEncrypt As New MemoryStream()\n                Using csEncrypt As New CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write)\n                    Using swEncrypt As New StreamWriter(csEncrypt)\n\n                        &#39;Write all data to the stream.\n                        swEncrypt.Write(plainText)\n                    End Using\n                    encrypted = msEncrypt.ToArray()\n                End Using\n            End Using\n        End Using\n\n        &#39; Return the encrypted bytes from the memory stream.\n        Return encrypted\n\n    End Function &#39;EncryptStringToBytes\n\n    Shared Function DecryptStringFromBytes(ByVal cipherText() As Byte, ByVal Key() As Byte, ByVal IV() As Byte) As String\n        &#39; Check arguments.\n        If cipherText Is Nothing OrElse cipherText.Length &lt;= 0 Then\n            Throw New ArgumentNullException(&quot;cipherText&quot;)\n        End If\n        If Key Is Nothing OrElse Key.Length &lt;= 0 Then\n            Throw New ArgumentNullException(&quot;Key&quot;)\n        End If\n        If IV Is Nothing OrElse IV.Length &lt;= 0 Then\n            Throw New ArgumentNullException(&quot;IV&quot;)\n        End If\n        &#39; Declare the string used to hold\n        &#39; the decrypted text.\n        Dim plaintext As String = Nothing\n\n        &#39; Create an RijndaelManaged object\n        &#39; with the specified key and IV.\n        Using rijAlg As New RijndaelManaged\n            rijAlg.Key = Key\n            rijAlg.IV = IV\n\n            &#39; Create a decrytor to perform the stream transform.\n            Dim decryptor As ICryptoTransform = rijAlg.CreateDecryptor(rijAlg.Key, rijAlg.IV)\n\n            &#39; Create the streams used for decryption.\n            Using msDecrypt As New MemoryStream(cipherText)\n\n                Using csDecrypt As New CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read)\n\n                    Using srDecrypt As New StreamReader(csDecrypt)\n\n\n                        &#39; Read the decrypted bytes from the decrypting stream\n                        &#39; and place them in a string.\n                        plaintext = srDecrypt.ReadToEnd()\n                    End Using\n                End Using\n            End Using\n        End Using\n\n        Return plaintext\n\n    End Function &#39;DecryptStringFromBytes \nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RijndaelManaged_CreateDecryptor_System_Byte___System_Byte___\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RijndaelManaged_CreateDecryptor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateDecryptor(Byte[],Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a symmetric <a class=\"xref\" href=\"system.security.cryptography.rijndael\" data-linktype=\"relative-path\">Rijndael</a> decryptor object with the specified <span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.Key*</span> and initialization vector (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.IV*</span>).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Security.Cryptography.ICryptoTransform CreateDecryptor (byte[] rgbKey, byte[] rgbIV);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgbKey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The secret key to be used for the symmetric algorithm. The key size must be 128, 192, or 256 bits.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgbIV</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The IV to be used for the symmetric algorithm.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.icryptotransform\" data-linktype=\"relative-path\">ICryptoTransform</a></div>\r\n                  </div>\r\n                  <p>A symmetric <a class=\"xref\" href=\"system.security.cryptography.rijndael\" data-linktype=\"relative-path\">Rijndael</a> decryptor object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>rgbKey</code> parameter is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>rgbIV</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The value of the <span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.Mode*</span> property is not <a class=\"xref\" href=\"system.security.cryptography.ciphermode\" data-linktype=\"relative-path\">CipherMode</a>, <a class=\"xref\" href=\"system.security.cryptography.ciphermode\" data-linktype=\"relative-path\">CipherMode</a>, or <a class=\"xref\" href=\"system.security.cryptography.ciphermode\" data-linktype=\"relative-path\">CipherMode</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method decrypts an encrypted message created using the <a class=\"xref\" href=\"system.security.cryptography.rijndaelmanaged#System_Security_Cryptography_RijndaelManaged_CreateEncryptor_\" data-linktype=\"relative-path\">CreateEncryptor</a> overload with the same signature.  </p>\n<p> The <code>rgbkey</code> size must be 128, 192, or 256 bits.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the CreateDecryptor method to decrypt messages encoded with the same signature parameter.  </p>\n<pre><code class=\"lang-cs\" name=\"RijndaelManaged Example#1\">using System;\nusing System.IO;\nusing System.Security.Cryptography;\n\nnamespace RijndaelManaged_Example\n{\n    class RijndaelExample\n    {\n        public static void Main()\n        {\n            try\n            {\n\n                string original = &quot;Here is some data to encrypt!&quot;;\n\n                // Create a new instance of the RijndaelManaged\n                // class.  This generates a new key and initialization \n                // vector (IV).\n                using (RijndaelManaged myRijndael = new RijndaelManaged())\n                {\n\n\t\t\t\t\tmyRijndael.GenerateKey();\n                \tmyRijndael.GenerateIV();\n                    // Encrypt the string to an array of bytes.\n                    byte[] encrypted = EncryptStringToBytes(original, myRijndael.Key, myRijndael.IV);\n\n                    // Decrypt the bytes to a string.\n                    string roundtrip = DecryptStringFromBytes(encrypted, myRijndael.Key, myRijndael.IV);\n\n                    //Display the original data and the decrypted data.\n                    Console.WriteLine(&quot;Original:   {0}&quot;, original);\n                    Console.WriteLine(&quot;Round Trip: {0}&quot;, roundtrip);\n                }\n\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(&quot;Error: {0}&quot;, e.Message);\n            }\n        }\n        static byte[] EncryptStringToBytes(string plainText, byte[] Key, byte[] IV)\n        {\n            // Check arguments.\n            if (plainText == null || plainText.Length &lt;= 0)\n                throw new ArgumentNullException(&quot;plainText&quot;);\n            if (Key == null || Key.Length &lt;= 0)\n                throw new ArgumentNullException(&quot;Key&quot;);\n            if (IV == null || IV.Length &lt;= 0)\n                throw new ArgumentNullException(&quot;IV&quot;);\n            byte[] encrypted;\n            // Create an RijndaelManaged object\n            // with the specified key and IV.\n            using (RijndaelManaged rijAlg = new RijndaelManaged())\n            {\n                rijAlg.Key = Key;\n                rijAlg.IV = IV;\n\n                // Create a decrytor to perform the stream transform.\n                ICryptoTransform encryptor = rijAlg.CreateEncryptor(rijAlg.Key, rijAlg.IV);\n\n                // Create the streams used for encryption.\n                using (MemoryStream msEncrypt = new MemoryStream())\n                {\n                    using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))\n                    {\n                        using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))\n                        {\n\n                            //Write all data to the stream.\n                            swEncrypt.Write(plainText);\n                        }\n                        encrypted = msEncrypt.ToArray();\n                    }\n                }\n            }\n\n\n            // Return the encrypted bytes from the memory stream.\n            return encrypted;\n\n        }\n\n        static string DecryptStringFromBytes(byte[] cipherText, byte[] Key, byte[] IV)\n        {\n            // Check arguments.\n            if (cipherText == null || cipherText.Length &lt;= 0)\n                throw new ArgumentNullException(&quot;cipherText&quot;);\n            if (Key == null || Key.Length &lt;= 0)\n                throw new ArgumentNullException(&quot;Key&quot;);\n            if (IV == null || IV.Length &lt;= 0)\n                throw new ArgumentNullException(&quot;IV&quot;);\n\n            // Declare the string used to hold\n            // the decrypted text.\n            string plaintext = null;\n\n            // Create an RijndaelManaged object\n            // with the specified key and IV.\n            using (RijndaelManaged rijAlg = new RijndaelManaged())\n            {\n                rijAlg.Key = Key;\n                rijAlg.IV = IV;\n\n                // Create a decrytor to perform the stream transform.\n                ICryptoTransform decryptor = rijAlg.CreateDecryptor(rijAlg.Key, rijAlg.IV);\n\n                // Create the streams used for decryption.\n                using (MemoryStream msDecrypt = new MemoryStream(cipherText))\n                {\n                    using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))\n                    {\n                        using (StreamReader srDecrypt = new StreamReader(csDecrypt))\n                        {\n\n                            // Read the decrypted bytes from the decrypting stream\n                            // and place them in a string.\n                            plaintext = srDecrypt.ReadToEnd();\n                        }\n                    }\n                }\n\n            }\n\n            return plaintext;\n\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"RijndaelManaged Example#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Security::Cryptography;\n\n\nclass RijndaelMemoryExample\n{\npublic:\n    static array&lt;Byte&gt;^ encryptStringToBytes_AES(String^ plainText, array&lt;Byte&gt;^ Key, array&lt;Byte&gt;^ IV)\n    {\n        // Check arguments.\n        if (!plainText || plainText-&gt;Length &lt;= 0)\n            throw gcnew ArgumentNullException(&quot;plainText&quot;);\n        if (!Key || Key-&gt;Length &lt;= 0)\n            throw gcnew ArgumentNullException(&quot;Key&quot;);\n        if (!IV  || IV-&gt;Length &lt;= 0)\n            throw gcnew ArgumentNullException(&quot;IV&quot;);\n\n        // Declare the streams used\n        // to encrypt to an in memory\n        // array of bytes.\n\t\tMemoryStream^   msEncrypt;\n        CryptoStream^   csEncrypt;\n        StreamWriter^   swEncrypt;\n\n        // Declare the RijndaelManaged object\n        // used to encrypt the data.\n        RijndaelManaged^ aesAlg;\n\n        try\n        {\n            // Create a RijndaelManaged object\n            // with the specified key and IV.\n            aesAlg = gcnew RijndaelManaged();\n\t\t\taesAlg-&gt;Padding = PaddingMode::PKCS7;\n            aesAlg-&gt;Key = Key;\n            aesAlg-&gt;IV = IV;\n\n            // Create an encryptor to perform the stream transform.\n            ICryptoTransform^ encryptor = aesAlg-&gt;CreateEncryptor(aesAlg-&gt;Key, aesAlg-&gt;IV);\n\n            // Create the streams used for encryption.\n            msEncrypt = gcnew MemoryStream();\n\t\t\tcsEncrypt = gcnew CryptoStream(msEncrypt, encryptor, CryptoStreamMode::Write);\n            swEncrypt = gcnew StreamWriter(csEncrypt);\n\n            //Write all data to the stream.\n            swEncrypt-&gt;Write(plainText);\n\t\t\tswEncrypt-&gt;Flush();\n\t\t\tcsEncrypt-&gt;FlushFinalBlock();\n\t\t\tmsEncrypt-&gt;Flush();\n        }\n        finally\n        {\n            // Clean things up.\n\n            // Close the streams.\n            if(swEncrypt)\n                swEncrypt-&gt;Close();\n            if (csEncrypt)\n                csEncrypt-&gt;Close();\n\n\n            // Clear the RijndaelManaged object.\n            if (aesAlg)\n                aesAlg-&gt;Clear();\n        }\n\n        // Return the encrypted bytes from the memory stream.\n        return msEncrypt-&gt;ToArray();\n    }\n\n    static String^ decryptStringFromBytes_AES(array&lt;Byte&gt;^ cipherText, array&lt;Byte&gt;^ Key, array&lt;Byte&gt;^ IV)\n    {\n        // Check arguments.\n        if (!cipherText || cipherText-&gt;Length &lt;= 0)\n            throw gcnew ArgumentNullException(&quot;cipherText&quot;);\n        if (!Key || Key-&gt;Length &lt;= 0)\n            throw gcnew ArgumentNullException(&quot;Key&quot;);\n        if (!IV || IV-&gt;Length &lt;= 0)\n            throw gcnew ArgumentNullException(&quot;IV&quot;);\n\n        // TDeclare the streams used\n        // to decrypt to an in memory\n        // array of bytes.\n        MemoryStream^ msDecrypt;\n        CryptoStream^ csDecrypt;\n        StreamReader^ srDecrypt;\n\n        // Declare the RijndaelManaged object\n        // used to decrypt the data.\n        RijndaelManaged^ aesAlg;\n\n        // Declare the string used to hold\n        // the decrypted text.\n        String^ plaintext;\n\n        try\n        {\n            // Create a RijndaelManaged object\n            // with the specified key and IV.\n            aesAlg = gcnew RijndaelManaged();\n\t\t\taesAlg-&gt;Padding = PaddingMode::PKCS7;\n            aesAlg-&gt;Key = Key;\n            aesAlg-&gt;IV = IV;\n\n            // Create a decrytor to perform the stream transform.\n\t\t\tICryptoTransform^ decryptor = aesAlg-&gt;CreateDecryptor(aesAlg-&gt;Key, aesAlg-&gt;IV);\n\n            // Create the streams used for decryption.\n            msDecrypt = gcnew MemoryStream(cipherText);\n\t\t\tcsDecrypt = gcnew CryptoStream(msDecrypt, decryptor, CryptoStreamMode::Read);\n            srDecrypt = gcnew StreamReader(csDecrypt);\n\n            // Read the decrypted bytes from the decrypting stream\n            // and place them in a string.\n            plaintext = srDecrypt-&gt;ReadToEnd();\n        }\n        finally\n        {\n            // Clean things up.\n\n            // Close the streams.\n            if (srDecrypt)\n                srDecrypt-&gt;Close();\n            if (csDecrypt)\n                csDecrypt-&gt;Close();\n            if (msDecrypt)\n                msDecrypt-&gt;Close();\n\n            // Clear the RijndaelManaged object.\n            if (aesAlg)\n                aesAlg-&gt;Clear();\n        }\n\n        return plaintext;\n    }\n};\n\nint main()\n{\n    try\n    {\n        String^ original = &quot;Here is some data to encrypt!&quot;;\n\n        // Create a new instance of the RijndaelManaged\n        // class.  This generates a new key and initialization\n        // vector (IV).\n        RijndaelManaged^ myRijndael = gcnew RijndaelManaged();\n\n        // Encrypt the string to an array of bytes.\n\t\tarray&lt;Byte&gt;^ encrypted = RijndaelMemoryExample::encryptStringToBytes_AES(original, myRijndael-&gt;Key, myRijndael-&gt;IV);\n\n        // Decrypt the bytes to a string.\n        String^ roundtrip = RijndaelMemoryExample::decryptStringFromBytes_AES(encrypted, myRijndael-&gt;Key, myRijndael-&gt;IV);\n\n        //Display the original data and the decrypted data.\n\t\tConsole::WriteLine(&quot;Original:   {0}&quot;, original);\n\t\tConsole::WriteLine(&quot;Round Trip: {0}&quot;, roundtrip);\n    }\n    catch (Exception^ e)\n    {\n\t\tConsole::WriteLine(&quot;Error: {0}&quot;, e-&gt;Message);\n    }\n\n\treturn 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"RijndaelManaged Example#1\">Imports System\nImports System.IO\nImports System.Security.Cryptography\n\n\n\nClass RijndaelExample\n\n    Public Shared Sub Main()\n        Try\n\n            Dim original As String = &quot;Here is some data to encrypt!&quot;\n\n            &#39; Create a new instance of the RijndaelManaged\n            &#39; class.  This generates a new key and initialization \n            &#39; vector (IV).\n            Using myRijndael As New RijndaelManaged()\n            \n            \tmyRijndael.GenerateKey()\n                myRijndael.GenerateIV()\n\n                &#39; Encrypt the string to an array of bytes.\n                Dim encrypted As Byte() = EncryptStringToBytes(original, myRijndael.Key, myRijndael.IV)\n\n                &#39; Decrypt the bytes to a string.\n                Dim roundtrip As String = DecryptStringFromBytes(encrypted, myRijndael.Key, myRijndael.IV)\n\n                &#39;Display the original data and the decrypted data.\n                Console.WriteLine(&quot;Original:   {0}&quot;, original)\n                Console.WriteLine(&quot;Round Trip: {0}&quot;, roundtrip)\n            End Using\n        Catch e As Exception\n            Console.WriteLine(&quot;Error: {0}&quot;, e.Message)\n        End Try\n\n    End Sub &#39;Main\n\n    Shared Function EncryptStringToBytes(ByVal plainText As String, ByVal Key() As Byte, ByVal IV() As Byte) As Byte()\n        &#39; Check arguments.\n        If plainText Is Nothing OrElse plainText.Length &lt;= 0 Then\n            Throw New ArgumentNullException(&quot;plainText&quot;)\n        End If\n        If Key Is Nothing OrElse Key.Length &lt;= 0 Then\n            Throw New ArgumentNullException(&quot;Key&quot;)\n        End If\n        If IV Is Nothing OrElse IV.Length &lt;= 0 Then\n            Throw New ArgumentNullException(&quot;IV&quot;)\n        End If\n        Dim encrypted() As Byte\n        &#39; Create an RijndaelManaged object\n        &#39; with the specified key and IV.\n        Using rijAlg As New RijndaelManaged()\n\n            rijAlg.Key = Key\n            rijAlg.IV = IV\n\n            &#39; Create a decrytor to perform the stream transform.\n            Dim encryptor As ICryptoTransform = rijAlg.CreateEncryptor(rijAlg.Key, rijAlg.IV)\n            &#39; Create the streams used for encryption.\n            Using msEncrypt As New MemoryStream()\n                Using csEncrypt As New CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write)\n                    Using swEncrypt As New StreamWriter(csEncrypt)\n\n                        &#39;Write all data to the stream.\n                        swEncrypt.Write(plainText)\n                    End Using\n                    encrypted = msEncrypt.ToArray()\n                End Using\n            End Using\n        End Using\n\n        &#39; Return the encrypted bytes from the memory stream.\n        Return encrypted\n\n    End Function &#39;EncryptStringToBytes\n\n    Shared Function DecryptStringFromBytes(ByVal cipherText() As Byte, ByVal Key() As Byte, ByVal IV() As Byte) As String\n        &#39; Check arguments.\n        If cipherText Is Nothing OrElse cipherText.Length &lt;= 0 Then\n            Throw New ArgumentNullException(&quot;cipherText&quot;)\n        End If\n        If Key Is Nothing OrElse Key.Length &lt;= 0 Then\n            Throw New ArgumentNullException(&quot;Key&quot;)\n        End If\n        If IV Is Nothing OrElse IV.Length &lt;= 0 Then\n            Throw New ArgumentNullException(&quot;IV&quot;)\n        End If\n        &#39; Declare the string used to hold\n        &#39; the decrypted text.\n        Dim plaintext As String = Nothing\n\n        &#39; Create an RijndaelManaged object\n        &#39; with the specified key and IV.\n        Using rijAlg As New RijndaelManaged\n            rijAlg.Key = Key\n            rijAlg.IV = IV\n\n            &#39; Create a decrytor to perform the stream transform.\n            Dim decryptor As ICryptoTransform = rijAlg.CreateDecryptor(rijAlg.Key, rijAlg.IV)\n\n            &#39; Create the streams used for decryption.\n            Using msDecrypt As New MemoryStream(cipherText)\n\n                Using csDecrypt As New CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read)\n\n                    Using srDecrypt As New StreamReader(csDecrypt)\n\n\n                        &#39; Read the decrypted bytes from the decrypting stream\n                        &#39; and place them in a string.\n                        plaintext = srDecrypt.ReadToEnd()\n                    End Using\n                End Using\n            End Using\n        End Using\n\n        Return plaintext\n\n    End Function &#39;DecryptStringFromBytes \nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RijndaelManaged_CreateEncryptor_System_Byte___System_Byte___\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RijndaelManaged_CreateEncryptor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateEncryptor(Byte[],Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a symmetric <a class=\"xref\" href=\"system.security.cryptography.rijndael\" data-linktype=\"relative-path\">Rijndael</a> encryptor object with the specified <span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.Key*</span> and initialization vector (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.IV*</span>).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Security.Cryptography.ICryptoTransform CreateEncryptor (byte[] rgbKey, byte[] rgbIV);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgbKey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The secret key to be used for the symmetric algorithm. The key size must be 128, 192, or 256 bits.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgbIV</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The IV to be used for the symmetric algorithm.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.icryptotransform\" data-linktype=\"relative-path\">ICryptoTransform</a></div>\r\n                  </div>\r\n                  <p>A symmetric <a class=\"xref\" href=\"system.security.cryptography.rijndael\" data-linktype=\"relative-path\">Rijndael</a> encryptor object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>rgbKey</code> parameter is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>rgbIV</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The value of the <span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.Mode*</span> property is not <a class=\"xref\" href=\"system.security.cryptography.ciphermode\" data-linktype=\"relative-path\">CipherMode</a>, <a class=\"xref\" href=\"system.security.cryptography.ciphermode\" data-linktype=\"relative-path\">CipherMode</a>, or <a class=\"xref\" href=\"system.security.cryptography.ciphermode\" data-linktype=\"relative-path\">CipherMode</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.security.cryptography.rijndaelmanaged#System_Security_Cryptography_RijndaelManaged_CreateDecryptor_\" data-linktype=\"relative-path\">CreateDecryptor</a> overload with the same signature to decrypt the result of this method.  </p>\n<p> The <code>rgbkey</code> size must be 128, 192, or 256 bits.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code examples demonstrates how to encrypt a message using the <code>CreateEncryptor</code> method.  </p>\n<pre><code class=\"lang-cs\" name=\"RijndaelManaged Example#1\">using System;\nusing System.IO;\nusing System.Security.Cryptography;\n\nnamespace RijndaelManaged_Example\n{\n    class RijndaelExample\n    {\n        public static void Main()\n        {\n            try\n            {\n\n                string original = &quot;Here is some data to encrypt!&quot;;\n\n                // Create a new instance of the RijndaelManaged\n                // class.  This generates a new key and initialization \n                // vector (IV).\n                using (RijndaelManaged myRijndael = new RijndaelManaged())\n                {\n\n\t\t\t\t\tmyRijndael.GenerateKey();\n                \tmyRijndael.GenerateIV();\n                    // Encrypt the string to an array of bytes.\n                    byte[] encrypted = EncryptStringToBytes(original, myRijndael.Key, myRijndael.IV);\n\n                    // Decrypt the bytes to a string.\n                    string roundtrip = DecryptStringFromBytes(encrypted, myRijndael.Key, myRijndael.IV);\n\n                    //Display the original data and the decrypted data.\n                    Console.WriteLine(&quot;Original:   {0}&quot;, original);\n                    Console.WriteLine(&quot;Round Trip: {0}&quot;, roundtrip);\n                }\n\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(&quot;Error: {0}&quot;, e.Message);\n            }\n        }\n        static byte[] EncryptStringToBytes(string plainText, byte[] Key, byte[] IV)\n        {\n            // Check arguments.\n            if (plainText == null || plainText.Length &lt;= 0)\n                throw new ArgumentNullException(&quot;plainText&quot;);\n            if (Key == null || Key.Length &lt;= 0)\n                throw new ArgumentNullException(&quot;Key&quot;);\n            if (IV == null || IV.Length &lt;= 0)\n                throw new ArgumentNullException(&quot;IV&quot;);\n            byte[] encrypted;\n            // Create an RijndaelManaged object\n            // with the specified key and IV.\n            using (RijndaelManaged rijAlg = new RijndaelManaged())\n            {\n                rijAlg.Key = Key;\n                rijAlg.IV = IV;\n\n                // Create a decrytor to perform the stream transform.\n                ICryptoTransform encryptor = rijAlg.CreateEncryptor(rijAlg.Key, rijAlg.IV);\n\n                // Create the streams used for encryption.\n                using (MemoryStream msEncrypt = new MemoryStream())\n                {\n                    using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))\n                    {\n                        using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))\n                        {\n\n                            //Write all data to the stream.\n                            swEncrypt.Write(plainText);\n                        }\n                        encrypted = msEncrypt.ToArray();\n                    }\n                }\n            }\n\n\n            // Return the encrypted bytes from the memory stream.\n            return encrypted;\n\n        }\n\n        static string DecryptStringFromBytes(byte[] cipherText, byte[] Key, byte[] IV)\n        {\n            // Check arguments.\n            if (cipherText == null || cipherText.Length &lt;= 0)\n                throw new ArgumentNullException(&quot;cipherText&quot;);\n            if (Key == null || Key.Length &lt;= 0)\n                throw new ArgumentNullException(&quot;Key&quot;);\n            if (IV == null || IV.Length &lt;= 0)\n                throw new ArgumentNullException(&quot;IV&quot;);\n\n            // Declare the string used to hold\n            // the decrypted text.\n            string plaintext = null;\n\n            // Create an RijndaelManaged object\n            // with the specified key and IV.\n            using (RijndaelManaged rijAlg = new RijndaelManaged())\n            {\n                rijAlg.Key = Key;\n                rijAlg.IV = IV;\n\n                // Create a decrytor to perform the stream transform.\n                ICryptoTransform decryptor = rijAlg.CreateDecryptor(rijAlg.Key, rijAlg.IV);\n\n                // Create the streams used for decryption.\n                using (MemoryStream msDecrypt = new MemoryStream(cipherText))\n                {\n                    using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))\n                    {\n                        using (StreamReader srDecrypt = new StreamReader(csDecrypt))\n                        {\n\n                            // Read the decrypted bytes from the decrypting stream\n                            // and place them in a string.\n                            plaintext = srDecrypt.ReadToEnd();\n                        }\n                    }\n                }\n\n            }\n\n            return plaintext;\n\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"RijndaelManaged Example#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Security::Cryptography;\n\n\nclass RijndaelMemoryExample\n{\npublic:\n    static array&lt;Byte&gt;^ encryptStringToBytes_AES(String^ plainText, array&lt;Byte&gt;^ Key, array&lt;Byte&gt;^ IV)\n    {\n        // Check arguments.\n        if (!plainText || plainText-&gt;Length &lt;= 0)\n            throw gcnew ArgumentNullException(&quot;plainText&quot;);\n        if (!Key || Key-&gt;Length &lt;= 0)\n            throw gcnew ArgumentNullException(&quot;Key&quot;);\n        if (!IV  || IV-&gt;Length &lt;= 0)\n            throw gcnew ArgumentNullException(&quot;IV&quot;);\n\n        // Declare the streams used\n        // to encrypt to an in memory\n        // array of bytes.\n\t\tMemoryStream^   msEncrypt;\n        CryptoStream^   csEncrypt;\n        StreamWriter^   swEncrypt;\n\n        // Declare the RijndaelManaged object\n        // used to encrypt the data.\n        RijndaelManaged^ aesAlg;\n\n        try\n        {\n            // Create a RijndaelManaged object\n            // with the specified key and IV.\n            aesAlg = gcnew RijndaelManaged();\n\t\t\taesAlg-&gt;Padding = PaddingMode::PKCS7;\n            aesAlg-&gt;Key = Key;\n            aesAlg-&gt;IV = IV;\n\n            // Create an encryptor to perform the stream transform.\n            ICryptoTransform^ encryptor = aesAlg-&gt;CreateEncryptor(aesAlg-&gt;Key, aesAlg-&gt;IV);\n\n            // Create the streams used for encryption.\n            msEncrypt = gcnew MemoryStream();\n\t\t\tcsEncrypt = gcnew CryptoStream(msEncrypt, encryptor, CryptoStreamMode::Write);\n            swEncrypt = gcnew StreamWriter(csEncrypt);\n\n            //Write all data to the stream.\n            swEncrypt-&gt;Write(plainText);\n\t\t\tswEncrypt-&gt;Flush();\n\t\t\tcsEncrypt-&gt;FlushFinalBlock();\n\t\t\tmsEncrypt-&gt;Flush();\n        }\n        finally\n        {\n            // Clean things up.\n\n            // Close the streams.\n            if(swEncrypt)\n                swEncrypt-&gt;Close();\n            if (csEncrypt)\n                csEncrypt-&gt;Close();\n\n\n            // Clear the RijndaelManaged object.\n            if (aesAlg)\n                aesAlg-&gt;Clear();\n        }\n\n        // Return the encrypted bytes from the memory stream.\n        return msEncrypt-&gt;ToArray();\n    }\n\n    static String^ decryptStringFromBytes_AES(array&lt;Byte&gt;^ cipherText, array&lt;Byte&gt;^ Key, array&lt;Byte&gt;^ IV)\n    {\n        // Check arguments.\n        if (!cipherText || cipherText-&gt;Length &lt;= 0)\n            throw gcnew ArgumentNullException(&quot;cipherText&quot;);\n        if (!Key || Key-&gt;Length &lt;= 0)\n            throw gcnew ArgumentNullException(&quot;Key&quot;);\n        if (!IV || IV-&gt;Length &lt;= 0)\n            throw gcnew ArgumentNullException(&quot;IV&quot;);\n\n        // TDeclare the streams used\n        // to decrypt to an in memory\n        // array of bytes.\n        MemoryStream^ msDecrypt;\n        CryptoStream^ csDecrypt;\n        StreamReader^ srDecrypt;\n\n        // Declare the RijndaelManaged object\n        // used to decrypt the data.\n        RijndaelManaged^ aesAlg;\n\n        // Declare the string used to hold\n        // the decrypted text.\n        String^ plaintext;\n\n        try\n        {\n            // Create a RijndaelManaged object\n            // with the specified key and IV.\n            aesAlg = gcnew RijndaelManaged();\n\t\t\taesAlg-&gt;Padding = PaddingMode::PKCS7;\n            aesAlg-&gt;Key = Key;\n            aesAlg-&gt;IV = IV;\n\n            // Create a decrytor to perform the stream transform.\n\t\t\tICryptoTransform^ decryptor = aesAlg-&gt;CreateDecryptor(aesAlg-&gt;Key, aesAlg-&gt;IV);\n\n            // Create the streams used for decryption.\n            msDecrypt = gcnew MemoryStream(cipherText);\n\t\t\tcsDecrypt = gcnew CryptoStream(msDecrypt, decryptor, CryptoStreamMode::Read);\n            srDecrypt = gcnew StreamReader(csDecrypt);\n\n            // Read the decrypted bytes from the decrypting stream\n            // and place them in a string.\n            plaintext = srDecrypt-&gt;ReadToEnd();\n        }\n        finally\n        {\n            // Clean things up.\n\n            // Close the streams.\n            if (srDecrypt)\n                srDecrypt-&gt;Close();\n            if (csDecrypt)\n                csDecrypt-&gt;Close();\n            if (msDecrypt)\n                msDecrypt-&gt;Close();\n\n            // Clear the RijndaelManaged object.\n            if (aesAlg)\n                aesAlg-&gt;Clear();\n        }\n\n        return plaintext;\n    }\n};\n\nint main()\n{\n    try\n    {\n        String^ original = &quot;Here is some data to encrypt!&quot;;\n\n        // Create a new instance of the RijndaelManaged\n        // class.  This generates a new key and initialization\n        // vector (IV).\n        RijndaelManaged^ myRijndael = gcnew RijndaelManaged();\n\n        // Encrypt the string to an array of bytes.\n\t\tarray&lt;Byte&gt;^ encrypted = RijndaelMemoryExample::encryptStringToBytes_AES(original, myRijndael-&gt;Key, myRijndael-&gt;IV);\n\n        // Decrypt the bytes to a string.\n        String^ roundtrip = RijndaelMemoryExample::decryptStringFromBytes_AES(encrypted, myRijndael-&gt;Key, myRijndael-&gt;IV);\n\n        //Display the original data and the decrypted data.\n\t\tConsole::WriteLine(&quot;Original:   {0}&quot;, original);\n\t\tConsole::WriteLine(&quot;Round Trip: {0}&quot;, roundtrip);\n    }\n    catch (Exception^ e)\n    {\n\t\tConsole::WriteLine(&quot;Error: {0}&quot;, e-&gt;Message);\n    }\n\n\treturn 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"RijndaelManaged Example#1\">Imports System\nImports System.IO\nImports System.Security.Cryptography\n\n\n\nClass RijndaelExample\n\n    Public Shared Sub Main()\n        Try\n\n            Dim original As String = &quot;Here is some data to encrypt!&quot;\n\n            &#39; Create a new instance of the RijndaelManaged\n            &#39; class.  This generates a new key and initialization \n            &#39; vector (IV).\n            Using myRijndael As New RijndaelManaged()\n            \n            \tmyRijndael.GenerateKey()\n                myRijndael.GenerateIV()\n\n                &#39; Encrypt the string to an array of bytes.\n                Dim encrypted As Byte() = EncryptStringToBytes(original, myRijndael.Key, myRijndael.IV)\n\n                &#39; Decrypt the bytes to a string.\n                Dim roundtrip As String = DecryptStringFromBytes(encrypted, myRijndael.Key, myRijndael.IV)\n\n                &#39;Display the original data and the decrypted data.\n                Console.WriteLine(&quot;Original:   {0}&quot;, original)\n                Console.WriteLine(&quot;Round Trip: {0}&quot;, roundtrip)\n            End Using\n        Catch e As Exception\n            Console.WriteLine(&quot;Error: {0}&quot;, e.Message)\n        End Try\n\n    End Sub &#39;Main\n\n    Shared Function EncryptStringToBytes(ByVal plainText As String, ByVal Key() As Byte, ByVal IV() As Byte) As Byte()\n        &#39; Check arguments.\n        If plainText Is Nothing OrElse plainText.Length &lt;= 0 Then\n            Throw New ArgumentNullException(&quot;plainText&quot;)\n        End If\n        If Key Is Nothing OrElse Key.Length &lt;= 0 Then\n            Throw New ArgumentNullException(&quot;Key&quot;)\n        End If\n        If IV Is Nothing OrElse IV.Length &lt;= 0 Then\n            Throw New ArgumentNullException(&quot;IV&quot;)\n        End If\n        Dim encrypted() As Byte\n        &#39; Create an RijndaelManaged object\n        &#39; with the specified key and IV.\n        Using rijAlg As New RijndaelManaged()\n\n            rijAlg.Key = Key\n            rijAlg.IV = IV\n\n            &#39; Create a decrytor to perform the stream transform.\n            Dim encryptor As ICryptoTransform = rijAlg.CreateEncryptor(rijAlg.Key, rijAlg.IV)\n            &#39; Create the streams used for encryption.\n            Using msEncrypt As New MemoryStream()\n                Using csEncrypt As New CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write)\n                    Using swEncrypt As New StreamWriter(csEncrypt)\n\n                        &#39;Write all data to the stream.\n                        swEncrypt.Write(plainText)\n                    End Using\n                    encrypted = msEncrypt.ToArray()\n                End Using\n            End Using\n        End Using\n\n        &#39; Return the encrypted bytes from the memory stream.\n        Return encrypted\n\n    End Function &#39;EncryptStringToBytes\n\n    Shared Function DecryptStringFromBytes(ByVal cipherText() As Byte, ByVal Key() As Byte, ByVal IV() As Byte) As String\n        &#39; Check arguments.\n        If cipherText Is Nothing OrElse cipherText.Length &lt;= 0 Then\n            Throw New ArgumentNullException(&quot;cipherText&quot;)\n        End If\n        If Key Is Nothing OrElse Key.Length &lt;= 0 Then\n            Throw New ArgumentNullException(&quot;Key&quot;)\n        End If\n        If IV Is Nothing OrElse IV.Length &lt;= 0 Then\n            Throw New ArgumentNullException(&quot;IV&quot;)\n        End If\n        &#39; Declare the string used to hold\n        &#39; the decrypted text.\n        Dim plaintext As String = Nothing\n\n        &#39; Create an RijndaelManaged object\n        &#39; with the specified key and IV.\n        Using rijAlg As New RijndaelManaged\n            rijAlg.Key = Key\n            rijAlg.IV = IV\n\n            &#39; Create a decrytor to perform the stream transform.\n            Dim decryptor As ICryptoTransform = rijAlg.CreateDecryptor(rijAlg.Key, rijAlg.IV)\n\n            &#39; Create the streams used for decryption.\n            Using msDecrypt As New MemoryStream(cipherText)\n\n                Using csDecrypt As New CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read)\n\n                    Using srDecrypt As New StreamReader(csDecrypt)\n\n\n                        &#39; Read the decrypted bytes from the decrypting stream\n                        &#39; and place them in a string.\n                        plaintext = srDecrypt.ReadToEnd()\n                    End Using\n                End Using\n            End Using\n        End Using\n\n        Return plaintext\n\n    End Function &#39;DecryptStringFromBytes \nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RijndaelManaged_GenerateIV\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RijndaelManaged_GenerateIV_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GenerateIV()</div>        \r\n          </div>\r\n    \r\n            <p>Generates a random initialization vector (<span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.IV*</span>) to be used for the algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void GenerateIV ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to generate a random IV when none is specified.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"RijndaelManaged Example#1\">using System;\nusing System.IO;\nusing System.Security.Cryptography;\n\nnamespace RijndaelManaged_Example\n{\n    class RijndaelExample\n    {\n        public static void Main()\n        {\n            try\n            {\n\n                string original = &quot;Here is some data to encrypt!&quot;;\n\n                // Create a new instance of the RijndaelManaged\n                // class.  This generates a new key and initialization \n                // vector (IV).\n                using (RijndaelManaged myRijndael = new RijndaelManaged())\n                {\n\n\t\t\t\t\tmyRijndael.GenerateKey();\n                \tmyRijndael.GenerateIV();\n                    // Encrypt the string to an array of bytes.\n                    byte[] encrypted = EncryptStringToBytes(original, myRijndael.Key, myRijndael.IV);\n\n                    // Decrypt the bytes to a string.\n                    string roundtrip = DecryptStringFromBytes(encrypted, myRijndael.Key, myRijndael.IV);\n\n                    //Display the original data and the decrypted data.\n                    Console.WriteLine(&quot;Original:   {0}&quot;, original);\n                    Console.WriteLine(&quot;Round Trip: {0}&quot;, roundtrip);\n                }\n\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(&quot;Error: {0}&quot;, e.Message);\n            }\n        }\n        static byte[] EncryptStringToBytes(string plainText, byte[] Key, byte[] IV)\n        {\n            // Check arguments.\n            if (plainText == null || plainText.Length &lt;= 0)\n                throw new ArgumentNullException(&quot;plainText&quot;);\n            if (Key == null || Key.Length &lt;= 0)\n                throw new ArgumentNullException(&quot;Key&quot;);\n            if (IV == null || IV.Length &lt;= 0)\n                throw new ArgumentNullException(&quot;IV&quot;);\n            byte[] encrypted;\n            // Create an RijndaelManaged object\n            // with the specified key and IV.\n            using (RijndaelManaged rijAlg = new RijndaelManaged())\n            {\n                rijAlg.Key = Key;\n                rijAlg.IV = IV;\n\n                // Create a decrytor to perform the stream transform.\n                ICryptoTransform encryptor = rijAlg.CreateEncryptor(rijAlg.Key, rijAlg.IV);\n\n                // Create the streams used for encryption.\n                using (MemoryStream msEncrypt = new MemoryStream())\n                {\n                    using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))\n                    {\n                        using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))\n                        {\n\n                            //Write all data to the stream.\n                            swEncrypt.Write(plainText);\n                        }\n                        encrypted = msEncrypt.ToArray();\n                    }\n                }\n            }\n\n\n            // Return the encrypted bytes from the memory stream.\n            return encrypted;\n\n        }\n\n        static string DecryptStringFromBytes(byte[] cipherText, byte[] Key, byte[] IV)\n        {\n            // Check arguments.\n            if (cipherText == null || cipherText.Length &lt;= 0)\n                throw new ArgumentNullException(&quot;cipherText&quot;);\n            if (Key == null || Key.Length &lt;= 0)\n                throw new ArgumentNullException(&quot;Key&quot;);\n            if (IV == null || IV.Length &lt;= 0)\n                throw new ArgumentNullException(&quot;IV&quot;);\n\n            // Declare the string used to hold\n            // the decrypted text.\n            string plaintext = null;\n\n            // Create an RijndaelManaged object\n            // with the specified key and IV.\n            using (RijndaelManaged rijAlg = new RijndaelManaged())\n            {\n                rijAlg.Key = Key;\n                rijAlg.IV = IV;\n\n                // Create a decrytor to perform the stream transform.\n                ICryptoTransform decryptor = rijAlg.CreateDecryptor(rijAlg.Key, rijAlg.IV);\n\n                // Create the streams used for decryption.\n                using (MemoryStream msDecrypt = new MemoryStream(cipherText))\n                {\n                    using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))\n                    {\n                        using (StreamReader srDecrypt = new StreamReader(csDecrypt))\n                        {\n\n                            // Read the decrypted bytes from the decrypting stream\n                            // and place them in a string.\n                            plaintext = srDecrypt.ReadToEnd();\n                        }\n                    }\n                }\n\n            }\n\n            return plaintext;\n\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"RijndaelManaged Example#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Security::Cryptography;\n\n\nclass RijndaelMemoryExample\n{\npublic:\n    static array&lt;Byte&gt;^ encryptStringToBytes_AES(String^ plainText, array&lt;Byte&gt;^ Key, array&lt;Byte&gt;^ IV)\n    {\n        // Check arguments.\n        if (!plainText || plainText-&gt;Length &lt;= 0)\n            throw gcnew ArgumentNullException(&quot;plainText&quot;);\n        if (!Key || Key-&gt;Length &lt;= 0)\n            throw gcnew ArgumentNullException(&quot;Key&quot;);\n        if (!IV  || IV-&gt;Length &lt;= 0)\n            throw gcnew ArgumentNullException(&quot;IV&quot;);\n\n        // Declare the streams used\n        // to encrypt to an in memory\n        // array of bytes.\n\t\tMemoryStream^   msEncrypt;\n        CryptoStream^   csEncrypt;\n        StreamWriter^   swEncrypt;\n\n        // Declare the RijndaelManaged object\n        // used to encrypt the data.\n        RijndaelManaged^ aesAlg;\n\n        try\n        {\n            // Create a RijndaelManaged object\n            // with the specified key and IV.\n            aesAlg = gcnew RijndaelManaged();\n\t\t\taesAlg-&gt;Padding = PaddingMode::PKCS7;\n            aesAlg-&gt;Key = Key;\n            aesAlg-&gt;IV = IV;\n\n            // Create an encryptor to perform the stream transform.\n            ICryptoTransform^ encryptor = aesAlg-&gt;CreateEncryptor(aesAlg-&gt;Key, aesAlg-&gt;IV);\n\n            // Create the streams used for encryption.\n            msEncrypt = gcnew MemoryStream();\n\t\t\tcsEncrypt = gcnew CryptoStream(msEncrypt, encryptor, CryptoStreamMode::Write);\n            swEncrypt = gcnew StreamWriter(csEncrypt);\n\n            //Write all data to the stream.\n            swEncrypt-&gt;Write(plainText);\n\t\t\tswEncrypt-&gt;Flush();\n\t\t\tcsEncrypt-&gt;FlushFinalBlock();\n\t\t\tmsEncrypt-&gt;Flush();\n        }\n        finally\n        {\n            // Clean things up.\n\n            // Close the streams.\n            if(swEncrypt)\n                swEncrypt-&gt;Close();\n            if (csEncrypt)\n                csEncrypt-&gt;Close();\n\n\n            // Clear the RijndaelManaged object.\n            if (aesAlg)\n                aesAlg-&gt;Clear();\n        }\n\n        // Return the encrypted bytes from the memory stream.\n        return msEncrypt-&gt;ToArray();\n    }\n\n    static String^ decryptStringFromBytes_AES(array&lt;Byte&gt;^ cipherText, array&lt;Byte&gt;^ Key, array&lt;Byte&gt;^ IV)\n    {\n        // Check arguments.\n        if (!cipherText || cipherText-&gt;Length &lt;= 0)\n            throw gcnew ArgumentNullException(&quot;cipherText&quot;);\n        if (!Key || Key-&gt;Length &lt;= 0)\n            throw gcnew ArgumentNullException(&quot;Key&quot;);\n        if (!IV || IV-&gt;Length &lt;= 0)\n            throw gcnew ArgumentNullException(&quot;IV&quot;);\n\n        // TDeclare the streams used\n        // to decrypt to an in memory\n        // array of bytes.\n        MemoryStream^ msDecrypt;\n        CryptoStream^ csDecrypt;\n        StreamReader^ srDecrypt;\n\n        // Declare the RijndaelManaged object\n        // used to decrypt the data.\n        RijndaelManaged^ aesAlg;\n\n        // Declare the string used to hold\n        // the decrypted text.\n        String^ plaintext;\n\n        try\n        {\n            // Create a RijndaelManaged object\n            // with the specified key and IV.\n            aesAlg = gcnew RijndaelManaged();\n\t\t\taesAlg-&gt;Padding = PaddingMode::PKCS7;\n            aesAlg-&gt;Key = Key;\n            aesAlg-&gt;IV = IV;\n\n            // Create a decrytor to perform the stream transform.\n\t\t\tICryptoTransform^ decryptor = aesAlg-&gt;CreateDecryptor(aesAlg-&gt;Key, aesAlg-&gt;IV);\n\n            // Create the streams used for decryption.\n            msDecrypt = gcnew MemoryStream(cipherText);\n\t\t\tcsDecrypt = gcnew CryptoStream(msDecrypt, decryptor, CryptoStreamMode::Read);\n            srDecrypt = gcnew StreamReader(csDecrypt);\n\n            // Read the decrypted bytes from the decrypting stream\n            // and place them in a string.\n            plaintext = srDecrypt-&gt;ReadToEnd();\n        }\n        finally\n        {\n            // Clean things up.\n\n            // Close the streams.\n            if (srDecrypt)\n                srDecrypt-&gt;Close();\n            if (csDecrypt)\n                csDecrypt-&gt;Close();\n            if (msDecrypt)\n                msDecrypt-&gt;Close();\n\n            // Clear the RijndaelManaged object.\n            if (aesAlg)\n                aesAlg-&gt;Clear();\n        }\n\n        return plaintext;\n    }\n};\n\nint main()\n{\n    try\n    {\n        String^ original = &quot;Here is some data to encrypt!&quot;;\n\n        // Create a new instance of the RijndaelManaged\n        // class.  This generates a new key and initialization\n        // vector (IV).\n        RijndaelManaged^ myRijndael = gcnew RijndaelManaged();\n\n        // Encrypt the string to an array of bytes.\n\t\tarray&lt;Byte&gt;^ encrypted = RijndaelMemoryExample::encryptStringToBytes_AES(original, myRijndael-&gt;Key, myRijndael-&gt;IV);\n\n        // Decrypt the bytes to a string.\n        String^ roundtrip = RijndaelMemoryExample::decryptStringFromBytes_AES(encrypted, myRijndael-&gt;Key, myRijndael-&gt;IV);\n\n        //Display the original data and the decrypted data.\n\t\tConsole::WriteLine(&quot;Original:   {0}&quot;, original);\n\t\tConsole::WriteLine(&quot;Round Trip: {0}&quot;, roundtrip);\n    }\n    catch (Exception^ e)\n    {\n\t\tConsole::WriteLine(&quot;Error: {0}&quot;, e-&gt;Message);\n    }\n\n\treturn 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"RijndaelManaged Example#1\">Imports System\nImports System.IO\nImports System.Security.Cryptography\n\n\n\nClass RijndaelExample\n\n    Public Shared Sub Main()\n        Try\n\n            Dim original As String = &quot;Here is some data to encrypt!&quot;\n\n            &#39; Create a new instance of the RijndaelManaged\n            &#39; class.  This generates a new key and initialization \n            &#39; vector (IV).\n            Using myRijndael As New RijndaelManaged()\n            \n            \tmyRijndael.GenerateKey()\n                myRijndael.GenerateIV()\n\n                &#39; Encrypt the string to an array of bytes.\n                Dim encrypted As Byte() = EncryptStringToBytes(original, myRijndael.Key, myRijndael.IV)\n\n                &#39; Decrypt the bytes to a string.\n                Dim roundtrip As String = DecryptStringFromBytes(encrypted, myRijndael.Key, myRijndael.IV)\n\n                &#39;Display the original data and the decrypted data.\n                Console.WriteLine(&quot;Original:   {0}&quot;, original)\n                Console.WriteLine(&quot;Round Trip: {0}&quot;, roundtrip)\n            End Using\n        Catch e As Exception\n            Console.WriteLine(&quot;Error: {0}&quot;, e.Message)\n        End Try\n\n    End Sub &#39;Main\n\n    Shared Function EncryptStringToBytes(ByVal plainText As String, ByVal Key() As Byte, ByVal IV() As Byte) As Byte()\n        &#39; Check arguments.\n        If plainText Is Nothing OrElse plainText.Length &lt;= 0 Then\n            Throw New ArgumentNullException(&quot;plainText&quot;)\n        End If\n        If Key Is Nothing OrElse Key.Length &lt;= 0 Then\n            Throw New ArgumentNullException(&quot;Key&quot;)\n        End If\n        If IV Is Nothing OrElse IV.Length &lt;= 0 Then\n            Throw New ArgumentNullException(&quot;IV&quot;)\n        End If\n        Dim encrypted() As Byte\n        &#39; Create an RijndaelManaged object\n        &#39; with the specified key and IV.\n        Using rijAlg As New RijndaelManaged()\n\n            rijAlg.Key = Key\n            rijAlg.IV = IV\n\n            &#39; Create a decrytor to perform the stream transform.\n            Dim encryptor As ICryptoTransform = rijAlg.CreateEncryptor(rijAlg.Key, rijAlg.IV)\n            &#39; Create the streams used for encryption.\n            Using msEncrypt As New MemoryStream()\n                Using csEncrypt As New CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write)\n                    Using swEncrypt As New StreamWriter(csEncrypt)\n\n                        &#39;Write all data to the stream.\n                        swEncrypt.Write(plainText)\n                    End Using\n                    encrypted = msEncrypt.ToArray()\n                End Using\n            End Using\n        End Using\n\n        &#39; Return the encrypted bytes from the memory stream.\n        Return encrypted\n\n    End Function &#39;EncryptStringToBytes\n\n    Shared Function DecryptStringFromBytes(ByVal cipherText() As Byte, ByVal Key() As Byte, ByVal IV() As Byte) As String\n        &#39; Check arguments.\n        If cipherText Is Nothing OrElse cipherText.Length &lt;= 0 Then\n            Throw New ArgumentNullException(&quot;cipherText&quot;)\n        End If\n        If Key Is Nothing OrElse Key.Length &lt;= 0 Then\n            Throw New ArgumentNullException(&quot;Key&quot;)\n        End If\n        If IV Is Nothing OrElse IV.Length &lt;= 0 Then\n            Throw New ArgumentNullException(&quot;IV&quot;)\n        End If\n        &#39; Declare the string used to hold\n        &#39; the decrypted text.\n        Dim plaintext As String = Nothing\n\n        &#39; Create an RijndaelManaged object\n        &#39; with the specified key and IV.\n        Using rijAlg As New RijndaelManaged\n            rijAlg.Key = Key\n            rijAlg.IV = IV\n\n            &#39; Create a decrytor to perform the stream transform.\n            Dim decryptor As ICryptoTransform = rijAlg.CreateDecryptor(rijAlg.Key, rijAlg.IV)\n\n            &#39; Create the streams used for decryption.\n            Using msDecrypt As New MemoryStream(cipherText)\n\n                Using csDecrypt As New CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read)\n\n                    Using srDecrypt As New StreamReader(csDecrypt)\n\n\n                        &#39; Read the decrypted bytes from the decrypting stream\n                        &#39; and place them in a string.\n                        plaintext = srDecrypt.ReadToEnd()\n                    End Using\n                End Using\n            End Using\n        End Using\n\n        Return plaintext\n\n    End Function &#39;DecryptStringFromBytes \nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_RijndaelManaged_GenerateKey\">\r\n    \r\n            <a id=\"System_Security_Cryptography_RijndaelManaged_GenerateKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GenerateKey()</div>        \r\n          </div>\r\n    \r\n            <p>Generates a random <span class=\"xref\">stem.Security.Cryptography.SymmetricAlgorithm.Key*</span> to be used for the algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void GenerateKey ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to generate a random key when none is specified.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"RijndaelManaged Example#1\">using System;\nusing System.IO;\nusing System.Security.Cryptography;\n\nnamespace RijndaelManaged_Example\n{\n    class RijndaelExample\n    {\n        public static void Main()\n        {\n            try\n            {\n\n                string original = &quot;Here is some data to encrypt!&quot;;\n\n                // Create a new instance of the RijndaelManaged\n                // class.  This generates a new key and initialization \n                // vector (IV).\n                using (RijndaelManaged myRijndael = new RijndaelManaged())\n                {\n\n\t\t\t\t\tmyRijndael.GenerateKey();\n                \tmyRijndael.GenerateIV();\n                    // Encrypt the string to an array of bytes.\n                    byte[] encrypted = EncryptStringToBytes(original, myRijndael.Key, myRijndael.IV);\n\n                    // Decrypt the bytes to a string.\n                    string roundtrip = DecryptStringFromBytes(encrypted, myRijndael.Key, myRijndael.IV);\n\n                    //Display the original data and the decrypted data.\n                    Console.WriteLine(&quot;Original:   {0}&quot;, original);\n                    Console.WriteLine(&quot;Round Trip: {0}&quot;, roundtrip);\n                }\n\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(&quot;Error: {0}&quot;, e.Message);\n            }\n        }\n        static byte[] EncryptStringToBytes(string plainText, byte[] Key, byte[] IV)\n        {\n            // Check arguments.\n            if (plainText == null || plainText.Length &lt;= 0)\n                throw new ArgumentNullException(&quot;plainText&quot;);\n            if (Key == null || Key.Length &lt;= 0)\n                throw new ArgumentNullException(&quot;Key&quot;);\n            if (IV == null || IV.Length &lt;= 0)\n                throw new ArgumentNullException(&quot;IV&quot;);\n            byte[] encrypted;\n            // Create an RijndaelManaged object\n            // with the specified key and IV.\n            using (RijndaelManaged rijAlg = new RijndaelManaged())\n            {\n                rijAlg.Key = Key;\n                rijAlg.IV = IV;\n\n                // Create a decrytor to perform the stream transform.\n                ICryptoTransform encryptor = rijAlg.CreateEncryptor(rijAlg.Key, rijAlg.IV);\n\n                // Create the streams used for encryption.\n                using (MemoryStream msEncrypt = new MemoryStream())\n                {\n                    using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))\n                    {\n                        using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))\n                        {\n\n                            //Write all data to the stream.\n                            swEncrypt.Write(plainText);\n                        }\n                        encrypted = msEncrypt.ToArray();\n                    }\n                }\n            }\n\n\n            // Return the encrypted bytes from the memory stream.\n            return encrypted;\n\n        }\n\n        static string DecryptStringFromBytes(byte[] cipherText, byte[] Key, byte[] IV)\n        {\n            // Check arguments.\n            if (cipherText == null || cipherText.Length &lt;= 0)\n                throw new ArgumentNullException(&quot;cipherText&quot;);\n            if (Key == null || Key.Length &lt;= 0)\n                throw new ArgumentNullException(&quot;Key&quot;);\n            if (IV == null || IV.Length &lt;= 0)\n                throw new ArgumentNullException(&quot;IV&quot;);\n\n            // Declare the string used to hold\n            // the decrypted text.\n            string plaintext = null;\n\n            // Create an RijndaelManaged object\n            // with the specified key and IV.\n            using (RijndaelManaged rijAlg = new RijndaelManaged())\n            {\n                rijAlg.Key = Key;\n                rijAlg.IV = IV;\n\n                // Create a decrytor to perform the stream transform.\n                ICryptoTransform decryptor = rijAlg.CreateDecryptor(rijAlg.Key, rijAlg.IV);\n\n                // Create the streams used for decryption.\n                using (MemoryStream msDecrypt = new MemoryStream(cipherText))\n                {\n                    using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))\n                    {\n                        using (StreamReader srDecrypt = new StreamReader(csDecrypt))\n                        {\n\n                            // Read the decrypted bytes from the decrypting stream\n                            // and place them in a string.\n                            plaintext = srDecrypt.ReadToEnd();\n                        }\n                    }\n                }\n\n            }\n\n            return plaintext;\n\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"RijndaelManaged Example#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Security::Cryptography;\n\n\nclass RijndaelMemoryExample\n{\npublic:\n    static array&lt;Byte&gt;^ encryptStringToBytes_AES(String^ plainText, array&lt;Byte&gt;^ Key, array&lt;Byte&gt;^ IV)\n    {\n        // Check arguments.\n        if (!plainText || plainText-&gt;Length &lt;= 0)\n            throw gcnew ArgumentNullException(&quot;plainText&quot;);\n        if (!Key || Key-&gt;Length &lt;= 0)\n            throw gcnew ArgumentNullException(&quot;Key&quot;);\n        if (!IV  || IV-&gt;Length &lt;= 0)\n            throw gcnew ArgumentNullException(&quot;IV&quot;);\n\n        // Declare the streams used\n        // to encrypt to an in memory\n        // array of bytes.\n\t\tMemoryStream^   msEncrypt;\n        CryptoStream^   csEncrypt;\n        StreamWriter^   swEncrypt;\n\n        // Declare the RijndaelManaged object\n        // used to encrypt the data.\n        RijndaelManaged^ aesAlg;\n\n        try\n        {\n            // Create a RijndaelManaged object\n            // with the specified key and IV.\n            aesAlg = gcnew RijndaelManaged();\n\t\t\taesAlg-&gt;Padding = PaddingMode::PKCS7;\n            aesAlg-&gt;Key = Key;\n            aesAlg-&gt;IV = IV;\n\n            // Create an encryptor to perform the stream transform.\n            ICryptoTransform^ encryptor = aesAlg-&gt;CreateEncryptor(aesAlg-&gt;Key, aesAlg-&gt;IV);\n\n            // Create the streams used for encryption.\n            msEncrypt = gcnew MemoryStream();\n\t\t\tcsEncrypt = gcnew CryptoStream(msEncrypt, encryptor, CryptoStreamMode::Write);\n            swEncrypt = gcnew StreamWriter(csEncrypt);\n\n            //Write all data to the stream.\n            swEncrypt-&gt;Write(plainText);\n\t\t\tswEncrypt-&gt;Flush();\n\t\t\tcsEncrypt-&gt;FlushFinalBlock();\n\t\t\tmsEncrypt-&gt;Flush();\n        }\n        finally\n        {\n            // Clean things up.\n\n            // Close the streams.\n            if(swEncrypt)\n                swEncrypt-&gt;Close();\n            if (csEncrypt)\n                csEncrypt-&gt;Close();\n\n\n            // Clear the RijndaelManaged object.\n            if (aesAlg)\n                aesAlg-&gt;Clear();\n        }\n\n        // Return the encrypted bytes from the memory stream.\n        return msEncrypt-&gt;ToArray();\n    }\n\n    static String^ decryptStringFromBytes_AES(array&lt;Byte&gt;^ cipherText, array&lt;Byte&gt;^ Key, array&lt;Byte&gt;^ IV)\n    {\n        // Check arguments.\n        if (!cipherText || cipherText-&gt;Length &lt;= 0)\n            throw gcnew ArgumentNullException(&quot;cipherText&quot;);\n        if (!Key || Key-&gt;Length &lt;= 0)\n            throw gcnew ArgumentNullException(&quot;Key&quot;);\n        if (!IV || IV-&gt;Length &lt;= 0)\n            throw gcnew ArgumentNullException(&quot;IV&quot;);\n\n        // TDeclare the streams used\n        // to decrypt to an in memory\n        // array of bytes.\n        MemoryStream^ msDecrypt;\n        CryptoStream^ csDecrypt;\n        StreamReader^ srDecrypt;\n\n        // Declare the RijndaelManaged object\n        // used to decrypt the data.\n        RijndaelManaged^ aesAlg;\n\n        // Declare the string used to hold\n        // the decrypted text.\n        String^ plaintext;\n\n        try\n        {\n            // Create a RijndaelManaged object\n            // with the specified key and IV.\n            aesAlg = gcnew RijndaelManaged();\n\t\t\taesAlg-&gt;Padding = PaddingMode::PKCS7;\n            aesAlg-&gt;Key = Key;\n            aesAlg-&gt;IV = IV;\n\n            // Create a decrytor to perform the stream transform.\n\t\t\tICryptoTransform^ decryptor = aesAlg-&gt;CreateDecryptor(aesAlg-&gt;Key, aesAlg-&gt;IV);\n\n            // Create the streams used for decryption.\n            msDecrypt = gcnew MemoryStream(cipherText);\n\t\t\tcsDecrypt = gcnew CryptoStream(msDecrypt, decryptor, CryptoStreamMode::Read);\n            srDecrypt = gcnew StreamReader(csDecrypt);\n\n            // Read the decrypted bytes from the decrypting stream\n            // and place them in a string.\n            plaintext = srDecrypt-&gt;ReadToEnd();\n        }\n        finally\n        {\n            // Clean things up.\n\n            // Close the streams.\n            if (srDecrypt)\n                srDecrypt-&gt;Close();\n            if (csDecrypt)\n                csDecrypt-&gt;Close();\n            if (msDecrypt)\n                msDecrypt-&gt;Close();\n\n            // Clear the RijndaelManaged object.\n            if (aesAlg)\n                aesAlg-&gt;Clear();\n        }\n\n        return plaintext;\n    }\n};\n\nint main()\n{\n    try\n    {\n        String^ original = &quot;Here is some data to encrypt!&quot;;\n\n        // Create a new instance of the RijndaelManaged\n        // class.  This generates a new key and initialization\n        // vector (IV).\n        RijndaelManaged^ myRijndael = gcnew RijndaelManaged();\n\n        // Encrypt the string to an array of bytes.\n\t\tarray&lt;Byte&gt;^ encrypted = RijndaelMemoryExample::encryptStringToBytes_AES(original, myRijndael-&gt;Key, myRijndael-&gt;IV);\n\n        // Decrypt the bytes to a string.\n        String^ roundtrip = RijndaelMemoryExample::decryptStringFromBytes_AES(encrypted, myRijndael-&gt;Key, myRijndael-&gt;IV);\n\n        //Display the original data and the decrypted data.\n\t\tConsole::WriteLine(&quot;Original:   {0}&quot;, original);\n\t\tConsole::WriteLine(&quot;Round Trip: {0}&quot;, roundtrip);\n    }\n    catch (Exception^ e)\n    {\n\t\tConsole::WriteLine(&quot;Error: {0}&quot;, e-&gt;Message);\n    }\n\n\treturn 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"RijndaelManaged Example#1\">Imports System\nImports System.IO\nImports System.Security.Cryptography\n\n\n\nClass RijndaelExample\n\n    Public Shared Sub Main()\n        Try\n\n            Dim original As String = &quot;Here is some data to encrypt!&quot;\n\n            &#39; Create a new instance of the RijndaelManaged\n            &#39; class.  This generates a new key and initialization \n            &#39; vector (IV).\n            Using myRijndael As New RijndaelManaged()\n            \n            \tmyRijndael.GenerateKey()\n                myRijndael.GenerateIV()\n\n                &#39; Encrypt the string to an array of bytes.\n                Dim encrypted As Byte() = EncryptStringToBytes(original, myRijndael.Key, myRijndael.IV)\n\n                &#39; Decrypt the bytes to a string.\n                Dim roundtrip As String = DecryptStringFromBytes(encrypted, myRijndael.Key, myRijndael.IV)\n\n                &#39;Display the original data and the decrypted data.\n                Console.WriteLine(&quot;Original:   {0}&quot;, original)\n                Console.WriteLine(&quot;Round Trip: {0}&quot;, roundtrip)\n            End Using\n        Catch e As Exception\n            Console.WriteLine(&quot;Error: {0}&quot;, e.Message)\n        End Try\n\n    End Sub &#39;Main\n\n    Shared Function EncryptStringToBytes(ByVal plainText As String, ByVal Key() As Byte, ByVal IV() As Byte) As Byte()\n        &#39; Check arguments.\n        If plainText Is Nothing OrElse plainText.Length &lt;= 0 Then\n            Throw New ArgumentNullException(&quot;plainText&quot;)\n        End If\n        If Key Is Nothing OrElse Key.Length &lt;= 0 Then\n            Throw New ArgumentNullException(&quot;Key&quot;)\n        End If\n        If IV Is Nothing OrElse IV.Length &lt;= 0 Then\n            Throw New ArgumentNullException(&quot;IV&quot;)\n        End If\n        Dim encrypted() As Byte\n        &#39; Create an RijndaelManaged object\n        &#39; with the specified key and IV.\n        Using rijAlg As New RijndaelManaged()\n\n            rijAlg.Key = Key\n            rijAlg.IV = IV\n\n            &#39; Create a decrytor to perform the stream transform.\n            Dim encryptor As ICryptoTransform = rijAlg.CreateEncryptor(rijAlg.Key, rijAlg.IV)\n            &#39; Create the streams used for encryption.\n            Using msEncrypt As New MemoryStream()\n                Using csEncrypt As New CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write)\n                    Using swEncrypt As New StreamWriter(csEncrypt)\n\n                        &#39;Write all data to the stream.\n                        swEncrypt.Write(plainText)\n                    End Using\n                    encrypted = msEncrypt.ToArray()\n                End Using\n            End Using\n        End Using\n\n        &#39; Return the encrypted bytes from the memory stream.\n        Return encrypted\n\n    End Function &#39;EncryptStringToBytes\n\n    Shared Function DecryptStringFromBytes(ByVal cipherText() As Byte, ByVal Key() As Byte, ByVal IV() As Byte) As String\n        &#39; Check arguments.\n        If cipherText Is Nothing OrElse cipherText.Length &lt;= 0 Then\n            Throw New ArgumentNullException(&quot;cipherText&quot;)\n        End If\n        If Key Is Nothing OrElse Key.Length &lt;= 0 Then\n            Throw New ArgumentNullException(&quot;Key&quot;)\n        End If\n        If IV Is Nothing OrElse IV.Length &lt;= 0 Then\n            Throw New ArgumentNullException(&quot;IV&quot;)\n        End If\n        &#39; Declare the string used to hold\n        &#39; the decrypted text.\n        Dim plaintext As String = Nothing\n\n        &#39; Create an RijndaelManaged object\n        &#39; with the specified key and IV.\n        Using rijAlg As New RijndaelManaged\n            rijAlg.Key = Key\n            rijAlg.IV = IV\n\n            &#39; Create a decrytor to perform the stream transform.\n            Dim decryptor As ICryptoTransform = rijAlg.CreateDecryptor(rijAlg.Key, rijAlg.IV)\n\n            &#39; Create the streams used for decryption.\n            Using msDecrypt As New MemoryStream(cipherText)\n\n                Using csDecrypt As New CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read)\n\n                    Using srDecrypt As New StreamReader(csDecrypt)\n\n\n                        &#39; Read the decrypted bytes from the decrypting stream\n                        &#39; and place them in a string.\n                        plaintext = srDecrypt.ReadToEnd()\n                    End Using\n                End Using\n            End Using\n        End Using\n\n        Return plaintext\n\n    End Function &#39;DecryptStringFromBytes \nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Cryptography.RijndaelManaged.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.RijndaelManaged.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RijndaelManaged\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RijndaelManaged..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RijndaelManaged.CreateDecryptor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RijndaelManaged.CreateEncryptor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RijndaelManaged.GenerateIV\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.RijndaelManaged.GenerateKey\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"d136879d-09bf-df28-b61a-fde3ba4c58ea\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Accesses the managed version of the  algorithm. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Security.Cryptography/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Cryptography.RijndaelManaged\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Cryptography.RijndaelManaged.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.RijndaelManaged.yml","open_to_public_contributors":true,"api_name":["System.Security.Cryptography.RijndaelManaged","System.Security.Cryptography.RijndaelManaged..ctor","System.Security.Cryptography.RijndaelManaged.CreateDecryptor","System.Security.Cryptography.RijndaelManaged.CreateEncryptor","System.Security.Cryptography.RijndaelManaged.GenerateIV","System.Security.Cryptography.RijndaelManaged.GenerateKey"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Cryptography.RijndaelManaged","System::Security::Cryptography::RijndaelManaged","System.Security.Cryptography.RijndaelManaged.#ctor","System::Security::Cryptography::RijndaelManaged::#ctor","System.Security.Cryptography.RijndaelManaged.CreateDecryptor","System::Security::Cryptography::RijndaelManaged::CreateDecryptor","System.Security.Cryptography.RijndaelManaged.CreateEncryptor","System::Security::Cryptography::RijndaelManaged::CreateEncryptor","System.Security.Cryptography.RijndaelManaged.GenerateIV","System::Security::Cryptography::RijndaelManaged::GenerateIV","System.Security.Cryptography.RijndaelManaged.GenerateKey","System::Security::Cryptography::RijndaelManaged::GenerateKey"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"d136879d-09bf-df28-b61a-fde3ba4c58ea","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Security.Cryptography/RijndaelManaged.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"RijndaelManaged class | Microsoft Docs","_op_ogTitle":"RijndaelManaged class","description":"Accesses the managed version of the  algorithm. This class cannot be inherited.\n","toc_asset_id":"_splitted/System.Security.Cryptography/toc.json","toc_rel":"_splitted/System.Security.Cryptography/toc.json","source_url":"","ms.assetid":"System.Security.Cryptography.RijndaelManaged","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.rijndaelmanaged","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.rijndaelmanaged","fileRelativePath":"System.Security.Cryptography.RijndaelManaged.html"},"themesRelativePathToOutputRoot":"_themes/"}