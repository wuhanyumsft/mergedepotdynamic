{"content":"    \r\n    <h1 id=\"System_Threading_AutoResetEvent\">\r\n      <span class=\"lang-csharp\">AutoResetEvent</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Notifies a waiting thread that an event has occurred. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class AutoResetEvent : System.Threading.EventWaitHandle</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">WaitHandle</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l3\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.eventwaithandle\" data-linktype=\"relative-path\">System.Threading.EventWaitHandle</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l4\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">AutoResetEvent</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.eventwaithandle#System_Threading_EventWaitHandle_GetAccessControl\" data-linktype=\"relative-path\">GetAccessControl()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.eventwaithandle#System_Threading_EventWaitHandle_OpenExisting_System_String_\" data-linktype=\"relative-path\">OpenExisting(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.eventwaithandle#System_Threading_EventWaitHandle_OpenExisting_System_String_System_Security_AccessControl_EventWaitHandleRights_\" data-linktype=\"relative-path\">OpenExisting(String,EventWaitHandleRights)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.eventwaithandle#System_Threading_EventWaitHandle_Reset\" data-linktype=\"relative-path\">Reset()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.eventwaithandle#System_Threading_EventWaitHandle_Set\" data-linktype=\"relative-path\">Set()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.eventwaithandle#System_Threading_EventWaitHandle_SetAccessControl_System_Security_AccessControl_EventWaitHandleSecurity_\" data-linktype=\"relative-path\">SetAccessControl(EventWaitHandleSecurity)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.eventwaithandle#System_Threading_EventWaitHandle_TryOpenExisting_System_String_System_Security_AccessControl_EventWaitHandleRights_System_Threading_EventWaitHandle__\" data-linktype=\"relative-path\">TryOpenExisting(String,EventWaitHandleRights,EventWaitHandle)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.eventwaithandle#System_Threading_EventWaitHandle_TryOpenExisting_System_String_System_Threading_EventWaitHandle__\" data-linktype=\"relative-path\">TryOpenExisting(String,EventWaitHandle)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_Close\" data-linktype=\"relative-path\">Close()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_Dispose_System_Boolean_\" data-linktype=\"relative-path\">Dispose(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_Handle\" data-linktype=\"relative-path\">Handle</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_InvalidHandle\" data-linktype=\"relative-path\">InvalidHandle</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_SafeWaitHandle\" data-linktype=\"relative-path\">SafeWaitHandle</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_SignalAndWait_System_Threading_WaitHandle_System_Threading_WaitHandle_\" data-linktype=\"relative-path\">SignalAndWait(WaitHandle,WaitHandle)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_SignalAndWait_System_Threading_WaitHandle_System_Threading_WaitHandle_System_Int32_System_Boolean_\" data-linktype=\"relative-path\">SignalAndWait(WaitHandle,WaitHandle,Int32,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_SignalAndWait_System_Threading_WaitHandle_System_Threading_WaitHandle_System_TimeSpan_System_Boolean_\" data-linktype=\"relative-path\">SignalAndWait(WaitHandle,WaitHandle,TimeSpan,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitAll_System_Threading_WaitHandle___\" data-linktype=\"relative-path\">WaitAll(WaitHandle[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitAll_System_Threading_WaitHandle___System_Int32_\" data-linktype=\"relative-path\">WaitAll(WaitHandle[],Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitAll_System_Threading_WaitHandle___System_Int32_System_Boolean_\" data-linktype=\"relative-path\">WaitAll(WaitHandle[],Int32,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitAll_System_Threading_WaitHandle___System_TimeSpan_\" data-linktype=\"relative-path\">WaitAll(WaitHandle[],TimeSpan)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitAll_System_Threading_WaitHandle___System_TimeSpan_System_Boolean_\" data-linktype=\"relative-path\">WaitAll(WaitHandle[],TimeSpan,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitAny_System_Threading_WaitHandle___\" data-linktype=\"relative-path\">WaitAny(WaitHandle[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitAny_System_Threading_WaitHandle___System_Int32_\" data-linktype=\"relative-path\">WaitAny(WaitHandle[],Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitAny_System_Threading_WaitHandle___System_Int32_System_Boolean_\" data-linktype=\"relative-path\">WaitAny(WaitHandle[],Int32,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitAny_System_Threading_WaitHandle___System_TimeSpan_\" data-linktype=\"relative-path\">WaitAny(WaitHandle[],TimeSpan)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitAny_System_Threading_WaitHandle___System_TimeSpan_System_Boolean_\" data-linktype=\"relative-path\">WaitAny(WaitHandle[],TimeSpan,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitOne\" data-linktype=\"relative-path\">WaitOne()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitOne_System_Int32_\" data-linktype=\"relative-path\">WaitOne(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitOne_System_Int32_System_Boolean_\" data-linktype=\"relative-path\">WaitOne(Int32,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitOne_System_TimeSpan_\" data-linktype=\"relative-path\">WaitOne(TimeSpan)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitOne_System_TimeSpan_System_Boolean_\" data-linktype=\"relative-path\">WaitOne(TimeSpan,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitTimeout\" data-linktype=\"relative-path\">WaitTimeout</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p><code>AutoResetEvent</code> allows threads to communicate with each other by signaling. Typically, you use this class when threads need exclusive access to a resource.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This type implements the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method in a <code>try</code>/<code>catch</code> block. To dispose of it indirectly, use a language construct such as <code>using</code> (in C#) or <code>Using</code> (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface topic.  </p>\n</div>\n<p> A thread waits for a signal by calling <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitOne_\" data-linktype=\"relative-path\">WaitOne</a> on the <code>AutoResetEvent</code>. If the <code>AutoResetEvent</code> is in the non-signaled state, the thread blocks, waiting for the thread that currently controls the resource to signal that the resource is available by calling <a class=\"xref\" href=\"system.threading.eventwaithandle#System_Threading_EventWaitHandle_Set_\" data-linktype=\"relative-path\">Set</a>.  </p>\n<p> Calling <code>Set</code> signals <code>AutoResetEvent</code> to release a waiting thread. <code>AutoResetEvent</code> remains signaled until a single waiting thread is released, and then automatically returns to the non-signaled state. If no threads are waiting, the state remains signaled indefinitely.  </p>\n<p> If a thread calls <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitOne_\" data-linktype=\"relative-path\">WaitOne</a> while the AutoResetEvent is in the signaled state, the thread does not block. The AutoResetEvent releases the thread immediately and returns to the non-signaled state.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> There is no guarantee that every call to the <a class=\"xref\" href=\"system.threading.eventwaithandle#System_Threading_EventWaitHandle_Set_\" data-linktype=\"relative-path\">Set</a> method will release a thread. If two calls are too close together, so that the second call occurs before a thread has been released, only one thread is released. It is as if the second call did not happen. Also, if <a class=\"xref\" href=\"system.threading.eventwaithandle#System_Threading_EventWaitHandle_Set_\" data-linktype=\"relative-path\">Set</a> is called when there are no threads waiting and the AutoResetEvent is already signaled, the call has no effect.  </p>\n</div>\n<p> You can control the initial state of an <code>AutoResetEvent</code> by passing a Boolean value to the constructor: <code>true</code> if the initial state is signaled and <code>false</code> otherwise.  </p>\n<p> <code>AutoResetEvent</code> can also be used with the <code>static</code><a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitAll_\" data-linktype=\"relative-path\">WaitAll</a> and <a class=\"xref\" href=\"system.threading.waithandle#System_Threading_WaitHandle_WaitAny_\" data-linktype=\"relative-path\">WaitAny</a> methods.  </p>\n<p> For more information about thread synchronization mechanisms, see <a href=\"../Topic/AutoResetEvent.md\" data-linktype=\"relative-path\">AutoResetEvent</a> in the conceptual documentation.  </p>\n<p> Beginning with the .NET Framework version 2.0, AutoResetEvent derives from the new <a class=\"xref\" href=\"system.threading.eventwaithandle\" data-linktype=\"relative-path\">EventWaitHandle</a> class. An AutoResetEvent is functionally equivalent to an <a class=\"xref\" href=\"system.threading.eventwaithandle\" data-linktype=\"relative-path\">EventWaitHandle</a> created with <a class=\"xref\" href=\"system.threading.eventresetmode\" data-linktype=\"relative-path\">System.Threading.EventResetMode</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Unlike the AutoResetEvent class, the <a class=\"xref\" href=\"system.threading.eventwaithandle\" data-linktype=\"relative-path\">EventWaitHandle</a> class provides access to named system synchronization events.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_AutoResetEvent__ctor_System_Boolean_\" data-linktype=\"self-bookmark\">AutoResetEvent(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.threading.autoresetevent\" data-linktype=\"relative-path\">AutoResetEvent</a> class with a Boolean value indicating whether to set the initial state to signaled.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_AutoResetEvent__ctor_System_Boolean_\">\r\n    \r\n            <a id=\"System_Threading_AutoResetEvent__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AutoResetEvent(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.threading.autoresetevent\" data-linktype=\"relative-path\">AutoResetEvent</a> class with a Boolean value indicating whether to set the initial state to signaled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public AutoResetEvent (bool initialState);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>initialState</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to set the initial state to signaled; <code>false</code> to set the initial state to non-signaled.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses an <a class=\"xref\" href=\"system.threading.autoresetevent\" data-linktype=\"relative-path\">AutoResetEvent</a> to synchronize the activities of two threads. The first thread, which is the application thread, executes <code>Main</code>. It writes values to the protected resource, which is a <code>static</code> (<code>Shared</code> in Visual Basic) field named <code>number</code>. The second thread executes the static <code>ThreadProc</code> method, which reads the values written by <code>Main</code>.  </p>\n<p> The <code>ThreadProc</code> method waits for the <a class=\"xref\" href=\"system.threading.autoresetevent\" data-linktype=\"relative-path\">AutoResetEvent</a>. When <code>Main</code> calls the <a class=\"xref\" href=\"system.threading.eventwaithandle#System_Threading_EventWaitHandle_Set_\" data-linktype=\"relative-path\">Set</a> method on the <a class=\"xref\" href=\"system.threading.autoresetevent\" data-linktype=\"relative-path\">AutoResetEvent</a>, the <code>ThreadProc</code> method reads one value. The <a class=\"xref\" href=\"system.threading.autoresetevent\" data-linktype=\"relative-path\">AutoResetEvent</a> immediately resets, so the <code>ThreadProc</code> method waits again.  </p>\n<p> The program logic guarantees that the <code>ThreadProc</code> method will never read the same value two times. It does not guarantee that the <code>ThreadProc</code> method will read every value written by <code>Main</code>. That guarantee would require a second <a class=\"xref\" href=\"system.threading.autoresetevent\" data-linktype=\"relative-path\">AutoResetEvent</a> lock.  </p>\n<p> After each write operation, <code>Main</code> yields by calling the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Sleep_\" data-linktype=\"relative-path\">Sleep</a> method, to give the second thread a chance to execute. Otherwise, on a single-processor computer <code>Main</code> would write many values between any two read operations.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.AutoResetEvent#1\">using System;\nusing System.Threading;\n\nnamespace AutoResetEvent_Examples\n{\n\tclass MyMainClass\n\t{\n\t\t//Initially not signaled.\n      const int numIterations = 100;\n      static AutoResetEvent myResetEvent = new AutoResetEvent(false);\n      static int number;\n      \n      static void Main()\n\t\t{\n         //Create and start the reader thread.\n         Thread myReaderThread = new Thread(new ThreadStart(MyReadThreadProc));\n         myReaderThread.Name = &quot;ReaderThread&quot;;\n         myReaderThread.Start();\n\n         for(int i = 1; i &lt;= numIterations; i++)\n         {\n            Console.WriteLine(&quot;Writer thread writing value: {0}&quot;, i);\n            number = i;\n            \n            //Signal that a value has been written.\n            myResetEvent.Set();\n            \n            //Give the Reader thread an opportunity to act.\n            Thread.Sleep(1);\n         }\n\n         //Terminate the reader thread.\n         myReaderThread.Abort();\n      }\n\n      static void MyReadThreadProc()\n      {\n         while(true)\n         {\n            //The value will not be read until the writer has written\n            // at least once since the last read.\n            myResetEvent.WaitOne();\n            Console.WriteLine(&quot;{0} reading value: {1}&quot;, Thread.CurrentThread.Name, number);\n         }\n      }\n\t}\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Threading.AutoResetEvent#1\">using namespace System;\nusing namespace System::Threading;\nref class MyMainClass\n{\npublic:\n   static void MyReadThreadProc()\n   {\n      while ( true )\n      {\n         \n         //The value will not be read until the writer has written\n         // at least once since the last read.\n         myResetEvent-&gt;WaitOne();\n         Console::WriteLine( &quot; {0} reading value: {1}&quot;, Thread::CurrentThread-&gt;Name, number );\n      }\n   }\n\n\n   //Initially not signaled.\n   static AutoResetEvent^ myResetEvent = gcnew AutoResetEvent( false );\n   static int number;\n   literal int numIterations = 100;\n};\n\nint main()\n{\n   \n   //Create and start the reader thread.\n   Thread^ myReaderThread = gcnew Thread( gcnew ThreadStart( MyMainClass::MyReadThreadProc ) );\n   myReaderThread-&gt;Name = &quot;ReaderThread&quot;;\n   myReaderThread-&gt;Start();\n   for ( int i = 1; i &lt;= MyMainClass::numIterations; i++ )\n   {\n      Console::WriteLine( &quot;Writer thread writing value: {0}&quot;, i );\n      MyMainClass::number = i;\n      \n      //Signal that a value has been written.\n      MyMainClass::myResetEvent-&gt;Set();\n      \n      //Give the Reader thread an opportunity to act.\n      Thread::Sleep( 1 );\n\n   }\n   \n   //Terminate the reader thread.\n   myReaderThread-&gt;Abort();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.AutoResetEvent#1\">Imports System\nImports System.Threading\n\nNamespace AutoResetEvent_Examples\n    Class MyMainClass\n        &#39;Initially not signaled.\n        Private Const numIterations As Integer = 100\n        Private Shared myResetEvent As New AutoResetEvent(False)\n        Private Shared number As Integer\n\n        &lt;MTAThread&gt; _\n        Shared Sub Main()\n            &#39;Create and start the reader thread.\n            Dim myReaderThread As New Thread(AddressOf MyReadThreadProc)\n            myReaderThread.Name = &quot;ReaderThread&quot;\n            myReaderThread.Start()\n\n            Dim i As Integer\n            For i = 1 To numIterations\n                Console.WriteLine(&quot;Writer thread writing value: {0}&quot;, i)\n                number = i\n\n                &#39;Signal that a value has been written.\n                myResetEvent.Set()\n\n                &#39;Give the Reader thread an opportunity to act.\n                Thread.Sleep(1)\n            Next i\n\n            &#39;Terminate the reader thread.\n            myReaderThread.Abort()\n        End Sub &#39;Main\n\n        Shared Sub MyReadThreadProc()\n            While True\n                &#39;The value will not be read until the writer has written\n                &#39; at least once since the last read.\n                myResetEvent.WaitOne()\n                Console.WriteLine(&quot;{0} reading value: {1}&quot;, Thread.CurrentThread.Name, number)\n            End While\n        End Sub &#39;MyReadThreadProc\n    End Class &#39;MyMainClass\nEnd Namespace &#39;AutoResetEvent_Examples\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Threading.AutoResetEvent.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Threading.AutoResetEvent.yml\">\r\n<meta name=\"APIName\" content=\"System.Threading.AutoResetEvent\">\r\n<meta name=\"APIName\" content=\"System.Threading.AutoResetEvent..ctor\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"984f1385-eee3-3856-1a9c-1ec477c24a23\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Notifies a waiting thread that an event has occurred. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Threading/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Threading.AutoResetEvent\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Threading.AutoResetEvent.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Threading.AutoResetEvent.yml","open_to_public_contributors":true,"api_name":["System.Threading.AutoResetEvent","System.Threading.AutoResetEvent..ctor"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Threading.AutoResetEvent","System::Threading::AutoResetEvent","System.Threading.AutoResetEvent.#ctor","System::Threading::AutoResetEvent::#ctor"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"984f1385-eee3-3856-1a9c-1ec477c24a23","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Threading/AutoResetEvent.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"AutoResetEvent class | Microsoft Docs","_op_ogTitle":"AutoResetEvent class","description":"Notifies a waiting thread that an event has occurred. This class cannot be inherited.\n","toc_asset_id":"_splitted/System.Threading/toc.json","toc_rel":"_splitted/System.Threading/toc.json","source_url":"","ms.assetid":"System.Threading.AutoResetEvent","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.threading.autoresetevent","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.threading.autoresetevent","fileRelativePath":"System.Threading.AutoResetEvent.html"},"themesRelativePathToOutputRoot":"_themes/"}