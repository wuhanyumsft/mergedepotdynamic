{"content":"    \r\n    <h1 id=\"System_Reflection_Emit_EnumBuilder\">\r\n      <span class=\"lang-csharp\">EnumBuilder</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Describes and represents an enumeration type.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n[System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._EnumBuilder))]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class EnumBuilder : System.Reflection.TypeInfo, System.Runtime.InteropServices._EnumBuilder</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l3\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo\" data-linktype=\"relative-path\">System.Reflection.TypeInfo</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l4\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">EnumBuilder</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_CustomAttributes\" data-linktype=\"relative-path\">CustomAttributes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_GetCustomAttributesData\" data-linktype=\"relative-path\">GetCustomAttributesData()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_MetadataToken\" data-linktype=\"relative-path\">MetadataToken</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_op_Equality_System_Reflection_MemberInfo_System_Reflection_MemberInfo_\" data-linktype=\"relative-path\">op_Equality(MemberInfo,MemberInfo)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_op_Inequality_System_Reflection_MemberInfo_System_Reflection_MemberInfo_\" data-linktype=\"relative-path\">op_Inequality(MemberInfo,MemberInfo)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_MemberInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetType\" data-linktype=\"relative-path\">_MemberInfo.GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_MemberInfo.GetTypeInfo(UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetTypeInfoCount_System_UInt32__\" data-linktype=\"relative-path\">_MemberInfo.GetTypeInfoCount(UInt32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"relative-path\">_MemberInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_AsType\" data-linktype=\"relative-path\">AsType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_DeclaredConstructors\" data-linktype=\"relative-path\">DeclaredConstructors</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_DeclaredEvents\" data-linktype=\"relative-path\">DeclaredEvents</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_DeclaredFields\" data-linktype=\"relative-path\">DeclaredFields</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_DeclaredMembers\" data-linktype=\"relative-path\">DeclaredMembers</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_DeclaredMethods\" data-linktype=\"relative-path\">DeclaredMethods</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_DeclaredNestedTypes\" data-linktype=\"relative-path\">DeclaredNestedTypes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_DeclaredProperties\" data-linktype=\"relative-path\">DeclaredProperties</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_GenericTypeParameters\" data-linktype=\"relative-path\">GenericTypeParameters</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_GetDeclaredEvent_System_String_\" data-linktype=\"relative-path\">GetDeclaredEvent(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_GetDeclaredField_System_String_\" data-linktype=\"relative-path\">GetDeclaredField(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_GetDeclaredMethod_System_String_\" data-linktype=\"relative-path\">GetDeclaredMethod(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_GetDeclaredMethods_System_String_\" data-linktype=\"relative-path\">GetDeclaredMethods(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_GetDeclaredNestedType_System_String_\" data-linktype=\"relative-path\">GetDeclaredNestedType(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_GetDeclaredProperty_System_String_\" data-linktype=\"relative-path\">GetDeclaredProperty(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_ImplementedInterfaces\" data-linktype=\"relative-path\">ImplementedInterfaces</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.typeinfo#System_Reflection_TypeInfo_System_Reflection_IReflectableType_GetTypeInfo\" data-linktype=\"relative-path\">IReflectableType.GetTypeInfo()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_Attributes\" data-linktype=\"relative-path\">Attributes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_ContainsGenericParameters\" data-linktype=\"relative-path\">ContainsGenericParameters</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_DeclaringMethod\" data-linktype=\"relative-path\">DeclaringMethod</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_DefaultBinder\" data-linktype=\"relative-path\">DefaultBinder</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_Delimiter\" data-linktype=\"relative-path\">Delimiter</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_EmptyTypes\" data-linktype=\"relative-path\">EmptyTypes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_Equals_System_Type_\" data-linktype=\"relative-path\">Equals(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_FilterAttribute\" data-linktype=\"relative-path\">FilterAttribute</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_FilterName\" data-linktype=\"relative-path\">FilterName</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_FilterNameIgnoreCase\" data-linktype=\"relative-path\">FilterNameIgnoreCase</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_FindInterfaces_System_Reflection_TypeFilter_System_Object_\" data-linktype=\"relative-path\">FindInterfaces(TypeFilter,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_FindMembers_System_Reflection_MemberTypes_System_Reflection_BindingFlags_System_Reflection_MemberFilter_System_Object_\" data-linktype=\"relative-path\">FindMembers(MemberTypes,BindingFlags,MemberFilter,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GenericParameterAttributes\" data-linktype=\"relative-path\">GenericParameterAttributes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GenericParameterPosition\" data-linktype=\"relative-path\">GenericParameterPosition</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GenericTypeArguments\" data-linktype=\"relative-path\">GenericTypeArguments</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetArrayRank\" data-linktype=\"relative-path\">GetArrayRank()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetConstructor_System_Reflection_BindingFlags_System_Reflection_Binder_System_Reflection_CallingConventions_System_Type___System_Reflection_ParameterModifier___\" data-linktype=\"relative-path\">GetConstructor(BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetConstructor_System_Reflection_BindingFlags_System_Reflection_Binder_System_Type___System_Reflection_ParameterModifier___\" data-linktype=\"relative-path\">GetConstructor(BindingFlags,Binder,Type[],ParameterModifier[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetConstructor_System_Type___\" data-linktype=\"relative-path\">GetConstructor(Type[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetConstructors\" data-linktype=\"relative-path\">GetConstructors()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetDefaultMembers\" data-linktype=\"relative-path\">GetDefaultMembers()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetEnumName_System_Object_\" data-linktype=\"relative-path\">GetEnumName(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetEnumNames\" data-linktype=\"relative-path\">GetEnumNames()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetEnumValues\" data-linktype=\"relative-path\">GetEnumValues()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetEvent_System_String_\" data-linktype=\"relative-path\">GetEvent(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetField_System_String_\" data-linktype=\"relative-path\">GetField(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetFields\" data-linktype=\"relative-path\">GetFields()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetGenericArguments\" data-linktype=\"relative-path\">GetGenericArguments()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetGenericParameterConstraints\" data-linktype=\"relative-path\">GetGenericParameterConstraints()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetGenericTypeDefinition\" data-linktype=\"relative-path\">GetGenericTypeDefinition()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetInterface_System_String_\" data-linktype=\"relative-path\">GetInterface(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetMember_System_String_\" data-linktype=\"relative-path\">GetMember(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetMember_System_String_System_Reflection_BindingFlags_\" data-linktype=\"relative-path\">GetMember(String,BindingFlags)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetMembers\" data-linktype=\"relative-path\">GetMembers()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetMethod_System_String_\" data-linktype=\"relative-path\">GetMethod(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetMethod_System_String_System_Reflection_BindingFlags_\" data-linktype=\"relative-path\">GetMethod(String,BindingFlags)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetMethod_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Reflection_CallingConventions_System_Type___System_Reflection_ParameterModifier___\" data-linktype=\"relative-path\">GetMethod(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetMethod_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Type___System_Reflection_ParameterModifier___\" data-linktype=\"relative-path\">GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetMethod_System_String_System_Type___\" data-linktype=\"relative-path\">GetMethod(String,Type[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetMethod_System_String_System_Type___System_Reflection_ParameterModifier___\" data-linktype=\"relative-path\">GetMethod(String,Type[],ParameterModifier[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetMethods\" data-linktype=\"relative-path\">GetMethods()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetNestedType_System_String_\" data-linktype=\"relative-path\">GetNestedType(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetNestedTypes\" data-linktype=\"relative-path\">GetNestedTypes()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetProperties\" data-linktype=\"relative-path\">GetProperties()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetProperty_System_String_\" data-linktype=\"relative-path\">GetProperty(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetProperty_System_String_System_Reflection_BindingFlags_\" data-linktype=\"relative-path\">GetProperty(String,BindingFlags)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetProperty_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Type_System_Type___System_Reflection_ParameterModifier___\" data-linktype=\"relative-path\">GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetProperty_System_String_System_Type_\" data-linktype=\"relative-path\">GetProperty(String,Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetProperty_System_String_System_Type_System_Type___\" data-linktype=\"relative-path\">GetProperty(String,Type,Type[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetProperty_System_String_System_Type_System_Type___System_Reflection_ParameterModifier___\" data-linktype=\"relative-path\">GetProperty(String,Type,Type[],ParameterModifier[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetProperty_System_String_System_Type___\" data-linktype=\"relative-path\">GetProperty(String,Type[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetType_System_String_\" data-linktype=\"relative-path\">GetType(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetType_System_String_System_Boolean_\" data-linktype=\"relative-path\">GetType(String,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetType_System_String_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">GetType(String,Boolean,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetType_System_String_System_Func_System_Reflection_AssemblyName_System_Reflection_Assembly__System_Func_System_Reflection_Assembly_System_String_System_Boolean_System_Type__\" data-linktype=\"relative-path\">GetType(String,Func&lt;AssemblyName,Assembly&gt;,Func&lt;Assembly,String,Boolean,Type&gt;)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetType_System_String_System_Func_System_Reflection_AssemblyName_System_Reflection_Assembly__System_Func_System_Reflection_Assembly_System_String_System_Boolean_System_Type__System_Boolean_\" data-linktype=\"relative-path\">GetType(String,Func&lt;AssemblyName,Assembly&gt;,Func&lt;Assembly,String,Boolean,Type&gt;,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetType_System_String_System_Func_System_Reflection_AssemblyName_System_Reflection_Assembly__System_Func_System_Reflection_Assembly_System_String_System_Boolean_System_Type__System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">GetType(String,Func&lt;AssemblyName,Assembly&gt;,Func&lt;Assembly,String,Boolean,Type&gt;,Boolean,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeArray_System_Object___\" data-linktype=\"relative-path\">GetTypeArray(Object[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeCode_System_Type_\" data-linktype=\"relative-path\">GetTypeCode(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeCodeImpl\" data-linktype=\"relative-path\">GetTypeCodeImpl()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeFromCLSID_System_Guid_\" data-linktype=\"relative-path\">GetTypeFromCLSID(Guid)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeFromCLSID_System_Guid_System_Boolean_\" data-linktype=\"relative-path\">GetTypeFromCLSID(Guid,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeFromCLSID_System_Guid_System_String_\" data-linktype=\"relative-path\">GetTypeFromCLSID(Guid,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeFromCLSID_System_Guid_System_String_System_Boolean_\" data-linktype=\"relative-path\">GetTypeFromCLSID(Guid,String,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeFromHandle_System_RuntimeTypeHandle_\" data-linktype=\"relative-path\">GetTypeFromHandle(RuntimeTypeHandle)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeFromProgID_System_String_\" data-linktype=\"relative-path\">GetTypeFromProgID(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeFromProgID_System_String_System_Boolean_\" data-linktype=\"relative-path\">GetTypeFromProgID(String,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeFromProgID_System_String_System_String_\" data-linktype=\"relative-path\">GetTypeFromProgID(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeFromProgID_System_String_System_String_System_Boolean_\" data-linktype=\"relative-path\">GetTypeFromProgID(String,String,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_GetTypeHandle_System_Object_\" data-linktype=\"relative-path\">GetTypeHandle(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_HasElementType\" data-linktype=\"relative-path\">HasElementType</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_InvokeMember_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object_System_Object___\" data-linktype=\"relative-path\">InvokeMember(String,BindingFlags,Binder,Object,Object[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_InvokeMember_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object_System_Object___System_Globalization_CultureInfo_\" data-linktype=\"relative-path\">InvokeMember(String,BindingFlags,Binder,Object,Object[],CultureInfo)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsAbstract\" data-linktype=\"relative-path\">IsAbstract</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsAnsiClass\" data-linktype=\"relative-path\">IsAnsiClass</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsArray\" data-linktype=\"relative-path\">IsArray</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsAssignableFrom_System_Type_\" data-linktype=\"relative-path\">IsAssignableFrom(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsAutoClass\" data-linktype=\"relative-path\">IsAutoClass</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsAutoLayout\" data-linktype=\"relative-path\">IsAutoLayout</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsByRef\" data-linktype=\"relative-path\">IsByRef</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsClass\" data-linktype=\"relative-path\">IsClass</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsCOMObject\" data-linktype=\"relative-path\">IsCOMObject</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsContextful\" data-linktype=\"relative-path\">IsContextful</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsContextfulImpl\" data-linktype=\"relative-path\">IsContextfulImpl()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsEnum\" data-linktype=\"relative-path\">IsEnum</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsEnumDefined_System_Object_\" data-linktype=\"relative-path\">IsEnumDefined(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsEquivalentTo_System_Type_\" data-linktype=\"relative-path\">IsEquivalentTo(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsExplicitLayout\" data-linktype=\"relative-path\">IsExplicitLayout</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsGenericParameter\" data-linktype=\"relative-path\">IsGenericParameter</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsGenericType\" data-linktype=\"relative-path\">IsGenericType</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsGenericTypeDefinition\" data-linktype=\"relative-path\">IsGenericTypeDefinition</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsImport\" data-linktype=\"relative-path\">IsImport</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsInstanceOfType_System_Object_\" data-linktype=\"relative-path\">IsInstanceOfType(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsInterface\" data-linktype=\"relative-path\">IsInterface</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsLayoutSequential\" data-linktype=\"relative-path\">IsLayoutSequential</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsMarshalByRef\" data-linktype=\"relative-path\">IsMarshalByRef</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsMarshalByRefImpl\" data-linktype=\"relative-path\">IsMarshalByRefImpl()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsNested\" data-linktype=\"relative-path\">IsNested</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsNestedAssembly\" data-linktype=\"relative-path\">IsNestedAssembly</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsNestedFamANDAssem\" data-linktype=\"relative-path\">IsNestedFamANDAssem</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsNestedFamily\" data-linktype=\"relative-path\">IsNestedFamily</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsNestedFamORAssem\" data-linktype=\"relative-path\">IsNestedFamORAssem</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsNestedPrivate\" data-linktype=\"relative-path\">IsNestedPrivate</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsNestedPublic\" data-linktype=\"relative-path\">IsNestedPublic</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsNotPublic\" data-linktype=\"relative-path\">IsNotPublic</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsPointer\" data-linktype=\"relative-path\">IsPointer</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsPrimitive\" data-linktype=\"relative-path\">IsPrimitive</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsPublic\" data-linktype=\"relative-path\">IsPublic</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsSealed\" data-linktype=\"relative-path\">IsSealed</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsSecurityCritical\" data-linktype=\"relative-path\">IsSecurityCritical</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsSecuritySafeCritical\" data-linktype=\"relative-path\">IsSecuritySafeCritical</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsSecurityTransparent\" data-linktype=\"relative-path\">IsSecurityTransparent</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsSerializable\" data-linktype=\"relative-path\">IsSerializable</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsSpecialName\" data-linktype=\"relative-path\">IsSpecialName</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsSubclassOf_System_Type_\" data-linktype=\"relative-path\">IsSubclassOf(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsUnicodeClass\" data-linktype=\"relative-path\">IsUnicodeClass</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsValueType\" data-linktype=\"relative-path\">IsValueType</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_IsVisible\" data-linktype=\"relative-path\">IsVisible</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_MakeGenericType_System_Type___\" data-linktype=\"relative-path\">MakeGenericType(Type[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_MemberType\" data-linktype=\"relative-path\">MemberType</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_Missing\" data-linktype=\"relative-path\">Missing</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_op_Equality_System_Type_System_Type_\" data-linktype=\"relative-path\">op_Equality(Type,Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_op_Inequality_System_Type_System_Type_\" data-linktype=\"relative-path\">op_Inequality(Type,Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_ReflectionOnlyGetType_System_String_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">ReflectionOnlyGetType(String,Boolean,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_StructLayoutAttribute\" data-linktype=\"relative-path\">StructLayoutAttribute</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_System_Runtime_InteropServices__Type_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_Type.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_System_Runtime_InteropServices__Type_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_Type.GetTypeInfo(UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_System_Runtime_InteropServices__Type_GetTypeInfoCount_System_UInt32__\" data-linktype=\"relative-path\">_Type.GetTypeInfoCount(UInt32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_System_Runtime_InteropServices__Type_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"relative-path\">_Type.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.type#System_Type_TypeInitializer\" data-linktype=\"relative-path\">TypeInitializer</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework versions 1.0 and 1.1, it is necessary to define enumerations using <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> because EnumBuilder emits enumerations whose elements are of type <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> instead of the enumeration type. In the .NET Framework version 2.0, EnumBuilder emits enumerations whose elements have the correct type.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_Assembly\" data-linktype=\"self-bookmark\">Assembly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the dynamic assembly that contains this enum definition.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_AssemblyQualifiedName\" data-linktype=\"self-bookmark\">AssemblyQualifiedName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the full path of this enum qualified by the display name of the parent assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_BaseType\" data-linktype=\"self-bookmark\">BaseType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the parent <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of this type which is always <a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_DeclaringType\" data-linktype=\"self-bookmark\">DeclaringType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the type that declared this <a class=\"xref\" href=\"system.reflection.emit.enumbuilder\" data-linktype=\"relative-path\">EnumBuilder</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_FullName\" data-linktype=\"self-bookmark\">FullName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the full path of this enum.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_GUID\" data-linktype=\"self-bookmark\">GUID</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the GUID of this enum.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_IsConstructedGenericType\" data-linktype=\"self-bookmark\">IsConstructedGenericType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether this object represents a constructed generic type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_Module\" data-linktype=\"self-bookmark\">Module</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the dynamic module that contains this <a class=\"xref\" href=\"system.reflection.emit.enumbuilder\" data-linktype=\"relative-path\">EnumBuilder</a> definition.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_Name\" data-linktype=\"self-bookmark\">Name</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the name of this enum.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_Namespace\" data-linktype=\"self-bookmark\">Namespace</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the namespace of this enum.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_ReflectedType\" data-linktype=\"self-bookmark\">ReflectedType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the type that was used to obtain this <a class=\"xref\" href=\"system.reflection.emit.enumbuilder\" data-linktype=\"relative-path\">EnumBuilder</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_TypeHandle\" data-linktype=\"self-bookmark\">TypeHandle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the internal handle for this enum.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_TypeToken\" data-linktype=\"self-bookmark\">TypeToken</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the internal metadata type token of this enum.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_UnderlyingField\" data-linktype=\"self-bookmark\">UnderlyingField</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the underlying field for this enum.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_UnderlyingSystemType\" data-linktype=\"self-bookmark\">UnderlyingSystemType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the underlying system type for this enum.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_CreateType\" data-linktype=\"self-bookmark\">CreateType()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object for this enum.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_CreateTypeInfo\" data-linktype=\"self-bookmark\">CreateTypeInfo()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.reflection.typeinfo\" data-linktype=\"relative-path\">TypeInfo</a> object that represents this enumeration.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_DefineLiteral_System_String_System_Object_\" data-linktype=\"self-bookmark\">DefineLiteral(String,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines the named static field in an enumeration type with the specified constant value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_GetAttributeFlagsImpl\" data-linktype=\"self-bookmark\">GetAttributeFlagsImpl()</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_GetConstructorImpl_System_Reflection_BindingFlags_System_Reflection_Binder_System_Reflection_CallingConventions_System_Type___System_Reflection_ParameterModifier___\" data-linktype=\"self-bookmark\">GetConstructorImpl(BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_GetConstructors_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetConstructors(BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an array of <a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a> objects representing the public and non-public constructors defined for this class, as specified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_GetCustomAttributes_System_Boolean_\" data-linktype=\"self-bookmark\">GetCustomAttributes(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns all the custom attributes defined for this constructor.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_GetCustomAttributes_System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">GetCustomAttributes(Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the custom attributes identified by the given type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_GetElementType\" data-linktype=\"self-bookmark\">GetElementType()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_GetEnumUnderlyingType\" data-linktype=\"self-bookmark\">GetEnumUnderlyingType()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the underlying integer type of the current enumeration, which is set when the enumeration builder is defined.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_GetEvent_System_String_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetEvent(String,BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the event with the specified name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_GetEvents\" data-linktype=\"self-bookmark\">GetEvents()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the events for the public events declared or inherited by this type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_GetEvents_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetEvents(BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the public and non-public events that are declared by this type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_GetField_System_String_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetField(String,BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the field specified by the given name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_GetFields_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetFields(BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the public and non-public fields that are declared by this type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_GetInterface_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">GetInterface(String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the interface implemented (directly or indirectly) by this type, with the specified fully-qualified name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_GetInterfaceMap_System_Type_\" data-linktype=\"self-bookmark\">GetInterfaceMap(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an interface mapping for the interface requested.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_GetInterfaces\" data-linktype=\"self-bookmark\">GetInterfaces()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an array of all the interfaces implemented on this a class and its base classes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_GetMember_System_String_System_Reflection_MemberTypes_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetMember(String,MemberTypes,BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns all members with the specified name, type, and binding that are declared or inherited by this type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_GetMembers_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetMembers(BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the specified members declared or inherited by this type,.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_GetMethodImpl_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Reflection_CallingConventions_System_Type___System_Reflection_ParameterModifier___\" data-linktype=\"self-bookmark\">GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_GetMethods_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetMethods(BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns all the public and non-public methods declared or inherited by this type, as specified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_GetNestedType_System_String_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetNestedType(String,BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the specified nested type that is declared by this type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_GetNestedTypes_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetNestedTypes(BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the public and non-public nested types that are declared or inherited by this type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_GetProperties_System_Reflection_BindingFlags_\" data-linktype=\"self-bookmark\">GetProperties(BindingFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns all the public and non-public properties declared or inherited by this type, as specified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_GetPropertyImpl_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Type_System_Type___System_Reflection_ParameterModifier___\" data-linktype=\"self-bookmark\">GetPropertyImpl(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_HasElementTypeImpl\" data-linktype=\"self-bookmark\">HasElementTypeImpl()</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_InvokeMember_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object_System_Object___System_Reflection_ParameterModifier___System_Globalization_CultureInfo_System_String___\" data-linktype=\"self-bookmark\">InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the contraints of the specified binder and invocation attributes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_IsArrayImpl\" data-linktype=\"self-bookmark\">IsArrayImpl()</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_IsAssignableFrom_System_Reflection_TypeInfo_\" data-linktype=\"self-bookmark\">IsAssignableFrom(TypeInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether a specified <a class=\"xref\" href=\"system.reflection.typeinfo\" data-linktype=\"relative-path\">TypeInfo</a> object can be assigned to this object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_IsByRefImpl\" data-linktype=\"self-bookmark\">IsByRefImpl()</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_IsCOMObjectImpl\" data-linktype=\"self-bookmark\">IsCOMObjectImpl()</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_IsDefined_System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">IsDefined(Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Checks if the specified custom attribute type is defined.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_IsPointerImpl\" data-linktype=\"self-bookmark\">IsPointerImpl()</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_IsPrimitiveImpl\" data-linktype=\"self-bookmark\">IsPrimitiveImpl()</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_IsValueTypeImpl\" data-linktype=\"self-bookmark\">IsValueTypeImpl()</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_MakeArrayType\" data-linktype=\"self-bookmark\">MakeArrayType()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object representing a one-dimensional array of the current type, with a lower bound of zero.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_MakeArrayType_System_Int32_\" data-linktype=\"self-bookmark\">MakeArrayType(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object representing an array of the current type, with the specified number of dimensions.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_MakeByRefType\" data-linktype=\"self-bookmark\">MakeByRefType()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the current type when passed as a <strong>ref</strong> parameter (<strong>ByRef</strong> parameter in Visual Basic).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_MakePointerType\" data-linktype=\"self-bookmark\">MakePointerType()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents a pointer to the current type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_SetCustomAttribute_System_Reflection_Emit_CustomAttributeBuilder_\" data-linktype=\"self-bookmark\">SetCustomAttribute(CustomAttributeBuilder)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets a custom attribute using a custom attribute builder.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_SetCustomAttribute_System_Reflection_ConstructorInfo_System_Byte___\" data-linktype=\"self-bookmark\">SetCustomAttribute(ConstructorInfo,Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets a custom attribute using a specified custom attribute blob.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_System_Runtime_InteropServices__EnumBuilder_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"self-bookmark\">_EnumBuilder.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Maps a set of names to a corresponding set of dispatch identifiers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_System_Runtime_InteropServices__EnumBuilder_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"self-bookmark\">_EnumBuilder.GetTypeInfo(UInt32,UInt32,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the type information for an object, which can then be used to get the type information for an interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_System_Runtime_InteropServices__EnumBuilder_GetTypeInfoCount_System_UInt32__\" data-linktype=\"self-bookmark\">_EnumBuilder.GetTypeInfoCount(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_EnumBuilder_System_Runtime_InteropServices__EnumBuilder_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"self-bookmark\">_EnumBuilder.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides access to properties and methods exposed by an object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_Assembly\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_Assembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Assembly</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the dynamic assembly that contains this enum definition.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.Assembly Assembly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>Read-only. The dynamic assembly that contains this enum definition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code sample demonstrates the use of the <code>Assembly</code> property to reference the parent assembly of the current <code>EnumBuilder</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"EnumBuilder_Properties_5#1\">using namespace System;\nusing namespace System::Collections;\nusing namespace System::Threading;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\n\npublic ref class MyEnumBuilderSample\n{\nprivate:\n   static AssemblyBuilder^ myAssemblyBuilder;\n   static ModuleBuilder^ myModuleBuilder;\n   static EnumBuilder^ myEnumBuilder;\n\npublic:\n   static void Main()\n   {\n      try\n      {\n         CreateCallee( Thread::GetDomain(), AssemblyBuilderAccess::Save );\n         array&lt;Type^&gt;^myTypeArray = myModuleBuilder-&gt;GetTypes();\n         IEnumerator^ myEnum = myTypeArray-&gt;GetEnumerator();\n         while ( myEnum-&gt;MoveNext() )\n         {\n            Type^ myType = safe_cast&lt;Type^&gt;(myEnum-&gt;Current);\n            Console::WriteLine( &quot;Enum Builder defined in the module builder is: {0}&quot;, myType-&gt;Name );\n         }\n         Console::WriteLine( &quot;Properties of EnumBuilder : &quot; );\n         Console::WriteLine( &quot;Enum Assembly is :{0}&quot;, myEnumBuilder-&gt;Assembly );\n         Console::WriteLine( &quot;Enum AssemblyQualifiedName is :{0}&quot;, myEnumBuilder-&gt;AssemblyQualifiedName );\n         Console::WriteLine( &quot;Enum Module is :{0}&quot;, myEnumBuilder-&gt;Module );\n         Console::WriteLine( &quot;Enum Name is :{0}&quot;, myEnumBuilder-&gt;Name );\n         Console::WriteLine( &quot;Enum NameSpace is :{0}&quot;, myEnumBuilder-&gt;Namespace );\n         myAssemblyBuilder-&gt;Save( &quot;EmittedAssembly.dll&quot; );\n      }\n      catch ( NotSupportedException^ ex ) \n      {\n         Console::WriteLine( &quot;The following is the exception is raised: {0}&quot;, ex-&gt;Message );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;The following is the exception raised: {0}&quot;, e-&gt;Message );\n      }\n   }\n\nprivate:\n   static void CreateCallee( AppDomain^ myAppDomain, AssemblyBuilderAccess /*access*/ )\n   {\n      // Create a name for the assembly.\n      AssemblyName^ myAssemblyName = gcnew AssemblyName;\n      myAssemblyName-&gt;Name = &quot;EmittedAssembly&quot;;\n\n      // Create the dynamic assembly.\n      myAssemblyBuilder = myAppDomain-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::Save );\n\n      // Create a dynamic module.\n      myModuleBuilder = myAssemblyBuilder-&gt;DefineDynamicModule( &quot;EmittedModule&quot;, &quot;EmittedModule.mod&quot; );\n\n      // Create a dynamic Enum.\n      myEnumBuilder = myModuleBuilder-&gt;DefineEnum( &quot;MyNamespace.MyEnum&quot;, TypeAttributes::Public, Int32::typeid );\n      FieldBuilder^ myFieldBuilder1 = myEnumBuilder-&gt;DefineLiteral( &quot;FieldOne&quot;, 1 );\n      FieldBuilder^ myFieldBuilder2 = myEnumBuilder-&gt;DefineLiteral( &quot;FieldTwo&quot;, 2 );\n      myEnumBuilder-&gt;CreateType();\n   }\n};\n\nint main()\n{\n   MyEnumBuilderSample::Main();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"EnumBuilder_Properties_5#1\">\nusing System;\nusing System.Collections;\nusing System.Threading;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\npublic class MyEnumBuilderSample\n{\n   static AssemblyBuilder myAssemblyBuilder;\n   static ModuleBuilder myModuleBuilder;\n   static EnumBuilder myEnumBuilder;\n   \n   public static void Main()\n   {\n      try\n      {\n         CreateCallee(Thread.GetDomain(), AssemblyBuilderAccess.Save);\n         Type[] myTypeArray = myModuleBuilder.GetTypes();\n         foreach(Type myType in myTypeArray)\n         {\n            Console.WriteLine(&quot;Enum Builder defined in the module builder is: &quot; \n               + myType.Name);\n         }\n\n         Console.WriteLine(&quot;Properties of EnumBuilder : &quot;);\n         Console.WriteLine(&quot;Enum Assembly is :&quot; +  myEnumBuilder.Assembly.ToString());\n         Console.WriteLine(&quot;Enum AssemblyQualifiedName is :&quot; +  \n                                 myEnumBuilder.AssemblyQualifiedName.ToString());\n         Console.WriteLine(&quot;Enum Module is :&quot; +  myEnumBuilder.Module.ToString());\n         Console.WriteLine(&quot;Enum Name is :&quot; +  myEnumBuilder.Name.ToString());\n         Console.WriteLine(&quot;Enum NameSpace is :&quot; +  myEnumBuilder.Namespace);\n         myAssemblyBuilder.Save(&quot;EmittedAssembly.dll&quot;);\n      }\n      catch(NotSupportedException ex)\n      {\n         Console.WriteLine(&quot;The following is the exception is raised: &quot; + ex.Message);\n      }\n      catch(Exception e)\n      {\n         Console.WriteLine(&quot;The following is the exception raised: &quot; + e.Message);\n      }\n   }\n\n   private static void CreateCallee(AppDomain myAppDomain, AssemblyBuilderAccess access)\n   {\n      // Create a name for the assembly.\n      AssemblyName myAssemblyName = new AssemblyName();\n      myAssemblyName.Name = &quot;EmittedAssembly&quot;;\n\n      // Create the dynamic assembly.\n      myAssemblyBuilder = myAppDomain.DefineDynamicAssembly(myAssemblyName, \n                                             AssemblyBuilderAccess.Save);\n\n      // Create a dynamic module.\n      myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;EmittedModule&quot;, \n                                                         &quot;EmittedModule.mod&quot;);\n\n      // Create a dynamic Enum.\n      myEnumBuilder = myModuleBuilder.DefineEnum(&quot;MyNamespace.MyEnum&quot;, \n                                 TypeAttributes.Public, typeof(Int32));\n\n      FieldBuilder myFieldBuilder1 = myEnumBuilder.DefineLiteral(&quot;FieldOne&quot;, 1);\n      FieldBuilder myFieldBuilder2 = myEnumBuilder.DefineLiteral(&quot;FieldTwo&quot;, 2);\n\n      myEnumBuilder.CreateType();\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"EnumBuilder_Properties_5#1\">Imports System\nImports System.Collections\nImports System.Threading\nImports System.Reflection\nImports System.Reflection.Emit\n\nPublic Class MyEnumBuilderSample\n   Private Shared myAssemblyBuilder As AssemblyBuilder\n   Private Shared myModuleBuilder As ModuleBuilder\n   Private Shared myEnumBuilder As EnumBuilder\n   \n   Public Shared Sub Main()\n      Try\n         CreateCallee(Thread.GetDomain(), AssemblyBuilderAccess.Save)\n         Dim myTypeArray As Type() = myModuleBuilder.GetTypes()\n         Dim myType As Type\n         For Each myType In  myTypeArray\n            Console.WriteLine(&quot;Enum Builder defined in the module builder is: &quot; + myType.Name)\n         Next myType\n         \n         Console.WriteLine(&quot;Properties of EnumBuilder : &quot;)\n         Console.WriteLine(&quot;Enum Assembly is :&quot; + myEnumBuilder.Assembly.ToString())\n         Console.WriteLine(&quot;Enum AssemblyQualifiedName is :&quot; + myEnumBuilder.AssemblyQualifiedName.ToString())\n         Console.WriteLine(&quot;Enum Module is :&quot; + myEnumBuilder.Module.ToString())\n         Console.WriteLine(&quot;Enum Name is :&quot; + myEnumBuilder.Name.ToString())\n         Console.WriteLine(&quot;Enum NameSpace is :&quot; + myEnumBuilder.Namespace)\n         myAssemblyBuilder.Save(&quot;EmittedAssembly.dll&quot;)\n      Catch ex As NotSupportedException\n         Console.WriteLine(&quot;The following is the exception is raised: &quot; + ex.Message)\n      Catch e As Exception\n         Console.WriteLine(&quot;The following is the exception raised: &quot; + e.Message)\n      End Try\n   End Sub &#39;Main\n   \n   Private Shared Sub CreateCallee(myAppDomain As AppDomain, access As AssemblyBuilderAccess)\n      &#39; Create a name for the assembly.\n      Dim myAssemblyName As New AssemblyName()\n      myAssemblyName.Name = &quot;EmittedAssembly&quot;\n      \n      &#39; Create the dynamic assembly.\n      myAssemblyBuilder = myAppDomain.DefineDynamicAssembly(myAssemblyName, _\n                AssemblyBuilderAccess.Save)\n      \n      &#39; Create a dynamic module.\n      myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;EmittedModule&quot;, &quot;EmittedModule.mod&quot;)\n      \n      &#39; Create a dynamic Enum.\n      myEnumBuilder = myModuleBuilder.DefineEnum(&quot;MyNamespace.MyEnum&quot;, _\n                 TypeAttributes.Public, GetType(Int32))\n      \n      Dim myFieldBuilder1 As FieldBuilder = myEnumBuilder.DefineLiteral(&quot;FieldOne&quot;, 1)\n      Dim myFieldBuilder2 As FieldBuilder = myEnumBuilder.DefineLiteral(&quot;FieldTwo&quot;, 2)\n      \n      myEnumBuilder.CreateType()\n   End Sub &#39;CreateCallee\nEnd Class &#39;MyEnumBuilderSample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_AssemblyQualifiedName\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_AssemblyQualifiedName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AssemblyQualifiedName</div>        \r\n          </div>\r\n    \r\n            <p>Returns the full path of this enum qualified by the display name of the parent assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string AssemblyQualifiedName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Read-only. The full path of this enum qualified by the display name of the parent assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The format of the returned string is:  </p>\n<p> &lt;FullTypeName&gt;, &lt;AssemblyDisplayName&gt;  </p>\n<p> See <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> for a description of the format of the display name of an assembly.  </p>\n<h2 id=\"version-information\">Version Information</h2>\n<p> In the .NET Framework version 1.1 and earlier, the return value of this property did not include the culture or public key.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code sample demonstrates the use of the <code>AssemblyQualifiedName</code> property to reference the qualified parent assembly name of the current <code>EnumBuilder</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"EnumBuilder_Properties_5#2\">using namespace System;\nusing namespace System::Collections;\nusing namespace System::Threading;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\n\npublic ref class MyEnumBuilderSample\n{\nprivate:\n   static AssemblyBuilder^ myAssemblyBuilder;\n   static ModuleBuilder^ myModuleBuilder;\n   static EnumBuilder^ myEnumBuilder;\n\npublic:\n   static void Main()\n   {\n      try\n      {\n         CreateCallee( Thread::GetDomain(), AssemblyBuilderAccess::Save );\n         array&lt;Type^&gt;^myTypeArray = myModuleBuilder-&gt;GetTypes();\n         IEnumerator^ myEnum = myTypeArray-&gt;GetEnumerator();\n         while ( myEnum-&gt;MoveNext() )\n         {\n            Type^ myType = safe_cast&lt;Type^&gt;(myEnum-&gt;Current);\n            Console::WriteLine( &quot;Enum Builder defined in the module builder is: {0}&quot;, myType-&gt;Name );\n         }\n         Console::WriteLine( &quot;Properties of EnumBuilder : &quot; );\n         Console::WriteLine( &quot;Enum Assembly is :{0}&quot;, myEnumBuilder-&gt;Assembly );\n         Console::WriteLine( &quot;Enum AssemblyQualifiedName is :{0}&quot;, myEnumBuilder-&gt;AssemblyQualifiedName );\n         Console::WriteLine( &quot;Enum Module is :{0}&quot;, myEnumBuilder-&gt;Module );\n         Console::WriteLine( &quot;Enum Name is :{0}&quot;, myEnumBuilder-&gt;Name );\n         Console::WriteLine( &quot;Enum NameSpace is :{0}&quot;, myEnumBuilder-&gt;Namespace );\n         myAssemblyBuilder-&gt;Save( &quot;EmittedAssembly.dll&quot; );\n      }\n      catch ( NotSupportedException^ ex ) \n      {\n         Console::WriteLine( &quot;The following is the exception is raised: {0}&quot;, ex-&gt;Message );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;The following is the exception raised: {0}&quot;, e-&gt;Message );\n      }\n   }\n\nprivate:\n   static void CreateCallee( AppDomain^ myAppDomain, AssemblyBuilderAccess /*access*/ )\n   {\n      // Create a name for the assembly.\n      AssemblyName^ myAssemblyName = gcnew AssemblyName;\n      myAssemblyName-&gt;Name = &quot;EmittedAssembly&quot;;\n\n      // Create the dynamic assembly.\n      myAssemblyBuilder = myAppDomain-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::Save );\n\n      // Create a dynamic module.\n      myModuleBuilder = myAssemblyBuilder-&gt;DefineDynamicModule( &quot;EmittedModule&quot;, &quot;EmittedModule.mod&quot; );\n\n      // Create a dynamic Enum.\n      myEnumBuilder = myModuleBuilder-&gt;DefineEnum( &quot;MyNamespace.MyEnum&quot;, TypeAttributes::Public, Int32::typeid );\n      FieldBuilder^ myFieldBuilder1 = myEnumBuilder-&gt;DefineLiteral( &quot;FieldOne&quot;, 1 );\n      FieldBuilder^ myFieldBuilder2 = myEnumBuilder-&gt;DefineLiteral( &quot;FieldTwo&quot;, 2 );\n      myEnumBuilder-&gt;CreateType();\n   }\n};\n\nint main()\n{\n   MyEnumBuilderSample::Main();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"EnumBuilder_Properties_5#2\">\nusing System;\nusing System.Collections;\nusing System.Threading;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\npublic class MyEnumBuilderSample\n{\n   static AssemblyBuilder myAssemblyBuilder;\n   static ModuleBuilder myModuleBuilder;\n   static EnumBuilder myEnumBuilder;\n   \n   public static void Main()\n   {\n      try\n      {\n         CreateCallee(Thread.GetDomain(), AssemblyBuilderAccess.Save);\n         Type[] myTypeArray = myModuleBuilder.GetTypes();\n         foreach(Type myType in myTypeArray)\n         {\n            Console.WriteLine(&quot;Enum Builder defined in the module builder is: &quot; \n               + myType.Name);\n         }\n\n         Console.WriteLine(&quot;Properties of EnumBuilder : &quot;);\n         Console.WriteLine(&quot;Enum Assembly is :&quot; +  myEnumBuilder.Assembly.ToString());\n         Console.WriteLine(&quot;Enum AssemblyQualifiedName is :&quot; +  \n                                 myEnumBuilder.AssemblyQualifiedName.ToString());\n         Console.WriteLine(&quot;Enum Module is :&quot; +  myEnumBuilder.Module.ToString());\n         Console.WriteLine(&quot;Enum Name is :&quot; +  myEnumBuilder.Name.ToString());\n         Console.WriteLine(&quot;Enum NameSpace is :&quot; +  myEnumBuilder.Namespace);\n         myAssemblyBuilder.Save(&quot;EmittedAssembly.dll&quot;);\n      }\n      catch(NotSupportedException ex)\n      {\n         Console.WriteLine(&quot;The following is the exception is raised: &quot; + ex.Message);\n      }\n      catch(Exception e)\n      {\n         Console.WriteLine(&quot;The following is the exception raised: &quot; + e.Message);\n      }\n   }\n\n   private static void CreateCallee(AppDomain myAppDomain, AssemblyBuilderAccess access)\n   {\n      // Create a name for the assembly.\n      AssemblyName myAssemblyName = new AssemblyName();\n      myAssemblyName.Name = &quot;EmittedAssembly&quot;;\n\n      // Create the dynamic assembly.\n      myAssemblyBuilder = myAppDomain.DefineDynamicAssembly(myAssemblyName, \n                                             AssemblyBuilderAccess.Save);\n\n      // Create a dynamic module.\n      myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;EmittedModule&quot;, \n                                                         &quot;EmittedModule.mod&quot;);\n\n      // Create a dynamic Enum.\n      myEnumBuilder = myModuleBuilder.DefineEnum(&quot;MyNamespace.MyEnum&quot;, \n                                 TypeAttributes.Public, typeof(Int32));\n\n      FieldBuilder myFieldBuilder1 = myEnumBuilder.DefineLiteral(&quot;FieldOne&quot;, 1);\n      FieldBuilder myFieldBuilder2 = myEnumBuilder.DefineLiteral(&quot;FieldTwo&quot;, 2);\n\n      myEnumBuilder.CreateType();\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"EnumBuilder_Properties_5#2\">Imports System\nImports System.Collections\nImports System.Threading\nImports System.Reflection\nImports System.Reflection.Emit\n\nPublic Class MyEnumBuilderSample\n   Private Shared myAssemblyBuilder As AssemblyBuilder\n   Private Shared myModuleBuilder As ModuleBuilder\n   Private Shared myEnumBuilder As EnumBuilder\n   \n   Public Shared Sub Main()\n      Try\n         CreateCallee(Thread.GetDomain(), AssemblyBuilderAccess.Save)\n         Dim myTypeArray As Type() = myModuleBuilder.GetTypes()\n         Dim myType As Type\n         For Each myType In  myTypeArray\n            Console.WriteLine(&quot;Enum Builder defined in the module builder is: &quot; + myType.Name)\n         Next myType\n         \n         Console.WriteLine(&quot;Properties of EnumBuilder : &quot;)\n         Console.WriteLine(&quot;Enum Assembly is :&quot; + myEnumBuilder.Assembly.ToString())\n         Console.WriteLine(&quot;Enum AssemblyQualifiedName is :&quot; + myEnumBuilder.AssemblyQualifiedName.ToString())\n         Console.WriteLine(&quot;Enum Module is :&quot; + myEnumBuilder.Module.ToString())\n         Console.WriteLine(&quot;Enum Name is :&quot; + myEnumBuilder.Name.ToString())\n         Console.WriteLine(&quot;Enum NameSpace is :&quot; + myEnumBuilder.Namespace)\n         myAssemblyBuilder.Save(&quot;EmittedAssembly.dll&quot;)\n      Catch ex As NotSupportedException\n         Console.WriteLine(&quot;The following is the exception is raised: &quot; + ex.Message)\n      Catch e As Exception\n         Console.WriteLine(&quot;The following is the exception raised: &quot; + e.Message)\n      End Try\n   End Sub &#39;Main\n   \n   Private Shared Sub CreateCallee(myAppDomain As AppDomain, access As AssemblyBuilderAccess)\n      &#39; Create a name for the assembly.\n      Dim myAssemblyName As New AssemblyName()\n      myAssemblyName.Name = &quot;EmittedAssembly&quot;\n      \n      &#39; Create the dynamic assembly.\n      myAssemblyBuilder = myAppDomain.DefineDynamicAssembly(myAssemblyName, _\n                AssemblyBuilderAccess.Save)\n      \n      &#39; Create a dynamic module.\n      myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;EmittedModule&quot;, &quot;EmittedModule.mod&quot;)\n      \n      &#39; Create a dynamic Enum.\n      myEnumBuilder = myModuleBuilder.DefineEnum(&quot;MyNamespace.MyEnum&quot;, _\n                 TypeAttributes.Public, GetType(Int32))\n      \n      Dim myFieldBuilder1 As FieldBuilder = myEnumBuilder.DefineLiteral(&quot;FieldOne&quot;, 1)\n      Dim myFieldBuilder2 As FieldBuilder = myEnumBuilder.DefineLiteral(&quot;FieldTwo&quot;, 2)\n      \n      myEnumBuilder.CreateType()\n   End Sub &#39;CreateCallee\nEnd Class &#39;MyEnumBuilderSample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_BaseType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_BaseType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BaseType</div>        \r\n          </div>\r\n    \r\n            <p>Returns the parent <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of this type which is always <a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type BaseType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>Read-only. The parent <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of this type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_DeclaringType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_DeclaringType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeclaringType</div>        \r\n          </div>\r\n    \r\n            <p>Returns the type that declared this <a class=\"xref\" href=\"system.reflection.emit.enumbuilder\" data-linktype=\"relative-path\">EnumBuilder</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type DeclaringType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>Read-only. The type that declared this <a class=\"xref\" href=\"system.reflection.emit.enumbuilder\" data-linktype=\"relative-path\">EnumBuilder</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_FullName\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_FullName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FullName</div>        \r\n          </div>\r\n    \r\n            <p>Returns the full path of this enum.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string FullName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Read-only. The full path of this enum.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned format is &quot;enclosingTypeFullName+nestedTypeName&quot; for nested types and &quot;typeName&quot; for non-nested types.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_GUID\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_GUID_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GUID</div>        \r\n          </div>\r\n    \r\n            <p>Returns the GUID of this enum.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Guid GUID { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </div>\r\n                  <p>Read-only. The GUID of this enum.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not currently supported in types that are not complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code sample demonstrates the use of the <code>GUID</code> property to reference the associated <a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a> of the current <code>EnumBuilder</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"EnumBuilder_Properties_4.cs#4\">Imports System\nImports System.Collections\nImports System.Threading\nImports System.Reflection\nImports System.Reflection.Emit\n\nPublic Class MyEnumBuilderSample\n   Private Shared myAssemblyBuilder As AssemblyBuilder\n   Private Shared myModuleBuilder As ModuleBuilder\n   Private Shared myEnumBuilder As EnumBuilder\n   \n   \n   Public Shared Sub Main()\n      Try\n         CreateCallee(Thread.GetDomain(), AssemblyBuilderAccess.Save)\n         Dim myTypeArray As Type() = myModuleBuilder.GetTypes()\n         Dim myType As Type\n         For Each myType In  myTypeArray\n            Console.WriteLine(&quot;Enum Builder defined in the module builder is: &quot; + myType.Name)\n         Next myType\n         \n         Console.WriteLine(&quot;Enum TypeToken is :&quot; + myEnumBuilder.TypeToken.ToString())\n         Console.WriteLine(&quot;Enum UnderLyingField is :&quot; + myEnumBuilder.UnderlyingField.ToString())\n         Console.WriteLine(&quot;Enum UnderLyingSystemType is :&quot; + myEnumBuilder.UnderlyingSystemType.ToString())\n         Console.WriteLine(&quot;Enum GUID is :&quot; + myEnumBuilder.GUID.ToString())\n         myAssemblyBuilder.Save(&quot;EmittedAssembly.dll&quot;)\n      Catch ex As NotSupportedException\n         Console.WriteLine(&quot;The following is the exception is raised: &quot; + ex.Message)\n      Catch e As Exception\n         Console.WriteLine(&quot;The following is the exception raised: &quot; + e.Message)\n      End Try\n   End Sub &#39;Main\n   \n   \n   Private Shared Sub CreateCallee(myAppDomain As AppDomain, access As AssemblyBuilderAccess)\n      &#39; Create a name for the assembly.\n      Dim myAssemblyName As New AssemblyName()\n      myAssemblyName.Name = &quot;EmittedAssembly&quot;\n      \n      &#39; Create the dynamic assembly.\n      myAssemblyBuilder = myAppDomain.DefineDynamicAssembly(myAssemblyName, _\n                 AssemblyBuilderAccess.Save)\n      &#39; Create a dynamic module.\n      myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;EmittedModule&quot;, &quot;EmittedModule.mod&quot;)\n      &#39; Create a dynamic Enum.\n      myEnumBuilder = myModuleBuilder.DefineEnum(&quot;MyNamespace.MyEnum&quot;, _\n                 TypeAttributes.Public, GetType(Int32))\n      \n      Dim myFieldBuilder1 As FieldBuilder = myEnumBuilder.DefineLiteral(&quot;FieldOne&quot;, 1)\n      Dim myFieldBuilder2 As FieldBuilder = myEnumBuilder.DefineLiteral(&quot;FieldTwo&quot;, 2)\n      \n      myEnumBuilder.CreateType()\n   End Sub &#39;CreateCallee\nEnd Class &#39;MyEnumBuilderSample\n</code></pre><pre><code class=\"lang-cpp\" name=\"EnumBuilder_Properties_4.cs#4\">using namespace System;\nusing namespace System::Collections;\nusing namespace System::Threading;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\npublic ref class MyEnumBuilderSample\n{\nprivate:\n   static AssemblyBuilder^ myAssemblyBuilder;\n   static ModuleBuilder^ myModuleBuilder;\n   static EnumBuilder^ myEnumBuilder;\n\npublic:\n   static void Main()\n   {\n      try\n      {\n         CreateCallee( Thread::GetDomain(), AssemblyBuilderAccess::Save );\n         array&lt;Type^&gt;^myTypeArray = myModuleBuilder-&gt;GetTypes();\n         IEnumerator^ myEnum = myTypeArray-&gt;GetEnumerator();\n         while ( myEnum-&gt;MoveNext() )\n         {\n            Type^ myType = safe_cast&lt;Type^&gt;(myEnum-&gt;Current);\n            Console::WriteLine( &quot;Enum Builder defined in the module builder is: {0}&quot;, myType-&gt;Name );\n         }\n         Console::WriteLine( &quot;Enum TypeToken is :{0}&quot;, myEnumBuilder-&gt;TypeToken );\n         Console::WriteLine( &quot;Enum UnderLyingField is :{0}&quot;, myEnumBuilder-&gt;UnderlyingField );\n         Console::WriteLine( &quot;Enum UnderLyingSystemType is :{0}&quot;, myEnumBuilder-&gt;UnderlyingSystemType );\n         Console::WriteLine( &quot;Enum GUID is :{0}&quot;, myEnumBuilder-&gt;GUID );\n         myAssemblyBuilder-&gt;Save( &quot;EmittedAssembly.dll&quot; );\n      }\n      catch ( NotSupportedException^ ex ) \n      {\n         Console::WriteLine( &quot;The following is the exception is raised: {0}&quot;, ex-&gt;Message );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;The following is the exception raised: {0}&quot;, e-&gt;Message );\n      }\n   }\n\n\nprivate:\n   static void CreateCallee( AppDomain^ myAppDomain, AssemblyBuilderAccess /*access*/ )\n   {\n      // Create a name for the assembly.\n      AssemblyName^ myAssemblyName = gcnew AssemblyName;\n      myAssemblyName-&gt;Name = &quot;EmittedAssembly&quot;;\n\n      // Create the dynamic assembly.\n      myAssemblyBuilder = myAppDomain-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::Save );\n\n      // Create a dynamic module.\n      myModuleBuilder = myAssemblyBuilder-&gt;DefineDynamicModule( &quot;EmittedModule&quot;, &quot;EmittedModule.mod&quot; );\n\n      // Create a dynamic Enum.\n      myEnumBuilder = myModuleBuilder-&gt;DefineEnum( &quot;MyNamespace.MyEnum&quot;, TypeAttributes::Public, Int32::typeid );\n      FieldBuilder^ myFieldBuilder1 = myEnumBuilder-&gt;DefineLiteral( &quot;FieldOne&quot;, 1 );\n      FieldBuilder^ myFieldBuilder2 = myEnumBuilder-&gt;DefineLiteral( &quot;FieldTwo&quot;, 2 );\n      myEnumBuilder-&gt;CreateType();\n   }\n};\n\nint main()\n{\n   MyEnumBuilderSample::Main();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"EnumBuilder_Properties_4.cs#4\">\nusing System;\nusing System.Collections;\nusing System.Threading;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\npublic class MyEnumBuilderSample\n{\n   static AssemblyBuilder myAssemblyBuilder;\n   static ModuleBuilder myModuleBuilder;\n   static EnumBuilder myEnumBuilder;\n   \n   public static void Main()\n   {\n      try\n      {\n         CreateCallee(Thread.GetDomain(), AssemblyBuilderAccess.Save);\n         Type[] myTypeArray = myModuleBuilder.GetTypes();\n         foreach(Type myType in myTypeArray)\n         {\n            Console.WriteLine(&quot;Enum Builder defined in the module builder is: &quot; \n               + myType.Name);\n         }\n\n         Console.WriteLine(&quot;Enum TypeToken is :&quot; +  \n                                       myEnumBuilder.TypeToken.ToString());\n         Console.WriteLine(&quot;Enum UnderLyingField is :&quot; +  \n                                    myEnumBuilder.UnderlyingField.ToString());\n         Console.WriteLine(&quot;Enum UnderLyingSystemType is :&quot; +  \n                              myEnumBuilder.UnderlyingSystemType.ToString());\n         Console.WriteLine(&quot;Enum GUID is :&quot; + myEnumBuilder.GUID.ToString());\n         myAssemblyBuilder.Save(&quot;EmittedAssembly.dll&quot;);\n      }\n      catch(NotSupportedException ex)\n      {\n         Console.WriteLine(&quot;The following is the exception is raised: &quot; + ex.Message);\n      }\n      catch(Exception e)\n      {\n         Console.WriteLine(&quot;The following is the exception raised: &quot; + e.Message);\n      }\n   }\n\n   private static void CreateCallee(AppDomain myAppDomain, AssemblyBuilderAccess access)\n   {\n      // Create a name for the assembly.\n      AssemblyName myAssemblyName = new AssemblyName();\n      myAssemblyName.Name = &quot;EmittedAssembly&quot;;\n\n      // Create the dynamic assembly.\n      myAssemblyBuilder = myAppDomain.DefineDynamicAssembly(myAssemblyName, \n                                             AssemblyBuilderAccess.Save);\n      // Create a dynamic module.\n      myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;EmittedModule&quot;, \n                                                         &quot;EmittedModule.mod&quot;);\n      // Create a dynamic Enum.\n      myEnumBuilder = myModuleBuilder.DefineEnum(&quot;MyNamespace.MyEnum&quot;, \n                                 TypeAttributes.Public, typeof(Int32));\n\n      FieldBuilder myFieldBuilder1 = myEnumBuilder.DefineLiteral(&quot;FieldOne&quot;, 1);\n      FieldBuilder myFieldBuilder2 = myEnumBuilder.DefineLiteral(&quot;FieldTwo&quot;, 2);\n\n      myEnumBuilder.CreateType();\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_IsConstructedGenericType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_IsConstructedGenericType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsConstructedGenericType</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether this object represents a constructed generic type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsConstructedGenericType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this object represents a constructed generic type; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_Module\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_Module_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Module</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the dynamic module that contains this <a class=\"xref\" href=\"system.reflection.emit.enumbuilder\" data-linktype=\"relative-path\">EnumBuilder</a> definition.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.Module Module { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a></div>\r\n                  </div>\r\n                  <p>Read-only. The dynamic module that contains this <a class=\"xref\" href=\"system.reflection.emit.enumbuilder\" data-linktype=\"relative-path\">EnumBuilder</a> definition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code sample demonstrates the use of the <code>Module</code> property to reference the parent module of the current <code>EnumBuilder</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"EnumBuilder_Properties_5#3\">using namespace System;\nusing namespace System::Collections;\nusing namespace System::Threading;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\n\npublic ref class MyEnumBuilderSample\n{\nprivate:\n   static AssemblyBuilder^ myAssemblyBuilder;\n   static ModuleBuilder^ myModuleBuilder;\n   static EnumBuilder^ myEnumBuilder;\n\npublic:\n   static void Main()\n   {\n      try\n      {\n         CreateCallee( Thread::GetDomain(), AssemblyBuilderAccess::Save );\n         array&lt;Type^&gt;^myTypeArray = myModuleBuilder-&gt;GetTypes();\n         IEnumerator^ myEnum = myTypeArray-&gt;GetEnumerator();\n         while ( myEnum-&gt;MoveNext() )\n         {\n            Type^ myType = safe_cast&lt;Type^&gt;(myEnum-&gt;Current);\n            Console::WriteLine( &quot;Enum Builder defined in the module builder is: {0}&quot;, myType-&gt;Name );\n         }\n         Console::WriteLine( &quot;Properties of EnumBuilder : &quot; );\n         Console::WriteLine( &quot;Enum Assembly is :{0}&quot;, myEnumBuilder-&gt;Assembly );\n         Console::WriteLine( &quot;Enum AssemblyQualifiedName is :{0}&quot;, myEnumBuilder-&gt;AssemblyQualifiedName );\n         Console::WriteLine( &quot;Enum Module is :{0}&quot;, myEnumBuilder-&gt;Module );\n         Console::WriteLine( &quot;Enum Name is :{0}&quot;, myEnumBuilder-&gt;Name );\n         Console::WriteLine( &quot;Enum NameSpace is :{0}&quot;, myEnumBuilder-&gt;Namespace );\n         myAssemblyBuilder-&gt;Save( &quot;EmittedAssembly.dll&quot; );\n      }\n      catch ( NotSupportedException^ ex ) \n      {\n         Console::WriteLine( &quot;The following is the exception is raised: {0}&quot;, ex-&gt;Message );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;The following is the exception raised: {0}&quot;, e-&gt;Message );\n      }\n   }\n\nprivate:\n   static void CreateCallee( AppDomain^ myAppDomain, AssemblyBuilderAccess /*access*/ )\n   {\n      // Create a name for the assembly.\n      AssemblyName^ myAssemblyName = gcnew AssemblyName;\n      myAssemblyName-&gt;Name = &quot;EmittedAssembly&quot;;\n\n      // Create the dynamic assembly.\n      myAssemblyBuilder = myAppDomain-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::Save );\n\n      // Create a dynamic module.\n      myModuleBuilder = myAssemblyBuilder-&gt;DefineDynamicModule( &quot;EmittedModule&quot;, &quot;EmittedModule.mod&quot; );\n\n      // Create a dynamic Enum.\n      myEnumBuilder = myModuleBuilder-&gt;DefineEnum( &quot;MyNamespace.MyEnum&quot;, TypeAttributes::Public, Int32::typeid );\n      FieldBuilder^ myFieldBuilder1 = myEnumBuilder-&gt;DefineLiteral( &quot;FieldOne&quot;, 1 );\n      FieldBuilder^ myFieldBuilder2 = myEnumBuilder-&gt;DefineLiteral( &quot;FieldTwo&quot;, 2 );\n      myEnumBuilder-&gt;CreateType();\n   }\n};\n\nint main()\n{\n   MyEnumBuilderSample::Main();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"EnumBuilder_Properties_5#3\">\nusing System;\nusing System.Collections;\nusing System.Threading;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\npublic class MyEnumBuilderSample\n{\n   static AssemblyBuilder myAssemblyBuilder;\n   static ModuleBuilder myModuleBuilder;\n   static EnumBuilder myEnumBuilder;\n   \n   public static void Main()\n   {\n      try\n      {\n         CreateCallee(Thread.GetDomain(), AssemblyBuilderAccess.Save);\n         Type[] myTypeArray = myModuleBuilder.GetTypes();\n         foreach(Type myType in myTypeArray)\n         {\n            Console.WriteLine(&quot;Enum Builder defined in the module builder is: &quot; \n               + myType.Name);\n         }\n\n         Console.WriteLine(&quot;Properties of EnumBuilder : &quot;);\n         Console.WriteLine(&quot;Enum Assembly is :&quot; +  myEnumBuilder.Assembly.ToString());\n         Console.WriteLine(&quot;Enum AssemblyQualifiedName is :&quot; +  \n                                 myEnumBuilder.AssemblyQualifiedName.ToString());\n         Console.WriteLine(&quot;Enum Module is :&quot; +  myEnumBuilder.Module.ToString());\n         Console.WriteLine(&quot;Enum Name is :&quot; +  myEnumBuilder.Name.ToString());\n         Console.WriteLine(&quot;Enum NameSpace is :&quot; +  myEnumBuilder.Namespace);\n         myAssemblyBuilder.Save(&quot;EmittedAssembly.dll&quot;);\n      }\n      catch(NotSupportedException ex)\n      {\n         Console.WriteLine(&quot;The following is the exception is raised: &quot; + ex.Message);\n      }\n      catch(Exception e)\n      {\n         Console.WriteLine(&quot;The following is the exception raised: &quot; + e.Message);\n      }\n   }\n\n   private static void CreateCallee(AppDomain myAppDomain, AssemblyBuilderAccess access)\n   {\n      // Create a name for the assembly.\n      AssemblyName myAssemblyName = new AssemblyName();\n      myAssemblyName.Name = &quot;EmittedAssembly&quot;;\n\n      // Create the dynamic assembly.\n      myAssemblyBuilder = myAppDomain.DefineDynamicAssembly(myAssemblyName, \n                                             AssemblyBuilderAccess.Save);\n\n      // Create a dynamic module.\n      myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;EmittedModule&quot;, \n                                                         &quot;EmittedModule.mod&quot;);\n\n      // Create a dynamic Enum.\n      myEnumBuilder = myModuleBuilder.DefineEnum(&quot;MyNamespace.MyEnum&quot;, \n                                 TypeAttributes.Public, typeof(Int32));\n\n      FieldBuilder myFieldBuilder1 = myEnumBuilder.DefineLiteral(&quot;FieldOne&quot;, 1);\n      FieldBuilder myFieldBuilder2 = myEnumBuilder.DefineLiteral(&quot;FieldTwo&quot;, 2);\n\n      myEnumBuilder.CreateType();\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"EnumBuilder_Properties_5#3\">Imports System\nImports System.Collections\nImports System.Threading\nImports System.Reflection\nImports System.Reflection.Emit\n\nPublic Class MyEnumBuilderSample\n   Private Shared myAssemblyBuilder As AssemblyBuilder\n   Private Shared myModuleBuilder As ModuleBuilder\n   Private Shared myEnumBuilder As EnumBuilder\n   \n   Public Shared Sub Main()\n      Try\n         CreateCallee(Thread.GetDomain(), AssemblyBuilderAccess.Save)\n         Dim myTypeArray As Type() = myModuleBuilder.GetTypes()\n         Dim myType As Type\n         For Each myType In  myTypeArray\n            Console.WriteLine(&quot;Enum Builder defined in the module builder is: &quot; + myType.Name)\n         Next myType\n         \n         Console.WriteLine(&quot;Properties of EnumBuilder : &quot;)\n         Console.WriteLine(&quot;Enum Assembly is :&quot; + myEnumBuilder.Assembly.ToString())\n         Console.WriteLine(&quot;Enum AssemblyQualifiedName is :&quot; + myEnumBuilder.AssemblyQualifiedName.ToString())\n         Console.WriteLine(&quot;Enum Module is :&quot; + myEnumBuilder.Module.ToString())\n         Console.WriteLine(&quot;Enum Name is :&quot; + myEnumBuilder.Name.ToString())\n         Console.WriteLine(&quot;Enum NameSpace is :&quot; + myEnumBuilder.Namespace)\n         myAssemblyBuilder.Save(&quot;EmittedAssembly.dll&quot;)\n      Catch ex As NotSupportedException\n         Console.WriteLine(&quot;The following is the exception is raised: &quot; + ex.Message)\n      Catch e As Exception\n         Console.WriteLine(&quot;The following is the exception raised: &quot; + e.Message)\n      End Try\n   End Sub &#39;Main\n   \n   Private Shared Sub CreateCallee(myAppDomain As AppDomain, access As AssemblyBuilderAccess)\n      &#39; Create a name for the assembly.\n      Dim myAssemblyName As New AssemblyName()\n      myAssemblyName.Name = &quot;EmittedAssembly&quot;\n      \n      &#39; Create the dynamic assembly.\n      myAssemblyBuilder = myAppDomain.DefineDynamicAssembly(myAssemblyName, _\n                AssemblyBuilderAccess.Save)\n      \n      &#39; Create a dynamic module.\n      myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;EmittedModule&quot;, &quot;EmittedModule.mod&quot;)\n      \n      &#39; Create a dynamic Enum.\n      myEnumBuilder = myModuleBuilder.DefineEnum(&quot;MyNamespace.MyEnum&quot;, _\n                 TypeAttributes.Public, GetType(Int32))\n      \n      Dim myFieldBuilder1 As FieldBuilder = myEnumBuilder.DefineLiteral(&quot;FieldOne&quot;, 1)\n      Dim myFieldBuilder2 As FieldBuilder = myEnumBuilder.DefineLiteral(&quot;FieldTwo&quot;, 2)\n      \n      myEnumBuilder.CreateType()\n   End Sub &#39;CreateCallee\nEnd Class &#39;MyEnumBuilderSample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_Name\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_Name_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Name</div>        \r\n          </div>\r\n    \r\n            <p>Returns the name of this enum.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string Name { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Read-only. The name of this enum.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code sample demonstrates the use of the <code>Name</code> property to reference the name of the current <code>EnumBuilder</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"EnumBuilder_Properties_5#4\">using namespace System;\nusing namespace System::Collections;\nusing namespace System::Threading;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\n\npublic ref class MyEnumBuilderSample\n{\nprivate:\n   static AssemblyBuilder^ myAssemblyBuilder;\n   static ModuleBuilder^ myModuleBuilder;\n   static EnumBuilder^ myEnumBuilder;\n\npublic:\n   static void Main()\n   {\n      try\n      {\n         CreateCallee( Thread::GetDomain(), AssemblyBuilderAccess::Save );\n         array&lt;Type^&gt;^myTypeArray = myModuleBuilder-&gt;GetTypes();\n         IEnumerator^ myEnum = myTypeArray-&gt;GetEnumerator();\n         while ( myEnum-&gt;MoveNext() )\n         {\n            Type^ myType = safe_cast&lt;Type^&gt;(myEnum-&gt;Current);\n            Console::WriteLine( &quot;Enum Builder defined in the module builder is: {0}&quot;, myType-&gt;Name );\n         }\n         Console::WriteLine( &quot;Properties of EnumBuilder : &quot; );\n         Console::WriteLine( &quot;Enum Assembly is :{0}&quot;, myEnumBuilder-&gt;Assembly );\n         Console::WriteLine( &quot;Enum AssemblyQualifiedName is :{0}&quot;, myEnumBuilder-&gt;AssemblyQualifiedName );\n         Console::WriteLine( &quot;Enum Module is :{0}&quot;, myEnumBuilder-&gt;Module );\n         Console::WriteLine( &quot;Enum Name is :{0}&quot;, myEnumBuilder-&gt;Name );\n         Console::WriteLine( &quot;Enum NameSpace is :{0}&quot;, myEnumBuilder-&gt;Namespace );\n         myAssemblyBuilder-&gt;Save( &quot;EmittedAssembly.dll&quot; );\n      }\n      catch ( NotSupportedException^ ex ) \n      {\n         Console::WriteLine( &quot;The following is the exception is raised: {0}&quot;, ex-&gt;Message );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;The following is the exception raised: {0}&quot;, e-&gt;Message );\n      }\n   }\n\nprivate:\n   static void CreateCallee( AppDomain^ myAppDomain, AssemblyBuilderAccess /*access*/ )\n   {\n      // Create a name for the assembly.\n      AssemblyName^ myAssemblyName = gcnew AssemblyName;\n      myAssemblyName-&gt;Name = &quot;EmittedAssembly&quot;;\n\n      // Create the dynamic assembly.\n      myAssemblyBuilder = myAppDomain-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::Save );\n\n      // Create a dynamic module.\n      myModuleBuilder = myAssemblyBuilder-&gt;DefineDynamicModule( &quot;EmittedModule&quot;, &quot;EmittedModule.mod&quot; );\n\n      // Create a dynamic Enum.\n      myEnumBuilder = myModuleBuilder-&gt;DefineEnum( &quot;MyNamespace.MyEnum&quot;, TypeAttributes::Public, Int32::typeid );\n      FieldBuilder^ myFieldBuilder1 = myEnumBuilder-&gt;DefineLiteral( &quot;FieldOne&quot;, 1 );\n      FieldBuilder^ myFieldBuilder2 = myEnumBuilder-&gt;DefineLiteral( &quot;FieldTwo&quot;, 2 );\n      myEnumBuilder-&gt;CreateType();\n   }\n};\n\nint main()\n{\n   MyEnumBuilderSample::Main();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"EnumBuilder_Properties_5#4\">\nusing System;\nusing System.Collections;\nusing System.Threading;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\npublic class MyEnumBuilderSample\n{\n   static AssemblyBuilder myAssemblyBuilder;\n   static ModuleBuilder myModuleBuilder;\n   static EnumBuilder myEnumBuilder;\n   \n   public static void Main()\n   {\n      try\n      {\n         CreateCallee(Thread.GetDomain(), AssemblyBuilderAccess.Save);\n         Type[] myTypeArray = myModuleBuilder.GetTypes();\n         foreach(Type myType in myTypeArray)\n         {\n            Console.WriteLine(&quot;Enum Builder defined in the module builder is: &quot; \n               + myType.Name);\n         }\n\n         Console.WriteLine(&quot;Properties of EnumBuilder : &quot;);\n         Console.WriteLine(&quot;Enum Assembly is :&quot; +  myEnumBuilder.Assembly.ToString());\n         Console.WriteLine(&quot;Enum AssemblyQualifiedName is :&quot; +  \n                                 myEnumBuilder.AssemblyQualifiedName.ToString());\n         Console.WriteLine(&quot;Enum Module is :&quot; +  myEnumBuilder.Module.ToString());\n         Console.WriteLine(&quot;Enum Name is :&quot; +  myEnumBuilder.Name.ToString());\n         Console.WriteLine(&quot;Enum NameSpace is :&quot; +  myEnumBuilder.Namespace);\n         myAssemblyBuilder.Save(&quot;EmittedAssembly.dll&quot;);\n      }\n      catch(NotSupportedException ex)\n      {\n         Console.WriteLine(&quot;The following is the exception is raised: &quot; + ex.Message);\n      }\n      catch(Exception e)\n      {\n         Console.WriteLine(&quot;The following is the exception raised: &quot; + e.Message);\n      }\n   }\n\n   private static void CreateCallee(AppDomain myAppDomain, AssemblyBuilderAccess access)\n   {\n      // Create a name for the assembly.\n      AssemblyName myAssemblyName = new AssemblyName();\n      myAssemblyName.Name = &quot;EmittedAssembly&quot;;\n\n      // Create the dynamic assembly.\n      myAssemblyBuilder = myAppDomain.DefineDynamicAssembly(myAssemblyName, \n                                             AssemblyBuilderAccess.Save);\n\n      // Create a dynamic module.\n      myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;EmittedModule&quot;, \n                                                         &quot;EmittedModule.mod&quot;);\n\n      // Create a dynamic Enum.\n      myEnumBuilder = myModuleBuilder.DefineEnum(&quot;MyNamespace.MyEnum&quot;, \n                                 TypeAttributes.Public, typeof(Int32));\n\n      FieldBuilder myFieldBuilder1 = myEnumBuilder.DefineLiteral(&quot;FieldOne&quot;, 1);\n      FieldBuilder myFieldBuilder2 = myEnumBuilder.DefineLiteral(&quot;FieldTwo&quot;, 2);\n\n      myEnumBuilder.CreateType();\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"EnumBuilder_Properties_5#4\">Imports System\nImports System.Collections\nImports System.Threading\nImports System.Reflection\nImports System.Reflection.Emit\n\nPublic Class MyEnumBuilderSample\n   Private Shared myAssemblyBuilder As AssemblyBuilder\n   Private Shared myModuleBuilder As ModuleBuilder\n   Private Shared myEnumBuilder As EnumBuilder\n   \n   Public Shared Sub Main()\n      Try\n         CreateCallee(Thread.GetDomain(), AssemblyBuilderAccess.Save)\n         Dim myTypeArray As Type() = myModuleBuilder.GetTypes()\n         Dim myType As Type\n         For Each myType In  myTypeArray\n            Console.WriteLine(&quot;Enum Builder defined in the module builder is: &quot; + myType.Name)\n         Next myType\n         \n         Console.WriteLine(&quot;Properties of EnumBuilder : &quot;)\n         Console.WriteLine(&quot;Enum Assembly is :&quot; + myEnumBuilder.Assembly.ToString())\n         Console.WriteLine(&quot;Enum AssemblyQualifiedName is :&quot; + myEnumBuilder.AssemblyQualifiedName.ToString())\n         Console.WriteLine(&quot;Enum Module is :&quot; + myEnumBuilder.Module.ToString())\n         Console.WriteLine(&quot;Enum Name is :&quot; + myEnumBuilder.Name.ToString())\n         Console.WriteLine(&quot;Enum NameSpace is :&quot; + myEnumBuilder.Namespace)\n         myAssemblyBuilder.Save(&quot;EmittedAssembly.dll&quot;)\n      Catch ex As NotSupportedException\n         Console.WriteLine(&quot;The following is the exception is raised: &quot; + ex.Message)\n      Catch e As Exception\n         Console.WriteLine(&quot;The following is the exception raised: &quot; + e.Message)\n      End Try\n   End Sub &#39;Main\n   \n   Private Shared Sub CreateCallee(myAppDomain As AppDomain, access As AssemblyBuilderAccess)\n      &#39; Create a name for the assembly.\n      Dim myAssemblyName As New AssemblyName()\n      myAssemblyName.Name = &quot;EmittedAssembly&quot;\n      \n      &#39; Create the dynamic assembly.\n      myAssemblyBuilder = myAppDomain.DefineDynamicAssembly(myAssemblyName, _\n                AssemblyBuilderAccess.Save)\n      \n      &#39; Create a dynamic module.\n      myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;EmittedModule&quot;, &quot;EmittedModule.mod&quot;)\n      \n      &#39; Create a dynamic Enum.\n      myEnumBuilder = myModuleBuilder.DefineEnum(&quot;MyNamespace.MyEnum&quot;, _\n                 TypeAttributes.Public, GetType(Int32))\n      \n      Dim myFieldBuilder1 As FieldBuilder = myEnumBuilder.DefineLiteral(&quot;FieldOne&quot;, 1)\n      Dim myFieldBuilder2 As FieldBuilder = myEnumBuilder.DefineLiteral(&quot;FieldTwo&quot;, 2)\n      \n      myEnumBuilder.CreateType()\n   End Sub &#39;CreateCallee\nEnd Class &#39;MyEnumBuilderSample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_Namespace\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_Namespace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Namespace</div>        \r\n          </div>\r\n    \r\n            <p>Returns the namespace of this enum.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string Namespace { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Read-only. The namespace of this enum.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code sample demonstrates the use of the <code>Namespace</code> property to reference the associated namespace of the current <code>EnumBuilder</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"EnumBuilder_Properties_5#5\">using namespace System;\nusing namespace System::Collections;\nusing namespace System::Threading;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\n\npublic ref class MyEnumBuilderSample\n{\nprivate:\n   static AssemblyBuilder^ myAssemblyBuilder;\n   static ModuleBuilder^ myModuleBuilder;\n   static EnumBuilder^ myEnumBuilder;\n\npublic:\n   static void Main()\n   {\n      try\n      {\n         CreateCallee( Thread::GetDomain(), AssemblyBuilderAccess::Save );\n         array&lt;Type^&gt;^myTypeArray = myModuleBuilder-&gt;GetTypes();\n         IEnumerator^ myEnum = myTypeArray-&gt;GetEnumerator();\n         while ( myEnum-&gt;MoveNext() )\n         {\n            Type^ myType = safe_cast&lt;Type^&gt;(myEnum-&gt;Current);\n            Console::WriteLine( &quot;Enum Builder defined in the module builder is: {0}&quot;, myType-&gt;Name );\n         }\n         Console::WriteLine( &quot;Properties of EnumBuilder : &quot; );\n         Console::WriteLine( &quot;Enum Assembly is :{0}&quot;, myEnumBuilder-&gt;Assembly );\n         Console::WriteLine( &quot;Enum AssemblyQualifiedName is :{0}&quot;, myEnumBuilder-&gt;AssemblyQualifiedName );\n         Console::WriteLine( &quot;Enum Module is :{0}&quot;, myEnumBuilder-&gt;Module );\n         Console::WriteLine( &quot;Enum Name is :{0}&quot;, myEnumBuilder-&gt;Name );\n         Console::WriteLine( &quot;Enum NameSpace is :{0}&quot;, myEnumBuilder-&gt;Namespace );\n         myAssemblyBuilder-&gt;Save( &quot;EmittedAssembly.dll&quot; );\n      }\n      catch ( NotSupportedException^ ex ) \n      {\n         Console::WriteLine( &quot;The following is the exception is raised: {0}&quot;, ex-&gt;Message );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;The following is the exception raised: {0}&quot;, e-&gt;Message );\n      }\n   }\n\nprivate:\n   static void CreateCallee( AppDomain^ myAppDomain, AssemblyBuilderAccess /*access*/ )\n   {\n      // Create a name for the assembly.\n      AssemblyName^ myAssemblyName = gcnew AssemblyName;\n      myAssemblyName-&gt;Name = &quot;EmittedAssembly&quot;;\n\n      // Create the dynamic assembly.\n      myAssemblyBuilder = myAppDomain-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::Save );\n\n      // Create a dynamic module.\n      myModuleBuilder = myAssemblyBuilder-&gt;DefineDynamicModule( &quot;EmittedModule&quot;, &quot;EmittedModule.mod&quot; );\n\n      // Create a dynamic Enum.\n      myEnumBuilder = myModuleBuilder-&gt;DefineEnum( &quot;MyNamespace.MyEnum&quot;, TypeAttributes::Public, Int32::typeid );\n      FieldBuilder^ myFieldBuilder1 = myEnumBuilder-&gt;DefineLiteral( &quot;FieldOne&quot;, 1 );\n      FieldBuilder^ myFieldBuilder2 = myEnumBuilder-&gt;DefineLiteral( &quot;FieldTwo&quot;, 2 );\n      myEnumBuilder-&gt;CreateType();\n   }\n};\n\nint main()\n{\n   MyEnumBuilderSample::Main();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"EnumBuilder_Properties_5#5\">\nusing System;\nusing System.Collections;\nusing System.Threading;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\npublic class MyEnumBuilderSample\n{\n   static AssemblyBuilder myAssemblyBuilder;\n   static ModuleBuilder myModuleBuilder;\n   static EnumBuilder myEnumBuilder;\n   \n   public static void Main()\n   {\n      try\n      {\n         CreateCallee(Thread.GetDomain(), AssemblyBuilderAccess.Save);\n         Type[] myTypeArray = myModuleBuilder.GetTypes();\n         foreach(Type myType in myTypeArray)\n         {\n            Console.WriteLine(&quot;Enum Builder defined in the module builder is: &quot; \n               + myType.Name);\n         }\n\n         Console.WriteLine(&quot;Properties of EnumBuilder : &quot;);\n         Console.WriteLine(&quot;Enum Assembly is :&quot; +  myEnumBuilder.Assembly.ToString());\n         Console.WriteLine(&quot;Enum AssemblyQualifiedName is :&quot; +  \n                                 myEnumBuilder.AssemblyQualifiedName.ToString());\n         Console.WriteLine(&quot;Enum Module is :&quot; +  myEnumBuilder.Module.ToString());\n         Console.WriteLine(&quot;Enum Name is :&quot; +  myEnumBuilder.Name.ToString());\n         Console.WriteLine(&quot;Enum NameSpace is :&quot; +  myEnumBuilder.Namespace);\n         myAssemblyBuilder.Save(&quot;EmittedAssembly.dll&quot;);\n      }\n      catch(NotSupportedException ex)\n      {\n         Console.WriteLine(&quot;The following is the exception is raised: &quot; + ex.Message);\n      }\n      catch(Exception e)\n      {\n         Console.WriteLine(&quot;The following is the exception raised: &quot; + e.Message);\n      }\n   }\n\n   private static void CreateCallee(AppDomain myAppDomain, AssemblyBuilderAccess access)\n   {\n      // Create a name for the assembly.\n      AssemblyName myAssemblyName = new AssemblyName();\n      myAssemblyName.Name = &quot;EmittedAssembly&quot;;\n\n      // Create the dynamic assembly.\n      myAssemblyBuilder = myAppDomain.DefineDynamicAssembly(myAssemblyName, \n                                             AssemblyBuilderAccess.Save);\n\n      // Create a dynamic module.\n      myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;EmittedModule&quot;, \n                                                         &quot;EmittedModule.mod&quot;);\n\n      // Create a dynamic Enum.\n      myEnumBuilder = myModuleBuilder.DefineEnum(&quot;MyNamespace.MyEnum&quot;, \n                                 TypeAttributes.Public, typeof(Int32));\n\n      FieldBuilder myFieldBuilder1 = myEnumBuilder.DefineLiteral(&quot;FieldOne&quot;, 1);\n      FieldBuilder myFieldBuilder2 = myEnumBuilder.DefineLiteral(&quot;FieldTwo&quot;, 2);\n\n      myEnumBuilder.CreateType();\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"EnumBuilder_Properties_5#5\">Imports System\nImports System.Collections\nImports System.Threading\nImports System.Reflection\nImports System.Reflection.Emit\n\nPublic Class MyEnumBuilderSample\n   Private Shared myAssemblyBuilder As AssemblyBuilder\n   Private Shared myModuleBuilder As ModuleBuilder\n   Private Shared myEnumBuilder As EnumBuilder\n   \n   Public Shared Sub Main()\n      Try\n         CreateCallee(Thread.GetDomain(), AssemblyBuilderAccess.Save)\n         Dim myTypeArray As Type() = myModuleBuilder.GetTypes()\n         Dim myType As Type\n         For Each myType In  myTypeArray\n            Console.WriteLine(&quot;Enum Builder defined in the module builder is: &quot; + myType.Name)\n         Next myType\n         \n         Console.WriteLine(&quot;Properties of EnumBuilder : &quot;)\n         Console.WriteLine(&quot;Enum Assembly is :&quot; + myEnumBuilder.Assembly.ToString())\n         Console.WriteLine(&quot;Enum AssemblyQualifiedName is :&quot; + myEnumBuilder.AssemblyQualifiedName.ToString())\n         Console.WriteLine(&quot;Enum Module is :&quot; + myEnumBuilder.Module.ToString())\n         Console.WriteLine(&quot;Enum Name is :&quot; + myEnumBuilder.Name.ToString())\n         Console.WriteLine(&quot;Enum NameSpace is :&quot; + myEnumBuilder.Namespace)\n         myAssemblyBuilder.Save(&quot;EmittedAssembly.dll&quot;)\n      Catch ex As NotSupportedException\n         Console.WriteLine(&quot;The following is the exception is raised: &quot; + ex.Message)\n      Catch e As Exception\n         Console.WriteLine(&quot;The following is the exception raised: &quot; + e.Message)\n      End Try\n   End Sub &#39;Main\n   \n   Private Shared Sub CreateCallee(myAppDomain As AppDomain, access As AssemblyBuilderAccess)\n      &#39; Create a name for the assembly.\n      Dim myAssemblyName As New AssemblyName()\n      myAssemblyName.Name = &quot;EmittedAssembly&quot;\n      \n      &#39; Create the dynamic assembly.\n      myAssemblyBuilder = myAppDomain.DefineDynamicAssembly(myAssemblyName, _\n                AssemblyBuilderAccess.Save)\n      \n      &#39; Create a dynamic module.\n      myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;EmittedModule&quot;, &quot;EmittedModule.mod&quot;)\n      \n      &#39; Create a dynamic Enum.\n      myEnumBuilder = myModuleBuilder.DefineEnum(&quot;MyNamespace.MyEnum&quot;, _\n                 TypeAttributes.Public, GetType(Int32))\n      \n      Dim myFieldBuilder1 As FieldBuilder = myEnumBuilder.DefineLiteral(&quot;FieldOne&quot;, 1)\n      Dim myFieldBuilder2 As FieldBuilder = myEnumBuilder.DefineLiteral(&quot;FieldTwo&quot;, 2)\n      \n      myEnumBuilder.CreateType()\n   End Sub &#39;CreateCallee\nEnd Class &#39;MyEnumBuilderSample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_ReflectedType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_ReflectedType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReflectedType</div>        \r\n          </div>\r\n    \r\n            <p>Returns the type that was used to obtain this <a class=\"xref\" href=\"system.reflection.emit.enumbuilder\" data-linktype=\"relative-path\">EnumBuilder</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type ReflectedType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>Read-only. The type that was used to obtain this <a class=\"xref\" href=\"system.reflection.emit.enumbuilder\" data-linktype=\"relative-path\">EnumBuilder</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_TypeHandle\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_TypeHandle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TypeHandle</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the internal handle for this enum.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override RuntimeTypeHandle TypeHandle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtimetypehandle\" data-linktype=\"relative-path\">RuntimeTypeHandle</a></div>\r\n                  </div>\r\n                  <p>Read-only. The internal handle for this enum.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This property is not currently supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> and use reflection on the retrieved type.  </p>\n<p> Use this handle to access the underlying metadata handle.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_TypeToken\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_TypeToken_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TypeToken</div>        \r\n          </div>\r\n    \r\n            <p>Returns the internal metadata type token of this enum.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.TypeToken TypeToken { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.typetoken\" data-linktype=\"relative-path\">TypeToken</a></div>\r\n                  </div>\r\n                  <p>Read-only. The type token of this enum.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_UnderlyingField\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_UnderlyingField_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UnderlyingField</div>        \r\n          </div>\r\n    \r\n            <p>Returns the underlying field for this enum.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.FieldBuilder UnderlyingField { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.fieldbuilder\" data-linktype=\"relative-path\">FieldBuilder</a></div>\r\n                  </div>\r\n                  <p>Read-only. The underlying field for this enum.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_UnderlyingSystemType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_UnderlyingSystemType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UnderlyingSystemType</div>        \r\n          </div>\r\n    \r\n            <p>Returns the underlying system type for this enum.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type UnderlyingSystemType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>Read-only. Returns the underlying system type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_CreateType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_CreateType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateType()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object for this enum.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Type CreateType ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object for this enum.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This type has been previously created.  </p>\n<p> -or-  </p>\n<p> The enclosing type has not been created.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_CreateTypeInfo\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_CreateTypeInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateTypeInfo()</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.reflection.typeinfo\" data-linktype=\"relative-path\">TypeInfo</a> object that represents this enumeration.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.TypeInfo CreateTypeInfo ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.typeinfo\" data-linktype=\"relative-path\">System.Reflection.TypeInfo</a></div>\r\n                  </div>\r\n                  <p>An object that represents this enumeration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_DefineLiteral_System_String_System_Object_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_DefineLiteral_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineLiteral(String,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Defines the named static field in an enumeration type with the specified constant value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.FieldBuilder DefineLiteral (string literalName, object literalValue);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>literalName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the static field.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>literalValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The constant value of the literal.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.fieldbuilder\" data-linktype=\"relative-path\">FieldBuilder</a></div>\r\n                  </div>\r\n                  <p>The defined field.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The defined field will have the field attributes <a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">FieldAttributes</a>, <a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">FieldAttributes</a>, and <a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">FieldAttributes</a> set.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework versions 1.0 and 1.1, it is necessary to define enumerations using <a class=\"xref\" href=\"system.reflection.emit.typebuilder\" data-linktype=\"relative-path\">TypeBuilder</a> because <a class=\"xref\" href=\"system.reflection.emit.enumbuilder\" data-linktype=\"relative-path\">EnumBuilder</a> emits enumerations whose elements are of type <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> instead of the enumeration type. In the .NET Framework version 2.0, <a class=\"xref\" href=\"system.reflection.emit.enumbuilder\" data-linktype=\"relative-path\">EnumBuilder</a> emits enumerations whose elements have the correct type.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the construction of an enumeration within a dynamic assembly, using <code>EnumBuilder</code>. The example defines an enumeration named <code>Elevation</code>, with an underlying type of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, and creates two elements: <code>Low</code>, with a value of 0, and <code>High</code>, with a value of 1. After the type has been created, the assembly is saved with the name <code>TempAssembly.dll</code>. You can use the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a> to examine the contents of this assembly.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Prior to the .NET Framework version 2.0, this code example does not produce a correct enumeration.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"ModuleBuilder_DefineEnum#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\nclass Example\n{\n    public static void Main()\n    {\n        // Get the current application domain for the current thread.\n        AppDomain currentDomain = AppDomain.CurrentDomain;\n      \n        // Create a dynamic assembly in the current application domain, \n        // and allow it to be executed and saved to disk.\n        AssemblyName aName = new AssemblyName(&quot;TempAssembly&quot;);\n        AssemblyBuilder ab = currentDomain.DefineDynamicAssembly(\n            aName, AssemblyBuilderAccess.RunAndSave);\n      \n        // Define a dynamic module in &quot;TempAssembly&quot; assembly. For a single-\n        // module assembly, the module has the same name as the assembly.\n        ModuleBuilder mb = ab.DefineDynamicModule(aName.Name, aName.Name + &quot;.dll&quot;);\n      \n        // Define a public enumeration with the name &quot;Elevation&quot; and an \n        // underlying type of Integer.\n        EnumBuilder eb = mb.DefineEnum(&quot;Elevation&quot;, TypeAttributes.Public, typeof(int));\n      \n        // Define two members, &quot;High&quot; and &quot;Low&quot;.\n        eb.DefineLiteral(&quot;Low&quot;, 0);\n        eb.DefineLiteral(&quot;High&quot;, 1);\n\n        // Create the type and save the assembly.\n        Type finished = eb.CreateType();\n        ab.Save(aName.Name + &quot;.dll&quot;);\n\n        foreach( object o in Enum.GetValues(finished) )\n        {\n            Console.WriteLine(&quot;{0}.{1} = {2}&quot;, finished, o, ((int) o));\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nElevation.Low = 0\nElevation.High = 1 \n */\n</code></pre><pre><code class=\"lang-vb\" name=\"ModuleBuilder_DefineEnum#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\n\nModule Example\n   \n    Sub Main()\n      \n        &#39; Get the current application domain for the current thread.\n        Dim currentDomain As AppDomain = AppDomain.CurrentDomain\n      \n        &#39; Create a dynamic assembly in the current application domain, \n        &#39; and allow it to be executed and saved to disk.\n        Dim aName As AssemblyName = New AssemblyName(&quot;TempAssembly&quot;)\n        Dim ab As AssemblyBuilder = currentDomain.DefineDynamicAssembly( _ \n            aName, AssemblyBuilderAccess.RunAndSave)\n      \n        &#39; Define a dynamic module in &quot;TempAssembly&quot; assembly. For a single-\n        &#39; module assembly, the module has the same name as the assembly.\n        Dim mb As ModuleBuilder = _\n            ab.DefineDynamicModule(aName.Name, aName.Name &amp; &quot;.dll&quot;)\n      \n        &#39; Define a public enumeration with the name &quot;Elevation&quot; and an \n        &#39; underlying type of Integer.\n        Dim eb As EnumBuilder = _\n            mb.DefineEnum(&quot;Elevation&quot;, TypeAttributes.Public, GetType(Integer))\n      \n        &#39; Define two members, &quot;High&quot; and &quot;Low&quot;.\n        eb.DefineLiteral(&quot;Low&quot;, 0)\n        eb.DefineLiteral(&quot;High&quot;, 1)\n\n        &#39; Create the type and save the assembly.\n        Dim finished As Type = eb.CreateType()\n        ab.Save(aName.Name &amp; &quot;.dll&quot;)\n\n        For Each o As Object In [Enum].GetValues(finished)\n            Console.WriteLine(&quot;{0}.{1} = {2}&quot;, finished, o, CInt(o))\n        Next\n   End Sub\nEnd Module\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Elevation.Low = 0\n&#39;Elevation.High = 1 \n</code></pre><pre><code class=\"lang-cpp\" name=\"ModuleBuilder_DefineEnum#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\n\nvoid main()\n{\n    // Get the current application domain for the current thread.\n    AppDomain^ currentDomain = AppDomain::CurrentDomain;\n      \n    // Create a dynamic assembly in the current application domain, \n    // and allow it to be executed and saved to disk.\n    AssemblyName^ aName = gcnew AssemblyName(&quot;TempAssembly&quot;);\n    AssemblyBuilder^ ab = currentDomain-&gt;DefineDynamicAssembly( \n            aName, AssemblyBuilderAccess::RunAndSave);\n      \n    // Define a dynamic module in &quot;TempAssembly&quot; assembly. For a single-\n    // module assembly, the module has the same name as the assembly.\n    ModuleBuilder^ mb = \n            ab-&gt;DefineDynamicModule(aName-&gt;Name, aName-&gt;Name + &quot;.dll&quot;);\n      \n    // Define a public enumeration with the name &quot;Elevation&quot; and an \n    // underlying type of Int32.\n    EnumBuilder^ eb = \n            mb-&gt;DefineEnum(&quot;Elevation&quot;, TypeAttributes::Public, int::typeid);\n      \n    // Define two members, &quot;High&quot; and &quot;Low&quot;.\n    eb-&gt;DefineLiteral(&quot;Low&quot;, (Object^) 0);\n    eb-&gt;DefineLiteral(&quot;High&quot;, 1);\n\n    // Create the type and save the assembly.\n    Type^ finished = eb-&gt;CreateType();\n    ab-&gt;Save(aName-&gt;Name + &quot;.dll&quot;);\n\n    for each (Object^ o in Enum::GetValues(finished))\n    {\n        Console::WriteLine(&quot;{0}.{1} = {2}&quot;, finished, o, (int)o);\n    }\n}\n\n/* This code example produces the following output:\n\nElevation.Low = 0\nElevation.High = 1\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_GetAttributeFlagsImpl\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_GetAttributeFlagsImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAttributeFlagsImpl()</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override System.Reflection.TypeAttributes GetAttributeFlagsImpl ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.typeattributes\" data-linktype=\"relative-path\">TypeAttributes</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_GetConstructorImpl_System_Reflection_BindingFlags_System_Reflection_Binder_System_Reflection_CallingConventions_System_Type___System_Reflection_ParameterModifier___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_GetConstructorImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetConstructorImpl(BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override System.Reflection.ConstructorInfo GetConstructorImpl (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.binder\" data-linktype=\"relative-path\">Binder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callConvention</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>types</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>modifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parametermodifier\" data-linktype=\"relative-path\">ParameterModifier</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_GetConstructors_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_GetConstructors_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetConstructors(BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an array of <a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a> objects representing the public and non-public constructors defined for this class, as specified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This must be a bit flag from <a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a> : <code>InvokeMethod</code>, <code>NonPublic</code>, and so on.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a>[]</div>\r\n                  </div>\r\n                  <p>Returns an array of <a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a> objects representing the specified constructors defined for this class. If no constructors are defined, an empty array is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not currently supported in types that are not complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>As a workaround, to retrieve the constructor of a finished type, you can retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> and use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_GetCustomAttributes_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Returns all the custom attributes defined for this constructor.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override object[] GetCustomAttributes (bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Specifies whether to search this member&#39;s inheritance chain to find the attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </div>\r\n                  <p>Returns an array of objects representing all the custom attributes of the constructor represented by this <a class=\"xref\" href=\"system.reflection.emit.constructorbuilder\" data-linktype=\"relative-path\">ConstructorBuilder</a> instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not currently supported in types that are not complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>As a workaround, to retrieve the custom attributes of a finished type, retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> and call <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> on the returned <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>.  </p>\n<p> The following code sample illustrates the use of <code>GetCustomAttribute</code> in the context of <a class=\"xref\" href=\"system.reflection.emit.enumbuilder\" data-linktype=\"relative-path\">EnumBuilder</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"EnumBuilder_SetCustomAttribute2#1\">using System;\nusing System.Threading;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\n\n[AttributeUsage(AttributeTargets.All, AllowMultiple = false)]\npublic class MyAttribute : Attribute\n{\n   public bool myBoolValue;\n\n   public MyAttribute(bool myBool)\n   {\n      this.myBoolValue = myBool;\n   }\n}\n\nclass MyApplication\n{\n   static EnumBuilder myEnumBuilder;\n   \n   public static void Main()\n   {\n      try\n      {\n         CreateCallee(Thread.GetDomain());\n         object[] myAttributesArray = myEnumBuilder.GetCustomAttributes(true);\n\n         // Read the attributes and display them on the console.\n         Console.WriteLine(&quot;Custom attribute contains: &quot;);\n         for(int index=0; index &lt; myAttributesArray.Length; index++)\n         {\n            if(myAttributesArray[index] is MyAttribute)\n            {\n               Console.WriteLine(&quot;myBoolValue: &quot; + \n                                       ((MyAttribute)myAttributesArray[index]).myBoolValue);\n            }\n         }\n      }\n      catch(Exception e)\n      {\n         Console.WriteLine(&quot;The following exception is raised:&quot; +e.Message);\n      }\n   }\n\n   private static void CreateCallee(AppDomain domain)\n   {\n      AssemblyName myAssemblyName = new AssemblyName();\n      // Create a name for the assembly.\n      myAssemblyName.Name = &quot;EmittedAssembly&quot;;\n     \n      // Create the dynamic assembly.\n      AssemblyBuilder myAssemblyBuilder \n                  = domain.DefineDynamicAssembly(myAssemblyName, AssemblyBuilderAccess.Run); \n      \n      Type myType = typeof(MyAttribute);\n      ConstructorInfo myInfo = myType.GetConstructor(new Type[]{typeof(bool)});\n                  \n      // Create a dynamic module.\n      ModuleBuilder myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;EmittedModule&quot;);\n      \n      // Create a dynamic Enum.\n      myEnumBuilder = \n         myModuleBuilder.DefineEnum(&quot;MyNamespace.MyEnum&quot;, TypeAttributes.Public, typeof(Int32));\n\n      FieldBuilder myFieldBuilder1 = myEnumBuilder.DefineLiteral(&quot;FieldOne&quot;, 1);\n      FieldBuilder myFieldBuilder2 = myEnumBuilder.DefineLiteral(&quot;FieldTwo&quot;, 2);  \n\n      myEnumBuilder.CreateType();\n      myEnumBuilder.SetCustomAttribute(myInfo, new byte[]{01,00,01});\n      \n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"EnumBuilder_SetCustomAttribute2#1\">using namespace System;\nusing namespace System::Threading;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\n\n[AttributeUsage(AttributeTargets::All,AllowMultiple=false)]\npublic ref class MyAttribute: public Attribute\n{\npublic:\n   bool myBoolValue;\n   MyAttribute( bool myBool )\n   {\n      this-&gt;myBoolValue = myBool;\n   }\n};\n\nref class MyApplication\n{\nprivate:\n   static EnumBuilder^ myEnumBuilder;\n\npublic:\n   static void Main()\n   {\n      try\n      {\n         CreateCallee( Thread::GetDomain() );\n         array&lt;Object^&gt;^myAttributesArray = myEnumBuilder-&gt;GetCustomAttributes( true );\n         \n         // Read the attributes and display them on the console.\n         Console::WriteLine( &quot;Custom attribute contains: &quot; );\n         for ( int index = 0; index &lt; myAttributesArray-&gt;Length; index++ )\n         {\n            if ( dynamic_cast&lt;MyAttribute^&gt;(myAttributesArray[ index ]) )\n            {\n               Console::WriteLine( &quot;myBoolValue: {0}&quot;, (dynamic_cast&lt;MyAttribute^&gt;(myAttributesArray[ index ]))-&gt;myBoolValue );\n            }\n         }\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;The following exception is raised:{0}&quot;, e-&gt;Message );\n      }\n\n   }\n\nprivate:\n   static void CreateCallee( AppDomain^ domain )\n   {\n      AssemblyName^ myAssemblyName = gcnew AssemblyName;\n\n      // Create a name for the assembly.\n      myAssemblyName-&gt;Name = &quot;EmittedAssembly&quot;;\n\n      // Create the dynamic assembly.\n      AssemblyBuilder^ myAssemblyBuilder = domain-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::Run );\n      Type^ myType = MyAttribute::typeid;\n      array&lt;Type^&gt;^temp0 = {bool::typeid};\n      ConstructorInfo^ myInfo = myType-&gt;GetConstructor( temp0 );\n\n      // Create a dynamic module.\n      ModuleBuilder^ myModuleBuilder = myAssemblyBuilder-&gt;DefineDynamicModule( &quot;EmittedModule&quot; );\n\n      // Create a dynamic Enum.\n      myEnumBuilder = myModuleBuilder-&gt;DefineEnum( &quot;MyNamespace.MyEnum&quot;, TypeAttributes::Public, Int32::typeid );\n      FieldBuilder^ myFieldBuilder1 = myEnumBuilder-&gt;DefineLiteral( &quot;FieldOne&quot;, 1 );\n      FieldBuilder^ myFieldBuilder2 = myEnumBuilder-&gt;DefineLiteral( &quot;FieldTwo&quot;, 2 );\n      myEnumBuilder-&gt;CreateType();\n      array&lt;Byte&gt;^temp1 = {01,00,01};\n      myEnumBuilder-&gt;SetCustomAttribute( myInfo, temp1 );\n   }\n};\n\nint main()\n{\n   MyApplication::Main();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"EnumBuilder_SetCustomAttribute2#1\">Imports System\nImports System.Threading\nImports System.Reflection\nImports System.Reflection.Emit\n\n&lt;AttributeUsage(AttributeTargets.All, AllowMultiple := False)&gt;  _\nPublic Class MyAttribute\n   Inherits Attribute\n   Public myBoolValue As Boolean\n   \n   Public Sub New(myBool As Boolean)\n      Me.myBoolValue = myBool\n   End Sub &#39;New\nEnd Class &#39;MyAttribute\n\nClass MyApplication\n   Private Shared myEnumBuilder As EnumBuilder\n   \n   Public Shared Sub Main()\n      Try\n         CreateCallee(Thread.GetDomain())\n         Dim myAttributesArray As Object() = myEnumBuilder.GetCustomAttributes(True)\n         \n         &#39; Read the attributes and display them on the console.\n         Console.WriteLine(&quot;Custom attribute contains: &quot;)\n         Dim index As Integer\n         For index = 0 To myAttributesArray.Length - 1\n            If TypeOf myAttributesArray(index) Is MyAttribute Then\n               Console.WriteLine(&quot;myBoolValue: &quot; + CType(myAttributesArray(index), MyAttribute). _\n                                                                           myBoolValue.ToString())\n            End If\n         Next index\n      Catch e As Exception\n         Console.WriteLine(&quot;The following exception is raised:&quot; + e.Message)\n      End Try\n   End Sub &#39;Main\n   \n   Private Shared Sub CreateCallee(domain As AppDomain)\n      Dim myAssemblyName As New AssemblyName()\n      &#39; Create a name for the assembly.\n      myAssemblyName.Name = &quot;EmittedAssembly&quot;\n      \n      &#39; Create the dynamic assembly.\n      Dim myAssemblyBuilder As AssemblyBuilder = domain.DefineDynamicAssembly(myAssemblyName, _\n                                                                  AssemblyBuilderAccess.Run)\n      \n      Dim myType As Type = GetType(MyAttribute)\n      Dim myInfo As ConstructorInfo = myType.GetConstructor(New Type() {GetType(Boolean)})\n      \n      &#39; Create a dynamic module.\n      Dim myModuleBuilder As ModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;EmittedModule&quot;)\n      \n      &#39; Create a dynamic Enum.\n      myEnumBuilder = myModuleBuilder.DefineEnum(&quot;MyNamespace.MyEnum&quot;, TypeAttributes.Public, _\n                                                                              GetType(Int32))\n      \n      Dim myFieldBuilder1 As FieldBuilder = myEnumBuilder.DefineLiteral(&quot;FieldOne&quot;, 1)\n      Dim myFieldBuilder2 As FieldBuilder = myEnumBuilder.DefineLiteral(&quot;FieldTwo&quot;, 2)\n      \n      myEnumBuilder.CreateType()\n      myEnumBuilder.SetCustomAttribute(myInfo, New Byte() {1, 0, 1})\n   End Sub &#39;CreateCallee \nEnd Class &#39;MyApplication\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_GetCustomAttributes_System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the custom attributes identified by the given type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override object[] GetCustomAttributes (Type attributeType, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>Type</code> object to which the custom attributes are applied.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Specifies whether to search this member&#39;s inheritance chain to find the attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </div>\r\n                  <p>Returns an array of objects representing the attributes of this constructor that are of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a><code>attributeType</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not currently supported in types that are not complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>As a workaround, to retrieve the custom attributes of a finished type, retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> and call <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> on the returned <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>.  </p>\n<p> The following code sample illustrates the use of <code>GetCustomAttribute</code> in the context of <a class=\"xref\" href=\"system.reflection.emit.enumbuilder\" data-linktype=\"relative-path\">EnumBuilder</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"EnumBuilder_SetCustomAttribute1#2\">[AttributeUsage(AttributeTargets.All, AllowMultiple = false)]\npublic class MyAttribute : Attribute\n{\n   public String myString;\n   public int myInteger;\n\n   public MyAttribute(String myString1, int myInteger1)\n   {\n      this.myString = myString1;\n      this.myInteger = myInteger1;\n   }\n}\n\nclass MyApplication\n{\n   static AssemblyBuilder myAssemblyBuilder;\n   static EnumBuilder myEnumBuilder;\n\n   public static void Main()\n   {\n      try\n      {\n         CreateCallee(Thread.GetDomain());\n         if(myEnumBuilder.IsDefined(typeof(MyAttribute),false))\n         {\n            object[] myAttributesArray = myEnumBuilder.GetCustomAttributes(typeof(MyAttribute),false);\n            Console.WriteLine(&quot;Custom attribute contains: &quot;);\n            // Read the attributes and display them on the console.\n            for(int index=0; index &lt; myAttributesArray.Length; index++)\n            {\n               if(myAttributesArray[index] is MyAttribute)\n               {\n                  Console.WriteLine(&quot;The value of myString  is: &quot;\n                                    + ((MyAttribute)myAttributesArray[index]).myString);\n                  Console.WriteLine(&quot;The value of myInteger is: &quot;\n                                    + ((MyAttribute)myAttributesArray[index]).myInteger);\n               }\n            }\n         }\n         else\n         {\n            Console.WriteLine(&quot;Custom Attributes are not set for the EnumBuilder&quot;);\n         }\n      }\n      catch(Exception e)\n      {\n         Console.WriteLine(&quot;The following exception is raised:&quot; +e.Message);\n      }\n\n  }\n\n   private static void CreateCallee(AppDomain domain)\n   {\n      // Create a name for the assembly.\n      AssemblyName myAssemblyName = new AssemblyName();\n      myAssemblyName.Name = &quot;EmittedAssembly&quot;;\n\n      // Create the dynamic assembly.\n      myAssemblyBuilder = domain.DefineDynamicAssembly(myAssemblyName, AssemblyBuilderAccess.Run);\n\n      Type myType = typeof(MyAttribute);\n      ConstructorInfo myInfo = myType.GetConstructor(new Type[2]{typeof(String), typeof(int)});\n      CustomAttributeBuilder myCustomAttributeBuilder =\n                                    new CustomAttributeBuilder(myInfo, new object[2]{&quot;Hello&quot;, 2});\n\n      // Create a dynamic module.\n      ModuleBuilder myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;EmittedModule&quot;);\n\n      // Create a dynamic Enum.\n      myEnumBuilder = myModuleBuilder.DefineEnum(&quot;MyNamespace.MyEnum&quot;, TypeAttributes.Public, typeof(Int32));\n\n      FieldBuilder myFieldBuilder1 = myEnumBuilder.DefineLiteral(&quot;FieldOne&quot;, 1);\n      FieldBuilder myFieldBuilder2 = myEnumBuilder.DefineLiteral(&quot;FieldTwo&quot;, 2);\n\n      myEnumBuilder.CreateType();\n      myEnumBuilder.SetCustomAttribute(myCustomAttributeBuilder);\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"EnumBuilder_SetCustomAttribute1#2\">&lt;AttributeUsage(AttributeTargets.All, AllowMultiple := False)&gt;  _\nPublic Class MyAttribute\n   Inherits Attribute\n   Public myString As String\n   Public myInteger As Integer\n\n   Public Sub New(myString1 As String, myInteger1 As Integer)\n      Me.myString = myString1\n      Me.myInteger = myInteger1\n   End Sub &#39;New\nEnd Class &#39;MyAttribute\n\nClass MyApplication\n   Private Shared myAssemblyBuilder As AssemblyBuilder\n   Private Shared myEnumBuilder As EnumBuilder\n\n   Public Shared Sub Main()\n      Try\n         CreateCallee(Thread.GetDomain())\n         If myEnumBuilder.IsDefined(GetType(MyAttribute), False) Then\n            Dim myAttributesArray As Object() = myEnumBuilder.GetCustomAttributes _\n                                                      (GetType(MyAttribute), False)\n            Console.WriteLine(&quot;Custom attribute contains: &quot;)\n            &#39; Read the attributes and display them on the console.\n            Dim index As Integer\n            For index = 0 To myAttributesArray.Length - 1\n               If TypeOf myAttributesArray(index) Is MyAttribute Then\n                  Console.WriteLine(&quot;The value of myString  is: &quot; + CType(myAttributesArray(index), _\n                                                                           MyAttribute).myString)\n                  Console.WriteLine(&quot;The value of myInteger is: &quot; + CType(myAttributesArray(index), _\n                                                               MyAttribute).myInteger.ToString())\n               End If\n            Next index\n         Else\n            Console.WriteLine(&quot;Custom Attributes are not set for the EnumBuilder&quot;)\n         End If\n      Catch e As Exception\n         Console.WriteLine(&quot;The following exception is raised:&quot; + e.Message)\n      End Try\n   End Sub &#39;Main\n\n   Private Shared Sub CreateCallee(domain As AppDomain)\n      &#39; Create a name for the assembly.\n      Dim myAssemblyName As New AssemblyName()\n      myAssemblyName.Name = &quot;EmittedAssembly&quot;\n\n      &#39; Create the dynamic assembly.\n      myAssemblyBuilder = domain.DefineDynamicAssembly(myAssemblyName, AssemblyBuilderAccess.Run)\n\n      Dim myType As Type = GetType(MyAttribute)\n      Dim myInfo As ConstructorInfo = myType.GetConstructor(New Type(1) {GetType(String), _\n                                                                           GetType(Integer)})\n      Dim myCustomAttributeBuilder As New CustomAttributeBuilder(myInfo, New Object(1) {&quot;Hello&quot;, 2})\n\n      &#39; Create a dynamic module.\n      Dim myModuleBuilder As ModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;EmittedModule&quot;)\n\n      &#39; Create a dynamic Enum.\n      myEnumBuilder = myModuleBuilder.DefineEnum(&quot;MyNamespace.MyEnum&quot;, TypeAttributes.Public, _\n                                                                                 GetType(Int32))\n\n      Dim myFieldBuilder1 As FieldBuilder = myEnumBuilder.DefineLiteral(&quot;FieldOne&quot;, 1)\n      Dim myFieldBuilder2 As FieldBuilder = myEnumBuilder.DefineLiteral(&quot;FieldTwo&quot;, 2)\n\n      myEnumBuilder.CreateType()\n      myEnumBuilder.SetCustomAttribute(myCustomAttributeBuilder)\n   End Sub &#39;CreateCallee\nEnd Class &#39;MyApplication\n</code></pre><pre><code class=\"lang-cpp\" name=\"EnumBuilder_SetCustomAttribute1#2\">\n[AttributeUsage(AttributeTargets::All,AllowMultiple=false)]\npublic ref class MyAttribute: public Attribute\n{\npublic:\n   String^ myString;\n   int myInteger;\n   MyAttribute( String^ myString1, int myInteger1 )\n   {\n      this-&gt;myString = myString1;\n      this-&gt;myInteger = myInteger1;\n   }\n\n};\n\nref class MyApplication\n{\nprivate:\n   static AssemblyBuilder^ myAssemblyBuilder;\n   static EnumBuilder^ myEnumBuilder;\n\npublic:\n   static void Main()\n   {\n      try\n      {\n         CreateCallee( Thread::GetDomain() );\n         if ( myEnumBuilder-&gt;IsDefined( MyAttribute::typeid, false ) )\n         {\n            array&lt;Object^&gt;^myAttributesArray = myEnumBuilder-&gt;GetCustomAttributes( MyAttribute::typeid, false );\n            Console::WriteLine( &quot;Custom attribute contains: &quot; );\n\n            // Read the attributes and display them on the console.\n            for ( int index = 0; index &lt; myAttributesArray-&gt;Length; index++ )\n            {\n               if ( dynamic_cast&lt;MyAttribute^&gt;(myAttributesArray[ index ]) )\n               {\n                  Console::WriteLine( &quot;The value of myString  is: {0}&quot;, (dynamic_cast&lt;MyAttribute^&gt;(myAttributesArray[ index ]))-&gt;myString );\n                  Console::WriteLine( &quot;The value of myInteger is: {0}&quot;, (dynamic_cast&lt;MyAttribute^&gt;(myAttributesArray[ index ]))-&gt;myInteger );\n               }\n            }\n         }\n         else\n         {\n            Console::WriteLine( &quot;Custom Attributes are not set for the EnumBuilder&quot; );\n         }\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;The following exception is raised:{0}&quot;, e-&gt;Message );\n      }\n\n   }\n\nprivate:\n   static void CreateCallee( AppDomain^ domain )\n   {\n      // Create a name for the assembly.\n      AssemblyName^ myAssemblyName = gcnew AssemblyName;\n      myAssemblyName-&gt;Name = &quot;EmittedAssembly&quot;;\n\n      // Create the dynamic assembly.\n      myAssemblyBuilder = domain-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::Run );\n      Type^ myType = MyAttribute::typeid;\n      array&lt;Type^&gt;^temp0 = {String::typeid,int::typeid};\n      ConstructorInfo^ myInfo = myType-&gt;GetConstructor( temp0 );\n      array&lt;Object^&gt;^temp1 = {&quot;Hello&quot;,2};\n      CustomAttributeBuilder^ myCustomAttributeBuilder = gcnew CustomAttributeBuilder( myInfo,temp1 );\n\n      // Create a dynamic module.\n      ModuleBuilder^ myModuleBuilder = myAssemblyBuilder-&gt;DefineDynamicModule( &quot;EmittedModule&quot; );\n\n      // Create a dynamic Enum.\n      myEnumBuilder = myModuleBuilder-&gt;DefineEnum( &quot;MyNamespace.MyEnum&quot;, TypeAttributes::Public, Int32::typeid );\n      FieldBuilder^ myFieldBuilder1 = myEnumBuilder-&gt;DefineLiteral( &quot;FieldOne&quot;, 1 );\n      FieldBuilder^ myFieldBuilder2 = myEnumBuilder-&gt;DefineLiteral( &quot;FieldTwo&quot;, 2 );\n      myEnumBuilder-&gt;CreateType();\n      myEnumBuilder-&gt;SetCustomAttribute( myCustomAttributeBuilder );\n   }\n};\n\nint main()\n{\n   MyApplication::Main();\n}\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_GetElementType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_GetElementType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetElementType()</div>        \r\n          </div>\r\n    \r\n            <p>Calling this method always throws <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type GetElementType ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>This method is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not currently supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_GetEnumUnderlyingType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_GetEnumUnderlyingType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEnumUnderlyingType()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the underlying integer type of the current enumeration, which is set when the enumeration builder is defined.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type GetEnumUnderlyingType ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>The underlying type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_GetEvent_System_String_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_GetEvent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEvent(String,BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the event with the specified name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the event to get.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This invocation attribute. This must be a bit flag from <a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a> : <code>InvokeMethod</code>, <code>NonPublic</code>, and so on.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a></div>\r\n                  </div>\r\n                  <p>Returns an <a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a> object representing the event declared or inherited by this type with the specified name. If there are no matches, <code>null</code> is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not currently supported in types that are not complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>As a workaround, to retrieve the event of a finished type, retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> and use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_GetEvents\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_GetEvents_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEvents()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the events for the public events declared or inherited by this type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.EventInfo[] GetEvents ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a>[]</div>\r\n                  </div>\r\n                  <p>Returns an array of <a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a> objects representing the public events declared or inherited by this type. An empty array is returned if there are no public events.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not currently supported in types that are not complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>As a workaround, to retrieve the events of a finished type, retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> and use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_GetEvents_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_GetEvents_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEvents(BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the public and non-public events that are declared by this type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This must be a bit flag from <a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a>, such as <code>InvokeMethod</code>, <code>NonPublic</code>, and so on.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a>[]</div>\r\n                  </div>\r\n                  <p>Returns an array of <a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a> objects representing the public and non-public events declared or inherited by this type. An empty array is returned if there are no events, as specified.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not currently supported in types that are not complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>As a workaround, to retrieve the events of a finished type, retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> and use reflection on the retrieved type to retrieve the events.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_GetField_System_String_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_GetField_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetField(String,BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the field specified by the given name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the field to get.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This must be a bit flag from <a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a> : <code>InvokeMethod</code>, <code>NonPublic</code>, and so on.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a></div>\r\n                  </div>\r\n                  <p>Returns the <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> object representing the field declared or inherited by this type with the specified name and public or non-public modifier. If there are no matches, then null is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not currently supported in types that are not complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>As a workaround, to retrieve the field of a finished type, retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> and use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_GetFields_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_GetFields_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFields(BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the public and non-public fields that are declared by this type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This must be a bit flag from <a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a>, such as InvokeMethod, NonPublic, and so on.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a>[]</div>\r\n                  </div>\r\n                  <p>Returns an array of <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> objects representing the public and non-public fields declared or inherited by this type. An empty array is returned if there are no fields, as specified.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not currently supported in types that are not complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>As a workaround, to retrieve the field of a finished type, retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> and use reflection on the retrieved type.  </p>\n<p> The GetFields method does not return fields in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which fields are returned, because that order can vary.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_GetInterface_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_GetInterface_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetInterface(String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the interface implemented (directly or indirectly) by this type, with the specified fully-qualified name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type GetInterface (string name, bool ignoreCase);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ignoreCase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>If <code>true</code>, the search is case-insensitive. If <code>false</code>, the search is case-sensitive.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>Returns a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object representing the implemented interface. Returns null if no interface matching name is found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not currently supported in types that are not complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>As a workaround, to retrieve the interface of a finished type, retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> and use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_GetInterfaceMap_System_Type_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_GetInterfaceMap_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetInterfaceMap(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an interface mapping for the interface requested.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>interfaceType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the interface for which the interface mapping is to be retrieved.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.interfacemapping\" data-linktype=\"relative-path\">InterfaceMapping</a></div>\r\n                  </div>\r\n                  <p>The requested interface mapping.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The type does not implement the interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>As a workaround, to retrieve the interface mapping types of a finished type, retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> and use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_GetInterfaces\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_GetInterfaces_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetInterfaces()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an array of all the interfaces implemented on this a class and its base classes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type[] GetInterfaces ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </div>\r\n                  <p>Returns an array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects representing the implemented interfaces. If none are defined, an empty array is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>As a workaround, to retrieve the interface of a finished type, retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> and use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_GetMember_System_String_System_Reflection_MemberTypes_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_GetMember_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMember(String,MemberTypes,BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Returns all members with the specified name, type, and binding that are declared or inherited by this type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the member.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.membertypes\" data-linktype=\"relative-path\">MemberTypes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of member that is to be returned.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This must be a bit flag from <a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a> : <code>InvokeMethod</code>, <code>NonPublic</code>, and so on.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a>[]</div>\r\n                  </div>\r\n                  <p>Returns an array of <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> objects representing the public and non-public members defined on this type if <code>nonPublic</code> is used; otherwise, only the public members are returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not currently supported in types that are not complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>As a workaround, to retrieve the member of a finished type, retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> and use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_GetMembers_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_GetMembers_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMembers(BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the specified members declared or inherited by this type,.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This must be a bit flag from <a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a> : <code>InvokeMethod</code>, <code>NonPublic</code>, and so on.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a>[]</div>\r\n                  </div>\r\n                  <p>Returns an array of <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> objects representing the public and non-public members declared or inherited by this type. An empty array is returned if there are no matching members.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not currently supported in types that are not complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>As a workaround, to retrieve the members of a finished type, retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> and use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_GetMethodImpl_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Reflection_CallingConventions_System_Type___System_Reflection_ParameterModifier___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_GetMethodImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.binder\" data-linktype=\"relative-path\">Binder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callConvention</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.callingconventions\" data-linktype=\"relative-path\">CallingConventions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>types</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>modifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parametermodifier\" data-linktype=\"relative-path\">ParameterModifier</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_GetMethods_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_GetMethods_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMethods(BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Returns all the public and non-public methods declared or inherited by this type, as specified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This must be a bit flag from <a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a>, such as <code>InvokeMethod</code>, <code>NonPublic</code>, and so on.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a>[]</div>\r\n                  </div>\r\n                  <p>Returns an array of <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> objects representing the public and non-public methods defined on this type if <code>nonPublic</code> is used; otherwise, only the public methods are returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not currently supported in types that are not complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>As a workaround, to retrieve the methods of a finished type, retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> and use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_GetNestedType_System_String_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_GetNestedType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetNestedType(String,BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the specified nested type that is declared by this type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> containing the name of the nested type to get.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitmask comprised of one or more <a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a> that specify how the search is conducted.  </p>\n<p> -or-  </p>\n<p> Zero, to conduct a case-sensitive search for public methods.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object representing the nested type that matches the specified requirements, if found; otherwise, <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not currently supported in types that are not complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>As a workaround, to retrieve the nested type of a finished type, retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> and use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_GetNestedTypes_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_GetNestedTypes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetNestedTypes(BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the public and non-public nested types that are declared or inherited by this type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This must be a bit flag from <a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a>, such as <code>InvokeMethod</code>, <code>NonPublic</code>, and so on.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects representing all the types nested within the current <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> that match the specified binding constraints.  </p>\n<p> An empty array of type <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>, if no types are nested within the current <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>, or if none of the nested types match the binding constraints.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not currently supported in types that are not complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>As a workaround, to retrieve the nested types of a finished type, retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> and use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_GetProperties_System_Reflection_BindingFlags_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_GetProperties_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetProperties(BindingFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Returns all the public and non-public properties declared or inherited by this type, as specified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This invocation attribute. This must be a bit flag from <a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a> : <code>InvokeMethod</code>, <code>NonPublic</code>, and so on.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a>[]</div>\r\n                  </div>\r\n                  <p>Returns an array of <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> objects representing the public and non-public properties defined on this type if <code>nonPublic</code> is used; otherwise, only the public properties are returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not currently supported in types that are not complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>As a workaround, to retrieve the properties of a finished type, retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> and use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_GetPropertyImpl_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Type_System_Type___System_Reflection_ParameterModifier___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_GetPropertyImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetPropertyImpl(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override System.Reflection.PropertyInfo GetPropertyImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.binder\" data-linktype=\"relative-path\">Binder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>types</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>modifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parametermodifier\" data-linktype=\"relative-path\">ParameterModifier</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_HasElementTypeImpl\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_HasElementTypeImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HasElementTypeImpl()</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override bool HasElementTypeImpl ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_InvokeMember_System_String_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object_System_Object___System_Reflection_ParameterModifier___System_Globalization_CultureInfo_System_String___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_InvokeMember_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])</div>        \r\n          </div>\r\n    \r\n            <p>Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the contraints of the specified binder and invocation attributes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the member to invoke. This can be a constructor, method, property, or field. A suitable invocation attribute must be specified. Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>invokeAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The invocation attribute. This must be a bit flag from <code>BindingFlags</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.binder\" data-linktype=\"relative-path\">Binder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <code>MemberInfo</code> objects using reflection. If binder is <code>null</code>, the default binder is used. See <a class=\"xref\" href=\"system.reflection.binder\" data-linktype=\"relative-path\">Binder</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object on which to invoke the specified member. If the member is static, this parameter is ignored.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>args</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An argument list. This is an array of objects that contains the number, order, and type of the parameters of the member to be invoked. If there are no parameters this should be null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>modifiers</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parametermodifier\" data-linktype=\"relative-path\">ParameterModifier</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of the same length as <code>args</code> with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the metadata. They are used by various interoperability services. See the metadata specs for details such as this.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An instance of <code>CultureInfo</code> used to govern the coercion of types. If this is null, the <code>CultureInfo</code> for the current thread is used. (Note that this is necessary to, for example, convert a string that represents 1000 to a double value, since 1000 is represented differently by different cultures.)</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namedParameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Each parameter in the <code>namedParameters</code> array gets the value in the corresponding element in the <code>args</code> array. If the length of <code>args</code> is greater than the length of <code>namedParameters</code>, the remaining argument values are passed in order.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>Returns the return value of the invoked member.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not currently supported in types that are not complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> or <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetType_\" data-linktype=\"relative-path\">GetType</a> and use reflection on the retrieved type.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_IsArrayImpl\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_IsArrayImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsArrayImpl()</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override bool IsArrayImpl ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_IsAssignableFrom_System_Reflection_TypeInfo_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_IsAssignableFrom_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsAssignableFrom(TypeInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether a specified <a class=\"xref\" href=\"system.reflection.typeinfo\" data-linktype=\"relative-path\">TypeInfo</a> object can be assigned to this object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsAssignableFrom (System.Reflection.TypeInfo typeInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.typeinfo\" data-linktype=\"relative-path\">System.Reflection.TypeInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to test.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>typeInfo</code> can be assigned to this object; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_IsByRefImpl\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_IsByRefImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsByRefImpl()</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override bool IsByRefImpl ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_IsCOMObjectImpl\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_IsCOMObjectImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsCOMObjectImpl()</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override bool IsCOMObjectImpl ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_IsDefined_System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_IsDefined_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDefined(Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Checks if the specified custom attribute type is defined.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsDefined (Type attributeType, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <code>Type</code> object to which the custom attributes are applied.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Specifies whether to search this member&#39;s inheritance chain to find the attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if one or more instance of <code>attributeType</code> is defined on this member; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not currently supported in types that are not complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>As a workaround, to check if a custom attribute is defined for a finished type, retrieve the type using <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> and call <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> on the returned <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_IsPointerImpl\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_IsPointerImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsPointerImpl()</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override bool IsPointerImpl ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_IsPrimitiveImpl\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_IsPrimitiveImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsPrimitiveImpl()</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override bool IsPrimitiveImpl ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_IsValueTypeImpl\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_IsValueTypeImpl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsValueTypeImpl()</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override bool IsValueTypeImpl ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_MakeArrayType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_MakeArrayType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MakeArrayType()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object representing a one-dimensional array of the current type, with a lower bound of zero.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type MakeArrayType ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object representing a one-dimensional array of the current type, with a lower bound of zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_MakeArrayType_System_Int32_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_MakeArrayType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MakeArrayType(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object representing an array of the current type, with the specified number of dimensions.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type MakeArrayType (int rank);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rank</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of dimensions for the array. This number must be less than or equal to 32.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>An object representing an array of the current type, with the specified number of dimensions.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>rank</code> is less than 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_MakeByRefType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_MakeByRefType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MakeByRefType()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the current type when passed as a <strong>ref</strong> parameter (<strong>ByRef</strong> parameter in Visual Basic).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type MakeByRefType ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the current type when passed as a <strong>ref</strong> parameter (<strong>ByRef</strong> parameter in Visual Basic).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_MakePointerType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_MakePointerType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MakePointerType()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents a pointer to the current type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type MakePointerType ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents a pointer to the current type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_SetCustomAttribute_System_Reflection_Emit_CustomAttributeBuilder_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_SetCustomAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetCustomAttribute(CustomAttributeBuilder)</div>        \r\n          </div>\r\n    \r\n            <p>Sets a custom attribute using a custom attribute builder.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>customBuilder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.customattributebuilder\" data-linktype=\"relative-path\">CustomAttributeBuilder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An instance of a helper class to define the custom attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>con</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code sample illustrates the use of <code>SetCustomAttribute</code> in the context of <a class=\"xref\" href=\"system.reflection.emit.enumbuilder\" data-linktype=\"relative-path\">EnumBuilder</a>, passing a <a class=\"xref\" href=\"system.reflection.emit.customattributebuilder\" data-linktype=\"relative-path\">CustomAttributeBuilder</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"EnumBuilder_SetCustomAttribute2#2\">using System;\nusing System.Threading;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\n\n[AttributeUsage(AttributeTargets.All, AllowMultiple = false)]\npublic class MyAttribute : Attribute\n{\n   public bool myBoolValue;\n\n   public MyAttribute(bool myBool)\n   {\n      this.myBoolValue = myBool;\n   }\n}\n\nclass MyApplication\n{\n   static EnumBuilder myEnumBuilder;\n   \n   public static void Main()\n   {\n      try\n      {\n         CreateCallee(Thread.GetDomain());\n         object[] myAttributesArray = myEnumBuilder.GetCustomAttributes(true);\n\n         // Read the attributes and display them on the console.\n         Console.WriteLine(&quot;Custom attribute contains: &quot;);\n         for(int index=0; index &lt; myAttributesArray.Length; index++)\n         {\n            if(myAttributesArray[index] is MyAttribute)\n            {\n               Console.WriteLine(&quot;myBoolValue: &quot; + \n                                       ((MyAttribute)myAttributesArray[index]).myBoolValue);\n            }\n         }\n      }\n      catch(Exception e)\n      {\n         Console.WriteLine(&quot;The following exception is raised:&quot; +e.Message);\n      }\n   }\n\n   private static void CreateCallee(AppDomain domain)\n   {\n      AssemblyName myAssemblyName = new AssemblyName();\n      // Create a name for the assembly.\n      myAssemblyName.Name = &quot;EmittedAssembly&quot;;\n     \n      // Create the dynamic assembly.\n      AssemblyBuilder myAssemblyBuilder \n                  = domain.DefineDynamicAssembly(myAssemblyName, AssemblyBuilderAccess.Run); \n      \n      Type myType = typeof(MyAttribute);\n      ConstructorInfo myInfo = myType.GetConstructor(new Type[]{typeof(bool)});\n                  \n      // Create a dynamic module.\n      ModuleBuilder myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;EmittedModule&quot;);\n      \n      // Create a dynamic Enum.\n      myEnumBuilder = \n         myModuleBuilder.DefineEnum(&quot;MyNamespace.MyEnum&quot;, TypeAttributes.Public, typeof(Int32));\n\n      FieldBuilder myFieldBuilder1 = myEnumBuilder.DefineLiteral(&quot;FieldOne&quot;, 1);\n      FieldBuilder myFieldBuilder2 = myEnumBuilder.DefineLiteral(&quot;FieldTwo&quot;, 2);  \n\n      myEnumBuilder.CreateType();\n      myEnumBuilder.SetCustomAttribute(myInfo, new byte[]{01,00,01});\n      \n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"EnumBuilder_SetCustomAttribute2#2\">using namespace System;\nusing namespace System::Threading;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\n\n[AttributeUsage(AttributeTargets::All,AllowMultiple=false)]\npublic ref class MyAttribute: public Attribute\n{\npublic:\n   bool myBoolValue;\n   MyAttribute( bool myBool )\n   {\n      this-&gt;myBoolValue = myBool;\n   }\n};\n\nref class MyApplication\n{\nprivate:\n   static EnumBuilder^ myEnumBuilder;\n\npublic:\n   static void Main()\n   {\n      try\n      {\n         CreateCallee( Thread::GetDomain() );\n         array&lt;Object^&gt;^myAttributesArray = myEnumBuilder-&gt;GetCustomAttributes( true );\n         \n         // Read the attributes and display them on the console.\n         Console::WriteLine( &quot;Custom attribute contains: &quot; );\n         for ( int index = 0; index &lt; myAttributesArray-&gt;Length; index++ )\n         {\n            if ( dynamic_cast&lt;MyAttribute^&gt;(myAttributesArray[ index ]) )\n            {\n               Console::WriteLine( &quot;myBoolValue: {0}&quot;, (dynamic_cast&lt;MyAttribute^&gt;(myAttributesArray[ index ]))-&gt;myBoolValue );\n            }\n         }\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;The following exception is raised:{0}&quot;, e-&gt;Message );\n      }\n\n   }\n\nprivate:\n   static void CreateCallee( AppDomain^ domain )\n   {\n      AssemblyName^ myAssemblyName = gcnew AssemblyName;\n\n      // Create a name for the assembly.\n      myAssemblyName-&gt;Name = &quot;EmittedAssembly&quot;;\n\n      // Create the dynamic assembly.\n      AssemblyBuilder^ myAssemblyBuilder = domain-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::Run );\n      Type^ myType = MyAttribute::typeid;\n      array&lt;Type^&gt;^temp0 = {bool::typeid};\n      ConstructorInfo^ myInfo = myType-&gt;GetConstructor( temp0 );\n\n      // Create a dynamic module.\n      ModuleBuilder^ myModuleBuilder = myAssemblyBuilder-&gt;DefineDynamicModule( &quot;EmittedModule&quot; );\n\n      // Create a dynamic Enum.\n      myEnumBuilder = myModuleBuilder-&gt;DefineEnum( &quot;MyNamespace.MyEnum&quot;, TypeAttributes::Public, Int32::typeid );\n      FieldBuilder^ myFieldBuilder1 = myEnumBuilder-&gt;DefineLiteral( &quot;FieldOne&quot;, 1 );\n      FieldBuilder^ myFieldBuilder2 = myEnumBuilder-&gt;DefineLiteral( &quot;FieldTwo&quot;, 2 );\n      myEnumBuilder-&gt;CreateType();\n      array&lt;Byte&gt;^temp1 = {01,00,01};\n      myEnumBuilder-&gt;SetCustomAttribute( myInfo, temp1 );\n   }\n};\n\nint main()\n{\n   MyApplication::Main();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"EnumBuilder_SetCustomAttribute2#2\">Imports System\nImports System.Threading\nImports System.Reflection\nImports System.Reflection.Emit\n\n&lt;AttributeUsage(AttributeTargets.All, AllowMultiple := False)&gt;  _\nPublic Class MyAttribute\n   Inherits Attribute\n   Public myBoolValue As Boolean\n   \n   Public Sub New(myBool As Boolean)\n      Me.myBoolValue = myBool\n   End Sub &#39;New\nEnd Class &#39;MyAttribute\n\nClass MyApplication\n   Private Shared myEnumBuilder As EnumBuilder\n   \n   Public Shared Sub Main()\n      Try\n         CreateCallee(Thread.GetDomain())\n         Dim myAttributesArray As Object() = myEnumBuilder.GetCustomAttributes(True)\n         \n         &#39; Read the attributes and display them on the console.\n         Console.WriteLine(&quot;Custom attribute contains: &quot;)\n         Dim index As Integer\n         For index = 0 To myAttributesArray.Length - 1\n            If TypeOf myAttributesArray(index) Is MyAttribute Then\n               Console.WriteLine(&quot;myBoolValue: &quot; + CType(myAttributesArray(index), MyAttribute). _\n                                                                           myBoolValue.ToString())\n            End If\n         Next index\n      Catch e As Exception\n         Console.WriteLine(&quot;The following exception is raised:&quot; + e.Message)\n      End Try\n   End Sub &#39;Main\n   \n   Private Shared Sub CreateCallee(domain As AppDomain)\n      Dim myAssemblyName As New AssemblyName()\n      &#39; Create a name for the assembly.\n      myAssemblyName.Name = &quot;EmittedAssembly&quot;\n      \n      &#39; Create the dynamic assembly.\n      Dim myAssemblyBuilder As AssemblyBuilder = domain.DefineDynamicAssembly(myAssemblyName, _\n                                                                  AssemblyBuilderAccess.Run)\n      \n      Dim myType As Type = GetType(MyAttribute)\n      Dim myInfo As ConstructorInfo = myType.GetConstructor(New Type() {GetType(Boolean)})\n      \n      &#39; Create a dynamic module.\n      Dim myModuleBuilder As ModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;EmittedModule&quot;)\n      \n      &#39; Create a dynamic Enum.\n      myEnumBuilder = myModuleBuilder.DefineEnum(&quot;MyNamespace.MyEnum&quot;, TypeAttributes.Public, _\n                                                                              GetType(Int32))\n      \n      Dim myFieldBuilder1 As FieldBuilder = myEnumBuilder.DefineLiteral(&quot;FieldOne&quot;, 1)\n      Dim myFieldBuilder2 As FieldBuilder = myEnumBuilder.DefineLiteral(&quot;FieldTwo&quot;, 2)\n      \n      myEnumBuilder.CreateType()\n      myEnumBuilder.SetCustomAttribute(myInfo, New Byte() {1, 0, 1})\n   End Sub &#39;CreateCallee \nEnd Class &#39;MyApplication\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_SetCustomAttribute_System_Reflection_ConstructorInfo_System_Byte___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_SetCustomAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetCustomAttribute(ConstructorInfo,Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Sets a custom attribute using a specified custom attribute blob.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>con</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The constructor for the custom attribute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binaryAttribute</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A byte blob representing the attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>con</code> or <code>binaryAttribute</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>See the metadata specification in the ECMA Partition II documentation for details on how to format <code>binaryAttribute</code>. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code sample illustrates the use of <code>SetCustomAttribute</code> in the context of <a class=\"xref\" href=\"system.reflection.emit.enumbuilder\" data-linktype=\"relative-path\">EnumBuilder</a>, passing a byte blob.  </p>\n<pre><code class=\"lang-cs\" name=\"EnumBuilder_SetCustomAttribute2#2\">using System;\nusing System.Threading;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\n\n[AttributeUsage(AttributeTargets.All, AllowMultiple = false)]\npublic class MyAttribute : Attribute\n{\n   public bool myBoolValue;\n\n   public MyAttribute(bool myBool)\n   {\n      this.myBoolValue = myBool;\n   }\n}\n\nclass MyApplication\n{\n   static EnumBuilder myEnumBuilder;\n   \n   public static void Main()\n   {\n      try\n      {\n         CreateCallee(Thread.GetDomain());\n         object[] myAttributesArray = myEnumBuilder.GetCustomAttributes(true);\n\n         // Read the attributes and display them on the console.\n         Console.WriteLine(&quot;Custom attribute contains: &quot;);\n         for(int index=0; index &lt; myAttributesArray.Length; index++)\n         {\n            if(myAttributesArray[index] is MyAttribute)\n            {\n               Console.WriteLine(&quot;myBoolValue: &quot; + \n                                       ((MyAttribute)myAttributesArray[index]).myBoolValue);\n            }\n         }\n      }\n      catch(Exception e)\n      {\n         Console.WriteLine(&quot;The following exception is raised:&quot; +e.Message);\n      }\n   }\n\n   private static void CreateCallee(AppDomain domain)\n   {\n      AssemblyName myAssemblyName = new AssemblyName();\n      // Create a name for the assembly.\n      myAssemblyName.Name = &quot;EmittedAssembly&quot;;\n     \n      // Create the dynamic assembly.\n      AssemblyBuilder myAssemblyBuilder \n                  = domain.DefineDynamicAssembly(myAssemblyName, AssemblyBuilderAccess.Run); \n      \n      Type myType = typeof(MyAttribute);\n      ConstructorInfo myInfo = myType.GetConstructor(new Type[]{typeof(bool)});\n                  \n      // Create a dynamic module.\n      ModuleBuilder myModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;EmittedModule&quot;);\n      \n      // Create a dynamic Enum.\n      myEnumBuilder = \n         myModuleBuilder.DefineEnum(&quot;MyNamespace.MyEnum&quot;, TypeAttributes.Public, typeof(Int32));\n\n      FieldBuilder myFieldBuilder1 = myEnumBuilder.DefineLiteral(&quot;FieldOne&quot;, 1);\n      FieldBuilder myFieldBuilder2 = myEnumBuilder.DefineLiteral(&quot;FieldTwo&quot;, 2);  \n\n      myEnumBuilder.CreateType();\n      myEnumBuilder.SetCustomAttribute(myInfo, new byte[]{01,00,01});\n      \n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"EnumBuilder_SetCustomAttribute2#2\">using namespace System;\nusing namespace System::Threading;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\n\n[AttributeUsage(AttributeTargets::All,AllowMultiple=false)]\npublic ref class MyAttribute: public Attribute\n{\npublic:\n   bool myBoolValue;\n   MyAttribute( bool myBool )\n   {\n      this-&gt;myBoolValue = myBool;\n   }\n};\n\nref class MyApplication\n{\nprivate:\n   static EnumBuilder^ myEnumBuilder;\n\npublic:\n   static void Main()\n   {\n      try\n      {\n         CreateCallee( Thread::GetDomain() );\n         array&lt;Object^&gt;^myAttributesArray = myEnumBuilder-&gt;GetCustomAttributes( true );\n         \n         // Read the attributes and display them on the console.\n         Console::WriteLine( &quot;Custom attribute contains: &quot; );\n         for ( int index = 0; index &lt; myAttributesArray-&gt;Length; index++ )\n         {\n            if ( dynamic_cast&lt;MyAttribute^&gt;(myAttributesArray[ index ]) )\n            {\n               Console::WriteLine( &quot;myBoolValue: {0}&quot;, (dynamic_cast&lt;MyAttribute^&gt;(myAttributesArray[ index ]))-&gt;myBoolValue );\n            }\n         }\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;The following exception is raised:{0}&quot;, e-&gt;Message );\n      }\n\n   }\n\nprivate:\n   static void CreateCallee( AppDomain^ domain )\n   {\n      AssemblyName^ myAssemblyName = gcnew AssemblyName;\n\n      // Create a name for the assembly.\n      myAssemblyName-&gt;Name = &quot;EmittedAssembly&quot;;\n\n      // Create the dynamic assembly.\n      AssemblyBuilder^ myAssemblyBuilder = domain-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::Run );\n      Type^ myType = MyAttribute::typeid;\n      array&lt;Type^&gt;^temp0 = {bool::typeid};\n      ConstructorInfo^ myInfo = myType-&gt;GetConstructor( temp0 );\n\n      // Create a dynamic module.\n      ModuleBuilder^ myModuleBuilder = myAssemblyBuilder-&gt;DefineDynamicModule( &quot;EmittedModule&quot; );\n\n      // Create a dynamic Enum.\n      myEnumBuilder = myModuleBuilder-&gt;DefineEnum( &quot;MyNamespace.MyEnum&quot;, TypeAttributes::Public, Int32::typeid );\n      FieldBuilder^ myFieldBuilder1 = myEnumBuilder-&gt;DefineLiteral( &quot;FieldOne&quot;, 1 );\n      FieldBuilder^ myFieldBuilder2 = myEnumBuilder-&gt;DefineLiteral( &quot;FieldTwo&quot;, 2 );\n      myEnumBuilder-&gt;CreateType();\n      array&lt;Byte&gt;^temp1 = {01,00,01};\n      myEnumBuilder-&gt;SetCustomAttribute( myInfo, temp1 );\n   }\n};\n\nint main()\n{\n   MyApplication::Main();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"EnumBuilder_SetCustomAttribute2#2\">Imports System\nImports System.Threading\nImports System.Reflection\nImports System.Reflection.Emit\n\n&lt;AttributeUsage(AttributeTargets.All, AllowMultiple := False)&gt;  _\nPublic Class MyAttribute\n   Inherits Attribute\n   Public myBoolValue As Boolean\n   \n   Public Sub New(myBool As Boolean)\n      Me.myBoolValue = myBool\n   End Sub &#39;New\nEnd Class &#39;MyAttribute\n\nClass MyApplication\n   Private Shared myEnumBuilder As EnumBuilder\n   \n   Public Shared Sub Main()\n      Try\n         CreateCallee(Thread.GetDomain())\n         Dim myAttributesArray As Object() = myEnumBuilder.GetCustomAttributes(True)\n         \n         &#39; Read the attributes and display them on the console.\n         Console.WriteLine(&quot;Custom attribute contains: &quot;)\n         Dim index As Integer\n         For index = 0 To myAttributesArray.Length - 1\n            If TypeOf myAttributesArray(index) Is MyAttribute Then\n               Console.WriteLine(&quot;myBoolValue: &quot; + CType(myAttributesArray(index), MyAttribute). _\n                                                                           myBoolValue.ToString())\n            End If\n         Next index\n      Catch e As Exception\n         Console.WriteLine(&quot;The following exception is raised:&quot; + e.Message)\n      End Try\n   End Sub &#39;Main\n   \n   Private Shared Sub CreateCallee(domain As AppDomain)\n      Dim myAssemblyName As New AssemblyName()\n      &#39; Create a name for the assembly.\n      myAssemblyName.Name = &quot;EmittedAssembly&quot;\n      \n      &#39; Create the dynamic assembly.\n      Dim myAssemblyBuilder As AssemblyBuilder = domain.DefineDynamicAssembly(myAssemblyName, _\n                                                                  AssemblyBuilderAccess.Run)\n      \n      Dim myType As Type = GetType(MyAttribute)\n      Dim myInfo As ConstructorInfo = myType.GetConstructor(New Type() {GetType(Boolean)})\n      \n      &#39; Create a dynamic module.\n      Dim myModuleBuilder As ModuleBuilder = myAssemblyBuilder.DefineDynamicModule(&quot;EmittedModule&quot;)\n      \n      &#39; Create a dynamic Enum.\n      myEnumBuilder = myModuleBuilder.DefineEnum(&quot;MyNamespace.MyEnum&quot;, TypeAttributes.Public, _\n                                                                              GetType(Int32))\n      \n      Dim myFieldBuilder1 As FieldBuilder = myEnumBuilder.DefineLiteral(&quot;FieldOne&quot;, 1)\n      Dim myFieldBuilder2 As FieldBuilder = myEnumBuilder.DefineLiteral(&quot;FieldTwo&quot;, 2)\n      \n      myEnumBuilder.CreateType()\n      myEnumBuilder.SetCustomAttribute(myInfo, New Byte() {1, 0, 1})\n   End Sub &#39;CreateCallee \nEnd Class &#39;MyApplication\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_System_Runtime_InteropServices__EnumBuilder_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_System_Runtime_InteropServices__EnumBuilder_GetIDsOfNames_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_EnumBuilder.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Maps a set of names to a corresponding set of dispatch identifiers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _EnumBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>riid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Reserved for future use. Must be IID_NULL.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgszNames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Passed-in array of names to be mapped.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cNames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Count of the names to be mapped.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale context in which to interpret the names.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgDispId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Caller-allocated array which receives the IDs corresponding to the names.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>The method is called late-bound using the COM <code>IDispatch</code> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetIDsOfNames</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_System_Runtime_InteropServices__EnumBuilder_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_System_Runtime_InteropServices__EnumBuilder_GetTypeInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_EnumBuilder.GetTypeInfo(UInt32,UInt32,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the type information for an object, which can then be used to get the type information for an interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _EnumBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>iTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type information to return.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale identifier for the type information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ppTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Receives a pointer to the requested type information object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>The method is called late-bound using the COM <code>IDispatch</code> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetTypeInfo</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_System_Runtime_InteropServices__EnumBuilder_GetTypeInfoCount_System_UInt32__\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_System_Runtime_InteropServices__EnumBuilder_GetTypeInfoCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_EnumBuilder.GetTypeInfoCount(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _EnumBuilder.GetTypeInfoCount (out uint pcTInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pcTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Points to a location that receives the number of type information interfaces provided by the object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>The method is called late-bound using the COM <code>IDispatch</code> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetTypeInfoCount</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_EnumBuilder_System_Runtime_InteropServices__EnumBuilder_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_EnumBuilder_System_Runtime_InteropServices__EnumBuilder_Invoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_EnumBuilder.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Provides access to properties and methods exposed by an object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _EnumBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dispIdMember</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Identifies the member.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>riid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Reserved for future use. Must be IID_NULL.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale context in which to interpret arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>wFlags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Flags describing the context of the call.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pDispParams</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pVarResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to the location where the result is to be stored.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pExcepInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to a structure that contains exception information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>puArgErr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first argument that has an error.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>The method is called late-bound using the COM <code>IDispatch</code> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::Invoke</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.Emit.EnumBuilder.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.Emit.EnumBuilder.yml\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.Assembly\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.BaseType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.CreateType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.CreateTypeInfo\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.DeclaringType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.DefineLiteral\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.FullName\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.GetAttributeFlagsImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.GetConstructorImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.GetConstructors\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.GetCustomAttributes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.GetElementType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.GetEnumUnderlyingType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.GetEvent\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.GetEvents\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.GetField\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.GetFields\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.GetInterface\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.GetInterfaceMap\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.GetInterfaces\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.GetMember\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.GetMembers\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.GetMethodImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.GetMethods\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.GetNestedType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.GetNestedTypes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.GetProperties\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.GetPropertyImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.GUID\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.HasElementTypeImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.InvokeMember\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.IsArrayImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.IsAssignableFrom\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.IsByRefImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.IsCOMObjectImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.IsConstructedGenericType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.IsDefined\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.IsPointerImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.IsPrimitiveImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.IsValueTypeImpl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.MakeArrayType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.MakeByRefType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.MakePointerType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.Module\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.Name\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.Namespace\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.ReflectedType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.SetCustomAttribute\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder._EnumBuilder.GetIDsOfNames\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder._EnumBuilder.GetTypeInfo\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder._EnumBuilder.GetTypeInfoCount\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder._EnumBuilder.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.TypeHandle\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.TypeToken\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.UnderlyingField\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.EnumBuilder.UnderlyingSystemType\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"d6c0e26b-0f6d-b840-aaf7-818727200bdc\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Describes and represents an enumeration type.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Reflection.Emit/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Reflection.Emit.EnumBuilder\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.Emit.EnumBuilder.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.Emit.EnumBuilder.yml","open_to_public_contributors":true,"api_name":["System.Reflection.Emit.EnumBuilder","System.Reflection.Emit.EnumBuilder.Assembly","System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName","System.Reflection.Emit.EnumBuilder.BaseType","System.Reflection.Emit.EnumBuilder.CreateType","System.Reflection.Emit.EnumBuilder.CreateTypeInfo","System.Reflection.Emit.EnumBuilder.DeclaringType","System.Reflection.Emit.EnumBuilder.DefineLiteral","System.Reflection.Emit.EnumBuilder.FullName","System.Reflection.Emit.EnumBuilder.GetAttributeFlagsImpl","System.Reflection.Emit.EnumBuilder.GetConstructorImpl","System.Reflection.Emit.EnumBuilder.GetConstructors","System.Reflection.Emit.EnumBuilder.GetCustomAttributes","System.Reflection.Emit.EnumBuilder.GetElementType","System.Reflection.Emit.EnumBuilder.GetEnumUnderlyingType","System.Reflection.Emit.EnumBuilder.GetEvent","System.Reflection.Emit.EnumBuilder.GetEvents","System.Reflection.Emit.EnumBuilder.GetField","System.Reflection.Emit.EnumBuilder.GetFields","System.Reflection.Emit.EnumBuilder.GetInterface","System.Reflection.Emit.EnumBuilder.GetInterfaceMap","System.Reflection.Emit.EnumBuilder.GetInterfaces","System.Reflection.Emit.EnumBuilder.GetMember","System.Reflection.Emit.EnumBuilder.GetMembers","System.Reflection.Emit.EnumBuilder.GetMethodImpl","System.Reflection.Emit.EnumBuilder.GetMethods","System.Reflection.Emit.EnumBuilder.GetNestedType","System.Reflection.Emit.EnumBuilder.GetNestedTypes","System.Reflection.Emit.EnumBuilder.GetProperties","System.Reflection.Emit.EnumBuilder.GetPropertyImpl","System.Reflection.Emit.EnumBuilder.GUID","System.Reflection.Emit.EnumBuilder.HasElementTypeImpl","System.Reflection.Emit.EnumBuilder.InvokeMember","System.Reflection.Emit.EnumBuilder.IsArrayImpl","System.Reflection.Emit.EnumBuilder.IsAssignableFrom","System.Reflection.Emit.EnumBuilder.IsByRefImpl","System.Reflection.Emit.EnumBuilder.IsCOMObjectImpl","System.Reflection.Emit.EnumBuilder.IsConstructedGenericType","System.Reflection.Emit.EnumBuilder.IsDefined","System.Reflection.Emit.EnumBuilder.IsPointerImpl","System.Reflection.Emit.EnumBuilder.IsPrimitiveImpl","System.Reflection.Emit.EnumBuilder.IsValueTypeImpl","System.Reflection.Emit.EnumBuilder.MakeArrayType","System.Reflection.Emit.EnumBuilder.MakeByRefType","System.Reflection.Emit.EnumBuilder.MakePointerType","System.Reflection.Emit.EnumBuilder.Module","System.Reflection.Emit.EnumBuilder.Name","System.Reflection.Emit.EnumBuilder.Namespace","System.Reflection.Emit.EnumBuilder.ReflectedType","System.Reflection.Emit.EnumBuilder.SetCustomAttribute","System.Reflection.Emit.EnumBuilder._EnumBuilder.GetIDsOfNames","System.Reflection.Emit.EnumBuilder._EnumBuilder.GetTypeInfo","System.Reflection.Emit.EnumBuilder._EnumBuilder.GetTypeInfoCount","System.Reflection.Emit.EnumBuilder._EnumBuilder.Invoke","System.Reflection.Emit.EnumBuilder.TypeHandle","System.Reflection.Emit.EnumBuilder.TypeToken","System.Reflection.Emit.EnumBuilder.UnderlyingField","System.Reflection.Emit.EnumBuilder.UnderlyingSystemType"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Reflection.Emit.EnumBuilder","System::Reflection::Emit::EnumBuilder","System.Reflection.Emit.EnumBuilder.Assembly","System::Reflection::Emit::EnumBuilder::Assembly","System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName","System::Reflection::Emit::EnumBuilder::AssemblyQualifiedName","System.Reflection.Emit.EnumBuilder.BaseType","System::Reflection::Emit::EnumBuilder::BaseType","System.Reflection.Emit.EnumBuilder.CreateType","System::Reflection::Emit::EnumBuilder::CreateType","System.Reflection.Emit.EnumBuilder.CreateTypeInfo","System::Reflection::Emit::EnumBuilder::CreateTypeInfo","System.Reflection.Emit.EnumBuilder.DeclaringType","System::Reflection::Emit::EnumBuilder::DeclaringType","System.Reflection.Emit.EnumBuilder.DefineLiteral","System::Reflection::Emit::EnumBuilder::DefineLiteral","System.Reflection.Emit.EnumBuilder.FullName","System::Reflection::Emit::EnumBuilder::FullName","System.Reflection.Emit.EnumBuilder.GetAttributeFlagsImpl","System::Reflection::Emit::EnumBuilder::GetAttributeFlagsImpl","System.Reflection.Emit.EnumBuilder.GetConstructorImpl","System::Reflection::Emit::EnumBuilder::GetConstructorImpl","System.Reflection.Emit.EnumBuilder.GetConstructors","System::Reflection::Emit::EnumBuilder::GetConstructors","System.Reflection.Emit.EnumBuilder.GetCustomAttributes","System::Reflection::Emit::EnumBuilder::GetCustomAttributes","System.Reflection.Emit.EnumBuilder.GetElementType","System::Reflection::Emit::EnumBuilder::GetElementType","System.Reflection.Emit.EnumBuilder.GetEnumUnderlyingType","System::Reflection::Emit::EnumBuilder::GetEnumUnderlyingType","System.Reflection.Emit.EnumBuilder.GetEvent","System::Reflection::Emit::EnumBuilder::GetEvent","System.Reflection.Emit.EnumBuilder.GetEvents","System::Reflection::Emit::EnumBuilder::GetEvents","System.Reflection.Emit.EnumBuilder.GetField","System::Reflection::Emit::EnumBuilder::GetField","System.Reflection.Emit.EnumBuilder.GetFields","System::Reflection::Emit::EnumBuilder::GetFields","System.Reflection.Emit.EnumBuilder.GetInterface","System::Reflection::Emit::EnumBuilder::GetInterface","System.Reflection.Emit.EnumBuilder.GetInterfaceMap","System::Reflection::Emit::EnumBuilder::GetInterfaceMap","System.Reflection.Emit.EnumBuilder.GetInterfaces","System::Reflection::Emit::EnumBuilder::GetInterfaces","System.Reflection.Emit.EnumBuilder.GetMember","System::Reflection::Emit::EnumBuilder::GetMember","System.Reflection.Emit.EnumBuilder.GetMembers","System::Reflection::Emit::EnumBuilder::GetMembers","System.Reflection.Emit.EnumBuilder.GetMethodImpl","System::Reflection::Emit::EnumBuilder::GetMethodImpl","System.Reflection.Emit.EnumBuilder.GetMethods","System::Reflection::Emit::EnumBuilder::GetMethods","System.Reflection.Emit.EnumBuilder.GetNestedType","System::Reflection::Emit::EnumBuilder::GetNestedType","System.Reflection.Emit.EnumBuilder.GetNestedTypes","System::Reflection::Emit::EnumBuilder::GetNestedTypes","System.Reflection.Emit.EnumBuilder.GetProperties","System::Reflection::Emit::EnumBuilder::GetProperties","System.Reflection.Emit.EnumBuilder.GetPropertyImpl","System::Reflection::Emit::EnumBuilder::GetPropertyImpl","System.Reflection.Emit.EnumBuilder.GUID","System::Reflection::Emit::EnumBuilder::GUID","System.Reflection.Emit.EnumBuilder.HasElementTypeImpl","System::Reflection::Emit::EnumBuilder::HasElementTypeImpl","System.Reflection.Emit.EnumBuilder.InvokeMember","System::Reflection::Emit::EnumBuilder::InvokeMember","System.Reflection.Emit.EnumBuilder.IsArrayImpl","System::Reflection::Emit::EnumBuilder::IsArrayImpl","System.Reflection.Emit.EnumBuilder.IsAssignableFrom","System::Reflection::Emit::EnumBuilder::IsAssignableFrom","System.Reflection.Emit.EnumBuilder.IsByRefImpl","System::Reflection::Emit::EnumBuilder::IsByRefImpl","System.Reflection.Emit.EnumBuilder.IsCOMObjectImpl","System::Reflection::Emit::EnumBuilder::IsCOMObjectImpl","System.Reflection.Emit.EnumBuilder.IsConstructedGenericType","System::Reflection::Emit::EnumBuilder::IsConstructedGenericType","System.Reflection.Emit.EnumBuilder.IsDefined","System::Reflection::Emit::EnumBuilder::IsDefined","System.Reflection.Emit.EnumBuilder.IsPointerImpl","System::Reflection::Emit::EnumBuilder::IsPointerImpl","System.Reflection.Emit.EnumBuilder.IsPrimitiveImpl","System::Reflection::Emit::EnumBuilder::IsPrimitiveImpl","System.Reflection.Emit.EnumBuilder.IsValueTypeImpl","System::Reflection::Emit::EnumBuilder::IsValueTypeImpl","System.Reflection.Emit.EnumBuilder.MakeArrayType","System::Reflection::Emit::EnumBuilder::MakeArrayType","System.Reflection.Emit.EnumBuilder.MakeByRefType","System::Reflection::Emit::EnumBuilder::MakeByRefType","System.Reflection.Emit.EnumBuilder.MakePointerType","System::Reflection::Emit::EnumBuilder::MakePointerType","System.Reflection.Emit.EnumBuilder.Module","System::Reflection::Emit::EnumBuilder::Module","System.Reflection.Emit.EnumBuilder.Name","System::Reflection::Emit::EnumBuilder::Name","System.Reflection.Emit.EnumBuilder.Namespace","System::Reflection::Emit::EnumBuilder::Namespace","System.Reflection.Emit.EnumBuilder.ReflectedType","System::Reflection::Emit::EnumBuilder::ReflectedType","System.Reflection.Emit.EnumBuilder.SetCustomAttribute","System::Reflection::Emit::EnumBuilder::SetCustomAttribute","System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetIDsOfNames","System::Reflection::Emit::EnumBuilder::System#Runtime#InteropServices#_EnumBuilder#GetIDsOfNames","System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfo","System::Reflection::Emit::EnumBuilder::System#Runtime#InteropServices#_EnumBuilder#GetTypeInfo","System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfoCount","System::Reflection::Emit::EnumBuilder::System#Runtime#InteropServices#_EnumBuilder#GetTypeInfoCount","System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke","System::Reflection::Emit::EnumBuilder::System#Runtime#InteropServices#_EnumBuilder#Invoke","System.Reflection.Emit.EnumBuilder.TypeHandle","System::Reflection::Emit::EnumBuilder::TypeHandle","System.Reflection.Emit.EnumBuilder.TypeToken","System::Reflection::Emit::EnumBuilder::TypeToken","System.Reflection.Emit.EnumBuilder.UnderlyingField","System::Reflection::Emit::EnumBuilder::UnderlyingField","System.Reflection.Emit.EnumBuilder.UnderlyingSystemType","System::Reflection::Emit::EnumBuilder::UnderlyingSystemType"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"d6c0e26b-0f6d-b840-aaf7-818727200bdc","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Reflection.Emit/EnumBuilder.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"EnumBuilder class | Microsoft Docs","_op_ogTitle":"EnumBuilder class","description":"Describes and represents an enumeration type.\n","toc_asset_id":"_splitted/System.Reflection.Emit/toc.json","toc_rel":"_splitted/System.Reflection.Emit/toc.json","source_url":"","ms.assetid":"System.Reflection.Emit.EnumBuilder","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.emit.enumbuilder","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.emit.enumbuilder","fileRelativePath":"System.Reflection.Emit.EnumBuilder.html"},"themesRelativePathToOutputRoot":"_themes/"}