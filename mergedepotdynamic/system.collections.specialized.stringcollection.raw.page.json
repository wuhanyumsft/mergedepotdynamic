{"content":"    \r\n    <h1 id=\"System_Collections_Specialized_StringCollection\">\r\n      <span class=\"lang-csharp\">StringCollection</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a collection of strings.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class StringCollection : System.Collections.IList</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">StringCollection</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>StringCollection accepts <code>null</code> as a valid value and allows duplicate elements.  </p>\n<p> String comparisons are case-sensitive.  </p>\n<p> Elements in this collection can be accessed using an integer index.  Indexes in this collection are zero-based.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringCollection__ctor\" data-linktype=\"self-bookmark\">StringCollection()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringCollection_Count\" data-linktype=\"self-bookmark\">Count</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of strings contained in the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringCollection_IsReadOnly\" data-linktype=\"self-bookmark\">IsReadOnly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringCollection_IsSynchronized\" data-linktype=\"self-bookmark\">IsSynchronized</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether access to the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> is synchronized (thread safe).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringCollection_Item_System_Int32_\" data-linktype=\"self-bookmark\">Item(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the element at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringCollection_SyncRoot\" data-linktype=\"self-bookmark\">SyncRoot</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringCollection_Add_System_String_\" data-linktype=\"self-bookmark\">Add(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a string to the end of the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringCollection_AddRange_System_String___\" data-linktype=\"self-bookmark\">AddRange(String[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the elements of a string array to the end of the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringCollection_Clear\" data-linktype=\"self-bookmark\">Clear()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes all the strings from the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringCollection_Contains_System_String_\" data-linktype=\"self-bookmark\">Contains(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified string is in the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringCollection_CopyTo_System_String___System_Int32_\" data-linktype=\"self-bookmark\">CopyTo(String[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the entire <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> values to a one-dimensional array of strings, starting at the specified index of the target array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringCollection_GetEnumerator\" data-linktype=\"self-bookmark\">GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.collections.specialized.stringenumerator\" data-linktype=\"relative-path\">StringEnumerator</a> that iterates through the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringCollection_IndexOf_System_String_\" data-linktype=\"self-bookmark\">IndexOf(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified string and returns the zero-based index of the first occurrence within the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringCollection_Insert_System_Int32_System_String_\" data-linktype=\"self-bookmark\">Insert(Int32,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Inserts a string into the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringCollection_Remove_System_String_\" data-linktype=\"self-bookmark\">Remove(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the first occurrence of a specific string from the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringCollection_RemoveAt_System_Int32_\" data-linktype=\"self-bookmark\">RemoveAt(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the string at the specified index of the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringCollection_System_Collections_ICollection_CopyTo_System_Array_System_Int32_\" data-linktype=\"self-bookmark\">ICollection.CopyTo(Array,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the entire <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> to a compatible one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>, starting at the specified index of the target array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringCollection_System_Collections_IEnumerable_GetEnumerator\" data-linktype=\"self-bookmark\">IEnumerable.GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> that iterates through the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringCollection_System_Collections_IList_Add_System_Object_\" data-linktype=\"self-bookmark\">IList.Add(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds an object to the end of the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringCollection_System_Collections_IList_Contains_System_Object_\" data-linktype=\"self-bookmark\">IList.Contains(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether an element is in the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringCollection_System_Collections_IList_IndexOf_System_Object_\" data-linktype=\"self-bookmark\">IList.IndexOf(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> and returns the zero-based index of the first occurrence within the entire <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringCollection_System_Collections_IList_Insert_System_Int32_System_Object_\" data-linktype=\"self-bookmark\">IList.Insert(Int32,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Inserts an element into the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringCollection_System_Collections_IList_IsFixedSize\" data-linktype=\"self-bookmark\">IList.IsFixedSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> object has a fixed size.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringCollection_System_Collections_IList_IsReadOnly\" data-linktype=\"self-bookmark\">IList.IsReadOnly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> object is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringCollection_System_Collections_IList_Item_System_Int32_\" data-linktype=\"self-bookmark\">IList.Item(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the element at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_StringCollection_System_Collections_IList_Remove_System_Object_\" data-linktype=\"self-bookmark\">IList.Remove(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the first occurrence of a specific object from the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringCollection__ctor\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringCollection__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StringCollection()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public StringCollection ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringCollection_Count\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringCollection_Count_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Count</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of strings contained in the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Count { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of strings contained in the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example copies a <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> to an array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Specialized.StringCollectionCopyTo#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\n\npublic class SamplesStringCollection  {\n\n   public static void Main()  {\n\n      // Creates and initializes a new StringCollection.\n      StringCollection myCol = new StringCollection();\n      String[] myArr = new String[] { &quot;RED&quot;, &quot;orange&quot;, &quot;yellow&quot;, &quot;RED&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;RED&quot;, &quot;indigo&quot;, &quot;violet&quot;, &quot;RED&quot; };\n      myCol.AddRange( myArr );\n\n      Console.WriteLine( &quot;Initial contents of the StringCollection:&quot; );\n      PrintValues( myCol );\n\n      // Copies the collection to a new array starting at index 0.\n      String[] myArr2 = new String[myCol.Count];\n      myCol.CopyTo( myArr2, 0 );\n\n      Console.WriteLine( &quot;The new array contains:&quot; );\n      for ( int i = 0; i &lt; myArr2.Length; i++ )  {\n         Console.WriteLine( &quot;   [{0}] {1}&quot;, i, myArr2[i] );\n      }\n      Console.WriteLine();\n\n   }\n\n   public static void PrintValues( IEnumerable myCol )  {\n      foreach ( Object obj in myCol )\n         Console.WriteLine( &quot;   {0}&quot;, obj );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nInitial contents of the StringCollection:\n   RED\n   orange\n   yellow\n   RED\n   green\n   blue\n   RED\n   indigo\n   violet\n   RED\n\nThe new array contains:\n   [0] RED\n   [1] orange\n   [2] yellow\n   [3] RED\n   [4] green\n   [5] blue\n   [6] RED\n   [7] indigo\n   [8] violet\n   [9] RED\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Collections.Specialized.StringCollectionCopyTo#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\nvoid PrintValues( IEnumerable^ myCol );\nint main()\n{\n   \n   // Creates and initializes a new StringCollection.\n   StringCollection^ myCol = gcnew StringCollection;\n   array&lt;String^&gt;^myArr = {&quot;RED&quot;,&quot;orange&quot;,&quot;yellow&quot;,&quot;RED&quot;,&quot;green&quot;,&quot;blue&quot;,&quot;RED&quot;,&quot;indigo&quot;,&quot;violet&quot;,&quot;RED&quot;};\n   myCol-&gt;AddRange( myArr );\n   Console::WriteLine( &quot;Initial contents of the StringCollection:&quot; );\n   PrintValues( myCol );\n   \n   // Copies the collection to a new array starting at index 0.\n   array&lt;String^&gt;^myArr2 = gcnew array&lt;String^&gt;(myCol-&gt;Count);\n   myCol-&gt;CopyTo( myArr2, 0 );\n   Console::WriteLine( &quot;The new array contains:&quot; );\n   for ( int i = 0; i &lt; myArr2-&gt;Length; i++ )\n   {\n      Console::WriteLine( &quot;   [{0}] {1}&quot;, i, myArr2[ i ] );\n\n   }\n   Console::WriteLine();\n}\n\nvoid PrintValues( IEnumerable^ myCol )\n{\n   IEnumerator^ myEnum = myCol-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;   {0}&quot;, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/*\nThis code produces the following output.\n\nInitial contents of the StringCollection:\n   RED\n   orange\n   yellow\n   RED\n   green\n   blue\n   RED\n   indigo\n   violet\n   RED\n\nThe new array contains:\n   [0] RED\n   [1] orange\n   [2] yellow\n   [3] RED\n   [4] green\n   [5] blue\n   [6] RED\n   [7] indigo\n   [8] violet\n   [9] RED\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Specialized.StringCollectionCopyTo#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\n\nPublic Class SamplesStringCollection   \n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new StringCollection.\n      Dim myCol As New StringCollection()\n      Dim myArr() As [String] = {&quot;RED&quot;, &quot;orange&quot;, &quot;yellow&quot;, &quot;RED&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;RED&quot;, &quot;indigo&quot;, &quot;violet&quot;, &quot;RED&quot;}\n      myCol.AddRange(myArr)\n\n      Console.WriteLine(&quot;Initial contents of the StringCollection:&quot;)\n      PrintValues(myCol)\n\n      &#39; Copies the collection to a new array starting at index 0.\n      Dim myArr2(myCol.Count) As [String]\n      myCol.CopyTo(myArr2, 0)\n\n      Console.WriteLine(&quot;The new array contains:&quot;)\n      Dim i As Integer\n      For i = 0 To myArr2.Length - 1\n         Console.WriteLine(&quot;   [{0}] {1}&quot;, i, myArr2(i))\n      Next i\n      Console.WriteLine()\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintValues(myCol As IEnumerable)\n      Dim obj As [Object]\n      For Each obj In  myCol\n         Console.WriteLine(&quot;   {0}&quot;, obj)\n      Next obj\n      Console.WriteLine()\n   End Sub &#39;PrintValues\n\nEnd Class &#39;SamplesStringCollection \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Initial contents of the StringCollection:\n&#39;   RED\n&#39;   orange\n&#39;   yellow\n&#39;   RED\n&#39;   green\n&#39;   blue\n&#39;   RED\n&#39;   indigo\n&#39;   violet\n&#39;   RED\n&#39;\n&#39;The new array contains:\n&#39;   [0] RED\n&#39;   [1] orange\n&#39;   [2] yellow\n&#39;   [3] RED\n&#39;   [4] green\n&#39;   [5] blue\n&#39;   [6] RED\n&#39;   [7] indigo\n&#39;   [8] violet\n&#39;   [9] RED\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringCollection_IsReadOnly\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringCollection_IsReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsReadOnly</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsReadOnly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>This property always returns <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> implements the IsReadOnly property because it is required by the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">System.Collections.IList</a> interface.  </p>\n<p> A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  </p>\n<p> A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  </p>\n<p> A <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> instance is always writable.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringCollection_IsSynchronized\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringCollection_IsSynchronized_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSynchronized</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether access to the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> is synchronized (thread safe).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsSynchronized { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>This property always returns <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> implements the IsSynchronized property because it is required by the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> interface.  </p>\n<p> Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  </p>\n<p> The following code example shows how to lock the collection using the <a class=\"xref\" href=\"system.collections.specialized.stringcollection#System_Collections_Specialized_StringCollection_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> during the entire enumeration:  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.Specialized.StringCollection2#2\">        StringCollection^ myCollection = gcnew StringCollection();\n        bool lockTaken = false;\n        try\n        {\n            Monitor::Enter(myCollection-&gt;SyncRoot, lockTaken);\n            for each (Object^ item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n        finally\n        {\n            if (lockTaken)\n            {\n                Monitor::Exit(myCollection-&gt;SyncRoot);\n            }\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Specialized.StringCollection2#2\">        StringCollection myCollection = new StringCollection();\n        lock(myCollection.SyncRoot)\n        {\n            foreach (object item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Specialized.StringCollection2#2\">        Dim myCollection As New StringCollection()\n        SyncLock myCollection.SyncRoot\n            For Each item as Object In myCollection\n                &#39; Insert your code here.\n            Next item\n        End SyncLock\n</code></pre><p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringCollection_Item_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringCollection_Item_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the element at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string this[int index] { get; set; }</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the entry to get or set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The element at the specified index.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> is equal to or greater than <span class=\"xref\">stem.Collections.Specialized.StringCollection.Count*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property provides the ability to access a specific element in the collection by using the following syntax: <code>myCollection[index]</code>.  </p>\n<p> <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> accepts <code>null</code> as a valid value and allows duplicate elements.  </p>\n<p> The C# language uses the  keyword to define the indexers instead of implementing the Item property. Visual Basic implements Item as a default property, which provides the same indexing functionality.  </p>\n<p> Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringCollection_SyncRoot\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringCollection_SyncRoot_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SyncRoot</div>        \r\n          </div>\r\n    \r\n            <p>Gets an object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object SyncRoot { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Derived classes can provide their own synchronized version of the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> using the SyncRoot property. The synchronizing code must perform operations on the SyncRoot of the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>, not directly on the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> object.  </p>\n<p> Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  </p>\n<p> The following code example shows how to lock the collection using the SyncRoot during the entire enumeration:  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.Specialized.StringCollection2#2\">        StringCollection^ myCollection = gcnew StringCollection();\n        bool lockTaken = false;\n        try\n        {\n            Monitor::Enter(myCollection-&gt;SyncRoot, lockTaken);\n            for each (Object^ item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n        finally\n        {\n            if (lockTaken)\n            {\n                Monitor::Exit(myCollection-&gt;SyncRoot);\n            }\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Specialized.StringCollection2#2\">        StringCollection myCollection = new StringCollection();\n        lock(myCollection.SyncRoot)\n        {\n            foreach (object item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Specialized.StringCollection2#2\">        Dim myCollection As New StringCollection()\n        SyncLock myCollection.SyncRoot\n            For Each item as Object In myCollection\n                &#39; Insert your code here.\n            Next item\n        End SyncLock\n</code></pre><p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringCollection_Add_System_String_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringCollection_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Add(String)</div>        \r\n          </div>\r\n    \r\n            <p>Adds a string to the end of the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Add (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to add to the end of the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>. The value can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index at which the new element is inserted.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> accepts <code>null</code> as a valid value and allows duplicate elements.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.specialized.stringcollection#System_Collections_Specialized_StringCollection_Count_\" data-linktype=\"relative-path\">Count</a> is less than the capacity, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.specialized.stringcollection#System_Collections_Specialized_StringCollection_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example adds new elements to the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.Specialized.StringCollectionAdd#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\nvoid PrintValues( IEnumerable^ myCol );\nint main()\n{\n   \n   // Creates and initializes a new StringCollection.\n   StringCollection^ myCol = gcnew StringCollection;\n   Console::WriteLine( &quot;Initial contents of the StringCollection:&quot; );\n   PrintValues( myCol );\n   \n   // Adds a range of elements from an array to the end of the StringCollection.\n   array&lt;String^&gt;^myArr = {&quot;RED&quot;,&quot;orange&quot;,&quot;yellow&quot;,&quot;RED&quot;,&quot;green&quot;,&quot;blue&quot;,&quot;RED&quot;,&quot;indigo&quot;,&quot;violet&quot;,&quot;RED&quot;};\n   myCol-&gt;AddRange( myArr );\n   Console::WriteLine( &quot;After adding a range of elements:&quot; );\n   PrintValues( myCol );\n   \n   // Adds one element to the end of the StringCollection and inserts another at index 3.\n   myCol-&gt;Add( &quot;* white&quot; );\n   myCol-&gt;Insert( 3, &quot;* gray&quot; );\n   Console::WriteLine( &quot;After adding \\&quot;* white\\&quot; to the end and inserting \\&quot;* gray\\&quot; at index 3:&quot; );\n   PrintValues( myCol );\n}\n\nvoid PrintValues( IEnumerable^ myCol )\n{\n   IEnumerator^ myEnum = myCol-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;   {0}&quot;, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/*\nThis code produces the following output.\n\nInitial contents of the StringCollection:\n\nAfter adding a range of elements:\n   RED\n   orange\n   yellow\n   RED\n   green\n   blue\n   RED\n   indigo\n   violet\n   RED\n\nAfter adding &quot;* white&quot; to the end and inserting &quot;* gray&quot; at index 3:\n   RED\n   orange\n   yellow\n   * gray\n   RED\n   green\n   blue\n   RED\n   indigo\n   violet\n   RED\n   * white\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Specialized.StringCollectionAdd#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\n\npublic class SamplesStringCollection  {\n\n   public static void Main()  {\n\n      // Creates and initializes a new StringCollection.\n      StringCollection myCol = new StringCollection();\n\n      Console.WriteLine( &quot;Initial contents of the StringCollection:&quot; );\n      PrintValues( myCol );\n\n      // Adds a range of elements from an array to the end of the StringCollection.\n      String[] myArr = new String[] { &quot;RED&quot;, &quot;orange&quot;, &quot;yellow&quot;, &quot;RED&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;RED&quot;, &quot;indigo&quot;, &quot;violet&quot;, &quot;RED&quot; };\n      myCol.AddRange( myArr );\n\n      Console.WriteLine( &quot;After adding a range of elements:&quot; );\n      PrintValues( myCol );\n\n      // Adds one element to the end of the StringCollection and inserts another at index 3.\n      myCol.Add( &quot;* white&quot; );\n      myCol.Insert( 3, &quot;* gray&quot; );\n\n      Console.WriteLine( &quot;After adding \\&quot;* white\\&quot; to the end and inserting \\&quot;* gray\\&quot; at index 3:&quot; );\n      PrintValues( myCol );\n\n   }\n\n   public static void PrintValues( IEnumerable myCol )  {\n      foreach ( Object obj in myCol )\n         Console.WriteLine( &quot;   {0}&quot;, obj );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nInitial contents of the StringCollection:\n\nAfter adding a range of elements:\n   RED\n   orange\n   yellow\n   RED\n   green\n   blue\n   RED\n   indigo\n   violet\n   RED\n\nAfter adding &quot;* white&quot; to the end and inserting &quot;* gray&quot; at index 3:\n   RED\n   orange\n   yellow\n   * gray\n   RED\n   green\n   blue\n   RED\n   indigo\n   violet\n   RED\n   * white\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Specialized.StringCollectionAdd#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\n\nPublic Class SamplesStringCollection   \n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new StringCollection.\n      Dim myCol As New StringCollection()\n\n      Console.WriteLine(&quot;Initial contents of the StringCollection:&quot;)\n      PrintValues(myCol)\n\n      &#39; Adds a range of elements from an array to the end of the StringCollection.\n      Dim myArr() As [String] = {&quot;RED&quot;, &quot;orange&quot;, &quot;yellow&quot;, &quot;RED&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;RED&quot;, &quot;indigo&quot;, &quot;violet&quot;, &quot;RED&quot;}\n      myCol.AddRange(myArr)\n\n      Console.WriteLine(&quot;After adding a range of elements:&quot;)\n      PrintValues(myCol)\n\n      &#39; Adds one element to the end of the StringCollection and inserts another at index 3.\n      myCol.Add(&quot;* white&quot;)\n      myCol.Insert(3, &quot;* gray&quot;)\n\n      Console.WriteLine(&quot;After adding &quot;&quot;* white&quot;&quot; to the end and inserting &quot;&quot;* gray&quot;&quot; at index 3:&quot;)\n      PrintValues(myCol)\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintValues(myCol As IEnumerable)\n      Dim obj As [Object]\n      For Each obj In  myCol\n         Console.WriteLine(&quot;   {0}&quot;, obj)\n      Next obj\n      Console.WriteLine()\n   End Sub &#39;PrintValues\n\nEnd Class &#39;SamplesStringCollection \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Initial contents of the StringCollection:\n&#39;\n&#39;After adding a range of elements:\n&#39;   RED\n&#39;   orange\n&#39;   yellow\n&#39;   RED\n&#39;   green\n&#39;   blue\n&#39;   RED\n&#39;   indigo\n&#39;   violet\n&#39;   RED\n&#39;\n&#39;After adding &quot;* white&quot; to the end and inserting &quot;* gray&quot; at index 3:\n&#39;   RED\n&#39;   orange\n&#39;   yellow\n&#39;   * gray\n&#39;   RED\n&#39;   green\n&#39;   blue\n&#39;   RED\n&#39;   indigo\n&#39;   violet\n&#39;   RED\n&#39;   * white\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringCollection_AddRange_System_String___\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringCollection_AddRange_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddRange(String[])</div>        \r\n          </div>\r\n    \r\n            <p>Copies the elements of a string array to the end of the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AddRange (string[] value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of strings to add to the end of the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>. The array itself can not be <code>null</code> but it can contain elements that are <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> accepts <code>null</code> as a valid value and allows duplicate elements.  </p>\n<p> If the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> can accommodate the new elements without increasing the capacity, this method is an O(<code>n</code>) operation, where <code>n</code> is the number of elements to be added. If the capacity needs to be increased to accommodate the new elements, this method becomes an O(<code>n</code> + <code>m</code>) operation, where <code>n</code> is the number of elements to be added and <code>m</code> is <a class=\"xref\" href=\"system.collections.specialized.stringcollection#System_Collections_Specialized_StringCollection_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example adds new elements to the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.Specialized.StringCollectionAdd#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\nvoid PrintValues( IEnumerable^ myCol );\nint main()\n{\n   \n   // Creates and initializes a new StringCollection.\n   StringCollection^ myCol = gcnew StringCollection;\n   Console::WriteLine( &quot;Initial contents of the StringCollection:&quot; );\n   PrintValues( myCol );\n   \n   // Adds a range of elements from an array to the end of the StringCollection.\n   array&lt;String^&gt;^myArr = {&quot;RED&quot;,&quot;orange&quot;,&quot;yellow&quot;,&quot;RED&quot;,&quot;green&quot;,&quot;blue&quot;,&quot;RED&quot;,&quot;indigo&quot;,&quot;violet&quot;,&quot;RED&quot;};\n   myCol-&gt;AddRange( myArr );\n   Console::WriteLine( &quot;After adding a range of elements:&quot; );\n   PrintValues( myCol );\n   \n   // Adds one element to the end of the StringCollection and inserts another at index 3.\n   myCol-&gt;Add( &quot;* white&quot; );\n   myCol-&gt;Insert( 3, &quot;* gray&quot; );\n   Console::WriteLine( &quot;After adding \\&quot;* white\\&quot; to the end and inserting \\&quot;* gray\\&quot; at index 3:&quot; );\n   PrintValues( myCol );\n}\n\nvoid PrintValues( IEnumerable^ myCol )\n{\n   IEnumerator^ myEnum = myCol-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;   {0}&quot;, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/*\nThis code produces the following output.\n\nInitial contents of the StringCollection:\n\nAfter adding a range of elements:\n   RED\n   orange\n   yellow\n   RED\n   green\n   blue\n   RED\n   indigo\n   violet\n   RED\n\nAfter adding &quot;* white&quot; to the end and inserting &quot;* gray&quot; at index 3:\n   RED\n   orange\n   yellow\n   * gray\n   RED\n   green\n   blue\n   RED\n   indigo\n   violet\n   RED\n   * white\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Specialized.StringCollectionAdd#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\n\npublic class SamplesStringCollection  {\n\n   public static void Main()  {\n\n      // Creates and initializes a new StringCollection.\n      StringCollection myCol = new StringCollection();\n\n      Console.WriteLine( &quot;Initial contents of the StringCollection:&quot; );\n      PrintValues( myCol );\n\n      // Adds a range of elements from an array to the end of the StringCollection.\n      String[] myArr = new String[] { &quot;RED&quot;, &quot;orange&quot;, &quot;yellow&quot;, &quot;RED&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;RED&quot;, &quot;indigo&quot;, &quot;violet&quot;, &quot;RED&quot; };\n      myCol.AddRange( myArr );\n\n      Console.WriteLine( &quot;After adding a range of elements:&quot; );\n      PrintValues( myCol );\n\n      // Adds one element to the end of the StringCollection and inserts another at index 3.\n      myCol.Add( &quot;* white&quot; );\n      myCol.Insert( 3, &quot;* gray&quot; );\n\n      Console.WriteLine( &quot;After adding \\&quot;* white\\&quot; to the end and inserting \\&quot;* gray\\&quot; at index 3:&quot; );\n      PrintValues( myCol );\n\n   }\n\n   public static void PrintValues( IEnumerable myCol )  {\n      foreach ( Object obj in myCol )\n         Console.WriteLine( &quot;   {0}&quot;, obj );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nInitial contents of the StringCollection:\n\nAfter adding a range of elements:\n   RED\n   orange\n   yellow\n   RED\n   green\n   blue\n   RED\n   indigo\n   violet\n   RED\n\nAfter adding &quot;* white&quot; to the end and inserting &quot;* gray&quot; at index 3:\n   RED\n   orange\n   yellow\n   * gray\n   RED\n   green\n   blue\n   RED\n   indigo\n   violet\n   RED\n   * white\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Specialized.StringCollectionAdd#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\n\nPublic Class SamplesStringCollection   \n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new StringCollection.\n      Dim myCol As New StringCollection()\n\n      Console.WriteLine(&quot;Initial contents of the StringCollection:&quot;)\n      PrintValues(myCol)\n\n      &#39; Adds a range of elements from an array to the end of the StringCollection.\n      Dim myArr() As [String] = {&quot;RED&quot;, &quot;orange&quot;, &quot;yellow&quot;, &quot;RED&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;RED&quot;, &quot;indigo&quot;, &quot;violet&quot;, &quot;RED&quot;}\n      myCol.AddRange(myArr)\n\n      Console.WriteLine(&quot;After adding a range of elements:&quot;)\n      PrintValues(myCol)\n\n      &#39; Adds one element to the end of the StringCollection and inserts another at index 3.\n      myCol.Add(&quot;* white&quot;)\n      myCol.Insert(3, &quot;* gray&quot;)\n\n      Console.WriteLine(&quot;After adding &quot;&quot;* white&quot;&quot; to the end and inserting &quot;&quot;* gray&quot;&quot; at index 3:&quot;)\n      PrintValues(myCol)\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintValues(myCol As IEnumerable)\n      Dim obj As [Object]\n      For Each obj In  myCol\n         Console.WriteLine(&quot;   {0}&quot;, obj)\n      Next obj\n      Console.WriteLine()\n   End Sub &#39;PrintValues\n\nEnd Class &#39;SamplesStringCollection \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Initial contents of the StringCollection:\n&#39;\n&#39;After adding a range of elements:\n&#39;   RED\n&#39;   orange\n&#39;   yellow\n&#39;   RED\n&#39;   green\n&#39;   blue\n&#39;   RED\n&#39;   indigo\n&#39;   violet\n&#39;   RED\n&#39;\n&#39;After adding &quot;* white&quot; to the end and inserting &quot;* gray&quot; at index 3:\n&#39;   RED\n&#39;   orange\n&#39;   yellow\n&#39;   * gray\n&#39;   RED\n&#39;   green\n&#39;   blue\n&#39;   RED\n&#39;   indigo\n&#39;   violet\n&#39;   RED\n&#39;   * white\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringCollection_Clear\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringCollection_Clear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clear()</div>        \r\n          </div>\r\n    \r\n            <p>Removes all the strings from the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Clear ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.specialized.stringcollection#System_Collections_Specialized_StringCollection_Count_\" data-linktype=\"relative-path\">Count</a> is set to zero, and references to other objects from elements of the collection are also released.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.specialized.stringcollection#System_Collections_Specialized_StringCollection_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example removes elements from the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.Specialized.StringCollectionRemove#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\nvoid PrintValues( IEnumerable^ myCol );\nint main()\n{\n   \n   // Creates and initializes a new StringCollection.\n   StringCollection^ myCol = gcnew StringCollection;\n   array&lt;String^&gt;^myArr = {&quot;RED&quot;,&quot;orange&quot;,&quot;yellow&quot;,&quot;RED&quot;,&quot;green&quot;,&quot;blue&quot;,&quot;RED&quot;,&quot;indigo&quot;,&quot;violet&quot;,&quot;RED&quot;};\n   myCol-&gt;AddRange( myArr );\n   Console::WriteLine( &quot;Initial contents of the StringCollection:&quot; );\n   PrintValues( myCol );\n   \n   // Removes one element from the StringCollection.\n   myCol-&gt;Remove( &quot;yellow&quot; );\n   Console::WriteLine( &quot;After removing \\&quot;yellow\\&quot;:&quot; );\n   PrintValues( myCol );\n   \n   // Removes all occurrences of a value from the StringCollection.\n   int i = myCol-&gt;IndexOf( &quot;RED&quot; );\n   while ( i &gt; -1 )\n   {\n      myCol-&gt;RemoveAt( i );\n      i = myCol-&gt;IndexOf( &quot;RED&quot; );\n   }\n\n   Console::WriteLine( &quot;After removing all occurrences of \\&quot;RED\\&quot;:&quot; );\n   PrintValues( myCol );\n   \n   // Clears the entire collection.\n   myCol-&gt;Clear();\n   Console::WriteLine( &quot;After clearing the collection:&quot; );\n   PrintValues( myCol );\n}\n\nvoid PrintValues( IEnumerable^ myCol )\n{\n   IEnumerator^ myEnum = myCol-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;   {0}&quot;, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/*\nThis code produces the following output.\n\nInitial contents of the StringCollection:\n   RED\n   orange\n   yellow\n   RED\n   green\n   blue\n   RED\n   indigo\n   violet\n   RED\n\nAfter removing &quot;yellow&quot;:\n   RED\n   orange\n   RED\n   green\n   blue\n   RED\n   indigo\n   violet\n   RED\n\nAfter removing all occurrences of &quot;RED&quot;:\n   orange\n   green\n   blue\n   indigo\n   violet\n\nAfter clearing the collection:\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Specialized.StringCollectionRemove#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\n\npublic class SamplesStringCollection  {\n\n   public static void Main()  {\n\n      // Creates and initializes a new StringCollection.\n      StringCollection myCol = new StringCollection();\n      String[] myArr = new String[] { &quot;RED&quot;, &quot;orange&quot;, &quot;yellow&quot;, &quot;RED&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;RED&quot;, &quot;indigo&quot;, &quot;violet&quot;, &quot;RED&quot; };\n      myCol.AddRange( myArr );\n\n      Console.WriteLine( &quot;Initial contents of the StringCollection:&quot; );\n      PrintValues( myCol );\n\n      // Removes one element from the StringCollection.\n      myCol.Remove( &quot;yellow&quot; );\n\n      Console.WriteLine( &quot;After removing \\&quot;yellow\\&quot;:&quot; );\n      PrintValues( myCol );\n\n      // Removes all occurrences of a value from the StringCollection.\n      int i = myCol.IndexOf( &quot;RED&quot; );\n      while ( i &gt; -1 )  {\n         myCol.RemoveAt( i );\n         i = myCol.IndexOf( &quot;RED&quot; );\n      }\n\n      Console.WriteLine( &quot;After removing all occurrences of \\&quot;RED\\&quot;:&quot; );\n      PrintValues( myCol );\n\n      // Clears the entire collection.\n      myCol.Clear();\n\n      Console.WriteLine( &quot;After clearing the collection:&quot; );\n      PrintValues( myCol );\n\n   }\n\n   public static void PrintValues( IEnumerable myCol )  {\n      foreach ( Object obj in myCol )\n         Console.WriteLine( &quot;   {0}&quot;, obj );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nInitial contents of the StringCollection:\n   RED\n   orange\n   yellow\n   RED\n   green\n   blue\n   RED\n   indigo\n   violet\n   RED\n\nAfter removing &quot;yellow&quot;:\n   RED\n   orange\n   RED\n   green\n   blue\n   RED\n   indigo\n   violet\n   RED\n\nAfter removing all occurrences of &quot;RED&quot;:\n   orange\n   green\n   blue\n   indigo\n   violet\n\nAfter clearing the collection:\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Specialized.StringCollectionRemove#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\n\nPublic Class SamplesStringCollection   \n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new StringCollection.\n      Dim myCol As New StringCollection()\n      Dim myArr() As [String] = {&quot;RED&quot;, &quot;orange&quot;, &quot;yellow&quot;, &quot;RED&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;RED&quot;, &quot;indigo&quot;, &quot;violet&quot;, &quot;RED&quot;}\n      myCol.AddRange(myArr)\n\n      Console.WriteLine(&quot;Initial contents of the StringCollection:&quot;)\n      PrintValues(myCol)\n\n      &#39; Removes one element from the StringCollection.\n      myCol.Remove(&quot;yellow&quot;)\n\n      Console.WriteLine(&quot;After removing &quot;&quot;yellow&quot;&quot;:&quot;)\n      PrintValues(myCol)\n\n      &#39; Removes all occurrences of a value from the StringCollection.\n      Dim i As Integer = myCol.IndexOf(&quot;RED&quot;)\n      While i &gt; - 1\n         myCol.RemoveAt(i)\n         i = myCol.IndexOf(&quot;RED&quot;)\n      End While\n\n      Console.WriteLine(&quot;After removing all occurrences of &quot;&quot;RED&quot;&quot;:&quot;)\n      PrintValues(myCol)\n\n      &#39; Clears the entire collection.\n      myCol.Clear()\n\n      Console.WriteLine(&quot;After clearing the collection:&quot;)\n      PrintValues(myCol)\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintValues(myCol As IEnumerable)\n      Dim obj As [Object]\n      For Each obj In  myCol\n         Console.WriteLine(&quot;   {0}&quot;, obj)\n      Next obj\n      Console.WriteLine()\n   End Sub &#39;PrintValues\n\nEnd Class &#39;SamplesStringCollection \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Initial contents of the StringCollection:\n&#39;   RED\n&#39;   orange\n&#39;   yellow\n&#39;   RED\n&#39;   green\n&#39;   blue\n&#39;   RED\n&#39;   indigo\n&#39;   violet\n&#39;   RED\n&#39;\n&#39;After removing &quot;yellow&quot;:\n&#39;   RED\n&#39;   orange\n&#39;   RED\n&#39;   green\n&#39;   blue\n&#39;   RED\n&#39;   indigo\n&#39;   violet\n&#39;   RED\n&#39;\n&#39;After removing all occurrences of &quot;RED&quot;:\n&#39;   orange\n&#39;   green\n&#39;   blue\n&#39;   indigo\n&#39;   violet\n&#39;\n&#39;After clearing the collection:\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringCollection_Contains_System_String_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringCollection_Contains_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Contains(String)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified string is in the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Contains (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to locate in the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>. The value can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>value</code> is found in the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Contains method can confirm the existence of a string before performing further operations.  </p>\n<p> This method determines equality by calling <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>. String comparisons are case-sensitive.  </p>\n<p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.specialized.stringcollection#System_Collections_Specialized_StringCollection_Count_\" data-linktype=\"relative-path\">Count</a>.  </p>\n<p> Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods on <code>item</code> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods of the <code>item</code> parameter on the objects in the collection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example searches the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> for an element.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Specialized.StringCollectionContains#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\n\npublic class SamplesStringCollection  {\n\n   public static void Main()  {\n\n      // Creates and initializes a new StringCollection.\n      StringCollection myCol = new StringCollection();\n      String[] myArr = new String[] { &quot;RED&quot;, &quot;orange&quot;, &quot;yellow&quot;, &quot;RED&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;RED&quot;, &quot;indigo&quot;, &quot;violet&quot;, &quot;RED&quot; };\n      myCol.AddRange( myArr );\n\n      Console.WriteLine( &quot;Initial contents of the StringCollection:&quot; );\n      PrintValues( myCol );\n\n      // Checks whether the collection contains &quot;orange&quot; and, if so, displays its index.\n      if ( myCol.Contains( &quot;orange&quot; ) )\n         Console.WriteLine( &quot;The collection contains \\&quot;orange\\&quot; at index {0}.&quot;, myCol.IndexOf( &quot;orange&quot; ) );\n      else\n         Console.WriteLine( &quot;The collection does not contain \\&quot;orange\\&quot;.&quot; );\n\n   }\n\n   public static void PrintValues( IEnumerable myCol )  {\n      foreach ( Object obj in myCol )\n         Console.WriteLine( &quot;   {0}&quot;, obj );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nInitial contents of the StringCollection:\n   RED\n   orange\n   yellow\n   RED\n   green\n   blue\n   RED\n   indigo\n   violet\n   RED\n\nThe collection contains &quot;orange&quot; at index 1.\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Collections.Specialized.StringCollectionContains#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\nvoid PrintValues( IEnumerable^ myCol );\nint main()\n{\n   \n   // Creates and initializes a new StringCollection.\n   StringCollection^ myCol = gcnew StringCollection;\n   array&lt;String^&gt;^myArr = {&quot;RED&quot;,&quot;orange&quot;,&quot;yellow&quot;,&quot;RED&quot;,&quot;green&quot;,&quot;blue&quot;,&quot;RED&quot;,&quot;indigo&quot;,&quot;violet&quot;,&quot;RED&quot;};\n   myCol-&gt;AddRange( myArr );\n   Console::WriteLine( &quot;Initial contents of the StringCollection:&quot; );\n   PrintValues( myCol );\n   \n   // Checks whether the collection contains &quot;orange&quot; and, if so, displays its index.\n   if ( myCol-&gt;Contains( &quot;orange&quot; ) )\n      Console::WriteLine( &quot;The collection contains \\&quot;orange\\&quot; at index {0}.&quot;, myCol-&gt;IndexOf( &quot;orange&quot; ) );\n   else\n      Console::WriteLine( &quot;The collection does not contain \\&quot;orange\\&quot;.&quot; );\n}\n\nvoid PrintValues( IEnumerable^ myCol )\n{\n   IEnumerator^ myEnum = myCol-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;   {0}&quot;, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/*\nThis code produces the following output.\n\nInitial contents of the StringCollection:\n   RED\n   orange\n   yellow\n   RED\n   green\n   blue\n   RED\n   indigo\n   violet\n   RED\n\nThe collection contains &quot;orange&quot; at index 1.\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Specialized.StringCollectionContains#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\n\nPublic Class SamplesStringCollection   \n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new StringCollection.\n      Dim myCol As New StringCollection()\n      Dim myArr() As [String] = {&quot;RED&quot;, &quot;orange&quot;, &quot;yellow&quot;, &quot;RED&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;RED&quot;, &quot;indigo&quot;, &quot;violet&quot;, &quot;RED&quot;}\n      myCol.AddRange(myArr)\n\n      Console.WriteLine(&quot;Initial contents of the StringCollection:&quot;)\n      PrintValues(myCol)\n\n      &#39; Checks whether the collection contains &quot;orange&quot; and, if so, displays its index.\n      If myCol.Contains(&quot;orange&quot;) Then\n         Console.WriteLine(&quot;The collection contains &quot;&quot;orange&quot;&quot; at index {0}.&quot;, myCol.IndexOf(&quot;orange&quot;))\n      Else\n         Console.WriteLine(&quot;The collection does not contain &quot;&quot;orange&quot;&quot;.&quot;)\n      End If \n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintValues(myCol As IEnumerable)\n      Dim obj As [Object]\n      For Each obj In  myCol\n         Console.WriteLine(&quot;   {0}&quot;, obj)\n      Next obj\n      Console.WriteLine()\n   End Sub &#39;PrintValues\n\nEnd Class &#39;SamplesStringCollection \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Initial contents of the StringCollection:\n&#39;   RED\n&#39;   orange\n&#39;   yellow\n&#39;   RED\n&#39;   green\n&#39;   blue\n&#39;   RED\n&#39;   indigo\n&#39;   violet\n&#39;   RED\n&#39;\n&#39;The collection contains &quot;orange&quot; at index 1.\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringCollection_CopyTo_System_String___System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringCollection_CopyTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CopyTo(String[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the entire <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> values to a one-dimensional array of strings, starting at the specified index of the target array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void CopyTo (string[] array, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional array of strings that is the destination of the elements copied from <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>. The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> must have zero-based indexing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in <code>array</code> at which copying begins.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is multidimensional.  </p>\n<p> -or-  </p>\n<p> The number of elements in the source <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The type of the source <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> cannot be cast automatically to the type of the destination <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The specified array must be of a compatible type.  </p>\n<p> The elements are copied to the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> in the same order in which the enumerator of the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> iterates through the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.specialized.stringcollection#System_Collections_Specialized_StringCollection_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example copies a <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> to an array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Specialized.StringCollectionCopyTo#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\n\npublic class SamplesStringCollection  {\n\n   public static void Main()  {\n\n      // Creates and initializes a new StringCollection.\n      StringCollection myCol = new StringCollection();\n      String[] myArr = new String[] { &quot;RED&quot;, &quot;orange&quot;, &quot;yellow&quot;, &quot;RED&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;RED&quot;, &quot;indigo&quot;, &quot;violet&quot;, &quot;RED&quot; };\n      myCol.AddRange( myArr );\n\n      Console.WriteLine( &quot;Initial contents of the StringCollection:&quot; );\n      PrintValues( myCol );\n\n      // Copies the collection to a new array starting at index 0.\n      String[] myArr2 = new String[myCol.Count];\n      myCol.CopyTo( myArr2, 0 );\n\n      Console.WriteLine( &quot;The new array contains:&quot; );\n      for ( int i = 0; i &lt; myArr2.Length; i++ )  {\n         Console.WriteLine( &quot;   [{0}] {1}&quot;, i, myArr2[i] );\n      }\n      Console.WriteLine();\n\n   }\n\n   public static void PrintValues( IEnumerable myCol )  {\n      foreach ( Object obj in myCol )\n         Console.WriteLine( &quot;   {0}&quot;, obj );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nInitial contents of the StringCollection:\n   RED\n   orange\n   yellow\n   RED\n   green\n   blue\n   RED\n   indigo\n   violet\n   RED\n\nThe new array contains:\n   [0] RED\n   [1] orange\n   [2] yellow\n   [3] RED\n   [4] green\n   [5] blue\n   [6] RED\n   [7] indigo\n   [8] violet\n   [9] RED\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Collections.Specialized.StringCollectionCopyTo#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\nvoid PrintValues( IEnumerable^ myCol );\nint main()\n{\n   \n   // Creates and initializes a new StringCollection.\n   StringCollection^ myCol = gcnew StringCollection;\n   array&lt;String^&gt;^myArr = {&quot;RED&quot;,&quot;orange&quot;,&quot;yellow&quot;,&quot;RED&quot;,&quot;green&quot;,&quot;blue&quot;,&quot;RED&quot;,&quot;indigo&quot;,&quot;violet&quot;,&quot;RED&quot;};\n   myCol-&gt;AddRange( myArr );\n   Console::WriteLine( &quot;Initial contents of the StringCollection:&quot; );\n   PrintValues( myCol );\n   \n   // Copies the collection to a new array starting at index 0.\n   array&lt;String^&gt;^myArr2 = gcnew array&lt;String^&gt;(myCol-&gt;Count);\n   myCol-&gt;CopyTo( myArr2, 0 );\n   Console::WriteLine( &quot;The new array contains:&quot; );\n   for ( int i = 0; i &lt; myArr2-&gt;Length; i++ )\n   {\n      Console::WriteLine( &quot;   [{0}] {1}&quot;, i, myArr2[ i ] );\n\n   }\n   Console::WriteLine();\n}\n\nvoid PrintValues( IEnumerable^ myCol )\n{\n   IEnumerator^ myEnum = myCol-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;   {0}&quot;, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/*\nThis code produces the following output.\n\nInitial contents of the StringCollection:\n   RED\n   orange\n   yellow\n   RED\n   green\n   blue\n   RED\n   indigo\n   violet\n   RED\n\nThe new array contains:\n   [0] RED\n   [1] orange\n   [2] yellow\n   [3] RED\n   [4] green\n   [5] blue\n   [6] RED\n   [7] indigo\n   [8] violet\n   [9] RED\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Specialized.StringCollectionCopyTo#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\n\nPublic Class SamplesStringCollection   \n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new StringCollection.\n      Dim myCol As New StringCollection()\n      Dim myArr() As [String] = {&quot;RED&quot;, &quot;orange&quot;, &quot;yellow&quot;, &quot;RED&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;RED&quot;, &quot;indigo&quot;, &quot;violet&quot;, &quot;RED&quot;}\n      myCol.AddRange(myArr)\n\n      Console.WriteLine(&quot;Initial contents of the StringCollection:&quot;)\n      PrintValues(myCol)\n\n      &#39; Copies the collection to a new array starting at index 0.\n      Dim myArr2(myCol.Count) As [String]\n      myCol.CopyTo(myArr2, 0)\n\n      Console.WriteLine(&quot;The new array contains:&quot;)\n      Dim i As Integer\n      For i = 0 To myArr2.Length - 1\n         Console.WriteLine(&quot;   [{0}] {1}&quot;, i, myArr2(i))\n      Next i\n      Console.WriteLine()\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintValues(myCol As IEnumerable)\n      Dim obj As [Object]\n      For Each obj In  myCol\n         Console.WriteLine(&quot;   {0}&quot;, obj)\n      Next obj\n      Console.WriteLine()\n   End Sub &#39;PrintValues\n\nEnd Class &#39;SamplesStringCollection \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Initial contents of the StringCollection:\n&#39;   RED\n&#39;   orange\n&#39;   yellow\n&#39;   RED\n&#39;   green\n&#39;   blue\n&#39;   RED\n&#39;   indigo\n&#39;   violet\n&#39;   RED\n&#39;\n&#39;The new array contains:\n&#39;   [0] RED\n&#39;   [1] orange\n&#39;   [2] yellow\n&#39;   [3] RED\n&#39;   [4] green\n&#39;   [5] blue\n&#39;   [6] RED\n&#39;   [7] indigo\n&#39;   [8] violet\n&#39;   [9] RED\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringCollection_GetEnumerator\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringCollection_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.collections.specialized.stringenumerator\" data-linktype=\"relative-path\">StringEnumerator</a> that iterates through the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Specialized.StringEnumerator GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.specialized.stringenumerator\" data-linktype=\"relative-path\">StringEnumerator</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.collections.specialized.stringenumerator\" data-linktype=\"relative-path\">StringEnumerator</a> for the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>[Visual Basic, C#]  </p>\n<p> The <code>foreach</code> statement of the C# language (<code>for each</code> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <code>foreach</code> is recommended, instead of directly manipulating the enumerator.  </p>\n<p> Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  </p>\n<p> Initially, the enumerator is positioned before the first element in the collection. <a class=\"xref\" href=\"system.collections.specialized.stringenumerator#System_Collections_Specialized_StringEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> also brings the enumerator back to this position.  At this position, <a class=\"xref\" href=\"system.collections.specialized.stringenumerator#System_Collections_Specialized_StringEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. Therefore, you must call <a class=\"xref\" href=\"system.collections.specialized.stringenumerator#System_Collections_Specialized_StringEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> to advance the enumerator to the first element of the collection before reading the value of <a class=\"xref\" href=\"system.collections.specialized.stringenumerator#System_Collections_Specialized_StringEnumerator_Current_\" data-linktype=\"relative-path\">Current</a>.  </p>\n<p> <a class=\"xref\" href=\"system.collections.specialized.stringenumerator#System_Collections_Specialized_StringEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> returns the same object until either <a class=\"xref\" href=\"system.collections.specialized.stringenumerator#System_Collections_Specialized_StringEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> or <a class=\"xref\" href=\"system.collections.specialized.stringenumerator#System_Collections_Specialized_StringEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> is called. <a class=\"xref\" href=\"system.collections.specialized.stringenumerator#System_Collections_Specialized_StringEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> sets <a class=\"xref\" href=\"system.collections.specialized.stringenumerator#System_Collections_Specialized_StringEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the next element.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.specialized.stringenumerator#System_Collections_Specialized_StringEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> passes the end of the collection, the enumerator is positioned after the last element in the collection and <a class=\"xref\" href=\"system.collections.specialized.stringenumerator#System_Collections_Specialized_StringEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>. When the enumerator is at this position, subsequent calls to <a class=\"xref\" href=\"system.collections.specialized.stringenumerator#System_Collections_Specialized_StringEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> also return <code>false</code>. If the last call to <a class=\"xref\" href=\"system.collections.specialized.stringenumerator#System_Collections_Specialized_StringEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returned <code>false</code>, <a class=\"xref\" href=\"system.collections.specialized.stringenumerator#System_Collections_Specialized_StringEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. To set <a class=\"xref\" href=\"system.collections.specialized.stringenumerator#System_Collections_Specialized_StringEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the first element of the collection again, you can call <a class=\"xref\" href=\"system.collections.specialized.stringenumerator#System_Collections_Specialized_StringEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> followed by <a class=\"xref\" href=\"system.collections.specialized.stringenumerator#System_Collections_Specialized_StringEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a>.  </p>\n<p> An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  </p>\n<p> The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringCollection_IndexOf_System_String_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringCollection_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOf(String)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified string and returns the zero-based index of the first occurrence within the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int IndexOf (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to locate. The value can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the first occurrence of <code>value</code> in the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>, if found; otherwise, -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method determines equality by calling <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>. String comparisons are case-sensitive.  </p>\n<p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.specialized.stringcollection#System_Collections_Specialized_StringCollection_Count_\" data-linktype=\"relative-path\">Count</a>.  </p>\n<p> Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods on <code>item</code> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods of the <code>item</code> parameter on the objects in the collection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example searches the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> for an element.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Specialized.StringCollectionContains#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\n\npublic class SamplesStringCollection  {\n\n   public static void Main()  {\n\n      // Creates and initializes a new StringCollection.\n      StringCollection myCol = new StringCollection();\n      String[] myArr = new String[] { &quot;RED&quot;, &quot;orange&quot;, &quot;yellow&quot;, &quot;RED&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;RED&quot;, &quot;indigo&quot;, &quot;violet&quot;, &quot;RED&quot; };\n      myCol.AddRange( myArr );\n\n      Console.WriteLine( &quot;Initial contents of the StringCollection:&quot; );\n      PrintValues( myCol );\n\n      // Checks whether the collection contains &quot;orange&quot; and, if so, displays its index.\n      if ( myCol.Contains( &quot;orange&quot; ) )\n         Console.WriteLine( &quot;The collection contains \\&quot;orange\\&quot; at index {0}.&quot;, myCol.IndexOf( &quot;orange&quot; ) );\n      else\n         Console.WriteLine( &quot;The collection does not contain \\&quot;orange\\&quot;.&quot; );\n\n   }\n\n   public static void PrintValues( IEnumerable myCol )  {\n      foreach ( Object obj in myCol )\n         Console.WriteLine( &quot;   {0}&quot;, obj );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nInitial contents of the StringCollection:\n   RED\n   orange\n   yellow\n   RED\n   green\n   blue\n   RED\n   indigo\n   violet\n   RED\n\nThe collection contains &quot;orange&quot; at index 1.\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Collections.Specialized.StringCollectionContains#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\nvoid PrintValues( IEnumerable^ myCol );\nint main()\n{\n   \n   // Creates and initializes a new StringCollection.\n   StringCollection^ myCol = gcnew StringCollection;\n   array&lt;String^&gt;^myArr = {&quot;RED&quot;,&quot;orange&quot;,&quot;yellow&quot;,&quot;RED&quot;,&quot;green&quot;,&quot;blue&quot;,&quot;RED&quot;,&quot;indigo&quot;,&quot;violet&quot;,&quot;RED&quot;};\n   myCol-&gt;AddRange( myArr );\n   Console::WriteLine( &quot;Initial contents of the StringCollection:&quot; );\n   PrintValues( myCol );\n   \n   // Checks whether the collection contains &quot;orange&quot; and, if so, displays its index.\n   if ( myCol-&gt;Contains( &quot;orange&quot; ) )\n      Console::WriteLine( &quot;The collection contains \\&quot;orange\\&quot; at index {0}.&quot;, myCol-&gt;IndexOf( &quot;orange&quot; ) );\n   else\n      Console::WriteLine( &quot;The collection does not contain \\&quot;orange\\&quot;.&quot; );\n}\n\nvoid PrintValues( IEnumerable^ myCol )\n{\n   IEnumerator^ myEnum = myCol-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;   {0}&quot;, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/*\nThis code produces the following output.\n\nInitial contents of the StringCollection:\n   RED\n   orange\n   yellow\n   RED\n   green\n   blue\n   RED\n   indigo\n   violet\n   RED\n\nThe collection contains &quot;orange&quot; at index 1.\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Specialized.StringCollectionContains#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\n\nPublic Class SamplesStringCollection   \n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new StringCollection.\n      Dim myCol As New StringCollection()\n      Dim myArr() As [String] = {&quot;RED&quot;, &quot;orange&quot;, &quot;yellow&quot;, &quot;RED&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;RED&quot;, &quot;indigo&quot;, &quot;violet&quot;, &quot;RED&quot;}\n      myCol.AddRange(myArr)\n\n      Console.WriteLine(&quot;Initial contents of the StringCollection:&quot;)\n      PrintValues(myCol)\n\n      &#39; Checks whether the collection contains &quot;orange&quot; and, if so, displays its index.\n      If myCol.Contains(&quot;orange&quot;) Then\n         Console.WriteLine(&quot;The collection contains &quot;&quot;orange&quot;&quot; at index {0}.&quot;, myCol.IndexOf(&quot;orange&quot;))\n      Else\n         Console.WriteLine(&quot;The collection does not contain &quot;&quot;orange&quot;&quot;.&quot;)\n      End If \n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintValues(myCol As IEnumerable)\n      Dim obj As [Object]\n      For Each obj In  myCol\n         Console.WriteLine(&quot;   {0}&quot;, obj)\n      Next obj\n      Console.WriteLine()\n   End Sub &#39;PrintValues\n\nEnd Class &#39;SamplesStringCollection \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Initial contents of the StringCollection:\n&#39;   RED\n&#39;   orange\n&#39;   yellow\n&#39;   RED\n&#39;   green\n&#39;   blue\n&#39;   RED\n&#39;   indigo\n&#39;   violet\n&#39;   RED\n&#39;\n&#39;The collection contains &quot;orange&quot; at index 1.\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringCollection_Insert_System_Int32_System_String_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringCollection_Insert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Insert(Int32,String)</div>        \r\n          </div>\r\n    \r\n            <p>Inserts a string into the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Insert (int index, string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index at which <code>value</code> is inserted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to insert. The value can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> greater than <span class=\"xref\">stem.Collections.Specialized.StringCollection.Count*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Duplicate strings are allowed in <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.  </p>\n<p> If <code>index</code> is equal to <a class=\"xref\" href=\"system.collections.specialized.stringcollection#System_Collections_Specialized_StringCollection_Count_\" data-linktype=\"relative-path\">Count</a>, <code>value</code> is added to the end of <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.  </p>\n<p> In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.specialized.stringcollection#System_Collections_Specialized_StringCollection_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example adds new elements to the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.Specialized.StringCollectionAdd#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\nvoid PrintValues( IEnumerable^ myCol );\nint main()\n{\n   \n   // Creates and initializes a new StringCollection.\n   StringCollection^ myCol = gcnew StringCollection;\n   Console::WriteLine( &quot;Initial contents of the StringCollection:&quot; );\n   PrintValues( myCol );\n   \n   // Adds a range of elements from an array to the end of the StringCollection.\n   array&lt;String^&gt;^myArr = {&quot;RED&quot;,&quot;orange&quot;,&quot;yellow&quot;,&quot;RED&quot;,&quot;green&quot;,&quot;blue&quot;,&quot;RED&quot;,&quot;indigo&quot;,&quot;violet&quot;,&quot;RED&quot;};\n   myCol-&gt;AddRange( myArr );\n   Console::WriteLine( &quot;After adding a range of elements:&quot; );\n   PrintValues( myCol );\n   \n   // Adds one element to the end of the StringCollection and inserts another at index 3.\n   myCol-&gt;Add( &quot;* white&quot; );\n   myCol-&gt;Insert( 3, &quot;* gray&quot; );\n   Console::WriteLine( &quot;After adding \\&quot;* white\\&quot; to the end and inserting \\&quot;* gray\\&quot; at index 3:&quot; );\n   PrintValues( myCol );\n}\n\nvoid PrintValues( IEnumerable^ myCol )\n{\n   IEnumerator^ myEnum = myCol-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;   {0}&quot;, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/*\nThis code produces the following output.\n\nInitial contents of the StringCollection:\n\nAfter adding a range of elements:\n   RED\n   orange\n   yellow\n   RED\n   green\n   blue\n   RED\n   indigo\n   violet\n   RED\n\nAfter adding &quot;* white&quot; to the end and inserting &quot;* gray&quot; at index 3:\n   RED\n   orange\n   yellow\n   * gray\n   RED\n   green\n   blue\n   RED\n   indigo\n   violet\n   RED\n   * white\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Specialized.StringCollectionAdd#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\n\npublic class SamplesStringCollection  {\n\n   public static void Main()  {\n\n      // Creates and initializes a new StringCollection.\n      StringCollection myCol = new StringCollection();\n\n      Console.WriteLine( &quot;Initial contents of the StringCollection:&quot; );\n      PrintValues( myCol );\n\n      // Adds a range of elements from an array to the end of the StringCollection.\n      String[] myArr = new String[] { &quot;RED&quot;, &quot;orange&quot;, &quot;yellow&quot;, &quot;RED&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;RED&quot;, &quot;indigo&quot;, &quot;violet&quot;, &quot;RED&quot; };\n      myCol.AddRange( myArr );\n\n      Console.WriteLine( &quot;After adding a range of elements:&quot; );\n      PrintValues( myCol );\n\n      // Adds one element to the end of the StringCollection and inserts another at index 3.\n      myCol.Add( &quot;* white&quot; );\n      myCol.Insert( 3, &quot;* gray&quot; );\n\n      Console.WriteLine( &quot;After adding \\&quot;* white\\&quot; to the end and inserting \\&quot;* gray\\&quot; at index 3:&quot; );\n      PrintValues( myCol );\n\n   }\n\n   public static void PrintValues( IEnumerable myCol )  {\n      foreach ( Object obj in myCol )\n         Console.WriteLine( &quot;   {0}&quot;, obj );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nInitial contents of the StringCollection:\n\nAfter adding a range of elements:\n   RED\n   orange\n   yellow\n   RED\n   green\n   blue\n   RED\n   indigo\n   violet\n   RED\n\nAfter adding &quot;* white&quot; to the end and inserting &quot;* gray&quot; at index 3:\n   RED\n   orange\n   yellow\n   * gray\n   RED\n   green\n   blue\n   RED\n   indigo\n   violet\n   RED\n   * white\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Specialized.StringCollectionAdd#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\n\nPublic Class SamplesStringCollection   \n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new StringCollection.\n      Dim myCol As New StringCollection()\n\n      Console.WriteLine(&quot;Initial contents of the StringCollection:&quot;)\n      PrintValues(myCol)\n\n      &#39; Adds a range of elements from an array to the end of the StringCollection.\n      Dim myArr() As [String] = {&quot;RED&quot;, &quot;orange&quot;, &quot;yellow&quot;, &quot;RED&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;RED&quot;, &quot;indigo&quot;, &quot;violet&quot;, &quot;RED&quot;}\n      myCol.AddRange(myArr)\n\n      Console.WriteLine(&quot;After adding a range of elements:&quot;)\n      PrintValues(myCol)\n\n      &#39; Adds one element to the end of the StringCollection and inserts another at index 3.\n      myCol.Add(&quot;* white&quot;)\n      myCol.Insert(3, &quot;* gray&quot;)\n\n      Console.WriteLine(&quot;After adding &quot;&quot;* white&quot;&quot; to the end and inserting &quot;&quot;* gray&quot;&quot; at index 3:&quot;)\n      PrintValues(myCol)\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintValues(myCol As IEnumerable)\n      Dim obj As [Object]\n      For Each obj In  myCol\n         Console.WriteLine(&quot;   {0}&quot;, obj)\n      Next obj\n      Console.WriteLine()\n   End Sub &#39;PrintValues\n\nEnd Class &#39;SamplesStringCollection \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Initial contents of the StringCollection:\n&#39;\n&#39;After adding a range of elements:\n&#39;   RED\n&#39;   orange\n&#39;   yellow\n&#39;   RED\n&#39;   green\n&#39;   blue\n&#39;   RED\n&#39;   indigo\n&#39;   violet\n&#39;   RED\n&#39;\n&#39;After adding &quot;* white&quot; to the end and inserting &quot;* gray&quot; at index 3:\n&#39;   RED\n&#39;   orange\n&#39;   yellow\n&#39;   * gray\n&#39;   RED\n&#39;   green\n&#39;   blue\n&#39;   RED\n&#39;   indigo\n&#39;   violet\n&#39;   RED\n&#39;   * white\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringCollection_Remove_System_String_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringCollection_Remove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Remove(String)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the first occurrence of a specific string from the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Remove (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to remove from the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>. The value can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Duplicate strings are allowed in <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>. Only the first occurrence is removed. To remove all occurrences of the specified string, use <code>RemoveAt(IndexOf(value))</code> repeatedly while <a class=\"xref\" href=\"system.collections.specialized.stringcollection#System_Collections_Specialized_StringCollection_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> does not return -1.  </p>\n<p> If the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> does not contain the specified object, the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> remains unchanged. No exception is thrown.  </p>\n<p> In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  </p>\n<p> This method determines equality by calling <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>. String comparisons are case-sensitive.  </p>\n<p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.specialized.stringcollection#System_Collections_Specialized_StringCollection_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example removes elements from the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.Specialized.StringCollectionRemove#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\nvoid PrintValues( IEnumerable^ myCol );\nint main()\n{\n   \n   // Creates and initializes a new StringCollection.\n   StringCollection^ myCol = gcnew StringCollection;\n   array&lt;String^&gt;^myArr = {&quot;RED&quot;,&quot;orange&quot;,&quot;yellow&quot;,&quot;RED&quot;,&quot;green&quot;,&quot;blue&quot;,&quot;RED&quot;,&quot;indigo&quot;,&quot;violet&quot;,&quot;RED&quot;};\n   myCol-&gt;AddRange( myArr );\n   Console::WriteLine( &quot;Initial contents of the StringCollection:&quot; );\n   PrintValues( myCol );\n   \n   // Removes one element from the StringCollection.\n   myCol-&gt;Remove( &quot;yellow&quot; );\n   Console::WriteLine( &quot;After removing \\&quot;yellow\\&quot;:&quot; );\n   PrintValues( myCol );\n   \n   // Removes all occurrences of a value from the StringCollection.\n   int i = myCol-&gt;IndexOf( &quot;RED&quot; );\n   while ( i &gt; -1 )\n   {\n      myCol-&gt;RemoveAt( i );\n      i = myCol-&gt;IndexOf( &quot;RED&quot; );\n   }\n\n   Console::WriteLine( &quot;After removing all occurrences of \\&quot;RED\\&quot;:&quot; );\n   PrintValues( myCol );\n   \n   // Clears the entire collection.\n   myCol-&gt;Clear();\n   Console::WriteLine( &quot;After clearing the collection:&quot; );\n   PrintValues( myCol );\n}\n\nvoid PrintValues( IEnumerable^ myCol )\n{\n   IEnumerator^ myEnum = myCol-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;   {0}&quot;, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/*\nThis code produces the following output.\n\nInitial contents of the StringCollection:\n   RED\n   orange\n   yellow\n   RED\n   green\n   blue\n   RED\n   indigo\n   violet\n   RED\n\nAfter removing &quot;yellow&quot;:\n   RED\n   orange\n   RED\n   green\n   blue\n   RED\n   indigo\n   violet\n   RED\n\nAfter removing all occurrences of &quot;RED&quot;:\n   orange\n   green\n   blue\n   indigo\n   violet\n\nAfter clearing the collection:\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Specialized.StringCollectionRemove#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\n\npublic class SamplesStringCollection  {\n\n   public static void Main()  {\n\n      // Creates and initializes a new StringCollection.\n      StringCollection myCol = new StringCollection();\n      String[] myArr = new String[] { &quot;RED&quot;, &quot;orange&quot;, &quot;yellow&quot;, &quot;RED&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;RED&quot;, &quot;indigo&quot;, &quot;violet&quot;, &quot;RED&quot; };\n      myCol.AddRange( myArr );\n\n      Console.WriteLine( &quot;Initial contents of the StringCollection:&quot; );\n      PrintValues( myCol );\n\n      // Removes one element from the StringCollection.\n      myCol.Remove( &quot;yellow&quot; );\n\n      Console.WriteLine( &quot;After removing \\&quot;yellow\\&quot;:&quot; );\n      PrintValues( myCol );\n\n      // Removes all occurrences of a value from the StringCollection.\n      int i = myCol.IndexOf( &quot;RED&quot; );\n      while ( i &gt; -1 )  {\n         myCol.RemoveAt( i );\n         i = myCol.IndexOf( &quot;RED&quot; );\n      }\n\n      Console.WriteLine( &quot;After removing all occurrences of \\&quot;RED\\&quot;:&quot; );\n      PrintValues( myCol );\n\n      // Clears the entire collection.\n      myCol.Clear();\n\n      Console.WriteLine( &quot;After clearing the collection:&quot; );\n      PrintValues( myCol );\n\n   }\n\n   public static void PrintValues( IEnumerable myCol )  {\n      foreach ( Object obj in myCol )\n         Console.WriteLine( &quot;   {0}&quot;, obj );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nInitial contents of the StringCollection:\n   RED\n   orange\n   yellow\n   RED\n   green\n   blue\n   RED\n   indigo\n   violet\n   RED\n\nAfter removing &quot;yellow&quot;:\n   RED\n   orange\n   RED\n   green\n   blue\n   RED\n   indigo\n   violet\n   RED\n\nAfter removing all occurrences of &quot;RED&quot;:\n   orange\n   green\n   blue\n   indigo\n   violet\n\nAfter clearing the collection:\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Specialized.StringCollectionRemove#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\n\nPublic Class SamplesStringCollection   \n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new StringCollection.\n      Dim myCol As New StringCollection()\n      Dim myArr() As [String] = {&quot;RED&quot;, &quot;orange&quot;, &quot;yellow&quot;, &quot;RED&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;RED&quot;, &quot;indigo&quot;, &quot;violet&quot;, &quot;RED&quot;}\n      myCol.AddRange(myArr)\n\n      Console.WriteLine(&quot;Initial contents of the StringCollection:&quot;)\n      PrintValues(myCol)\n\n      &#39; Removes one element from the StringCollection.\n      myCol.Remove(&quot;yellow&quot;)\n\n      Console.WriteLine(&quot;After removing &quot;&quot;yellow&quot;&quot;:&quot;)\n      PrintValues(myCol)\n\n      &#39; Removes all occurrences of a value from the StringCollection.\n      Dim i As Integer = myCol.IndexOf(&quot;RED&quot;)\n      While i &gt; - 1\n         myCol.RemoveAt(i)\n         i = myCol.IndexOf(&quot;RED&quot;)\n      End While\n\n      Console.WriteLine(&quot;After removing all occurrences of &quot;&quot;RED&quot;&quot;:&quot;)\n      PrintValues(myCol)\n\n      &#39; Clears the entire collection.\n      myCol.Clear()\n\n      Console.WriteLine(&quot;After clearing the collection:&quot;)\n      PrintValues(myCol)\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintValues(myCol As IEnumerable)\n      Dim obj As [Object]\n      For Each obj In  myCol\n         Console.WriteLine(&quot;   {0}&quot;, obj)\n      Next obj\n      Console.WriteLine()\n   End Sub &#39;PrintValues\n\nEnd Class &#39;SamplesStringCollection \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Initial contents of the StringCollection:\n&#39;   RED\n&#39;   orange\n&#39;   yellow\n&#39;   RED\n&#39;   green\n&#39;   blue\n&#39;   RED\n&#39;   indigo\n&#39;   violet\n&#39;   RED\n&#39;\n&#39;After removing &quot;yellow&quot;:\n&#39;   RED\n&#39;   orange\n&#39;   RED\n&#39;   green\n&#39;   blue\n&#39;   RED\n&#39;   indigo\n&#39;   violet\n&#39;   RED\n&#39;\n&#39;After removing all occurrences of &quot;RED&quot;:\n&#39;   orange\n&#39;   green\n&#39;   blue\n&#39;   indigo\n&#39;   violet\n&#39;\n&#39;After clearing the collection:\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringCollection_RemoveAt_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringCollection_RemoveAt_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveAt(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the string at the specified index of the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RemoveAt (int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the string to remove.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> is equal to or greater than <span class=\"xref\">stem.Collections.Specialized.StringCollection.Count*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.specialized.stringcollection#System_Collections_Specialized_StringCollection_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example removes elements from the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.Specialized.StringCollectionRemove#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\nvoid PrintValues( IEnumerable^ myCol );\nint main()\n{\n   \n   // Creates and initializes a new StringCollection.\n   StringCollection^ myCol = gcnew StringCollection;\n   array&lt;String^&gt;^myArr = {&quot;RED&quot;,&quot;orange&quot;,&quot;yellow&quot;,&quot;RED&quot;,&quot;green&quot;,&quot;blue&quot;,&quot;RED&quot;,&quot;indigo&quot;,&quot;violet&quot;,&quot;RED&quot;};\n   myCol-&gt;AddRange( myArr );\n   Console::WriteLine( &quot;Initial contents of the StringCollection:&quot; );\n   PrintValues( myCol );\n   \n   // Removes one element from the StringCollection.\n   myCol-&gt;Remove( &quot;yellow&quot; );\n   Console::WriteLine( &quot;After removing \\&quot;yellow\\&quot;:&quot; );\n   PrintValues( myCol );\n   \n   // Removes all occurrences of a value from the StringCollection.\n   int i = myCol-&gt;IndexOf( &quot;RED&quot; );\n   while ( i &gt; -1 )\n   {\n      myCol-&gt;RemoveAt( i );\n      i = myCol-&gt;IndexOf( &quot;RED&quot; );\n   }\n\n   Console::WriteLine( &quot;After removing all occurrences of \\&quot;RED\\&quot;:&quot; );\n   PrintValues( myCol );\n   \n   // Clears the entire collection.\n   myCol-&gt;Clear();\n   Console::WriteLine( &quot;After clearing the collection:&quot; );\n   PrintValues( myCol );\n}\n\nvoid PrintValues( IEnumerable^ myCol )\n{\n   IEnumerator^ myEnum = myCol-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ obj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;   {0}&quot;, obj );\n   }\n\n   Console::WriteLine();\n}\n\n/*\nThis code produces the following output.\n\nInitial contents of the StringCollection:\n   RED\n   orange\n   yellow\n   RED\n   green\n   blue\n   RED\n   indigo\n   violet\n   RED\n\nAfter removing &quot;yellow&quot;:\n   RED\n   orange\n   RED\n   green\n   blue\n   RED\n   indigo\n   violet\n   RED\n\nAfter removing all occurrences of &quot;RED&quot;:\n   orange\n   green\n   blue\n   indigo\n   violet\n\nAfter clearing the collection:\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Specialized.StringCollectionRemove#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\n\npublic class SamplesStringCollection  {\n\n   public static void Main()  {\n\n      // Creates and initializes a new StringCollection.\n      StringCollection myCol = new StringCollection();\n      String[] myArr = new String[] { &quot;RED&quot;, &quot;orange&quot;, &quot;yellow&quot;, &quot;RED&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;RED&quot;, &quot;indigo&quot;, &quot;violet&quot;, &quot;RED&quot; };\n      myCol.AddRange( myArr );\n\n      Console.WriteLine( &quot;Initial contents of the StringCollection:&quot; );\n      PrintValues( myCol );\n\n      // Removes one element from the StringCollection.\n      myCol.Remove( &quot;yellow&quot; );\n\n      Console.WriteLine( &quot;After removing \\&quot;yellow\\&quot;:&quot; );\n      PrintValues( myCol );\n\n      // Removes all occurrences of a value from the StringCollection.\n      int i = myCol.IndexOf( &quot;RED&quot; );\n      while ( i &gt; -1 )  {\n         myCol.RemoveAt( i );\n         i = myCol.IndexOf( &quot;RED&quot; );\n      }\n\n      Console.WriteLine( &quot;After removing all occurrences of \\&quot;RED\\&quot;:&quot; );\n      PrintValues( myCol );\n\n      // Clears the entire collection.\n      myCol.Clear();\n\n      Console.WriteLine( &quot;After clearing the collection:&quot; );\n      PrintValues( myCol );\n\n   }\n\n   public static void PrintValues( IEnumerable myCol )  {\n      foreach ( Object obj in myCol )\n         Console.WriteLine( &quot;   {0}&quot;, obj );\n      Console.WriteLine();\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nInitial contents of the StringCollection:\n   RED\n   orange\n   yellow\n   RED\n   green\n   blue\n   RED\n   indigo\n   violet\n   RED\n\nAfter removing &quot;yellow&quot;:\n   RED\n   orange\n   RED\n   green\n   blue\n   RED\n   indigo\n   violet\n   RED\n\nAfter removing all occurrences of &quot;RED&quot;:\n   orange\n   green\n   blue\n   indigo\n   violet\n\nAfter clearing the collection:\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Specialized.StringCollectionRemove#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\n\nPublic Class SamplesStringCollection   \n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new StringCollection.\n      Dim myCol As New StringCollection()\n      Dim myArr() As [String] = {&quot;RED&quot;, &quot;orange&quot;, &quot;yellow&quot;, &quot;RED&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;RED&quot;, &quot;indigo&quot;, &quot;violet&quot;, &quot;RED&quot;}\n      myCol.AddRange(myArr)\n\n      Console.WriteLine(&quot;Initial contents of the StringCollection:&quot;)\n      PrintValues(myCol)\n\n      &#39; Removes one element from the StringCollection.\n      myCol.Remove(&quot;yellow&quot;)\n\n      Console.WriteLine(&quot;After removing &quot;&quot;yellow&quot;&quot;:&quot;)\n      PrintValues(myCol)\n\n      &#39; Removes all occurrences of a value from the StringCollection.\n      Dim i As Integer = myCol.IndexOf(&quot;RED&quot;)\n      While i &gt; - 1\n         myCol.RemoveAt(i)\n         i = myCol.IndexOf(&quot;RED&quot;)\n      End While\n\n      Console.WriteLine(&quot;After removing all occurrences of &quot;&quot;RED&quot;&quot;:&quot;)\n      PrintValues(myCol)\n\n      &#39; Clears the entire collection.\n      myCol.Clear()\n\n      Console.WriteLine(&quot;After clearing the collection:&quot;)\n      PrintValues(myCol)\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintValues(myCol As IEnumerable)\n      Dim obj As [Object]\n      For Each obj In  myCol\n         Console.WriteLine(&quot;   {0}&quot;, obj)\n      Next obj\n      Console.WriteLine()\n   End Sub &#39;PrintValues\n\nEnd Class &#39;SamplesStringCollection \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Initial contents of the StringCollection:\n&#39;   RED\n&#39;   orange\n&#39;   yellow\n&#39;   RED\n&#39;   green\n&#39;   blue\n&#39;   RED\n&#39;   indigo\n&#39;   violet\n&#39;   RED\n&#39;\n&#39;After removing &quot;yellow&quot;:\n&#39;   RED\n&#39;   orange\n&#39;   RED\n&#39;   green\n&#39;   blue\n&#39;   RED\n&#39;   indigo\n&#39;   violet\n&#39;   RED\n&#39;\n&#39;After removing all occurrences of &quot;RED&quot;:\n&#39;   orange\n&#39;   green\n&#39;   blue\n&#39;   indigo\n&#39;   violet\n&#39;\n&#39;After clearing the collection:\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringCollection_System_Collections_ICollection_CopyTo_System_Array_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringCollection_System_Collections_ICollection_CopyTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection.CopyTo(Array,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the entire <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> to a compatible one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>, starting at the specified index of the target array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void ICollection.CopyTo (Array array, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that is the destination of the elements copied from <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>. The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> must have zero-based indexing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in <code>array</code> at which copying begins.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is multidimensional.  </p>\n<p> -or-  </p>\n<p> The number of elements in the source <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The type of the source <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> cannot be cast automatically to the type of the destination <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The specified array must be of a compatible type.  </p>\n<p> This method uses <a class=\"xref\" href=\"system.array#System_Array_Copy_\" data-linktype=\"relative-path\">Copy</a> to copy the elements.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.specialized.stringcollection#System_Collections_Specialized_StringCollection_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringCollection_System_Collections_IEnumerable_GetEnumerator\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringCollection_System_Collections_IEnumerable_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IEnumerable.GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> that iterates through the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">System.Collections.IEnumerator IEnumerable.GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> for the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>[Visual Basic, C#]  </p>\n<p> The <code>foreach</code> statement of the C# language (<code>for each</code> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <code>foreach</code> is recommended, instead of directly manipulating the enumerator.  </p>\n<p> Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  </p>\n<p> Initially, the enumerator is positioned before the first element in the collection. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> also brings the enumerator back to this position. At this position, calling <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> throws an exception. Therefore, you must call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> to advance the enumerator to the first element of the collection before reading the value of <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a>.  </p>\n<p> <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> returns the same object until either <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> or <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> is called. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> sets <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the next element.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> passes the end of the collection, the enumerator is positioned after the last element in the collection and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>. When the enumerator is at this position, subsequent calls to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> also return <code>false</code>. If the last call to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returned <code>false</code>, calling <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> throws an exception. To set <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the first element of the collection again, you can call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> followed by <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a>.  </p>\n<p> An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> or <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> throws an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>. If the collection is modified between <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a>, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> returns the element that it is set to, even if the enumerator is already invalidated.  </p>\n<p> The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringCollection_System_Collections_IList_Add_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringCollection_System_Collections_IList_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.Add(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Adds an object to the end of the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IList.Add (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to be added to the end of the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>. The value can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> index at which the <code>value</code> has been added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> is read-only.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> has a fixed size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> accepts <code>null</code> as a valid value and allows duplicate elements.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.specialized.stringcollection#System_Collections_Specialized_StringCollection_Count_\" data-linktype=\"relative-path\">Count</a> already equals the capacity, the capacity of the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.specialized.stringcollection#System_Collections_Specialized_StringCollection_Count_\" data-linktype=\"relative-path\">Count</a> is less than the capacity, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.specialized.stringcollection#System_Collections_Specialized_StringCollection_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringCollection_System_Collections_IList_Contains_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringCollection_System_Collections_IList_Contains_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.Contains(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether an element is in the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool IList.Contains (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to locate in the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>. The value can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>value</code> is found in the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method determines equality by calling <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.specialized.stringcollection#System_Collections_Specialized_StringCollection_Count_\" data-linktype=\"relative-path\">Count</a>.  </p>\n<p> Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods on <code>item</code> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods of the <code>item</code> parameter on the objects in the collection.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringCollection_System_Collections_IList_IndexOf_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringCollection_System_Collections_IList_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.IndexOf(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> and returns the zero-based index of the first occurrence within the entire <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IList.IndexOf (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to locate in the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>. The value can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the first occurrence of <code>value</code> within the entire <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>, if found; otherwise, -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> is searched forward starting at the first element and ending at the last element.  </p>\n<p> This method determines equality by calling <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.specialized.stringcollection#System_Collections_Specialized_StringCollection_Count_\" data-linktype=\"relative-path\">Count</a>.  </p>\n<p> Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods on <code>item</code> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods of the <code>item</code> parameter on the objects in the collection.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringCollection_System_Collections_IList_Insert_System_Int32_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringCollection_System_Collections_IList_Insert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.Insert(Int32,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Inserts an element into the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IList.Insert (int index, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index at which <code>value</code> should be inserted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to insert. The value can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> is greater than <span class=\"xref\">stem.Collections.Specialized.StringCollection.Count*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> is read-only.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> has a fixed size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <a class=\"xref\" href=\"system.collections.specialized.stringcollection#System_Collections_Specialized_StringCollection_Count_\" data-linktype=\"relative-path\">Count</a> already equals the capacity, the capacity of the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.  </p>\n<p> If <code>index</code> is equal to <a class=\"xref\" href=\"system.collections.specialized.stringcollection#System_Collections_Specialized_StringCollection_Count_\" data-linktype=\"relative-path\">Count</a>, <code>value</code> is added to the end of <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.  </p>\n<p> In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.specialized.stringcollection#System_Collections_Specialized_StringCollection_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringCollection_System_Collections_IList_IsFixedSize\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringCollection_System_Collections_IList_IsFixedSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.IsFixedSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> object has a fixed size.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool System.Collections.IList.IsFixedSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> object has a fixed size; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.  </p>\n<p> A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringCollection_System_Collections_IList_IsReadOnly\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringCollection_System_Collections_IList_IsReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.IsReadOnly</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> object is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool System.Collections.IList.IsReadOnly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> object is read-only; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  </p>\n<p> A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringCollection_System_Collections_IList_Item_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringCollection_System_Collections_IList_Item_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.Item(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the element at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">object System.Collections.IList.Item[int index] { get; set; }</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the element to get or set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The element at the specified index.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> is equal to or greater than <span class=\"xref\">stem.Collections.Specialized.StringCollection.Count*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Thismethod provides the ability to access a specific element in the collection by using the following syntax: <code>myCollection[index]</code>.  </p>\n<p> The C# language uses the <a href=\"../Topic/this%20(C%23%20Reference).md\" data-linktype=\"relative-path\">this</a> keyword to define the indexers instead of implementing the IList.Item property. Visual Basic implements IList.Item as a default property, which provides the same indexing functionality.  </p>\n<p> <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> accepts <code>null</code> as a valid value and allows duplicate elements.  </p>\n<p> Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_StringCollection_System_Collections_IList_Remove_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_StringCollection_System_Collections_IList_Remove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.Remove(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the first occurrence of a specific object from the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IList.Remove (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to remove from the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a>. The value can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> is read-only.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> has a fixed size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> does not contain the specified object, the <a class=\"xref\" href=\"system.collections.specialized.stringcollection\" data-linktype=\"relative-path\">StringCollection</a> remains unchanged. No exception is thrown.  </p>\n<p> In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  </p>\n<p> This method determines equality by calling <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.specialized.stringcollection#System_Collections_Specialized_StringCollection_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.Specialized.StringCollection.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.Specialized.StringCollection.yml\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringCollection\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringCollection..ctor\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringCollection.Add\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringCollection.AddRange\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringCollection.Clear\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringCollection.Contains\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringCollection.CopyTo\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringCollection.Count\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringCollection.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringCollection.IndexOf\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringCollection.Insert\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringCollection.IsReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringCollection.IsSynchronized\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringCollection.Item\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringCollection.Remove\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringCollection.RemoveAt\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringCollection.SyncRoot\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringCollection.ICollection.CopyTo\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringCollection.IEnumerable.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringCollection.IList.Add\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringCollection.IList.Contains\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringCollection.IList.IndexOf\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringCollection.IList.Insert\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringCollection.IList.IsFixedSize\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringCollection.IList.IsReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringCollection.IList.Item\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.StringCollection.IList.Remove\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"5a2ae47f-f94c-99c0-2560-f46e887053cd\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a collection of strings.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Collections.Specialized/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Collections.Specialized.StringCollection\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.Specialized.StringCollection.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.Specialized.StringCollection.yml","open_to_public_contributors":true,"api_name":["System.Collections.Specialized.StringCollection","System.Collections.Specialized.StringCollection..ctor","System.Collections.Specialized.StringCollection.Add","System.Collections.Specialized.StringCollection.AddRange","System.Collections.Specialized.StringCollection.Clear","System.Collections.Specialized.StringCollection.Contains","System.Collections.Specialized.StringCollection.CopyTo","System.Collections.Specialized.StringCollection.Count","System.Collections.Specialized.StringCollection.GetEnumerator","System.Collections.Specialized.StringCollection.IndexOf","System.Collections.Specialized.StringCollection.Insert","System.Collections.Specialized.StringCollection.IsReadOnly","System.Collections.Specialized.StringCollection.IsSynchronized","System.Collections.Specialized.StringCollection.Item","System.Collections.Specialized.StringCollection.Remove","System.Collections.Specialized.StringCollection.RemoveAt","System.Collections.Specialized.StringCollection.SyncRoot","System.Collections.Specialized.StringCollection.ICollection.CopyTo","System.Collections.Specialized.StringCollection.IEnumerable.GetEnumerator","System.Collections.Specialized.StringCollection.IList.Add","System.Collections.Specialized.StringCollection.IList.Contains","System.Collections.Specialized.StringCollection.IList.IndexOf","System.Collections.Specialized.StringCollection.IList.Insert","System.Collections.Specialized.StringCollection.IList.IsFixedSize","System.Collections.Specialized.StringCollection.IList.IsReadOnly","System.Collections.Specialized.StringCollection.IList.Item","System.Collections.Specialized.StringCollection.IList.Remove"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Collections.Specialized.StringCollection","System::Collections::Specialized::StringCollection","System.Collections.Specialized.StringCollection.#ctor","System::Collections::Specialized::StringCollection::#ctor","System.Collections.Specialized.StringCollection.Add","System::Collections::Specialized::StringCollection::Add","System.Collections.Specialized.StringCollection.AddRange","System::Collections::Specialized::StringCollection::AddRange","System.Collections.Specialized.StringCollection.Clear","System::Collections::Specialized::StringCollection::Clear","System.Collections.Specialized.StringCollection.Contains","System::Collections::Specialized::StringCollection::Contains","System.Collections.Specialized.StringCollection.CopyTo","System::Collections::Specialized::StringCollection::CopyTo","System.Collections.Specialized.StringCollection.Count","System::Collections::Specialized::StringCollection::Count","System.Collections.Specialized.StringCollection.GetEnumerator","System::Collections::Specialized::StringCollection::GetEnumerator","System.Collections.Specialized.StringCollection.IndexOf","System::Collections::Specialized::StringCollection::IndexOf","System.Collections.Specialized.StringCollection.Insert","System::Collections::Specialized::StringCollection::Insert","System.Collections.Specialized.StringCollection.IsReadOnly","System::Collections::Specialized::StringCollection::IsReadOnly","System.Collections.Specialized.StringCollection.IsSynchronized","System::Collections::Specialized::StringCollection::IsSynchronized","System.Collections.Specialized.StringCollection.Item","System::Collections::Specialized::StringCollection::Item","System.Collections.Specialized.StringCollection.Remove","System::Collections::Specialized::StringCollection::Remove","System.Collections.Specialized.StringCollection.RemoveAt","System::Collections::Specialized::StringCollection::RemoveAt","System.Collections.Specialized.StringCollection.SyncRoot","System::Collections::Specialized::StringCollection::SyncRoot","System.Collections.Specialized.StringCollection.System#Collections#ICollection#CopyTo","System::Collections::Specialized::StringCollection::System#Collections#ICollection#CopyTo","System.Collections.Specialized.StringCollection.System#Collections#IEnumerable#GetEnumerator","System::Collections::Specialized::StringCollection::System#Collections#IEnumerable#GetEnumerator","System.Collections.Specialized.StringCollection.System#Collections#IList#Add","System::Collections::Specialized::StringCollection::System#Collections#IList#Add","System.Collections.Specialized.StringCollection.System#Collections#IList#Contains","System::Collections::Specialized::StringCollection::System#Collections#IList#Contains","System.Collections.Specialized.StringCollection.System#Collections#IList#IndexOf","System::Collections::Specialized::StringCollection::System#Collections#IList#IndexOf","System.Collections.Specialized.StringCollection.System#Collections#IList#Insert","System::Collections::Specialized::StringCollection::System#Collections#IList#Insert","System.Collections.Specialized.StringCollection.System#Collections#IList#IsFixedSize","System::Collections::Specialized::StringCollection::System#Collections#IList#IsFixedSize","System.Collections.Specialized.StringCollection.System#Collections#IList#IsReadOnly","System::Collections::Specialized::StringCollection::System#Collections#IList#IsReadOnly","System.Collections.Specialized.StringCollection.System#Collections#IList#Item","System::Collections::Specialized::StringCollection::System#Collections#IList#Item","System.Collections.Specialized.StringCollection.System#Collections#IList#Remove","System::Collections::Specialized::StringCollection::System#Collections#IList#Remove"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"5a2ae47f-f94c-99c0-2560-f46e887053cd","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Collections.Specialized/StringCollection.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"StringCollection class | Microsoft Docs","_op_ogTitle":"StringCollection class","description":"Represents a collection of strings.\n","toc_asset_id":"_splitted/System.Collections.Specialized/toc.json","toc_rel":"_splitted/System.Collections.Specialized/toc.json","source_url":"","ms.assetid":"System.Collections.Specialized.StringCollection","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.specialized.stringcollection","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.specialized.stringcollection","fileRelativePath":"System.Collections.Specialized.StringCollection.html"},"themesRelativePathToOutputRoot":"_themes/"}