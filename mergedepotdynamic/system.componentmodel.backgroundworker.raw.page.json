{"content":"    \r\n    <h1 id=\"System_ComponentModel_BackgroundWorker\">\r\n      <span class=\"lang-csharp\">BackgroundWorker</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Executes an operation on a separate thread.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.ComponentModel.DefaultEvent(&quot;DoWork&quot;)]\npublic class BackgroundWorker : System.ComponentModel.Component</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component\" data-linktype=\"relative-path\">System.ComponentModel.Component</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">BackgroundWorker</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_CanRaiseEvents\" data-linktype=\"relative-path\">CanRaiseEvents</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Container\" data-linktype=\"relative-path\">Container</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_DesignMode\" data-linktype=\"relative-path\">DesignMode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Dispose_System_Boolean_\" data-linktype=\"relative-path\">Dispose(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Disposed\" data-linktype=\"relative-path\">Disposed</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Events\" data-linktype=\"relative-path\">Events</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_GetService_System_Type_\" data-linktype=\"relative-path\">GetService(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Site\" data-linktype=\"relative-path\">Site</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The BackgroundWorker class allows you to run an operation on a separate, dedicated thread. Time-consuming operations like downloads and database transactions can cause your user interface (UI) to seem as though it has stopped responding while they are running. When you want a responsive UI and you are faced with long delays associated with such operations, the BackgroundWorker class provides a convenient solution.  </p>\n<p> To execute a time-consuming operation in the background, create a BackgroundWorker and listen for events that report the progress of your operation and signal when your operation is finished. You can create the BackgroundWorker programmatically or you can drag it onto your form from the <strong>Components</strong> tab of the <strong>Toolbox</strong>. If you create the BackgroundWorker in the Windows Forms Designer, it will appear in the Component Tray, and its properties will be displayed in the Properties window.  </p>\n<p> To set up for a background operation, add an event handler for the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_DoWork\" data-linktype=\"relative-path\">DoWork</a> event. Call your time-consuming operation in this event handler. To start the operation, call <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_RunWorkerAsync_\" data-linktype=\"relative-path\">RunWorkerAsync</a>. To receive notifications of progress updates, handle the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_ProgressChanged\" data-linktype=\"relative-path\">ProgressChanged</a> event. To receive a notification when the operation is completed, handle the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_RunWorkerCompleted\" data-linktype=\"relative-path\">RunWorkerCompleted</a> event.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You must be careful not to manipulate any user-interface objects in your <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_DoWork\" data-linktype=\"relative-path\">DoWork</a> event handler. Instead, communicate to the user interface through the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_ProgressChanged\" data-linktype=\"relative-path\">ProgressChanged</a> and <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_RunWorkerCompleted\" data-linktype=\"relative-path\">RunWorkerCompleted</a> events.  </p>\n<p> BackgroundWorker events are not marshaled across <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a> boundaries. Do not use a BackgroundWorker component to perform multithreaded operations in more than one <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a>.  </p>\n</div>\n<p> If your background operation requires a parameter, call <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_RunWorkerAsync_\" data-linktype=\"relative-path\">RunWorkerAsync</a> with your parameter. Inside the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_DoWork\" data-linktype=\"relative-path\">DoWork</a> event handler, you can extract the parameter from the <a class=\"xref\" href=\"system.componentmodel.doworkeventargs#System_ComponentModel_DoWorkEventArgs_Argument_\" data-linktype=\"relative-path\">Argument</a> property.  </p>\n<p> For more information about BackgroundWorker, see <a href=\"../Topic/How%20to:%20Run%20an%20Operation%20in%20the%20Background.md\" data-linktype=\"relative-path\">How to: Run an Operation in the Background</a>.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ComponentModel_BackgroundWorker__ctor\" data-linktype=\"self-bookmark\">BackgroundWorker()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ComponentModel_BackgroundWorker_CancellationPending\" data-linktype=\"self-bookmark\">CancellationPending</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the application has requested cancellation of a background operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ComponentModel_BackgroundWorker_IsBusy\" data-linktype=\"self-bookmark\">IsBusy</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> is running an asynchronous operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ComponentModel_BackgroundWorker_WorkerReportsProgress\" data-linktype=\"self-bookmark\">WorkerReportsProgress</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> can report progress updates.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ComponentModel_BackgroundWorker_WorkerSupportsCancellation\" data-linktype=\"self-bookmark\">WorkerSupportsCancellation</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> supports asynchronous cancellation.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ComponentModel_BackgroundWorker_CancelAsync\" data-linktype=\"self-bookmark\">CancelAsync()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Requests cancellation of a pending background operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ComponentModel_BackgroundWorker_OnDoWork_System_ComponentModel_DoWorkEventArgs_\" data-linktype=\"self-bookmark\">OnDoWork(DoWorkEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_DoWork\" data-linktype=\"relative-path\">DoWork</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ComponentModel_BackgroundWorker_OnProgressChanged_System_ComponentModel_ProgressChangedEventArgs_\" data-linktype=\"self-bookmark\">OnProgressChanged(ProgressChangedEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_ProgressChanged\" data-linktype=\"relative-path\">ProgressChanged</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ComponentModel_BackgroundWorker_OnRunWorkerCompleted_System_ComponentModel_RunWorkerCompletedEventArgs_\" data-linktype=\"self-bookmark\">OnRunWorkerCompleted(RunWorkerCompletedEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_RunWorkerCompleted\" data-linktype=\"relative-path\">RunWorkerCompleted</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ComponentModel_BackgroundWorker_ReportProgress_System_Int32_\" data-linktype=\"self-bookmark\">ReportProgress(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_ProgressChanged\" data-linktype=\"relative-path\">ProgressChanged</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ComponentModel_BackgroundWorker_ReportProgress_System_Int32_System_Object_\" data-linktype=\"self-bookmark\">ReportProgress(Int32,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_ProgressChanged\" data-linktype=\"relative-path\">ProgressChanged</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ComponentModel_BackgroundWorker_RunWorkerAsync\" data-linktype=\"self-bookmark\">RunWorkerAsync()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Starts execution of a background operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ComponentModel_BackgroundWorker_RunWorkerAsync_System_Object_\" data-linktype=\"self-bookmark\">RunWorkerAsync(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Starts execution of a background operation.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Events\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ComponentModel_BackgroundWorker_DoWork\" data-linktype=\"self-bookmark\">DoWork</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when <span class=\"xref\">stem.ComponentModel.BackgroundWorker.RunWorkerAsync*</span> is called.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ComponentModel_BackgroundWorker_ProgressChanged\" data-linktype=\"self-bookmark\">ProgressChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when <span class=\"xref\">stem.ComponentModel.BackgroundWorker.ReportProgress*</span> is called.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ComponentModel_BackgroundWorker_RunWorkerCompleted\" data-linktype=\"self-bookmark\">RunWorkerCompleted</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the background operation has completed, has been canceled, or has raised an exception.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_ComponentModel_BackgroundWorker__ctor\">\r\n    \r\n            <a id=\"System_ComponentModel_BackgroundWorker__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BackgroundWorker()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public BackgroundWorker ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor initializes a <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_ComponentModel_BackgroundWorker_CancellationPending\">\r\n    \r\n            <a id=\"System_ComponentModel_BackgroundWorker_CancellationPending_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CancellationPending</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the application has requested cancellation of a background operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool CancellationPending { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the application has requested cancellation of a background operation; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If CancellationPending is <code>true</code>, then the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_CancelAsync_\" data-linktype=\"relative-path\">CancelAsync</a> method has been called on the <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a>.  </p>\n<p> This property is meant for use by the worker thread, which should periodically check CancellationPending and abort the background operation when it is set to <code>true</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the CancellationPending property to query a <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> about its cancellation state. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"System.ComponentModel.BackgroundWorker#8\">        &#39; Abort the operation if the user has canceled.\n        &#39; Note that a call to CancelAsync may have set \n        &#39; CancellationPending to true just after the\n        &#39; last invocation of this method exits, so this \n        &#39; code will not have the opportunity to set the \n        &#39; DoWorkEventArgs.Cancel flag to true. This means\n        &#39; that RunWorkerCompletedEventArgs.Cancelled will\n        &#39; not be set to true in your RunWorkerCompleted\n        &#39; event handler. This is a race condition.\n        If worker.CancellationPending Then\n            e.Cancel = True\n        Else\n            If n &lt; 2 Then\n                result = 1\n            Else\n                result = ComputeFibonacci(n - 1, worker, e) + _\n                         ComputeFibonacci(n - 2, worker, e)\n            End If\n\n            &#39; Report progress as a percentage of the total task.\n            Dim percentComplete As Integer = _\n                CSng(n) / CSng(numberToCompute) * 100\n            If percentComplete &gt; highestPercentageReached Then\n                highestPercentageReached = percentComplete\n                worker.ReportProgress(percentComplete)\n            End If\n\n        End If\n</code></pre><pre><code class=\"lang-cs\" name=\"System.ComponentModel.BackgroundWorker#8\">            // Abort the operation if the user has canceled.\n            // Note that a call to CancelAsync may have set \n            // CancellationPending to true just after the\n            // last invocation of this method exits, so this \n            // code will not have the opportunity to set the \n            // DoWorkEventArgs.Cancel flag to true. This means\n            // that RunWorkerCompletedEventArgs.Cancelled will\n            // not be set to true in your RunWorkerCompleted\n            // event handler. This is a race condition.\n\n            if (worker.CancellationPending)\n            {   \n                e.Cancel = true;\n            }\n            else\n            {   \n                if (n &lt; 2)\n                {   \n                    result = 1;\n                }\n                else\n                {   \n                    result = ComputeFibonacci(n - 1, worker, e) + \n                             ComputeFibonacci(n - 2, worker, e);\n                }\n\n                // Report progress as a percentage of the total task.\n                int percentComplete = \n                    (int)((float)n / (float)numberToCompute * 100);\n                if (percentComplete &gt; highestPercentageReached)\n                {\n                    highestPercentageReached = percentComplete;\n                    worker.ReportProgress(percentComplete);\n                }\n            }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.ComponentModel.BackgroundWorker#8\">      // Abort the operation if the user has cancelled.\n      // Note that a call to CancelAsync may have set \n      // CancellationPending to true just after the\n      // last invocation of this method exits, so this \n      // code will not have the opportunity to set the \n      // DoWorkEventArgs.Cancel flag to true. This means\n      // that RunWorkerCompletedEventArgs.Cancelled will\n      // not be set to true in your RunWorkerCompleted\n      // event handler. This is a race condition.\n      if ( worker-&gt;CancellationPending )\n      {\n         e-&gt;Cancel = true;\n      }\n      else\n      {\n         if ( n &lt; 2 )\n         {\n            result = 1;\n         }\n         else\n         {\n            result = ComputeFibonacci( n - 1, worker, e ) + ComputeFibonacci( n - 2, worker, e );\n         }\n\n         // Report progress as a percentage of the total task.\n         int percentComplete = (int)((float)n / (float)numberToCompute * 100);\n         if ( percentComplete &gt; highestPercentageReached )\n         {\n            highestPercentageReached = percentComplete;\n            worker-&gt;ReportProgress( percentComplete );\n         }\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ComponentModel_BackgroundWorker_IsBusy\">\r\n    \r\n            <a id=\"System_ComponentModel_BackgroundWorker_IsBusy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsBusy</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> is running an asynchronous operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsBusy { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code>, if the <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> is running an asynchronous operation; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> starts an asynchronous operation when you call <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_RunWorkerAsync_\" data-linktype=\"relative-path\">RunWorkerAsync</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the IsBusy property to wait for completion of a <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> operation. This code example is part of a larger example described in <a href=\"../Topic/How%20to:%20Download%20a%20File%20in%20the%20Background.md\" data-linktype=\"relative-path\">How to: Download a File in the Background</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.ComponentModel.BackgroundWorker.IsBusy#2\">    private void downloadButton_Click(object sender, EventArgs e)\n    {\n        // Start the download operation in the background.\n        this.backgroundWorker1.RunWorkerAsync();\n\n        // Disable the button for the duration of the download.\n        this.downloadButton.Enabled = false;\n\n        // Once you have started the background thread you \n        // can exit the handler and the application will \n        // wait until the RunWorkerCompleted event is raised.\n\n        // Or if you want to do something else in the main thread,\n        // such as update a progress bar, you can do so in a loop \n        // while checking IsBusy to see if the background task is\n        // still running.\n\n        while (this.backgroundWorker1.IsBusy)\n        {\n            progressBar1.Increment(1);\n            // Keep UI messages moving, so the form remains \n            // responsive during the asynchronous operation.\n            Application.DoEvents();\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.ComponentModel.BackgroundWorker.IsBusy#2\">    Private Sub downloadButton_Click( _\n        ByVal sender As Object, _\n        ByVal e As EventArgs) _\n        Handles downloadButton.Click\n\n        &#39; Start the download operation in the background.\n        Me.backgroundWorker1.RunWorkerAsync()\n\n        &#39; Disable the button for the duration of the download.\n        Me.downloadButton.Enabled = False\n\n        &#39; Once you have started the background thread you \n        &#39; can exit the handler and the application will \n        &#39; wait until the RunWorkerCompleted event is raised.\n\n        &#39; If you want to do something else in the main thread,\n        &#39; such as update a progress bar, you can do so in a loop \n        &#39; while checking IsBusy to see if the background task is\n        &#39; still running.\n        While Me.backgroundWorker1.IsBusy\n            progressBar1.Increment(1)\n            &#39; Keep UI messages moving, so the form remains \n            &#39; responsive during the asynchronous operation.\n            Application.DoEvents()\n        End While\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ComponentModel_BackgroundWorker_WorkerReportsProgress\">\r\n    \r\n            <a id=\"System_ComponentModel_BackgroundWorker_WorkerReportsProgress_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WorkerReportsProgress</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> can report progress updates.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool WorkerReportsProgress { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> supports progress updates; otherwise <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Set the WorkerReportsProgress property to <code>true</code> if you want the <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> to support progress updates. When this property is <code>true</code>, user code can call the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_ReportProgress_\" data-linktype=\"relative-path\">ReportProgress</a> method to raise the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_ProgressChanged\" data-linktype=\"relative-path\">ProgressChanged</a> event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ComponentModel_BackgroundWorker_WorkerSupportsCancellation\">\r\n    \r\n            <a id=\"System_ComponentModel_BackgroundWorker_WorkerSupportsCancellation_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WorkerSupportsCancellation</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> supports asynchronous cancellation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool WorkerSupportsCancellation { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> supports cancellation; otherwise <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Set the WorkerSupportsCancellation property to <code>true</code> if you want the <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> to support cancellation. When this property is <code>true</code>, you can call the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_CancelAsync_\" data-linktype=\"relative-path\">CancelAsync</a> method to interrupt a background operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_ComponentModel_BackgroundWorker_CancelAsync\">\r\n    \r\n            <a id=\"System_ComponentModel_BackgroundWorker_CancelAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CancelAsync()</div>        \r\n          </div>\r\n    \r\n            <p>Requests cancellation of a pending background operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void CancelAsync ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><span class=\"xref\">stem.ComponentModel.BackgroundWorker.WorkerSupportsCancellation*</span> is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>CancelAsync submits a request to terminate the pending background operation and sets the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_CancellationPending_\" data-linktype=\"relative-path\">CancellationPending</a> property to <code>true</code>.  </p>\n<p> When you call CancelAsync, your worker method has an opportunity to stop its execution and exit. The worker code should periodically check the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_CancellationPending_\" data-linktype=\"relative-path\">CancellationPending</a> property to see if it has been set to <code>true</code>.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Be aware that your code in the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_DoWork\" data-linktype=\"relative-path\">DoWork</a> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_CancellationPending_\" data-linktype=\"relative-path\">CancellationPending</a> being set to <code>true</code>. In this case, the <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_Cancelled_\" data-linktype=\"relative-path\">Cancelled</a> flag of <a class=\"xref\" href=\"system.componentmodel.runworkercompletedeventargs\" data-linktype=\"relative-path\">System.ComponentModel.RunWorkerCompletedEventArgs</a> in your <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_RunWorkerCompleted\" data-linktype=\"relative-path\">RunWorkerCompleted</a> event handler will not be set to <code>true</code>, even though a cancellation request was made. This situation is called a <em>race condition</em> and is a common concern in multithreaded programming. For more information about multithreading design issues, see <a href=\"../Topic/Managed%20Threading%20Best%20Practices.md\" data-linktype=\"relative-path\">Managed Threading Best Practices</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the CancelAsync method to cancel an asynchronous (&quot;background&quot;) operation. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"System.ComponentModel.BackgroundWorker#4\">    Private Sub cancelAsyncButton_Click( _\n    ByVal sender As System.Object, _\n    ByVal e As System.EventArgs) _\n    Handles cancelAsyncButton.Click\n        \n        &#39; Cancel the asynchronous operation.\n        Me.backgroundWorker1.CancelAsync()\n\n        &#39; Disable the Cancel button.\n        cancelAsyncButton.Enabled = False\n        \n    End Sub &#39;cancelAsyncButton_Click\n</code></pre><pre><code class=\"lang-cs\" name=\"System.ComponentModel.BackgroundWorker#4\">        private void cancelAsyncButton_Click(System.Object sender, \n            System.EventArgs e)\n        {   \n            // Cancel the asynchronous operation.\n            this.backgroundWorker1.CancelAsync();\n\n            // Disable the Cancel button.\n            cancelAsyncButton.Enabled = false;\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.ComponentModel.BackgroundWorker#4\">   void cancelAsyncButton_Click( System::Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {  \n      // Cancel the asynchronous operation.\n      this-&gt;backgroundWorker1-&gt;CancelAsync();\n      \n      // Disable the Cancel button.\n      cancelAsyncButton-&gt;Enabled = false;\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ComponentModel_BackgroundWorker_OnDoWork_System_ComponentModel_DoWorkEventArgs_\">\r\n    \r\n            <a id=\"System_ComponentModel_BackgroundWorker_OnDoWork_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnDoWork(DoWorkEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_DoWork\" data-linktype=\"relative-path\">DoWork</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnDoWork (System.ComponentModel.DoWorkEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.doworkeventargs\" data-linktype=\"relative-path\">DoWorkEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ComponentModel_BackgroundWorker_OnProgressChanged_System_ComponentModel_ProgressChangedEventArgs_\">\r\n    \r\n            <a id=\"System_ComponentModel_BackgroundWorker_OnProgressChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnProgressChanged(ProgressChangedEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_ProgressChanged\" data-linktype=\"relative-path\">ProgressChanged</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnProgressChanged (System.ComponentModel.ProgressChangedEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.progresschangedeventargs\" data-linktype=\"relative-path\">ProgressChangedEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2\" data-linktype=\"external\">NIB: Raising an Event</a>.  </p>\n<p> The OnProgressChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the OnProgressChanged method to report the progress of an asynchronous operation. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.componentmodel.asyncoperationmanager\" data-linktype=\"relative-path\">AsyncOperationManager</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"System.ComponentModel.AsyncOperationManager#24\">    &#39; This method is invoked via the AsyncOperation object,\n    &#39; so it is guaranteed to be executed on the correct thread.\n    Private Sub CalculateCompleted(ByVal operationState As Object)\n        Dim e As CalculatePrimeCompletedEventArgs = operationState\n\n        OnCalculatePrimeCompleted(e)\n\n    End Sub\n\n\n    &#39; This method is invoked via the AsyncOperation object,\n    &#39; so it is guaranteed to be executed on the correct thread.\n    Private Sub ReportProgress(ByVal state As Object)\n        Dim e As ProgressChangedEventArgs = state\n\n        OnProgressChanged(e)\n\n    End Sub\n\n    Protected Sub OnCalculatePrimeCompleted( _\n        ByVal e As CalculatePrimeCompletedEventArgs)\n\n        RaiseEvent CalculatePrimeCompleted(Me, e)\n\n    End Sub\n\n\n    Protected Sub OnProgressChanged( _\n        ByVal e As ProgressChangedEventArgs)\n\n        RaiseEvent ProgressChanged(e)\n\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.ComponentModel.AsyncOperationManager#24\">        // This method is invoked via the AsyncOperation object,\n        // so it is guaranteed to be executed on the correct thread.\n        private void CalculateCompleted(object operationState)\n        {\n            CalculatePrimeCompletedEventArgs e =\n                operationState as CalculatePrimeCompletedEventArgs;\n\n            OnCalculatePrimeCompleted(e);\n        }\n\n        // This method is invoked via the AsyncOperation object,\n        // so it is guaranteed to be executed on the correct thread.\n        private void ReportProgress(object state)\n        {\n            ProgressChangedEventArgs e =\n                state as ProgressChangedEventArgs;\n\n            OnProgressChanged(e);\n        }\n\n        protected void OnCalculatePrimeCompleted(\n            CalculatePrimeCompletedEventArgs e)\n        {\n            if (CalculatePrimeCompleted != null)\n            {\n                CalculatePrimeCompleted(this, e);\n            }\n        }\n\n        protected void OnProgressChanged(ProgressChangedEventArgs e)\n        {\n            if (ProgressChanged != null)\n            {\n                ProgressChanged(e);\n            }\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ComponentModel_BackgroundWorker_OnRunWorkerCompleted_System_ComponentModel_RunWorkerCompletedEventArgs_\">\r\n    \r\n            <a id=\"System_ComponentModel_BackgroundWorker_OnRunWorkerCompleted_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnRunWorkerCompleted(RunWorkerCompletedEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_RunWorkerCompleted\" data-linktype=\"relative-path\">RunWorkerCompleted</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnRunWorkerCompleted (System.ComponentModel.RunWorkerCompletedEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.runworkercompletedeventargs\" data-linktype=\"relative-path\">RunWorkerCompletedEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2\" data-linktype=\"external\">NIB: Raising an Event</a>.  </p>\n<p> The OnRunWorkerCompleted method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ComponentModel_BackgroundWorker_ReportProgress_System_Int32_\">\r\n    \r\n            <a id=\"System_ComponentModel_BackgroundWorker_ReportProgress_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReportProgress(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_ProgressChanged\" data-linktype=\"relative-path\">ProgressChanged</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ReportProgress (int percentProgress);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>percentProgress</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The percentage, from 0 to 100, of the background operation that is complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.ComponentModel.BackgroundWorker.WorkerReportsProgress*</span> property is set to <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you need the background operation to report on its progress, you can call the ReportProgress method to raise the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_ProgressChanged\" data-linktype=\"relative-path\">ProgressChanged</a> event. The <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_WorkerReportsProgress_\" data-linktype=\"relative-path\">WorkerReportsProgress</a> property value must be <code>true</code>, or ReportProgress will throw an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>.  </p>\n<p> It is up to you to implement a meaningful way of measuring your background operation&#39;s progress as a percentage of the total task completed.  </p>\n<p> The call to the ReportProgress method is asynchronous and returns immediately. The <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_ProgressChanged\" data-linktype=\"relative-path\">ProgressChanged</a> event handler executes on the thread that created the <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the ReportProgress method to report the progress of an asynchronous operation to the user. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"System.ComponentModel.BackgroundWorker#8\">        &#39; Abort the operation if the user has canceled.\n        &#39; Note that a call to CancelAsync may have set \n        &#39; CancellationPending to true just after the\n        &#39; last invocation of this method exits, so this \n        &#39; code will not have the opportunity to set the \n        &#39; DoWorkEventArgs.Cancel flag to true. This means\n        &#39; that RunWorkerCompletedEventArgs.Cancelled will\n        &#39; not be set to true in your RunWorkerCompleted\n        &#39; event handler. This is a race condition.\n        If worker.CancellationPending Then\n            e.Cancel = True\n        Else\n            If n &lt; 2 Then\n                result = 1\n            Else\n                result = ComputeFibonacci(n - 1, worker, e) + _\n                         ComputeFibonacci(n - 2, worker, e)\n            End If\n\n            &#39; Report progress as a percentage of the total task.\n            Dim percentComplete As Integer = _\n                CSng(n) / CSng(numberToCompute) * 100\n            If percentComplete &gt; highestPercentageReached Then\n                highestPercentageReached = percentComplete\n                worker.ReportProgress(percentComplete)\n            End If\n\n        End If\n</code></pre><pre><code class=\"lang-cs\" name=\"System.ComponentModel.BackgroundWorker#8\">            // Abort the operation if the user has canceled.\n            // Note that a call to CancelAsync may have set \n            // CancellationPending to true just after the\n            // last invocation of this method exits, so this \n            // code will not have the opportunity to set the \n            // DoWorkEventArgs.Cancel flag to true. This means\n            // that RunWorkerCompletedEventArgs.Cancelled will\n            // not be set to true in your RunWorkerCompleted\n            // event handler. This is a race condition.\n\n            if (worker.CancellationPending)\n            {   \n                e.Cancel = true;\n            }\n            else\n            {   \n                if (n &lt; 2)\n                {   \n                    result = 1;\n                }\n                else\n                {   \n                    result = ComputeFibonacci(n - 1, worker, e) + \n                             ComputeFibonacci(n - 2, worker, e);\n                }\n\n                // Report progress as a percentage of the total task.\n                int percentComplete = \n                    (int)((float)n / (float)numberToCompute * 100);\n                if (percentComplete &gt; highestPercentageReached)\n                {\n                    highestPercentageReached = percentComplete;\n                    worker.ReportProgress(percentComplete);\n                }\n            }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.ComponentModel.BackgroundWorker#8\">      // Abort the operation if the user has cancelled.\n      // Note that a call to CancelAsync may have set \n      // CancellationPending to true just after the\n      // last invocation of this method exits, so this \n      // code will not have the opportunity to set the \n      // DoWorkEventArgs.Cancel flag to true. This means\n      // that RunWorkerCompletedEventArgs.Cancelled will\n      // not be set to true in your RunWorkerCompleted\n      // event handler. This is a race condition.\n      if ( worker-&gt;CancellationPending )\n      {\n         e-&gt;Cancel = true;\n      }\n      else\n      {\n         if ( n &lt; 2 )\n         {\n            result = 1;\n         }\n         else\n         {\n            result = ComputeFibonacci( n - 1, worker, e ) + ComputeFibonacci( n - 2, worker, e );\n         }\n\n         // Report progress as a percentage of the total task.\n         int percentComplete = (int)((float)n / (float)numberToCompute * 100);\n         if ( percentComplete &gt; highestPercentageReached )\n         {\n            highestPercentageReached = percentComplete;\n            worker-&gt;ReportProgress( percentComplete );\n         }\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ComponentModel_BackgroundWorker_ReportProgress_System_Int32_System_Object_\">\r\n    \r\n            <a id=\"System_ComponentModel_BackgroundWorker_ReportProgress_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReportProgress(Int32,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_ProgressChanged\" data-linktype=\"relative-path\">ProgressChanged</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ReportProgress (int percentProgress, object userState);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>percentProgress</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The percentage, from 0 to 100, of the background operation that is complete.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>userState</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The state object passed to <span class=\"xref\">stem.ComponentModel.BackgroundWorker.RunWorkerAsync*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.ComponentModel.BackgroundWorker.WorkerReportsProgress*</span> property is set to <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you need the background operation to report on its progress, you can call the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_ReportProgress_\" data-linktype=\"relative-path\">ReportProgress</a> method to raise the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_ProgressChanged\" data-linktype=\"relative-path\">ProgressChanged</a> event. The <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_WorkerReportsProgress_\" data-linktype=\"relative-path\">WorkerReportsProgress</a> property value must <code>true</code>, or <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_ReportProgress_\" data-linktype=\"relative-path\">ReportProgress</a> will throw an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>.  </p>\n<p> It is up to you to implement a meaningful way of measuring your background operation&#39;s progress as a percentage of the total task completed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the ReportProgress method to report the progress of an asynchronous operation to the user. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.windows.forms.toolstripprogressbar\" data-linktype=\"relative-path\">ToolStripProgressBar</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.ToolStripProgressBar#10\">   Private Sub backgroundWorker1_DoWork(sender As Object, e As DoWorkEventArgs)\n      &#39; This method will run on a thread other than the UI thread.\n      &#39; Be sure not to manipulate any Windows Forms controls created\n      &#39; on the UI thread from this method.\n      backgroundWorker.ReportProgress(0, &quot;Working...&quot;)\n      Dim lastlast As [Decimal] = 0\n      Dim last As [Decimal] = 1\n      Dim current As [Decimal]\n      If requestedCount &gt;= 1 Then\n         AppendNumber(0)\n      End If\n      If requestedCount &gt;= 2 Then\n         AppendNumber(1)\n      End If\n      Dim i As Integer\n      \n      While i &lt; requestedCount\n         &#39; Calculate the number.\n         current = lastlast + last\n         &#39; Introduce some delay to simulate a more complicated calculation.\n         System.Threading.Thread.Sleep(100)\n         AppendNumber(current)\n         backgroundWorker.ReportProgress(100 * i / requestedCount, &quot;Working...&quot;)\n         &#39; Get ready for the next iteration.\n         lastlast = last\n         last = current\n         i += 1\n      End While\n      \n      \n      backgroundWorker.ReportProgress(100, &quot;Complete!&quot;)\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.ToolStripProgressBar#10\">\tprivate void backgroundWorker1_DoWork(object sender, DoWorkEventArgs e)\n\t{\n\t\t// This method will run on a thread other than the UI thread.\n\t\t// Be sure not to manipulate any Windows Forms controls created\n\t\t// on the UI thread from this method.\n\t\tbackgroundWorker.ReportProgress(0, &quot;Working...&quot;);\n\t\tDecimal lastlast = 0;\n\t\tDecimal last = 1;\n\t\tDecimal current;\n\t\tif (requestedCount &gt;= 1)\n\t\t{ AppendNumber(0); }\n\t\tif (requestedCount &gt;= 2)\n\t\t{ AppendNumber(1); }\n\t\tfor (int i = 2; i &lt; requestedCount; ++i)\n\t\t{\n\t\t\t// Calculate the number.\n\t\t\tchecked { current = lastlast + last; }\n\t\t\t// Introduce some delay to simulate a more complicated calculation.\n\t\t\tSystem.Threading.Thread.Sleep(100);\n\t\t\tAppendNumber(current);\n\t\t\tbackgroundWorker.ReportProgress((100 * i) / requestedCount, &quot;Working...&quot;);\n\t\t\t// Get ready for the next iteration.\n\t\t\tlastlast = last;\n\t\t\tlast = current;\n\t\t}\n\n\n\t\tbackgroundWorker.ReportProgress(100, &quot;Complete!&quot;);\n\t}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ComponentModel_BackgroundWorker_RunWorkerAsync\">\r\n    \r\n            <a id=\"System_ComponentModel_BackgroundWorker_RunWorkerAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RunWorkerAsync()</div>        \r\n          </div>\r\n    \r\n            <p>Starts execution of a background operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RunWorkerAsync ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><span class=\"xref\">stem.ComponentModel.BackgroundWorker.IsBusy*</span> is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The RunWorkerAsync method submits a request to start the operation running asynchronously. When the request is serviced, the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_DoWork\" data-linktype=\"relative-path\">DoWork</a> event is raised, which in turn starts execution of your background operation.  </p>\n<p> If the background operation is already running, calling RunWorkerAsync again will raise an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the RunWorkerAsync method to start an asynchronous operation. It is part of a larger example described in <a href=\"../Topic/How%20to:%20Download%20a%20File%20in%20the%20Background.md\" data-linktype=\"relative-path\">How to: Download a File in the Background</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.ComponentModel.BackgroundWorker.IsBusy#2\">    private void downloadButton_Click(object sender, EventArgs e)\n    {\n        // Start the download operation in the background.\n        this.backgroundWorker1.RunWorkerAsync();\n\n        // Disable the button for the duration of the download.\n        this.downloadButton.Enabled = false;\n\n        // Once you have started the background thread you \n        // can exit the handler and the application will \n        // wait until the RunWorkerCompleted event is raised.\n\n        // Or if you want to do something else in the main thread,\n        // such as update a progress bar, you can do so in a loop \n        // while checking IsBusy to see if the background task is\n        // still running.\n\n        while (this.backgroundWorker1.IsBusy)\n        {\n            progressBar1.Increment(1);\n            // Keep UI messages moving, so the form remains \n            // responsive during the asynchronous operation.\n            Application.DoEvents();\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.ComponentModel.BackgroundWorker.IsBusy#2\">    Private Sub downloadButton_Click( _\n        ByVal sender As Object, _\n        ByVal e As EventArgs) _\n        Handles downloadButton.Click\n\n        &#39; Start the download operation in the background.\n        Me.backgroundWorker1.RunWorkerAsync()\n\n        &#39; Disable the button for the duration of the download.\n        Me.downloadButton.Enabled = False\n\n        &#39; Once you have started the background thread you \n        &#39; can exit the handler and the application will \n        &#39; wait until the RunWorkerCompleted event is raised.\n\n        &#39; If you want to do something else in the main thread,\n        &#39; such as update a progress bar, you can do so in a loop \n        &#39; while checking IsBusy to see if the background task is\n        &#39; still running.\n        While Me.backgroundWorker1.IsBusy\n            progressBar1.Increment(1)\n            &#39; Keep UI messages moving, so the form remains \n            &#39; responsive during the asynchronous operation.\n            Application.DoEvents()\n        End While\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ComponentModel_BackgroundWorker_RunWorkerAsync_System_Object_\">\r\n    \r\n            <a id=\"System_ComponentModel_BackgroundWorker_RunWorkerAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RunWorkerAsync(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Starts execution of a background operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RunWorkerAsync (object argument);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>argument</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A parameter for use by the background operation to be executed in the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_DoWork\" data-linktype=\"relative-path\">DoWork</a> event handler.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><span class=\"xref\">stem.ComponentModel.BackgroundWorker.IsBusy*</span> is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_RunWorkerAsync_\" data-linktype=\"relative-path\">RunWorkerAsync</a> method submits a request to start the operation running asynchronously. When the request is serviced, the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_DoWork\" data-linktype=\"relative-path\">DoWork</a> event is raised, which in turn starts execution of your background operation.  </p>\n<p> If your operation requires a parameter, you can provide it as the <code>argument</code> parameter to <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_RunWorkerAsync_\" data-linktype=\"relative-path\">RunWorkerAsync</a>.  </p>\n<p> If the background operation is already running, calling <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_RunWorkerAsync_\" data-linktype=\"relative-path\">RunWorkerAsync</a> again will raise an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_RunWorkerAsync_\" data-linktype=\"relative-path\">RunWorkerAsync</a> method to start an asynchronous operation. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"System.ComponentModel.BackgroundWorker#3\">\n        &#39; Start the asynchronous operation.\n        backgroundWorker1.RunWorkerAsync(numberToCompute)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.ComponentModel.BackgroundWorker#3\">            // Start the asynchronous operation.\n            backgroundWorker1.RunWorkerAsync(numberToCompute);\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.ComponentModel.BackgroundWorker#3\">      // Start the asynchronous operation.\n      backgroundWorker1-&gt;RunWorkerAsync( numberToCompute );\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"events\">\r\n        <h2>Events\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_ComponentModel_BackgroundWorker_DoWork\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DoWork</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when <span class=\"xref\">stem.ComponentModel.BackgroundWorker.RunWorkerAsync*</span> is called.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.ComponentModel.DoWorkEventHandler DoWork;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event is raised when you call the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_RunWorkerAsync_\" data-linktype=\"relative-path\">RunWorkerAsync</a> method. This is where you start the operation that performs the potentially time-consuming work.  </p>\n<p> Your code in the DoWork event handler should periodically check the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_CancellationPending_\" data-linktype=\"relative-path\">CancellationPending</a> property value and abort the operation if it is <code>true</code>. When this occurs, you can set the <a class=\"xref\" href=\"system.componentmodel.canceleventargs#System_ComponentModel_CancelEventArgs_Cancel_\" data-linktype=\"relative-path\">Cancel</a> flag of <a class=\"xref\" href=\"system.componentmodel.doworkeventargs\" data-linktype=\"relative-path\">System.ComponentModel.DoWorkEventArgs</a> to <code>true</code>, and the <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_Cancelled_\" data-linktype=\"relative-path\">Cancelled</a> flag of <a class=\"xref\" href=\"system.componentmodel.runworkercompletedeventargs\" data-linktype=\"relative-path\">System.ComponentModel.RunWorkerCompletedEventArgs</a> in your <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_RunWorkerCompleted\" data-linktype=\"relative-path\">RunWorkerCompleted</a> event handler will be set to <code>true</code>.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Be aware that your code in the DoWork event handler may finish its work as a cancellation request is being made, and your polling loop may miss <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_CancellationPending_\" data-linktype=\"relative-path\">CancellationPending</a> being set to <code>true</code>. In this case, the <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_Cancelled_\" data-linktype=\"relative-path\">Cancelled</a> flag of <a class=\"xref\" href=\"system.componentmodel.runworkercompletedeventargs\" data-linktype=\"relative-path\">System.ComponentModel.RunWorkerCompletedEventArgs</a> in your <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_RunWorkerCompleted\" data-linktype=\"relative-path\">RunWorkerCompleted</a> event handler will not be set to <code>true</code>, even though a cancellation request was made. This situation is called a <em>race condition</em> and is a common concern in multithreaded programming. For more information about multithreading design issues, see <a href=\"../Topic/Managed%20Threading%20Best%20Practices.md\" data-linktype=\"relative-path\">Managed Threading Best Practices</a>.  </p>\n</div>\n<p> If your operation produces a result, you can assign the result to the <a class=\"xref\" href=\"system.componentmodel.doworkeventargs#System_ComponentModel_DoWorkEventArgs_Result_\" data-linktype=\"relative-path\">Result</a> property. This will be available to the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_RunWorkerCompleted\" data-linktype=\"relative-path\">RunWorkerCompleted</a> event handler in the <a class=\"xref\" href=\"system.componentmodel.runworkercompletedeventargs#System_ComponentModel_RunWorkerCompletedEventArgs_Result_\" data-linktype=\"relative-path\">Result</a> property.  </p>\n<p> If the operation raises an exception that your code does not handle, the <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> catches the exception and passes it into the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_RunWorkerCompleted\" data-linktype=\"relative-path\">RunWorkerCompleted</a> event handler, where it is exposed as the <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_Error_\" data-linktype=\"relative-path\">Error</a> property of <a class=\"xref\" href=\"system.componentmodel.runworkercompletedeventargs\" data-linktype=\"relative-path\">System.ComponentModel.RunWorkerCompletedEventArgs</a>. If you are running under the Visual Studio debugger, the debugger will break at the point in the DoWork event handler where the unhandled exception was raised. If you have more than one <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a>, you should not reference any of them directly, as this would couple your DoWork event handler to a specific instance of <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a>. Instead, you should access your <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> by casting the <code>sender</code> parameter in your DoWork event handler.  </p>\n<p> You must be careful not to manipulate any user-interface objects in your DoWork event handler. Instead, communicate to the user interface through the <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> events.  </p>\n<p> For more information about handling events, see <a href=\"http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67\" data-linktype=\"external\">NIB: Consuming Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the DoWork event to start an asynchronous operation. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"System.ComponentModel.BackgroundWorker#5\">    &#39; This event handler is where the actual work is done.\n    Private Sub backgroundWorker1_DoWork( _\n    ByVal sender As Object, _\n    ByVal e As DoWorkEventArgs) _\n    Handles backgroundWorker1.DoWork\n\n        &#39; Get the BackgroundWorker object that raised this event.\n        Dim worker As BackgroundWorker = _\n            CType(sender, BackgroundWorker)\n\n        &#39; Assign the result of the computation\n        &#39; to the Result property of the DoWorkEventArgs\n        &#39; object. This is will be available to the \n        &#39; RunWorkerCompleted eventhandler.\n        e.Result = ComputeFibonacci(e.Argument, worker, e)\n    End Sub &#39;backgroundWorker1_DoWork\n</code></pre><pre><code class=\"lang-cs\" name=\"System.ComponentModel.BackgroundWorker#5\">        // This event handler is where the actual,\n        // potentially time-consuming work is done.\n        private void backgroundWorker1_DoWork(object sender, \n            DoWorkEventArgs e)\n        {   \n            // Get the BackgroundWorker that raised this event.\n            BackgroundWorker worker = sender as BackgroundWorker;\n\n            // Assign the result of the computation\n            // to the Result property of the DoWorkEventArgs\n            // object. This is will be available to the \n            // RunWorkerCompleted eventhandler.\n            e.Result = ComputeFibonacci((int)e.Argument, worker, e);\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.ComponentModel.BackgroundWorker#5\">   // This event handler is where the actual,\n   // potentially time-consuming work is done.\n   void backgroundWorker1_DoWork( Object^ sender, DoWorkEventArgs^ e )\n   {\n      // Get the BackgroundWorker that raised this event.\n      BackgroundWorker^ worker = dynamic_cast&lt;BackgroundWorker^&gt;(sender);\n\n      // Assign the result of the computation\n      // to the Result property of the DoWorkEventArgs\n      // object. This is will be available to the \n      // RunWorkerCompleted eventhandler.\n      e-&gt;Result = ComputeFibonacci( safe_cast&lt;Int32&gt;(e-&gt;Argument), worker, e );\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ComponentModel_BackgroundWorker_ProgressChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ProgressChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when <span class=\"xref\">stem.ComponentModel.BackgroundWorker.ReportProgress*</span> is called.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.ComponentModel.ProgressChangedEventHandler ProgressChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event is raised when you call the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_ReportProgress_\" data-linktype=\"relative-path\">ReportProgress</a> method.  </p>\n<p> For more information about handling events, see <a href=\"http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67\" data-linktype=\"external\">NIB: Consuming Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the ProgressChanged event to report the progress of an asynchronous operation to the user. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"System.ComponentModel.BackgroundWorker#7\">    &#39; This event handler updates the progress bar.\n    Private Sub backgroundWorker1_ProgressChanged( _\n    ByVal sender As Object, ByVal e As ProgressChangedEventArgs) _\n    Handles backgroundWorker1.ProgressChanged\n\n        Me.progressBar1.Value = e.ProgressPercentage\n\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.ComponentModel.BackgroundWorker#7\">        // This event handler updates the progress bar.\n        private void backgroundWorker1_ProgressChanged(object sender,\n            ProgressChangedEventArgs e)\n        {\n            this.progressBar1.Value = e.ProgressPercentage;\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.ComponentModel.BackgroundWorker#7\">   // This event handler updates the progress bar.\n   void backgroundWorker1_ProgressChanged( Object^ /*sender*/, ProgressChangedEventArgs^ e )\n   {\n      this-&gt;progressBar1-&gt;Value = e-&gt;ProgressPercentage;\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ComponentModel_BackgroundWorker_RunWorkerCompleted\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RunWorkerCompleted</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the background operation has completed, has been canceled, or has raised an exception.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.ComponentModel.RunWorkerCompletedEventHandler RunWorkerCompleted;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event is raised when the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_DoWork\" data-linktype=\"relative-path\">DoWork</a> event handler returns.  </p>\n<p> If the operation completes successfully and its result is assigned in the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_DoWork\" data-linktype=\"relative-path\">DoWork</a> event handler, you can access the result through the <a class=\"xref\" href=\"system.componentmodel.runworkercompletedeventargs#System_ComponentModel_RunWorkerCompletedEventArgs_Result_\" data-linktype=\"relative-path\">Result</a> property.  </p>\n<p> The <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_Error_\" data-linktype=\"relative-path\">Error</a> property of <a class=\"xref\" href=\"system.componentmodel.runworkercompletedeventargs\" data-linktype=\"relative-path\">System.ComponentModel.RunWorkerCompletedEventArgs</a> indicates that an exception was thrown by the operation.  </p>\n<p> The <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_Cancelled_\" data-linktype=\"relative-path\">Cancelled</a> property of <a class=\"xref\" href=\"system.componentmodel.runworkercompletedeventargs\" data-linktype=\"relative-path\">System.ComponentModel.RunWorkerCompletedEventArgs</a> indicates whether a cancellation request was processed by the background operation. If your code in the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_DoWork\" data-linktype=\"relative-path\">DoWork</a> event handler detects a cancellation request by checking the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_CancellationPending_\" data-linktype=\"relative-path\">CancellationPending</a> flag and setting the <a class=\"xref\" href=\"system.componentmodel.canceleventargs#System_ComponentModel_CancelEventArgs_Cancel_\" data-linktype=\"relative-path\">Cancel</a> flag of <a class=\"xref\" href=\"system.componentmodel.doworkeventargs\" data-linktype=\"relative-path\">System.ComponentModel.DoWorkEventArgs</a> to <code>true</code>, the <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_Cancelled_\" data-linktype=\"relative-path\">Cancelled</a> flag of <a class=\"xref\" href=\"system.componentmodel.runworkercompletedeventargs\" data-linktype=\"relative-path\">System.ComponentModel.RunWorkerCompletedEventArgs</a> also will be set to <code>true</code>.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Be aware that your code in the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_DoWork\" data-linktype=\"relative-path\">DoWork</a> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_CancellationPending_\" data-linktype=\"relative-path\">CancellationPending</a> being set to <code>true</code>. In this case, the <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_Cancelled_\" data-linktype=\"relative-path\">Cancelled</a> flag of <a class=\"xref\" href=\"system.componentmodel.runworkercompletedeventargs\" data-linktype=\"relative-path\">System.ComponentModel.RunWorkerCompletedEventArgs</a> in your RunWorkerCompleted event handler will not be set to <code>true</code>, even though a cancellation request was made. This situation is called a <em>race condition</em> and is a common concern in multithreaded programming. For more information about multithreading design issues, see <a href=\"../Topic/Managed%20Threading%20Best%20Practices.md\" data-linktype=\"relative-path\">Managed Threading Best Practices</a>.  </p>\n</div>\n<p> Your RunWorkerCompleted event handler should always check the <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_Error_\" data-linktype=\"relative-path\">Error</a> and <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_Cancelled_\" data-linktype=\"relative-path\">Cancelled</a> properties before accessing the <a class=\"xref\" href=\"system.componentmodel.runworkercompletedeventargs#System_ComponentModel_RunWorkerCompletedEventArgs_Result_\" data-linktype=\"relative-path\">Result</a> property. If an exception was raised or if the operation was canceled, accessing the <a class=\"xref\" href=\"system.componentmodel.runworkercompletedeventargs#System_ComponentModel_RunWorkerCompletedEventArgs_Result_\" data-linktype=\"relative-path\">Result</a> property raises an exception.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the RunWorkerCompleted event to handle the result of an asynchronous operation. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"System.ComponentModel.BackgroundWorker#6\">    &#39; This event handler deals with the results of the\n    &#39; background operation.\n    Private Sub backgroundWorker1_RunWorkerCompleted( _\n    ByVal sender As Object, ByVal e As RunWorkerCompletedEventArgs) _\n    Handles backgroundWorker1.RunWorkerCompleted\n\n        &#39; First, handle the case where an exception was thrown.\n        If (e.Error IsNot Nothing) Then\n            MessageBox.Show(e.Error.Message)\n        ElseIf e.Cancelled Then\n            &#39; Next, handle the case where the user canceled the \n            &#39; operation.\n            &#39; Note that due to a race condition in \n            &#39; the DoWork event handler, the Cancelled\n            &#39; flag may not have been set, even though\n            &#39; CancelAsync was called.\n            resultLabel.Text = &quot;Canceled&quot;\n        Else\n            &#39; Finally, handle the case where the operation succeeded.\n            resultLabel.Text = e.Result.ToString()\n        End If\n\n        &#39; Enable the UpDown control.\n        Me.numericUpDown1.Enabled = True\n\n        &#39; Enable the Start button.\n        startAsyncButton.Enabled = True\n\n        &#39; Disable the Cancel button.\n        cancelAsyncButton.Enabled = False\n    End Sub &#39;backgroundWorker1_RunWorkerCompleted\n</code></pre><pre><code class=\"lang-cs\" name=\"System.ComponentModel.BackgroundWorker#6\">        // This event handler deals with the results of the\n        // background operation.\n        private void backgroundWorker1_RunWorkerCompleted(\n            object sender, RunWorkerCompletedEventArgs e)\n        {\n            // First, handle the case where an exception was thrown.\n            if (e.Error != null)\n            {\n                MessageBox.Show(e.Error.Message);\n            }\n            else if (e.Cancelled)\n            {\n                // Next, handle the case where the user canceled \n                // the operation.\n                // Note that due to a race condition in \n                // the DoWork event handler, the Cancelled\n                // flag may not have been set, even though\n                // CancelAsync was called.\n                resultLabel.Text = &quot;Canceled&quot;;\n            }\n            else\n            {\n                // Finally, handle the case where the operation \n                // succeeded.\n                resultLabel.Text = e.Result.ToString();\n            }\n\n            // Enable the UpDown control.\n            this.numericUpDown1.Enabled = true;\n\n            // Enable the Start button.\n            startAsyncButton.Enabled = true;\n\n            // Disable the Cancel button.\n            cancelAsyncButton.Enabled = false;\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.ComponentModel.BackgroundWorker#6\">   // This event handler deals with the results of the\n   // background operation.\n   void backgroundWorker1_RunWorkerCompleted( Object^ /*sender*/, RunWorkerCompletedEventArgs^ e )\n   {\n      // First, handle the case where an exception was thrown.\n      if ( e-&gt;Error != nullptr )\n      {\n         MessageBox::Show( e-&gt;Error-&gt;Message );\n      }\n      else\n      if ( e-&gt;Cancelled )\n      {\n         // Next, handle the case where the user cancelled \n         // the operation.\n         // Note that due to a race condition in \n         // the DoWork event handler, the Cancelled\n         // flag may not have been set, even though\n         // CancelAsync was called.\n         resultLabel-&gt;Text = &quot;Cancelled&quot;;\n      }\n      else\n      {\n         // Finally, handle the case where the operation \n         // succeeded.\n         resultLabel-&gt;Text = e-&gt;Result-&gt;ToString();\n      }\n\n      // Enable the UpDown control.\n      this-&gt;numericUpDown1-&gt;Enabled = true;\n\n      // Enable the Start button.\n      startAsyncButton-&gt;Enabled = true;\n\n      // Disable the Cancel button.\n      cancelAsyncButton-&gt;Enabled = false;\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.ComponentModel.BackgroundWorker.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.ComponentModel.BackgroundWorker.yml\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker..ctor\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.CancelAsync\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.CancellationPending\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.DoWork\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.add_DoWork\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.remove_DoWork\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.IsBusy\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.OnDoWork\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.OnProgressChanged\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.ProgressChanged\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.add_ProgressChanged\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.remove_ProgressChanged\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.ReportProgress\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.RunWorkerAsync\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.RunWorkerCompleted\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.add_RunWorkerCompleted\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.remove_RunWorkerCompleted\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.WorkerReportsProgress\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"a35ae592-803d-109b-4a4b-3c68907bcd6c\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.ComponentModel\\BackgroundWorker.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Executes an operation on a separate thread.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.ComponentModel/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.ComponentModel.BackgroundWorker\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.ComponentModel.BackgroundWorker.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.ComponentModel.BackgroundWorker.yml","open_to_public_contributors":true,"api_name":["System.ComponentModel.BackgroundWorker","System.ComponentModel.BackgroundWorker..ctor","System.ComponentModel.BackgroundWorker.CancelAsync","System.ComponentModel.BackgroundWorker.CancellationPending","System.ComponentModel.BackgroundWorker.DoWork","System.ComponentModel.BackgroundWorker.add_DoWork","System.ComponentModel.BackgroundWorker.remove_DoWork","System.ComponentModel.BackgroundWorker.IsBusy","System.ComponentModel.BackgroundWorker.OnDoWork","System.ComponentModel.BackgroundWorker.OnProgressChanged","System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted","System.ComponentModel.BackgroundWorker.ProgressChanged","System.ComponentModel.BackgroundWorker.add_ProgressChanged","System.ComponentModel.BackgroundWorker.remove_ProgressChanged","System.ComponentModel.BackgroundWorker.ReportProgress","System.ComponentModel.BackgroundWorker.RunWorkerAsync","System.ComponentModel.BackgroundWorker.RunWorkerCompleted","System.ComponentModel.BackgroundWorker.add_RunWorkerCompleted","System.ComponentModel.BackgroundWorker.remove_RunWorkerCompleted","System.ComponentModel.BackgroundWorker.WorkerReportsProgress","System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.ComponentModel.BackgroundWorker","System::ComponentModel::BackgroundWorker","System.ComponentModel.BackgroundWorker.#ctor","System::ComponentModel::BackgroundWorker::#ctor","System.ComponentModel.BackgroundWorker.CancelAsync","System::ComponentModel::BackgroundWorker::CancelAsync","System.ComponentModel.BackgroundWorker.CancellationPending","System::ComponentModel::BackgroundWorker::CancellationPending","System.ComponentModel.BackgroundWorker.DoWork","System::ComponentModel::BackgroundWorker::DoWork","System.ComponentModel.BackgroundWorker.IsBusy","System::ComponentModel::BackgroundWorker::IsBusy","System.ComponentModel.BackgroundWorker.OnDoWork","System::ComponentModel::BackgroundWorker::OnDoWork","System.ComponentModel.BackgroundWorker.OnProgressChanged","System::ComponentModel::BackgroundWorker::OnProgressChanged","System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted","System::ComponentModel::BackgroundWorker::OnRunWorkerCompleted","System.ComponentModel.BackgroundWorker.ProgressChanged","System::ComponentModel::BackgroundWorker::ProgressChanged","System.ComponentModel.BackgroundWorker.ReportProgress","System::ComponentModel::BackgroundWorker::ReportProgress","System.ComponentModel.BackgroundWorker.RunWorkerAsync","System::ComponentModel::BackgroundWorker::RunWorkerAsync","System.ComponentModel.BackgroundWorker.RunWorkerCompleted","System::ComponentModel::BackgroundWorker::RunWorkerCompleted","System.ComponentModel.BackgroundWorker.WorkerReportsProgress","System::ComponentModel::BackgroundWorker::WorkerReportsProgress","System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation","System::ComponentModel::BackgroundWorker::WorkerSupportsCancellation"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"a35ae592-803d-109b-4a4b-3c68907bcd6c","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.ComponentModel\\BackgroundWorker.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.ComponentModel/BackgroundWorker.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"BackgroundWorker class | Microsoft Docs","_op_ogTitle":"BackgroundWorker class","description":"Executes an operation on a separate thread.\n","toc_asset_id":"_splitted/System.ComponentModel/toc.json","toc_rel":"_splitted/System.ComponentModel/toc.json","source_url":"","ms.assetid":"System.ComponentModel.BackgroundWorker","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.componentmodel.backgroundworker","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.componentmodel.backgroundworker","fileRelativePath":"System.ComponentModel.BackgroundWorker.html"},"themesRelativePathToOutputRoot":"_themes/"}