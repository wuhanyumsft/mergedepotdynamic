{"content":"    \r\n    <h1 id=\"System_Collections_Specialized_NameObjectCollectionBase\">\r\n      <span class=\"lang-csharp\">NameObjectCollectionBase</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides the <code>abstract</code> base class for a collection of associated <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> keys and <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> values that can be accessed either with the key or with the index.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract class NameObjectCollectionBase : System.Collections.ICollection, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">NameObjectCollectionBase</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The underlying structure for this class is a hash table.  </p>\n<p> Each element is a key/value pair.  </p>\n<p> The capacity of a NameObjectCollectionBase is the number of elements the NameObjectCollectionBase can hold. As elements are added to a NameObjectCollectionBase, the capacity is automatically increased as required through reallocation.  </p>\n<p> The hash code provider dispenses hash codes for keys in the NameObjectCollectionBase instance. The default hash code provider is the <a class=\"xref\" href=\"system.collections.caseinsensitivehashcodeprovider\" data-linktype=\"relative-path\">CaseInsensitiveHashCodeProvider</a>.  </p>\n<p> The comparer determines whether two keys are equal. The default comparer is the <a class=\"xref\" href=\"system.collections.caseinsensitivecomparer\" data-linktype=\"relative-path\">CaseInsensitiveComparer</a>.  </p>\n<p> In .NET Framework version 1.0, this class uses culture-sensitive string comparisons. However, in .NET Framework version 1.1 and later, this class uses <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_InvariantCulture_\" data-linktype=\"relative-path\">InvariantCulture</a> when comparing strings. For more information about how culture affects comparisons and sorting, see <a href=\"../Topic/Performing%20Culture-Insensitive%20String%20Operations.md\" data-linktype=\"relative-path\">Performing Culture-Insensitive String Operations</a>.  </p>\n<p> <code>null</code> is allowed as a key or as a value.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> The <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase#System_Collections_Specialized_NameObjectCollectionBase_BaseGet_\" data-linktype=\"relative-path\">BaseGet</a> method does not distinguish between <code>null</code> which is returned because the specified key is not found and <code>null</code> which is returned because the value associated with the key is <code>null</code>.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_NameObjectCollectionBase__ctor\" data-linktype=\"self-bookmark\">NameObjectCollectionBase()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> class that is empty.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_NameObjectCollectionBase__ctor_System_Collections_IEqualityComparer_\" data-linktype=\"self-bookmark\">NameObjectCollectionBase(IEqualityComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> class that is empty, has the default initial capacity, and uses the specified <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_NameObjectCollectionBase__ctor_System_Int32_\" data-linktype=\"self-bookmark\">NameObjectCollectionBase(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> class that is empty, has the specified initial capacity, and uses the default hash code provider and the default comparer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_NameObjectCollectionBase__ctor_System_Collections_IHashCodeProvider_System_Collections_IComparer_\" data-linktype=\"self-bookmark\">NameObjectCollectionBase(IHashCodeProvider,IComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> class that is empty, has the default initial capacity, and uses the specified hash code provider and the specified comparer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_NameObjectCollectionBase__ctor_System_Int32_System_Collections_IEqualityComparer_\" data-linktype=\"self-bookmark\">NameObjectCollectionBase(Int32,IEqualityComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> class that is empty, has the specified initial capacity, and uses the specified <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_NameObjectCollectionBase__ctor_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">NameObjectCollectionBase(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> class that is serializable and uses the specified <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> and <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_NameObjectCollectionBase__ctor_System_Int32_System_Collections_IHashCodeProvider_System_Collections_IComparer_\" data-linktype=\"self-bookmark\">NameObjectCollectionBase(Int32,IHashCodeProvider,IComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> class that is empty, has the specified initial capacity and uses the specified hash code provider and the specified comparer.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_NameObjectCollectionBase_Count\" data-linktype=\"self-bookmark\">Count</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of key/value pairs contained in the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_NameObjectCollectionBase_IsReadOnly\" data-linktype=\"self-bookmark\">IsReadOnly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_NameObjectCollectionBase_Keys\" data-linktype=\"self-bookmark\">Keys</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase.keyscollection\" data-linktype=\"relative-path\">NameObjectCollectionBase+KeysCollection</a> instance that contains all the keys in the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_NameObjectCollectionBase_BaseAdd_System_String_System_Object_\" data-linktype=\"self-bookmark\">BaseAdd(String,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds an entry with the specified key and value into the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_NameObjectCollectionBase_BaseClear\" data-linktype=\"self-bookmark\">BaseClear()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes all entries from the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_NameObjectCollectionBase_BaseGet_System_Int32_\" data-linktype=\"self-bookmark\">BaseGet(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the entry at the specified index of the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_NameObjectCollectionBase_BaseGet_System_String_\" data-linktype=\"self-bookmark\">BaseGet(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the first entry with the specified key from the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_NameObjectCollectionBase_BaseGetAllKeys\" data-linktype=\"self-bookmark\">BaseGetAllKeys()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> array that contains all the keys in the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_NameObjectCollectionBase_BaseGetAllValues\" data-linktype=\"self-bookmark\">BaseGetAllValues()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> array that contains all the values in the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_NameObjectCollectionBase_BaseGetAllValues_System_Type_\" data-linktype=\"self-bookmark\">BaseGetAllValues(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an array of the specified type that contains all the values in the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_NameObjectCollectionBase_BaseGetKey_System_Int32_\" data-linktype=\"self-bookmark\">BaseGetKey(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the key of the entry at the specified index of the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_NameObjectCollectionBase_BaseHasKeys\" data-linktype=\"self-bookmark\">BaseHasKeys()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance contains entries whose keys are not <code>null</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_NameObjectCollectionBase_BaseRemove_System_String_\" data-linktype=\"self-bookmark\">BaseRemove(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the entries with the specified key from the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_NameObjectCollectionBase_BaseRemoveAt_System_Int32_\" data-linktype=\"self-bookmark\">BaseRemoveAt(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the entry at the specified index of the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_NameObjectCollectionBase_BaseSet_System_Int32_System_Object_\" data-linktype=\"self-bookmark\">BaseSet(Int32,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the value of the entry at the specified index of the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_NameObjectCollectionBase_BaseSet_System_String_System_Object_\" data-linktype=\"self-bookmark\">BaseSet(String,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the value of the first entry with the specified key in the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance, if found; otherwise, adds an entry with the specified key and value into the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_NameObjectCollectionBase_GetEnumerator\" data-linktype=\"self-bookmark\">GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerator that iterates through the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_NameObjectCollectionBase_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">GetObjectData(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Implements the <a class=\"xref\" href=\"system.runtime.serialization.iserializable\" data-linktype=\"relative-path\">ISerializable</a> interface and returns the data needed to serialize the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_NameObjectCollectionBase_OnDeserialization_System_Object_\" data-linktype=\"self-bookmark\">OnDeserialization(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Implements the <a class=\"xref\" href=\"system.runtime.serialization.iserializable\" data-linktype=\"relative-path\">ISerializable</a> interface and raises the deserialization event when the deserialization is complete.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_NameObjectCollectionBase_System_Collections_ICollection_CopyTo_System_Array_System_Int32_\" data-linktype=\"self-bookmark\">ICollection.CopyTo(Array,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the entire <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> to a compatible one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>, starting at the specified index of the target array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_NameObjectCollectionBase_System_Collections_ICollection_IsSynchronized\" data-linktype=\"self-bookmark\">ICollection.IsSynchronized</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether access to the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> object is synchronized (thread safe).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Specialized_NameObjectCollectionBase_System_Collections_ICollection_SyncRoot\" data-linktype=\"self-bookmark\">ICollection.SyncRoot</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_NameObjectCollectionBase__ctor\">\r\n    \r\n            <a id=\"System_Collections_Specialized_NameObjectCollectionBase__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NameObjectCollectionBase()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> class that is empty.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected NameObjectCollectionBase ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The capacity of a <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> is the number of elements that the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> can hold. As elements are added to a <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a>, the capacity is automatically increased as required by reallocating the internal array.  </p>\n<p> If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a>.  </p>\n<p> The hash code provider dispenses hash codes for keys in the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance. The default hash code provider is the <a class=\"xref\" href=\"system.collections.caseinsensitivehashcodeprovider\" data-linktype=\"relative-path\">CaseInsensitiveHashCodeProvider</a>.  </p>\n<p> The comparer determines whether two keys are equal. The default comparer is the <a class=\"xref\" href=\"system.collections.caseinsensitivecomparer\" data-linktype=\"relative-path\">CaseInsensitiveComparer</a>.  </p>\n<p> This constructor is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_NameObjectCollectionBase__ctor_System_Collections_IEqualityComparer_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_NameObjectCollectionBase__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NameObjectCollectionBase(IEqualityComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> class that is empty, has the default initial capacity, and uses the specified <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected NameObjectCollectionBase (System.Collections.IEqualityComparer equalityComparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>equalityComparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> object to use to determine whether two keys are equal and to generate hash codes for the keys in the collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The capacity of a <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> object is the number of elements that the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> can hold. As elements are added to a <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a>, the capacity is automatically increased as required by reallocating the internal array.  </p>\n<p> If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> object combines the comparer and the hash code provider.  The hash code provider dispenses hash codes for keys in the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a>.  The comparer determines whether two keys are equal.  </p>\n<p> This constructor is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_NameObjectCollectionBase__ctor_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_NameObjectCollectionBase__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NameObjectCollectionBase(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> class that is empty, has the specified initial capacity, and uses the default hash code provider and the default comparer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected NameObjectCollectionBase (int capacity);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>capacity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The approximate number of entries that the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance can initially contain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>capacity</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The capacity of a <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> is the number of elements that the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> can hold. As elements are added to a <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a>, the capacity is automatically increased as required by reallocating the internal array.  </p>\n<p> If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a>.  </p>\n<p> The hash code provider dispenses hash codes for keys in the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance. The default hash code provider is the <a class=\"xref\" href=\"system.collections.caseinsensitivehashcodeprovider\" data-linktype=\"relative-path\">CaseInsensitiveHashCodeProvider</a>.  </p>\n<p> The comparer determines whether two keys are equal. The default comparer is the <a class=\"xref\" href=\"system.collections.caseinsensitivecomparer\" data-linktype=\"relative-path\">CaseInsensitiveComparer</a>.  </p>\n<p> This constructor is an O(<code>n</code>) operation, where <code>n</code> is <code>capacity</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_NameObjectCollectionBase__ctor_System_Collections_IHashCodeProvider_System_Collections_IComparer_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_NameObjectCollectionBase__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NameObjectCollectionBase(IHashCodeProvider,IComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> class that is empty, has the default initial capacity, and uses the specified hash code provider and the specified comparer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected NameObjectCollectionBase (System.Collections.IHashCodeProvider hashProvider, System.Collections.IComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>hashProvider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ihashcodeprovider\" data-linktype=\"relative-path\">IHashCodeProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.ihashcodeprovider\" data-linktype=\"relative-path\">IHashCodeProvider</a> that will supply the hash codes for all keys in the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> to use to determine whether two keys are equal.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The capacity of a <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> is the number of elements that the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> can hold. As elements are added to a <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a>, the capacity is automatically increased as required by reallocating the internal array.  </p>\n<p> If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a>.  </p>\n<p> The hash code provider dispenses hash codes for keys in the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance. The default hash code provider is the <a class=\"xref\" href=\"system.collections.caseinsensitivehashcodeprovider\" data-linktype=\"relative-path\">CaseInsensitiveHashCodeProvider</a>.  </p>\n<p> The comparer determines whether two keys are equal. The default comparer is the <a class=\"xref\" href=\"system.collections.caseinsensitivecomparer\" data-linktype=\"relative-path\">CaseInsensitiveComparer</a>.  </p>\n<p> This constructor is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_NameObjectCollectionBase__ctor_System_Int32_System_Collections_IEqualityComparer_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_NameObjectCollectionBase__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NameObjectCollectionBase(Int32,IEqualityComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> class that is empty, has the specified initial capacity, and uses the specified <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected NameObjectCollectionBase (int capacity, System.Collections.IEqualityComparer equalityComparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>capacity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The approximate number of entries that the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> object can initially contain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>equalityComparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> object to use to determine whether two keys are equal and to generate hash codes for the keys in the collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>capacity</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The capacity of a <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> object is the number of elements that the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> can hold. As elements are added to a <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a>, the capacity is automatically increased as required by reallocating the internal array.  </p>\n<p> If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> object combines the comparer and the hash code provider.  The hash code provider dispenses hash codes for keys in the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a>.  The comparer determines whether two keys are equal.  </p>\n<p> This constructor is an O(<code>n</code>) operation, where <code>n</code> is the <code>capacity</code> parameter.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_NameObjectCollectionBase__ctor_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_NameObjectCollectionBase__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NameObjectCollectionBase(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> class that is serializable and uses the specified <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> and <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected NameObjectCollectionBase (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>info</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> object that contains the information required to serialize the new <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a> object that contains the source and destination of the serialized stream associated with the new <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_NameObjectCollectionBase__ctor_System_Int32_System_Collections_IHashCodeProvider_System_Collections_IComparer_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_NameObjectCollectionBase__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NameObjectCollectionBase(Int32,IHashCodeProvider,IComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> class that is empty, has the specified initial capacity and uses the specified hash code provider and the specified comparer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected NameObjectCollectionBase (int capacity, System.Collections.IHashCodeProvider hashProvider, System.Collections.IComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>capacity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The approximate number of entries that the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance can initially contain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hashProvider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ihashcodeprovider\" data-linktype=\"relative-path\">IHashCodeProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.ihashcodeprovider\" data-linktype=\"relative-path\">IHashCodeProvider</a> that will supply the hash codes for all keys in the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> to use to determine whether two keys are equal.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>capacity</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The capacity of a <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> is the number of elements that the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> can hold. As elements are added to a <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a>, the capacity is automatically increased as required by reallocating the internal array.  </p>\n<p> If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a>.  </p>\n<p> The hash code provider dispenses hash codes for keys in the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance. The default hash code provider is the <a class=\"xref\" href=\"system.collections.caseinsensitivehashcodeprovider\" data-linktype=\"relative-path\">CaseInsensitiveHashCodeProvider</a>.  </p>\n<p> The comparer determines whether two keys are equal. The default comparer is the <a class=\"xref\" href=\"system.collections.caseinsensitivecomparer\" data-linktype=\"relative-path\">CaseInsensitiveComparer</a>.  </p>\n<p> This constructor is an O(<code>n</code>) operation, where <code>n</code> is <code>capacity</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_NameObjectCollectionBase_Count\">\r\n    \r\n            <a id=\"System_Collections_Specialized_NameObjectCollectionBase_Count_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Count</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of key/value pairs contained in the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int Count { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of key/value pairs contained in the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The capacity is the number of elements that the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> can store. Count is the number of elements that are actually in the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a>.  </p>\n<p> The capacity is always greater than or equal to Count. If Count exceeds the capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_NameObjectCollectionBase_IsReadOnly\">\r\n    \r\n            <a id=\"System_Collections_Specialized_NameObjectCollectionBase_IsReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsReadOnly</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected bool IsReadOnly { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance is read-only; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  </p>\n<p> A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a read-only collection.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly#1\">#using &lt;System.dll&gt;\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\n\npublic ref class MyCollection : public NameObjectCollectionBase  {\n\nprivate:\n   DictionaryEntry^ _de;\n\n   // Gets a key-and-value pair (DictionaryEntry) using an index.\npublic:\n   property DictionaryEntry^ default[ int ]  {\n      DictionaryEntry^ get( int index )  {\n         _de-&gt;Key = this-&gt;BaseGetKey( index );\n         _de-&gt;Value = this-&gt;BaseGet( index );\n         return( _de );\n      }\n   }\n\n   // Adds elements from an IDictionary into the new collection.\n   MyCollection( IDictionary^ d, Boolean bReadOnly )  {\n\n      _de = gcnew DictionaryEntry();\n\n      for each ( DictionaryEntry^ de in d )  {\n         this-&gt;BaseAdd( (String^) de-&gt;Key, de-&gt;Value );\n      }\n      this-&gt;IsReadOnly = bReadOnly;\n   }\n\n   // Adds an entry to the collection.\n   void Add( String^ key, Object^ value )  {\n      this-&gt;BaseAdd( key, value );\n   }\n};\n\npublic ref class SamplesNameObjectCollectionBase  {\n\npublic:\n   static void Main()  {\n\n      // Creates and initializes a new MyCollection that is read-only.\n      IDictionary^ d = gcnew ListDictionary();\n      d-&gt;Add( &quot;red&quot;, &quot;apple&quot; );\n      d-&gt;Add( &quot;yellow&quot;, &quot;banana&quot; );\n      d-&gt;Add( &quot;green&quot;, &quot;pear&quot; );\n      MyCollection^ myROCol = gcnew MyCollection( d, true );\n\n      // Tries to add a new item.\n      try  {\n         myROCol-&gt;Add( &quot;blue&quot;, &quot;sky&quot; );\n      }\n      catch ( NotSupportedException^ e )  {\n         Console::WriteLine( e-&gt;ToString() );\n      }\n\n      // Displays the keys and values of the MyCollection.\n      Console::WriteLine( &quot;Read-Only Collection:&quot; );\n      PrintKeysAndValues( myROCol );\n   }\n\n   static void PrintKeysAndValues( MyCollection^ myCol )  {\n      for ( int i = 0; i &lt; myCol-&gt;Count; i++ )  {\n         Console::WriteLine( &quot;[{0}] : {1}, {2}&quot;, i, myCol[i]-&gt;Key, myCol[i]-&gt;Value );\n      }\n   }\n};\n\nint main()\n{\n    SamplesNameObjectCollectionBase::Main();\n}\n\n/*\nThis code produces the following output.\n\nSystem.NotSupportedException: Collection is read-only.\n   at System.Collections.Specialized.NameObjectCollectionBase.BaseAdd(String name, Object value)\n   at SamplesNameObjectCollectionBase.Main()\nRead-Only Collection:\n[0] : red, apple\n[1] : yellow, banana\n[2] : green, pear\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\n\npublic class MyCollection : NameObjectCollectionBase  {\n\n   private DictionaryEntry _de = new DictionaryEntry();\n\n   // Gets a key-and-value pair (DictionaryEntry) using an index.\n   public DictionaryEntry this[ int index ]  {\n      get  {\n         _de.Key = this.BaseGetKey( index );\n         _de.Value = this.BaseGet( index );\n         return( _de );\n      }\n   }\n\n   // Adds elements from an IDictionary into the new collection.\n   public MyCollection( IDictionary d, Boolean bReadOnly )  {\n      foreach ( DictionaryEntry de in d )  {\n         this.BaseAdd( (String) de.Key, de.Value );\n      }\n      this.IsReadOnly = bReadOnly;\n   }\n\n   // Adds an entry to the collection.\n   public void Add( String key, Object value )  {\n      this.BaseAdd( key, value );\n   }\n\n}\n\npublic class SamplesNameObjectCollectionBase  {\n\n   public static void Main()  {\n\n      // Creates and initializes a new MyCollection that is read-only.\n      IDictionary d = new ListDictionary();\n      d.Add( &quot;red&quot;, &quot;apple&quot; );\n      d.Add( &quot;yellow&quot;, &quot;banana&quot; );\n      d.Add( &quot;green&quot;, &quot;pear&quot; );\n      MyCollection myROCol = new MyCollection( d, true );\n\n      // Tries to add a new item.\n      try  {\n         myROCol.Add( &quot;blue&quot;, &quot;sky&quot; );\n      }\n      catch ( NotSupportedException e )  {\n         Console.WriteLine( e.ToString() );\n      }\n\n      // Displays the keys and values of the MyCollection.\n      Console.WriteLine( &quot;Read-Only Collection:&quot; );\n      PrintKeysAndValues( myROCol );\n\n   }\n\n   public static void PrintKeysAndValues( MyCollection myCol )  {\n      for ( int i = 0; i &lt; myCol.Count; i++ )  {\n         Console.WriteLine( &quot;[{0}] : {1}, {2}&quot;, i, myCol[i].Key, myCol[i].Value );\n      }\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nSystem.NotSupportedException: Collection is read-only.\n   at System.Collections.Specialized.NameObjectCollectionBase.BaseAdd(String name, Object value)\n   at SamplesNameObjectCollectionBase.Main()\nRead-Only Collection:\n[0] : red, apple\n[1] : yellow, banana\n[2] : green, pear\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\n\nPublic Class MyCollection\n   Inherits NameObjectCollectionBase\n\n   Private _de As New DictionaryEntry()\n\n   &#39; Gets a key-and-value pair (DictionaryEntry) using an index.\n   Default Public ReadOnly Property Item(index As Integer) As DictionaryEntry\n      Get\n         _de.Key = Me.BaseGetKey(index)\n         _de.Value = Me.BaseGet(index)\n         Return _de\n      End Get\n   End Property\n\n   &#39; Adds elements from an IDictionary into the new collection.\n   Public Sub New(d As IDictionary, bReadOnly As [Boolean])\n      Dim de As DictionaryEntry\n      For Each de In  d\n         Me.BaseAdd(CType(de.Key, [String]), de.Value)\n      Next de\n      Me.IsReadOnly = bReadOnly\n   End Sub &#39;New\n\n   &#39; Adds an entry to the collection.\n   Public Sub Add(key As [String], value As [Object])\n      Me.BaseAdd(key, value)\n   End Sub &#39;Add\n\nEnd Class &#39;MyCollection\n\n\nPublic Class SamplesNameObjectCollectionBase   \n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new MyCollection that is read-only.\n      Dim d = New ListDictionary()\n      d.Add(&quot;red&quot;, &quot;apple&quot;)\n      d.Add(&quot;yellow&quot;, &quot;banana&quot;)\n      d.Add(&quot;green&quot;, &quot;pear&quot;)\n      Dim myROCol As New MyCollection(d, True)\n\n      &#39; Tries to add a new item.\n      Try\n         myROCol.Add(&quot;blue&quot;, &quot;sky&quot;)\n      Catch e As NotSupportedException\n         Console.WriteLine(e.ToString())\n      End Try\n\n      &#39; Displays the keys and values of the MyCollection.\n      Console.WriteLine(&quot;Read-Only Collection:&quot;)\n      PrintKeysAndValues(myROCol)\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintKeysAndValues(myCol As MyCollection)\n      Dim i As Integer\n      For i = 0 To myCol.Count - 1\n         Console.WriteLine(&quot;[{0}] : {1}, {2}&quot;, i, myCol(i).Key, myCol(i).Value)\n      Next i\n   End Sub &#39;PrintKeysAndValues\n\nEnd Class &#39;SamplesNameObjectCollectionBase \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;System.NotSupportedException: Collection is read-only.\n&#39;   at System.Collections.Specialized.NameObjectCollectionBase.BaseAdd(String name, Object value)\n&#39;   at SamplesNameObjectCollectionBase.Main()\n&#39;Read-Only Collection:\n&#39;[0] : red, apple\n&#39;[1] : yellow, banana\n&#39;[2] : green, pear\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_NameObjectCollectionBase_Keys\">\r\n    \r\n            <a id=\"System_Collections_Specialized_NameObjectCollectionBase_Keys_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Keys</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase.keyscollection\" data-linktype=\"relative-path\">NameObjectCollectionBase+KeysCollection</a> instance that contains all the keys in the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Collections.Specialized.NameObjectCollectionBase.KeysCollection Keys { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase.keyscollection\" data-linktype=\"relative-path\">NameObjectCollectionBase+KeysCollection</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase.keyscollection\" data-linktype=\"relative-path\">NameObjectCollectionBase+KeysCollection</a> instance that contains all the keys in the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_NameObjectCollectionBase_BaseAdd_System_String_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_NameObjectCollectionBase_BaseAdd_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BaseAdd(String,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Adds an entry with the specified key and value into the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void BaseAdd (string name, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> key of the entry to add. The key can be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> value of the entry to add. The value can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The collection is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase#System_Collections_Specialized_NameObjectCollectionBase_Count_\" data-linktype=\"relative-path\">Count</a> already equals the capacity, the capacity of the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase#System_Collections_Specialized_NameObjectCollectionBase_Count_\" data-linktype=\"relative-path\">Count</a> is less than the capacity, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase#System_Collections_Specialized_NameObjectCollectionBase_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses BaseAdd to create a new <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> with elements from an <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Collections.Specialized.NameObjectCollectionBase.BaseAdd#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\n\nPublic Class MyCollection\n   Inherits NameObjectCollectionBase\n\n   Private _de As New DictionaryEntry()\n\n   &#39; Gets a key-and-value pair (DictionaryEntry) using an index.\n   Default Public ReadOnly Property Item(index As Integer) As DictionaryEntry\n      Get\n         _de.Key = Me.BaseGetKey(index)\n         _de.Value = Me.BaseGet(index)\n         Return _de\n      End Get\n   End Property\n\n   &#39; Adds elements from an IDictionary into the new collection.\n   Public Sub New(d As IDictionary)\n      Dim de As DictionaryEntry\n      For Each de In  d\n         Me.BaseAdd(CType(de.Key, [String]), de.Value)\n      Next de\n   End Sub &#39;New\n\nEnd Class &#39;MyCollection\n\n\nPublic Class SamplesNameObjectCollectionBase   \n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new MyCollection instance.\n      Dim d = New ListDictionary()\n      d.Add(&quot;red&quot;, &quot;apple&quot;)\n      d.Add(&quot;yellow&quot;, &quot;banana&quot;)\n      d.Add(&quot;green&quot;, &quot;pear&quot;)\n      Dim myCol As New MyCollection(d)\n\n      &#39; Displays the keys and values of the MyCollection instance.\n      Dim i As Integer\n      For i = 0 To myCol.Count - 1\n         Console.WriteLine(&quot;[{0}] : {1}, {2}&quot;, i, myCol(i).Key, myCol(i).Value)\n      Next i\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesNameObjectCollectionBase\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;[0] : red, apple\n&#39;[1] : yellow, banana\n&#39;[2] : green, pear\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Collections.Specialized.NameObjectCollectionBase.BaseAdd#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\npublic ref class MyCollection: public NameObjectCollectionBase\n{\nprivate:\n   DictionaryEntry _de;\n\npublic:\n\n   property DictionaryEntry Item [ int ]\n   {\n      // Gets a key-and-value pair (DictionaryEntry) using an index.\n      DictionaryEntry get( int index )\n      {\n         _de.Key = this-&gt;BaseGetKey( index );\n         _de.Value = this-&gt;BaseGet( index );\n         return (_de);\n      }\n   }\n\n   // Adds elements from an IDictionary* into the new collection.\n   MyCollection( IDictionary^ d )\n   {\n      IEnumerator^ myEnum = d-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         DictionaryEntry^ de = safe_cast&lt;DictionaryEntry^&gt;(myEnum-&gt;Current);\n         this-&gt;BaseAdd( safe_cast&lt;String^&gt;(de-&gt;Key), de-&gt;Value );\n      }\n   }\n};\n\nint main()\n{\n   // Creates and initializes a new MyCollection instance.\n   IDictionary^ d = gcnew ListDictionary;\n   d-&gt;Add( &quot;red&quot;, &quot;apple&quot; );\n   d-&gt;Add( &quot;yellow&quot;, &quot;banana&quot; );\n   d-&gt;Add( &quot;green&quot;, &quot;pear&quot; );\n   MyCollection^ myCol = gcnew MyCollection( d );\n\n   // Displays the keys and values of the MyCollection instance.\n   for ( int i = 0; i &lt; myCol-&gt;Count; i++ )\n   {\n      Console::WriteLine( &quot;[{0}] : {1}, {2}&quot;, i, myCol-&gt;Item[ i ].Key, myCol-&gt;Item[ i ].Value );\n   }\n}\n\n/*\nThis code produces the following output.\n\n[0] : red, apple\n[1] : yellow, banana\n[2] : green, pear\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Specialized.NameObjectCollectionBase.BaseAdd#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\n\npublic class MyCollection : NameObjectCollectionBase  {\n\n   private DictionaryEntry _de = new DictionaryEntry();\n\n   // Gets a key-and-value pair (DictionaryEntry) using an index.\n   public DictionaryEntry this[ int index ]  {\n      get  {\n         _de.Key = this.BaseGetKey( index );\n         _de.Value = this.BaseGet( index );\n         return( _de );\n      }\n   }\n\n   // Adds elements from an IDictionary into the new collection.\n   public MyCollection( IDictionary d )  {\n      foreach ( DictionaryEntry de in d )  {\n         this.BaseAdd( (String) de.Key, de.Value );\n      }\n   }\n\n}\n\npublic class SamplesNameObjectCollectionBase  {\n\n   public static void Main()  {\n\n      // Creates and initializes a new MyCollection instance.\n      IDictionary d = new ListDictionary();\n      d.Add( &quot;red&quot;, &quot;apple&quot; );\n      d.Add( &quot;yellow&quot;, &quot;banana&quot; );\n      d.Add( &quot;green&quot;, &quot;pear&quot; );\n      MyCollection myCol = new MyCollection( d );\n\n      // Displays the keys and values of the MyCollection instance.\n      for ( int i = 0; i &lt; myCol.Count; i++ )  {\n         Console.WriteLine( &quot;[{0}] : {1}, {2}&quot;, i, myCol[i].Key, myCol[i].Value );\n      }\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\n[0] : red, apple\n[1] : yellow, banana\n[2] : green, pear\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_NameObjectCollectionBase_BaseClear\">\r\n    \r\n            <a id=\"System_Collections_Specialized_NameObjectCollectionBase_BaseClear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BaseClear()</div>        \r\n          </div>\r\n    \r\n            <p>Removes all entries from the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void BaseClear ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The collection is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase#System_Collections_Specialized_NameObjectCollectionBase_Count_\" data-linktype=\"relative-path\">Count</a> is set to zero, and references to other objects from elements of the collection are also released.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses BaseClear to remove all elements from a <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Specialized.NameObjectCollectionBase.BaseClear#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\n\npublic class MyCollection : NameObjectCollectionBase  {\n\n   private DictionaryEntry _de = new DictionaryEntry();\n\n   // Gets a key-and-value pair (DictionaryEntry) using an index.\n   public DictionaryEntry this[ int index ]  {\n      get  {\n         _de.Key = this.BaseGetKey( index );\n         _de.Value = this.BaseGet( index );\n         return( _de );\n      }\n   }\n\n   // Adds elements from an IDictionary into the new collection.\n   public MyCollection( IDictionary d )  {\n      foreach ( DictionaryEntry de in d )  {\n         this.BaseAdd( (String) de.Key, de.Value );\n      }\n   }\n\n   // Clears all the elements in the collection.\n   public void Clear()  {\n      this.BaseClear();\n   }\n\n}\n\npublic class SamplesNameObjectCollectionBase  {\n\n   public static void Main()  {\n\n      // Creates and initializes a new MyCollection instance.\n      IDictionary d = new ListDictionary();\n      d.Add( &quot;red&quot;, &quot;apple&quot; );\n      d.Add( &quot;yellow&quot;, &quot;banana&quot; );\n      d.Add( &quot;green&quot;, &quot;pear&quot; );\n      MyCollection myCol = new MyCollection( d );\n      Console.WriteLine( &quot;Initial state of the collection (Count = {0}):&quot;, myCol.Count );\n      PrintKeysAndValues( myCol );\n\n      // Removes all elements from the collection.\n      myCol.Clear();\n      Console.WriteLine( &quot;After clearing the collection (Count = {0}):&quot;, myCol.Count );\n      PrintKeysAndValues( myCol );\n\n   }\n\n   public static void PrintKeysAndValues( MyCollection myCol )  {\n      for ( int i = 0; i &lt; myCol.Count; i++ )  {\n         Console.WriteLine( &quot;[{0}] : {1}, {2}&quot;, i, myCol[i].Key, myCol[i].Value );\n      }\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nInitial state of the collection (Count = 3):\n[0] : red, apple\n[1] : yellow, banana\n[2] : green, pear\nAfter clearing the collection (Count = 0):\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Specialized.NameObjectCollectionBase.BaseClear#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\n\nPublic Class MyCollection\n   Inherits NameObjectCollectionBase\n\n   Private _de As New DictionaryEntry()\n\n   &#39; Gets a key-and-value pair (DictionaryEntry) using an index.\n   Default Public ReadOnly Property Item(index As Integer) As DictionaryEntry\n      Get\n         _de.Key = Me.BaseGetKey(index)\n         _de.Value = Me.BaseGet(index)\n         Return _de\n      End Get\n   End Property\n\n   &#39; Adds elements from an IDictionary into the new collection.\n   Public Sub New(d As IDictionary)\n      Dim de As DictionaryEntry\n      For Each de In  d\n         Me.BaseAdd(CType(de.Key, [String]), de.Value)\n      Next de\n   End Sub &#39;New\n\n   &#39; Clears all the elements in the collection.\n   Public Sub Clear()\n      Me.BaseClear()\n   End Sub &#39;Clear\n\nEnd Class &#39;MyCollection\n\n\nPublic Class SamplesNameObjectCollectionBase   \n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new MyCollection instance.\n      Dim d = New ListDictionary()\n      d.Add(&quot;red&quot;, &quot;apple&quot;)\n      d.Add(&quot;yellow&quot;, &quot;banana&quot;)\n      d.Add(&quot;green&quot;, &quot;pear&quot;)\n      Dim myCol As New MyCollection(d)\n      Console.WriteLine(&quot;Initial state of the collection (Count = {0}):&quot;, myCol.Count)\n      PrintKeysAndValues(myCol)\n\n      &#39; Removes all elements from the collection.\n      myCol.Clear()\n      Console.WriteLine(&quot;After clearing the collection (Count = {0}):&quot;, myCol.Count)\n      PrintKeysAndValues(myCol)\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintKeysAndValues(myCol As MyCollection)\n      Dim i As Integer\n      For i = 0 To myCol.Count - 1\n         Console.WriteLine(&quot;[{0}] : {1}, {2}&quot;, i, myCol(i).Key, myCol(i).Value)\n      Next i\n   End Sub &#39;PrintKeysAndValues\n\nEnd Class &#39;SamplesNameObjectCollectionBase \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Initial state of the collection (Count = 3):\n&#39;[0] : red, apple\n&#39;[1] : yellow, banana\n&#39;[2] : green, pear\n&#39;After clearing the collection (Count = 0):\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Collections.Specialized.NameObjectCollectionBase.BaseClear#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\npublic ref class MyCollection: public NameObjectCollectionBase\n{\nprivate:\n   DictionaryEntry _de;\n\npublic:\n\n   property DictionaryEntry Item [ int ]\n   {\n      // Gets a key-and-value pair (DictionaryEntry) using an index.\n      DictionaryEntry get( int index )\n      {\n         _de.Key = this-&gt;BaseGetKey( index );\n         _de.Value = this-&gt;BaseGet( index );\n         return (_de);\n      }\n   }\n\n   // Adds elements from an IDictionary* into the new collection.\n   MyCollection( IDictionary^ d )\n   {\n      IEnumerator^ myEnum = d-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         DictionaryEntry^ de = safe_cast&lt;DictionaryEntry^&gt;(myEnum-&gt;Current);\n         this-&gt;BaseAdd( safe_cast&lt;String^&gt;(de-&gt;Key), de-&gt;Value );\n      }\n   }\n\n   // Clears all the elements in the collection.\n   void Clear()\n   {\n      this-&gt;BaseClear();\n   }\n};\n\nstatic void PrintKeysAndValues( MyCollection^ myCol )\n{\n   for ( int i = 0; i &lt; myCol-&gt;Count; i++ )\n   {\n      Console::WriteLine( &quot;[{0}] : {1}, {2}&quot;, i, myCol-&gt;Item[ i ].Key, myCol-&gt;Item[ i ].Value );\n\n   }\n}\n\nint main()\n{\n   // Creates and initializes a new MyCollection instance.\n   IDictionary^ d = gcnew ListDictionary;\n   d-&gt;Add( &quot;red&quot;, &quot;apple&quot; );\n   d-&gt;Add( &quot;yellow&quot;, &quot;banana&quot; );\n   d-&gt;Add( &quot;green&quot;, &quot;pear&quot; );\n   MyCollection^ myCol = gcnew MyCollection( d );\n   Console::WriteLine( &quot;Initial state of the collection (Count = {0}):&quot;, myCol-&gt;Count );\n   PrintKeysAndValues( myCol );\n\n   // Removes all elements from the collection.\n   myCol-&gt;Clear();\n   Console::WriteLine( &quot;After clearing the collection (Count = {0}):&quot;, myCol-&gt;Count );\n   PrintKeysAndValues( myCol );\n}\n\n/*\nThis code produces the following output.\n\nInitial state of the collection (Count = 3):\n[0] : red, apple\n[1] : yellow, banana\n[2] : green, pear\nAfter clearing the collection (Count = 0):\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_NameObjectCollectionBase_BaseGet_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_NameObjectCollectionBase_BaseGet_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BaseGet(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the entry at the specified index of the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected object BaseGet (int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the value to get.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> that represents the value of the entry at the specified index.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is outside the valid range of indexes for the collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase#System_Collections_Specialized_NameObjectCollectionBase_BaseGetKey_\" data-linktype=\"relative-path\">BaseGetKey</a> and <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase#System_Collections_Specialized_NameObjectCollectionBase_BaseGet_\" data-linktype=\"relative-path\">BaseGet</a> to get specific keys and values.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.Specialized.NameObjectCollectionBase.BaseGet#1\">#using &lt;System.dll&gt;\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\n\npublic ref class MyCollection : public NameObjectCollectionBase  {\n\nprivate:\n   DictionaryEntry^ _de;\n\n   // Gets a key-and-value pair (DictionaryEntry) using an index.\npublic:\n   property DictionaryEntry^ default[ int ]  {\n      DictionaryEntry^ get( int index )  {\n         _de-&gt;Key = this-&gt;BaseGetKey( index );\n         _de-&gt;Value = this-&gt;BaseGet( index );\n         return( _de );\n      }\n   }\n\n   // Gets or sets the value associated with the specified key.\n   property Object^ default[ String^ ]  {\n      Object^ get(String^ key)  {\n         return( this-&gt;BaseGet( key ) );\n      }\n      void set( String^ key, Object^ value )  {\n         this-&gt;BaseSet( key, value );\n      }\n   }\n\n   // Adds elements from an IDictionary into the new collection.\n   MyCollection( IDictionary^ d )  {\n\n      _de = gcnew DictionaryEntry();\n\n      for each ( DictionaryEntry^ de in d )  {\n         this-&gt;BaseAdd( (String^) de-&gt;Key, de-&gt;Value );\n      }\n   }\n};\n\npublic ref class SamplesNameObjectCollectionBase  {\n\npublic:\n   static void Main()  {\n\n      // Creates and initializes a new MyCollection instance.\n      IDictionary^ d = gcnew ListDictionary();\n      d-&gt;Add( &quot;red&quot;, &quot;apple&quot; );\n      d-&gt;Add( &quot;yellow&quot;, &quot;banana&quot; );\n      d-&gt;Add( &quot;green&quot;, &quot;pear&quot; );\n      MyCollection^ myCol = gcnew MyCollection( d );\n      Console::WriteLine( &quot;Initial state of the collection (Count = {0}):&quot;, myCol-&gt;Count );\n      PrintKeysAndValues( myCol );\n\n      // Gets specific keys and values.\n      Console::WriteLine( &quot;The key at index 0 is {0}.&quot;, myCol[0]-&gt;Key );\n      Console::WriteLine( &quot;The value at index 0 is {0}.&quot;, myCol[0]-&gt;Value );\n      Console::WriteLine( &quot;The value associated with the key \\&quot;green\\&quot; is {0}.&quot;, myCol[&quot;green&quot;] );\n\n   }\n\n   static void PrintKeysAndValues( MyCollection^ myCol )  {\n      for ( int i = 0; i &lt; myCol-&gt;Count; i++ )  {\n         Console::WriteLine( &quot;[{0}] : {1}, {2}&quot;, i, myCol[i]-&gt;Key, myCol[i]-&gt;Value );\n      }\n   }\n};\n\nint main()\n{\n    SamplesNameObjectCollectionBase::Main();\n}\n\n/*\nThis code produces the following output.\n\nInitial state of the collection (Count = 3):\n[0] : red, apple\n[1] : yellow, banana\n[2] : green, pear\nThe key at index 0 is red.\nThe value at index 0 is apple.\nThe value associated with the key &quot;green&quot; is pear.\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Specialized.NameObjectCollectionBase.BaseGet#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\n\npublic class MyCollection : NameObjectCollectionBase  {\n\n   private DictionaryEntry _de = new DictionaryEntry();\n\n   // Gets a key-and-value pair (DictionaryEntry) using an index.\n   public DictionaryEntry this[ int index ]  {\n      get  {\n         _de.Key = this.BaseGetKey( index );\n         _de.Value = this.BaseGet( index );\n         return( _de );\n      }\n   }\n\n   // Gets or sets the value associated with the specified key.\n   public Object this[ String key ]  {\n      get  {\n         return( this.BaseGet( key ) );\n      }\n      set  {\n         this.BaseSet( key, value );\n      }\n   }\n\n   // Adds elements from an IDictionary into the new collection.\n   public MyCollection( IDictionary d )  {\n      foreach ( DictionaryEntry de in d )  {\n         this.BaseAdd( (String) de.Key, de.Value );\n      }\n   }\n\n}\n\npublic class SamplesNameObjectCollectionBase  {\n\n   public static void Main()  {\n\n      // Creates and initializes a new MyCollection instance.\n      IDictionary d = new ListDictionary();\n      d.Add( &quot;red&quot;, &quot;apple&quot; );\n      d.Add( &quot;yellow&quot;, &quot;banana&quot; );\n      d.Add( &quot;green&quot;, &quot;pear&quot; );\n      MyCollection myCol = new MyCollection( d );\n      Console.WriteLine( &quot;Initial state of the collection (Count = {0}):&quot;, myCol.Count );\n      PrintKeysAndValues( myCol );\n\n      // Gets specific keys and values.\n      Console.WriteLine( &quot;The key at index 0 is {0}.&quot;, myCol[0].Key );\n      Console.WriteLine( &quot;The value at index 0 is {0}.&quot;, myCol[0].Value );\n      Console.WriteLine( &quot;The value associated with the key \\&quot;green\\&quot; is {0}.&quot;, myCol[&quot;green&quot;] );\n\n   }\n\n   public static void PrintKeysAndValues( MyCollection myCol )  {\n      for ( int i = 0; i &lt; myCol.Count; i++ )  {\n         Console.WriteLine( &quot;[{0}] : {1}, {2}&quot;, i, myCol[i].Key, myCol[i].Value );\n      }\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nInitial state of the collection (Count = 3):\n[0] : red, apple\n[1] : yellow, banana\n[2] : green, pear\nThe key at index 0 is red.\nThe value at index 0 is apple.\nThe value associated with the key &quot;green&quot; is pear.\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Specialized.NameObjectCollectionBase.BaseGet#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\n\nPublic Class MyCollection\n   Inherits NameObjectCollectionBase\n\n   Private _de As New DictionaryEntry()\n\n   &#39; Gets a key-and-value pair (DictionaryEntry) using an index.\n   Default Public ReadOnly Property Item(index As Integer) As DictionaryEntry\n      Get\n         _de.Key = Me.BaseGetKey(index)\n         _de.Value = Me.BaseGet(index)\n         Return _de\n      End Get\n   End Property\n\n   &#39; Gets or sets the value associated with the specified key.\n   Default Public Property Item(key As [String]) As [Object]\n      Get\n         Return Me.BaseGet(key)\n      End Get\n      Set\n         Me.BaseSet(key, value)\n      End Set\n   End Property\n\n   &#39; Adds elements from an IDictionary into the new collection.\n   Public Sub New(d As IDictionary)\n      Dim de As DictionaryEntry\n      For Each de In  d\n         Me.BaseAdd(CType(de.Key, [String]), de.Value)\n      Next de\n   End Sub &#39;New\n\nEnd Class &#39;MyCollection\n\n\nPublic Class SamplesNameObjectCollectionBase   \n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new MyCollection instance.\n      Dim d = New ListDictionary()\n      d.Add(&quot;red&quot;, &quot;apple&quot;)\n      d.Add(&quot;yellow&quot;, &quot;banana&quot;)\n      d.Add(&quot;green&quot;, &quot;pear&quot;)\n      Dim myCol As New MyCollection(d)\n      Console.WriteLine(&quot;Initial state of the collection (Count = {0}):&quot;, myCol.Count)\n      PrintKeysAndValues(myCol)\n\n      &#39; Gets specific keys and values.\n      Console.WriteLine(&quot;The key at index 0 is {0}.&quot;, myCol(0).Key)\n      Console.WriteLine(&quot;The value at index 0 is {0}.&quot;, myCol(0).Value)\n      Console.WriteLine(&quot;The value associated with the key &quot;&quot;green&quot;&quot; is {0}.&quot;, myCol(&quot;green&quot;))\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintKeysAndValues(myCol As MyCollection)\n      Dim i As Integer\n      For i = 0 To myCol.Count - 1\n         Console.WriteLine(&quot;[{0}] : {1}, {2}&quot;, i, myCol(i).Key, myCol(i).Value)\n      Next i\n   End Sub &#39;PrintKeysAndValues\n\nEnd Class &#39;SamplesNameObjectCollectionBase \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Initial state of the collection (Count = 3):\n&#39;[0] : red, apple\n&#39;[1] : yellow, banana\n&#39;[2] : green, pear\n&#39;The key at index 0 is red.\n&#39;The value at index 0 is apple.\n&#39;The value associated with the key &quot;green&quot; is pear.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_NameObjectCollectionBase_BaseGet_System_String_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_NameObjectCollectionBase_BaseGet_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BaseGet(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the first entry with the specified key from the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected object BaseGet (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> key of the entry to get. The key can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> that represents the value of the first entry with the specified key, if found; otherwise, <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the collection contains multiple entries with the specified key, this method returns only the first entry. To get the values of subsequent entries with the same key, use the enumerator to iterate through the collection and compare the keys.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> This method returns <code>null</code> in the following cases: 1) if the specified key is not found; and 2) if the specified key is found and its associated value is <code>null</code>. This method does not distinguish between the two cases.  </p>\n</div>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase#System_Collections_Specialized_NameObjectCollectionBase_BaseGetKey_\" data-linktype=\"relative-path\">BaseGetKey</a> and BaseGet to get specific keys and values.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.Specialized.NameObjectCollectionBase.BaseGet#1\">#using &lt;System.dll&gt;\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\n\npublic ref class MyCollection : public NameObjectCollectionBase  {\n\nprivate:\n   DictionaryEntry^ _de;\n\n   // Gets a key-and-value pair (DictionaryEntry) using an index.\npublic:\n   property DictionaryEntry^ default[ int ]  {\n      DictionaryEntry^ get( int index )  {\n         _de-&gt;Key = this-&gt;BaseGetKey( index );\n         _de-&gt;Value = this-&gt;BaseGet( index );\n         return( _de );\n      }\n   }\n\n   // Gets or sets the value associated with the specified key.\n   property Object^ default[ String^ ]  {\n      Object^ get(String^ key)  {\n         return( this-&gt;BaseGet( key ) );\n      }\n      void set( String^ key, Object^ value )  {\n         this-&gt;BaseSet( key, value );\n      }\n   }\n\n   // Adds elements from an IDictionary into the new collection.\n   MyCollection( IDictionary^ d )  {\n\n      _de = gcnew DictionaryEntry();\n\n      for each ( DictionaryEntry^ de in d )  {\n         this-&gt;BaseAdd( (String^) de-&gt;Key, de-&gt;Value );\n      }\n   }\n};\n\npublic ref class SamplesNameObjectCollectionBase  {\n\npublic:\n   static void Main()  {\n\n      // Creates and initializes a new MyCollection instance.\n      IDictionary^ d = gcnew ListDictionary();\n      d-&gt;Add( &quot;red&quot;, &quot;apple&quot; );\n      d-&gt;Add( &quot;yellow&quot;, &quot;banana&quot; );\n      d-&gt;Add( &quot;green&quot;, &quot;pear&quot; );\n      MyCollection^ myCol = gcnew MyCollection( d );\n      Console::WriteLine( &quot;Initial state of the collection (Count = {0}):&quot;, myCol-&gt;Count );\n      PrintKeysAndValues( myCol );\n\n      // Gets specific keys and values.\n      Console::WriteLine( &quot;The key at index 0 is {0}.&quot;, myCol[0]-&gt;Key );\n      Console::WriteLine( &quot;The value at index 0 is {0}.&quot;, myCol[0]-&gt;Value );\n      Console::WriteLine( &quot;The value associated with the key \\&quot;green\\&quot; is {0}.&quot;, myCol[&quot;green&quot;] );\n\n   }\n\n   static void PrintKeysAndValues( MyCollection^ myCol )  {\n      for ( int i = 0; i &lt; myCol-&gt;Count; i++ )  {\n         Console::WriteLine( &quot;[{0}] : {1}, {2}&quot;, i, myCol[i]-&gt;Key, myCol[i]-&gt;Value );\n      }\n   }\n};\n\nint main()\n{\n    SamplesNameObjectCollectionBase::Main();\n}\n\n/*\nThis code produces the following output.\n\nInitial state of the collection (Count = 3):\n[0] : red, apple\n[1] : yellow, banana\n[2] : green, pear\nThe key at index 0 is red.\nThe value at index 0 is apple.\nThe value associated with the key &quot;green&quot; is pear.\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Specialized.NameObjectCollectionBase.BaseGet#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\n\npublic class MyCollection : NameObjectCollectionBase  {\n\n   private DictionaryEntry _de = new DictionaryEntry();\n\n   // Gets a key-and-value pair (DictionaryEntry) using an index.\n   public DictionaryEntry this[ int index ]  {\n      get  {\n         _de.Key = this.BaseGetKey( index );\n         _de.Value = this.BaseGet( index );\n         return( _de );\n      }\n   }\n\n   // Gets or sets the value associated with the specified key.\n   public Object this[ String key ]  {\n      get  {\n         return( this.BaseGet( key ) );\n      }\n      set  {\n         this.BaseSet( key, value );\n      }\n   }\n\n   // Adds elements from an IDictionary into the new collection.\n   public MyCollection( IDictionary d )  {\n      foreach ( DictionaryEntry de in d )  {\n         this.BaseAdd( (String) de.Key, de.Value );\n      }\n   }\n\n}\n\npublic class SamplesNameObjectCollectionBase  {\n\n   public static void Main()  {\n\n      // Creates and initializes a new MyCollection instance.\n      IDictionary d = new ListDictionary();\n      d.Add( &quot;red&quot;, &quot;apple&quot; );\n      d.Add( &quot;yellow&quot;, &quot;banana&quot; );\n      d.Add( &quot;green&quot;, &quot;pear&quot; );\n      MyCollection myCol = new MyCollection( d );\n      Console.WriteLine( &quot;Initial state of the collection (Count = {0}):&quot;, myCol.Count );\n      PrintKeysAndValues( myCol );\n\n      // Gets specific keys and values.\n      Console.WriteLine( &quot;The key at index 0 is {0}.&quot;, myCol[0].Key );\n      Console.WriteLine( &quot;The value at index 0 is {0}.&quot;, myCol[0].Value );\n      Console.WriteLine( &quot;The value associated with the key \\&quot;green\\&quot; is {0}.&quot;, myCol[&quot;green&quot;] );\n\n   }\n\n   public static void PrintKeysAndValues( MyCollection myCol )  {\n      for ( int i = 0; i &lt; myCol.Count; i++ )  {\n         Console.WriteLine( &quot;[{0}] : {1}, {2}&quot;, i, myCol[i].Key, myCol[i].Value );\n      }\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nInitial state of the collection (Count = 3):\n[0] : red, apple\n[1] : yellow, banana\n[2] : green, pear\nThe key at index 0 is red.\nThe value at index 0 is apple.\nThe value associated with the key &quot;green&quot; is pear.\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Specialized.NameObjectCollectionBase.BaseGet#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\n\nPublic Class MyCollection\n   Inherits NameObjectCollectionBase\n\n   Private _de As New DictionaryEntry()\n\n   &#39; Gets a key-and-value pair (DictionaryEntry) using an index.\n   Default Public ReadOnly Property Item(index As Integer) As DictionaryEntry\n      Get\n         _de.Key = Me.BaseGetKey(index)\n         _de.Value = Me.BaseGet(index)\n         Return _de\n      End Get\n   End Property\n\n   &#39; Gets or sets the value associated with the specified key.\n   Default Public Property Item(key As [String]) As [Object]\n      Get\n         Return Me.BaseGet(key)\n      End Get\n      Set\n         Me.BaseSet(key, value)\n      End Set\n   End Property\n\n   &#39; Adds elements from an IDictionary into the new collection.\n   Public Sub New(d As IDictionary)\n      Dim de As DictionaryEntry\n      For Each de In  d\n         Me.BaseAdd(CType(de.Key, [String]), de.Value)\n      Next de\n   End Sub &#39;New\n\nEnd Class &#39;MyCollection\n\n\nPublic Class SamplesNameObjectCollectionBase   \n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new MyCollection instance.\n      Dim d = New ListDictionary()\n      d.Add(&quot;red&quot;, &quot;apple&quot;)\n      d.Add(&quot;yellow&quot;, &quot;banana&quot;)\n      d.Add(&quot;green&quot;, &quot;pear&quot;)\n      Dim myCol As New MyCollection(d)\n      Console.WriteLine(&quot;Initial state of the collection (Count = {0}):&quot;, myCol.Count)\n      PrintKeysAndValues(myCol)\n\n      &#39; Gets specific keys and values.\n      Console.WriteLine(&quot;The key at index 0 is {0}.&quot;, myCol(0).Key)\n      Console.WriteLine(&quot;The value at index 0 is {0}.&quot;, myCol(0).Value)\n      Console.WriteLine(&quot;The value associated with the key &quot;&quot;green&quot;&quot; is {0}.&quot;, myCol(&quot;green&quot;))\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintKeysAndValues(myCol As MyCollection)\n      Dim i As Integer\n      For i = 0 To myCol.Count - 1\n         Console.WriteLine(&quot;[{0}] : {1}, {2}&quot;, i, myCol(i).Key, myCol(i).Value)\n      Next i\n   End Sub &#39;PrintKeysAndValues\n\nEnd Class &#39;SamplesNameObjectCollectionBase \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Initial state of the collection (Count = 3):\n&#39;[0] : red, apple\n&#39;[1] : yellow, banana\n&#39;[2] : green, pear\n&#39;The key at index 0 is red.\n&#39;The value at index 0 is apple.\n&#39;The value associated with the key &quot;green&quot; is pear.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_NameObjectCollectionBase_BaseGetAllKeys\">\r\n    \r\n            <a id=\"System_Collections_Specialized_NameObjectCollectionBase_BaseGetAllKeys_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BaseGetAllKeys()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> array that contains all the keys in the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected string[] BaseGetAllKeys ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> array that contains all the keys in the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase#System_Collections_Specialized_NameObjectCollectionBase_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses BaseGetAllKeys and <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase#System_Collections_Specialized_NameObjectCollectionBase_BaseGetAllValues_\" data-linktype=\"relative-path\">BaseGetAllValues</a> to get an array of the keys or an array of the values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Specialized.NameObjectCollectionBase.BaseGetAll#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\n\npublic class MyCollection : NameObjectCollectionBase  {\n\n   private DictionaryEntry _de = new DictionaryEntry();\n\n   // Gets a key-and-value pair (DictionaryEntry) using an index.\n   public DictionaryEntry this[ int index ]  {\n      get  {\n         _de.Key = this.BaseGetKey( index );\n         _de.Value = this.BaseGet( index );\n         return( _de );\n      }\n   }\n\n   // Adds elements from an IDictionary into the new collection.\n   public MyCollection( IDictionary d )  {\n      foreach ( DictionaryEntry de in d )  {\n         this.BaseAdd( (String) de.Key, de.Value );\n      }\n   }\n\n   // Gets a String array that contains all the keys in the collection.\n   public String[] AllKeys  {\n      get  {\n         return( this.BaseGetAllKeys() );\n      }\n   }\n\n   // Gets an Object array that contains all the values in the collection.\n   public Array AllValues  {\n      get  {\n         return( this.BaseGetAllValues() );\n      }\n   }\n\n   // Gets a String array that contains all the values in the collection.\n   public String[] AllStringValues  {\n      get  {\n         return( (String[]) this.BaseGetAllValues( typeof(System.String) ) );\n      }\n   }\n\n}\n\npublic class SamplesNameObjectCollectionBase  {\n\n   public static void Main()  {\n\n      // Creates and initializes a new MyCollection instance.\n      IDictionary d = new ListDictionary();\n      d.Add( &quot;red&quot;, &quot;apple&quot; );\n      d.Add( &quot;yellow&quot;, &quot;banana&quot; );\n      d.Add( &quot;green&quot;, &quot;pear&quot; );\n      MyCollection myCol = new MyCollection( d );\n      Console.WriteLine( &quot;Initial state of the collection (Count = {0}):&quot;, myCol.Count );\n      PrintKeysAndValues( myCol );\n\n      // Displays the list of keys.\n      Console.WriteLine( &quot;The list of keys:&quot; );\n      foreach ( String s in myCol.AllKeys )  {\n         Console.WriteLine( &quot;   {0}&quot;, s );\n      }\n\n      // Displays the list of values of type Object.\n      Console.WriteLine( &quot;The list of values (Object):&quot; );\n      foreach ( Object o in myCol.AllValues )  {\n         Console.WriteLine( &quot;   {0}&quot;, o.ToString() );\n      }\n\n      // Displays the list of values of type String.\n      Console.WriteLine( &quot;The list of values (String):&quot; );\n      foreach ( String s in myCol.AllValues )  {\n         Console.WriteLine( &quot;   {0}&quot;, s );\n      }\n\n   }\n\n   public static void PrintKeysAndValues( MyCollection myCol )  {\n      for ( int i = 0; i &lt; myCol.Count; i++ )  {\n         Console.WriteLine( &quot;[{0}] : {1}, {2}&quot;, i, myCol[i].Key, myCol[i].Value );\n      }\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nInitial state of the collection (Count = 3):\n[0] : red, apple\n[1] : yellow, banana\n[2] : green, pear\nThe list of keys:\n   red\n   yellow\n   green\nThe list of values (Object):\n   apple\n   banana\n   pear\nThe list of values (String):\n   apple\n   banana\n   pear\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Collections.Specialized.NameObjectCollectionBase.BaseGetAll#1\">#using &lt;System.dll&gt;\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\n\npublic ref class MyCollection : public NameObjectCollectionBase  {\n\nprivate:\n   DictionaryEntry^ _de;\n\n   // Gets a key-and-value pair (DictionaryEntry) using an index.\npublic:\n   property DictionaryEntry^ default[ int ]  {\n      DictionaryEntry^ get(int index)  {\n         _de-&gt;Key = this-&gt;BaseGetKey( index );\n         _de-&gt;Value = this-&gt;BaseGet( index );\n         return( _de );\n      }\n   }\n\n   // Adds elements from an IDictionary into the new collection.\n   MyCollection( IDictionary^ d )  {\n\n      _de = gcnew DictionaryEntry();\n\n      for each ( DictionaryEntry^ de in d )  {\n         this-&gt;BaseAdd( (String^) de-&gt;Key, de-&gt;Value );\n      }\n   }\n\n   // Gets a String array that contains all the keys in the collection.\n   property array&lt;String^&gt;^ AllKeys {\n      array&lt;String^&gt;^ get()  {\n         return( this-&gt;BaseGetAllKeys() );\n      }\n   }\n\n   // Gets an Object array that contains all the values in the collection.\n   property Array^ AllValues  {\n      Array^ get()  {\n         return( this-&gt;BaseGetAllValues() );\n      }\n   }\n\n   // Gets a String array that contains all the values in the collection.\n   property array&lt;String^&gt;^ AllStringValues  {\n      array&lt;String^&gt;^ get()  {\n         return( (array&lt;String^&gt;^) this-&gt;BaseGetAllValues( System::String::typeid ) );\n      }\n   }\n};\n\npublic ref class SamplesNameObjectCollectionBase  {\n\npublic:\n   static void Main()  {\n\n      // Creates and initializes a new MyCollection instance.\n      IDictionary^ d = gcnew ListDictionary();\n      d-&gt;Add( &quot;red&quot;, &quot;apple&quot; );\n      d-&gt;Add( &quot;yellow&quot;, &quot;banana&quot; );\n      d-&gt;Add( &quot;green&quot;, &quot;pear&quot; );\n      MyCollection^ myCol = gcnew MyCollection( d );\n      Console::WriteLine( &quot;Initial state of the collection (Count = {0}):&quot;, myCol-&gt;Count );\n      PrintKeysAndValues( myCol );\n\n      // Displays the list of keys.\n      Console::WriteLine( &quot;The list of keys:&quot; );\n      for each ( String^ s in myCol-&gt;AllKeys )  {\n         Console::WriteLine( &quot;   {0}&quot;, s );\n      }\n\n      // Displays the list of values of type Object.\n      Console::WriteLine( &quot;The list of values (Object):&quot; );\n      for each ( Object^ o in myCol-&gt;AllValues )  {\n         Console::WriteLine( &quot;   {0}&quot;, o-&gt;ToString() );\n      }\n\n      // Displays the list of values of type String.\n      Console::WriteLine( &quot;The list of values (String):&quot; );\n      for each ( String^ s in myCol-&gt;AllValues )  {\n         Console::WriteLine( &quot;   {0}&quot;, s );\n      }\n   }\n\npublic:\n   static void PrintKeysAndValues( MyCollection^ myCol )  {\n      for ( int i = 0; i &lt; myCol-&gt;Count; i++ )  {\n         Console::WriteLine( &quot;[{0}] : {1}, {2}&quot;, i, myCol[i]-&gt;Key, myCol[i]-&gt;Value );\n      }\n   }\n};\n\nint main()\n{\n    SamplesNameObjectCollectionBase::Main();\n}\n\n/*\nThis code produces the following output.\n\nInitial state of the collection (Count = 3):\n[0] : red, apple\n[1] : yellow, banana\n[2] : green, pear\nThe list of keys:\n   red\n   yellow\n   green\nThe list of values (Object):\n   apple\n   banana\n   pear\nThe list of values (String):\n   apple\n   banana\n   pear\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Specialized.NameObjectCollectionBase.BaseGetAll#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\n\nPublic Class MyCollection\n   Inherits NameObjectCollectionBase\n\n   Private _de As New DictionaryEntry()\n\n   &#39; Gets a key-and-value pair (DictionaryEntry) using an index.\n   Default Public ReadOnly Property Item(index As Integer) As DictionaryEntry\n      Get\n         _de.Key = Me.BaseGetKey(index)\n         _de.Value = Me.BaseGet(index)\n         Return _de\n      End Get\n   End Property\n\n   &#39; Adds elements from an IDictionary into the new collection.\n   Public Sub New(d As IDictionary)\n      Dim de As DictionaryEntry\n      For Each de In  d\n         Me.BaseAdd(CType(de.Key, String), de.Value)\n      Next de\n   End Sub &#39;New\n\n   &#39; Gets a String array that contains all the keys in the collection.\n   Public ReadOnly Property AllKeys() As String()\n      Get\n         Return Me.BaseGetAllKeys()\n      End Get\n   End Property\n\n   &#39; Gets an Object array that contains all the values in the collection.\n   Public ReadOnly Property AllValues() As Array\n      Get\n         Return Me.BaseGetAllValues()\n      End Get\n   End Property\n\n   &#39; Gets a String array that contains all the values in the collection.\n   Public ReadOnly Property AllStringValues() As String()\n      Get\n         Return CType(Me.BaseGetAllValues(GetType(String)), String())\n      End Get\n   End Property\n\nEnd Class &#39;MyCollection\n\n\nPublic Class SamplesNameObjectCollectionBase   \n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new MyCollection instance.\n      Dim d As New ListDictionary()\n      d.Add(&quot;red&quot;, &quot;apple&quot;)\n      d.Add(&quot;yellow&quot;, &quot;banana&quot;)\n      d.Add(&quot;green&quot;, &quot;pear&quot;)\n      Dim myCol As New MyCollection(d)\n      Console.WriteLine(&quot;Initial state of the collection (Count = {0}):&quot;, myCol.Count)\n      PrintKeysAndValues(myCol)\n\n      &#39; Displays the list of keys.\n      Console.WriteLine(&quot;The list of keys:&quot;)\n      Dim s As String\n      For Each s In  myCol.AllKeys\n         Console.WriteLine(&quot;   {0}&quot;, s)\n      Next s\n\n      &#39; Displays the list of values of type Object.\n      Console.WriteLine(&quot;The list of values (Object):&quot;)\n      Dim o As Object\n      For Each o In  myCol.AllValues\n         Console.WriteLine(&quot;   {0}&quot;, o.ToString())\n      Next o\n\n      &#39; Displays the list of values of type String.\n      Console.WriteLine(&quot;The list of values (String):&quot;)\n      For Each s In  myCol.AllValues\n         Console.WriteLine(&quot;   {0}&quot;, s)\n      Next s\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintKeysAndValues(myCol As MyCollection)\n      Dim i As Integer\n      For i = 0 To myCol.Count - 1\n         Console.WriteLine(&quot;[{0}] : {1}, {2}&quot;, i, myCol(i).Key, myCol(i).Value)\n      Next i\n   End Sub &#39;PrintKeysAndValues\n\nEnd Class &#39;SamplesNameObjectCollectionBase \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Initial state of the collection (Count = 3):\n&#39;[0] : red, apple\n&#39;[1] : yellow, banana\n&#39;[2] : green, pear\n&#39;The list of keys:\n&#39;   red\n&#39;   yellow\n&#39;   green\n&#39;The list of values (Object):\n&#39;   apple\n&#39;   banana\n&#39;   pear\n&#39;The list of values (String):\n&#39;   apple\n&#39;   banana\n&#39;   pear\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_NameObjectCollectionBase_BaseGetAllValues\">\r\n    \r\n            <a id=\"System_Collections_Specialized_NameObjectCollectionBase_BaseGetAllValues_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BaseGetAllValues()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> array that contains all the values in the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected object[] BaseGetAllValues ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> array that contains all the values in the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase#System_Collections_Specialized_NameObjectCollectionBase_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase#System_Collections_Specialized_NameObjectCollectionBase_BaseGetAllKeys_\" data-linktype=\"relative-path\">BaseGetAllKeys</a> and BaseGetAllValues to get an array of the keys or an array of the values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Specialized.NameObjectCollectionBase.BaseGetAll#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\n\npublic class MyCollection : NameObjectCollectionBase  {\n\n   private DictionaryEntry _de = new DictionaryEntry();\n\n   // Gets a key-and-value pair (DictionaryEntry) using an index.\n   public DictionaryEntry this[ int index ]  {\n      get  {\n         _de.Key = this.BaseGetKey( index );\n         _de.Value = this.BaseGet( index );\n         return( _de );\n      }\n   }\n\n   // Adds elements from an IDictionary into the new collection.\n   public MyCollection( IDictionary d )  {\n      foreach ( DictionaryEntry de in d )  {\n         this.BaseAdd( (String) de.Key, de.Value );\n      }\n   }\n\n   // Gets a String array that contains all the keys in the collection.\n   public String[] AllKeys  {\n      get  {\n         return( this.BaseGetAllKeys() );\n      }\n   }\n\n   // Gets an Object array that contains all the values in the collection.\n   public Array AllValues  {\n      get  {\n         return( this.BaseGetAllValues() );\n      }\n   }\n\n   // Gets a String array that contains all the values in the collection.\n   public String[] AllStringValues  {\n      get  {\n         return( (String[]) this.BaseGetAllValues( typeof(System.String) ) );\n      }\n   }\n\n}\n\npublic class SamplesNameObjectCollectionBase  {\n\n   public static void Main()  {\n\n      // Creates and initializes a new MyCollection instance.\n      IDictionary d = new ListDictionary();\n      d.Add( &quot;red&quot;, &quot;apple&quot; );\n      d.Add( &quot;yellow&quot;, &quot;banana&quot; );\n      d.Add( &quot;green&quot;, &quot;pear&quot; );\n      MyCollection myCol = new MyCollection( d );\n      Console.WriteLine( &quot;Initial state of the collection (Count = {0}):&quot;, myCol.Count );\n      PrintKeysAndValues( myCol );\n\n      // Displays the list of keys.\n      Console.WriteLine( &quot;The list of keys:&quot; );\n      foreach ( String s in myCol.AllKeys )  {\n         Console.WriteLine( &quot;   {0}&quot;, s );\n      }\n\n      // Displays the list of values of type Object.\n      Console.WriteLine( &quot;The list of values (Object):&quot; );\n      foreach ( Object o in myCol.AllValues )  {\n         Console.WriteLine( &quot;   {0}&quot;, o.ToString() );\n      }\n\n      // Displays the list of values of type String.\n      Console.WriteLine( &quot;The list of values (String):&quot; );\n      foreach ( String s in myCol.AllValues )  {\n         Console.WriteLine( &quot;   {0}&quot;, s );\n      }\n\n   }\n\n   public static void PrintKeysAndValues( MyCollection myCol )  {\n      for ( int i = 0; i &lt; myCol.Count; i++ )  {\n         Console.WriteLine( &quot;[{0}] : {1}, {2}&quot;, i, myCol[i].Key, myCol[i].Value );\n      }\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nInitial state of the collection (Count = 3):\n[0] : red, apple\n[1] : yellow, banana\n[2] : green, pear\nThe list of keys:\n   red\n   yellow\n   green\nThe list of values (Object):\n   apple\n   banana\n   pear\nThe list of values (String):\n   apple\n   banana\n   pear\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Collections.Specialized.NameObjectCollectionBase.BaseGetAll#1\">#using &lt;System.dll&gt;\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\n\npublic ref class MyCollection : public NameObjectCollectionBase  {\n\nprivate:\n   DictionaryEntry^ _de;\n\n   // Gets a key-and-value pair (DictionaryEntry) using an index.\npublic:\n   property DictionaryEntry^ default[ int ]  {\n      DictionaryEntry^ get(int index)  {\n         _de-&gt;Key = this-&gt;BaseGetKey( index );\n         _de-&gt;Value = this-&gt;BaseGet( index );\n         return( _de );\n      }\n   }\n\n   // Adds elements from an IDictionary into the new collection.\n   MyCollection( IDictionary^ d )  {\n\n      _de = gcnew DictionaryEntry();\n\n      for each ( DictionaryEntry^ de in d )  {\n         this-&gt;BaseAdd( (String^) de-&gt;Key, de-&gt;Value );\n      }\n   }\n\n   // Gets a String array that contains all the keys in the collection.\n   property array&lt;String^&gt;^ AllKeys {\n      array&lt;String^&gt;^ get()  {\n         return( this-&gt;BaseGetAllKeys() );\n      }\n   }\n\n   // Gets an Object array that contains all the values in the collection.\n   property Array^ AllValues  {\n      Array^ get()  {\n         return( this-&gt;BaseGetAllValues() );\n      }\n   }\n\n   // Gets a String array that contains all the values in the collection.\n   property array&lt;String^&gt;^ AllStringValues  {\n      array&lt;String^&gt;^ get()  {\n         return( (array&lt;String^&gt;^) this-&gt;BaseGetAllValues( System::String::typeid ) );\n      }\n   }\n};\n\npublic ref class SamplesNameObjectCollectionBase  {\n\npublic:\n   static void Main()  {\n\n      // Creates and initializes a new MyCollection instance.\n      IDictionary^ d = gcnew ListDictionary();\n      d-&gt;Add( &quot;red&quot;, &quot;apple&quot; );\n      d-&gt;Add( &quot;yellow&quot;, &quot;banana&quot; );\n      d-&gt;Add( &quot;green&quot;, &quot;pear&quot; );\n      MyCollection^ myCol = gcnew MyCollection( d );\n      Console::WriteLine( &quot;Initial state of the collection (Count = {0}):&quot;, myCol-&gt;Count );\n      PrintKeysAndValues( myCol );\n\n      // Displays the list of keys.\n      Console::WriteLine( &quot;The list of keys:&quot; );\n      for each ( String^ s in myCol-&gt;AllKeys )  {\n         Console::WriteLine( &quot;   {0}&quot;, s );\n      }\n\n      // Displays the list of values of type Object.\n      Console::WriteLine( &quot;The list of values (Object):&quot; );\n      for each ( Object^ o in myCol-&gt;AllValues )  {\n         Console::WriteLine( &quot;   {0}&quot;, o-&gt;ToString() );\n      }\n\n      // Displays the list of values of type String.\n      Console::WriteLine( &quot;The list of values (String):&quot; );\n      for each ( String^ s in myCol-&gt;AllValues )  {\n         Console::WriteLine( &quot;   {0}&quot;, s );\n      }\n   }\n\npublic:\n   static void PrintKeysAndValues( MyCollection^ myCol )  {\n      for ( int i = 0; i &lt; myCol-&gt;Count; i++ )  {\n         Console::WriteLine( &quot;[{0}] : {1}, {2}&quot;, i, myCol[i]-&gt;Key, myCol[i]-&gt;Value );\n      }\n   }\n};\n\nint main()\n{\n    SamplesNameObjectCollectionBase::Main();\n}\n\n/*\nThis code produces the following output.\n\nInitial state of the collection (Count = 3):\n[0] : red, apple\n[1] : yellow, banana\n[2] : green, pear\nThe list of keys:\n   red\n   yellow\n   green\nThe list of values (Object):\n   apple\n   banana\n   pear\nThe list of values (String):\n   apple\n   banana\n   pear\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Specialized.NameObjectCollectionBase.BaseGetAll#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\n\nPublic Class MyCollection\n   Inherits NameObjectCollectionBase\n\n   Private _de As New DictionaryEntry()\n\n   &#39; Gets a key-and-value pair (DictionaryEntry) using an index.\n   Default Public ReadOnly Property Item(index As Integer) As DictionaryEntry\n      Get\n         _de.Key = Me.BaseGetKey(index)\n         _de.Value = Me.BaseGet(index)\n         Return _de\n      End Get\n   End Property\n\n   &#39; Adds elements from an IDictionary into the new collection.\n   Public Sub New(d As IDictionary)\n      Dim de As DictionaryEntry\n      For Each de In  d\n         Me.BaseAdd(CType(de.Key, String), de.Value)\n      Next de\n   End Sub &#39;New\n\n   &#39; Gets a String array that contains all the keys in the collection.\n   Public ReadOnly Property AllKeys() As String()\n      Get\n         Return Me.BaseGetAllKeys()\n      End Get\n   End Property\n\n   &#39; Gets an Object array that contains all the values in the collection.\n   Public ReadOnly Property AllValues() As Array\n      Get\n         Return Me.BaseGetAllValues()\n      End Get\n   End Property\n\n   &#39; Gets a String array that contains all the values in the collection.\n   Public ReadOnly Property AllStringValues() As String()\n      Get\n         Return CType(Me.BaseGetAllValues(GetType(String)), String())\n      End Get\n   End Property\n\nEnd Class &#39;MyCollection\n\n\nPublic Class SamplesNameObjectCollectionBase   \n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new MyCollection instance.\n      Dim d As New ListDictionary()\n      d.Add(&quot;red&quot;, &quot;apple&quot;)\n      d.Add(&quot;yellow&quot;, &quot;banana&quot;)\n      d.Add(&quot;green&quot;, &quot;pear&quot;)\n      Dim myCol As New MyCollection(d)\n      Console.WriteLine(&quot;Initial state of the collection (Count = {0}):&quot;, myCol.Count)\n      PrintKeysAndValues(myCol)\n\n      &#39; Displays the list of keys.\n      Console.WriteLine(&quot;The list of keys:&quot;)\n      Dim s As String\n      For Each s In  myCol.AllKeys\n         Console.WriteLine(&quot;   {0}&quot;, s)\n      Next s\n\n      &#39; Displays the list of values of type Object.\n      Console.WriteLine(&quot;The list of values (Object):&quot;)\n      Dim o As Object\n      For Each o In  myCol.AllValues\n         Console.WriteLine(&quot;   {0}&quot;, o.ToString())\n      Next o\n\n      &#39; Displays the list of values of type String.\n      Console.WriteLine(&quot;The list of values (String):&quot;)\n      For Each s In  myCol.AllValues\n         Console.WriteLine(&quot;   {0}&quot;, s)\n      Next s\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintKeysAndValues(myCol As MyCollection)\n      Dim i As Integer\n      For i = 0 To myCol.Count - 1\n         Console.WriteLine(&quot;[{0}] : {1}, {2}&quot;, i, myCol(i).Key, myCol(i).Value)\n      Next i\n   End Sub &#39;PrintKeysAndValues\n\nEnd Class &#39;SamplesNameObjectCollectionBase \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Initial state of the collection (Count = 3):\n&#39;[0] : red, apple\n&#39;[1] : yellow, banana\n&#39;[2] : green, pear\n&#39;The list of keys:\n&#39;   red\n&#39;   yellow\n&#39;   green\n&#39;The list of values (Object):\n&#39;   apple\n&#39;   banana\n&#39;   pear\n&#39;The list of values (String):\n&#39;   apple\n&#39;   banana\n&#39;   pear\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_NameObjectCollectionBase_BaseGetAllValues_System_Type_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_NameObjectCollectionBase_BaseGetAllValues_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BaseGetAllValues(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an array of the specified type that contains all the values in the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected object[] BaseGetAllValues (Type type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> that represents the type of array to return.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </div>\r\n                  <p>An array of the specified type that contains all the values in the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> is not a valid <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase#System_Collections_Specialized_NameObjectCollectionBase_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_NameObjectCollectionBase_BaseGetKey_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_NameObjectCollectionBase_BaseGetKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BaseGetKey(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the key of the entry at the specified index of the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected string BaseGetKey (int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the key to get.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that represents the key of the entry at the specified index.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is outside the valid range of indexes for the collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses BaseGetKey and <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase#System_Collections_Specialized_NameObjectCollectionBase_BaseGet_\" data-linktype=\"relative-path\">BaseGet</a> to get specific keys and values.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.Specialized.NameObjectCollectionBase.BaseGet#1\">#using &lt;System.dll&gt;\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\n\npublic ref class MyCollection : public NameObjectCollectionBase  {\n\nprivate:\n   DictionaryEntry^ _de;\n\n   // Gets a key-and-value pair (DictionaryEntry) using an index.\npublic:\n   property DictionaryEntry^ default[ int ]  {\n      DictionaryEntry^ get( int index )  {\n         _de-&gt;Key = this-&gt;BaseGetKey( index );\n         _de-&gt;Value = this-&gt;BaseGet( index );\n         return( _de );\n      }\n   }\n\n   // Gets or sets the value associated with the specified key.\n   property Object^ default[ String^ ]  {\n      Object^ get(String^ key)  {\n         return( this-&gt;BaseGet( key ) );\n      }\n      void set( String^ key, Object^ value )  {\n         this-&gt;BaseSet( key, value );\n      }\n   }\n\n   // Adds elements from an IDictionary into the new collection.\n   MyCollection( IDictionary^ d )  {\n\n      _de = gcnew DictionaryEntry();\n\n      for each ( DictionaryEntry^ de in d )  {\n         this-&gt;BaseAdd( (String^) de-&gt;Key, de-&gt;Value );\n      }\n   }\n};\n\npublic ref class SamplesNameObjectCollectionBase  {\n\npublic:\n   static void Main()  {\n\n      // Creates and initializes a new MyCollection instance.\n      IDictionary^ d = gcnew ListDictionary();\n      d-&gt;Add( &quot;red&quot;, &quot;apple&quot; );\n      d-&gt;Add( &quot;yellow&quot;, &quot;banana&quot; );\n      d-&gt;Add( &quot;green&quot;, &quot;pear&quot; );\n      MyCollection^ myCol = gcnew MyCollection( d );\n      Console::WriteLine( &quot;Initial state of the collection (Count = {0}):&quot;, myCol-&gt;Count );\n      PrintKeysAndValues( myCol );\n\n      // Gets specific keys and values.\n      Console::WriteLine( &quot;The key at index 0 is {0}.&quot;, myCol[0]-&gt;Key );\n      Console::WriteLine( &quot;The value at index 0 is {0}.&quot;, myCol[0]-&gt;Value );\n      Console::WriteLine( &quot;The value associated with the key \\&quot;green\\&quot; is {0}.&quot;, myCol[&quot;green&quot;] );\n\n   }\n\n   static void PrintKeysAndValues( MyCollection^ myCol )  {\n      for ( int i = 0; i &lt; myCol-&gt;Count; i++ )  {\n         Console::WriteLine( &quot;[{0}] : {1}, {2}&quot;, i, myCol[i]-&gt;Key, myCol[i]-&gt;Value );\n      }\n   }\n};\n\nint main()\n{\n    SamplesNameObjectCollectionBase::Main();\n}\n\n/*\nThis code produces the following output.\n\nInitial state of the collection (Count = 3):\n[0] : red, apple\n[1] : yellow, banana\n[2] : green, pear\nThe key at index 0 is red.\nThe value at index 0 is apple.\nThe value associated with the key &quot;green&quot; is pear.\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Specialized.NameObjectCollectionBase.BaseGet#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\n\npublic class MyCollection : NameObjectCollectionBase  {\n\n   private DictionaryEntry _de = new DictionaryEntry();\n\n   // Gets a key-and-value pair (DictionaryEntry) using an index.\n   public DictionaryEntry this[ int index ]  {\n      get  {\n         _de.Key = this.BaseGetKey( index );\n         _de.Value = this.BaseGet( index );\n         return( _de );\n      }\n   }\n\n   // Gets or sets the value associated with the specified key.\n   public Object this[ String key ]  {\n      get  {\n         return( this.BaseGet( key ) );\n      }\n      set  {\n         this.BaseSet( key, value );\n      }\n   }\n\n   // Adds elements from an IDictionary into the new collection.\n   public MyCollection( IDictionary d )  {\n      foreach ( DictionaryEntry de in d )  {\n         this.BaseAdd( (String) de.Key, de.Value );\n      }\n   }\n\n}\n\npublic class SamplesNameObjectCollectionBase  {\n\n   public static void Main()  {\n\n      // Creates and initializes a new MyCollection instance.\n      IDictionary d = new ListDictionary();\n      d.Add( &quot;red&quot;, &quot;apple&quot; );\n      d.Add( &quot;yellow&quot;, &quot;banana&quot; );\n      d.Add( &quot;green&quot;, &quot;pear&quot; );\n      MyCollection myCol = new MyCollection( d );\n      Console.WriteLine( &quot;Initial state of the collection (Count = {0}):&quot;, myCol.Count );\n      PrintKeysAndValues( myCol );\n\n      // Gets specific keys and values.\n      Console.WriteLine( &quot;The key at index 0 is {0}.&quot;, myCol[0].Key );\n      Console.WriteLine( &quot;The value at index 0 is {0}.&quot;, myCol[0].Value );\n      Console.WriteLine( &quot;The value associated with the key \\&quot;green\\&quot; is {0}.&quot;, myCol[&quot;green&quot;] );\n\n   }\n\n   public static void PrintKeysAndValues( MyCollection myCol )  {\n      for ( int i = 0; i &lt; myCol.Count; i++ )  {\n         Console.WriteLine( &quot;[{0}] : {1}, {2}&quot;, i, myCol[i].Key, myCol[i].Value );\n      }\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nInitial state of the collection (Count = 3):\n[0] : red, apple\n[1] : yellow, banana\n[2] : green, pear\nThe key at index 0 is red.\nThe value at index 0 is apple.\nThe value associated with the key &quot;green&quot; is pear.\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Specialized.NameObjectCollectionBase.BaseGet#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\n\nPublic Class MyCollection\n   Inherits NameObjectCollectionBase\n\n   Private _de As New DictionaryEntry()\n\n   &#39; Gets a key-and-value pair (DictionaryEntry) using an index.\n   Default Public ReadOnly Property Item(index As Integer) As DictionaryEntry\n      Get\n         _de.Key = Me.BaseGetKey(index)\n         _de.Value = Me.BaseGet(index)\n         Return _de\n      End Get\n   End Property\n\n   &#39; Gets or sets the value associated with the specified key.\n   Default Public Property Item(key As [String]) As [Object]\n      Get\n         Return Me.BaseGet(key)\n      End Get\n      Set\n         Me.BaseSet(key, value)\n      End Set\n   End Property\n\n   &#39; Adds elements from an IDictionary into the new collection.\n   Public Sub New(d As IDictionary)\n      Dim de As DictionaryEntry\n      For Each de In  d\n         Me.BaseAdd(CType(de.Key, [String]), de.Value)\n      Next de\n   End Sub &#39;New\n\nEnd Class &#39;MyCollection\n\n\nPublic Class SamplesNameObjectCollectionBase   \n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new MyCollection instance.\n      Dim d = New ListDictionary()\n      d.Add(&quot;red&quot;, &quot;apple&quot;)\n      d.Add(&quot;yellow&quot;, &quot;banana&quot;)\n      d.Add(&quot;green&quot;, &quot;pear&quot;)\n      Dim myCol As New MyCollection(d)\n      Console.WriteLine(&quot;Initial state of the collection (Count = {0}):&quot;, myCol.Count)\n      PrintKeysAndValues(myCol)\n\n      &#39; Gets specific keys and values.\n      Console.WriteLine(&quot;The key at index 0 is {0}.&quot;, myCol(0).Key)\n      Console.WriteLine(&quot;The value at index 0 is {0}.&quot;, myCol(0).Value)\n      Console.WriteLine(&quot;The value associated with the key &quot;&quot;green&quot;&quot; is {0}.&quot;, myCol(&quot;green&quot;))\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintKeysAndValues(myCol As MyCollection)\n      Dim i As Integer\n      For i = 0 To myCol.Count - 1\n         Console.WriteLine(&quot;[{0}] : {1}, {2}&quot;, i, myCol(i).Key, myCol(i).Value)\n      Next i\n   End Sub &#39;PrintKeysAndValues\n\nEnd Class &#39;SamplesNameObjectCollectionBase \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Initial state of the collection (Count = 3):\n&#39;[0] : red, apple\n&#39;[1] : yellow, banana\n&#39;[2] : green, pear\n&#39;The key at index 0 is red.\n&#39;The value at index 0 is apple.\n&#39;The value associated with the key &quot;green&quot; is pear.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_NameObjectCollectionBase_BaseHasKeys\">\r\n    \r\n            <a id=\"System_Collections_Specialized_NameObjectCollectionBase_BaseHasKeys_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BaseHasKeys()</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance contains entries whose keys are not <code>null</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected bool BaseHasKeys ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance contains entries whose keys are not <code>null</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses BaseHasKeys to determine if the collection contains keys that are not <code>null</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys#1\">#using &lt;System.dll&gt;\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\n\npublic ref class MyCollection : public NameObjectCollectionBase  {\n\nprivate:\n   DictionaryEntry^ _de;\n\n   // Gets a key-and-value pair (DictionaryEntry) using an index.\npublic:\n   property DictionaryEntry^ default[ int ]  {\n      DictionaryEntry^ get(int index)  {\n         _de-&gt;Key = this-&gt;BaseGetKey( index );\n         _de-&gt;Value = this-&gt;BaseGet( index );\n         return( _de );\n      }\n   }\n\n   // Creates an empty collection.\n   MyCollection()  {\n      _de = gcnew DictionaryEntry();\n   }\n\n   // Adds an entry to the collection.\n   void Add( String^ key, Object^ value )  {\n      this-&gt;BaseAdd( key, value );\n   }\n\n   // Gets a value indicating whether the collection contains keys that are not a null reference.\n   property Boolean HasKeys  {\n      Boolean get()  {\n         return( this-&gt;BaseHasKeys() );\n      }\n   }\n};\n\nvoid PrintKeysAndValues( MyCollection^ myCol )  {\n   for ( int i = 0; i &lt; myCol-&gt;Count; i++ )  {\n      Console::WriteLine( &quot;[{0}] : {1}, {2}&quot;, i, myCol[i]-&gt;Key, myCol[i]-&gt;Value );\n   }\n}\n\nint main()  {\n\n   // Creates an empty MyCollection instance.\n   MyCollection^ myCol = gcnew MyCollection();\n   Console::WriteLine( &quot;Initial state of the collection (Count = {0}):&quot;, myCol-&gt;Count );\n   PrintKeysAndValues( myCol );\n   Console::WriteLine( &quot;HasKeys? {0}&quot;, myCol-&gt;HasKeys );\n\n   Console::WriteLine();\n\n   // Adds an item to the collection.\n   myCol-&gt;Add( &quot;blue&quot;, &quot;sky&quot; );\n   Console::WriteLine( &quot;Initial state of the collection (Count = {0}):&quot;, myCol-&gt;Count );\n   PrintKeysAndValues( myCol );\n   Console::WriteLine( &quot;HasKeys? {0}&quot;, myCol-&gt;HasKeys );\n\n}\n\n/*\nThis code produces the following output.\n\nInitial state of the collection (Count = 0):\nHasKeys? False\n\nInitial state of the collection (Count = 1):\n[0] : blue, sky\nHasKeys? True\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\n\nPublic Class MyCollection\n   Inherits NameObjectCollectionBase\n\n   Private _de As New DictionaryEntry()\n\n   &#39; Gets a key-and-value pair (DictionaryEntry) using an index.\n   Default Public ReadOnly Property Item(index As Integer) As DictionaryEntry\n      Get\n         _de.Key = Me.BaseGetKey(index)\n         _de.Value = Me.BaseGet(index)\n         Return _de\n      End Get\n   End Property\n\n   &#39; Creates an empty collection.\n   Public Sub New()\n   End Sub &#39;New\n\n   &#39; Adds an entry to the collection.\n   Public Sub Add(key As [String], value As [Object])\n      Me.BaseAdd(key, value)\n   End Sub &#39;Add\n\n   &#39; Gets a value indicating whether the collection contains keys that are not a null reference.\n   Public ReadOnly Property HasKeys() As [Boolean]\n      Get\n         Return Me.BaseHasKeys()\n      End Get\n   End Property\n\nEnd Class &#39;MyCollection\n\n\nPublic Class SamplesNameObjectCollectionBase   \n\n   Public Shared Sub Main()\n\n      &#39; Creates an empty MyCollection instance.\n      Dim myCol As New MyCollection()\n      Console.WriteLine(&quot;Initial state of the collection (Count = {0}):&quot;, myCol.Count)\n      PrintKeysAndValues(myCol)\n      Console.WriteLine(&quot;HasKeys? {0}&quot;, myCol.HasKeys)\n\n      Console.WriteLine()\n\n      &#39; Adds an item to the collection.\n      myCol.Add(&quot;blue&quot;, &quot;sky&quot;)\n      Console.WriteLine(&quot;Initial state of the collection (Count = {0}):&quot;, myCol.Count)\n      PrintKeysAndValues(myCol)\n      Console.WriteLine(&quot;HasKeys? {0}&quot;, myCol.HasKeys)\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintKeysAndValues(myCol As MyCollection)\n      Dim i As Integer\n      For i = 0 To myCol.Count - 1\n         Console.WriteLine(&quot;[{0}] : {1}, {2}&quot;, i, myCol(i).Key, myCol(i).Value)\n      Next i\n   End Sub &#39;PrintKeysAndValues\n\nEnd Class &#39;SamplesNameObjectCollectionBase \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Initial state of the collection (Count = 0):\n&#39;HasKeys? False\n&#39;\n&#39;Initial state of the collection (Count = 1):\n&#39;[0] : blue, sky\n&#39;HasKeys? True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\n\npublic class MyCollection : NameObjectCollectionBase  {\n\n   private DictionaryEntry _de = new DictionaryEntry();\n\n   // Gets a key-and-value pair (DictionaryEntry) using an index.\n   public DictionaryEntry this[ int index ]  {\n      get  {\n         _de.Key = this.BaseGetKey( index );\n         _de.Value = this.BaseGet( index );\n         return( _de );\n      }\n   }\n\n   // Creates an empty collection.\n   public MyCollection()  {\n   }\n\n   // Adds an entry to the collection.\n   public void Add( String key, Object value )  {\n      this.BaseAdd( key, value );\n   }\n\n   // Gets a value indicating whether the collection contains keys that are not a null reference.\n   public Boolean HasKeys  {\n      get  {\n         return( this.BaseHasKeys() );\n      }\n   }\n\n}\n\npublic class SamplesNameObjectCollectionBase  {\n\n   public static void Main()  {\n\n      // Creates an empty MyCollection instance.\n      MyCollection myCol = new MyCollection();\n      Console.WriteLine( &quot;Initial state of the collection (Count = {0}):&quot;, myCol.Count );\n      PrintKeysAndValues( myCol );\n      Console.WriteLine( &quot;HasKeys? {0}&quot;, myCol.HasKeys );\n\n      Console.WriteLine();\n\n      // Adds an item to the collection.\n      myCol.Add( &quot;blue&quot;, &quot;sky&quot; );\n      Console.WriteLine( &quot;Initial state of the collection (Count = {0}):&quot;, myCol.Count );\n      PrintKeysAndValues( myCol );\n      Console.WriteLine( &quot;HasKeys? {0}&quot;, myCol.HasKeys );\n\n   }\n\n   public static void PrintKeysAndValues( MyCollection myCol )  {\n      for ( int i = 0; i &lt; myCol.Count; i++ )  {\n         Console.WriteLine( &quot;[{0}] : {1}, {2}&quot;, i, myCol[i].Key, myCol[i].Value );\n      }\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nInitial state of the collection (Count = 0):\nHasKeys? False\n\nInitial state of the collection (Count = 1):\n[0] : blue, sky\nHasKeys? True\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_NameObjectCollectionBase_BaseRemove_System_String_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_NameObjectCollectionBase_BaseRemove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BaseRemove(String)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the entries with the specified key from the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void BaseRemove (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> key of the entries to remove. The key can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The collection is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> does not contain an element with the specified key, the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> remains unchanged. No exception is thrown.  </p>\n<p> In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase#System_Collections_Specialized_NameObjectCollectionBase_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses BaseRemove and <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase#System_Collections_Specialized_NameObjectCollectionBase_BaseRemoveAt_\" data-linktype=\"relative-path\">BaseRemoveAt</a> to remove elements from a <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Specialized.NameObjectCollectionBase.BaseRemove#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\n\npublic class MyCollection : NameObjectCollectionBase  {\n\n   private DictionaryEntry _de = new DictionaryEntry();\n\n   // Gets a key-and-value pair (DictionaryEntry) using an index.\n   public DictionaryEntry this[ int index ]  {\n      get  {\n         _de.Key = this.BaseGetKey( index );\n         _de.Value = this.BaseGet( index );\n         return( _de );\n      }\n   }\n\n   // Adds elements from an IDictionary into the new collection.\n   public MyCollection( IDictionary d )  {\n      foreach ( DictionaryEntry de in d )  {\n         this.BaseAdd( (String) de.Key, de.Value );\n      }\n   }\n\n   // Removes an entry with the specified key from the collection.\n   public void Remove( String key )  {\n      this.BaseRemove( key );\n   }\n\n   // Removes an entry in the specified index from the collection.\n   public void Remove( int index )  {\n      this.BaseRemoveAt( index );\n   }\n\n}\n\npublic class SamplesNameObjectCollectionBase  {\n\n   public static void Main()  {\n\n      // Creates and initializes a new MyCollection instance.\n      IDictionary d = new ListDictionary();\n      d.Add( &quot;red&quot;, &quot;apple&quot; );\n      d.Add( &quot;yellow&quot;, &quot;banana&quot; );\n      d.Add( &quot;green&quot;, &quot;pear&quot; );\n      MyCollection myCol = new MyCollection( d );\n      Console.WriteLine( &quot;Initial state of the collection (Count = {0}):&quot;, myCol.Count );\n      PrintKeysAndValues( myCol );\n\n      // Removes an element at a specific index.\n      myCol.Remove( 1 );\n      Console.WriteLine( &quot;After removing the element at index 1 (Count = {0}):&quot;, myCol.Count );\n      PrintKeysAndValues( myCol );\n\n      // Removes an element with a specific key.\n      myCol.Remove( &quot;red&quot; );\n      Console.WriteLine( &quot;After removing the element with the key \\&quot;red\\&quot; (Count = {0}):&quot;, myCol.Count );\n      PrintKeysAndValues( myCol );\n\n   }\n\n   public static void PrintKeysAndValues( MyCollection myCol )  {\n      for ( int i = 0; i &lt; myCol.Count; i++ )  {\n         Console.WriteLine( &quot;[{0}] : {1}, {2}&quot;, i, myCol[i].Key, myCol[i].Value );\n      }\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nInitial state of the collection (Count = 3):\n[0] : red, apple\n[1] : yellow, banana\n[2] : green, pear\nAfter removing the element at index 1 (Count = 2):\n[0] : red, apple\n[1] : green, pear\nAfter removing the element with the key &quot;red&quot; (Count = 1):\n[0] : green, pear\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Collections.Specialized.NameObjectCollectionBase.BaseRemove#1\">#using &lt;System.dll&gt;\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\n\npublic ref class MyCollection : public NameObjectCollectionBase  {\n\nprivate:\n   DictionaryEntry^ _de;\n\n   // Gets a key-and-value pair (DictionaryEntry) using an index.\npublic:\n   property DictionaryEntry^ default[ int ]  {\n      DictionaryEntry^ get(int index)  {\n         _de-&gt;Key = this-&gt;BaseGetKey( index );\n         _de-&gt;Value = this-&gt;BaseGet( index );\n         return( _de );\n      }\n   }\n\n   // Adds elements from an IDictionary into the new collection.\n   MyCollection( IDictionary^ d )  {\n\n      _de = gcnew DictionaryEntry();\n\n      for each ( DictionaryEntry^ de in d )  {\n         this-&gt;BaseAdd( (String^) de-&gt;Key, de-&gt;Value );\n      }\n   }\n\n   // Removes an entry with the specified key from the collection.\n   void Remove( String^ key )  {\n      this-&gt;BaseRemove( key );\n   }\n\n   // Removes an entry in the specified index from the collection.\n   void Remove( int index )  {\n      this-&gt;BaseRemoveAt( index );\n   }\n};\n\npublic ref class SamplesNameObjectCollectionBase  {\n\npublic:\n   static void Main()  {\n\n      // Creates and initializes a new MyCollection instance.\n      IDictionary^ d = gcnew ListDictionary();\n      d-&gt;Add( &quot;red&quot;, &quot;apple&quot; );\n      d-&gt;Add( &quot;yellow&quot;, &quot;banana&quot; );\n      d-&gt;Add( &quot;green&quot;, &quot;pear&quot; );\n      MyCollection^ myCol = gcnew MyCollection( d );\n      Console::WriteLine( &quot;Initial state of the collection (Count = {0}):&quot;, myCol-&gt;Count );\n      PrintKeysAndValues( myCol );\n\n      // Removes an element at a specific index.\n      myCol-&gt;Remove( 1 );\n      Console::WriteLine( &quot;After removing the element at index 1 (Count = {0}):&quot;, myCol-&gt;Count );\n      PrintKeysAndValues( myCol );\n\n      // Removes an element with a specific key.\n      myCol-&gt;Remove( &quot;red&quot; );\n      Console::WriteLine( &quot;After removing the element with the key \\&quot;red\\&quot; (Count = {0}):&quot;, myCol-&gt;Count );\n      PrintKeysAndValues( myCol );\n\n   }\n\n   static void PrintKeysAndValues( MyCollection^ myCol )  {\n      for ( int i = 0; i &lt; myCol-&gt;Count; i++ )  {\n         Console::WriteLine( &quot;[{0}] : {1}, {2}&quot;, i, myCol[i]-&gt;Key, myCol[i]-&gt;Value );\n      }\n   }\n};\n\nint main()\n{\n    SamplesNameObjectCollectionBase::Main();\n}\n\n/*\nThis code produces the following output.\n\nInitial state of the collection (Count = 3):\n[0] : red, apple\n[1] : yellow, banana\n[2] : green, pear\nAfter removing the element at index 1 (Count = 2):\n[0] : red, apple\n[1] : green, pear\nAfter removing the element with the key &quot;red&quot; (Count = 1):\n[0] : green, pear\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Specialized.NameObjectCollectionBase.BaseRemove#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\n\nPublic Class MyCollection\n   Inherits NameObjectCollectionBase\n\n   Private _de As New DictionaryEntry()\n\n   &#39; Gets a key-and-value pair (DictionaryEntry) using an index.\n   Default Public ReadOnly Property Item(index As Integer) As DictionaryEntry\n      Get\n         _de.Key = Me.BaseGetKey(index)\n         _de.Value = Me.BaseGet(index)\n         Return _de\n      End Get\n   End Property\n\n   &#39; Adds elements from an IDictionary into the new collection.\n   Public Sub New(d As IDictionary)\n      Dim de As DictionaryEntry\n      For Each de In  d\n         Me.BaseAdd(CType(de.Key, [String]), de.Value)\n      Next de\n   End Sub &#39;New\n\n   &#39; Removes an entry with the specified key from the collection.\n   Overloads Public Sub Remove(key As [String])\n      Me.BaseRemove(key)\n   End Sub &#39;Remove\n\n   &#39; Removes an entry in the specified index from the collection.\n   Overloads Public Sub Remove(index As Integer)\n      Me.BaseRemoveAt(index)\n   End Sub &#39;Remove\n\nEnd Class &#39;MyCollection\n\n\nPublic Class SamplesNameObjectCollectionBase   \n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new MyCollection instance.\n      Dim d = New ListDictionary()\n      d.Add(&quot;red&quot;, &quot;apple&quot;)\n      d.Add(&quot;yellow&quot;, &quot;banana&quot;)\n      d.Add(&quot;green&quot;, &quot;pear&quot;)\n      Dim myCol As New MyCollection(d)\n      Console.WriteLine(&quot;Initial state of the collection (Count = {0}):&quot;, myCol.Count)\n      PrintKeysAndValues(myCol)\n\n      &#39; Removes an element at a specific index.\n      myCol.Remove(1)\n      Console.WriteLine(&quot;After removing the element at index 1 (Count = {0}):&quot;, myCol.Count)\n      PrintKeysAndValues(myCol)\n\n      &#39; Removes an element with a specific key.\n      myCol.Remove(&quot;red&quot;)\n      Console.WriteLine(&quot;After removing the element with the key &quot;&quot;red&quot;&quot; (Count = {0}):&quot;, myCol.Count)\n      PrintKeysAndValues(myCol)\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintKeysAndValues(myCol As MyCollection)\n      Dim i As Integer\n      For i = 0 To myCol.Count - 1\n         Console.WriteLine(&quot;[{0}] : {1}, {2}&quot;, i, myCol(i).Key, myCol(i).Value)\n      Next i\n   End Sub &#39;PrintKeysAndValues\n\nEnd Class &#39;SamplesNameObjectCollectionBase \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Initial state of the collection (Count = 3):\n&#39;[0] : red, apple\n&#39;[1] : yellow, banana\n&#39;[2] : green, pear\n&#39;After removing the element at index 1 (Count = 2):\n&#39;[0] : red, apple\n&#39;[1] : green, pear\n&#39;After removing the element with the key &quot;red&quot; (Count = 1):\n&#39;[0] : green, pear\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_NameObjectCollectionBase_BaseRemoveAt_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_NameObjectCollectionBase_BaseRemoveAt_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BaseRemoveAt(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the entry at the specified index of the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void BaseRemoveAt (int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the entry to remove.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is outside the valid range of indexes for the collection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The collection is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase#System_Collections_Specialized_NameObjectCollectionBase_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase#System_Collections_Specialized_NameObjectCollectionBase_BaseRemove_\" data-linktype=\"relative-path\">BaseRemove</a> and BaseRemoveAt to remove elements from a <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Specialized.NameObjectCollectionBase.BaseRemove#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\n\npublic class MyCollection : NameObjectCollectionBase  {\n\n   private DictionaryEntry _de = new DictionaryEntry();\n\n   // Gets a key-and-value pair (DictionaryEntry) using an index.\n   public DictionaryEntry this[ int index ]  {\n      get  {\n         _de.Key = this.BaseGetKey( index );\n         _de.Value = this.BaseGet( index );\n         return( _de );\n      }\n   }\n\n   // Adds elements from an IDictionary into the new collection.\n   public MyCollection( IDictionary d )  {\n      foreach ( DictionaryEntry de in d )  {\n         this.BaseAdd( (String) de.Key, de.Value );\n      }\n   }\n\n   // Removes an entry with the specified key from the collection.\n   public void Remove( String key )  {\n      this.BaseRemove( key );\n   }\n\n   // Removes an entry in the specified index from the collection.\n   public void Remove( int index )  {\n      this.BaseRemoveAt( index );\n   }\n\n}\n\npublic class SamplesNameObjectCollectionBase  {\n\n   public static void Main()  {\n\n      // Creates and initializes a new MyCollection instance.\n      IDictionary d = new ListDictionary();\n      d.Add( &quot;red&quot;, &quot;apple&quot; );\n      d.Add( &quot;yellow&quot;, &quot;banana&quot; );\n      d.Add( &quot;green&quot;, &quot;pear&quot; );\n      MyCollection myCol = new MyCollection( d );\n      Console.WriteLine( &quot;Initial state of the collection (Count = {0}):&quot;, myCol.Count );\n      PrintKeysAndValues( myCol );\n\n      // Removes an element at a specific index.\n      myCol.Remove( 1 );\n      Console.WriteLine( &quot;After removing the element at index 1 (Count = {0}):&quot;, myCol.Count );\n      PrintKeysAndValues( myCol );\n\n      // Removes an element with a specific key.\n      myCol.Remove( &quot;red&quot; );\n      Console.WriteLine( &quot;After removing the element with the key \\&quot;red\\&quot; (Count = {0}):&quot;, myCol.Count );\n      PrintKeysAndValues( myCol );\n\n   }\n\n   public static void PrintKeysAndValues( MyCollection myCol )  {\n      for ( int i = 0; i &lt; myCol.Count; i++ )  {\n         Console.WriteLine( &quot;[{0}] : {1}, {2}&quot;, i, myCol[i].Key, myCol[i].Value );\n      }\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nInitial state of the collection (Count = 3):\n[0] : red, apple\n[1] : yellow, banana\n[2] : green, pear\nAfter removing the element at index 1 (Count = 2):\n[0] : red, apple\n[1] : green, pear\nAfter removing the element with the key &quot;red&quot; (Count = 1):\n[0] : green, pear\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Collections.Specialized.NameObjectCollectionBase.BaseRemove#1\">#using &lt;System.dll&gt;\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\n\npublic ref class MyCollection : public NameObjectCollectionBase  {\n\nprivate:\n   DictionaryEntry^ _de;\n\n   // Gets a key-and-value pair (DictionaryEntry) using an index.\npublic:\n   property DictionaryEntry^ default[ int ]  {\n      DictionaryEntry^ get(int index)  {\n         _de-&gt;Key = this-&gt;BaseGetKey( index );\n         _de-&gt;Value = this-&gt;BaseGet( index );\n         return( _de );\n      }\n   }\n\n   // Adds elements from an IDictionary into the new collection.\n   MyCollection( IDictionary^ d )  {\n\n      _de = gcnew DictionaryEntry();\n\n      for each ( DictionaryEntry^ de in d )  {\n         this-&gt;BaseAdd( (String^) de-&gt;Key, de-&gt;Value );\n      }\n   }\n\n   // Removes an entry with the specified key from the collection.\n   void Remove( String^ key )  {\n      this-&gt;BaseRemove( key );\n   }\n\n   // Removes an entry in the specified index from the collection.\n   void Remove( int index )  {\n      this-&gt;BaseRemoveAt( index );\n   }\n};\n\npublic ref class SamplesNameObjectCollectionBase  {\n\npublic:\n   static void Main()  {\n\n      // Creates and initializes a new MyCollection instance.\n      IDictionary^ d = gcnew ListDictionary();\n      d-&gt;Add( &quot;red&quot;, &quot;apple&quot; );\n      d-&gt;Add( &quot;yellow&quot;, &quot;banana&quot; );\n      d-&gt;Add( &quot;green&quot;, &quot;pear&quot; );\n      MyCollection^ myCol = gcnew MyCollection( d );\n      Console::WriteLine( &quot;Initial state of the collection (Count = {0}):&quot;, myCol-&gt;Count );\n      PrintKeysAndValues( myCol );\n\n      // Removes an element at a specific index.\n      myCol-&gt;Remove( 1 );\n      Console::WriteLine( &quot;After removing the element at index 1 (Count = {0}):&quot;, myCol-&gt;Count );\n      PrintKeysAndValues( myCol );\n\n      // Removes an element with a specific key.\n      myCol-&gt;Remove( &quot;red&quot; );\n      Console::WriteLine( &quot;After removing the element with the key \\&quot;red\\&quot; (Count = {0}):&quot;, myCol-&gt;Count );\n      PrintKeysAndValues( myCol );\n\n   }\n\n   static void PrintKeysAndValues( MyCollection^ myCol )  {\n      for ( int i = 0; i &lt; myCol-&gt;Count; i++ )  {\n         Console::WriteLine( &quot;[{0}] : {1}, {2}&quot;, i, myCol[i]-&gt;Key, myCol[i]-&gt;Value );\n      }\n   }\n};\n\nint main()\n{\n    SamplesNameObjectCollectionBase::Main();\n}\n\n/*\nThis code produces the following output.\n\nInitial state of the collection (Count = 3):\n[0] : red, apple\n[1] : yellow, banana\n[2] : green, pear\nAfter removing the element at index 1 (Count = 2):\n[0] : red, apple\n[1] : green, pear\nAfter removing the element with the key &quot;red&quot; (Count = 1):\n[0] : green, pear\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Specialized.NameObjectCollectionBase.BaseRemove#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\n\nPublic Class MyCollection\n   Inherits NameObjectCollectionBase\n\n   Private _de As New DictionaryEntry()\n\n   &#39; Gets a key-and-value pair (DictionaryEntry) using an index.\n   Default Public ReadOnly Property Item(index As Integer) As DictionaryEntry\n      Get\n         _de.Key = Me.BaseGetKey(index)\n         _de.Value = Me.BaseGet(index)\n         Return _de\n      End Get\n   End Property\n\n   &#39; Adds elements from an IDictionary into the new collection.\n   Public Sub New(d As IDictionary)\n      Dim de As DictionaryEntry\n      For Each de In  d\n         Me.BaseAdd(CType(de.Key, [String]), de.Value)\n      Next de\n   End Sub &#39;New\n\n   &#39; Removes an entry with the specified key from the collection.\n   Overloads Public Sub Remove(key As [String])\n      Me.BaseRemove(key)\n   End Sub &#39;Remove\n\n   &#39; Removes an entry in the specified index from the collection.\n   Overloads Public Sub Remove(index As Integer)\n      Me.BaseRemoveAt(index)\n   End Sub &#39;Remove\n\nEnd Class &#39;MyCollection\n\n\nPublic Class SamplesNameObjectCollectionBase   \n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new MyCollection instance.\n      Dim d = New ListDictionary()\n      d.Add(&quot;red&quot;, &quot;apple&quot;)\n      d.Add(&quot;yellow&quot;, &quot;banana&quot;)\n      d.Add(&quot;green&quot;, &quot;pear&quot;)\n      Dim myCol As New MyCollection(d)\n      Console.WriteLine(&quot;Initial state of the collection (Count = {0}):&quot;, myCol.Count)\n      PrintKeysAndValues(myCol)\n\n      &#39; Removes an element at a specific index.\n      myCol.Remove(1)\n      Console.WriteLine(&quot;After removing the element at index 1 (Count = {0}):&quot;, myCol.Count)\n      PrintKeysAndValues(myCol)\n\n      &#39; Removes an element with a specific key.\n      myCol.Remove(&quot;red&quot;)\n      Console.WriteLine(&quot;After removing the element with the key &quot;&quot;red&quot;&quot; (Count = {0}):&quot;, myCol.Count)\n      PrintKeysAndValues(myCol)\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintKeysAndValues(myCol As MyCollection)\n      Dim i As Integer\n      For i = 0 To myCol.Count - 1\n         Console.WriteLine(&quot;[{0}] : {1}, {2}&quot;, i, myCol(i).Key, myCol(i).Value)\n      Next i\n   End Sub &#39;PrintKeysAndValues\n\nEnd Class &#39;SamplesNameObjectCollectionBase \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Initial state of the collection (Count = 3):\n&#39;[0] : red, apple\n&#39;[1] : yellow, banana\n&#39;[2] : green, pear\n&#39;After removing the element at index 1 (Count = 2):\n&#39;[0] : red, apple\n&#39;[1] : green, pear\n&#39;After removing the element with the key &quot;red&quot; (Count = 1):\n&#39;[0] : green, pear\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_NameObjectCollectionBase_BaseSet_System_Int32_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_NameObjectCollectionBase_BaseSet_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BaseSet(Int32,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the value of the entry at the specified index of the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void BaseSet (int index, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the entry to set.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> that represents the new value of the entry to set. The value can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The collection is read-only.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is outside the valid range of indexes for the collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase#System_Collections_Specialized_NameObjectCollectionBase_BaseSet_\" data-linktype=\"relative-path\">BaseSet</a> to set the value of a specific element.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.Specialized.NameObjectCollectionBase.BaseSet#1\">#using &lt;System.dll&gt;\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\n\npublic ref class MyCollection : public NameObjectCollectionBase  {\n\n   // Gets or sets the value at the specified index.\npublic:\n   property Object^ default[ int ]  {\n      Object^ get(int index)  {\n         return( this-&gt;BaseGet( index ) );\n      }\n      void set( int index, Object^ value )  {\n         this-&gt;BaseSet( index, value );\n      }\n   }\n\n   // Gets or sets the value associated with the specified key.\n   property Object^ default[ String^ ]  {\n      Object^ get(String^ key)  {\n         return( this-&gt;BaseGet( key ) );\n      }\n      void set( String^ key, Object^ value )  {\n         this-&gt;BaseSet( key, value );\n      }\n   }\n\n   // Gets a String array that contains all the keys in the collection.\n   property array&lt;String^&gt;^ AllKeys  {\n      array&lt;String^&gt;^ get()  {\n         return( this-&gt;BaseGetAllKeys() );\n      }\n   }\n\n   // Adds elements from an IDictionary into the new collection.\n   MyCollection( IDictionary^ d )  {\n      for each ( DictionaryEntry^ de in d )  {\n         this-&gt;BaseAdd( (String^) de-&gt;Key, de-&gt;Value );\n      }\n   }\n\n};\n\npublic ref class SamplesNameObjectCollectionBase  {\n\npublic:\n   static void Main()  {\n\n      // Creates and initializes a new MyCollection instance.\n      IDictionary^ d = gcnew ListDictionary();\n      d-&gt;Add( &quot;red&quot;, &quot;apple&quot; );\n      d-&gt;Add( &quot;yellow&quot;, &quot;banana&quot; );\n      d-&gt;Add( &quot;green&quot;, &quot;pear&quot; );\n      MyCollection^ myCol = gcnew MyCollection( d );\n      Console::WriteLine( &quot;Initial state of the collection:&quot; );\n      PrintKeysAndValues2( myCol );\n      Console::WriteLine();\n\n      // Sets the value at index 1.\n      myCol[1] = &quot;sunflower&quot;;\n      Console::WriteLine( &quot;After setting the value at index 1:&quot; );\n      PrintKeysAndValues2( myCol );\n      Console::WriteLine();\n\n      // Sets the value associated with the key &quot;red&quot;.\n      myCol[&quot;red&quot;] = &quot;tulip&quot;;\n      Console::WriteLine( &quot;After setting the value associated with the key \\&quot;red\\&quot;:&quot; );\n      PrintKeysAndValues2( myCol );\n\n   }\n\n   static void PrintKeysAndValues2( MyCollection^ myCol )  {\n      for each ( String^ s in myCol-&gt;AllKeys )  {\n         Console::WriteLine( &quot;{0}, {1}&quot;, s, myCol[s] );\n      }\n   }\n};\n\nint main()\n{\n    SamplesNameObjectCollectionBase::Main();\n}\n\n/*\nThis code produces the following output.\n\nInitial state of the collection:\nred, apple\nyellow, banana\ngreen, pear\n\nAfter setting the value at index 1:\nred, apple\nyellow, sunflower\ngreen, pear\n\nAfter setting the value associated with the key &quot;red&quot;:\nred, tulip\nyellow, sunflower\ngreen, pear\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Specialized.NameObjectCollectionBase.BaseSet#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\n\nPublic Class MyCollection\n   Inherits NameObjectCollectionBase\n\n   &#39; Gets or sets the value at the specified index.\n   Default Public Property Item(index As Integer) As [Object]\n      Get\n         Return Me.BaseGet(index)\n      End Get\n      Set\n         Me.BaseSet(index, value)\n      End Set\n   End Property\n\n   &#39; Gets or sets the value associated with the specified key.\n   Default Public Property Item(key As [String]) As [Object]\n      Get\n         Return Me.BaseGet(key)\n      End Get\n      Set\n         Me.BaseSet(key, value)\n      End Set\n   End Property\n\n   &#39; Gets a String array that contains all the keys in the collection.\n   Public ReadOnly Property AllKeys() As [String]()\n      Get\n         Return Me.BaseGetAllKeys()\n      End Get\n   End Property\n\n   &#39; Adds elements from an IDictionary into the new collection.\n   Public Sub New(d As IDictionary)\n      Dim de As DictionaryEntry\n      For Each de In  d\n         Me.BaseAdd(CType(de.Key, [String]), de.Value)\n      Next de\n   End Sub &#39;New\n\nEnd Class &#39;MyCollection\n\n\nPublic Class SamplesNameObjectCollectionBase   \n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new MyCollection instance.\n      Dim d = New ListDictionary()\n      d.Add(&quot;red&quot;, &quot;apple&quot;)\n      d.Add(&quot;yellow&quot;, &quot;banana&quot;)\n      d.Add(&quot;green&quot;, &quot;pear&quot;)\n      Dim myCol As New MyCollection(d)\n      Console.WriteLine(&quot;Initial state of the collection:&quot;)\n      PrintKeysAndValues2(myCol)\n      Console.WriteLine()\n\n      &#39; Sets the value at index 1.\n      myCol(1) = &quot;sunflower&quot;\n      Console.WriteLine(&quot;After setting the value at index 1:&quot;)\n      PrintKeysAndValues2(myCol)\n      Console.WriteLine()\n\n      &#39; Sets the value associated with the key &quot;red&quot;.\n      myCol(&quot;red&quot;) = &quot;tulip&quot;\n      Console.WriteLine(&quot;After setting the value associated with the key &quot;&quot;red&quot;&quot;:&quot;)\n      PrintKeysAndValues2(myCol)\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintKeysAndValues2(myCol As MyCollection)\n      Dim s As [String]\n      For Each s In  myCol.AllKeys\n         Console.WriteLine(&quot;{0}, {1}&quot;, s, myCol(s))\n      Next s\n   End Sub &#39;PrintKeysAndValues2\n\nEnd Class &#39;SamplesNameObjectCollectionBase \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Initial state of the collection:\n&#39;red, apple\n&#39;yellow, banana\n&#39;green, pear\n&#39;\n&#39;After setting the value at index 1:\n&#39;red, apple\n&#39;yellow, sunflower\n&#39;green, pear\n&#39;\n&#39;After setting the value associated with the key &quot;red&quot;:\n&#39;red, tulip\n&#39;yellow, sunflower\n&#39;green, pear\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Specialized.NameObjectCollectionBase.BaseSet#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\n\npublic class MyCollection : NameObjectCollectionBase  {\n\n   // Gets or sets the value at the specified index.\n   public Object this[ int index ]  {\n      get  {\n         return( this.BaseGet( index ) );\n      }\n      set  {\n         this.BaseSet( index, value );\n      }\n   }\n\n   // Gets or sets the value associated with the specified key.\n   public Object this[ String key ]  {\n      get  {\n         return( this.BaseGet( key ) );\n      }\n      set  {\n         this.BaseSet( key, value );\n      }\n   }\n\n   // Gets a String array that contains all the keys in the collection.\n   public String[] AllKeys  {\n      get  {\n         return( this.BaseGetAllKeys() );\n      }\n   }\n\n   // Adds elements from an IDictionary into the new collection.\n   public MyCollection( IDictionary d )  {\n      foreach ( DictionaryEntry de in d )  {\n         this.BaseAdd( (String) de.Key, de.Value );\n      }\n   }\n\n}\n\npublic class SamplesNameObjectCollectionBase  {\n\n   public static void Main()  {\n\n      // Creates and initializes a new MyCollection instance.\n      IDictionary d = new ListDictionary();\n      d.Add( &quot;red&quot;, &quot;apple&quot; );\n      d.Add( &quot;yellow&quot;, &quot;banana&quot; );\n      d.Add( &quot;green&quot;, &quot;pear&quot; );\n      MyCollection myCol = new MyCollection( d );\n      Console.WriteLine( &quot;Initial state of the collection:&quot; );\n      PrintKeysAndValues2( myCol );\n      Console.WriteLine();\n\n      // Sets the value at index 1.\n      myCol[1] = &quot;sunflower&quot;;\n      Console.WriteLine( &quot;After setting the value at index 1:&quot; );\n      PrintKeysAndValues2( myCol );\n      Console.WriteLine();\n\n      // Sets the value associated with the key &quot;red&quot;.\n      myCol[&quot;red&quot;] = &quot;tulip&quot;;\n      Console.WriteLine( &quot;After setting the value associated with the key \\&quot;red\\&quot;:&quot; );\n      PrintKeysAndValues2( myCol );\n\n   }\n\n   public static void PrintKeysAndValues2( MyCollection myCol )  {\n      foreach ( String s in myCol.AllKeys )  {\n         Console.WriteLine( &quot;{0}, {1}&quot;, s, myCol[s] );\n      }\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nInitial state of the collection:\nred, apple\nyellow, banana\ngreen, pear\n\nAfter setting the value at index 1:\nred, apple\nyellow, sunflower\ngreen, pear\n\nAfter setting the value associated with the key &quot;red&quot;:\nred, tulip\nyellow, sunflower\ngreen, pear\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_NameObjectCollectionBase_BaseSet_System_String_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_NameObjectCollectionBase_BaseSet_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BaseSet(String,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the value of the first entry with the specified key in the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance, if found; otherwise, adds an entry with the specified key and value into the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected void BaseSet (string name, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> key of the entry to set. The key can be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> that represents the new value of the entry to set. The value can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The collection is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the collection contains multiple entries with the specified key, this method sets only the first entry. To set the values of subsequent entries with the same key, use the enumerator to iterate through the collection and compare the keys.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses BaseSet to set the value of a specific element.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.Specialized.NameObjectCollectionBase.BaseSet#1\">#using &lt;System.dll&gt;\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\n\npublic ref class MyCollection : public NameObjectCollectionBase  {\n\n   // Gets or sets the value at the specified index.\npublic:\n   property Object^ default[ int ]  {\n      Object^ get(int index)  {\n         return( this-&gt;BaseGet( index ) );\n      }\n      void set( int index, Object^ value )  {\n         this-&gt;BaseSet( index, value );\n      }\n   }\n\n   // Gets or sets the value associated with the specified key.\n   property Object^ default[ String^ ]  {\n      Object^ get(String^ key)  {\n         return( this-&gt;BaseGet( key ) );\n      }\n      void set( String^ key, Object^ value )  {\n         this-&gt;BaseSet( key, value );\n      }\n   }\n\n   // Gets a String array that contains all the keys in the collection.\n   property array&lt;String^&gt;^ AllKeys  {\n      array&lt;String^&gt;^ get()  {\n         return( this-&gt;BaseGetAllKeys() );\n      }\n   }\n\n   // Adds elements from an IDictionary into the new collection.\n   MyCollection( IDictionary^ d )  {\n      for each ( DictionaryEntry^ de in d )  {\n         this-&gt;BaseAdd( (String^) de-&gt;Key, de-&gt;Value );\n      }\n   }\n\n};\n\npublic ref class SamplesNameObjectCollectionBase  {\n\npublic:\n   static void Main()  {\n\n      // Creates and initializes a new MyCollection instance.\n      IDictionary^ d = gcnew ListDictionary();\n      d-&gt;Add( &quot;red&quot;, &quot;apple&quot; );\n      d-&gt;Add( &quot;yellow&quot;, &quot;banana&quot; );\n      d-&gt;Add( &quot;green&quot;, &quot;pear&quot; );\n      MyCollection^ myCol = gcnew MyCollection( d );\n      Console::WriteLine( &quot;Initial state of the collection:&quot; );\n      PrintKeysAndValues2( myCol );\n      Console::WriteLine();\n\n      // Sets the value at index 1.\n      myCol[1] = &quot;sunflower&quot;;\n      Console::WriteLine( &quot;After setting the value at index 1:&quot; );\n      PrintKeysAndValues2( myCol );\n      Console::WriteLine();\n\n      // Sets the value associated with the key &quot;red&quot;.\n      myCol[&quot;red&quot;] = &quot;tulip&quot;;\n      Console::WriteLine( &quot;After setting the value associated with the key \\&quot;red\\&quot;:&quot; );\n      PrintKeysAndValues2( myCol );\n\n   }\n\n   static void PrintKeysAndValues2( MyCollection^ myCol )  {\n      for each ( String^ s in myCol-&gt;AllKeys )  {\n         Console::WriteLine( &quot;{0}, {1}&quot;, s, myCol[s] );\n      }\n   }\n};\n\nint main()\n{\n    SamplesNameObjectCollectionBase::Main();\n}\n\n/*\nThis code produces the following output.\n\nInitial state of the collection:\nred, apple\nyellow, banana\ngreen, pear\n\nAfter setting the value at index 1:\nred, apple\nyellow, sunflower\ngreen, pear\n\nAfter setting the value associated with the key &quot;red&quot;:\nred, tulip\nyellow, sunflower\ngreen, pear\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Specialized.NameObjectCollectionBase.BaseSet#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\n\nPublic Class MyCollection\n   Inherits NameObjectCollectionBase\n\n   &#39; Gets or sets the value at the specified index.\n   Default Public Property Item(index As Integer) As [Object]\n      Get\n         Return Me.BaseGet(index)\n      End Get\n      Set\n         Me.BaseSet(index, value)\n      End Set\n   End Property\n\n   &#39; Gets or sets the value associated with the specified key.\n   Default Public Property Item(key As [String]) As [Object]\n      Get\n         Return Me.BaseGet(key)\n      End Get\n      Set\n         Me.BaseSet(key, value)\n      End Set\n   End Property\n\n   &#39; Gets a String array that contains all the keys in the collection.\n   Public ReadOnly Property AllKeys() As [String]()\n      Get\n         Return Me.BaseGetAllKeys()\n      End Get\n   End Property\n\n   &#39; Adds elements from an IDictionary into the new collection.\n   Public Sub New(d As IDictionary)\n      Dim de As DictionaryEntry\n      For Each de In  d\n         Me.BaseAdd(CType(de.Key, [String]), de.Value)\n      Next de\n   End Sub &#39;New\n\nEnd Class &#39;MyCollection\n\n\nPublic Class SamplesNameObjectCollectionBase   \n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new MyCollection instance.\n      Dim d = New ListDictionary()\n      d.Add(&quot;red&quot;, &quot;apple&quot;)\n      d.Add(&quot;yellow&quot;, &quot;banana&quot;)\n      d.Add(&quot;green&quot;, &quot;pear&quot;)\n      Dim myCol As New MyCollection(d)\n      Console.WriteLine(&quot;Initial state of the collection:&quot;)\n      PrintKeysAndValues2(myCol)\n      Console.WriteLine()\n\n      &#39; Sets the value at index 1.\n      myCol(1) = &quot;sunflower&quot;\n      Console.WriteLine(&quot;After setting the value at index 1:&quot;)\n      PrintKeysAndValues2(myCol)\n      Console.WriteLine()\n\n      &#39; Sets the value associated with the key &quot;red&quot;.\n      myCol(&quot;red&quot;) = &quot;tulip&quot;\n      Console.WriteLine(&quot;After setting the value associated with the key &quot;&quot;red&quot;&quot;:&quot;)\n      PrintKeysAndValues2(myCol)\n\n   End Sub &#39;Main\n\n   Public Shared Sub PrintKeysAndValues2(myCol As MyCollection)\n      Dim s As [String]\n      For Each s In  myCol.AllKeys\n         Console.WriteLine(&quot;{0}, {1}&quot;, s, myCol(s))\n      Next s\n   End Sub &#39;PrintKeysAndValues2\n\nEnd Class &#39;SamplesNameObjectCollectionBase \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Initial state of the collection:\n&#39;red, apple\n&#39;yellow, banana\n&#39;green, pear\n&#39;\n&#39;After setting the value at index 1:\n&#39;red, apple\n&#39;yellow, sunflower\n&#39;green, pear\n&#39;\n&#39;After setting the value associated with the key &quot;red&quot;:\n&#39;red, tulip\n&#39;yellow, sunflower\n&#39;green, pear\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Specialized.NameObjectCollectionBase.BaseSet#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\n\npublic class MyCollection : NameObjectCollectionBase  {\n\n   // Gets or sets the value at the specified index.\n   public Object this[ int index ]  {\n      get  {\n         return( this.BaseGet( index ) );\n      }\n      set  {\n         this.BaseSet( index, value );\n      }\n   }\n\n   // Gets or sets the value associated with the specified key.\n   public Object this[ String key ]  {\n      get  {\n         return( this.BaseGet( key ) );\n      }\n      set  {\n         this.BaseSet( key, value );\n      }\n   }\n\n   // Gets a String array that contains all the keys in the collection.\n   public String[] AllKeys  {\n      get  {\n         return( this.BaseGetAllKeys() );\n      }\n   }\n\n   // Adds elements from an IDictionary into the new collection.\n   public MyCollection( IDictionary d )  {\n      foreach ( DictionaryEntry de in d )  {\n         this.BaseAdd( (String) de.Key, de.Value );\n      }\n   }\n\n}\n\npublic class SamplesNameObjectCollectionBase  {\n\n   public static void Main()  {\n\n      // Creates and initializes a new MyCollection instance.\n      IDictionary d = new ListDictionary();\n      d.Add( &quot;red&quot;, &quot;apple&quot; );\n      d.Add( &quot;yellow&quot;, &quot;banana&quot; );\n      d.Add( &quot;green&quot;, &quot;pear&quot; );\n      MyCollection myCol = new MyCollection( d );\n      Console.WriteLine( &quot;Initial state of the collection:&quot; );\n      PrintKeysAndValues2( myCol );\n      Console.WriteLine();\n\n      // Sets the value at index 1.\n      myCol[1] = &quot;sunflower&quot;;\n      Console.WriteLine( &quot;After setting the value at index 1:&quot; );\n      PrintKeysAndValues2( myCol );\n      Console.WriteLine();\n\n      // Sets the value associated with the key &quot;red&quot;.\n      myCol[&quot;red&quot;] = &quot;tulip&quot;;\n      Console.WriteLine( &quot;After setting the value associated with the key \\&quot;red\\&quot;:&quot; );\n      PrintKeysAndValues2( myCol );\n\n   }\n\n   public static void PrintKeysAndValues2( MyCollection myCol )  {\n      foreach ( String s in myCol.AllKeys )  {\n         Console.WriteLine( &quot;{0}, {1}&quot;, s, myCol[s] );\n      }\n   }\n\n}\n\n\n/*\nThis code produces the following output.\n\nInitial state of the collection:\nred, apple\nyellow, banana\ngreen, pear\n\nAfter setting the value at index 1:\nred, apple\nyellow, sunflower\ngreen, pear\n\nAfter setting the value associated with the key &quot;red&quot;:\nred, tulip\nyellow, sunflower\ngreen, pear\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_NameObjectCollectionBase_GetEnumerator\">\r\n    \r\n            <a id=\"System_Collections_Specialized_NameObjectCollectionBase_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerator that iterates through the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Collections.IEnumerator GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> for the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This enumerator returns the keys of the collection as strings.  </p>\n<p> The <code>foreach</code> statement of the C# language (<code>for each</code> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <code>foreach</code> is recommended, instead of directly manipulating the enumerator.  </p>\n<p> Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  </p>\n<p> Initially, the enumerator is positioned before the first element in the collection. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> also brings the enumerator back to this position.  At this position, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. Therefore, you must call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> to advance the enumerator to the first element of the collection before reading the value of <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a>.  </p>\n<p> <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> returns the same object until either <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> or <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> is called. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> sets <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the next element.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> passes the end of the collection, the enumerator is positioned after the last element in the collection and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>. When the enumerator is at this position, subsequent calls to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> also return <code>false</code>. If the last call to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returned <code>false</code>, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. To set <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the first element of the collection again, you can call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> followed by <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a>.  </p>\n<p> An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  </p>\n<p> The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_NameObjectCollectionBase_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_NameObjectCollectionBase_GetObjectData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetObjectData(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Implements the <a class=\"xref\" href=\"system.runtime.serialization.iserializable\" data-linktype=\"relative-path\">ISerializable</a> interface and returns the data needed to serialize the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>info</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> object that contains the information required to serialize the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a> object that contains the source and destination of the serialized stream associated with the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>info</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase#System_Collections_Specialized_NameObjectCollectionBase_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_NameObjectCollectionBase_OnDeserialization_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_NameObjectCollectionBase_OnDeserialization_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnDeserialization(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Implements the <a class=\"xref\" href=\"system.runtime.serialization.iserializable\" data-linktype=\"relative-path\">ISerializable</a> interface and raises the deserialization event when the deserialization is complete.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void OnDeserialization (object sender);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>sender</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The source of the deserialization event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationexception\" data-linktype=\"relative-path\">SerializationException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> object associated with the current <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> instance is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>While the OnDeserialization method is not visible to COM clients by default, inheriting the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> class can expose it and can cause undesirable behavior in COM clients.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase#System_Collections_Specialized_NameObjectCollectionBase_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_NameObjectCollectionBase_System_Collections_ICollection_CopyTo_System_Array_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Specialized_NameObjectCollectionBase_System_Collections_ICollection_CopyTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection.CopyTo(Array,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the entire <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> to a compatible one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>, starting at the specified index of the target array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void ICollection.CopyTo (Array array, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that is the destination of the elements copied from <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a>. The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> must have zero-based indexing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in <code>array</code> at which copying begins.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is multidimensional.  </p>\n<p> -or-  </p>\n<p> The number of elements in the source <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The type of the source <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> cannot be cast automatically to the type of the destination <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The specified array must be of a compatible type.  </p>\n<p> This method uses <a class=\"xref\" href=\"system.array#System_Array_Copy_\" data-linktype=\"relative-path\">Copy</a> to copy the elements.  </p>\n<p> While the ICollection.CopyTo method is not visible to COM clients by default, inheriting the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> class can expose it and can cause undesirable behavior in COM clients.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase#System_Collections_Specialized_NameObjectCollectionBase_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_NameObjectCollectionBase_System_Collections_ICollection_IsSynchronized\">\r\n    \r\n            <a id=\"System_Collections_Specialized_NameObjectCollectionBase_System_Collections_ICollection_IsSynchronized_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection.IsSynchronized</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether access to the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> object is synchronized (thread safe).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool System.Collections.ICollection.IsSynchronized { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if access to the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> object is synchronized (thread safe); otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> object is not synchronized. Derived classes can provide a synchronized version of the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> using the <a class=\"xref\" href=\"system.collections.icollection#System_Collections_ICollection_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> property.  </p>\n<p> Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  </p>\n<p> The following code example shows how to lock the collection using the <a class=\"xref\" href=\"system.collections.icollection#System_Collections_ICollection_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> property during the entire enumeration.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Specialized.NameObjectCollectionBase#2\">        // Create a collection derived from NameObjectCollectionBase\n        ICollection myCollection = new DerivedCollection();\n        lock(myCollection.SyncRoot)\n        {\n            foreach (object item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Collections.Specialized.NameObjectCollectionBase#2\">        // Create a collection derived from NameObjectCollectionBase\n        ICollection^ myCollection = gcnew DerivedCollection();\n        bool lockTaken = false;\n        try\n        {\n            Monitor::Enter(myCollection-&gt;SyncRoot, lockTaken);\n            for each (Object^ item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n        finally\n        {\n            if (lockTaken)\n            {\n                Monitor::Exit(myCollection-&gt;SyncRoot);\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Specialized.NameObjectCollectionBase#2\">        &#39; Create a collection derived from NameObjectCollectionBase\n        Dim myCollection As ICollection = New DerivedCollection()\n        SyncLock myCollection.SyncRoot\n            For Each item As Object In myCollection\n                &#39; Insert your code here.\n            Next item\n        End SyncLock\n</code></pre><p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Specialized_NameObjectCollectionBase_System_Collections_ICollection_SyncRoot\">\r\n    \r\n            <a id=\"System_Collections_Specialized_NameObjectCollectionBase_System_Collections_ICollection_SyncRoot_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection.SyncRoot</div>        \r\n          </div>\r\n    \r\n            <p>Gets an object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">object System.Collections.ICollection.SyncRoot { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Derived classes can provide their own synchronized version of the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> class using the <a class=\"xref\" href=\"system.collections.icollection#System_Collections_ICollection_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> property. The synchronizing code must perform operations on the <a class=\"xref\" href=\"system.collections.icollection#System_Collections_ICollection_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> property of the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> object, not directly on the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> object. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <a class=\"xref\" href=\"system.collections.specialized.nameobjectcollectionbase\" data-linktype=\"relative-path\">NameObjectCollectionBase</a> object.  </p>\n<p> Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  </p>\n<p> The following code example shows how to lock the collection using the <a class=\"xref\" href=\"system.collections.icollection#System_Collections_ICollection_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> during the entire enumeration.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Specialized.NameObjectCollectionBase#2\">        // Create a collection derived from NameObjectCollectionBase\n        ICollection myCollection = new DerivedCollection();\n        lock(myCollection.SyncRoot)\n        {\n            foreach (object item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Collections.Specialized.NameObjectCollectionBase#2\">        // Create a collection derived from NameObjectCollectionBase\n        ICollection^ myCollection = gcnew DerivedCollection();\n        bool lockTaken = false;\n        try\n        {\n            Monitor::Enter(myCollection-&gt;SyncRoot, lockTaken);\n            for each (Object^ item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n        finally\n        {\n            if (lockTaken)\n            {\n                Monitor::Exit(myCollection-&gt;SyncRoot);\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Specialized.NameObjectCollectionBase#2\">        &#39; Create a collection derived from NameObjectCollectionBase\n        Dim myCollection As ICollection = New DerivedCollection()\n        SyncLock myCollection.SyncRoot\n            For Each item As Object In myCollection\n                &#39; Insert your code here.\n            Next item\n        End SyncLock\n</code></pre><p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.Specialized.NameObjectCollectionBase.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.Specialized.NameObjectCollectionBase.yml\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.NameObjectCollectionBase\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.NameObjectCollectionBase..ctor\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.NameObjectCollectionBase.BaseAdd\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.NameObjectCollectionBase.BaseClear\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.NameObjectCollectionBase.BaseGet\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.NameObjectCollectionBase.BaseRemove\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.NameObjectCollectionBase.BaseSet\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.NameObjectCollectionBase.Count\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.NameObjectCollectionBase.GetObjectData\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.NameObjectCollectionBase.Keys\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.NameObjectCollectionBase.OnDeserialization\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.NameObjectCollectionBase.ICollection.CopyTo\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.NameObjectCollectionBase.ICollection.IsSynchronized\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.NameObjectCollectionBase.ICollection.SyncRoot\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"21ee87ce-3465-2ca9-f295-4ac87e7baf03\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides the abstract base class for a collection of associated  keys and  values that can be accessed either with the key or with the index.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Collections.Specialized/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Collections.Specialized.NameObjectCollectionBase\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.Specialized.NameObjectCollectionBase.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.Specialized.NameObjectCollectionBase.yml","open_to_public_contributors":true,"api_name":["System.Collections.Specialized.NameObjectCollectionBase","System.Collections.Specialized.NameObjectCollectionBase..ctor","System.Collections.Specialized.NameObjectCollectionBase.BaseAdd","System.Collections.Specialized.NameObjectCollectionBase.BaseClear","System.Collections.Specialized.NameObjectCollectionBase.BaseGet","System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys","System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues","System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey","System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys","System.Collections.Specialized.NameObjectCollectionBase.BaseRemove","System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt","System.Collections.Specialized.NameObjectCollectionBase.BaseSet","System.Collections.Specialized.NameObjectCollectionBase.Count","System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator","System.Collections.Specialized.NameObjectCollectionBase.GetObjectData","System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly","System.Collections.Specialized.NameObjectCollectionBase.Keys","System.Collections.Specialized.NameObjectCollectionBase.OnDeserialization","System.Collections.Specialized.NameObjectCollectionBase.ICollection.CopyTo","System.Collections.Specialized.NameObjectCollectionBase.ICollection.IsSynchronized","System.Collections.Specialized.NameObjectCollectionBase.ICollection.SyncRoot"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Collections.Specialized.NameObjectCollectionBase","System::Collections::Specialized::NameObjectCollectionBase","System.Collections.Specialized.NameObjectCollectionBase.#ctor","System::Collections::Specialized::NameObjectCollectionBase::#ctor","System.Collections.Specialized.NameObjectCollectionBase.BaseAdd","System::Collections::Specialized::NameObjectCollectionBase::BaseAdd","System.Collections.Specialized.NameObjectCollectionBase.BaseClear","System::Collections::Specialized::NameObjectCollectionBase::BaseClear","System.Collections.Specialized.NameObjectCollectionBase.BaseGet","System::Collections::Specialized::NameObjectCollectionBase::BaseGet","System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys","System::Collections::Specialized::NameObjectCollectionBase::BaseGetAllKeys","System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues","System::Collections::Specialized::NameObjectCollectionBase::BaseGetAllValues","System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey","System::Collections::Specialized::NameObjectCollectionBase::BaseGetKey","System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys","System::Collections::Specialized::NameObjectCollectionBase::BaseHasKeys","System.Collections.Specialized.NameObjectCollectionBase.BaseRemove","System::Collections::Specialized::NameObjectCollectionBase::BaseRemove","System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt","System::Collections::Specialized::NameObjectCollectionBase::BaseRemoveAt","System.Collections.Specialized.NameObjectCollectionBase.BaseSet","System::Collections::Specialized::NameObjectCollectionBase::BaseSet","System.Collections.Specialized.NameObjectCollectionBase.Count","System::Collections::Specialized::NameObjectCollectionBase::Count","System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator","System::Collections::Specialized::NameObjectCollectionBase::GetEnumerator","System.Collections.Specialized.NameObjectCollectionBase.GetObjectData","System::Collections::Specialized::NameObjectCollectionBase::GetObjectData","System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly","System::Collections::Specialized::NameObjectCollectionBase::IsReadOnly","System.Collections.Specialized.NameObjectCollectionBase.Keys","System::Collections::Specialized::NameObjectCollectionBase::Keys","System.Collections.Specialized.NameObjectCollectionBase.OnDeserialization","System::Collections::Specialized::NameObjectCollectionBase::OnDeserialization","System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#CopyTo","System::Collections::Specialized::NameObjectCollectionBase::System#Collections#ICollection#CopyTo","System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#IsSynchronized","System::Collections::Specialized::NameObjectCollectionBase::System#Collections#ICollection#IsSynchronized","System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#SyncRoot","System::Collections::Specialized::NameObjectCollectionBase::System#Collections#ICollection#SyncRoot"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"21ee87ce-3465-2ca9-f295-4ac87e7baf03","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Collections.Specialized/NameObjectCollectionBase.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"NameObjectCollectionBase class | Microsoft Docs","_op_ogTitle":"NameObjectCollectionBase class","description":"Provides the abstract base class for a collection of associated  keys and  values that can be accessed either with the key or with the index.\n","toc_asset_id":"_splitted/System.Collections.Specialized/toc.json","toc_rel":"_splitted/System.Collections.Specialized/toc.json","source_url":"","ms.assetid":"System.Collections.Specialized.NameObjectCollectionBase","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.specialized.nameobjectcollectionbase","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.specialized.nameobjectcollectionbase","fileRelativePath":"System.Collections.Specialized.NameObjectCollectionBase.html"},"themesRelativePathToOutputRoot":"_themes/"}