{"content":"    \r\n    <h1 id=\"System_Windows_Media_Animation_ClockController\">\r\n      <span class=\"lang-csharp\">ClockController</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Interactively controls a <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public sealed class ClockController : System.Windows.Threading.DispatcherObject</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.threading.dispatcherobject\" data-linktype=\"relative-path\">System.Windows.Threading.DispatcherObject</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">ClockController</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.threading.dispatcherobject#System_Windows_Threading_DispatcherObject_CheckAccess\" data-linktype=\"relative-path\">CheckAccess()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.threading.dispatcherobject#System_Windows_Threading_DispatcherObject_Dispatcher\" data-linktype=\"relative-path\">Dispatcher</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.threading.dispatcherobject#System_Windows_Threading_DispatcherObject_VerifyAccess\" data-linktype=\"relative-path\">VerifyAccess()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Use a ClockController to interactively begin, pause, resume, seek, skip, stop, and remove a <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a>. You can only interactively control root-level clocks.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_ClockController_Clock\" data-linktype=\"self-bookmark\">Clock</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> controlled by this <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller\" data-linktype=\"relative-path\">ClockController</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_ClockController_SpeedRatio\" data-linktype=\"self-bookmark\">SpeedRatio</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the interactive speed of the target <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_ClockController_Begin\" data-linktype=\"self-bookmark\">Begin()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the target <span class=\"xref\">stem.Windows.Media.Animation.ClockController.Clock*</span> to begin at the next tick.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_ClockController_Pause\" data-linktype=\"self-bookmark\">Pause()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Stops the target <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> from progressing.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_ClockController_Remove\" data-linktype=\"self-bookmark\">Remove()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> associated with this <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller\" data-linktype=\"relative-path\">ClockController</a> from the properties it animates. The clock and its child clocks will no longer affect these properties.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_ClockController_Resume\" data-linktype=\"self-bookmark\">Resume()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Enables a <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was previously paused to resume progressing.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_ClockController_Seek_System_TimeSpan_System_Windows_Media_Animation_TimeSeekOrigin_\" data-linktype=\"self-bookmark\">Seek(TimeSpan,TimeSeekOrigin)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Seeks the target <span class=\"xref\">stem.Windows.Media.Animation.ClockController.Clock*</span> by the specified amount when the next tick occurs. If the target clock is stopped, seeking makes it active again.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_ClockController_SeekAlignedToLastTick_System_TimeSpan_System_Windows_Media_Animation_TimeSeekOrigin_\" data-linktype=\"self-bookmark\">SeekAlignedToLastTick(TimeSpan,TimeSeekOrigin)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Seeks the target <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> by the specified amount immediately. If the target clock is stopped, seeking makes it active again.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_ClockController_SkipToFill\" data-linktype=\"self-bookmark\">SkipToFill()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Advances the current time of the target <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> to the end of its active period.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Media_Animation_ClockController_Stop\" data-linktype=\"self-bookmark\">Stop()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Stops the target <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_ClockController_Clock\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_ClockController_Clock_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clock</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> controlled by this <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller\" data-linktype=\"relative-path\">ClockController</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Media.Animation.Clock Clock { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> controlled by this <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller\" data-linktype=\"relative-path\">ClockController</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_ClockController_SpeedRatio\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_ClockController_SpeedRatio_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SpeedRatio</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the interactive speed of the target <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public double SpeedRatio { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>A finite value greater than zero that describes the interactive speed of the target clock. This value is multiplied against the value of the <span class=\"xref\">stem.Windows.Media.Animation.Timeline.SpeedRatio*</span> of the clock&#39;s <a class=\"xref\" href=\"system.windows.media.animation.timeline\" data-linktype=\"relative-path\">Timeline</a>. For example, if the timeline&#39;s <span class=\"xref\">stem.Windows.Media.Animation.Timeline.SpeedRatio*</span> is 0.5 and the <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller\" data-linktype=\"relative-path\">ClockController</a> object&#39;s SpeedRatio is 3.0, the timeline moves at 1.5 times normal speed (0.5 * 3.0). The default value is 1.0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Setting this property has no effect until the next tick. If you set this property and then get its value before the next tick occurs, you&#39;ll get the old value. This property will return the new value after the next tick.  </p>\n<p> Setting this property does not change the value of the underlying timeline&#39;s <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_SpeedRatio_\" data-linktype=\"relative-path\">SpeedRatio</a>.  </p>\n<p> Setting this property triggers the target clock&#39;s <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_CurrentGlobalSpeedInvalidated\" data-linktype=\"relative-path\">CurrentGlobalSpeedInvalidated</a> event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_ClockController_Begin\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_ClockController_Begin_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Begin()</div>        \r\n          </div>\r\n    \r\n            <p>Sets the target <span class=\"xref\">stem.Windows.Media.Animation.ClockController.Clock*</span> to begin at the next tick.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Begin ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method causes the target <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> to behave as though its <a class=\"xref\" href=\"system.windows.media.animation.timeline\" data-linktype=\"relative-path\">Timeline</a> object&#39;s <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_BeginTime_\" data-linktype=\"relative-path\">BeginTime</a> were set to the time of the next tick. The timeline&#39;s actual <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_BeginTime_\" data-linktype=\"relative-path\">BeginTime</a> setting is ignored (but not changed).  </p>\n<p> This method changes the target clock&#39;s <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_CurrentState_\" data-linktype=\"relative-path\">CurrentState</a> to <a class=\"xref\" href=\"system.windows.media.animation.clockstate\" data-linktype=\"relative-path\">ClockState</a>. The Begin method does not resume a paused clock.  </p>\n<p> This method has no effect on the timing tree until the next time a tick is processed. As a side-effect, the appropriate events will also not be raised until then. Calling this method triggers the <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_CurrentStateInvalidated\" data-linktype=\"relative-path\">CurrentStateInvalidated</a> and <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentGlobalSpeedInvalidated\" data-linktype=\"relative-path\">CurrentGlobalSpeedInvalidated</a> events.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_ClockController_Pause\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_ClockController_Pause_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Pause()</div>        \r\n          </div>\r\n    \r\n            <p>Stops the target <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> from progressing.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Pause ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can pause a <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> regardless of its current state, and pausing a clock does not change its current state. A clock can be paused while <a class=\"xref\" href=\"system.windows.media.animation.clockstate\" data-linktype=\"relative-path\">ClockState</a>, <a class=\"xref\" href=\"system.windows.media.animation.clockstate\" data-linktype=\"relative-path\">ClockState</a>, or <a class=\"xref\" href=\"system.windows.media.animation.clockstate\" data-linktype=\"relative-path\">ClockState</a>. The only way to unpause a clock is by using the <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller#System_Windows_Media_Animation_ClockController_Resume_\" data-linktype=\"relative-path\">Resume</a> method. Pausing a clock implicitly pauses its children.  </p>\n<p> Calling this method when the target clock is already paused has no effect.  </p>\n<p> Pausing a clock triggers the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentGlobalSpeedInvalidated\" data-linktype=\"relative-path\">CurrentGlobalSpeedInvalidated</a> event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_ClockController_Remove\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_ClockController_Remove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Remove()</div>        \r\n          </div>\r\n    \r\n            <p>Removes the <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> associated with this <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller\" data-linktype=\"relative-path\">ClockController</a> from the properties it animates. The clock and its child clocks will no longer affect these properties.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Remove ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method triggers the <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_RemoveRequested\" data-linktype=\"relative-path\">RemoveRequested</a> event.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to remove and otherwise interactively control a clock.  </p>\n<pre><code class=\"lang-vb\" name=\"ClockController_procedural_snip#ClockControllerSeekExample\">\nImports Microsoft.VisualBasic\nImports System\nImports System.Windows\nImports System.Windows.Controls\nImports System.Windows.Media\nImports System.Windows.Media.Animation\nImports System.Windows.Navigation\nImports System.Windows.Shapes\nImports System.Data\nImports System.Xml\nImports System.Configuration\n\n\n\nNamespace SDKSample\n\t&#39;&#39;&#39; &lt;summary&gt;\n\t&#39;&#39;&#39; Shows how to interactively control a clock.\n\t&#39;&#39;&#39; &lt;/summary&gt;\n\n  Public Class SeekAlignedToLastTickExample\n\t  Inherits Page\n\n\t\tPrivate myClock As AnimationClock\n\t\tPrivate currentTimeIndicator As TextBlock\n\t\tPrivate seekDestination As TextBox\n\t\tPrivate rectangleWidthIndicator As TextBlock\n\t\tPrivate myRectangle As Rectangle\n\n\t\tPublic Sub New()\n\n\n\n\t\t\tMe.WindowTitle = &quot;Controlling a Storyboard&quot;\n\t\t\tMe.Background = Brushes.White\n\n\t\t\tDim myStackPanel As New StackPanel()\n\t\t\tmyStackPanel.Margin = New Thickness(20)\n\n\t\t\t&#39; Create a rectangle.\n            myRectangle = New Rectangle()\n            With myRectangle\n                .Width = 100\n                .Height = 20\n                .Margin = New Thickness(12, 0, 0, 5)\n                .Fill = New SolidColorBrush(Color.FromArgb(170, 51, 51, 255))\n                .HorizontalAlignment = HorizontalAlignment.Left\n            End With\n            myStackPanel.Children.Add(myRectangle)\n\n            &#39;\n            &#39; Create an animation and a storyboard to animate the\n            &#39; rectangle.\n            &#39;\n            Dim myDoubleAnimation As New DoubleAnimation(100, 500, New Duration(TimeSpan.FromSeconds(60)))\n            myClock = myDoubleAnimation.CreateClock()\n            myRectangle.ApplyAnimationClock(Rectangle.WidthProperty, myClock)\n            myClock.Controller.Stop()\n\n\n            &#39;\n            &#39; Create some buttons to control the storyboard\n            &#39; and a panel to contain them.\n            &#39;\n            Dim buttonPanel As New StackPanel()\n            buttonPanel.Orientation = Orientation.Horizontal\n            Dim beginButton As New Button()\n            beginButton.Content = &quot;Begin&quot;\n            AddHandler beginButton.Click, AddressOf beginButton_Clicked\n            buttonPanel.Children.Add(beginButton)\n            Dim pauseButton As New Button()\n            pauseButton.Content = &quot;Pause&quot;\n            AddHandler pauseButton.Click, AddressOf pauseButton_Clicked\n            buttonPanel.Children.Add(pauseButton)\n            Dim resumeButton As New Button()\n            resumeButton.Content = &quot;Resume&quot;\n            AddHandler resumeButton.Click, AddressOf resumeButton_Clicked\n            buttonPanel.Children.Add(resumeButton)\n            Dim skipToFillButton As New Button()\n            skipToFillButton.Content = &quot;Skip to Fill&quot;\n            AddHandler skipToFillButton.Click, AddressOf skipToFillButton_Clicked\n            buttonPanel.Children.Add(skipToFillButton)\n            Dim setSpeedRatioButton As New Button()\n            setSpeedRatioButton.Content = &quot;Triple Speed&quot;\n            AddHandler setSpeedRatioButton.Click, AddressOf setSpeedRatioButton_Clicked\n            buttonPanel.Children.Add(setSpeedRatioButton)\n            Dim stopButton As New Button()\n            stopButton.Content = &quot;Stop&quot;\n            AddHandler stopButton.Click, AddressOf stopButton_Clicked\n            buttonPanel.Children.Add(stopButton)\n            Dim removeButton As New Button()\n            removeButton.Content = &quot;Remove&quot;\n            AddHandler removeButton.Click, AddressOf removeButton_Clicked\n            buttonPanel.Children.Add(removeButton)\n\n            myStackPanel.Children.Add(buttonPanel)\n\n            &#39; Create some controls to display the\n            &#39; storyboard&#39;s current time and the\n            &#39; current width of the rectangle.\n            Dim seekPanel As New StackPanel()\n            seekPanel.Margin = New Thickness(10)\n            Dim aPanel As New StackPanel()\n            Dim aLabel As New Label()\n            aPanel.Orientation = Orientation.Horizontal\n            aLabel.Content = &quot;Current Time: &quot;\n            aPanel.Children.Add(aLabel)\n            currentTimeIndicator = New TextBlock()\n            aPanel.Children.Add(currentTimeIndicator)\n            seekPanel.Children.Add(aPanel)\n\n            aPanel = New StackPanel()\n            aPanel.Orientation = Orientation.Horizontal\n            aLabel = New Label()\n            aLabel.Content = &quot;Rectangle Width: &quot;\n            aPanel.Children.Add(aLabel)\n            rectangleWidthIndicator = New TextBlock()\n            rectangleWidthIndicator.Text = myRectangle.Width.ToString()\n            aPanel.Children.Add(rectangleWidthIndicator)\n            seekPanel.Children.Add(aPanel)\n\n\n            &#39; Create some controls to enable the\n            &#39; user to specify a seek position.\n\n            aPanel = New StackPanel()\n            aPanel.Orientation = Orientation.Horizontal\n            aLabel = New Label()\n            aLabel.Content = &quot;Seek Offset: &quot;\n            aPanel.Children.Add(aLabel)\n            seekDestination = New TextBox()\n            seekDestination.Text = &quot;0&quot;\n            aPanel.Children.Add(seekDestination)\n            seekPanel.Children.Add(aPanel)\n\n\n            Dim seekButton As New Button()\n            seekButton.Content = &quot;Seek&quot;\n            AddHandler seekButton.Click, AddressOf seekButton_Clicked\n            seekPanel.Children.Add(seekButton)\n            Dim seekAlignedToLastTickButton As New Button()\n            seekAlignedToLastTickButton.Content = &quot;Seek Aligned to Last Tick&quot;\n            AddHandler seekAlignedToLastTickButton.Click, AddressOf seekAlignedToLastTickButton_Clicked\n            seekPanel.Children.Add(seekAlignedToLastTickButton)\n\n            myStackPanel.Children.Add(seekPanel)\n\n            Me.Content = myStackPanel\n\n            AddHandler myClock.CurrentTimeInvalidated, AddressOf myClock_CurrentTimeInvalidated\n\t\tEnd Sub\n\n\t\t&#39; Begins the clock.\n\t\tPrivate Sub beginButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\n\t\t\tmyClock.Controller.Begin()\n\t\tEnd Sub\n\n\t\t&#39; Pauses the clock.\n\t\tPrivate Sub pauseButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\tmyClock.Controller.Pause()\n\n\t\tEnd Sub\n\n\t\t&#39; Resumes the clock.\n\t\tPrivate Sub resumeButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\tmyClock.Controller.Resume()\n\n\t\tEnd Sub\n\n\t\t&#39; Advances the clock to its fill period.\n\t\tPrivate Sub skipToFillButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\tmyClock.Controller.SkipToFill()\n\n\t\tEnd Sub\n\n\t\t&#39; Updates the clock&#39;s speed.\n\t\tPrivate Sub setSpeedRatioButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t&#39; Makes the clock progress three times as fast as normal.\n\t\t\tmyClock.Controller.SpeedRatio = 3\n\n\t\tEnd Sub\n\n\t\t&#39; Stops the clock.\n\t\tPrivate Sub stopButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\tmyClock.Controller.Stop()\n\n\t\tEnd Sub\n\n\t\t&#39; Removes the clock.\n\t\tPrivate Sub removeButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\tmyClock.Controller.Remove()\n\n\t\tEnd Sub\n\n\t\tPrivate Sub seekButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\tTry\n\n\t\t\t\t&#39; The rectangle width will probably not be at its new\n\t\t\t\t&#39; value when this call is made, because the \n\t\t\t\t&#39; clock probably hasn&#39;t ticked yet.\n\t\t\t\tDim seekTime As TimeSpan = TimeSpan.Parse(seekDestination.Text)\n\t\t\t\tmyClock.Controller.Seek(seekTime, TimeSeekOrigin.BeginTime)\n\t\t\t\trectangleWidthIndicator.Text = myRectangle.Width.ToString()\n\n\t\t\tCatch ex As FormatException\n\t\t\t\tMessageBox.Show(&quot;Invalid TimeSpan value.&quot;)\n\t\t\t\tseekDestination.Focus()\n\t\t\tEnd Try\n\t\tEnd Sub\n\n\t\tPrivate Sub seekAlignedToLastTickButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\n\t\t\tTry\n\n\t\t\t\t&#39; The rectangle width will be at its new\n\t\t\t\t&#39; value when this call is made, because SeekAlignedToLastTick \n\t\t\t\t&#39; operation immediately updates timeline and animation\n\t\t\t\t&#39; values.        \n\t\t\t\tDim seekTime As TimeSpan = TimeSpan.Parse(seekDestination.Text)\n\t\t\t\tmyClock.Controller.SeekAlignedToLastTick(seekTime, TimeSeekOrigin.BeginTime)\n\t\t\t\trectangleWidthIndicator.Text = myRectangle.Width.ToString()\n\n\t\t\tCatch ex As FormatException\n\t\t\t\tMessageBox.Show(&quot;Invalid TimeSpan value.&quot;)\n\t\t\t\tseekDestination.Focus()\n\t\t\tEnd Try\n\t\tEnd Sub\n\n\t\tPrivate Sub myClock_CurrentTimeInvalidated(ByVal sender As Object, ByVal e As EventArgs)\n\n\t\t\tcurrentTimeIndicator.Text = myClock.CurrentTime.ToString()\n\n\t\tEnd Sub\n\n\n\n  End Class\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"ClockController_procedural_snip#ClockControllerSeekExample\">using System;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Media;\nusing System.Windows.Media.Animation;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing System.Data;\nusing System.Xml;\nusing System.Configuration;\n\n\n\nnamespace SDKSample\n{\n    /// &lt;summary&gt;\n    /// Shows how to interactively control a clock.\n    /// &lt;/summary&gt;\n\n  public class SeekAlignedToLastTickExample : Page\n    {\n    \n        private AnimationClock myClock;\n        private TextBlock currentTimeIndicator;\n        private TextBox seekDestination;\n        private TextBlock rectangleWidthIndicator;\n        private Rectangle myRectangle;\n        \n        public SeekAlignedToLastTickExample()\n        {\n        \n \n        \n            this.WindowTitle = &quot;Controlling a Storyboard&quot;;\n            this.Background = Brushes.White;\n\n            StackPanel myStackPanel = new StackPanel();\n            myStackPanel.Margin = new Thickness(20);\n            \n            // Create a rectangle.\n            myRectangle = new Rectangle();\n            myRectangle.Width = 100;\n            myRectangle.Height = 20;\n            myRectangle.Margin = new Thickness(12,0,0,5);\n            myRectangle.Fill = new SolidColorBrush(Color.FromArgb(170, 51, 51, 255));\n            myRectangle.HorizontalAlignment = HorizontalAlignment.Left;\n            myStackPanel.Children.Add(myRectangle);                    \n            \n            //\n            // Create an animation and a storyboard to animate the\n            // rectangle.\n            //\n            DoubleAnimation myDoubleAnimation = \n                new DoubleAnimation(100, 500, new Duration(TimeSpan.FromSeconds(60)));  \n            myClock = myDoubleAnimation.CreateClock();\n            myRectangle.ApplyAnimationClock(Rectangle.WidthProperty, myClock);\n            myClock.Controller.Stop();\n \n            \n            //\n            // Create some buttons to control the storyboard\n            // and a panel to contain them.\n            //\n            StackPanel buttonPanel = new StackPanel();\n            buttonPanel.Orientation = Orientation.Horizontal;\n            Button beginButton = new Button();\n            beginButton.Content = &quot;Begin&quot;;\n            beginButton.Click += new RoutedEventHandler(beginButton_Clicked);            \n            buttonPanel.Children.Add(beginButton);\n            Button pauseButton = new Button();\n            pauseButton.Content = &quot;Pause&quot;;\n            pauseButton.Click +=new RoutedEventHandler(pauseButton_Clicked);\n            buttonPanel.Children.Add(pauseButton);\n            Button resumeButton = new Button();\n            resumeButton.Content = &quot;Resume&quot;;\n            resumeButton.Click +=new RoutedEventHandler(resumeButton_Clicked);\n            buttonPanel.Children.Add(resumeButton);\n            Button skipToFillButton = new Button();\n            skipToFillButton.Content = &quot;Skip to Fill&quot;;\n            skipToFillButton.Click +=new RoutedEventHandler(skipToFillButton_Clicked);\n            buttonPanel.Children.Add(skipToFillButton);\n            Button setSpeedRatioButton = new Button();\n            setSpeedRatioButton.Content = &quot;Triple Speed&quot;;\n            setSpeedRatioButton.Click +=new RoutedEventHandler(setSpeedRatioButton_Clicked);\n            buttonPanel.Children.Add(setSpeedRatioButton);\n            Button stopButton = new Button();\n            stopButton.Content = &quot;Stop&quot;;\n            stopButton.Click +=new RoutedEventHandler(stopButton_Clicked);\n            buttonPanel.Children.Add(stopButton);\n            Button removeButton = new Button();\n            removeButton.Content = &quot;Remove&quot;;\n            removeButton.Click +=new RoutedEventHandler(removeButton_Clicked);\n            buttonPanel.Children.Add(removeButton);            \n            \n            myStackPanel.Children.Add(buttonPanel);    \n            \n            // Create some controls to display the\n            // storyboard&#39;s current time and the\n            // current width of the rectangle.\n            StackPanel seekPanel = new StackPanel();\n            seekPanel.Margin = new Thickness(10);\n            StackPanel aPanel = new StackPanel();\n            Label aLabel = new Label();\n            aPanel.Orientation = Orientation.Horizontal;\n            aLabel.Content = &quot;Current Time: &quot;;\n            aPanel.Children.Add(aLabel);\n            currentTimeIndicator = new TextBlock();\n            aPanel.Children.Add(currentTimeIndicator);\n            seekPanel.Children.Add(aPanel);\n            \n            aPanel = new StackPanel();\n            aPanel.Orientation = Orientation.Horizontal;\n            aLabel = new Label();\n            aLabel.Content = &quot;Rectangle Width: &quot;;\n            aPanel.Children.Add(aLabel);\n            rectangleWidthIndicator = new TextBlock();\n            rectangleWidthIndicator.Text = myRectangle.Width.ToString(); \n            aPanel.Children.Add(rectangleWidthIndicator);\n            seekPanel.Children.Add(aPanel);\n            \n            \n            // Create some controls to enable the\n            // user to specify a seek position.\n            \n            aPanel = new StackPanel();\n            aPanel.Orientation = Orientation.Horizontal;\n            aLabel = new Label();\n            aLabel.Content = &quot;Seek Offset: &quot; ;\n            aPanel.Children.Add(aLabel);\n            seekDestination = new TextBox();\n            seekDestination.Text = &quot;0&quot;;\n            aPanel.Children.Add(seekDestination);       \n            seekPanel.Children.Add(aPanel);\n            \n            \n            Button seekButton = new Button();\n            seekButton.Content = &quot;Seek&quot;;\n            seekButton.Click += new RoutedEventHandler(seekButton_Clicked);\n            seekPanel.Children.Add(seekButton);\n            Button seekAlignedToLastTickButton = new Button();\n            seekAlignedToLastTickButton.Content = &quot;Seek Aligned to Last Tick&quot;;\n            seekAlignedToLastTickButton.Click += new RoutedEventHandler(seekAlignedToLastTickButton_Clicked);\n            seekPanel.Children.Add(seekAlignedToLastTickButton);           \n            \n            myStackPanel.Children.Add(seekPanel);\n            \n            this.Content = myStackPanel;   \n            \n            myClock.CurrentTimeInvalidated += new EventHandler(myClock_CurrentTimeInvalidated);\n        }\n        \n        // Begins the clock.\n        private void beginButton_Clicked(object sender, RoutedEventArgs args)\n        {\n\n            myClock.Controller.Begin();         \n        }\n        \n        // Pauses the clock.\n        private void pauseButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            myClock.Controller.Pause();         \n        \n        }\n\n        // Resumes the clock.\n        private void resumeButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            myClock.Controller.Resume();        \n        \n        }\n\n        // Advances the clock to its fill period.\n        private void skipToFillButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            myClock.Controller.SkipToFill();          \n        \n        }\n\n        // Updates the clock&#39;s speed.\n        private void setSpeedRatioButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            // Makes the clock progress three times as fast as normal.\n            myClock.Controller.SpeedRatio = 3;        \n        \n        }\n\n        // Stops the clock.\n        private void stopButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            myClock.Controller.Stop();        \n        \n        }\n\n        // Removes the clock.\n        private void removeButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            myClock.Controller.Remove();        \n        \n        }        \n        \n        private void seekButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            try {\n            \n                // The rectangle width will probably not be at its new\n                // value when this call is made, because the \n                // clock probably hasn&#39;t ticked yet.\n                TimeSpan seekTime = TimeSpan.Parse(seekDestination.Text);\n                myClock.Controller.Seek(seekTime, TimeSeekOrigin.BeginTime);\n                rectangleWidthIndicator.Text = myRectangle.Width.ToString();\n            \n            }catch(FormatException ex)\n            {\n                MessageBox.Show(&quot;Invalid TimeSpan value.&quot;);\n                seekDestination.Focus();\n            }\n        }\n        \n        private void seekAlignedToLastTickButton_Clicked(object sender, RoutedEventArgs args)\n        {\n\n            try {\n            \n                // The rectangle width will be at its new\n                // value when this call is made, because SeekAlignedToLastTick \n                // operation immediately updates timeline and animation\n                // values.        \n                TimeSpan seekTime = TimeSpan.Parse(seekDestination.Text);\n                myClock.Controller.SeekAlignedToLastTick(seekTime, TimeSeekOrigin.BeginTime);\n                rectangleWidthIndicator.Text = myRectangle.Width.ToString();\n            \n            }catch(FormatException ex)\n            {\n                MessageBox.Show(&quot;Invalid TimeSpan value.&quot;);\n                seekDestination.Focus();\n            }    \n        }\n        \n        private void myClock_CurrentTimeInvalidated(object sender, EventArgs e)\n        {\n        \n            currentTimeIndicator.Text = myClock.CurrentTime.ToString();\n            \n        }\n        \n        \n        \n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_ClockController_Resume\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_ClockController_Resume_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Resume()</div>        \r\n          </div>\r\n    \r\n            <p>Enables a <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> that was previously paused to resume progressing.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Resume ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can pause or resume a <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> regardless of its current state, and pausing or resuming a clock does not change its current state. A clock can be paused while <a class=\"xref\" href=\"system.windows.media.animation.clockstate\" data-linktype=\"relative-path\">ClockState</a>, <a class=\"xref\" href=\"system.windows.media.animation.clockstate\" data-linktype=\"relative-path\">ClockState</a>, or <a class=\"xref\" href=\"system.windows.media.animation.clockstate\" data-linktype=\"relative-path\">ClockState</a>. The only way to resume a paused clock is by using the Resume method. Resuming a clock implicitly resumes its children. Calling this method on a clock that is not paused has no effect.  </p>\n<p> Resuming a paused clock triggers the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentGlobalSpeedInvalidated\" data-linktype=\"relative-path\">CurrentGlobalSpeedInvalidated</a> event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_ClockController_Seek_System_TimeSpan_System_Windows_Media_Animation_TimeSeekOrigin_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_ClockController_Seek_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Seek(TimeSpan,TimeSeekOrigin)</div>        \r\n          </div>\r\n    \r\n            <p>Seeks the target <span class=\"xref\">stem.Windows.Media.Animation.ClockController.Clock*</span> by the specified amount when the next tick occurs. If the target clock is stopped, seeking makes it active again.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Seek (TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The seek offset, measured in the target clock&#39;s time. This offset is relative to the clock&#39;s <a class=\"xref\" href=\"system.windows.media.animation.timeseekorigin\" data-linktype=\"relative-path\">TimeSeekOrigin</a> or <a class=\"xref\" href=\"system.windows.media.animation.timeseekorigin\" data-linktype=\"relative-path\">TimeSeekOrigin</a>, depending on the value of <code>origin</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>origin</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.timeseekorigin\" data-linktype=\"relative-path\">TimeSeekOrigin</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value that indicates whether the specified offset is relative to the target clock&#39;s <a class=\"xref\" href=\"system.windows.media.animation.timeseekorigin\" data-linktype=\"relative-path\">TimeSeekOrigin</a> or <a class=\"xref\" href=\"system.windows.media.animation.timeseekorigin\" data-linktype=\"relative-path\">TimeSeekOrigin</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Seek operations do not take the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_SpeedRatio_\" data-linktype=\"relative-path\">SpeedRatio</a> or <a class=\"xref\" href=\"system.windows.media.animation.paralleltimeline#System_Windows_Media_Animation_ParallelTimeline_SlipBehavior_\" data-linktype=\"relative-path\">SlipBehavior</a> settings of this clock&#39;s timeline into account: the clock is treated as though its timeline has a <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_SpeedRatio_\" data-linktype=\"relative-path\">SpeedRatio</a> of 1 and no <a class=\"xref\" href=\"system.windows.media.animation.paralleltimeline#System_Windows_Media_Animation_ParallelTimeline_SlipBehavior_\" data-linktype=\"relative-path\">SlipBehavior</a>.  </p>\n<p> This method changes the clock&#39;s <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_CurrentState_\" data-linktype=\"relative-path\">CurrentState</a> to <a class=\"xref\" href=\"system.windows.media.animation.clockstate\" data-linktype=\"relative-path\">ClockState</a>. This method has no effect on the timing tree until the next time a tick is processed. As a side-effect, the appropriate events also will not be raised until then.  </p>\n<p> Seeking a storyboard triggers the <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_CurrentGlobalSpeedInvalidated\" data-linktype=\"relative-path\">CurrentGlobalSpeedInvalidated</a> and <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_CurrentStateInvalidated\" data-linktype=\"relative-path\">CurrentStateInvalidated</a> events.  </p>\n<p> If the target clock has children, their current time is updated accordingly.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to seek using a <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller\" data-linktype=\"relative-path\">ClockController</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"ClockController_procedural_snip#ClockControllerSeekExample\">\nImports Microsoft.VisualBasic\nImports System\nImports System.Windows\nImports System.Windows.Controls\nImports System.Windows.Media\nImports System.Windows.Media.Animation\nImports System.Windows.Navigation\nImports System.Windows.Shapes\nImports System.Data\nImports System.Xml\nImports System.Configuration\n\n\n\nNamespace SDKSample\n\t&#39;&#39;&#39; &lt;summary&gt;\n\t&#39;&#39;&#39; Shows how to interactively control a clock.\n\t&#39;&#39;&#39; &lt;/summary&gt;\n\n  Public Class SeekAlignedToLastTickExample\n\t  Inherits Page\n\n\t\tPrivate myClock As AnimationClock\n\t\tPrivate currentTimeIndicator As TextBlock\n\t\tPrivate seekDestination As TextBox\n\t\tPrivate rectangleWidthIndicator As TextBlock\n\t\tPrivate myRectangle As Rectangle\n\n\t\tPublic Sub New()\n\n\n\n\t\t\tMe.WindowTitle = &quot;Controlling a Storyboard&quot;\n\t\t\tMe.Background = Brushes.White\n\n\t\t\tDim myStackPanel As New StackPanel()\n\t\t\tmyStackPanel.Margin = New Thickness(20)\n\n\t\t\t&#39; Create a rectangle.\n            myRectangle = New Rectangle()\n            With myRectangle\n                .Width = 100\n                .Height = 20\n                .Margin = New Thickness(12, 0, 0, 5)\n                .Fill = New SolidColorBrush(Color.FromArgb(170, 51, 51, 255))\n                .HorizontalAlignment = HorizontalAlignment.Left\n            End With\n            myStackPanel.Children.Add(myRectangle)\n\n            &#39;\n            &#39; Create an animation and a storyboard to animate the\n            &#39; rectangle.\n            &#39;\n            Dim myDoubleAnimation As New DoubleAnimation(100, 500, New Duration(TimeSpan.FromSeconds(60)))\n            myClock = myDoubleAnimation.CreateClock()\n            myRectangle.ApplyAnimationClock(Rectangle.WidthProperty, myClock)\n            myClock.Controller.Stop()\n\n\n            &#39;\n            &#39; Create some buttons to control the storyboard\n            &#39; and a panel to contain them.\n            &#39;\n            Dim buttonPanel As New StackPanel()\n            buttonPanel.Orientation = Orientation.Horizontal\n            Dim beginButton As New Button()\n            beginButton.Content = &quot;Begin&quot;\n            AddHandler beginButton.Click, AddressOf beginButton_Clicked\n            buttonPanel.Children.Add(beginButton)\n            Dim pauseButton As New Button()\n            pauseButton.Content = &quot;Pause&quot;\n            AddHandler pauseButton.Click, AddressOf pauseButton_Clicked\n            buttonPanel.Children.Add(pauseButton)\n            Dim resumeButton As New Button()\n            resumeButton.Content = &quot;Resume&quot;\n            AddHandler resumeButton.Click, AddressOf resumeButton_Clicked\n            buttonPanel.Children.Add(resumeButton)\n            Dim skipToFillButton As New Button()\n            skipToFillButton.Content = &quot;Skip to Fill&quot;\n            AddHandler skipToFillButton.Click, AddressOf skipToFillButton_Clicked\n            buttonPanel.Children.Add(skipToFillButton)\n            Dim setSpeedRatioButton As New Button()\n            setSpeedRatioButton.Content = &quot;Triple Speed&quot;\n            AddHandler setSpeedRatioButton.Click, AddressOf setSpeedRatioButton_Clicked\n            buttonPanel.Children.Add(setSpeedRatioButton)\n            Dim stopButton As New Button()\n            stopButton.Content = &quot;Stop&quot;\n            AddHandler stopButton.Click, AddressOf stopButton_Clicked\n            buttonPanel.Children.Add(stopButton)\n            Dim removeButton As New Button()\n            removeButton.Content = &quot;Remove&quot;\n            AddHandler removeButton.Click, AddressOf removeButton_Clicked\n            buttonPanel.Children.Add(removeButton)\n\n            myStackPanel.Children.Add(buttonPanel)\n\n            &#39; Create some controls to display the\n            &#39; storyboard&#39;s current time and the\n            &#39; current width of the rectangle.\n            Dim seekPanel As New StackPanel()\n            seekPanel.Margin = New Thickness(10)\n            Dim aPanel As New StackPanel()\n            Dim aLabel As New Label()\n            aPanel.Orientation = Orientation.Horizontal\n            aLabel.Content = &quot;Current Time: &quot;\n            aPanel.Children.Add(aLabel)\n            currentTimeIndicator = New TextBlock()\n            aPanel.Children.Add(currentTimeIndicator)\n            seekPanel.Children.Add(aPanel)\n\n            aPanel = New StackPanel()\n            aPanel.Orientation = Orientation.Horizontal\n            aLabel = New Label()\n            aLabel.Content = &quot;Rectangle Width: &quot;\n            aPanel.Children.Add(aLabel)\n            rectangleWidthIndicator = New TextBlock()\n            rectangleWidthIndicator.Text = myRectangle.Width.ToString()\n            aPanel.Children.Add(rectangleWidthIndicator)\n            seekPanel.Children.Add(aPanel)\n\n\n            &#39; Create some controls to enable the\n            &#39; user to specify a seek position.\n\n            aPanel = New StackPanel()\n            aPanel.Orientation = Orientation.Horizontal\n            aLabel = New Label()\n            aLabel.Content = &quot;Seek Offset: &quot;\n            aPanel.Children.Add(aLabel)\n            seekDestination = New TextBox()\n            seekDestination.Text = &quot;0&quot;\n            aPanel.Children.Add(seekDestination)\n            seekPanel.Children.Add(aPanel)\n\n\n            Dim seekButton As New Button()\n            seekButton.Content = &quot;Seek&quot;\n            AddHandler seekButton.Click, AddressOf seekButton_Clicked\n            seekPanel.Children.Add(seekButton)\n            Dim seekAlignedToLastTickButton As New Button()\n            seekAlignedToLastTickButton.Content = &quot;Seek Aligned to Last Tick&quot;\n            AddHandler seekAlignedToLastTickButton.Click, AddressOf seekAlignedToLastTickButton_Clicked\n            seekPanel.Children.Add(seekAlignedToLastTickButton)\n\n            myStackPanel.Children.Add(seekPanel)\n\n            Me.Content = myStackPanel\n\n            AddHandler myClock.CurrentTimeInvalidated, AddressOf myClock_CurrentTimeInvalidated\n\t\tEnd Sub\n\n\t\t&#39; Begins the clock.\n\t\tPrivate Sub beginButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\n\t\t\tmyClock.Controller.Begin()\n\t\tEnd Sub\n\n\t\t&#39; Pauses the clock.\n\t\tPrivate Sub pauseButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\tmyClock.Controller.Pause()\n\n\t\tEnd Sub\n\n\t\t&#39; Resumes the clock.\n\t\tPrivate Sub resumeButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\tmyClock.Controller.Resume()\n\n\t\tEnd Sub\n\n\t\t&#39; Advances the clock to its fill period.\n\t\tPrivate Sub skipToFillButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\tmyClock.Controller.SkipToFill()\n\n\t\tEnd Sub\n\n\t\t&#39; Updates the clock&#39;s speed.\n\t\tPrivate Sub setSpeedRatioButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t&#39; Makes the clock progress three times as fast as normal.\n\t\t\tmyClock.Controller.SpeedRatio = 3\n\n\t\tEnd Sub\n\n\t\t&#39; Stops the clock.\n\t\tPrivate Sub stopButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\tmyClock.Controller.Stop()\n\n\t\tEnd Sub\n\n\t\t&#39; Removes the clock.\n\t\tPrivate Sub removeButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\tmyClock.Controller.Remove()\n\n\t\tEnd Sub\n\n\t\tPrivate Sub seekButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\tTry\n\n\t\t\t\t&#39; The rectangle width will probably not be at its new\n\t\t\t\t&#39; value when this call is made, because the \n\t\t\t\t&#39; clock probably hasn&#39;t ticked yet.\n\t\t\t\tDim seekTime As TimeSpan = TimeSpan.Parse(seekDestination.Text)\n\t\t\t\tmyClock.Controller.Seek(seekTime, TimeSeekOrigin.BeginTime)\n\t\t\t\trectangleWidthIndicator.Text = myRectangle.Width.ToString()\n\n\t\t\tCatch ex As FormatException\n\t\t\t\tMessageBox.Show(&quot;Invalid TimeSpan value.&quot;)\n\t\t\t\tseekDestination.Focus()\n\t\t\tEnd Try\n\t\tEnd Sub\n\n\t\tPrivate Sub seekAlignedToLastTickButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\n\t\t\tTry\n\n\t\t\t\t&#39; The rectangle width will be at its new\n\t\t\t\t&#39; value when this call is made, because SeekAlignedToLastTick \n\t\t\t\t&#39; operation immediately updates timeline and animation\n\t\t\t\t&#39; values.        \n\t\t\t\tDim seekTime As TimeSpan = TimeSpan.Parse(seekDestination.Text)\n\t\t\t\tmyClock.Controller.SeekAlignedToLastTick(seekTime, TimeSeekOrigin.BeginTime)\n\t\t\t\trectangleWidthIndicator.Text = myRectangle.Width.ToString()\n\n\t\t\tCatch ex As FormatException\n\t\t\t\tMessageBox.Show(&quot;Invalid TimeSpan value.&quot;)\n\t\t\t\tseekDestination.Focus()\n\t\t\tEnd Try\n\t\tEnd Sub\n\n\t\tPrivate Sub myClock_CurrentTimeInvalidated(ByVal sender As Object, ByVal e As EventArgs)\n\n\t\t\tcurrentTimeIndicator.Text = myClock.CurrentTime.ToString()\n\n\t\tEnd Sub\n\n\n\n  End Class\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"ClockController_procedural_snip#ClockControllerSeekExample\">using System;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Media;\nusing System.Windows.Media.Animation;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing System.Data;\nusing System.Xml;\nusing System.Configuration;\n\n\n\nnamespace SDKSample\n{\n    /// &lt;summary&gt;\n    /// Shows how to interactively control a clock.\n    /// &lt;/summary&gt;\n\n  public class SeekAlignedToLastTickExample : Page\n    {\n    \n        private AnimationClock myClock;\n        private TextBlock currentTimeIndicator;\n        private TextBox seekDestination;\n        private TextBlock rectangleWidthIndicator;\n        private Rectangle myRectangle;\n        \n        public SeekAlignedToLastTickExample()\n        {\n        \n \n        \n            this.WindowTitle = &quot;Controlling a Storyboard&quot;;\n            this.Background = Brushes.White;\n\n            StackPanel myStackPanel = new StackPanel();\n            myStackPanel.Margin = new Thickness(20);\n            \n            // Create a rectangle.\n            myRectangle = new Rectangle();\n            myRectangle.Width = 100;\n            myRectangle.Height = 20;\n            myRectangle.Margin = new Thickness(12,0,0,5);\n            myRectangle.Fill = new SolidColorBrush(Color.FromArgb(170, 51, 51, 255));\n            myRectangle.HorizontalAlignment = HorizontalAlignment.Left;\n            myStackPanel.Children.Add(myRectangle);                    \n            \n            //\n            // Create an animation and a storyboard to animate the\n            // rectangle.\n            //\n            DoubleAnimation myDoubleAnimation = \n                new DoubleAnimation(100, 500, new Duration(TimeSpan.FromSeconds(60)));  \n            myClock = myDoubleAnimation.CreateClock();\n            myRectangle.ApplyAnimationClock(Rectangle.WidthProperty, myClock);\n            myClock.Controller.Stop();\n \n            \n            //\n            // Create some buttons to control the storyboard\n            // and a panel to contain them.\n            //\n            StackPanel buttonPanel = new StackPanel();\n            buttonPanel.Orientation = Orientation.Horizontal;\n            Button beginButton = new Button();\n            beginButton.Content = &quot;Begin&quot;;\n            beginButton.Click += new RoutedEventHandler(beginButton_Clicked);            \n            buttonPanel.Children.Add(beginButton);\n            Button pauseButton = new Button();\n            pauseButton.Content = &quot;Pause&quot;;\n            pauseButton.Click +=new RoutedEventHandler(pauseButton_Clicked);\n            buttonPanel.Children.Add(pauseButton);\n            Button resumeButton = new Button();\n            resumeButton.Content = &quot;Resume&quot;;\n            resumeButton.Click +=new RoutedEventHandler(resumeButton_Clicked);\n            buttonPanel.Children.Add(resumeButton);\n            Button skipToFillButton = new Button();\n            skipToFillButton.Content = &quot;Skip to Fill&quot;;\n            skipToFillButton.Click +=new RoutedEventHandler(skipToFillButton_Clicked);\n            buttonPanel.Children.Add(skipToFillButton);\n            Button setSpeedRatioButton = new Button();\n            setSpeedRatioButton.Content = &quot;Triple Speed&quot;;\n            setSpeedRatioButton.Click +=new RoutedEventHandler(setSpeedRatioButton_Clicked);\n            buttonPanel.Children.Add(setSpeedRatioButton);\n            Button stopButton = new Button();\n            stopButton.Content = &quot;Stop&quot;;\n            stopButton.Click +=new RoutedEventHandler(stopButton_Clicked);\n            buttonPanel.Children.Add(stopButton);\n            Button removeButton = new Button();\n            removeButton.Content = &quot;Remove&quot;;\n            removeButton.Click +=new RoutedEventHandler(removeButton_Clicked);\n            buttonPanel.Children.Add(removeButton);            \n            \n            myStackPanel.Children.Add(buttonPanel);    \n            \n            // Create some controls to display the\n            // storyboard&#39;s current time and the\n            // current width of the rectangle.\n            StackPanel seekPanel = new StackPanel();\n            seekPanel.Margin = new Thickness(10);\n            StackPanel aPanel = new StackPanel();\n            Label aLabel = new Label();\n            aPanel.Orientation = Orientation.Horizontal;\n            aLabel.Content = &quot;Current Time: &quot;;\n            aPanel.Children.Add(aLabel);\n            currentTimeIndicator = new TextBlock();\n            aPanel.Children.Add(currentTimeIndicator);\n            seekPanel.Children.Add(aPanel);\n            \n            aPanel = new StackPanel();\n            aPanel.Orientation = Orientation.Horizontal;\n            aLabel = new Label();\n            aLabel.Content = &quot;Rectangle Width: &quot;;\n            aPanel.Children.Add(aLabel);\n            rectangleWidthIndicator = new TextBlock();\n            rectangleWidthIndicator.Text = myRectangle.Width.ToString(); \n            aPanel.Children.Add(rectangleWidthIndicator);\n            seekPanel.Children.Add(aPanel);\n            \n            \n            // Create some controls to enable the\n            // user to specify a seek position.\n            \n            aPanel = new StackPanel();\n            aPanel.Orientation = Orientation.Horizontal;\n            aLabel = new Label();\n            aLabel.Content = &quot;Seek Offset: &quot; ;\n            aPanel.Children.Add(aLabel);\n            seekDestination = new TextBox();\n            seekDestination.Text = &quot;0&quot;;\n            aPanel.Children.Add(seekDestination);       \n            seekPanel.Children.Add(aPanel);\n            \n            \n            Button seekButton = new Button();\n            seekButton.Content = &quot;Seek&quot;;\n            seekButton.Click += new RoutedEventHandler(seekButton_Clicked);\n            seekPanel.Children.Add(seekButton);\n            Button seekAlignedToLastTickButton = new Button();\n            seekAlignedToLastTickButton.Content = &quot;Seek Aligned to Last Tick&quot;;\n            seekAlignedToLastTickButton.Click += new RoutedEventHandler(seekAlignedToLastTickButton_Clicked);\n            seekPanel.Children.Add(seekAlignedToLastTickButton);           \n            \n            myStackPanel.Children.Add(seekPanel);\n            \n            this.Content = myStackPanel;   \n            \n            myClock.CurrentTimeInvalidated += new EventHandler(myClock_CurrentTimeInvalidated);\n        }\n        \n        // Begins the clock.\n        private void beginButton_Clicked(object sender, RoutedEventArgs args)\n        {\n\n            myClock.Controller.Begin();         \n        }\n        \n        // Pauses the clock.\n        private void pauseButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            myClock.Controller.Pause();         \n        \n        }\n\n        // Resumes the clock.\n        private void resumeButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            myClock.Controller.Resume();        \n        \n        }\n\n        // Advances the clock to its fill period.\n        private void skipToFillButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            myClock.Controller.SkipToFill();          \n        \n        }\n\n        // Updates the clock&#39;s speed.\n        private void setSpeedRatioButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            // Makes the clock progress three times as fast as normal.\n            myClock.Controller.SpeedRatio = 3;        \n        \n        }\n\n        // Stops the clock.\n        private void stopButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            myClock.Controller.Stop();        \n        \n        }\n\n        // Removes the clock.\n        private void removeButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            myClock.Controller.Remove();        \n        \n        }        \n        \n        private void seekButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            try {\n            \n                // The rectangle width will probably not be at its new\n                // value when this call is made, because the \n                // clock probably hasn&#39;t ticked yet.\n                TimeSpan seekTime = TimeSpan.Parse(seekDestination.Text);\n                myClock.Controller.Seek(seekTime, TimeSeekOrigin.BeginTime);\n                rectangleWidthIndicator.Text = myRectangle.Width.ToString();\n            \n            }catch(FormatException ex)\n            {\n                MessageBox.Show(&quot;Invalid TimeSpan value.&quot;);\n                seekDestination.Focus();\n            }\n        }\n        \n        private void seekAlignedToLastTickButton_Clicked(object sender, RoutedEventArgs args)\n        {\n\n            try {\n            \n                // The rectangle width will be at its new\n                // value when this call is made, because SeekAlignedToLastTick \n                // operation immediately updates timeline and animation\n                // values.        \n                TimeSpan seekTime = TimeSpan.Parse(seekDestination.Text);\n                myClock.Controller.SeekAlignedToLastTick(seekTime, TimeSeekOrigin.BeginTime);\n                rectangleWidthIndicator.Text = myRectangle.Width.ToString();\n            \n            }catch(FormatException ex)\n            {\n                MessageBox.Show(&quot;Invalid TimeSpan value.&quot;);\n                seekDestination.Focus();\n            }    \n        }\n        \n        private void myClock_CurrentTimeInvalidated(object sender, EventArgs e)\n        {\n        \n            currentTimeIndicator.Text = myClock.CurrentTime.ToString();\n            \n        }\n        \n        \n        \n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_ClockController_SeekAlignedToLastTick_System_TimeSpan_System_Windows_Media_Animation_TimeSeekOrigin_\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_ClockController_SeekAlignedToLastTick_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SeekAlignedToLastTick(TimeSpan,TimeSeekOrigin)</div>        \r\n          </div>\r\n    \r\n            <p>Seeks the target <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> by the specified amount immediately. If the target clock is stopped, seeking makes it active again.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SeekAlignedToLastTick (TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The seek offset, measured in the target clock&#39;s time. This offset is relative to the clock&#39;s <a class=\"xref\" href=\"system.windows.media.animation.timeseekorigin\" data-linktype=\"relative-path\">TimeSeekOrigin</a> or <a class=\"xref\" href=\"system.windows.media.animation.timeseekorigin\" data-linktype=\"relative-path\">TimeSeekOrigin</a>, depending on the value of <code>origin</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>origin</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.animation.timeseekorigin\" data-linktype=\"relative-path\">TimeSeekOrigin</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value that indicates whether the specified offset is relative to the target clock&#39;s <a class=\"xref\" href=\"system.windows.media.animation.timeseekorigin\" data-linktype=\"relative-path\">TimeSeekOrigin</a> or <a class=\"xref\" href=\"system.windows.media.animation.timeseekorigin\" data-linktype=\"relative-path\">TimeSeekOrigin</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Seek operations do not take the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_SpeedRatio_\" data-linktype=\"relative-path\">SpeedRatio</a> or <a class=\"xref\" href=\"system.windows.media.animation.paralleltimeline#System_Windows_Media_Animation_ParallelTimeline_SlipBehavior_\" data-linktype=\"relative-path\">SlipBehavior</a> settings of this clock&#39;s timeline into account: the clock is treated as though its timeline has a <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_SpeedRatio_\" data-linktype=\"relative-path\">SpeedRatio</a> of 1 and no <a class=\"xref\" href=\"system.windows.media.animation.paralleltimeline#System_Windows_Media_Animation_ParallelTimeline_SlipBehavior_\" data-linktype=\"relative-path\">SlipBehavior</a>.  </p>\n<p> SeekAlignedToLastTick aligns the seeked time of the clock with the last clock tick. Values are immediately updated to reflect the changes due to SeekAlignedToLastTick, even though the screen will not reflect these changes until the screen updates.  </p>\n<p> If the target clock has children, their current time is updated accordingly.  </p>\n<p> This method changes the clock&#39;s <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_CurrentState_\" data-linktype=\"relative-path\">CurrentState</a> to <a class=\"xref\" href=\"system.windows.media.animation.clockstate\" data-linktype=\"relative-path\">ClockState</a>.  </p>\n<p> Seeking a storyboard triggers the <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_CurrentGlobalSpeedInvalidated\" data-linktype=\"relative-path\">CurrentGlobalSpeedInvalidated</a> and <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_CurrentStateInvalidated\" data-linktype=\"relative-path\">CurrentStateInvalidated</a> events.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates both the <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller#System_Windows_Media_Animation_ClockController_Seek_\" data-linktype=\"relative-path\">Seek</a> and SeekAlignedToLastTick methods of a <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller\" data-linktype=\"relative-path\">ClockController</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"ClockController_procedural_snip#ClockControllerSeekExample\">\nImports Microsoft.VisualBasic\nImports System\nImports System.Windows\nImports System.Windows.Controls\nImports System.Windows.Media\nImports System.Windows.Media.Animation\nImports System.Windows.Navigation\nImports System.Windows.Shapes\nImports System.Data\nImports System.Xml\nImports System.Configuration\n\n\n\nNamespace SDKSample\n\t&#39;&#39;&#39; &lt;summary&gt;\n\t&#39;&#39;&#39; Shows how to interactively control a clock.\n\t&#39;&#39;&#39; &lt;/summary&gt;\n\n  Public Class SeekAlignedToLastTickExample\n\t  Inherits Page\n\n\t\tPrivate myClock As AnimationClock\n\t\tPrivate currentTimeIndicator As TextBlock\n\t\tPrivate seekDestination As TextBox\n\t\tPrivate rectangleWidthIndicator As TextBlock\n\t\tPrivate myRectangle As Rectangle\n\n\t\tPublic Sub New()\n\n\n\n\t\t\tMe.WindowTitle = &quot;Controlling a Storyboard&quot;\n\t\t\tMe.Background = Brushes.White\n\n\t\t\tDim myStackPanel As New StackPanel()\n\t\t\tmyStackPanel.Margin = New Thickness(20)\n\n\t\t\t&#39; Create a rectangle.\n            myRectangle = New Rectangle()\n            With myRectangle\n                .Width = 100\n                .Height = 20\n                .Margin = New Thickness(12, 0, 0, 5)\n                .Fill = New SolidColorBrush(Color.FromArgb(170, 51, 51, 255))\n                .HorizontalAlignment = HorizontalAlignment.Left\n            End With\n            myStackPanel.Children.Add(myRectangle)\n\n            &#39;\n            &#39; Create an animation and a storyboard to animate the\n            &#39; rectangle.\n            &#39;\n            Dim myDoubleAnimation As New DoubleAnimation(100, 500, New Duration(TimeSpan.FromSeconds(60)))\n            myClock = myDoubleAnimation.CreateClock()\n            myRectangle.ApplyAnimationClock(Rectangle.WidthProperty, myClock)\n            myClock.Controller.Stop()\n\n\n            &#39;\n            &#39; Create some buttons to control the storyboard\n            &#39; and a panel to contain them.\n            &#39;\n            Dim buttonPanel As New StackPanel()\n            buttonPanel.Orientation = Orientation.Horizontal\n            Dim beginButton As New Button()\n            beginButton.Content = &quot;Begin&quot;\n            AddHandler beginButton.Click, AddressOf beginButton_Clicked\n            buttonPanel.Children.Add(beginButton)\n            Dim pauseButton As New Button()\n            pauseButton.Content = &quot;Pause&quot;\n            AddHandler pauseButton.Click, AddressOf pauseButton_Clicked\n            buttonPanel.Children.Add(pauseButton)\n            Dim resumeButton As New Button()\n            resumeButton.Content = &quot;Resume&quot;\n            AddHandler resumeButton.Click, AddressOf resumeButton_Clicked\n            buttonPanel.Children.Add(resumeButton)\n            Dim skipToFillButton As New Button()\n            skipToFillButton.Content = &quot;Skip to Fill&quot;\n            AddHandler skipToFillButton.Click, AddressOf skipToFillButton_Clicked\n            buttonPanel.Children.Add(skipToFillButton)\n            Dim setSpeedRatioButton As New Button()\n            setSpeedRatioButton.Content = &quot;Triple Speed&quot;\n            AddHandler setSpeedRatioButton.Click, AddressOf setSpeedRatioButton_Clicked\n            buttonPanel.Children.Add(setSpeedRatioButton)\n            Dim stopButton As New Button()\n            stopButton.Content = &quot;Stop&quot;\n            AddHandler stopButton.Click, AddressOf stopButton_Clicked\n            buttonPanel.Children.Add(stopButton)\n            Dim removeButton As New Button()\n            removeButton.Content = &quot;Remove&quot;\n            AddHandler removeButton.Click, AddressOf removeButton_Clicked\n            buttonPanel.Children.Add(removeButton)\n\n            myStackPanel.Children.Add(buttonPanel)\n\n            &#39; Create some controls to display the\n            &#39; storyboard&#39;s current time and the\n            &#39; current width of the rectangle.\n            Dim seekPanel As New StackPanel()\n            seekPanel.Margin = New Thickness(10)\n            Dim aPanel As New StackPanel()\n            Dim aLabel As New Label()\n            aPanel.Orientation = Orientation.Horizontal\n            aLabel.Content = &quot;Current Time: &quot;\n            aPanel.Children.Add(aLabel)\n            currentTimeIndicator = New TextBlock()\n            aPanel.Children.Add(currentTimeIndicator)\n            seekPanel.Children.Add(aPanel)\n\n            aPanel = New StackPanel()\n            aPanel.Orientation = Orientation.Horizontal\n            aLabel = New Label()\n            aLabel.Content = &quot;Rectangle Width: &quot;\n            aPanel.Children.Add(aLabel)\n            rectangleWidthIndicator = New TextBlock()\n            rectangleWidthIndicator.Text = myRectangle.Width.ToString()\n            aPanel.Children.Add(rectangleWidthIndicator)\n            seekPanel.Children.Add(aPanel)\n\n\n            &#39; Create some controls to enable the\n            &#39; user to specify a seek position.\n\n            aPanel = New StackPanel()\n            aPanel.Orientation = Orientation.Horizontal\n            aLabel = New Label()\n            aLabel.Content = &quot;Seek Offset: &quot;\n            aPanel.Children.Add(aLabel)\n            seekDestination = New TextBox()\n            seekDestination.Text = &quot;0&quot;\n            aPanel.Children.Add(seekDestination)\n            seekPanel.Children.Add(aPanel)\n\n\n            Dim seekButton As New Button()\n            seekButton.Content = &quot;Seek&quot;\n            AddHandler seekButton.Click, AddressOf seekButton_Clicked\n            seekPanel.Children.Add(seekButton)\n            Dim seekAlignedToLastTickButton As New Button()\n            seekAlignedToLastTickButton.Content = &quot;Seek Aligned to Last Tick&quot;\n            AddHandler seekAlignedToLastTickButton.Click, AddressOf seekAlignedToLastTickButton_Clicked\n            seekPanel.Children.Add(seekAlignedToLastTickButton)\n\n            myStackPanel.Children.Add(seekPanel)\n\n            Me.Content = myStackPanel\n\n            AddHandler myClock.CurrentTimeInvalidated, AddressOf myClock_CurrentTimeInvalidated\n\t\tEnd Sub\n\n\t\t&#39; Begins the clock.\n\t\tPrivate Sub beginButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\n\t\t\tmyClock.Controller.Begin()\n\t\tEnd Sub\n\n\t\t&#39; Pauses the clock.\n\t\tPrivate Sub pauseButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\tmyClock.Controller.Pause()\n\n\t\tEnd Sub\n\n\t\t&#39; Resumes the clock.\n\t\tPrivate Sub resumeButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\tmyClock.Controller.Resume()\n\n\t\tEnd Sub\n\n\t\t&#39; Advances the clock to its fill period.\n\t\tPrivate Sub skipToFillButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\tmyClock.Controller.SkipToFill()\n\n\t\tEnd Sub\n\n\t\t&#39; Updates the clock&#39;s speed.\n\t\tPrivate Sub setSpeedRatioButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\t&#39; Makes the clock progress three times as fast as normal.\n\t\t\tmyClock.Controller.SpeedRatio = 3\n\n\t\tEnd Sub\n\n\t\t&#39; Stops the clock.\n\t\tPrivate Sub stopButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\tmyClock.Controller.Stop()\n\n\t\tEnd Sub\n\n\t\t&#39; Removes the clock.\n\t\tPrivate Sub removeButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\tmyClock.Controller.Remove()\n\n\t\tEnd Sub\n\n\t\tPrivate Sub seekButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\t\t\tTry\n\n\t\t\t\t&#39; The rectangle width will probably not be at its new\n\t\t\t\t&#39; value when this call is made, because the \n\t\t\t\t&#39; clock probably hasn&#39;t ticked yet.\n\t\t\t\tDim seekTime As TimeSpan = TimeSpan.Parse(seekDestination.Text)\n\t\t\t\tmyClock.Controller.Seek(seekTime, TimeSeekOrigin.BeginTime)\n\t\t\t\trectangleWidthIndicator.Text = myRectangle.Width.ToString()\n\n\t\t\tCatch ex As FormatException\n\t\t\t\tMessageBox.Show(&quot;Invalid TimeSpan value.&quot;)\n\t\t\t\tseekDestination.Focus()\n\t\t\tEnd Try\n\t\tEnd Sub\n\n\t\tPrivate Sub seekAlignedToLastTickButton_Clicked(ByVal sender As Object, ByVal args As RoutedEventArgs)\n\n\t\t\tTry\n\n\t\t\t\t&#39; The rectangle width will be at its new\n\t\t\t\t&#39; value when this call is made, because SeekAlignedToLastTick \n\t\t\t\t&#39; operation immediately updates timeline and animation\n\t\t\t\t&#39; values.        \n\t\t\t\tDim seekTime As TimeSpan = TimeSpan.Parse(seekDestination.Text)\n\t\t\t\tmyClock.Controller.SeekAlignedToLastTick(seekTime, TimeSeekOrigin.BeginTime)\n\t\t\t\trectangleWidthIndicator.Text = myRectangle.Width.ToString()\n\n\t\t\tCatch ex As FormatException\n\t\t\t\tMessageBox.Show(&quot;Invalid TimeSpan value.&quot;)\n\t\t\t\tseekDestination.Focus()\n\t\t\tEnd Try\n\t\tEnd Sub\n\n\t\tPrivate Sub myClock_CurrentTimeInvalidated(ByVal sender As Object, ByVal e As EventArgs)\n\n\t\t\tcurrentTimeIndicator.Text = myClock.CurrentTime.ToString()\n\n\t\tEnd Sub\n\n\n\n  End Class\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"ClockController_procedural_snip#ClockControllerSeekExample\">using System;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Media;\nusing System.Windows.Media.Animation;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing System.Data;\nusing System.Xml;\nusing System.Configuration;\n\n\n\nnamespace SDKSample\n{\n    /// &lt;summary&gt;\n    /// Shows how to interactively control a clock.\n    /// &lt;/summary&gt;\n\n  public class SeekAlignedToLastTickExample : Page\n    {\n    \n        private AnimationClock myClock;\n        private TextBlock currentTimeIndicator;\n        private TextBox seekDestination;\n        private TextBlock rectangleWidthIndicator;\n        private Rectangle myRectangle;\n        \n        public SeekAlignedToLastTickExample()\n        {\n        \n \n        \n            this.WindowTitle = &quot;Controlling a Storyboard&quot;;\n            this.Background = Brushes.White;\n\n            StackPanel myStackPanel = new StackPanel();\n            myStackPanel.Margin = new Thickness(20);\n            \n            // Create a rectangle.\n            myRectangle = new Rectangle();\n            myRectangle.Width = 100;\n            myRectangle.Height = 20;\n            myRectangle.Margin = new Thickness(12,0,0,5);\n            myRectangle.Fill = new SolidColorBrush(Color.FromArgb(170, 51, 51, 255));\n            myRectangle.HorizontalAlignment = HorizontalAlignment.Left;\n            myStackPanel.Children.Add(myRectangle);                    \n            \n            //\n            // Create an animation and a storyboard to animate the\n            // rectangle.\n            //\n            DoubleAnimation myDoubleAnimation = \n                new DoubleAnimation(100, 500, new Duration(TimeSpan.FromSeconds(60)));  \n            myClock = myDoubleAnimation.CreateClock();\n            myRectangle.ApplyAnimationClock(Rectangle.WidthProperty, myClock);\n            myClock.Controller.Stop();\n \n            \n            //\n            // Create some buttons to control the storyboard\n            // and a panel to contain them.\n            //\n            StackPanel buttonPanel = new StackPanel();\n            buttonPanel.Orientation = Orientation.Horizontal;\n            Button beginButton = new Button();\n            beginButton.Content = &quot;Begin&quot;;\n            beginButton.Click += new RoutedEventHandler(beginButton_Clicked);            \n            buttonPanel.Children.Add(beginButton);\n            Button pauseButton = new Button();\n            pauseButton.Content = &quot;Pause&quot;;\n            pauseButton.Click +=new RoutedEventHandler(pauseButton_Clicked);\n            buttonPanel.Children.Add(pauseButton);\n            Button resumeButton = new Button();\n            resumeButton.Content = &quot;Resume&quot;;\n            resumeButton.Click +=new RoutedEventHandler(resumeButton_Clicked);\n            buttonPanel.Children.Add(resumeButton);\n            Button skipToFillButton = new Button();\n            skipToFillButton.Content = &quot;Skip to Fill&quot;;\n            skipToFillButton.Click +=new RoutedEventHandler(skipToFillButton_Clicked);\n            buttonPanel.Children.Add(skipToFillButton);\n            Button setSpeedRatioButton = new Button();\n            setSpeedRatioButton.Content = &quot;Triple Speed&quot;;\n            setSpeedRatioButton.Click +=new RoutedEventHandler(setSpeedRatioButton_Clicked);\n            buttonPanel.Children.Add(setSpeedRatioButton);\n            Button stopButton = new Button();\n            stopButton.Content = &quot;Stop&quot;;\n            stopButton.Click +=new RoutedEventHandler(stopButton_Clicked);\n            buttonPanel.Children.Add(stopButton);\n            Button removeButton = new Button();\n            removeButton.Content = &quot;Remove&quot;;\n            removeButton.Click +=new RoutedEventHandler(removeButton_Clicked);\n            buttonPanel.Children.Add(removeButton);            \n            \n            myStackPanel.Children.Add(buttonPanel);    \n            \n            // Create some controls to display the\n            // storyboard&#39;s current time and the\n            // current width of the rectangle.\n            StackPanel seekPanel = new StackPanel();\n            seekPanel.Margin = new Thickness(10);\n            StackPanel aPanel = new StackPanel();\n            Label aLabel = new Label();\n            aPanel.Orientation = Orientation.Horizontal;\n            aLabel.Content = &quot;Current Time: &quot;;\n            aPanel.Children.Add(aLabel);\n            currentTimeIndicator = new TextBlock();\n            aPanel.Children.Add(currentTimeIndicator);\n            seekPanel.Children.Add(aPanel);\n            \n            aPanel = new StackPanel();\n            aPanel.Orientation = Orientation.Horizontal;\n            aLabel = new Label();\n            aLabel.Content = &quot;Rectangle Width: &quot;;\n            aPanel.Children.Add(aLabel);\n            rectangleWidthIndicator = new TextBlock();\n            rectangleWidthIndicator.Text = myRectangle.Width.ToString(); \n            aPanel.Children.Add(rectangleWidthIndicator);\n            seekPanel.Children.Add(aPanel);\n            \n            \n            // Create some controls to enable the\n            // user to specify a seek position.\n            \n            aPanel = new StackPanel();\n            aPanel.Orientation = Orientation.Horizontal;\n            aLabel = new Label();\n            aLabel.Content = &quot;Seek Offset: &quot; ;\n            aPanel.Children.Add(aLabel);\n            seekDestination = new TextBox();\n            seekDestination.Text = &quot;0&quot;;\n            aPanel.Children.Add(seekDestination);       \n            seekPanel.Children.Add(aPanel);\n            \n            \n            Button seekButton = new Button();\n            seekButton.Content = &quot;Seek&quot;;\n            seekButton.Click += new RoutedEventHandler(seekButton_Clicked);\n            seekPanel.Children.Add(seekButton);\n            Button seekAlignedToLastTickButton = new Button();\n            seekAlignedToLastTickButton.Content = &quot;Seek Aligned to Last Tick&quot;;\n            seekAlignedToLastTickButton.Click += new RoutedEventHandler(seekAlignedToLastTickButton_Clicked);\n            seekPanel.Children.Add(seekAlignedToLastTickButton);           \n            \n            myStackPanel.Children.Add(seekPanel);\n            \n            this.Content = myStackPanel;   \n            \n            myClock.CurrentTimeInvalidated += new EventHandler(myClock_CurrentTimeInvalidated);\n        }\n        \n        // Begins the clock.\n        private void beginButton_Clicked(object sender, RoutedEventArgs args)\n        {\n\n            myClock.Controller.Begin();         \n        }\n        \n        // Pauses the clock.\n        private void pauseButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            myClock.Controller.Pause();         \n        \n        }\n\n        // Resumes the clock.\n        private void resumeButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            myClock.Controller.Resume();        \n        \n        }\n\n        // Advances the clock to its fill period.\n        private void skipToFillButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            myClock.Controller.SkipToFill();          \n        \n        }\n\n        // Updates the clock&#39;s speed.\n        private void setSpeedRatioButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            // Makes the clock progress three times as fast as normal.\n            myClock.Controller.SpeedRatio = 3;        \n        \n        }\n\n        // Stops the clock.\n        private void stopButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            myClock.Controller.Stop();        \n        \n        }\n\n        // Removes the clock.\n        private void removeButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            myClock.Controller.Remove();        \n        \n        }        \n        \n        private void seekButton_Clicked(object sender, RoutedEventArgs args)\n        {\n            try {\n            \n                // The rectangle width will probably not be at its new\n                // value when this call is made, because the \n                // clock probably hasn&#39;t ticked yet.\n                TimeSpan seekTime = TimeSpan.Parse(seekDestination.Text);\n                myClock.Controller.Seek(seekTime, TimeSeekOrigin.BeginTime);\n                rectangleWidthIndicator.Text = myRectangle.Width.ToString();\n            \n            }catch(FormatException ex)\n            {\n                MessageBox.Show(&quot;Invalid TimeSpan value.&quot;);\n                seekDestination.Focus();\n            }\n        }\n        \n        private void seekAlignedToLastTickButton_Clicked(object sender, RoutedEventArgs args)\n        {\n\n            try {\n            \n                // The rectangle width will be at its new\n                // value when this call is made, because SeekAlignedToLastTick \n                // operation immediately updates timeline and animation\n                // values.        \n                TimeSpan seekTime = TimeSpan.Parse(seekDestination.Text);\n                myClock.Controller.SeekAlignedToLastTick(seekTime, TimeSeekOrigin.BeginTime);\n                rectangleWidthIndicator.Text = myRectangle.Width.ToString();\n            \n            }catch(FormatException ex)\n            {\n                MessageBox.Show(&quot;Invalid TimeSpan value.&quot;);\n                seekDestination.Focus();\n            }    \n        }\n        \n        private void myClock_CurrentTimeInvalidated(object sender, EventArgs e)\n        {\n        \n            currentTimeIndicator.Text = myClock.CurrentTime.ToString();\n            \n        }\n        \n        \n        \n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_ClockController_SkipToFill\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_ClockController_SkipToFill_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SkipToFill()</div>        \r\n          </div>\r\n    \r\n            <p>Advances the current time of the target <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a> to the end of its active period.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SkipToFill ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method advances the target clock&#39;s current time to the end of its active period; the clock&#39;s behavior at this point is specified by the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_FillBehavior_\" data-linktype=\"relative-path\">FillBehavior</a> setting of its <a class=\"xref\" href=\"system.windows.media.animation.timeline\" data-linktype=\"relative-path\">Timeline</a>. If the timeline&#39;s <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_FillBehavior_\" data-linktype=\"relative-path\">FillBehavior</a> property is set to <a class=\"xref\" href=\"system.windows.media.animation.fillbehavior\" data-linktype=\"relative-path\">FillBehavior</a>, the clock fills; if the property is set to <a class=\"xref\" href=\"system.windows.media.animation.fillbehavior\" data-linktype=\"relative-path\">FillBehavior</a>, the clock stops.  </p>\n<p> This method has an effect only if the target clock&#39;s <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_CurrentState_\" data-linktype=\"relative-path\">CurrentState</a> is <a class=\"xref\" href=\"system.windows.media.animation.clockstate\" data-linktype=\"relative-path\">ClockState</a>.  </p>\n<p> This method has no effect on the timing tree until the next time a tick is processed. As a side-effect, the appropriate events also will not be raised until then.  </p>\n<p> Advancing a storyboard to its fill period triggers the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentGlobalSpeedInvalidated\" data-linktype=\"relative-path\">CurrentGlobalSpeedInvalidated</a> and <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_CurrentStateInvalidated\" data-linktype=\"relative-path\">CurrentStateInvalidated</a> events.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Media_Animation_ClockController_Stop\">\r\n    \r\n            <a id=\"System_Windows_Media_Animation_ClockController_Stop_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Stop()</div>        \r\n          </div>\r\n    \r\n            <p>Stops the target <a class=\"xref\" href=\"system.windows.media.animation.clock\" data-linktype=\"relative-path\">Clock</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Stop ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method changes the target clock&#39;s <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_CurrentState_\" data-linktype=\"relative-path\">CurrentState</a> to <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_Stopped_\" data-linktype=\"relative-path\">Stopped</a>.  </p>\n<p> A <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_Stopped_\" data-linktype=\"relative-path\">Stopped</a> clock can be restarted by using the <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller#System_Windows_Media_Animation_ClockController_Begin_\" data-linktype=\"relative-path\">Begin</a>, <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller#System_Windows_Media_Animation_ClockController_Seek_\" data-linktype=\"relative-path\">Seek</a>, or <a class=\"xref\" href=\"system.windows.media.animation.clockcontroller#System_Windows_Media_Animation_ClockController_SeekAlignedToLastTick_\" data-linktype=\"relative-path\">SeekAlignedToLastTick</a> method.  </p>\n<p> This method has no effect on the timing tree until the next time a tick is processed. As a side-effect, the appropriate events also will not be raised until then.  </p>\n<p> Stopping a clock triggers the <a class=\"xref\" href=\"system.windows.media.animation.timeline#System_Windows_Media_Animation_Timeline_CurrentGlobalSpeedInvalidated\" data-linktype=\"relative-path\">CurrentGlobalSpeedInvalidated</a> and <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_CurrentStateInvalidated\" data-linktype=\"relative-path\">CurrentStateInvalidated</a> events, but not the <a class=\"xref\" href=\"system.windows.media.animation.clock#System_Windows_Media_Animation_Clock_Completed\" data-linktype=\"relative-path\">Completed</a> event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Media.Animation.ClockController.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Media.Animation.ClockController.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.ClockController\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.ClockController.Begin\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.ClockController.Clock\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.ClockController.Pause\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.ClockController.Remove\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.ClockController.Resume\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.ClockController.Seek\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.ClockController.SkipToFill\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.ClockController.SpeedRatio\">\r\n<meta name=\"APIName\" content=\"System.Windows.Media.Animation.ClockController.Stop\">\r\n<meta name=\"APILocation\" content=\"PresentationCore.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"f3ff706e-16a6-8ca4-4305-9ea336a0faff\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Interactively controls a .\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows.Media.Animation/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Media.Animation.ClockController\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Media.Animation.ClockController.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Media.Animation.ClockController.yml","open_to_public_contributors":true,"api_name":["System.Windows.Media.Animation.ClockController","System.Windows.Media.Animation.ClockController.Begin","System.Windows.Media.Animation.ClockController.Clock","System.Windows.Media.Animation.ClockController.Pause","System.Windows.Media.Animation.ClockController.Remove","System.Windows.Media.Animation.ClockController.Resume","System.Windows.Media.Animation.ClockController.Seek","System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick","System.Windows.Media.Animation.ClockController.SkipToFill","System.Windows.Media.Animation.ClockController.SpeedRatio","System.Windows.Media.Animation.ClockController.Stop"],"api_location":["PresentationCore.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Media.Animation.ClockController","System::Windows::Media::Animation::ClockController","System.Windows.Media.Animation.ClockController.Begin","System::Windows::Media::Animation::ClockController::Begin","System.Windows.Media.Animation.ClockController.Clock","System::Windows::Media::Animation::ClockController::Clock","System.Windows.Media.Animation.ClockController.Pause","System::Windows::Media::Animation::ClockController::Pause","System.Windows.Media.Animation.ClockController.Remove","System::Windows::Media::Animation::ClockController::Remove","System.Windows.Media.Animation.ClockController.Resume","System::Windows::Media::Animation::ClockController::Resume","System.Windows.Media.Animation.ClockController.Seek","System::Windows::Media::Animation::ClockController::Seek","System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick","System::Windows::Media::Animation::ClockController::SeekAlignedToLastTick","System.Windows.Media.Animation.ClockController.SkipToFill","System::Windows::Media::Animation::ClockController::SkipToFill","System.Windows.Media.Animation.ClockController.SpeedRatio","System::Windows::Media::Animation::ClockController::SpeedRatio","System.Windows.Media.Animation.ClockController.Stop","System::Windows::Media::Animation::ClockController::Stop"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"f3ff706e-16a6-8ca4-4305-9ea336a0faff","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows.Media.Animation/ClockController.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ClockController class | Microsoft Docs","_op_ogTitle":"ClockController class","description":"Interactively controls a .\n","toc_asset_id":"_splitted/System.Windows.Media.Animation/toc.json","toc_rel":"_splitted/System.Windows.Media.Animation/toc.json","source_url":"","ms.assetid":"System.Windows.Media.Animation.ClockController","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.media.animation.clockcontroller","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.media.animation.clockcontroller","fileRelativePath":"System.Windows.Media.Animation.ClockController.html"},"themesRelativePathToOutputRoot":"_themes/"}