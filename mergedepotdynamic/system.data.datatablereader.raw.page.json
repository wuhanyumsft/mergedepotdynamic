{"content":"    \r\n    <h1 id=\"System_Data_DataTableReader\">\r\n      <span class=\"lang-csharp\">DataTableReader</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>The DataTableReader obtains the contents of one or more <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> objects in the form of one or more read-only, forward-only result sets.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public sealed class DataTableReader : System.Data.Common.DbDataReader</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.data.common.dbdatareader\" data-linktype=\"relative-path\">System.Data.Common.DbDataReader</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">DataTableReader</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.data.common.dbdatareader#System_Data_Common_DbDataReader_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.data.common.dbdatareader#System_Data_Common_DbDataReader_Dispose_System_Boolean_\" data-linktype=\"relative-path\">Dispose(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.data.common.dbdatareader#System_Data_Common_DbDataReader_GetData_System_Int32_\" data-linktype=\"relative-path\">GetData(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.data.common.dbdatareader#System_Data_Common_DbDataReader_GetDbDataReader_System_Int32_\" data-linktype=\"relative-path\">GetDbDataReader(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.data.common.dbdatareader#System_Data_Common_DbDataReader_GetFieldValue__1_System_Int32_\" data-linktype=\"relative-path\">GetFieldValue&lt;T&gt;(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.data.common.dbdatareader#System_Data_Common_DbDataReader_GetFieldValueAsync__1_System_Int32_\" data-linktype=\"relative-path\">GetFieldValueAsync&lt;T&gt;(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.data.common.dbdatareader#System_Data_Common_DbDataReader_GetFieldValueAsync__1_System_Int32_System_Threading_CancellationToken_\" data-linktype=\"relative-path\">GetFieldValueAsync&lt;T&gt;(Int32,CancellationToken)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.data.common.dbdatareader#System_Data_Common_DbDataReader_GetStream_System_Int32_\" data-linktype=\"relative-path\">GetStream(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.data.common.dbdatareader#System_Data_Common_DbDataReader_GetTextReader_System_Int32_\" data-linktype=\"relative-path\">GetTextReader(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.data.common.dbdatareader#System_Data_Common_DbDataReader_IsDBNullAsync_System_Int32_\" data-linktype=\"relative-path\">IsDBNullAsync(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.data.common.dbdatareader#System_Data_Common_DbDataReader_IsDBNullAsync_System_Int32_System_Threading_CancellationToken_\" data-linktype=\"relative-path\">IsDBNullAsync(Int32,CancellationToken)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.data.common.dbdatareader#System_Data_Common_DbDataReader_NextResultAsync\" data-linktype=\"relative-path\">NextResultAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.data.common.dbdatareader#System_Data_Common_DbDataReader_NextResultAsync_System_Threading_CancellationToken_\" data-linktype=\"relative-path\">NextResultAsync(CancellationToken)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.data.common.dbdatareader#System_Data_Common_DbDataReader_ReadAsync\" data-linktype=\"relative-path\">ReadAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.data.common.dbdatareader#System_Data_Common_DbDataReader_ReadAsync_System_Threading_CancellationToken_\" data-linktype=\"relative-path\">ReadAsync(CancellationToken)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.data.common.dbdatareader#System_Data_Common_DbDataReader_System_Data_IDataRecord_GetData_System_Int32_\" data-linktype=\"relative-path\">IDataRecord.GetData(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.data.common.dbdatareader#System_Data_Common_DbDataReader_VisibleFieldCount\" data-linktype=\"relative-path\">VisibleFieldCount</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The DataTableReader works much like any other data reader, such as the <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a>, except that the DataTableReader provides for iterating over rows in a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>. In other words, it provides for iterating over rows in a cache. The cached data can be modified while the DataTableReader is active, and the reader automatically maintains its position.  </p>\n<p> When you create a DataTableReader from a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>, the resulting DataTableReader object contains one result set with the same data as the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> from which it was created, except for any rows that have been marked as deleted. The columns appear in the same order as in the original <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>. The structure of the returned result is identical in schema and data to the original <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>. A DataTableReader that was created by calling the &lt;xref:System.Data.DataSet.GetDataReader%2A&gt; method of a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> object contains multiple result sets if the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a>contains more than one table. The results are in the same sequence as the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>objects in the <a class=\"xref\" href=\"system.data.datatablecollection\" data-linktype=\"relative-path\">DataTableCollection</a> of the <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> object.  </p>\n<p> The returned result set contains only the current version of each <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a>; rows that are marked for deletion are skipped.  </p>\n<p> The <code>DataTableReader</code> provides a stable iterator; that is, the contents of the <code>DataTableReader</code> are not invalidated if the size of the underlying collection is modified during iteration. For example, if one or more rows in the <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_Rows_\" data-linktype=\"relative-path\">Rows</a> collection are deleted or removed during iteration, the current position within the <code>DataTableReader</code> is maintained appropriately and it does not invalidate the iterator.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader__ctor_System_Data_DataTable_\" data-linktype=\"self-bookmark\">DataTableReader(DataTable)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> class by using data from the supplied <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader__ctor_System_Data_DataTable___\" data-linktype=\"self-bookmark\">DataTableReader(DataTable[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> class using the supplied array of <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> objects.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader_Depth\" data-linktype=\"self-bookmark\">Depth</a></div>\r\n          </td>\r\n            <td>\r\n            <p>The depth of nesting for the current row of the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader_FieldCount\" data-linktype=\"self-bookmark\">FieldCount</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the number of columns in the current row.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader_HasRows\" data-linktype=\"self-bookmark\">HasRows</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> contains one or more rows.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader_IsClosed\" data-linktype=\"self-bookmark\">IsClosed</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> is closed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader_Item_System_Int32_\" data-linktype=\"self-bookmark\">Item(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the specified column in its native format given the column ordinal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader_Item_System_String_\" data-linktype=\"self-bookmark\">Item(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the specified column in its native format given the column name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader_RecordsAffected\" data-linktype=\"self-bookmark\">RecordsAffected</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of rows inserted, changed, or deleted by execution of the SQL statement.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader_Close\" data-linktype=\"self-bookmark\">Close()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Closes the current <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader_GetBoolean_System_Int32_\" data-linktype=\"self-bookmark\">GetBoolean(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the specified column as a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader_GetByte_System_Int32_\" data-linktype=\"self-bookmark\">GetByte(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the specified column as a byte.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader_GetBytes_System_Int32_System_Int64_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetBytes(Int32,Int64,Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads a stream of bytes starting at the specified column offset into the buffer as an array starting at the specified buffer offset.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader_GetChar_System_Int32_\" data-linktype=\"self-bookmark\">GetChar(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the specified column as a character.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader_GetChars_System_Int32_System_Int64_System_Char___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetChars(Int32,Int64,Char[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the value of the specified column as a character array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader_GetDataTypeName_System_Int32_\" data-linktype=\"self-bookmark\">GetDataTypeName(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a string representing the data type of the specified column.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader_GetDateTime_System_Int32_\" data-linktype=\"self-bookmark\">GetDateTime(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the specified column as a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader_GetDecimal_System_Int32_\" data-linktype=\"self-bookmark\">GetDecimal(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the specified column as a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader_GetDouble_System_Int32_\" data-linktype=\"self-bookmark\">GetDouble(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the column as a double-precision floating point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader_GetEnumerator\" data-linktype=\"self-bookmark\">GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerator that can be used to iterate through the item collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader_GetFieldType_System_Int32_\" data-linktype=\"self-bookmark\">GetFieldType(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> that is the data type of the object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader_GetFloat_System_Int32_\" data-linktype=\"self-bookmark\">GetFloat(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the specified column as a single-precision floating point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader_GetGuid_System_Int32_\" data-linktype=\"self-bookmark\">GetGuid(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the specified column as a globally-unique identifier (GUID).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader_GetInt16_System_Int32_\" data-linktype=\"self-bookmark\">GetInt16(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the specified column as a 16-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader_GetInt32_System_Int32_\" data-linktype=\"self-bookmark\">GetInt32(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the specified column as a 32-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader_GetInt64_System_Int32_\" data-linktype=\"self-bookmark\">GetInt64(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the specified column as a 64-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader_GetName_System_Int32_\" data-linktype=\"self-bookmark\">GetName(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the specified column as a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader_GetOrdinal_System_String_\" data-linktype=\"self-bookmark\">GetOrdinal(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the column ordinal, given the name of the column.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader_GetProviderSpecificFieldType_System_Int32_\" data-linktype=\"self-bookmark\">GetProviderSpecificFieldType(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the type of the specified column in provider-specific format.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader_GetProviderSpecificValue_System_Int32_\" data-linktype=\"self-bookmark\">GetProviderSpecificValue(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the specified column in provider-specific format.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader_GetProviderSpecificValues_System_Object___\" data-linktype=\"self-bookmark\">GetProviderSpecificValues(Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Fills the supplied array with provider-specific type information for all the columns in the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader_GetSchemaTable\" data-linktype=\"self-bookmark\">GetSchemaTable()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> that describes the column metadata of the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader_GetString_System_Int32_\" data-linktype=\"self-bookmark\">GetString(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the specified column as a string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader_GetValue_System_Int32_\" data-linktype=\"self-bookmark\">GetValue(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the specified column in its native format.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader_GetValues_System_Object___\" data-linktype=\"self-bookmark\">GetValues(Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Populates an array of objects with the column values of the current row.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader_IsDBNull_System_Int32_\" data-linktype=\"self-bookmark\">IsDBNull(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the column contains non-existent or missing values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader_NextResult\" data-linktype=\"self-bookmark\">NextResult()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Advances the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> to the next result set, if any.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_DataTableReader_Read\" data-linktype=\"self-bookmark\">Read()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Advances the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> to the next record.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader__ctor_System_Data_DataTable_\">\r\n    \r\n            <a id=\"System_Data_DataTableReader__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DataTableReader(DataTable)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> class by using data from the supplied <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DataTableReader (System.Data.DataTable dataTable);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dataTable</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> from which the new <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> obtains its result set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader__ctor_System_Data_DataTable___\">\r\n    \r\n            <a id=\"System_Data_DataTableReader__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DataTableReader(DataTable[])</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> class using the supplied array of <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> objects.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DataTableReader (System.Data.DataTable[] dataTables);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dataTables</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The array of <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> objects that supplies the results for the new <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you must create a <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> based on all or a subset of the tables within a specific &lt;xref:System.Data.Dataset&gt;, call the <code>DataSet</code>&#39;s &lt;xref:System.Data.DataSet.GetDataReader%2A&gt; method. If you want to create a new <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> instance based on a group of <code>DataTable</code> instances that are not otherwise related, use this constructor. You can also take advantage of this constructor to rearrange the ordering of the <code>DataTables</code> within the <code>DataTableReader</code>, if their ordering within their source <code>DataSet</code> does not meet your needs.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example, the TestConstructor method creates two <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>instances. In order to demonstrate this constructor for the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> class, the sample creates a new <code>DataTableReader</code> based on an array that contains the two <code>DataTables</code>, and performs a simple operation, printing the contents from the first few columns to the console window. In order to test this application, create a new Console application, and paste the sample code into the newly created file.  </p>\n<pre><code class=\"lang-vb\" name=\"DataWorks DataTableReader.ctor#1\">   Private Sub TestConstructor()\n      &#39; Create two data adapters, one for each of the two\n      &#39; DataTables to be filled.\n      Dim customerDataTable As DataTable = GetCustomers()\n      Dim productDataTable As DataTable = GetProducts()\n\n      &#39; Create the new DataTableReader.\n      Using reader As New DataTableReader( _\n         New DataTable() {customerDataTable, productDataTable})\n\n         &#39; Print the contents of each of the result sets.\n         Do\n            PrintColumns(reader)\n         Loop While reader.NextResult()\n      End Using\n\n      Console.WriteLine(&quot;Press Enter to finish.&quot;)\n      Console.ReadLine()\n\n   End Sub\n\n   Private Function GetCustomers() As DataTable\n      &#39; Create sample Customers table, in order\n      &#39; to demonstrate the behavior of the DataTableReader.\n      Dim table As New DataTable\n\n      &#39; Create two columns, ID and Name.\n      Dim idColumn As DataColumn = table.Columns.Add(&quot;ID&quot;, _\n        GetType(Integer))\n      table.Columns.Add(&quot;Name&quot;, GetType(String))\n\n      &#39; Set the ID column as the primary key column.\n      table.PrimaryKey = New DataColumn() {idColumn}\n\n      table.Rows.Add(New Object() {1, &quot;Mary&quot;})\n      table.Rows.Add(New Object() {2, &quot;Andy&quot;})\n      table.Rows.Add(New Object() {3, &quot;Peter&quot;})\n      table.Rows.Add(New Object() {4, &quot;Russ&quot;})\n      Return table\n   End Function\n\n   Private Function GetProducts() As DataTable\n      &#39; Create sample Products table, in order\n      &#39; to demonstrate the behavior of the DataTableReader.\n      Dim table As New DataTable\n\n      &#39; Create two columns, ID and Name.\n      Dim idColumn As DataColumn = table.Columns.Add(&quot;ID&quot;, _\n        GetType(Integer))\n      table.Columns.Add(&quot;Name&quot;, GetType(String))\n\n      &#39; Set the ID column as the primary key column.\n      table.PrimaryKey = New DataColumn() {idColumn}\n\n      table.Rows.Add(New Object() {1, &quot;Wireless Network Card&quot;})\n      table.Rows.Add(New Object() {2, &quot;Hard Drive&quot;})\n      table.Rows.Add(New Object() {3, &quot;Monitor&quot;})\n      table.Rows.Add(New Object() {4, &quot;CPU&quot;})\n      Return table\n   End Function\n\n   Private Sub PrintColumns( _\n      ByVal reader As DataTableReader)\n\n      &#39; Loop through all the rows in the DataTableReader.\n      Do While reader.Read()\n         For i As Integer = 0 To reader.FieldCount - 1\n            Console.Write(reader(i).ToString() &amp; &quot; &quot;)\n         Next\n         Console.WriteLine()\n      Loop\n   End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks DataTableReader.ctor#1\">    private static void TestConstructor()\n    {\n        // Create two data adapters, one for each of the two\n        // DataTables to be filled.\n        DataTable customerDataTable = GetCustomers();\n        DataTable productDataTable = GetProducts();\n\n        // Create the new DataTableReader.\n        using (DataTableReader reader = new DataTableReader(\n                   new DataTable[] { customerDataTable, productDataTable }))\n        {\n            // Print the contents of each of the result sets.\n            do\n            {\n                PrintColumns(reader);\n            } while (reader.NextResult());\n        }\n\n        Console.WriteLine(&quot;Press Enter to finish.&quot;);\n        Console.ReadLine();\n    }\n\n    private static DataTable GetCustomers()\n    {\n        // Create sample Customers table, in order\n        // to demonstrate the behavior of the DataTableReader.\n        DataTable table = new DataTable();\n      \n        // Create two columns, ID and Name.\n        DataColumn idColumn = table.Columns.Add(&quot;ID&quot;, typeof(int));\n        table.Columns.Add(&quot;Name&quot;, typeof(string ));\n      \n        // Set the ID column as the primary key column.\n        table.PrimaryKey = new DataColumn[] { idColumn };\n\n        table.Rows.Add(new object[] { 1, &quot;Mary&quot; });\n        table.Rows.Add(new object[] { 2, &quot;Andy&quot; });\n        table.Rows.Add(new object[] { 3, &quot;Peter&quot; });\n        table.Rows.Add(new object[] { 4, &quot;Russ&quot; });\n        return table;\n    }\n\n    private static DataTable GetProducts()\n    {\n        // Create sample Products table, in order\n        // to demonstrate the behavior of the DataTableReader.\n        DataTable table = new DataTable();\n      \n        // Create two columns, ID and Name.\n        DataColumn idColumn = table.Columns.Add(&quot;ID&quot;, typeof(int));\n        table.Columns.Add(&quot;Name&quot;, typeof(string ));\n      \n        // Set the ID column as the primary key column.\n        table.PrimaryKey = new DataColumn[] { idColumn };\n\n        table.Rows.Add(new object[] { 1, &quot;Wireless Network Card&quot; });\n        table.Rows.Add(new object[] { 2, &quot;Hard Drive&quot; });\n        table.Rows.Add(new object[] { 3, &quot;Monitor&quot; });\n        table.Rows.Add(new object[] { 4, &quot;CPU&quot; });\n        return table;\n    }\n\n    private static void PrintColumns(DataTableReader reader)\n    {\n        // Loop through all the rows in the DataTableReader\n        while (reader.Read())\n        {\n            for (int i = 0; i &lt; reader.FieldCount; i++)\n            {\n                Console.Write(reader[i] + &quot; &quot;);\n            }\n            Console.WriteLine();\n        }\n    }\n</code></pre><p> The Console window displays the following results:  </p>\n<pre><code>1 Mary  \n2 Andy  \n3 Peter  \n4 Russ  \n1 Wireless Network Card  \n2 Hard Drive  \n3 Monitor  \n4 CPU  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader_Depth\">\r\n    \r\n            <a id=\"System_Data_DataTableReader_Depth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Depth</div>        \r\n          </div>\r\n    \r\n            <p>The depth of nesting for the current row of the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int Depth { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The depth of nesting for the current row; always zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>DataTableReader</code> does not support nesting. The <code>Depth</code> property always returns zero.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader_FieldCount\">\r\n    \r\n            <a id=\"System_Data_DataTableReader_FieldCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FieldCount</div>        \r\n          </div>\r\n    \r\n            <p>Returns the number of columns in the current row.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int FieldCount { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>When not positioned in a valid result set, 0; otherwise the number of columns in the current row.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to retrieve the field count in a closed <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader_HasRows\">\r\n    \r\n            <a id=\"System_Data_DataTableReader_HasRows_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HasRows</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> contains one or more rows.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool HasRows { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> contains one or more rows; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to retrieve information about a closed <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>HasRows</code> property returns information about the current result set. If the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> contains multiple result sets, you can examine the value of the <code>HasRows</code> property immediately after you call the <a class=\"xref\" href=\"system.data.datatablereader#System_Data_DataTableReader_NextResult_\" data-linktype=\"relative-path\">NextResult</a> method in order to determine whether the new result set contains rows.  </p>\n<p> Use the <code>HasRows</code> property to avoid the requirement to call the <a class=\"xref\" href=\"system.data.datatablereader#System_Data_DataTableReader_Read_\" data-linktype=\"relative-path\">Read</a> method of the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> if there are no rows within the current result set.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example fills two <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> instances with data. The first <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> contains one row, and the second contains no rows. The example then creates a <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> that contains both <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> objects, and calls the PrintData method to display the contents of each, checking the value of the HasRows property of each before it makes the call to PrintData.  </p>\n<pre><code class=\"lang-cs\" name=\"DataWorks DataTableReader.HasRows#1\">    private static void TestHasRows()\n    {\n        DataTable customerTable = GetCustomers();\n        DataTable productTable = GetProducts();\n\n        using (DataTableReader reader = new DataTableReader(\n                   new DataTable[] { customerTable, productTable }))\n        {\n            do\n            {\n                if (reader.HasRows)\n                {\n                    PrintData(reader);\n                }\n            } while (reader.NextResult());\n        }\n\n        Console.WriteLine(&quot;Press Enter to finish.&quot;);\n        Console.ReadLine();\n    }\n\n    private static void PrintData(DataTableReader reader)\n    {\n        // Loop through all the rows in the DataTableReader\n        while (reader.Read())\n        {\n            for (int i = 0; i &lt; reader.FieldCount; i++)\n            {\n                Console.Write(reader[i] + &quot; &quot;);\n            }\n            Console.WriteLine();\n        }\n    }\n\n    private static DataTable GetCustomers()\n    {\n        // Create sample Customers table, in order\n        // to demonstrate the behavior of the DataTableReader.\n        DataTable table = new DataTable();\n        // Create two columns, ID and Name.\n        DataColumn idColumn = table.Columns.Add(&quot;ID&quot;, typeof(int));\n        table.Columns.Add(&quot;Name&quot;, typeof(string ));\n        // Set the ID column as the primary key column.\n        table.PrimaryKey = new DataColumn[] { idColumn };\n\n        table.Rows.Add(new object[] { 1, &quot;Mary&quot; });\n        return table;\n    }\n\n    private static DataTable GetProducts()\n    {\n        // Create sample Products table, in order\n        // to demonstrate the behavior of the DataTableReader.\n        DataTable table = new DataTable();\n\n        // Create two columns, ID and Name.\n        DataColumn idColumn = table.Columns.Add(&quot;ID&quot;, typeof(int));\n        table.Columns.Add(&quot;Name&quot;, typeof(string ));\n      \n        // Set the ID column as the primary key column.\n        table.PrimaryKey = new DataColumn[] { idColumn };\n        return table;\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks DataTableReader.HasRows#1\">   Private Sub TestHasRows()\n      &#39;Retrieve one row from the Store table:\n      Dim customerTable As DataTable = GetCustomers()\n      Dim productsTable As DataTable = GetProducts()\n\n      Using reader As New DataTableReader( _\n         New DataTable() {customerTable, productsTable})\n\n         Do\n            If reader.HasRows Then\n               PrintData(reader)\n            End If\n         Loop While reader.NextResult()\n      End Using\n\n      Console.WriteLine(&quot;Press Enter to finish.&quot;)\n      Console.ReadLine()\n   End Sub\n\n   Private Sub PrintData( _\n      ByVal reader As DataTableReader)\n\n      &#39; Loop through all the rows in the DataTableReader.\n      Do While reader.Read()\n         For i As Integer = 0 To reader.FieldCount - 1\n            Console.Write(&quot;{0} &quot;, reader(i))\n         Next\n         Console.WriteLine()\n      Loop\n   End Sub\n   Private Function GetCustomers() As DataTable\n      &#39; Create sample Customers table, in order\n      &#39; to demonstrate the behavior of the DataTableReader.\n      Dim table As New DataTable\n\n      &#39; Create two columns, ID and Name.\n      Dim idColumn As DataColumn = table.Columns.Add(&quot;ID&quot;, GetType(Integer))\n      table.Columns.Add(&quot;Name&quot;, GetType(String))\n\n      &#39; Set the ID column as the primary key column.\n      table.PrimaryKey = New DataColumn() {idColumn}\n\n      table.Rows.Add(New Object() {1, &quot;Mary&quot;})\n      Return table\n   End Function\n\n   Private Function GetProducts() As DataTable\n      &#39; Create sample Products table, in order\n      &#39; to demonstrate the behavior of the DataTableReader.\n      Dim table As New DataTable\n\n      &#39; Create two columns, ID and Name.\n      Dim idColumn As DataColumn = table.Columns.Add(&quot;ID&quot;, GetType(Integer))\n      table.Columns.Add(&quot;Name&quot;, GetType(String))\n\n      &#39; Set the ID column as the primary key column.\n      table.PrimaryKey = New DataColumn() {idColumn}\n\n      Return table\n   End Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader_IsClosed\">\r\n    \r\n            <a id=\"System_Data_DataTableReader_IsClosed_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsClosed</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> is closed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsClosed { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>Returns <code>true</code> if the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> is closed; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.data.datatablereader#System_Data_DataTableReader_Close_\" data-linktype=\"relative-path\">Close</a> is the only method and <code>IsClosed</code> and <a class=\"xref\" href=\"system.data.datatablereader#System_Data_DataTableReader_RecordsAffected_\" data-linktype=\"relative-path\">RecordsAffected</a> are the only properties that can be accessed after the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> has been closed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader_Item_System_Int32_\">\r\n    \r\n            <a id=\"System_Data_DataTableReader_Item_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the specified column in its native format given the column ordinal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override object this[int ordinal] { get; }</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ordinal</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based column ordinal.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The value of the specified column in its native format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index passed was outside the range of 0 to <span class=\"xref\">stem.Data.DataTableReader.FieldCount*</span> - 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This overload for <a class=\"xref\" href=\"system.data.datatablereader#System_Data_DataTableReader_Item_\" data-linktype=\"relative-path\">Item</a> behaves identically to the <a class=\"xref\" href=\"system.data.datatablereader#System_Data_DataTableReader_GetValue_\" data-linktype=\"relative-path\">GetValue</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the contents of all the columns, in all the rows from the supplied <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>. The code uses the <a class=\"xref\" href=\"system.data.datatablereader#System_Data_DataTableReader_Item_\" data-linktype=\"relative-path\">Item</a> method (the indexer, in Microsoft C#) to retrieve the value that is contained in each column.  </p>\n<pre><code class=\"lang-vb\" name=\"DataWorks DataTableReader.Item#1\">Private Sub DisplayItems(ByVal reader As DataTableReader)\n   Dim rowNumber As Integer\n   While reader.Read()\n      Console.WriteLine(&quot;Row &quot; &amp; rowNumber)\n      For i As Integer = 0 To reader.FieldCount - 1\n         Console.WriteLine(&quot;{0}: {1}&quot;, reader.GetName(i), reader.Item(i))\n      Next\n      rowNumber += 1\n   End While\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks DataTableReader.Item#1\">    private static void DisplayItems(DataTableReader reader)\n    {\n        int rowNumber = 0;\n        while (reader.Read())\n        {\n            Console.WriteLine(&quot;Row &quot; + rowNumber);\n            for (int i = 0; i &lt; reader.FieldCount; i++)\n            {\n                Console.WriteLine(&quot;{0}: {1}&quot;, reader.GetName(i), reader[i]);\n            }\n            rowNumber++;\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader_Item_System_String_\">\r\n    \r\n            <a id=\"System_Data_DataTableReader_Item_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the specified column in its native format given the column name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override object this[string name] { get; }</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the column.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The value of the specified column in its native format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The name specified is not a valid column name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.deletedrowinaccessibleexception\" data-linktype=\"relative-path\">DeletedRowInaccessibleException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to retrieve data from a deleted row.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to read or access a column in a closed <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A case-sensitive lookup is performed first. If it fails, a second case-insensitive search is made.  </p>\n<p> This method is kana-width insensitive.  </p>\n<p> This overloaded version of <a class=\"xref\" href=\"system.data.datatablereader#System_Data_DataTableReader_Item_\" data-linktype=\"relative-path\">Item</a> corresponds to calling the <a class=\"xref\" href=\"system.data.datatablereader#System_Data_DataTableReader_GetOrdinal_\" data-linktype=\"relative-path\">GetOrdinal</a> method, and then subsequently calling the <a class=\"xref\" href=\"system.data.datatablereader#System_Data_DataTableReader_GetValue_\" data-linktype=\"relative-path\">GetValue</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>Given a <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> and a column name, the GetValueByName procedure returns the value of the specified column. Before calling this procedure, you must create a new <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> instance and call its Read method at least one time to position the row pointer on a row of data.  </p>\n<pre><code class=\"lang-vb\" name=\"DataWorks DataTableReader.ItemName#1\">Private Function GetValueByName( _\n   ByVal reader As DataTableReader, _\n   ByVal columnName As String) As Object\n\n   &#39; Consider when to use a procedure like this one carefully:\n   &#39; If you&#39;re going to retrieve information from a column\n   &#39; in a loop, it would be better to retrieve the column\n   &#39; ordinal once, store the value, and use the methods\n   &#39; of the DataTableReader class directly. \n   &#39; Use Item(columnName) sparingly.\n   Dim columnValue As Object\n\n   Try\n      columnValue = reader.Item(columnName)\n   Catch ex As ArgumentException\n      &#39; Throw all other errors back out to the caller.\n      columnValue = Nothing\n   End Try\n   Return columnValue\nEnd Function\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks DataTableReader.ItemName#1\">    private static object GetValueByName(\n        DataTableReader reader, string columnName)\n    {\n        // Consider when to use a procedure like this one carefully:\n        // if  you&#39;re going to retrieve information from a column\n        // in a loop, it would be better to retrieve the column\n        // ordinal once, store the value, and use the methods\n        // of the DataTableReader class directly. \n        // Use this string-based indexer sparingly.\n        object columnValue = null;\n\n        try\n        {\n            columnValue = reader[columnName];\n        }\n        catch (ArgumentException ex)\n        {\n            // Throw all other errors back out to the caller.\n            columnValue = null;\n        }\n        return columnValue;\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader_RecordsAffected\">\r\n    \r\n            <a id=\"System_Data_DataTableReader_RecordsAffected_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RecordsAffected</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of rows inserted, changed, or deleted by execution of the SQL statement.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int RecordsAffected { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> does not support this property and always returns 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader_Close\">\r\n    \r\n            <a id=\"System_Data_DataTableReader_Close_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Close()</div>        \r\n          </div>\r\n    \r\n            <p>Closes the current <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Close ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling <code>Close()</code> on a closed <code>DataTableReader</code> object does not raise an error.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader_GetBoolean_System_Int32_\">\r\n    \r\n            <a id=\"System_Data_DataTableReader_GetBoolean_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetBoolean(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the specified column as a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool GetBoolean (int ordinal);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ordinal</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based column ordinal.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>The value of the specified column.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index passed was outside the range of 0 to <span class=\"xref\">stem.Data.DataTableReader.FieldCount*</span> - 1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.deletedrowinaccessibleexception\" data-linktype=\"relative-path\">DeletedRowInaccessibleException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to retrieve data from a deleted row.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to read or access a column in a closed <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The specified column does not contain a <code>Boolean</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>No conversions are performed; therefore the data retrieved must either already be a Boolean or coercible to a Boolean, or an exception is generated.  </p>\n<p> Call <a class=\"xref\" href=\"system.data.datatablereader#System_Data_DataTableReader_IsDBNull_\" data-linktype=\"relative-path\">IsDBNull</a> to see if there are null values before calling this method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the contents of the column numbered 2 within the passed-in <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>. If the value the column within a particular row is null, the code displays the text &lt;NULL&gt;. If the data within the column is not the correct type, the example displays an error message for each row.  </p>\n<pre><code class=\"lang-vb\" name=\"DataWorks DataTableReader.GetBoolean#1\">Private Sub PrintColumn(ByVal reader As DataTableReader)\n   &#39; Loop through all the rows in the DataTableReader\n   While reader.Read()\n      If reader.IsDBNull(2) Then\n         Console.Write(&quot;&lt;NULL&gt;&quot;)\n      Else\n         Try\n            Console.Write(reader.GetBoolean(2))\n         Catch ex As InvalidCastException\n            Console.Write(&quot;Invalid data type.&quot;)\n         End Try\n      End If\n      Console.WriteLine()\n   End While\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks DataTableReader.GetBoolean#1\">    private static void PrintColumn(DataTableReader reader)\n    {\n        // Loop through all the rows in the DataTableReader\n        while (reader.Read())\n        {\n            if (reader.IsDBNull(2))\n            {\n                Console.Write(&quot;&lt;NULL&gt;&quot;);\n            }\n            else\n            {\n                try\n                {\n                    Console.Write(reader.GetBoolean(2));\n                }\n                catch (InvalidCastException)\n                {\n                    Console.Write(&quot;Invalid data type.&quot;);\n                }\n            }\n            Console.WriteLine();\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader_GetByte_System_Int32_\">\r\n    \r\n            <a id=\"System_Data_DataTableReader_GetByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetByte(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the specified column as a byte.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override byte GetByte (int ordinal);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ordinal</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based column ordinal.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p>The value of the specified column.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index passed was outside the range of 0 to <span class=\"xref\">stem.Data.DataTableReader.FieldCount*</span> - 1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.deletedrowinaccessibleexception\" data-linktype=\"relative-path\">DeletedRowInaccessibleException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to retrieve data from a deleted row.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to read or access a column in a closed <code>DataTableReader</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The specified column does not contain a byte.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>No conversions are performed; therefore the data retrieved must already be a byte or coercible to a byte.  </p>\n<p> Call <a class=\"xref\" href=\"system.data.datatablereader#System_Data_DataTableReader_IsDBNull_\" data-linktype=\"relative-path\">IsDBNull</a> to see if there are null values before calling this method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the contents of the column numbered 2 within the passed-in <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>. If the value the column within a particular row is null, the code displays the text &lt;NULL&gt;. If the data within the column is not of the correct type, the example displays an error message for each row.  </p>\n<pre><code class=\"lang-vb\" name=\"DataWorks DataTableReader.GetByte#1\">Private Sub PrintColumn(ByVal reader As DataTableReader)\n   &#39; Loop through all the rows in the DataTableReader\n   While reader.Read()\n      If reader.IsDBNull(2) Then\n         Console.Write(&quot;&lt;NULL&gt;&quot;)\n      Else\n         Try\n            Console.Write(reader.GetByte(2))\n         Catch ex As InvalidCastException\n            Console.Write(&quot;Invalid data type.&quot;)\n         End Try\n      End If\n      Console.WriteLine()\n   End While\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks DataTableReader.GetByte#1\">    private static void PrintColumn(DataTableReader reader)\n    {\n        // Loop through all the rows in the DataTableReader\n        while (reader.Read())\n        {\n            if (reader.IsDBNull(2))\n            {\n                Console.Write(&quot;&lt;NULL&gt;&quot;);\n            }\n            else\n            {\n                try\n                {\n                    Console.Write(reader.GetByte(2));\n                }\n                catch (InvalidCastException)\n                {\n                    Console.Write(&quot;Invalid data type.&quot;);\n                }\n            }\n            Console.WriteLine();\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader_GetBytes_System_Int32_System_Int64_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Data_DataTableReader_GetBytes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetBytes(Int32,Int64,Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reads a stream of bytes starting at the specified column offset into the buffer as an array starting at the specified buffer offset.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override long GetBytes (int ordinal, long dataIndex, byte[] buffer, int bufferIndex, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ordinal</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based column ordinal.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>dataIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index within the field from which to start the read operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The buffer into which to read the stream of bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bufferIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index within the buffer at which to start placing the data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum length to copy into the buffer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The actual number of bytes read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index passed was outside the range of 0 to <span class=\"xref\">stem.Data.DataTableReader.FieldCount*</span> - 1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.deletedrowinaccessibleexception\" data-linktype=\"relative-path\">DeletedRowInaccessibleException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to retrieve data from a deleted row.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to read or access a column in a closed <code>DataTableReader</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The specified column does not contain a byte array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>GetBytes</code> returns the number of available bytes in the field. Most of the time this is the exact length of the field. However, the number returned may be less than the true length of the field if <code>GetBytes</code> has already been used to obtain bytes from the field. This may be the case, for example, when the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> is reading a large data structure into a buffer  </p>\n<p> If you pass a buffer that is <code>null</code> (<code>Nothing</code> in Visual Basic), <code>GetBytes</code> returns the length of the entire field in bytes, not the remaining size based on the buffer offset parameter.  </p>\n<p> No conversions are performed; therefore the data retrieved must already be a byte array or coercible to a byte array.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> based on data in the AdventureWorks sample database, and saves each image retrieved to a separate file in the C:\\ folder. In order to test this application, create a new Console application, reference the System.Drawing.dll assembly, and paste the sample code into the newly created file.  </p>\n<pre><code class=\"lang-cs\" name=\"DataWorks DataTableReader.GetBytes#1\">using System;\nusing System.Data.SqlClient;\nusing System.Data;\nusing System.Drawing;\nusing System.Drawing.Imaging;\nusing System.IO;\n\nclass Class1\n{\n    [STAThread]\n    static void Main(string[] args)\n    {\n        TestGetBytes();\n    }\n\n    static private void TestGetBytes()\n    {\n        // Set up the data adapter, using information from \n        // the AdventureWorks sample database.\n        SqlDataAdapter photoAdapter = SetupDataAdapter( \n            &quot;SELECT ThumbnailPhotoFileName, ThumbNailPhoto &quot; +\n            &quot;FROM Production.ProductPhoto&quot;);\n        // Fill the DataTable.\n        DataTable photoDataTable = new DataTable();\n        photoAdapter.Fill(photoDataTable);\n         \n        using (DataTableReader reader = new DataTableReader(photoDataTable))\n        {\n            while (reader.Read())\n            {\n                String productName = null;\n                try\n                {\n                    // Get the name of the file.\n                    productName = reader.GetString(0);\n                    // Get the length of the field. Pass null\n                    // in the buffer parameter to retrieve the length\n                    // of the data field. Ensure that the field isn&#39;t\n                    // null before continuing.\n                    if (reader.IsDBNull(1))\n                    {\n                        Console.WriteLine(productName + &quot; is unavailable.&quot;);\n                    }\n                    else\n                    {\n                        long len = reader.GetBytes(1, 0, null, 0, 0);\n                        // Create a buffer to hold the bytes, and then\n                        // read the bytes from the DataTableReader.\n                        Byte[] buffer = new Byte[len];\n                        reader.GetBytes(1, 0, buffer, 0, (int)len);\n                        // Create a new Bitmap object, passing the array \n                        // of bytes to the constructor of a MemoryStream.\n                        using (Bitmap productImage = new \n                                   Bitmap(new MemoryStream(buffer)))\n                        {\n                            String fileName = &quot;C:\\\\&quot; + productName;\n                            // Save in gif format.\n                            productImage.Save(fileName, ImageFormat.Gif);\n                            Console.WriteLine(&quot;Successfully created &quot; + fileName);\n                        }\n                    }\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(productName + &quot;: &quot; + ex.Message);\n                }\n            }\n        }\n        Console.WriteLine(&quot;Press Enter to finish.&quot;);\n        Console.ReadLine();\n    }\n\n    static private SqlDataAdapter SetupDataAdapter(String sqlString)\n    {\n        // Assuming all the default settings, create a SqlDataAdapter\n        // working with the AdventureWorks sample database that&#39;s \n        // available with SQL Server.\n        String connectionString = \n            &quot;Data Source=(local);Initial Catalog=AdventureWorks;&quot; +\n            &quot;Integrated Security=true&quot;;\n        return new SqlDataAdapter(sqlString, connectionString);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks DataTableReader.GetBytes#1\">Imports System\nImports System.Data\nImports System.Data.SqlClient\nImports System.Drawing\nImports System.IO\nImports System.Drawing.Imaging\n    \nModule Module1\n   Sub Main()\n      TestGetBytes()\n   End Sub\n   Private Sub TestGetBytes()\n         &#39; Set up the data adapter, using information from \n      &#39; the AdventureWorks sample database.\n      Dim photoAdapter As SqlDataAdapter = _\n         SetupDataAdapter(&quot;SELECT ThumbnailPhotoFileName, &quot; &amp; _\n         &quot;ThumbNailPhoto FROM Production.ProductPhoto&quot;)\n\n      &#39; Fill the DataTable.\n      Dim photoDataTable As New DataTable\n      photoAdapter.Fill(photoDataTable)\n\n      &#39; Create the DataTableReader.\n      Using reader As DataTableReader = New DataTableReader(photoDataTable)\n\n         Dim buffer() As Byte\n         Dim productName As String\n         While reader.Read()\n            Try\n               &#39; Get the name of the file.\n               productName = reader.GetString(0)\n\n               &#39; Get the length of the field. Pass Nothing\n               &#39; in the buffer parameter to retrieve the length\n               &#39; of the data field. Ensure that the field isn&#39;t \n               &#39; null before continuing.\n               If reader.IsDBNull(1) Then\n                  Console.WriteLine( _\n                     productName &amp; &quot; is unavailable.&quot;)\n               Else\n                  &#39; Retrieve the length of the necessary byte array.\n                  Dim len As Long = reader.GetBytes(1, 0, Nothing, 0, 0)\n                  &#39; Create a buffer to hold the bytes, and then \n                  &#39; read the bytes from the DataTableReader.\n                  ReDim buffer(CInt(len))\n                  reader.GetBytes(1, 0, buffer, 0, CInt(len))\n\n                  &#39; Create a new Bitmap object, passing the array\n                  &#39; of bytes to the constructor of a MemoryStream.\n                  Using productImage As New Bitmap(New MemoryStream(buffer))\n                     Dim fileName As String = &quot;C:\\&quot; &amp; productName\n                     &#39; Save in gif format.\n                     productImage.Save( _\n                      fileName, ImageFormat.Gif)\n                     Console.WriteLine(&quot;Successfully created &quot; &amp; _\n                        fileName)\n                  End Using\n               End If\n            Catch ex As Exception\n               Console.WriteLine(productName &amp; &quot;: &quot; &amp; _\n                  ex.Message)\n            End Try\n         End While\n      End Using\n      Console.WriteLine(&quot;Press Enter to finish.&quot;)\n      Console.ReadLine()\n   End Sub\n\n   Private Function SetupDataAdapter( _\n      ByVal sqlString As String) As SqlDataAdapter\n      &#39; Assuming all the default settings, create a SqlDataAdapter\n      &#39; working with the AdventureWorks sample database that&#39;s \n      &#39; available with SQL Server.\n      Dim connectionString As String = _\n         &quot;Data Source=(local);&quot; &amp; _\n         &quot;Initial Catalog=AdventureWorks;&quot; &amp; _\n         &quot;Integrated Security=true&quot;\n      Return New SqlDataAdapter(sqlString, connectionString)\n   End Function\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader_GetChar_System_Int32_\">\r\n    \r\n            <a id=\"System_Data_DataTableReader_GetChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetChar(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the specified column as a character.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override char GetChar (int ordinal);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ordinal</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based column ordinal.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>The value of the column.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index passed was outside the range of 0 to <span class=\"xref\">stem.Data.DataTableReader.FieldCount*</span> - 1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.deletedrowinaccessibleexception\" data-linktype=\"relative-path\">DeletedRowInaccessibleException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to retrieve data from a deleted row.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to read or access a column in a closed <code>DataTableReader</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The specified field does not contain a character.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>No conversions are performed; therefore the data retrieved must already be a character or coercible to a character.  </p>\n<p> Call <a class=\"xref\" href=\"system.data.datatablereader#System_Data_DataTableReader_IsDBNull_\" data-linktype=\"relative-path\">IsDBNull</a> to see if there are null values before calling this method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the contents of the column numbered 2 within the passed-in DataTableReader. If the value the column within a particular row is null, the code displays the text &lt;NULL&gt;. If the data within the column is not of the correct type, the example displays an error message for each row.  </p>\n<pre><code class=\"lang-vb\" name=\"DataWorks DataTableReader.GetChar#1\">Private Sub PrintColumn(ByVal reader As DataTableReader)\n   &#39; Loop through all the rows in the DataTableReader\n   While reader.Read()\n      If reader.IsDBNull(2) Then\n         Console.Write(&quot;&lt;NULL&gt;&quot;)\n      Else\n         Try\n            Console.Write(reader.GetChar(2))\n         Catch ex As InvalidCastException\n            Console.Write(&quot;Invalid data type.&quot;)\n         End Try\n      End If\n      Console.WriteLine()\n   End While\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks DataTableReader.GetChar#1\">    private static void PrintColumn(DataTableReader reader)\n    {\n        // Loop through all the rows in the DataTableReader\n        while (reader.Read())\n        {\n            if (reader.IsDBNull(2))\n            {\n                Console.Write(&quot;&lt;NULL&gt;&quot;);\n            }\n            else\n            {\n                try\n                {\n                    Console.Write(reader.GetChar(2));\n                }\n                catch (InvalidCastException)\n                {\n                    Console.Write(&quot;Invalid data type.&quot;);\n                }\n            }\n            Console.WriteLine();\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader_GetChars_System_Int32_System_Int64_System_Char___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Data_DataTableReader_GetChars_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetChars(Int32,Int64,Char[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the value of the specified column as a character array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override long GetChars (int ordinal, long dataIndex, char[] buffer, int bufferIndex, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ordinal</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based column ordinal.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>dataIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index within the field from which to start the read operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The buffer into which to read the stream of chars.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bufferIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index within the buffer at which to start placing the data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum length to copy into the buffer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The actual number of characters read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index passed was outside the range of 0 to <span class=\"xref\">stem.Data.DataTableReader.FieldCount*</span> - 1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.deletedrowinaccessibleexception\" data-linktype=\"relative-path\">DeletedRowInaccessibleException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to retrieve data from a deleted row.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to read or access a column in a closed <code>DataTableReader</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The specified column does not contain a character array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>GetChars</code> returns the number of available characters in the field. Most of the time this is the exact length of the field. However, the number returned may be less than the true length of the field if <code>GetChars</code> has already been used to obtain characters from the field.  </p>\n<p> The actual number of characters read can be less than the requested length, if the end of the field is reached. If you pass a buffer that is null (<code>Nothing</code> in Visual Basic), <code>GetChars</code> returns the length of the entire field in characters, not the remaining size based on the buffer offset parameter.  </p>\n<p> No conversions are performed; therefore the data to be retrieved must already be a character array or coercible to a character array.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <code>GetChars</code> method. The <code>TestGetChars</code> method expects to be passed a <code>DataTableReader</code> filled with two columns of data: a file name in the first column, and an array of characters in the second. In addition, <code>TestGetChars</code> lets you specify the buffer size to be used as it reads the data from the character array in the <code>DataTableReader</code>. <code>TestGetChars</code> creates a file corresponding to each row of data in the <code>DataTableReader</code>, using the supplied data in the first column of the <code>DataTableReader</code> as the file name.  </p>\n<p> This procedure demonstrates the use of the <code>GetChars</code> method reading data that was stored in the <code>DataTable</code> as a character array. Any other type of data causes the <code>GetChars</code> method to throw an <code>InvalidCastException</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"DataWorks DataTableReader.GetChars#1\">using System;\nusing System.Data;\nusing System.IO;\n\nclass Class1\n{\n    static void Main()\n    {\n        DataTable table = new DataTable();\n        table.Columns.Add(&quot;FileName&quot;, typeof(string));\n        table.Columns.Add(&quot;Data&quot;, typeof(char[]));\n        table.Rows.Add(new object[] { &quot;File1.txt&quot;, &quot;0123456789ABCDEF&quot;.ToCharArray() });\n        table.Rows.Add(new object[] { &quot;File2.txt&quot;, &quot;0123456789ABCDEF&quot;.ToCharArray() });\n\n        DataTableReader reader = new DataTableReader(table);\n        TestGetChars(reader, 7);\n    }\n\n    private static void TestGetChars(DataTableReader reader, int bufferSize)\n    {\n        // The filename is in column 0, and the contents are in column 1.\n        const int FILENAME_COLUMN = 0;\n        const int DATA_COLUMN = 1;\n\n        char[] buffer;\n        long offset;\n        int charsRead = 0;\n        string fileName;\n        int currentBufferSize = 0;\n\n        while (reader.Read())\n        {\n            // Reinitialize the buffer size and the buffer itself.\n            currentBufferSize = bufferSize;\n            buffer = new char[bufferSize];\n            // For each row, write the data to the specified file.\n            // First, verify that the FileName column isn&#39;t null.\n            if (!reader.IsDBNull(FILENAME_COLUMN))\n            {\n                // Get the file name, and create a file with \n                // the supplied name.\n                fileName = reader.GetString(FILENAME_COLUMN);\n                // Start at the beginning.\n                offset = 0;\n\n                using (StreamWriter outputStream =\n                           new StreamWriter(fileName, false))\n                {\n                    try\n                    {\n                        // Loop through all the characters in the input field,\n                        // incrementing the offset for the next time. If this\n                        // pass through the loop reads characters, write them to \n                        // the output stream.\n                        do\n                        {\n                            charsRead = (int)reader.GetChars(DATA_COLUMN, offset,\n                                buffer, 0, bufferSize);\n                            if (charsRead &gt; 0)\n                            {\n                                outputStream.Write(buffer, 0, charsRead);\n                                offset += charsRead;\n                            }\n                        } while (charsRead &gt; 0);\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine(fileName + &quot;: &quot; + ex.Message);\n                    }\n                }\n            }\n        }\n        Console.WriteLine(&quot;Press Enter key to finish.&quot;);\n        Console.ReadLine();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks DataTableReader.GetChars#1\">Imports System\nImports System.Data\nImports System.IO\n\nModule Module1\n\n   Private Sub TestGetChars( _\n      ByVal reader As DataTableReader, ByVal bufferSize As Integer)\n\n      &#39; The filename is in column 0, and the contents are in column 1.\n      Const FILENAME_COLUMN As Integer = 0\n      Const DATA_COLUMN As Integer = 1\n\n      Dim buffer() As Char\n      Dim offset As Integer\n      Dim charsRead As Integer\n      Dim fileName As String\n      Dim currentBufferSize As Integer\n\n      While reader.Read\n         &#39; Reinitialize the buffer size and the buffer itself.\n         currentBufferSize = bufferSize\n         ReDim buffer(bufferSize - 1)\n\n         &#39; For each row, write the data to the specified file.\n\n         &#39; First, verify that the FileName column isn&#39;t null.\n         If Not reader.IsDBNull(FILENAME_COLUMN) Then\n            &#39; Get the file name, and create a file with \n            &#39; the supplied name.\n            fileName = reader.GetString(FILENAME_COLUMN)\n\n            &#39; Start at the beginning.\n            offset = 0\n\n            Using outputStream As New StreamWriter(fileName, False)\n               Try\n\n                  &#39; Loop through all the characters in the input field,\n                  &#39; incrementing the offset for the next time. If this\n                  &#39; pass through the loop reads characters, write them to \n                  &#39; the output stream.\n                  Do\n                     charsRead = Cint(reader.GetChars(DATA_COLUMN, offset, _\n                        buffer, 0, bufferSize))\n                     If charsRead &gt; 0 Then\n                        outputStream.Write(buffer, 0, charsRead)\n                        offset += charsRead\n                     End If\n                  Loop While charsRead &gt; 0\n               Catch ex As Exception\n                  Console.WriteLine(fileName &amp; &quot;: &quot; &amp; ex.Message)\n               End Try\n            End Using\n         End If\n      End While\n      Console.WriteLine(&quot;Press Enter key to finish.&quot;)\n      Console.ReadLine()\n   End Sub\n\n   Sub Main()\n      Dim table As New DataTable\n      table.Columns.Add(&quot;FileName&quot;, GetType(System.String))\n      table.Columns.Add(&quot;Data&quot;, GetType(System.Char()))\n      table.Rows.Add(&quot;File1.txt&quot;, &quot;0123456789ABCDEF&quot;.ToCharArray)\n      table.Rows.Add(&quot;File2.txt&quot;, &quot;0123456789ABCDEF&quot;.ToCharArray)\n\n      Dim reader As New DataTableReader(table)\n      TestGetChars(reader, 7)\n   End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader_GetDataTypeName_System_Int32_\">\r\n    \r\n            <a id=\"System_Data_DataTableReader_GetDataTypeName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDataTypeName(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a string representing the data type of the specified column.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string GetDataTypeName (int ordinal);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ordinal</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based column ordinal.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string representing the column&#39;s data type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index passed was outside the range of 0 to <span class=\"xref\">stem.Data.DataTableReader.FieldCount*</span> - 1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to read or access a column in a closed <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetDataTypeName method always returns the type of the underlying <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a> instead of a provider-specific type.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following console application displays a list of fields and their type names from a simple <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>:  </p>\n<pre><code class=\"lang-vb\" name=\"DataWorks DataTableReader.GetDataTypeName#1\">   Private Sub TestGetTypeName()\n      Dim table As DataTable = GetCustomers()\n      Using reader As New DataTableReader(table)\n         For i As Integer = 0 To reader.FieldCount - 1\n            Console.WriteLine(&quot;{0}: {1}&quot;, _\n               reader.GetName(i), reader.GetDataTypeName(i))\n         Next\n      End Using\n\n      Console.WriteLine(&quot;Press Enter to finish.&quot;)\n      Console.ReadLine()\n   End Sub\n\n   Private Function GetCustomers() As DataTable\n      &#39; Create sample Customers table, in order\n      &#39; to demonstrate the behavior of the DataTableReader.\n      Dim table As New DataTable\n\n      &#39; Create two columns, ID and Name.\n      Dim idColumn As DataColumn = table.Columns.Add(&quot;ID&quot;, _\n        GetType(Integer))\n      table.Columns.Add(&quot;Name&quot;, GetType(String))\n\n      &#39; Set the ID column as the primary key column.\n      table.PrimaryKey = New DataColumn() {idColumn}\n\n      table.Rows.Add(New Object() {1, &quot;Mary&quot;})\n      table.Rows.Add(New Object() {2, &quot;Andy&quot;})\n      table.Rows.Add(New Object() {3, &quot;Peter&quot;})\n      table.Rows.Add(New Object() {4, &quot;Russ&quot;})\n      Return table\n   End Function\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks DataTableReader.GetDataTypeName#1\">    private static void TestGetTypeName()\n    {\n        DataTable table = GetCustomers();\n        using (DataTableReader reader = new DataTableReader(table))\n        {\n            for (int i = 0; i &lt; reader.FieldCount; i++)\n            {\n                Console.WriteLine(&quot;{0}: {1}&quot;, reader.GetName(i), \n                    reader.GetDataTypeName(i));\n            }\n        }\n        Console.WriteLine(&quot;Press Enter to finish.&quot;);\n        Console.ReadLine();\n    }\n\n    private static DataTable GetCustomers()\n    {\n        // Create sample Customers table, in order\n        // to demonstrate the behavior of the DataTableReader.\n        DataTable table = new DataTable();\n        // Create two columns, ID and Name.\n        DataColumn idColumn = table.Columns.Add(&quot;ID&quot;, typeof(int));\n        table.Columns.Add(&quot;Name&quot;, typeof(string ));\n        // Set the ID column as the primary key column.\n        table.PrimaryKey = new DataColumn[] { idColumn };\n\n        table.Rows.Add(new object[] { 1, &quot;Mary&quot; });\n        table.Rows.Add(new object[] { 2, &quot;Andy&quot; });\n        table.Rows.Add(new object[] { 3, &quot;Peter&quot; });\n        table.Rows.Add(new object[] { 4, &quot;Russ&quot; });\n        return table;\n    }\n</code></pre><p> The Console window displays the following results:  </p>\n<pre><code>ID: Int32  \nName: String  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader_GetDateTime_System_Int32_\">\r\n    \r\n            <a id=\"System_Data_DataTableReader_GetDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDateTime(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the specified column as a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override DateTime GetDateTime (int ordinal);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ordinal</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based column ordinal.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The value of the specified column.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index passed was outside the range of 0 to <span class=\"xref\">stem.Data.DataTableReader.FieldCount*</span> - 1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.deletedrowinaccessibleexception\" data-linktype=\"relative-path\">DeletedRowInaccessibleException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to retrieve data from a deleted row.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to read or access a column in a closed <code>DataTableReader</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The specified column does not contain a DateTime value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>No conversions are performed; therefore the data retrieved must already be a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> or coercible to a <code>DataTime</code>.  </p>\n<p> Call <a class=\"xref\" href=\"system.data.datatablereader#System_Data_DataTableReader_IsDBNull_\" data-linktype=\"relative-path\">IsDBNull</a> to see if there are null values before calling this method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the contents of the column numbered 2 within the passed-in <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>. If the value the column within a particular row is null, the code displays the text &lt;NULL&gt;. If the data within the column is not of the correct type, the example displays an error message for each row.  </p>\n<pre><code class=\"lang-vb\" name=\"DataWorks DataTableReader.GetDateTime#1\">Private Sub PrintColumn(ByVal reader As DataTableReader)\n   &#39; Loop through all the rows in the DataTableReader\n   While reader.Read()\n      If reader.IsDBNull(2) Then\n         Console.Write(&quot;&lt;NULL&gt;&quot;)\n      Else\n         Try\n            Console.Write(reader.GetDateTime(2))\n         Catch ex As InvalidCastException\n            Console.Write(&quot;Invalid data type.&quot;)\n         End Try\n      End If\n      Console.WriteLine()\n   End While\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks DataTableReader.GetDateTime#1\">    private static void PrintColumn(DataTableReader reader)\n    {\n        // Loop through all the rows in the DataTableReader\n        while (reader.Read())\n        {\n            if (reader.IsDBNull(2))\n            {\n                Console.Write(&quot;&lt;NULL&gt;&quot;);\n            }\n            else\n            {\n                try\n                {\n                    Console.Write(reader.GetDateTime(2));\n                }\n                catch (InvalidCastException)\n                {\n                    Console.Write(&quot;Invalid data type.&quot;);\n                }\n            }\n            Console.WriteLine();\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader_GetDecimal_System_Int32_\">\r\n    \r\n            <a id=\"System_Data_DataTableReader_GetDecimal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDecimal(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the specified column as a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override decimal GetDecimal (int ordinal);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ordinal</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based column ordinal.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The value of the specified column.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index passed was outside the range of 0 to <span class=\"xref\">stem.Data.DataTableReader.FieldCount*</span> - 1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.deletedrowinaccessibleexception\" data-linktype=\"relative-path\">DeletedRowInaccessibleException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to retrieve data from a deleted row.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to read or access a column in a closed <code>DataTableReader</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The specified column does not contain a <code>Decimal</code> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>No conversions are performed; therefore the data retrieved must already be a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> or coercible to a <code>Decimal</code>.  </p>\n<p> Call <a class=\"xref\" href=\"system.data.datatablereader#System_Data_DataTableReader_IsDBNull_\" data-linktype=\"relative-path\">IsDBNull</a> to see if there are null values before calling this method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the contents of the column numbered 2 within the passed-in <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>. If the value the column within a particular row is null, the code displays the text &lt;NULL&gt;. If the data within the column is not of the correct type, the example displays an error message for each row.  </p>\n<pre><code class=\"lang-cs\" name=\"DataWorks DataTableReader.GetDecimal#1\">    private static void PrintColumn(DataTableReader reader)\n    {\n        // Loop through all the rows in the DataTableReader\n        while (reader.Read())\n        {\n            if (reader.IsDBNull(2))\n            {\n                Console.Write(&quot;&lt;NULL&gt;&quot;);\n            }\n            else\n            {\n                try\n                {\n                    Console.Write(reader.GetDecimal(2));\n                }\n                catch (InvalidCastException)\n                {\n                    Console.Write(&quot;Invalid data type.&quot;);\n                }\n            }\n            Console.WriteLine();\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks DataTableReader.GetDecimal#1\">Private Sub PrintColumn(ByVal reader As DataTableReader)\n   &#39; Loop through all the rows in the DataTableReader\n   While reader.Read()\n      If reader.IsDBNull(2) Then\n         Console.Write(&quot;&lt;NULL&gt;&quot;)\n      Else\n         Try\n            Console.Write(reader.GetDecimal(2))\n         Catch ex As InvalidCastException\n            Console.Write(&quot;Invalid data type.&quot;)\n         End Try\n      End If\n      Console.WriteLine()\n   End While\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader_GetDouble_System_Int32_\">\r\n    \r\n            <a id=\"System_Data_DataTableReader_GetDouble_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDouble(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the column as a double-precision floating point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override double GetDouble (int ordinal);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ordinal</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based ordinal of the column.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The value of the specified column.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index passed was outside the range of 0 to <span class=\"xref\">stem.Data.DataTableReader.FieldCount*</span> - 1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.deletedrowinaccessibleexception\" data-linktype=\"relative-path\">DeletedRowInaccessibleException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to retrieve data from a deleted row.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to read or access a column in a closed <code>DataTableReader</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The specified column does not contain a double-precision floating point number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>No conversions are performed; therefore the data retrieved must already be a double-precision floating point number or must be coercible to a double-precision floating point number.  </p>\n<p> Call <a class=\"xref\" href=\"system.data.datatablereader#System_Data_DataTableReader_IsDBNull_\" data-linktype=\"relative-path\">IsDBNull</a> to see if there are null values before calling this method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the contents of the column numbered 2 within the passed-in <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>. If the value the column within a particular row is null, the code displays the text &lt;NULL&gt;. If the data within the column is not of the correct type, the example displays an error message for each row.  </p>\n<pre><code class=\"lang-cs\" name=\"DataWorks DataTableReader.GetDouble#1\">    private static void PrintColumn(DataTableReader reader)\n    {\n        // Loop through all the rows in the DataTableReader\n        while (reader.Read())\n        {\n            if (reader.IsDBNull(2))\n            {\n                Console.Write(&quot;&lt;NULL&gt;&quot;);\n            }\n            else\n            {\n                try\n                {\n                    Console.Write(reader.GetBoolean(2));\n                }\n                catch (InvalidCastException)\n                {\n                    Console.Write(&quot;Invalid data type.&quot;);\n                }\n            }\n            Console.WriteLine();\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks DataTableReader.GetDouble#1\">Private Sub PrintColumn(ByVal reader As DataTableReader)\n   &#39; Loop through all the rows in the DataTableReader\n   While reader.Read()\n      If reader.IsDBNull(2) Then\n         Console.Write(&quot;&lt;NULL&gt;&quot;)\n      Else\n         Try\n            Console.Write(reader.GetBoolean(2))\n         Catch ex As InvalidCastException\n            Console.Write(&quot;Invalid data type.&quot;)\n         End Try\n      End If\n      Console.WriteLine()\n   End While\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader_GetEnumerator\">\r\n    \r\n            <a id=\"System_Data_DataTableReader_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerator that can be used to iterate through the item collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Collections.IEnumerator GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> object that represents the item collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to read or access a column in a closed <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Enumerators only allow for reading the data in the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>. Enumerators cannot be used to modify the underlying collection.  </p>\n<p> At first, the enumerator is positioned before the first element in the collection. At this position, calling <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> throws an exception. Therefore, you must call <code>MoveNext</code> to advance the enumerator to the first element of the collection before reading the value of <code>Current</code>.  </p>\n<p> <code>Current</code> returns a <a class=\"xref\" href=\"system.data.common.dbdatarecord\" data-linktype=\"relative-path\">DbDataRecord</a>, and returns the same object until either <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> or <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> is called. <code>MoveNext</code> sets <code>Current</code> to the next element.  </p>\n<p> After the end of the collection is passed, the enumerator is positioned after the last element in the collection, and calling <code>MoveNext</code> returns false. If the last call to <code>MoveNext</code> returned <code>false</code>, calling <code>Current</code> throws an exception. In addition, because the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> provides forward-only access to its data, calling the <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> method of the IEnumerator throws a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> provides a stable enumerator. This means that even if row deletions or additions occur within the underlying data, the enumerator returned by a call to GetEnumerator is still valid.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the use of the GetEnumerator method. This includes the behavior of the enumerator when rows are deleted from the underlying <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> while the enumerator is active.  </p>\n<pre><code class=\"lang-vb\" name=\"DataWorks DataTableReader.GetEnumerator#1\">   Sub Main()\n      Try\n         Dim userTable As New DataTable(&quot;peopleTable&quot;)\n         userTable.Columns.Add(&quot;Id&quot;, GetType(Integer))\n         userTable.Columns.Add(&quot;Name&quot;, GetType(String))\n\n         &#39; Note that even if you create the DataTableReader\n         &#39; before adding the rows, the enumerator can still\n         &#39; visit all the rows.\n         Dim reader As DataTableReader = userTable.CreateDataReader()\n         userTable.Rows.Add(1, &quot;Peter&quot;)\n         userTable.Rows.Add(2, &quot;Mary&quot;)\n         userTable.Rows.Add(3, &quot;Andy&quot;)\n         userTable.Rows.Add(4, &quot;Russ&quot;)\n\n         Dim enumerator As IEnumerator = reader.GetEnumerator()\n         &#39; Keep track of whether the row to be deleted\n         &#39; has actually been deleted yet. This allows\n         &#39; this sample to demonstrate that the enumerator\n         &#39; is able to survive row deletion.\n         Dim isRowDeleted As Boolean = False\n         While (enumerator.MoveNext())\n\n            Dim dataRecord As DbDataRecord = CType(enumerator.Current, _\n                DbDataRecord)\n\n            &#39; While the enumerator is active, delete a row.\n            &#39; This doesn&#39;t affect the behavior of the enumerator.\n            If Not isRowDeleted Then\n               isRowDeleted = True\n               userTable.Rows(2).Delete()\n            End If\n            Console.WriteLine(dataRecord.GetString(1))\n         End While\n      Catch ex As Exception\n\n         Console.WriteLine(ex)\n      End Try\n      Console.ReadLine()\n   End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks DataTableReader.GetEnumerator#1\">    public static void Main()\n    {\n        try\n        {\n            DataTable userTable = new DataTable(&quot;peopleTable&quot;);\n\n            userTable.Columns.Add(&quot;Id&quot;, typeof(int));\n            userTable.Columns.Add(&quot;Name&quot;, typeof(string));\n\n            // Note that even if you create the DataTableReader\n            // before adding the rows, the enumerator can still\n            // visit all the rows.\n            DataTableReader reader = userTable.CreateDataReader();\n            userTable.Rows.Add(new object[] { 1, &quot;Peter&quot; });\n            userTable.Rows.Add(new object[] { 2, &quot;Mary&quot; });\n            userTable.Rows.Add(new object[] { 3, &quot;Andy&quot; });\n            userTable.Rows.Add(new object[] { 4, &quot;Russ&quot; });\n\n            IEnumerator enumerator = reader.GetEnumerator();\n            // Keep track of whether the row to be deleted\n            // has actually been deleted yet. This allows\n            // this sample to demonstrate that the enumerator\n            // is able to survive row deletion.\n            bool isRowDeleted = false;\n            while (enumerator.MoveNext())\n            { \n                DbDataRecord dataRecord = (DbDataRecord)enumerator.Current;\n\n                // While the enumerator is active, delete a row.\n                // This doesn&#39;t affect the behavior of the enumerator.\n                if (!isRowDeleted)\n                {\n                    isRowDeleted = true;\n                    userTable.Rows[2].Delete();\n                }\n                Console.WriteLine(dataRecord.GetString(1));\n            }\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex);\n        }\n        Console.ReadLine();\n    }\n</code></pre><p> The procedure displays the following text in the Console window:  </p>\n<pre><code>Peter  \nMary  \nRuss  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader_GetFieldType_System_Int32_\">\r\n    \r\n            <a id=\"System_Data_DataTableReader_GetFieldType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFieldType(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> that is the data type of the object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type GetFieldType (int ordinal);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ordinal</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based column ordinal.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> that is the data type of the object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index passed was outside the range of 0 to <span class=\"xref\">stem.Data.DataTableReader.FieldCount*</span> - 1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to read or access a column in a closed <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> .</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>Call the following procedure, passing in a <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> instance in order to display a list of all the fields and the full name for each type in the Console window.  </p>\n<pre><code class=\"lang-cs\" name=\"DataWorks DataTableReader.GetFieldType#1\">    private void TestGetFieldType(DataTableReader reader)\n    {\n        for (int i = 0; i &lt; reader.FieldCount; i++)\n        {\n            Console.WriteLine(reader.GetName(i) + &quot;:&quot; + \n                reader.GetFieldType(i).FullName);\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks DataTableReader.GetFieldType#1\">Private Sub TestGetFieldType(ByVal reader As DataTableReader)\n   For i As Integer = 0 To reader.FieldCount - 1\n      Console.WriteLine(reader.GetName(i) &amp; &quot;:&quot; &amp; _\n         reader.GetFieldType(i).FullName)\n   Next\n   Console.WriteLine(&quot;Press Enter to finish.&quot;)\n   Console.ReadLine()\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader_GetFloat_System_Int32_\">\r\n    \r\n            <a id=\"System_Data_DataTableReader_GetFloat_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFloat(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the specified column as a single-precision floating point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override float GetFloat (int ordinal);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ordinal</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based column ordinal.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>The value of the column.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index passed was outside the range of 0 to <span class=\"xref\">stem.Data.DataTableReader.FieldCount*</span> - 1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.deletedrowinaccessibleexception\" data-linktype=\"relative-path\">DeletedRowInaccessibleException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to retrieve data from a deleted row.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to read or access a column in a closed <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The specified column does not contain a single-precision floating point number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>No conversions are performed; therefore the data retrieved must already be a single-precision floating point number or must be coercible to a single-precision floating point number.  </p>\n<p> Call <a class=\"xref\" href=\"system.data.datatablereader#System_Data_DataTableReader_IsDBNull_\" data-linktype=\"relative-path\">IsDBNull</a> to see if there are null values before calling this method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the contents of the column numbered 2 within the passed-in <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>. If the value the column within a particular row is null, the code displays the text &lt;NULL&gt;. If the data within the column is not of the correct type, the example displays an error message for each row.  </p>\n<pre><code class=\"lang-cs\" name=\"DataWorks DataTableReader.GetFloat#1\">    private static void PrintColumn(DataTableReader reader)\n    {\n        // Loop through all the rows in the DataTableReader\n        while (reader.Read())\n        {\n            if (reader.IsDBNull(2))\n            {\n                Console.Write(&quot;&lt;NULL&gt;&quot;);\n            }\n            else\n            {\n                try\n                {\n                    Console.Write(reader.GetFloat(2));\n                }\n                catch (InvalidCastException)\n                {\n                    Console.Write(&quot;Invalid data type.&quot;);\n                }\n            }\n            Console.WriteLine();\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks DataTableReader.GetFloat#1\">Private Sub PrintColumn(ByVal reader As DataTableReader)\n   &#39; Loop through all the rows in the DataTableReader\n   While reader.Read()\n      If reader.IsDBNull(2) Then\n         Console.Write(&quot;&lt;NULL&gt;&quot;)\n      Else\n         Try\n            Console.Write(reader.GetFloat(2))\n         Catch ex As InvalidCastException\n            Console.Write(&quot;Invalid data type.&quot;)\n         End Try\n      End If\n      Console.WriteLine()\n   End While\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader_GetGuid_System_Int32_\">\r\n    \r\n            <a id=\"System_Data_DataTableReader_GetGuid_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetGuid(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the specified column as a globally-unique identifier (GUID).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Guid GetGuid (int ordinal);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ordinal</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based column ordinal.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </div>\r\n                  <p>The value of the specified column.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index passed was outside the range of 0 to <span class=\"xref\">stem.Data.DataTableReader.FieldCount*</span> - 1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.deletedrowinaccessibleexception\" data-linktype=\"relative-path\">DeletedRowInaccessibleException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to retrieve data from a deleted row.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to read or access a column in a closed <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The specified column does not contain a GUID.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>No conversions are performed; therefore the data retrieved must already be a <a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a> or coercible to a <code>Guid</code>.  </p>\n<p> Call <a class=\"xref\" href=\"system.data.datatablereader#System_Data_DataTableReader_IsDBNull_\" data-linktype=\"relative-path\">IsDBNull</a> to see if there are null values before calling this method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the contents of the column numbered 2 within the passed-in DataTableReader. If the value the column within a particular row is null, the code displays the text &lt;NULL&gt;. If the data within the column is not of the correct type, the example displays an error message for each row.  </p>\n<pre><code class=\"lang-vb\" name=\"DataWorks DataTableReader.GetGuid#1\">Private Sub PrintColumn(ByVal reader As DataTableReader)\n   &#39; Loop through all the rows in the DataTableReader\n   While reader.Read()\n      If reader.IsDBNull(2) Then\n         Console.Write(&quot;&lt;NULL&gt;&quot;)\n      Else\n         Try\n            Console.Write(reader.GetGuid(2))\n         Catch ex As InvalidCastException\n            Console.Write(&quot;Invalid data type.&quot;)\n         End Try\n      End If\n      Console.WriteLine()\n   End While\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks DataTableReader.GetGuid#1\">    private static void PrintColumn(DataTableReader reader)\n    {\n        // Loop through all the rows in the DataTableReader\n        while (reader.Read())\n        {\n            if (reader.IsDBNull(2))\n            {\n                Console.Write(&quot;&lt;NULL&gt;&quot;);\n            }\n            else\n            {\n                try\n                {\n                    Console.Write(reader.GetGuid(2));\n                }\n                catch (InvalidCastException)\n                {\n                    Console.Write(&quot;Invalid data type.&quot;);\n                }\n            }\n            Console.WriteLine();\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader_GetInt16_System_Int32_\">\r\n    \r\n            <a id=\"System_Data_DataTableReader_GetInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetInt16(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the specified column as a 16-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override short GetInt16 (int ordinal);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ordinal</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based column ordinal</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>The value of the specified column.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index passed was outside the range of 0 to <span class=\"xref\">stem.Data.DataTableReader.FieldCount*</span> - 1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.deletedrowinaccessibleexception\" data-linktype=\"relative-path\">DeletedRowInaccessibleException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to retrieve data from a deleted row.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to read or access a column in a closed <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The specified column does not contain a 16-bit signed integer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>No conversions are performed; therefore, the data retrieved must already be an <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> or coercible to an <code>Int16</code>.  </p>\n<p> Call <a class=\"xref\" href=\"system.data.datatablereader#System_Data_DataTableReader_IsDBNull_\" data-linktype=\"relative-path\">IsDBNull</a> to see if there are null values before calling this method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the contents of the column numbered 2 within the passed-in <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>. If the value the column within a particular row is null, the code displays the text &lt;NULL&gt;. If the data within the column is not of the correct type, the example displays an error message for each row.  </p>\n<pre><code class=\"lang-vb\" name=\"DataWorks DataTableReader.GetInt16#1\">Private Sub PrintColumn(ByVal reader As DataTableReader)\n   &#39; Loop through all the rows in the DataTableReader\n   While reader.Read()\n      If reader.IsDBNull(2) Then\n         Console.Write(&quot;&lt;NULL&gt;&quot;)\n      Else\n         Try\n            Console.Write(reader.GetInt16(2))\n         Catch ex As InvalidCastException\n            Console.Write(&quot;Invalid data type.&quot;)\n         End Try\n      End If\n      Console.WriteLine()\n   End While\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks DataTableReader.GetInt16#1\">    private static void PrintColumn(DataTableReader reader)\n    {\n        // Loop through all the rows in the DataTableReader\n        while (reader.Read())\n        {\n            if (reader.IsDBNull(2))\n            {\n                Console.Write(&quot;&lt;NULL&gt;&quot;);\n            }\n            else\n            {\n                try\n                {\n                    Console.Write(reader.GetInt16(2));\n                }\n                catch (InvalidCastException)\n                {\n                    Console.Write(&quot;Invalid data type.&quot;);\n                }\n            }\n            Console.WriteLine();\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader_GetInt32_System_Int32_\">\r\n    \r\n            <a id=\"System_Data_DataTableReader_GetInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetInt32(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the specified column as a 32-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetInt32 (int ordinal);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ordinal</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based column ordinal</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The value of the specified column.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index passed was outside the range of 0 to <span class=\"xref\">stem.Data.DataTableReader.FieldCount*</span> - 1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.deletedrowinaccessibleexception\" data-linktype=\"relative-path\">DeletedRowInaccessibleException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to retrieve data from a deleted row.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to read or access a column in a closed <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> .</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The specified column does not contain a 32-bit signed integer value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>No conversions are performed; therefore, the data retrieved must already be an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> or coercible to an <code>Int32</code>.  </p>\n<p> Call <a class=\"xref\" href=\"system.data.datatablereader#System_Data_DataTableReader_IsDBNull_\" data-linktype=\"relative-path\">IsDBNull</a> to see if there are null values before calling this method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the contents of the column numbered 2 within the passed-in <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>. If the value the column within a particular row is null, the code displays the text &lt;NULL&gt;. If the data within the column is not of the correct type, the example displays an error message for each row.  </p>\n<pre><code class=\"lang-cs\" name=\"DataWorks DataTableReader.GetInt32#1\">    private static void PrintColumn(DataTableReader reader)\n    {\n        // Loop through all the rows in the DataTableReader\n        while (reader.Read())\n        {\n            if (reader.IsDBNull(2))\n            {\n                Console.Write(&quot;&lt;NULL&gt;&quot;);\n            }\n            else\n            {\n                try\n                {\n                    Console.Write(reader.GetInt32(2));\n                }\n                catch (InvalidCastException)\n                {\n                    Console.Write(&quot;Invalid data type.&quot;);\n                }\n            }\n            Console.WriteLine();\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks DataTableReader.GetInt32#1\">Private Sub PrintColumn(ByVal reader As DataTableReader)\n   &#39; Loop through all the rows in the DataTableReader\n   While reader.Read()\n      If reader.IsDBNull(2) Then\n         Console.Write(&quot;&lt;NULL&gt;&quot;)\n      Else\n         Try\n            Console.Write(reader.GetInt32(2))\n         Catch ex As InvalidCastException\n            Console.Write(&quot;Invalid data type.&quot;)\n         End Try\n      End If\n      Console.WriteLine()\n   End While\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader_GetInt64_System_Int32_\">\r\n    \r\n            <a id=\"System_Data_DataTableReader_GetInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetInt64(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the specified column as a 64-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override long GetInt64 (int ordinal);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ordinal</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based column ordinal</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The value of the specified column.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index passed was outside the range of 0 to <span class=\"xref\">stem.Data.DataTableReader.FieldCount*</span> - 1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.deletedrowinaccessibleexception\" data-linktype=\"relative-path\">DeletedRowInaccessibleException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to retrieve data from a deleted row.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to read or access a column in a closed <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> .</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The specified column does not contain a 64-bit signed integer value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>No conversions are performed; therefore, the data retrieved must already be an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> or coercible to an <code>Int64</code>.  </p>\n<p> Call <a class=\"xref\" href=\"system.data.datatablereader#System_Data_DataTableReader_IsDBNull_\" data-linktype=\"relative-path\">IsDBNull</a> to see if there are null values before calling this method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the contents of the column numbered 2 within the passed-in <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>. If the value the column within a particular row is null, the code displays the text &lt;NULL&gt;. If the data within the column is not of the correct type, the example displays an error message for each row.  </p>\n<pre><code class=\"lang-vb\" name=\"DataWorks DataTableReader.GetInt64#1\">Private Sub PrintColumn(ByVal reader As DataTableReader)\n   &#39; Loop through all the rows in the DataTableReader\n   While reader.Read()\n      If reader.IsDBNull(2) Then\n         Console.Write(&quot;&lt;NULL&gt;&quot;)\n      Else\n         Try\n            Console.Write(reader.GetInt64(2))\n         Catch ex As InvalidCastException\n            Console.Write(&quot;Invalid data type.&quot;)\n         End Try\n      End If\n      Console.WriteLine()\n   End While\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks DataTableReader.GetInt64#1\">    private static void PrintColumn(DataTableReader reader)\n    {\n        // Loop through all the rows in the DataTableReader\n        while (reader.Read())\n        {\n            if (reader.IsDBNull(2))\n            {\n                Console.Write(&quot;&lt;NULL&gt;&quot;);\n            }\n            else\n            {\n                try\n                {\n                    Console.Write(reader.GetInt64(2));\n                }\n                catch (InvalidCastException)\n                {\n                    Console.Write(&quot;Invalid data type.&quot;);\n                }\n            }\n            Console.WriteLine();\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader_GetName_System_Int32_\">\r\n    \r\n            <a id=\"System_Data_DataTableReader_GetName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetName(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the specified column as a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string GetName (int ordinal);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ordinal</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based column ordinal</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the specified column.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index passed was outside the range of 0 to <span class=\"xref\">stem.Data.DataTableReader.FieldCount*</span> - 1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to read or access a column in a closed <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>GetName</code> and <a class=\"xref\" href=\"system.data.datatablereader#System_Data_DataTableReader_GetOrdinal_\" data-linktype=\"relative-path\">GetOrdinal</a> methods provide inverse functionality. That is, calling <code>GetOrdinal</code> on the return value of calling <code>GetName</code> should return the original parameter passed to <code>GetName</code>; the same applies to calling the procedures in the opposite order.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following simple example includes a procedure that lists the names of all the columns within the specified <code>DataTableReader</code>, and the column&#39;s ordinal position, to the Console window.  </p>\n<pre><code class=\"lang-cs\" name=\"DataWorks DataTableReader.GetName#1\">    private static void DisplayColumnNames(DataTableReader reader)\n    {\n        // Given a DataTableReader, display column names.\n        for (int i = 0; i &lt; reader.FieldCount; i++) \n        {\n            Console.WriteLine(&quot;{0}: {1}&quot;, i, reader.GetName(i));\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks DataTableReader.GetName#1\">Private Sub DisplayColumnNames(ByVal reader As DataTableReader)\n   &#39; Given a DataTableReader, display column names.\n   For i As Integer = 0 To reader.FieldCount - 1\n      Console.WriteLine(&quot;{0}: {1}&quot;, i, reader.GetName(i))\n   Next\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader_GetOrdinal_System_String_\">\r\n    \r\n            <a id=\"System_Data_DataTableReader_GetOrdinal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetOrdinal(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the column ordinal, given the name of the column.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetOrdinal (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the column.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based column ordinal.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to read or access a column in a closed <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The name specified is not a valid column name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Because most of the methods provided by the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> class must be provided with an ordinal column number, you can use the <code>GetOrdinal</code> method to retrieve the column number, given the name of the column.  </p>\n<p> <code>GetOrdinal</code> performs a case-sensitive lookup first. If it fails, a second case-insensitive search is made. If the column number is not found an <code>IndexOutOfRangeException</code> is thrown.  </p>\n<p> <code>GetOrdinal</code> is kana-width insensitive.  </p>\n<p> Because ordinal-based lookups are more efficient than named lookups, it is inefficient to call <code>GetOrdinal</code> within a loop. Save time by calling <code>GetOrdinal</code> one time and assigning the results to an integer variable for use within the loop</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>If you have only a column name, in which case the column name is user supplied, and you must retrieve information from the column, you can use a procedure like the following to extract the required information. In this example, the procedure accepts a column name and returns the data that is contained within that column for the current row in the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> :  </p>\n<pre><code class=\"lang-cs\" name=\"DataWorks DataTableReader.GetOrdinal#1\">    private static object GetValueByName(\n        DataTableReader reader, string columnName)\n    {\n        // Consider when to use a procedure like this one carefully:\n        // if you&#39;re going to retrieve information from a column\n        // in a loop, it would be better to retrieve the column\n        // ordinal once, store the value, and use the methods\n        // of the DataTableReader class directly. \n        object columnValue;\n\n        try\n        {\n            int columnOrdinal = reader.GetOrdinal(columnName);\n            columnValue = reader.GetValue(columnOrdinal);\n        }\n        catch (ArgumentException ex)\n        {\n            // Throw all other errors back out to the caller.\n            columnValue = null;\n        }\n        return columnValue;\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks DataTableReader.GetOrdinal#1\">Private Function GetValueByName( _\n   ByVal reader As DataTableReader, _\n   ByVal columnName As String) As Object\n\n   &#39; Consider when to use a procedure like this one carefully:\n   &#39; If you&#39;re going to retrieve information from a column\n   &#39; in a loop, it would be better to retrieve the column\n   &#39; ordinal once, store the value, and use the methods\n   &#39; of the DataTableReader class directly. \n   Dim columnValue As Object\n\n   Try\n      Dim columnOrdinal As Integer = reader.GetOrdinal(columnName)\n      columnValue = reader.GetValue(columnOrdinal)\n   Catch ex As ArgumentException\n      &#39; Throw all other errors back out to the caller.\n      columnValue = Nothing\n   End Try\n   Return columnValue\nEnd Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader_GetProviderSpecificFieldType_System_Int32_\">\r\n    \r\n            <a id=\"System_Data_DataTableReader_GetProviderSpecificFieldType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetProviderSpecificFieldType(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the type of the specified column in provider-specific format.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type GetProviderSpecificFieldType (int ordinal);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ordinal</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based column ordinal.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> that is the data type of the object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index passed was outside the range of 0 to <span class=\"xref\">stem.Data.DataTableReader.FieldCount*</span> - 1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to read or access a column in a closed <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Because the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> always returns the type stored within the underlying <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a>, the value returned by calling the GetProviderSpecificFieldType method always returns the same type as the type stored within the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>. When you work with the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> class, calling the GetProviderSpecificFieldType method returns the same type as calling the <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader_GetProviderSpecificValue_System_Int32_\">\r\n    \r\n            <a id=\"System_Data_DataTableReader_GetProviderSpecificValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetProviderSpecificValue(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the specified column in provider-specific format.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override object GetProviderSpecificValue (int ordinal);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ordinal</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based number of the column whose value is retrieved.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The value of the specified column in provider-specific format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index passed was outside the range of 0 to <span class=\"xref\">stem.Data.DataTableReader.FieldCount*</span> - 1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.deletedrowinaccessibleexception\" data-linktype=\"relative-path\">DeletedRowInaccessibleException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to retrieve data from a deleted row.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to read or access a column in a closed <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a></p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Because the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> always returns the type stored within the underlying <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a>, the value returned by calling the GetProviderSpecificValue method always returns data of the same type as the data stored within the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>. When you work with the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> class, calling the GetProviderSpecificValue method returns the same value and type as calling the <a class=\"xref\" href=\"system.data.datatablereader#System_Data_DataTableReader_GetValue_\" data-linktype=\"relative-path\">GetValue</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader_GetProviderSpecificValues_System_Object___\">\r\n    \r\n            <a id=\"System_Data_DataTableReader_GetProviderSpecificValues_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetProviderSpecificValues(Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Fills the supplied array with provider-specific type information for all the columns in the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetProviderSpecificValues (object[] values);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>values</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of objects to be filled in with type information for the columns in the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of column values copied into the array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.deletedrowinaccessibleexception\" data-linktype=\"relative-path\">DeletedRowInaccessibleException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to retrieve data from a deleted row.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to read or access a column in a closed <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Because the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> always returns the data of the type stored within the underlying <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a>, the values returned by calling the GetProviderSpecificValues method is always of the same types as the data stored within the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>. When you work with the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> class, calling the GetProviderSpecificValues method returns the same values and types as calling the <a class=\"xref\" href=\"system.data.datatablereader#System_Data_DataTableReader_GetValues_\" data-linktype=\"relative-path\">GetValues</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader_GetSchemaTable\">\r\n    \r\n            <a id=\"System_Data_DataTableReader_GetSchemaTable_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetSchemaTable()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> that describes the column metadata of the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Data.DataTable GetSchemaTable ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> that describes the column metadata.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetSchemaTable method returns metadata about each column in the following order:  </p>\n<table>\n<thead>\n<tr>\n<th>DataReader column</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ColumnName</td>\n<td>The name of the column as it appears in the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</td>\n</tr>\n<tr>\n<td>ColumnOrdinal</td>\n<td>The ordinal of the column</td>\n</tr>\n<tr>\n<td>ColumnSize</td>\n<td>-1 if the <a class=\"xref\" href=\"system.data.common.schematablecolumn#System_Data_Common_SchemaTableColumn_ColumnSize\" data-linktype=\"relative-path\">ColumnSize</a> (or <a class=\"xref\" href=\"system.data.datacolumn#System_Data_DataColumn_MaxLength_\" data-linktype=\"relative-path\">MaxLength</a>) property of the <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a> cannot be determined or is not relevant; otherwise, 0 or a positive integer that contains the <code>MaxLength</code> value.</td>\n</tr>\n<tr>\n<td>NumericPrecision</td>\n<td>If the column type is a numeric type, this is the maximum precision of the column. If the column type is not a numeric data type, this is a null value.</td>\n</tr>\n<tr>\n<td>NumericScale</td>\n<td>If column data type has a scale component, return the number of digits to the right of the decimal point. Otherwise, return a null value.</td>\n</tr>\n<tr>\n<td>DataType</td>\n<td>The underlying type of the column.</td>\n</tr>\n<tr>\n<td>ProviderType</td>\n<td>The indicator of the column&#39;s data type. If the data type of the column varies from row to row, this value is <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>. This column cannot contain a null value.</td>\n</tr>\n<tr>\n<td>IsLong</td>\n<td><code>true</code> if the data type of the column is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> and its <a class=\"xref\" href=\"system.data.datacolumn#System_Data_DataColumn_MaxLength_\" data-linktype=\"relative-path\">MaxLength</a> property is -1. Otherwise, <code>false</code>.</td>\n</tr>\n<tr>\n<td>AllowDBNull</td>\n<td><code>true</code> if the AllowDbNull constraint is set to true for the column; otherwise, <code>false</code>.</td>\n</tr>\n<tr>\n<td>IsReadOnly</td>\n<td><code>true</code> if the column cannot be modified; otherwise <code>false</code>.</td>\n</tr>\n<tr>\n<td>IsRowVersion</td>\n<td><code>false</code>, for every column.</td>\n</tr>\n<tr>\n<td>IsUnique</td>\n<td><code>true</code>: No two rows in the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> can have the same value in this column. <code>IsUnique</code> is guaranteed to be true if the column represents a key by itself or if there is a constraint of type UNIQUE that applies only to this column. <code>false</code>: The column can contain duplicate values in the <code>DataTable</code>. The default of this column is <code>false</code>.</td>\n</tr>\n<tr>\n<td>IsKey</td>\n<td><code>true</code>: The column is one of a set of columns that, taken together, uniquely identify the row in the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>. The set of columns with <code>IsKey</code> set to <code>true</code> must uniquely identify a row in the <code>DataTable</code>. There is no requirement that this set of columns is a minimal set of columns. This set of columns may be generated from a <code>DataTable</code> primary key, a unique constraint or a unique index. <code>false</code>: The column is not required to uniquely identify the row. This value is <code>true</code> if the column participates in a single or composite primary key. Otherwise, its value is <code>false</code>.</td>\n</tr>\n<tr>\n<td>IsAutoIncrement</td>\n<td><code>true</code>: The column assigns values to new rows in fixed increments. <code>false</code>: The column does not assign values to new rows in fixed increments. The default of this column is <code>false</code>.</td>\n</tr>\n<tr>\n<td>BaseCatalogName</td>\n<td>The name of the catalog in the data store that contains the column. <code>Null</code> if the base catalog name cannot be determined. The default value for this column is a <code>null</code> value.</td>\n</tr>\n<tr>\n<td>BaseSchemaName</td>\n<td>This value is always <code>Null</code>.</td>\n</tr>\n<tr>\n<td>BaseTableName</td>\n<td>The name of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</td>\n</tr>\n<tr>\n<td>BaseColumnName</td>\n<td>The name of the column in the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.</td>\n</tr>\n<tr>\n<td>AutoIncrementSeed</td>\n<td>The value of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>&#39;s <a class=\"xref\" href=\"system.data.datacolumn#System_Data_DataColumn_AutoIncrementSeed_\" data-linktype=\"relative-path\">AutoIncrementSeed</a> property.</td>\n</tr>\n<tr>\n<td>AutoIncrementStep</td>\n<td>The value of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>&#39;s <a class=\"xref\" href=\"system.data.datacolumn#System_Data_DataColumn_AutoIncrementStep_\" data-linktype=\"relative-path\">AutoIncrementStep</a> property.</td>\n</tr>\n<tr>\n<td>DefaultValue</td>\n<td>The value of the <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a>&#39;s <a class=\"xref\" href=\"system.data.datacolumn#System_Data_DataColumn_DefaultValue_\" data-linktype=\"relative-path\">DefaultValue</a> property.</td>\n</tr>\n<tr>\n<td>Expression</td>\n<td>The expression string, if the current column is an expression column and all columns used in the expression belong to the same <code>T:System.Data.DataTable</code> that contains the expression column; otherwise <code>null</code>.</td>\n</tr>\n<tr>\n<td>ColumnMapping</td>\n<td>The <a class=\"xref\" href=\"system.data.mappingtype\" data-linktype=\"relative-path\">MappingType</a> value associated with the <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a>. The type can be one of <code>Attribute</code>, <code>Element</code>, <code>Hidden</code>, or <code>SimpleContent</code>. The default value is <code>Element</code>.</td>\n</tr>\n<tr>\n<td>BaseTableNamespace</td>\n<td>The value of the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>&#39;s <a class=\"xref\" href=\"system.data.datatable#System_Data_DataTable_Namespace_\" data-linktype=\"relative-path\">Namespace</a> property.</td>\n</tr>\n<tr>\n<td>BaseColumnNamespace</td>\n<td>The value of the <a class=\"xref\" href=\"system.data.datacolumn\" data-linktype=\"relative-path\">DataColumn</a>&#39;s <a class=\"xref\" href=\"system.data.datacolumn#System_Data_DataColumn_Namespace_\" data-linktype=\"relative-path\">Namespace</a> property.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following console application example retrieves schema information about the specified column. Pass the <code>DisplaySchemaTableInfo</code> procedure a <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> and an integer representing the ordinal position of a column within the <code>DataTableReader</code>, and the procedure outputs schema information to the console window.  </p>\n<pre><code class=\"lang-cs\" name=\"DataWorks DataTableReader.GetSchemaTable#1\">    private static void TestGetSchemaTable()\n    {\n        // Set up the data adapter, using information from \n        // the AdventureWorks sample database.\n        // Modify the SQL expression to retrieve \n        // data from a different table.\n        SqlDataAdapter adapter = \n            SetupDataAdapter(&quot;SELECT * FROM Sales.Customer&quot;);\n\n        // Fill the DataTable, retrieving all the schema information.\n        adapter.MissingSchemaAction = MissingSchemaAction.AddWithKey;\n        DataTable table = new DataTable();\n        adapter.Fill(table);\n         \n        // Create the DataTableReader, and close it when done.\n        using (DataTableReader reader = new DataTableReader(table))\n        {\n            // Modify the column number to display information\n            // about a column other than column 0.\n            DisplaySchemaTableInfo(reader, 0);\n        }\n\n        Console.WriteLine();\n        Console.WriteLine(&quot;Press Enter to finish.&quot;);\n        Console.ReadLine();\n    }\n\n    private static void DisplaySchemaTableInfo(\n            DataTableReader reader, int ordinal)\n    {\n        // Given a DataTableReader, display schema\n        // information about a particular column.\n        try\n        {\n            DataTable schemaTable = reader.GetSchemaTable();\n            DataRow row = schemaTable.Rows[ordinal];\n            foreach (DataColumn col in schemaTable.Columns)\n            {\n                Console.WriteLine(&quot;{0}: {1}&quot;, \n                    col.ColumnName, row[col.Ordinal]);\n            }\n        }\n        catch (IndexOutOfRangeException ex)\n        {\n            Console.WriteLine(&quot;{0} is an invalid column number.&quot;, \n                ordinal);\n        }\n    }\n\n    private static SqlDataAdapter SetupDataAdapter(String sqlString)\n    {\n        // Assuming all the default settings, create a \n        // SqlDataAdapter working with the AdventureWorks\n        // sample database that&#39;s available with \n        // SQL Server.\n        String connectionString = \n            &quot;Data source=(local);initial catalog=AdventureWorks;&quot; +\n            &quot;Integrated Security=True&quot;;\n        return new SqlDataAdapter(sqlString, connectionString);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks DataTableReader.GetSchemaTable#1\">   Private Sub TestGetSchemaTable()\n      &#39; Set up the data adapter, using information from \n      &#39; the AdventureWorks sample database.\n      &#39; Modify the SQL expression to retrieve \n      &#39; data from a different table.\n      Dim adapter As SqlDataAdapter = _\n         SetupDataAdapter(&quot;SELECT * FROM Sales.Customer&quot;)\n\n      &#39; Fill the DataTable, retrieving all the schema information.\n      adapter.MissingSchemaAction = MissingSchemaAction.AddWithKey\n      Dim table As New DataTable\n      adapter.Fill(table)\n\n      &#39; Create the DataTableReader, and close it when done.\n      Using reader As New DataTableReader(table)\n         &#39; Modify the column number to display information\n         &#39; about a column other than column 0.\n         DisplaySchemaTableInfo(reader, 0)\n      End Using\n\n      Console.WriteLine()\n      Console.WriteLine(&quot;Press Enter to finish.&quot;)\n      Console.ReadLine()\n   End Sub\n\n   Private Sub DisplaySchemaTableInfo( _\n      ByVal reader As DataTableReader, ByVal ordinal As Integer)\n\n      &#39; Given a DataTableReader, display schema\n      &#39; information about a particular column.\n      Try\n         Dim schemaTable As DataTable = reader.GetSchemaTable()\n         Dim row As DataRow = schemaTable.Rows(ordinal)\n         For Each col As DataColumn In schemaTable.Columns\n            Console.WriteLine(&quot;{0}: {1}&quot;, _\n               col.ColumnName, row(col.Ordinal))\n         Next\n      Catch ex As IndexOutOfRangeException\n         Console.WriteLine(&quot;{0} is an invalid column number.&quot;, _\n            ordinal)\n      End Try\n   End Sub\n\n   Private Function SetupDataAdapter( _\n      ByVal sqlString As String) As SqlDataAdapter\n      &#39; Assuming all the default settings, create a SqlDataAdapter\n      &#39; working with the AdventureWorks sample database that&#39;s \n      &#39; available with SQL Server.\n      Dim connectionString As String = _\n         &quot;Data Source=(local);&quot; &amp; _\n         &quot;Initial Catalog=AdventureWorks;&quot; &amp; _\n         &quot;Integrated Security=true&quot;\n      Return New SqlDataAdapter(sqlString, connectionString)\n   End Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader_GetString_System_Int32_\">\r\n    \r\n            <a id=\"System_Data_DataTableReader_GetString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetString(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the specified column as a string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string GetString (int ordinal);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ordinal</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based column ordinal</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The value of the specified column.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index passed was outside the range of 0 to <span class=\"xref\">stem.Data.DataTableReader.FieldCount*</span> - 1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.deletedrowinaccessibleexception\" data-linktype=\"relative-path\">DeletedRowInaccessibleException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to retrieve data from a deleted row.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to read or access a column in a closed <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The specified column does not contain a string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Call <a class=\"xref\" href=\"system.data.datatablereader#System_Data_DataTableReader_IsDBNull_\" data-linktype=\"relative-path\">IsDBNull</a> to see if there are null values before calling this method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the contents of the column numbered 2 within the passed-in <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>. If the value the column within a particular row is null, the code displays the text &lt;NULL&gt;. If the data within the column of the correct type, the example displays an error message for each row.  </p>\n<pre><code class=\"lang-cs\" name=\"DataWorks DataTableReader.GetString#1\">    private static void PrintColumn(DataTableReader reader)\n    {\n        // Loop through all the rows in the DataTableReader\n        while (reader.Read())\n        {\n            if (reader.IsDBNull(2))\n            {\n                Console.Write(&quot;&lt;NULL&gt;&quot;);\n            }\n            else\n            {\n                try\n                {\n                    Console.Write(reader.GetString(2));\n                }\n                catch (InvalidCastException)\n                {\n                    Console.Write(&quot;Invalid data type.&quot;);\n                }\n            }\n            Console.WriteLine();\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks DataTableReader.GetString#1\">Private Sub PrintColumn(ByVal reader As DataTableReader)\n   &#39; Loop through all the rows in the DataTableReader\n   While reader.Read()\n      If reader.IsDBNull(2) Then\n         Console.Write(&quot;&lt;NULL&gt;&quot;)\n      Else\n         Try\n            Console.Write(reader.GetString(2))\n         Catch ex As InvalidCastException\n            Console.Write(&quot;Invalid data type.&quot;)\n         End Try\n      End If\n      Console.WriteLine()\n   End While\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader_GetValue_System_Int32_\">\r\n    \r\n            <a id=\"System_Data_DataTableReader_GetValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetValue(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the specified column in its native format.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override object GetValue (int ordinal);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ordinal</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based column ordinal</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The value of the specified column. This method returns <code>DBNull</code> for null columns.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index passed was outside the range of 0 to <span class=\"xref\">stem.Data.DataTableReader.FieldCount*</span> - 1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.deletedrowinaccessibleexception\" data-linktype=\"relative-path\">DeletedRowInaccessibleException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to retrieve data from a deleted row.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to read or access columns in a closed <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> .</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Although you can call <a class=\"xref\" href=\"system.data.datatablereader#System_Data_DataTableReader_IsDBNull_\" data-linktype=\"relative-path\">IsDBNull</a> to see if there are null values before calling this method, you do not have to do this.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example iterates through all the columns within the current row in a <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>, displaying the contents of each column and the column name. Generally, if your intent is to work with all the columns within a row retrieved by a <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>, consider using the <a class=\"xref\" href=\"system.data.datatablereader#System_Data_DataTableReader_GetValues_\" data-linktype=\"relative-path\">GetValues</a> method instead, because it is more efficient.  </p>\n<pre><code class=\"lang-cs\" name=\"DataWorks DataTableReader.GetValue#1\">    private static void GetAllValues(DataTableReader reader)\n    {\n        // Given a DataTableReader, retrieve the value of \n        // each column, and display the name, value, and type.\n        // Make sure you have called reader.Read at least once before\n        // calling this procedure.\n\n        // Loop through all the columns.\n        object value = null;\n        for (int i = 0; i &lt; reader.FieldCount; i++)\n        {\n            if (reader.IsDBNull(i))\n            {\n                value = &quot;&lt;NULL&gt;&quot;;\n            }\n            else\n            {\n                value = reader.GetValue(i);\n            }\n            Console.WriteLine(&quot;{0}: {1} ({2})&quot;, reader.GetName(i), \n                value, reader.GetFieldType(i).Name);\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks DataTableReader.GetValue#1\">Private Sub GetAllValues(ByVal reader As DataTableReader)\n\n   &#39; Given a DataTableReader, retrieve the value of \n   &#39; each column, and display the name, value, and type.\n   &#39; Make sure you&#39;ve called reader.Read at least once before\n   &#39; calling this procedure.\n   &#39; Loop through all the columns.\n   Dim value As Object\n   For i As Integer = 0 To reader.FieldCount - 1\n      If reader.IsDBNull(i) Then\n         value = &quot;&lt;NULL&gt;&quot;\n      Else\n         value = reader.GetValue(i)\n      End If\n      Console.WriteLine(&quot;{0}: {1} ({2})&quot;, reader.GetName(i), _\n         value, reader.GetFieldType(i).Name)\n   Next\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader_GetValues_System_Object___\">\r\n    \r\n            <a id=\"System_Data_DataTableReader_GetValues_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetValues(Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Populates an array of objects with the column values of the current row.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetValues (object[] values);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>values</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> into which to copy the column values from the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of column values copied into the array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index passed was outside the range of 0 to <span class=\"xref\">stem.Data.DataTableReader.FieldCount*</span> - 1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.deletedrowinaccessibleexception\" data-linktype=\"relative-path\">DeletedRowInaccessibleException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to retrieve data from a deleted row.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to read or access a column in a closed <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> .</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For most applications, this method provides an efficient means for retrieving all columns, instead of retrieving each column individually. If your intent is to retrieve all the column values from a row within the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>, the <code>GetValues</code> method provides the most efficient solution.  </p>\n<p> You can pass an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> array that contains fewer than the number of columns that are contained in the resulting row. Only the amount of data the <code>Object</code> array can hold is copied to the array. You can also pass an <code>Object</code> array whose length is more than the number of columns that are contained in the resulting row, in which case the additional array elements remains unchanged by the method call.  </p>\n<p> This method places <code>DBNull</code> in the output array for null columns.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates using an array that is the correct size, to read all values from the current row in the supplied <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>. In addition, the sample demonstrates using a fixed-sized array that could be either smaller or larger than the number of available columns.  </p>\n<pre><code class=\"lang-cs\" name=\"DataWorks DataTableReader.GetValueObject#1\">    private static void TestGetValues(DataTableReader reader)\n    {\n        // Given a DataTableReader, use the GetValues\n        // method to retrieve a full row of data.\n        // Test the GetValues method, passing in an array large\n        // enough for all the columns.\n        Object[] values = new Object[reader.FieldCount];\n        int fieldCount = reader.GetValues(values);\n\n        Console.WriteLine(&quot;reader.GetValues retrieved {0} columns.&quot;,\n            fieldCount);\n        for (int i = 0; i &lt; fieldCount; i++)\n            Console.WriteLine(values[i]);\n\n        Console.WriteLine();\n\n        // Now repeat, using an array that may contain a different \n        // number of columns than the original data. This should work correctly,\n        // whether the size of the array is larger or smaller than \n        // the number of columns.\n\n        // Attempt to retrieve three columns of data.\n        values = new Object[3];\n        fieldCount = reader.GetValues(values);\n        Console.WriteLine(&quot;reader.GetValues retrieved {0} columns.&quot;,\n            fieldCount);\n        for (int i = 0; i &lt; fieldCount; i++)\n            Console.WriteLine(values[i]);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks DataTableReader.GetValueObject#1\">    Private Sub TestGetValues(ByVal reader As DataTableReader)\n\n        &#39; Given a DataTableReader, use the GetValues\n        &#39; method to retrieve a full row of data.\n\n        &#39; Test the GetValues method, passing in an array large\n        &#39; enough for all the columns.\n        Dim values(reader.FieldCount - 1) As Object\n        Dim fieldCount As Integer = reader.GetValues(values)\n        Console.WriteLine(&quot;reader.GetValues retrieved {0} columns.&quot;, _\n             fieldCount)\n        For i As Integer = 0 To fieldCount - 1\n            Console.WriteLine(values(i))\n        Next\n\n        Console.WriteLine()\n\n        &#39; Now repeat, using an array that may contain a different \n        &#39; number of columns than the original data. This should work correctly,\n        &#39; whether the size of the array is larger or smaller than \n        &#39; the number of columns.\n\n        &#39; Attempt to retrieve three columns of data.\n        ReDim values(2)\n        fieldCount = reader.GetValues(values)\n        Console.WriteLine(&quot;reader.GetValues retrieved {0} columns.&quot;, _\n             fieldCount)\n        For i As Integer = 0 To fieldCount - 1\n            Console.WriteLine(values(i))\n        Next\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader_IsDBNull_System_Int32_\">\r\n    \r\n            <a id=\"System_Data_DataTableReader_IsDBNull_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDBNull(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the column contains non-existent or missing values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsDBNull (int ordinal);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ordinal</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based column ordinal</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified column value is equivalent to <a class=\"xref\" href=\"system.dbnull\" data-linktype=\"relative-path\">DBNull</a>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The index passed was outside the range of 0 to <span class=\"xref\">stem.Data.DataTableReader.FieldCount*</span> - 1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.deletedrowinaccessibleexception\" data-linktype=\"relative-path\">DeletedRowInaccessibleException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to retrieve data from a deleted row.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to read or access a column in a closed <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> .</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Call this method to see if there are null column values before calling the typed get methods (for example, <a class=\"xref\" href=\"system.data.datatablereader#System_Data_DataTableReader_GetByte_\" data-linktype=\"relative-path\">GetByte</a>, <a class=\"xref\" href=\"system.data.datatablereader#System_Data_DataTableReader_GetChar_\" data-linktype=\"relative-path\">GetChar</a>, and so on) to avoid raising an error.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the contents of the column numbered 2 within the passed-in <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>. If the value the column within a particular row is null, the code displays the text &lt;NULL&gt;. If the data within the column of the correct type, the example displays an error message for each row.  </p>\n<pre><code class=\"lang-vb\" name=\"DataWorks DataTableReader.IsDbNull#1\">Private Sub PrintColumn(ByVal reader As DataTableReader)\n   &#39; Loop through all the rows in the DataTableReader\n   While reader.Read()\n      If reader.IsDBNull(2) Then\n         Console.Write(&quot;&lt;NULL&gt;&quot;)\n      Else\n         Try\n            Console.Write(reader.GetString(2))\n         Catch ex As InvalidCastException\n            Console.Write(&quot;Invalid data type.&quot;)\n         End Try\n      End If\n      Console.WriteLine()\n   End While\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks DataTableReader.IsDbNull#1\">    private static void PrintColumn(DataTableReader reader)\n    {\n        // Loop through all the rows in the DataTableReader\n        while (reader.Read())\n        {\n            if (reader.IsDBNull(2))\n            {\n                Console.Write(&quot;&lt;NULL&gt;&quot;);\n            }\n            else\n            {\n                try\n                {\n                    Console.Write(reader.GetString(2));\n                }\n                catch (InvalidCastException)\n                {\n                    Console.Write(&quot;Invalid data type.&quot;);\n                }\n            }\n            Console.WriteLine();\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader_NextResult\">\r\n    \r\n            <a id=\"System_Data_DataTableReader_NextResult_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NextResult()</div>        \r\n          </div>\r\n    \r\n            <p>Advances the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> to the next result set, if any.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool NextResult ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if there was another result set; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to navigate within a closed <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Used to process multiple results that can be generated by creating a <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> over a <a class=\"xref\" href=\"system.data.dataset\" data-linktype=\"relative-path\">DataSet</a> that contains two or more tables, or an array that contains two or more <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> instances.  </p>\n<p> A new <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> is positioned on the first result.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example, the TestConstructor method creates two <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>instances. In order to demonstrate this constructor for the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> class, the sample creates a new <code>DataTableReader</code> based on an array that contains the two <code>DataTables</code>, and performs a simple operation, printing the contents from the first few columns to the console window. In order to test this application, create a new Console application, and paste the sample code into the newly created file.  </p>\n<pre><code class=\"lang-vb\" name=\"DataWorks DataTableReader.NextResult#1\">   Private Sub TestConstructor()\n      &#39; Create two data adapters, one for each of the two\n      &#39; DataTables to be filled.\n      Dim customerDataTable As DataTable = GetCustomers()\n      Dim productDataTable As DataTable = GetProducts()\n\n      &#39; Create the new DataTableReader.\n      Using reader As New DataTableReader( _\n         New DataTable() {customerDataTable, productDataTable})\n\n         &#39; Print the contents of each of the result sets.\n         Do\n            PrintColumns(reader)\n         Loop While reader.NextResult()\n      End Using\n\n      Console.WriteLine(&quot;Press Enter to finish.&quot;)\n      Console.ReadLine()\n\n   End Sub\n\n   Private Function GetCustomers() As DataTable\n      &#39; Create sample Customers table, in order\n      &#39; to demonstrate the behavior of the DataTableReader.\n      Dim table As New DataTable\n\n      &#39; Create two columns, ID and Name.\n      Dim idColumn As DataColumn = table.Columns.Add(&quot;ID&quot;, GetType(Integer))\n      table.Columns.Add(&quot;Name&quot;, GetType(String))\n\n      &#39; Set the ID column as the primary key column.\n      table.PrimaryKey = New DataColumn() {idColumn}\n\n      table.Rows.Add(New Object() {1, &quot;Mary&quot;})\n      table.Rows.Add(New Object() {2, &quot;Andy&quot;})\n      table.Rows.Add(New Object() {3, &quot;Peter&quot;})\n      table.Rows.Add(New Object() {4, &quot;Russ&quot;})\n      Return table\n   End Function\n\n   Private Function GetProducts() As DataTable\n      &#39; Create sample Products table, in order\n      &#39; to demonstrate the behavior of the DataTableReader.\n      Dim table As New DataTable\n\n      &#39; Create two columns, ID and Name.\n      Dim idColumn As DataColumn = table.Columns.Add(&quot;ID&quot;, GetType(Integer))\n      table.Columns.Add(&quot;Name&quot;, GetType(String))\n\n      &#39; Set the ID column as the primary key column.\n      table.PrimaryKey = New DataColumn() {idColumn}\n\n      table.Rows.Add(New Object() {1, &quot;Wireless Network Card&quot;})\n      table.Rows.Add(New Object() {2, &quot;Hard Drive&quot;})\n      table.Rows.Add(New Object() {3, &quot;Monitor&quot;})\n      table.Rows.Add(New Object() {4, &quot;CPU&quot;})\n      Return table\n   End Function\n\n   Private Sub PrintColumns( _\n      ByVal reader As DataTableReader)\n\n      &#39; Loop through all the rows in the DataTableReader.\n      Do While reader.Read()\n         For i As Integer = 0 To reader.FieldCount - 1\n            Console.Write(reader(i).ToString() &amp; &quot; &quot;)\n         Next\n         Console.WriteLine()\n      Loop\n   End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks DataTableReader.NextResult#1\">    private static void TestConstructor()\n    {\n        // Create two data adapters, one for each of the two\n        // DataTables to be filled.\n        DataTable customerDataTable = GetCustomers();\n        DataTable productDataTable = GetProducts();\n\n        // Create the new DataTableReader.\n        using (DataTableReader reader = new DataTableReader(\n                   new DataTable[] { customerDataTable, productDataTable }))\n        {\n            // Print the contents of each of the result sets.\n            do\n            {\n                PrintColumns(reader);\n            } while (reader.NextResult());\n        }\n\n        Console.WriteLine(&quot;Press Enter to finish.&quot;);\n        Console.ReadLine();\n    }\n\n    private static DataTable GetCustomers()\n    {\n        // Create sample Customers table, in order\n        // to demonstrate the behavior of the DataTableReader.\n        DataTable table = new DataTable();\n      \n        // Create two columns, ID and Name.\n        DataColumn idColumn = table.Columns.Add(&quot;ID&quot;, typeof(int));\n        table.Columns.Add(&quot;Name&quot;, typeof(string ));\n      \n        // Set the ID column as the primary key column.\n        table.PrimaryKey = new DataColumn[] { idColumn };\n\n        table.Rows.Add(new object[] { 1, &quot;Mary&quot; });\n        table.Rows.Add(new object[] { 2, &quot;Andy&quot; });\n        table.Rows.Add(new object[] { 3, &quot;Peter&quot; });\n        table.Rows.Add(new object[] { 4, &quot;Russ&quot; });\n        return table;\n    }\n\n    private static DataTable GetProducts()\n    {\n        // Create sample Products table, in order\n        // to demonstrate the behavior of the DataTableReader.\n        DataTable table = new DataTable();\n      \n        // Create two columns, ID and Name.\n        DataColumn idColumn = table.Columns.Add(&quot;ID&quot;, typeof(int));\n        table.Columns.Add(&quot;Name&quot;, typeof(string ));\n      \n        // Set the ID column as the primary key column.\n        table.PrimaryKey = new DataColumn[] { idColumn };\n\n        table.Rows.Add(new object[] { 1, &quot;Wireless Network Card&quot; });\n        table.Rows.Add(new object[] { 2, &quot;Hard Drive&quot; });\n        table.Rows.Add(new object[] { 3, &quot;Monitor&quot; });\n        table.Rows.Add(new object[] { 4, &quot;CPU&quot; });\n        return table;\n    }\n\n    private static void PrintColumns(DataTableReader reader)\n    {\n        // Loop through all the rows in the DataTableReader\n        while (reader.Read())\n        {\n            for (int i = 0; i &lt; reader.FieldCount; i++)\n            {\n                Console.Write(reader[i] + &quot; &quot;);\n            }\n            Console.WriteLine();\n        }\n    }\n</code></pre><p> The Console window displays the following results:  </p>\n<pre><code>1 Mary  \n2 Andy  \n3 Peter  \n4 Russ  \n1 Wireless Network Card  \n2 Hard Drive  \n3 Monitor  \n4 CPU  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_DataTableReader_Read\">\r\n    \r\n            <a id=\"System_Data_DataTableReader_Read_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Read()</div>        \r\n          </div>\r\n    \r\n            <p>Advances the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> to the next record.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Read ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if there was another row to read; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to read or access a column in a closed <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> .</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default position of the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a> is before the first record. Therefore, you must call <code>Read</code> to start accessing any data.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The PrintColumns procedure loops through all the rows in the <a class=\"xref\" href=\"system.data.datatablereader\" data-linktype=\"relative-path\">DataTableReader</a>, displaying the contents of each column in the Console window.  </p>\n<pre><code class=\"lang-cs\" name=\"DataWorks DataTableReader.Read#1\">    private static void PrintColumns(DataTableReader reader)\n    {\n        // Loop through all the rows in the DataTableReader\n        while (reader.Read())\n        {\n            for (int i = 0; i &lt; reader.FieldCount; i++)\n            {\n                Console.Write(&quot;{0} &quot;, reader[i]);\n            }\n            Console.WriteLine();\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks DataTableReader.Read#1\">Private Sub PrintColumns( _\n   ByVal reader As DataTableReader)\n\n   &#39; Loop through all the rows in the DataTableReader.\n   While reader.Read()\n       For i As Integer = 0 To reader.FieldCount - 1\n         Console.Write(&quot;{0} &quot;, reader(i))\n      Next\n      Console.WriteLine()\n   End While\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Data.DataTableReader.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Data.DataTableReader.yml\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTableReader\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTableReader..ctor\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTableReader.Close\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTableReader.Depth\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTableReader.FieldCount\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTableReader.GetBoolean\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTableReader.GetByte\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTableReader.GetBytes\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTableReader.GetChar\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTableReader.GetChars\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTableReader.GetDataTypeName\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTableReader.GetDateTime\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTableReader.GetDecimal\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTableReader.GetDouble\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTableReader.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTableReader.GetFieldType\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTableReader.GetFloat\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTableReader.GetGuid\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTableReader.GetInt16\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTableReader.GetInt32\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTableReader.GetInt64\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTableReader.GetName\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTableReader.GetOrdinal\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTableReader.GetProviderSpecificFieldType\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTableReader.GetProviderSpecificValue\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTableReader.GetProviderSpecificValues\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTableReader.GetSchemaTable\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTableReader.GetString\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTableReader.GetValue\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTableReader.GetValues\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTableReader.HasRows\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTableReader.IsClosed\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTableReader.IsDBNull\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTableReader.Item\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTableReader.NextResult\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTableReader.Read\">\r\n<meta name=\"APIName\" content=\"System.Data.DataTableReader.RecordsAffected\">\r\n<meta name=\"APILocation\" content=\"System.Data.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"5d188fd3-64ed-14b5-dd7a-a0affb0238cb\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"The DataTableReader obtains the contents of one or more  objects in the form of one or more read-only, forward-only result sets.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Data/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Data.DataTableReader\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Data.DataTableReader.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Data.DataTableReader.yml","open_to_public_contributors":true,"api_name":["System.Data.DataTableReader","System.Data.DataTableReader..ctor","System.Data.DataTableReader.Close","System.Data.DataTableReader.Depth","System.Data.DataTableReader.FieldCount","System.Data.DataTableReader.GetBoolean","System.Data.DataTableReader.GetByte","System.Data.DataTableReader.GetBytes","System.Data.DataTableReader.GetChar","System.Data.DataTableReader.GetChars","System.Data.DataTableReader.GetDataTypeName","System.Data.DataTableReader.GetDateTime","System.Data.DataTableReader.GetDecimal","System.Data.DataTableReader.GetDouble","System.Data.DataTableReader.GetEnumerator","System.Data.DataTableReader.GetFieldType","System.Data.DataTableReader.GetFloat","System.Data.DataTableReader.GetGuid","System.Data.DataTableReader.GetInt16","System.Data.DataTableReader.GetInt32","System.Data.DataTableReader.GetInt64","System.Data.DataTableReader.GetName","System.Data.DataTableReader.GetOrdinal","System.Data.DataTableReader.GetProviderSpecificFieldType","System.Data.DataTableReader.GetProviderSpecificValue","System.Data.DataTableReader.GetProviderSpecificValues","System.Data.DataTableReader.GetSchemaTable","System.Data.DataTableReader.GetString","System.Data.DataTableReader.GetValue","System.Data.DataTableReader.GetValues","System.Data.DataTableReader.HasRows","System.Data.DataTableReader.IsClosed","System.Data.DataTableReader.IsDBNull","System.Data.DataTableReader.Item","System.Data.DataTableReader.NextResult","System.Data.DataTableReader.Read","System.Data.DataTableReader.RecordsAffected"],"api_location":["System.Data.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Data.DataTableReader","System::Data::DataTableReader","System.Data.DataTableReader.#ctor","System::Data::DataTableReader::#ctor","System.Data.DataTableReader.Close","System::Data::DataTableReader::Close","System.Data.DataTableReader.Depth","System::Data::DataTableReader::Depth","System.Data.DataTableReader.FieldCount","System::Data::DataTableReader::FieldCount","System.Data.DataTableReader.GetBoolean","System::Data::DataTableReader::GetBoolean","System.Data.DataTableReader.GetByte","System::Data::DataTableReader::GetByte","System.Data.DataTableReader.GetBytes","System::Data::DataTableReader::GetBytes","System.Data.DataTableReader.GetChar","System::Data::DataTableReader::GetChar","System.Data.DataTableReader.GetChars","System::Data::DataTableReader::GetChars","System.Data.DataTableReader.GetDataTypeName","System::Data::DataTableReader::GetDataTypeName","System.Data.DataTableReader.GetDateTime","System::Data::DataTableReader::GetDateTime","System.Data.DataTableReader.GetDecimal","System::Data::DataTableReader::GetDecimal","System.Data.DataTableReader.GetDouble","System::Data::DataTableReader::GetDouble","System.Data.DataTableReader.GetEnumerator","System::Data::DataTableReader::GetEnumerator","System.Data.DataTableReader.GetFieldType","System::Data::DataTableReader::GetFieldType","System.Data.DataTableReader.GetFloat","System::Data::DataTableReader::GetFloat","System.Data.DataTableReader.GetGuid","System::Data::DataTableReader::GetGuid","System.Data.DataTableReader.GetInt16","System::Data::DataTableReader::GetInt16","System.Data.DataTableReader.GetInt32","System::Data::DataTableReader::GetInt32","System.Data.DataTableReader.GetInt64","System::Data::DataTableReader::GetInt64","System.Data.DataTableReader.GetName","System::Data::DataTableReader::GetName","System.Data.DataTableReader.GetOrdinal","System::Data::DataTableReader::GetOrdinal","System.Data.DataTableReader.GetProviderSpecificFieldType","System::Data::DataTableReader::GetProviderSpecificFieldType","System.Data.DataTableReader.GetProviderSpecificValue","System::Data::DataTableReader::GetProviderSpecificValue","System.Data.DataTableReader.GetProviderSpecificValues","System::Data::DataTableReader::GetProviderSpecificValues","System.Data.DataTableReader.GetSchemaTable","System::Data::DataTableReader::GetSchemaTable","System.Data.DataTableReader.GetString","System::Data::DataTableReader::GetString","System.Data.DataTableReader.GetValue","System::Data::DataTableReader::GetValue","System.Data.DataTableReader.GetValues","System::Data::DataTableReader::GetValues","System.Data.DataTableReader.HasRows","System::Data::DataTableReader::HasRows","System.Data.DataTableReader.IsClosed","System::Data::DataTableReader::IsClosed","System.Data.DataTableReader.IsDBNull","System::Data::DataTableReader::IsDBNull","System.Data.DataTableReader.Item","System::Data::DataTableReader::Item","System.Data.DataTableReader.NextResult","System::Data::DataTableReader::NextResult","System.Data.DataTableReader.Read","System::Data::DataTableReader::Read","System.Data.DataTableReader.RecordsAffected","System::Data::DataTableReader::RecordsAffected"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"5d188fd3-64ed-14b5-dd7a-a0affb0238cb","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Data/DataTableReader.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DataTableReader class | Microsoft Docs","_op_ogTitle":"DataTableReader class","description":"The DataTableReader obtains the contents of one or more  objects in the form of one or more read-only, forward-only result sets.\n","toc_asset_id":"_splitted/System.Data/toc.json","toc_rel":"_splitted/System.Data/toc.json","source_url":"","ms.assetid":"System.Data.DataTableReader","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.data.datatablereader","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.data.datatablereader","fileRelativePath":"System.Data.DataTableReader.html"},"themesRelativePathToOutputRoot":"_themes/"}