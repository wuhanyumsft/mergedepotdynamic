{"content":"\r\n<div style=\"display:none\">\r\n\t\r\n</div>\r\n\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ChangeMonitor</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides a base class for a derived custom type that monitors changes in the state of the data which a cache item depends on.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public abstract class ChangeMonitor : IDisposable</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span></div>\r\n  \t\t\t<span class=\"lang-csharp\">ChangeMonitor</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The ChangeMonitor class is used as the base class for derived monitor classes that are specialized for particular cache implementations. A ChangeMonitor instance monitors changes in the state of data which a cache item depends on. For example, the item can be a file or data entity whose contents are cached. If the file or data entity is updated, the associated cache entry must be changed also. Common items that can be monitored include data entities (such as database fields, values, rows, or tables), another cache entry, and files and file attributes.  </p>\n<p> A dependency change is a change in the state of a dependency. In a typical cache implementation, after a ChangeMonitor instance notifies the cache that a dependency has changed, the cache performs the required action, such as invalidating the inserted cache entry.  </p>\n<p> Derived ChangeMonitor classes can be customized to monitor dependency changes for specific different data stores. For example, there are cache implementations for a file system, physical memory, or a database. The ChangeMonitor class examines changes that occur outside the cache, and then alerts the cache that changes have occurred.  </p>\n<p> The .NET Framework includes the following classes that derive from ChangeMonitor class:  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.runtime.caching.cacheentrychangemonitor\" data-linktype=\"relative-path\">CacheEntryChangeMonitor</a>  \n</li>\n<li><a class=\"xref\" href=\"system.runtime.caching.filechangemonitor\" data-linktype=\"relative-path\">FileChangeMonitor</a>  \n</li>\n<li><a class=\"xref\" href=\"system.runtime.caching.hostfilechangemonitor\" data-linktype=\"relative-path\">HostFileChangeMonitor</a>  \n</li>\n<li><a class=\"xref\" href=\"system.runtime.caching.sqlchangemonitor\" data-linktype=\"relative-path\">SqlChangeMonitor</a>  \n\n<p>Each of these classes works with different types of dependencies. For example, the derived <a class=\"xref\" href=\"system.runtime.caching.filechangemonitor\" data-linktype=\"relative-path\">FileChangeMonitor</a> class monitors changes to a cache for file system data (files and folders) that the cache item depends on.</p>\n</li>\n</ul>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_Caching_ChangeMonitor__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ChangeMonitor()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.runtime.caching.changemonitor\" data-linktype=\"relative-path\">ChangeMonitor</a> class. This constructor is called from constructors in derived classes to initialize the base class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected ChangeMonitor ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.runtime.caching.changemonitor\" data-linktype=\"relative-path\">ChangeMonitor</a> class has a default constructor. However, classes that inherit from the base <a class=\"xref\" href=\"system.runtime.caching.changemonitor\" data-linktype=\"relative-path\">ChangeMonitor</a> class and define custom change-monitoring behavior must perform initialization in the constructor. For more information, see the Notes for Inheritors section.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_Caching_ChangeMonitor_HasChanged\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">HasChanged</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates that the state that is monitored by the <a class=\"xref\" href=\"system.runtime.caching.changemonitor\" data-linktype=\"relative-path\">ChangeMonitor</a> class has changed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool HasChanged { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the state that is monitored by the <a class=\"xref\" href=\"system.runtime.caching.changemonitor\" data-linktype=\"relative-path\">ChangeMonitor</a> instance has changed; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>You can check the value of this property in a derived <a class=\"xref\" href=\"system.runtime.caching.changemonitor\" data-linktype=\"relative-path\">ChangeMonitor</a> class to see whether a dependency has changed.  </p>\n<p> The value is set to <code>true</code> when a dependency change occurs (that is, when the <a class=\"xref\" href=\"system.runtime.caching.changemonitor#System_Runtime_Caching_ChangeMonitor_OnChanged_\" data-linktype=\"relative-path\">OnChanged</a> method is called). After the <a class=\"xref\" href=\"system.runtime.caching.changemonitor#System_Runtime_Caching_ChangeMonitor_OnChanged_\" data-linktype=\"relative-path\">OnChanged</a> method is called by the derived class, the value of the HasChanged property will be <code>true</code>, regardless of whether a <a class=\"xref\" href=\"system.runtime.caching.onchangedcallback\" data-linktype=\"relative-path\">OnChangedCallback</a> instance has been notified by a call to the <a class=\"xref\" href=\"system.runtime.caching.changemonitor#System_Runtime_Caching_ChangeMonitor_NotifyOnChanged_\" data-linktype=\"relative-path\">NotifyOnChanged</a> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Callers can check the HasChanged property to see whether a dependency has changed. However, in a multi-threaded environment, a simpler and more maintainable approach is to insert data into a cache implementation without checking the HasChanged property. Cache implementations must check the HasChanged property for you and must not perform an insert or set operation if one or more associated dependencies have already changed.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_Caching_ChangeMonitor_IsDisposed\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsDisposed</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates that the derived instance of a <a class=\"xref\" href=\"system.runtime.caching.changemonitor\" data-linktype=\"relative-path\">ChangeMonitor</a> class is disposed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsDisposed { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the instance is disposed; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The property is set to <code>true</code> after the base <a class=\"xref\" href=\"system.runtime.caching.changemonitor#System_Runtime_Caching_ChangeMonitor_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method calls the <a class=\"xref\" href=\"system.runtime.caching.changemonitor#System_Runtime_Caching_ChangeMonitor_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method in a derived class to dispose of the instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_Caching_ChangeMonitor_UniqueId\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">UniqueId</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that represents the <a class=\"xref\" href=\"system.runtime.caching.changemonitor\" data-linktype=\"relative-path\">ChangeMonitor</a> class instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public abstract string UniqueId { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The identifier for a change-monitor instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The UniqueId property value typically consists of dependency names combined string data that uniquely identifiers the data that is being monitored by a <a class=\"xref\" href=\"system.runtime.caching.changemonitor\" data-linktype=\"relative-path\">ChangeMonitor</a> instance. The value of the UniqueId property is a string. The value of the string is used to assign the unique ID of the <a class=\"xref\" href=\"system.runtime.caching.changemonitor\" data-linktype=\"relative-path\">ChangeMonitor</a> instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_Caching_ChangeMonitor_Dispose\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Dispose()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Releases all resources that are used by the current instance of the <a class=\"xref\" href=\"system.runtime.caching.changemonitor\" data-linktype=\"relative-path\">ChangeMonitor</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Dispose ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Initialization is not complete in the derived change-monitor class that called the base Dispose method.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Dispose method invokes the <a class=\"xref\" href=\"system.runtime.caching.changemonitor#System_Runtime_Caching_ChangeMonitor_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method of derived classes only one time, the first time it is called. Subsequent calls to the Dispose method have no effect. After the method has been called, the <a class=\"xref\" href=\"system.runtime.caching.changemonitor#System_Runtime_Caching_ChangeMonitor_IsDisposed_\" data-linktype=\"relative-path\">IsDisposed</a> property is set to <code>true</code>.  </p>\n<p> The <a class=\"xref\" href=\"system.runtime.caching.changemonitor#System_Runtime_Caching_ChangeMonitor_Dispose_\" data-linktype=\"relative-path\">Dispose</a> overload must be called to dispose of a <a class=\"xref\" href=\"system.runtime.caching.changemonitor\" data-linktype=\"relative-path\">ChangeMonitor</a> instance. The following are the rules for calling the dispose method:  </p>\n<ul>\n<li><p>Before an item is inserted into the cache, it is the caller&#39;s responsibility to dispose of a <a class=\"xref\" href=\"system.runtime.caching.changemonitor\" data-linktype=\"relative-path\">ChangeMonitor</a> instance.  </p>\n</li>\n<li><p>Once cache item and the <a class=\"xref\" href=\"system.runtime.caching.changemonitor\" data-linktype=\"relative-path\">ChangeMonitor</a> instances that are associated with it are passed to a cache, the cache implementer that must make sure that <a class=\"xref\" href=\"system.runtime.caching.changemonitor#System_Runtime_Caching_ChangeMonitor_Dispose_\" data-linktype=\"relative-path\">Dispose</a> is called, even if the insert fails.  </p>\n</li>\n<li><p>After an item and its associated <a class=\"xref\" href=\"system.runtime.caching.changemonitor\" data-linktype=\"relative-path\">ChangeMonitor</a> instances are passed to a cache, the caller must not dispose the dependency because when the <a class=\"xref\" href=\"system.runtime.caching.changemonitor#System_Runtime_Caching_ChangeMonitor_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method is called, the call is treated as if the dependency has changed. As a result, the <a class=\"xref\" href=\"system.runtime.caching.changemonitor#System_Runtime_Caching_ChangeMonitor_OnChanged_\" data-linktype=\"relative-path\">OnChanged</a> method is automatically invoked.  </p>\n</li>\n<li><p>Taking these rules into consideration, the <a class=\"xref\" href=\"system.runtime.caching.changemonitor#System_Runtime_Caching_ChangeMonitor_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method must be called in one of the following ways:  </p>\n<ul>\n<li><p>Users must call the Dispose method overload if they decide not to insert the derived change-monitor instance into a cache.  </p>\n</li>\n<li><p>The cache implementation is responsible for calling the Dispose overload if the implementation tries to insert the change-monitor instance into an object cache but the insertion fails. When the insertion attempt causes an exception, the cache implementation must dispose any associated dependencies.  </p>\n</li>\n<li><p>If the cache entry is removed, the cache implementation must also dispose the dependency.  </p>\n</li>\n</ul>\n<p>The internal implementation of the <a class=\"xref\" href=\"system.runtime.caching.changemonitor#System_Runtime_Caching_ChangeMonitor_OnChanged_\" data-linktype=\"relative-path\">OnChanged</a> method automatically calls the <a class=\"xref\" href=\"system.runtime.caching.changemonitor#System_Runtime_Caching_ChangeMonitor_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method after it calls a callback that is registered through the <a class=\"xref\" href=\"system.runtime.caching.changemonitor#System_Runtime_Caching_ChangeMonitor_NotifyOnChanged_\" data-linktype=\"relative-path\">NotifyOnChanged</a> method.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> This automatic dispose during the event firing only occurs if the initialization of the <a class=\"xref\" href=\"system.runtime.caching.changemonitor\" data-linktype=\"relative-path\">ChangeMonitor</a> instance previously completed.  </p>\n</div>\n<p> When a derived change monitor&#39;s constructor calls the <a class=\"xref\" href=\"system.runtime.caching.changemonitor#System_Runtime_Caching_ChangeMonitor_InitializationComplete_\" data-linktype=\"relative-path\">InitializationComplete</a> method, if the state of the change monitor has already changed (that is, the state that is monitored has already changed when the constructor was still active) then <a class=\"xref\" href=\"system.runtime.caching.changemonitor#System_Runtime_Caching_ChangeMonitor_InitializationComplete_\" data-linktype=\"relative-path\">InitializationComplete</a> method will automatically dispose the change monitor.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Users should not call the Dispose method. However, you cannot prevent users from calling the method. Therefore, if they do, the <a class=\"xref\" href=\"system.runtime.caching.changemonitor#System_Runtime_Caching_ChangeMonitor_OnChanged_\" data-linktype=\"relative-path\">OnChanged</a> method is invoked. In that case, the cache entry is notified as if the dependency has changed.  </p>\n</div>\n<p> To prevent derived classes from overriding Dispose method, the method is not an explicit interface implementation.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_Caching_ChangeMonitor_Dispose_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Dispose(Boolean)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Releases all managed and unmanaged resources and any references to the <a class=\"xref\" href=\"system.runtime.caching.changemonitor\" data-linktype=\"relative-path\">ChangeMonitor</a> instance. This overload must be implemented by derived change-monitor classes.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected abstract void Dispose (bool disposing);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>disposing</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to release managed and unmanaged resources and any references to a <a class=\"xref\" href=\"system.runtime.caching.changemonitor\" data-linktype=\"relative-path\">ChangeMonitor</a> instance; <code>false</code> to release only unmanaged resources. When <code>false</code> is passed, the Dispose method is called by a <code>finalizer</code> thread and any external managed references are likely no longer valid because they have already been garbage collected.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>When the value of <code>disposing</code> value is <code>true</code>, all managed and unmanaged resources are disposed and any references to this object are released so that the derived change-monitor instance can be garbage collected. It is guaranteed that the base <a class=\"xref\" href=\"system.runtime.caching.changemonitor#System_Runtime_Caching_ChangeMonitor_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method will invoke the implemented Dispose method only one time.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_Caching_ChangeMonitor_InitializationComplete\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">InitializationComplete()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Called from the constructor of derived classes to indicate that initialization is finished.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected void InitializationComplete ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If a dependency changes before initialization is complete in a derived class, the constructor of the derived class must invoke the <a class=\"xref\" href=\"system.runtime.caching.changemonitor#System_Runtime_Caching_ChangeMonitor_OnChanged_\" data-linktype=\"relative-path\">OnChanged</a> method.  </p>\n<p> When the <a class=\"xref\" href=\"system.runtime.caching.changemonitor#System_Runtime_Caching_ChangeMonitor_OnChanged_\" data-linktype=\"relative-path\">OnChanged</a> method is invoked, the <a class=\"xref\" href=\"system.runtime.caching.changemonitor#System_Runtime_Caching_ChangeMonitor_HasChanged_\" data-linktype=\"relative-path\">HasChanged</a> property is automatically set to <code>true</code> by the change monitor. As a result, when the change monitor&#39;s constructor calls the InitializationComplete method, the base class will automatically call the <a class=\"xref\" href=\"system.runtime.caching.changemonitor#System_Runtime_Caching_ChangeMonitor_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method. If initialization is complete, the <a class=\"xref\" href=\"system.runtime.caching.changemonitor#System_Runtime_Caching_ChangeMonitor_OnChanged_\" data-linktype=\"relative-path\">OnChanged</a> method automatically disposes the derived change-monitor instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_Caching_ChangeMonitor_NotifyOnChanged_System_Runtime_Caching_OnChangedCallback_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">NotifyOnChanged(OnChangedCallback)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Called by Cache implementers to register a callback and notify an <a class=\"xref\" href=\"system.runtime.caching.objectcache\" data-linktype=\"relative-path\">ObjectCache</a> instance through the <a class=\"xref\" href=\"system.runtime.caching.onchangedcallback\" data-linktype=\"relative-path\">OnChangedCallback</a> delegate when a dependency has changed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void NotifyOnChanged (System.Runtime.Caching.OnChangedCallback onChangedCallback);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>onChangedCallback</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.caching.onchangedcallback\" data-linktype=\"relative-path\">OnChangedCallback</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A reference to a method that is invoked when a dependency has changed.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The callback method has already been invoked.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>onChangedCallback</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Cache implementers use this method to wire themselves up to a change monitor. If you associate one or more change monitors with the cache item, you pass a <a class=\"xref\" href=\"system.runtime.caching.cacheitempolicy\" data-linktype=\"relative-path\">CacheItemPolicy</a> instance with a populated change monitors property to the cache item. A cache implementer that supports change monitors is responsible for iterating over the <a class=\"xref\" href=\"system.runtime.caching.cacheitempolicy#System_Runtime_Caching_CacheItemPolicy_ChangeMonitors_\" data-linktype=\"relative-path\">ChangeMonitors</a> property and register the <a class=\"xref\" href=\"system.runtime.caching.onchangedcallback\" data-linktype=\"relative-path\">OnChangedCallback</a> delegates with each change monitor that it finds.  </p>\n<p> Because the <a class=\"xref\" href=\"system.runtime.caching.onchangedcallback\" data-linktype=\"relative-path\">OnChangedCallback</a> delegate includes an optional state parameter, a concrete change monitor implementation can pass optional state information. The cache implementer determines whether an explicit dependency on the type of state that a custom change monitor passes as part of the callback can be taken.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The base cache extensibility API has no requirement for explicit dependency on the type of state.  </p>\n</div>\n<p> The implementation of the NotifyOnChanged method automatically determines whether the state of the monitor has already changed at the time NotifyOnChanged method is called. If the <a class=\"xref\" href=\"system.runtime.caching.changemonitor#System_Runtime_Caching_ChangeMonitor_HasChanged_\" data-linktype=\"relative-path\">HasChanged</a> property is <code>true</code>, then the method automatically calls the <a class=\"xref\" href=\"system.runtime.caching.onchangedcallback\" data-linktype=\"relative-path\">OnChangedCallback</a> event handler, that was registered, through the <a class=\"xref\" href=\"system.runtime.caching.changemonitor#System_Runtime_Caching_ChangeMonitor_OnChanged_\" data-linktype=\"relative-path\">OnChanged</a> method. This occurs because it is possible that from the time a cache implementation creates a change monitor, to the time a cache implementation gets the monitor and wires itself up to it, the underlying monitored state has changed. If the state has already changed then the object that is passed to the <a class=\"xref\" href=\"system.runtime.caching.changemonitor#System_Runtime_Caching_ChangeMonitor_OnChanged_\" data-linktype=\"relative-path\">OnChanged</a> method is <code>null</code>.  </p>\n<p> The NotifyOnChanged method can be invoked only one time, and will throw an exception on subsequent calls.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_Caching_ChangeMonitor_OnChanged_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnChanged(Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Called by derived classes to raise the event when a dependency changes.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected void OnChanged (object state);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>state</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The data for the change event. This value can be <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Typically, the OnChanged method is called when dependency changes occur. The OnChanged method is also invoked when a change-monitor instance is disposed but the disposal occurs only if the callback has not already been invoked.  </p>\n<p> If the OnChanged method is called before the <a class=\"xref\" href=\"system.runtime.caching.changemonitor#System_Runtime_Caching_ChangeMonitor_NotifyOnChanged_\" data-linktype=\"relative-path\">NotifyOnChanged</a> method is called, the state data from the call to the OnChanged method is saved by the cache implementation. Also, the callback to the <a class=\"xref\" href=\"system.runtime.caching.onchangedcallback\" data-linktype=\"relative-path\">OnChangedCallback</a> method is invoked immediately when the <a class=\"xref\" href=\"system.runtime.caching.changemonitor#System_Runtime_Caching_ChangeMonitor_NotifyOnChanged_\" data-linktype=\"relative-path\">NotifyOnChanged</a> method is invoked.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Runtime.Caching.ChangeMonitor.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Runtime.Caching.ChangeMonitor.yml\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Caching.ChangeMonitor\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Caching.ChangeMonitor..ctor\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Caching.ChangeMonitor.Dispose\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Caching.ChangeMonitor.HasChanged\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Caching.ChangeMonitor.InitializationComplete\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Caching.ChangeMonitor.IsDisposed\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Caching.ChangeMonitor.NotifyOnChanged\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Caching.ChangeMonitor.OnChanged\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Caching.ChangeMonitor.UniqueId\">\r\n<meta name=\"APILocation\" content=\"System.Runtime.Caching.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"51b78c7a-4a75-c267-d780-e6ed1e32a941\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a base class for a derived custom type that monitors changes in the state of the data which a cache item depends on.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Runtime.Caching/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Runtime.Caching.ChangeMonitor\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Runtime.Caching.ChangeMonitor.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Runtime.Caching.ChangeMonitor.yml","open_to_public_contributors":true,"api_name":["System.Runtime.Caching.ChangeMonitor","System.Runtime.Caching.ChangeMonitor..ctor","System.Runtime.Caching.ChangeMonitor.Dispose","System.Runtime.Caching.ChangeMonitor.HasChanged","System.Runtime.Caching.ChangeMonitor.InitializationComplete","System.Runtime.Caching.ChangeMonitor.IsDisposed","System.Runtime.Caching.ChangeMonitor.NotifyOnChanged","System.Runtime.Caching.ChangeMonitor.OnChanged","System.Runtime.Caching.ChangeMonitor.UniqueId"],"api_location":["System.Runtime.Caching.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Runtime.Caching.ChangeMonitor","System::Runtime::Caching::ChangeMonitor","System.Runtime.Caching.ChangeMonitor.#ctor","System::Runtime::Caching::ChangeMonitor::#ctor","System.Runtime.Caching.ChangeMonitor.Dispose","System::Runtime::Caching::ChangeMonitor::Dispose","System.Runtime.Caching.ChangeMonitor.HasChanged","System::Runtime::Caching::ChangeMonitor::HasChanged","System.Runtime.Caching.ChangeMonitor.InitializationComplete","System::Runtime::Caching::ChangeMonitor::InitializationComplete","System.Runtime.Caching.ChangeMonitor.IsDisposed","System::Runtime::Caching::ChangeMonitor::IsDisposed","System.Runtime.Caching.ChangeMonitor.NotifyOnChanged","System::Runtime::Caching::ChangeMonitor::NotifyOnChanged","System.Runtime.Caching.ChangeMonitor.OnChanged","System::Runtime::Caching::ChangeMonitor::OnChanged","System.Runtime.Caching.ChangeMonitor.UniqueId","System::Runtime::Caching::ChangeMonitor::UniqueId"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"51b78c7a-4a75-c267-d780-e6ed1e32a941","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Runtime.Caching/ChangeMonitor.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ChangeMonitor class | Microsoft Docs","_op_ogTitle":"ChangeMonitor class","description":"Provides a base class for a derived custom type that monitors changes in the state of the data which a cache item depends on.\n","toc_asset_id":"_splitted/System.Runtime.Caching/toc.json","toc_rel":"_splitted/System.Runtime.Caching/toc.json","source_url":"","ms.assetid":"System.Runtime.Caching.ChangeMonitor","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.runtime.caching.changemonitor","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.runtime.caching.changemonitor","fileRelativePath":"System.Runtime.Caching.ChangeMonitor.html"},"themesRelativePathToOutputRoot":"_themes/"}