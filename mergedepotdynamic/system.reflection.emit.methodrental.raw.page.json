{"content":"    \r\n    <h1 id=\"System_Reflection_Emit_MethodRental\">\r\n      <span class=\"lang-csharp\">MethodRental</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides a fast way to swap method body implementation given a method of a class.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n[System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._MethodRental))]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class MethodRental : System.Runtime.InteropServices._MethodRental</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">MethodRental</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n    \r\n    \r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_MethodRental_JitImmediate\" data-linktype=\"self-bookmark\">JitImmediate</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies that the method should be just-in-time (JIT) compiled immediately.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_MethodRental_JitOnDemand\" data-linktype=\"self-bookmark\">JitOnDemand</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies that the method should be just-in-time (JIT) compiled when needed.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_MethodRental_SwapMethodBody_System_Type_System_Int32_System_IntPtr_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">SwapMethodBody(Type,Int32,IntPtr,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Swaps the body of a method.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_MethodRental_System_Runtime_InteropServices__MethodRental_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"self-bookmark\">_MethodRental.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Maps a set of names to a corresponding set of dispatch identifiers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_MethodRental_System_Runtime_InteropServices__MethodRental_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"self-bookmark\">_MethodRental.GetTypeInfo(UInt32,UInt32,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the type information for an object, which can then be used to get the type information for an interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_MethodRental_System_Runtime_InteropServices__MethodRental_GetTypeInfoCount_System_UInt32__\" data-linktype=\"self-bookmark\">_MethodRental.GetTypeInfoCount(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_MethodRental_System_Runtime_InteropServices__MethodRental_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"self-bookmark\">_MethodRental.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides access to properties and methods exposed by an object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_MethodRental_JitImmediate\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">JitImmediate</div>        \r\n          </div>\r\n    \r\n            <p>Specifies that the method should be just-in-time (JIT) compiled immediately.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const int JitImmediate = 1;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_MethodRental_JitOnDemand\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">JitOnDemand</div>        \r\n          </div>\r\n    \r\n            <p>Specifies that the method should be just-in-time (JIT) compiled when needed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const int JitOnDemand = 0;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_MethodRental_SwapMethodBody_System_Type_System_Int32_System_IntPtr_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_MethodRental_SwapMethodBody_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SwapMethodBody(Type,Int32,IntPtr,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Swaps the body of a method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void SwapMethodBody (Type cls, int methodtoken, IntPtr rgIL, int methodSize, int flags);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>cls</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The class containing the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>methodtoken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The token for the method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgIL</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to the method. This should include the method header.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>methodSize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The size of the new method body in bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>flags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Flags that control the swapping. See the definitions of the constants.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>cls</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The type <code>cls</code> is not complete.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>methodSize</code> is less than one or greater than 4128767 (3effff hex).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You cannot use this method to swap the body of a global method.  </p>\n<p> The method can only be called by the client that created the dynamic module that contains the type whose method&#39;s body is being swapped.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates how to swap a method body for a new body. It also illustrates how to obtain a method token for an existing method and how to construct a blob of bytes representing the Microsoft Intermediate Language (MSIL) code to be passed to <code>SwapMethodBody</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic MethodRental.SwapMethodBody Example#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nusing namespace System::Runtime::InteropServices;\n\n// First make a method that returns 0.\n// Then swap the method body with a body that returns 1.\nint main()\n{\n   // Construct a dynamic assembly\n   Guid g = Guid::NewGuid();\n   AssemblyName^ asmname = gcnew AssemblyName;\n   asmname-&gt;Name = String::Concat( &quot;tempfile&quot;, g );\n   AssemblyBuilder^ asmbuild = System::Threading::Thread::GetDomain()-&gt;DefineDynamicAssembly( asmname, AssemblyBuilderAccess::Run );\n\n   // Add a dynamic module that contains one type that has one method that\n   // has no arguments.\n   ModuleBuilder^ modbuild = asmbuild-&gt;DefineDynamicModule( &quot;test&quot; );\n   TypeBuilder^ tb = modbuild-&gt;DefineType( &quot;name of the Type&quot; );\n   array&lt;Type^&gt;^temp2;\n   MethodBuilder^ somemethod = tb-&gt;DefineMethod( &quot;My method Name&quot;, static_cast&lt;MethodAttributes&gt;(MethodAttributes::Public | MethodAttributes::Static), int::typeid, temp2 );\n\n   // Define the body of the method to return 0.\n   ILGenerator^ ilg = somemethod-&gt;GetILGenerator();\n   ilg-&gt;Emit( OpCodes::Ldc_I4_0 );\n   ilg-&gt;Emit( OpCodes::Ret );\n\n   // Complete the type and verify that it returns 0.\n   Type^ tbBaked = tb-&gt;CreateType();\n   array&lt;Object^&gt;^temp0;\n   int res1 = safe_cast&lt;Int32&gt;(tbBaked-&gt;GetMethod( &quot;My method Name&quot; )-&gt;Invoke( nullptr, temp0 ));\n   if ( res1 != 0 )\n   {\n      Console::WriteLine( &quot;Err_001a, should have returned 0&quot; );\n   }\n   else\n   {\n      Console::WriteLine( &quot;Original method returned 0&quot; );\n   }\n\n   // Define a new method body that will return a 1 instead.\n\n   // code size\n   // ldc_i4_1\n   // ret\n   array&lt;Byte&gt;^methodBytes = {0x03,0x30,0x0A,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x17,0x2a};\n\n   // Get the token for the method whose body you are replacing.\n   MethodToken somemethodToken = somemethod-&gt;GetToken();\n\n   // Get the pointer to the method body.\n   GCHandle hmem = GCHandle::Alloc( (Object^)methodBytes, GCHandleType::Pinned );\n   IntPtr addr = hmem.AddrOfPinnedObject();\n   int cbSize = methodBytes-&gt;Length;\n\n   // Swap the old method body with the new body.\n   MethodRental::SwapMethodBody( tbBaked, somemethodToken.Token, addr, cbSize, MethodRental::JitImmediate );\n\n   // Verify that the modified method returns 1.\n   array&lt;Object^&gt;^temp1;\n   int res2 = safe_cast&lt;Int32&gt;(tbBaked-&gt;GetMethod( &quot;My method Name&quot; )-&gt;Invoke( nullptr, temp1 ));\n   if ( res2 != 1 )\n   {\n      Console::WriteLine( &quot;Err_001b, should have returned 1&quot; );\n   }\n   else\n   {\n      Console::WriteLine( &quot;Swapped method body returned 1&quot; );\n   }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic MethodRental.SwapMethodBody Example#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing System.Runtime.InteropServices;\n\nclass SwapMethodBodySample\n{\n    // First make a method that returns 0.\n    // Then swap the method body with a body that returns 1.\n    public static void Main(String [] args)\n    {\n    // Construct a dynamic assembly\n    Guid g = Guid.NewGuid();    \n    AssemblyName asmname = new AssemblyName();\n    asmname.Name = &quot;tempfile&quot; + g;\n    AssemblyBuilder asmbuild = System.Threading.Thread.GetDomain().\n        DefineDynamicAssembly(asmname, AssemblyBuilderAccess.Run);\n\n    // Add a dynamic module that contains one type that has one method that\n    // has no arguments.\n    ModuleBuilder modbuild = asmbuild.DefineDynamicModule( &quot;test&quot;);\n        TypeBuilder tb = modbuild.DefineType( &quot;name of the Type&quot; );\n        MethodBuilder somemethod = tb.DefineMethod\n            (&quot;My method Name&quot;,\n             MethodAttributes.Public | MethodAttributes.Static,\n             typeof(int),                                                     \n             new Type[]{} );\n    // Define the body of the method to return 0.\n        ILGenerator ilg = somemethod.GetILGenerator();\n    ilg.Emit(OpCodes.Ldc_I4_0);\n    ilg.Emit(OpCodes.Ret);\n\n    // Complete the type and verify that it returns 0.\n    Type tbBaked = tb.CreateType();\n    int res1 = (int)tbBaked.GetMethod(&quot;My method Name&quot;).Invoke( null, new Object[]{} );\n    if ( res1 != 0 ) {\n        Console.WriteLine( &quot;Err_001a, should have returned 0&quot; );\n    } else {\n        Console.WriteLine(&quot;Original method returned 0&quot;);\n    }\n                \n    // Define a new method body that will return a 1 instead.\n    Byte[] methodBytes = {\n        0x03,\n        0x30,\n        0x0A,\n        0x00,\n        0x02,                // code size\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x17,                // ldc_i4_1\n        0x2a                // ret\n    };\n\n    // Get the token for the method whose body you are replacing.\n    MethodToken somemethodToken = somemethod.GetToken();        \n\n    // Get the pointer to the method body.\n        GCHandle hmem = GCHandle.Alloc((Object) methodBytes, GCHandleType.Pinned);\n        IntPtr addr = hmem.AddrOfPinnedObject();\n    int cbSize = methodBytes.Length;\n\n    // Swap the old method body with the new body.\n    MethodRental.SwapMethodBody(\n                    tbBaked, \n                    somemethodToken.Token, \n                    addr,\n                    cbSize,\n                    MethodRental.JitImmediate);\n\n    // Verify that the modified method returns 1.\n    int res2 = (int)tbBaked.GetMethod(&quot;My method Name&quot;).Invoke( null, new Object[]{} );\n    if ( res2 != 1 ) {\n        Console.WriteLine( &quot;Err_001b, should have returned 1&quot; );\n    } else {\n        Console.WriteLine(&quot;Swapped method body returned 1&quot;);\n    }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic MethodRental.SwapMethodBody Example#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\nImports System.Runtime.InteropServices\n\nClass SwapMethodBodySample\n    \n    &#39; First make a method that returns 0.\n    &#39; Then swap the method body with a body that returns 1.\n    Public Shared Sub Main()\n        &#39; Construct a dynamic assembly\n        Dim g As Guid = Guid.NewGuid()\n        Dim asmname As New AssemblyName()\n        asmname.Name = &quot;tempfile&quot; + g.ToString()\n        Dim asmbuild As AssemblyBuilder = _\n           System.Threading.Thread.GetDomain().DefineDynamicAssembly _\n           (asmname, AssemblyBuilderAccess.Run)\n        \n        &#39; Add a dynamic module that contains one type that has one method that\n        &#39; has no arguments.\n        Dim modbuild As ModuleBuilder = asmbuild.DefineDynamicModule(&quot;test&quot;)\n        Dim tb As TypeBuilder = modbuild.DefineType(&quot;name of the Type&quot;)\n        Dim somemethod As MethodBuilder = _\n           tb.DefineMethod(&quot;My method Name&quot;, _\n           MethodAttributes.Public Or(MethodAttributes.Static), _\n           GetType(Integer), New Type() {})\n        &#39; Define the body of the method to return 0.\n        Dim ilg As ILGenerator = somemethod.GetILGenerator()\n        ilg.Emit(OpCodes.Ldc_I4_0)\n        ilg.Emit(OpCodes.Ret)\n        \n        &#39; Complete the type and verify that it returns 0.\n        Dim tbBaked As Type = tb.CreateType()\n        Dim res1 As Integer = _\n           CInt(tbBaked.GetMethod(&quot;My method Name&quot;).Invoke _\n           (Nothing, New Object() {}))\n        If res1 &lt;&gt; 0 Then\n            Console.WriteLine(&quot;Err_001a, should have returned 0&quot;)\n        Else\n            Console.WriteLine(&quot;Original method returned 0&quot;)\n        End If\n        \n        &#39; Define a new method body that will return a 1 instead.\n        Dim methodBytes As Byte() = _\n        {&amp;H3, &amp;H30, &amp;HA, &amp;H0, &amp;H2, &amp;H0, &amp;H0, &amp;H0, &amp;H0, &amp;H0, &amp;H0, &amp;H0, &amp;H17, &amp;H2A}\n        &#39;&amp;H2     code size\n        &#39;&amp;H17    ldc_i4_1\n        &#39;&amp;H2A    ret\n        \n        &#39; Get the token for the method whose body you are replacing.\n        Dim somemethodToken As MethodToken = somemethod.GetToken()\n        \n        &#39; Get the pointer to the method body.\n        Dim hmem As GCHandle = _\n           GCHandle.Alloc(CType(methodBytes, Object), GCHandleType.Pinned)\n        Dim addr As IntPtr = hmem.AddrOfPinnedObject()\n        Dim cbSize As Integer = methodBytes.Length\n        \n        &#39; Swap the old method body with the new body.\n        MethodRental.SwapMethodBody(tbBaked, somemethodToken.Token, addr, _\n           cbSize, MethodRental.JitImmediate)\n        \n        &#39; Verify that the modified method returns 1.\n        Dim res2 As Integer = _\n           CInt(tbBaked.GetMethod(&quot;My method Name&quot;).Invoke _\n           (Nothing, New Object() {}))\n        If res2 &lt;&gt; 1 Then\n            Console.WriteLine(&quot;Err_001b, should have returned 1&quot;)\n        Else\n            Console.WriteLine(&quot;Swapped method body returned 1&quot;)\n        End If\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_MethodRental_System_Runtime_InteropServices__MethodRental_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_MethodRental_System_Runtime_InteropServices__MethodRental_GetIDsOfNames_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_MethodRental.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Maps a set of names to a corresponding set of dispatch identifiers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _MethodRental.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>riid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Reserved for future use. Must be IID_NULL.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgszNames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Passed-in array of names to be mapped.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cNames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Count of the names to be mapped.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale context in which to interpret the names.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgDispId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Caller-allocated array which receives the IDs corresponding to the names.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>The method is called late-bound using the COM <code>IDispatch</code> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetIDsOfNames</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_MethodRental_System_Runtime_InteropServices__MethodRental_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_MethodRental_System_Runtime_InteropServices__MethodRental_GetTypeInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_MethodRental.GetTypeInfo(UInt32,UInt32,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the type information for an object, which can then be used to get the type information for an interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _MethodRental.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>iTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type information to return.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale identifier for the type information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ppTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Receives a pointer to the requested type information object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>The method is called late-bound using the COM <code>IDispatch</code> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetTypeInfo</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_MethodRental_System_Runtime_InteropServices__MethodRental_GetTypeInfoCount_System_UInt32__\">\r\n    \r\n            <a id=\"System_Reflection_Emit_MethodRental_System_Runtime_InteropServices__MethodRental_GetTypeInfoCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_MethodRental.GetTypeInfoCount(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _MethodRental.GetTypeInfoCount (out uint pcTInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pcTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Points to a location that receives the number of type information interfaces provided by the object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>The method is called late-bound using the COM <code>IDispatch</code> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetTypeInfoCount</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_MethodRental_System_Runtime_InteropServices__MethodRental_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_MethodRental_System_Runtime_InteropServices__MethodRental_Invoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_MethodRental.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Provides access to properties and methods exposed by an object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _MethodRental.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dispIdMember</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Identifies the member.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>riid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Reserved for future use. Must be IID_NULL.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale context in which to interpret arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>wFlags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Flags describing the context of the call.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pDispParams</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pVarResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to the location where the result is to be stored.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pExcepInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to a structure that contains exception information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>puArgErr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first argument that has an error.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>The method is called late-bound using the COM <code>IDispatch</code> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::Invoke</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.Emit.MethodRental.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.Emit.MethodRental.yml\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.MethodRental\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.MethodRental.JitImmediate\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.MethodRental.JitOnDemand\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.MethodRental.SwapMethodBody\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.MethodRental._MethodRental.GetIDsOfNames\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.MethodRental._MethodRental.GetTypeInfo\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.MethodRental._MethodRental.GetTypeInfoCount\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.MethodRental._MethodRental.Invoke\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"e7d2f576-2573-a074-f2f8-de89fb94ad8c\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Reflection.Emit\\MethodRental.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a fast way to swap method body implementation given a method of a class.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Reflection.Emit/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Reflection.Emit.MethodRental\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.Emit.MethodRental.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.Emit.MethodRental.yml","open_to_public_contributors":true,"api_name":["System.Reflection.Emit.MethodRental","System.Reflection.Emit.MethodRental.JitImmediate","System.Reflection.Emit.MethodRental.JitOnDemand","System.Reflection.Emit.MethodRental.SwapMethodBody","System.Reflection.Emit.MethodRental._MethodRental.GetIDsOfNames","System.Reflection.Emit.MethodRental._MethodRental.GetTypeInfo","System.Reflection.Emit.MethodRental._MethodRental.GetTypeInfoCount","System.Reflection.Emit.MethodRental._MethodRental.Invoke"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Reflection.Emit.MethodRental","System::Reflection::Emit::MethodRental","System.Reflection.Emit.MethodRental.JitImmediate","System::Reflection::Emit::MethodRental::JitImmediate","System.Reflection.Emit.MethodRental.JitOnDemand","System::Reflection::Emit::MethodRental::JitOnDemand","System.Reflection.Emit.MethodRental.SwapMethodBody","System::Reflection::Emit::MethodRental::SwapMethodBody","System.Reflection.Emit.MethodRental.System#Runtime#InteropServices#_MethodRental#GetIDsOfNames","System::Reflection::Emit::MethodRental::System#Runtime#InteropServices#_MethodRental#GetIDsOfNames","System.Reflection.Emit.MethodRental.System#Runtime#InteropServices#_MethodRental#GetTypeInfo","System::Reflection::Emit::MethodRental::System#Runtime#InteropServices#_MethodRental#GetTypeInfo","System.Reflection.Emit.MethodRental.System#Runtime#InteropServices#_MethodRental#GetTypeInfoCount","System::Reflection::Emit::MethodRental::System#Runtime#InteropServices#_MethodRental#GetTypeInfoCount","System.Reflection.Emit.MethodRental.System#Runtime#InteropServices#_MethodRental#Invoke","System::Reflection::Emit::MethodRental::System#Runtime#InteropServices#_MethodRental#Invoke"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"e7d2f576-2573-a074-f2f8-de89fb94ad8c","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Reflection.Emit\\MethodRental.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Reflection.Emit/MethodRental.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"MethodRental class | Microsoft Docs","_op_ogTitle":"MethodRental class","description":"Provides a fast way to swap method body implementation given a method of a class.\n","toc_asset_id":"_splitted/System.Reflection.Emit/toc.json","toc_rel":"_splitted/System.Reflection.Emit/toc.json","source_url":"","ms.assetid":"System.Reflection.Emit.MethodRental","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.emit.methodrental","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.emit.methodrental","fileRelativePath":"System.Reflection.Emit.MethodRental.html"},"themesRelativePathToOutputRoot":"_themes/"}