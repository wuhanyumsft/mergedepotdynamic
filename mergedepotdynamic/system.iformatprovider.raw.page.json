{"content":"    \r\n    <h1 id=\"System_IFormatProvider\">\r\n      <span class=\"lang-csharp\">IFormatProvider</span>\r\n        Interface\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides a mechanism for retrieving an object to control formatting.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic interface IFormatProvider</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The IFormatProvider interface supplies an object that provides formatting information for formatting and parsing operations. Formatting operations convert the value of a type to the string representation of that value. Typical formatting methods are the <code>ToString</code> methods of a type, as well as <a class=\"xref\" href=\"system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a>. Parsing operations convert the string representation of a value to a type with that value. Typical parsing methods are <code>Parse</code> and <code>TryParse</code>.  </p>\n<p> The IFormatProvider interface consists of a single method, <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a>. <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> is a callback method: The parsing or formatting method calls it and passes it a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the type of object that the formatting or parsing method expects will provide formatting information. The <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method is responsible for returning an object of that type.  </p>\n<p> IFormatProvider implementations are often used implicitly by formatting and parsing methods. For example, the <a class=\"xref\" href=\"system.datetime#System_DateTime_ToString_System_String_\" data-linktype=\"relative-path\">System.DateTime.ToString(String)</a> method implicitly uses an IFormatProvider implementation that represents the system&#39;s current culture. IFormatProvider implementations can also be specified explicitly by methods that have a parameter of type IFormatProvider, such as <a class=\"xref\" href=\"system.int32#System_Int32_Parse_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Int32.Parse(String,IFormatProvider)</a> and [String.Format(IFormatProvider,â€‚String,â€‚Object&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt;.  </p>\n<p> The .NET Framework includes the following three predefined IFormatProvider implementations to provide culture-specific information that is used in formatting or parsing numeric and date and time values:  </p>\n<ul>\n<li><p>The <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> class, which provides information that is used to format numbers, such as the currency, thousands separator, and decimal separator symbols for a particular culture. For information about the predefined format strings recognized by a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object and used in numeric formatting operations, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> class, which provides information that is used to format dates and times, such as the date and time separator symbols for a particular culture or the order and format of a date&#39;s year, month, and day components. For information about the predefined format strings recognized by a <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object and used in numeric formatting operations, see <a href=\"../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Date and Time Format Strings</a> and <a href=\"../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Date and Time Format Strings</a>.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> class, which represents a particular culture. Its <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns a culture-specific <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> or <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object, depending on whether the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object is used in a formatting or parsing operation that involves numbers or dates and times.  </p>\n<p>The .NET Framework also supports custom formatting. This typically involves the creation of a formatting class that implements both IFormatProvider and <a class=\"xref\" href=\"system.icustomformatter\" data-linktype=\"relative-path\">ICustomFormatter</a>. An instance of this class is then passed as a parameter to a method that performs a custom formatting operation, such as [String.Format(IFormatProvider,â€‚String,â€‚Object&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt; The example provides an illustration of such a custom implementation that formats a number as a 12-digit account number.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IFormatProvider_GetFormat_System_Type_\" data-linktype=\"self-bookmark\">GetFormat(Type)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an object that provides formatting services for the specified type.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IFormatProvider_GetFormat_System_Type_\">\r\n    \r\n            <a id=\"System_IFormatProvider_GetFormat_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFormat(Type)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an object that provides formatting services for the specified type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object GetFormat (Type formatType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>formatType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that specifies the type of format object to return.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>An instance of the object specified by <code>formatType</code>, if the <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation can supply that type of object; otherwise, <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>GetFormat is a callback method that formatting and parsing methods invoke to retrieve information about the format of the input string in parsing operations or the format of the output string in formatting operations. In the <code>formatType</code> parameter, the formatting or parsing method passes the type of object it requires to perform its operation. If the <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation can supply this formatting or parsing object, it returns that object. If not, it returns <code>null</code>.  </p>\n<p> For example, in the call to the <a class=\"xref\" href=\"system.int32#System_Int32_ToString_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Int32.ToString(IFormatProvider)</a> method, the method argument is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> object that provides information about how the string representation of the current integer instance might be formatted. When the runtime executes the method, it calls the <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> object&#39;s GetFormat method and passes it a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> type. If the <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> object can supply a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object, it returns that object. If it cannot supply an object of that type, it returns <code>null</code>.  </p>\n<p> You can implement the <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> interface and the GetFormat method in classes that provide custom formatting or parsing services. The <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation is then passed as an argument to any overload of a parsing or formatting method that has a parameter of type <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a>, such as [String.Format(IFormatProvider,â€‚String,â€‚Object&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt;, <a class=\"xref\" href=\"system.int32#System_Int32_ToString_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Int32.ToString(String,IFormatProvider)</a>, or <a class=\"xref\" href=\"system.datetime#System_DateTime_Parse_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.DateTime.Parse(String,IFormatProvider)</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of a class that implements the <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> interface and the GetFormat method. The <code>AcctNumberFormat</code> class converts an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> value that represents an account number to a formatted 12-digit account number. Its <code>GetFormat</code> method returns a reference to itself if the <code>formatType</code> parameter refers to a class that implements <a class=\"xref\" href=\"system.icustomformatter\" data-linktype=\"relative-path\">ICustomFormatter</a>; otherwise, <code>GetFormat</code> returns <code>null</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IFormatProvider.Class#2\">public class AcctNumberFormat : IFormatProvider, ICustomFormatter\n{\n   private const int ACCT_LENGTH = 12;\n   \n   public object GetFormat(Type formatType)\n   {\n      if (formatType == typeof(ICustomFormatter))\n         return this;\n      else\n         return null;\n   }\n   \n   public string Format(string fmt, object arg, IFormatProvider formatProvider) \n   {\n      // Provide default formatting if arg is not an Int64.\n      if (arg.GetType() != typeof(Int64))\n         try {\n            return HandleOtherFormats(fmt, arg); \n         }\n         catch (FormatException e) {\n            throw new FormatException(String.Format(&quot;The format of &#39;{0}&#39; is invalid.&quot;, fmt), e);\n         }\n      \n      // Provide default formatting for unsupported format strings.\n      string ufmt = fmt.ToUpper(CultureInfo.InvariantCulture);\n      if (! (ufmt == &quot;H&quot; || ufmt == &quot;I&quot;)) \n         try {\n            return HandleOtherFormats(fmt, arg);\n         }\n         catch (FormatException e) {\n            throw new FormatException(String.Format(&quot;The format of &#39;{0}&#39; is invalid.&quot;, fmt), e);\n         }\n           \n      // Convert argument to a string.\n      string result = arg.ToString();\n      \n      // If account number is less than 12 characters, pad with leading zeroes.\n      if (result.Length &lt; ACCT_LENGTH)\n         result = result.PadLeft(ACCT_LENGTH, &#39;0&#39;);\n      // If account number is more than 12 characters, truncate to 12 characters.\n      if (result.Length &gt; ACCT_LENGTH)\n         result = result.Substring(0, ACCT_LENGTH);   \n\n      if (ufmt == &quot;I&quot;)                    // Integer-only format. \n         return result;\n      // Add hyphens for H format specifier.\n      else                                         // Hyphenated format.\n         return result.Substring(0, 5) + &quot;-&quot; + result.Substring(5, 3) + &quot;-&quot; + result.Substring(8);\n   }\n\n   private string HandleOtherFormats(string format, object arg)\n   {\n      if (arg is IFormattable) \n         return ((IFormattable)arg).ToString(format, CultureInfo.CurrentCulture);\n      else if (arg != null)\n         return arg.ToString();\n      else\n         return String.Empty;\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IFormatProvider.Class#2\">Public Class AcctNumberFormat : Implements IFormatProvider, ICustomFormatter\n\n   Private Const ACCT_LENGTH As Integer = 12\n   \n   Public Function GetFormat(formatType As Type) As Object _\n                   Implements IFormatProvider.GetFormat\n      If formatType Is GetType(ICustomFormatter) Then\n         Return Me\n      Else\n         Return Nothing\n      End If\n   End Function\n   \n   Public Function Format(fmt As String, arg As Object, formatProvider As IFormatProvider) As String _\n                          Implements ICustomFormatter.Format\n\n      &#39; Provide default formatting if arg is not an Int64.\n       If Not TypeOf arg Is Int64 Then\n         Try \n            Return HandleOtherFormats(fmt, arg) \n         Catch e As FormatException \n            Throw New FormatException(String.Format(&quot;The format of &#39;{0}&#39; is invalid.&quot;, fmt), e)\n         End Try\n       End If   \n                     \n      &#39; Provider default formatting for unsupported format strings.\n      Dim ufmt As String = fmt.ToUpper(CultureInfo.InvariantCulture)\n      If Not (ufmt = &quot;H&quot; Or ufmt = &quot;I&quot;) Then\n         Try\n            Return HandleOtherFormats(fmt, arg)\n         Catch e As FormatException \n            Throw New FormatException(String.Format(&quot;The format of &#39;{0}&#39; is invalid.&quot;, fmt), e)\n         End Try\n      End If   \n\n      &#39; Convert argument to a string.\n      Dim result As String = arg.ToString()\n      \n      &#39; If account number is less than 12 characters, pad with leading zeroes.\n      If result.Length &lt; ACCT_LENGTH Then result = result.PadLeft(ACCT_LENGTH, &quot;0&quot;c)\n      &#39; If account number is more than 12 characters, truncate to 12 characters.\n      If result.Length &gt; ACCT_LENGTH Then result = Left(result, ACCT_LENGTH)   \n      \n      If ufmt = &quot;I&quot;                              &#39; Integer-only format.\n         Return result\n      &#39; Add hyphens for H format specifier.\n      Else                                       &#39; Hypenated format.\n         Return Left(result, 5) &amp; &quot;-&quot; &amp; Mid(result, 6, 3) &amp; &quot;-&quot; &amp; Right(result, 4)\n      End If   \n   End Function   \n\n   Private Function HandleOtherFormats(fmt As String, arg As Object) As String\n      If TypeOf arg Is IFormattable Then\n         Return DirectCast(arg, IFormattable).ToString(fmt, CultureInfo.CurrentCulture)\n      ElseIf arg IsNot Nothing Then\n         Return arg.ToString()\n      Else\n         Return String.Empty\n      End If\n   End Function\nEnd Class\n</code></pre><p> An instance of the <code>AcctNumberFormat</code> class can then be passed as an argument to a method that provides formatting or parsing services. For example, the following code passes an <code>AcctNumberFormat</code> class to the [String.Format(IFormatProvider,â€‚String,â€‚Object&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt; method to generate a formatted 12-digit account number.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IFormatProvider.Class#1\">using System;\nusing System.Globalization;\n\npublic enum DaysOfWeek { Monday=1, Tuesday=2 };\n\npublic class TestFormatting\n{\n   public static void Main()\n   {\n      long acctNumber;\n      double balance; \n      DaysOfWeek wday; \n      string output;\n\n      acctNumber = 104254567890;\n      balance = 16.34;\n      wday = DaysOfWeek.Monday;\n\n      output = String.Format(new AcctNumberFormat(), \n                             &quot;On {2}, the balance of account {0:H} was {1:C2}.&quot;, \n                             acctNumber, balance, wday);\n      Console.WriteLine(output);\n\n      wday = DaysOfWeek.Tuesday;\n      output = String.Format(new AcctNumberFormat(), \n                             &quot;On {2}, the balance of account {0:I} was {1:C2}.&quot;, \n                             acctNumber, balance, wday);\n      Console.WriteLine(output);\n   }\n}\n// The example displays the following output:\n//       On Monday, the balance of account 10425-456-7890 was $16.34.\n//       On Tuesday, the balance of account 104254567890 was $16.34.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IFormatProvider.Class#1\">Imports System.Globalization\n\nPublic Enum DaysOfWeek As Long\n   Monday = 1\n   Tuesday = 2\nEnd Enum\n\nModule TestFormatting\n   Public Sub Main()\n      Dim acctNumber As Long, balance As Double \n      Dim wday As DaysOfWeek \n      Dim output As String\n\n      acctNumber = 104254567890\n      balance = 16.34\n      wday = DaysOfWeek.Monday\n\n      output = String.Format(New AcctNumberFormat(), &quot;On {2}, the balance of account {0:H} was {1:C2}.&quot;, acctNumber, balance, wday)\n      Console.WriteLine(output)\n\n      wday = DaysOfWeek.Tuesday\n      output = String.Format(New AcctNumberFormat(), &quot;On {2}, the balance of account {0:I} was {1:C2}.&quot;, acctNumber, balance, wday)\n      Console.WriteLine(output)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    On Monday, the balance of account 10425-456-7890 was $16.34.\n&#39;    On Tuesday, the balance of account 104254567890 was $16.34.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.IFormatProvider.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IFormatProvider.yml\">\r\n<meta name=\"APIName\" content=\"System.IFormatProvider\">\r\n<meta name=\"APIName\" content=\"System.IFormatProvider.GetFormat\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"9aaa064e-8875-c393-0ba7-cd6734aa3b3a\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System\\IFormatProvider.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a mechanism for retrieving an object to control formatting.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.IFormatProvider\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.IFormatProvider.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IFormatProvider.yml","open_to_public_contributors":true,"api_name":["System.IFormatProvider","System.IFormatProvider.GetFormat"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.IFormatProvider","System::IFormatProvider","System.IFormatProvider.GetFormat","System::IFormatProvider::GetFormat"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"9aaa064e-8875-c393-0ba7-cd6734aa3b3a","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System\\IFormatProvider.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/IFormatProvider.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IFormatProvider interface | Microsoft Docs","_op_ogTitle":"IFormatProvider interface","description":"Provides a mechanism for retrieving an object to control formatting.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.IFormatProvider","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.iformatprovider","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.iformatprovider","fileRelativePath":"System.IFormatProvider.html"},"themesRelativePathToOutputRoot":"_themes/"}