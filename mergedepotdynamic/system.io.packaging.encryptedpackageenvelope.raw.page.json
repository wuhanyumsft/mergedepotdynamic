{"content":"    \r\n    <h1 id=\"System_IO_Packaging_EncryptedPackageEnvelope\">\r\n      <span class=\"lang-csharp\">EncryptedPackageEnvelope</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents an OLE compound file that contains an encrypted package.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class EncryptedPackageEnvelope : IDisposable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">EncryptedPackageEnvelope</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>EncryptedPackageEnvelope has no public constructors.  An EncryptedPackageEnvelope is created by use of the static <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope#System_IO_Packaging_EncryptedPackageEnvelope_Create_\" data-linktype=\"relative-path\">Create</a>, <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope#System_IO_Packaging_EncryptedPackageEnvelope_CreateFromPackage_\" data-linktype=\"relative-path\">CreateFromPackage</a>, or <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope#System_IO_Packaging_EncryptedPackageEnvelope_Open_\" data-linktype=\"relative-path\">Open</a> methods.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Packaging_EncryptedPackageEnvelope_FileOpenAccess\" data-linktype=\"self-bookmark\">FileOpenAccess</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that specifies whether the file was opened with access to read, write, or both.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Packaging_EncryptedPackageEnvelope_PackageProperties\" data-linktype=\"self-bookmark\">PackageProperties</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the core package properties (such as Title and Subject) of the rights managed document.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Packaging_EncryptedPackageEnvelope_RightsManagementInformation\" data-linktype=\"self-bookmark\">RightsManagementInformation</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the rights management information stored in the <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a>; specifically, the <a class=\"xref\" href=\"system.security.rightsmanagement.publishlicense\" data-linktype=\"relative-path\">PublishLicense</a> and the <a class=\"xref\" href=\"system.security.rightsmanagement.uselicense\" data-linktype=\"relative-path\">UseLicense</a>s stored in the OLE compound file that embodies the rights-management protected package</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Packaging_EncryptedPackageEnvelope_StorageInfo\" data-linktype=\"self-bookmark\">StorageInfo</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an object that provides access to the compound file streams outside the encrypted package.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Packaging_EncryptedPackageEnvelope_Close\" data-linktype=\"self-bookmark\">Close()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Closes the encrypted package and the OLE compound file that holds it.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Packaging_EncryptedPackageEnvelope_Create_System_IO_Stream_System_Security_RightsManagement_PublishLicense_System_Security_RightsManagement_CryptoProvider_\" data-linktype=\"self-bookmark\">Create(Stream,PublishLicense,CryptoProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates and returns an <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a> on the specified stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Packaging_EncryptedPackageEnvelope_Create_System_String_System_Security_RightsManagement_PublishLicense_System_Security_RightsManagement_CryptoProvider_\" data-linktype=\"self-bookmark\">Create(String,PublishLicense,CryptoProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates and returns an <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a> and gives it the specified file name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Packaging_EncryptedPackageEnvelope_CreateFromPackage_System_IO_Stream_System_IO_Stream_System_Security_RightsManagement_PublishLicense_System_Security_RightsManagement_CryptoProvider_\" data-linktype=\"self-bookmark\">CreateFromPackage(Stream,Stream,PublishLicense,CryptoProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates and returns an <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a> (on the specified stream) that uses the specified unencrypted package as its content.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Packaging_EncryptedPackageEnvelope_CreateFromPackage_System_String_System_IO_Stream_System_Security_RightsManagement_PublishLicense_System_Security_RightsManagement_CryptoProvider_\" data-linktype=\"self-bookmark\">CreateFromPackage(String,Stream,PublishLicense,CryptoProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates and returns an <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a> that uses the specified unencrypted package as its content, and gives it the specified file name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Packaging_EncryptedPackageEnvelope_Dispose\" data-linktype=\"self-bookmark\">Dispose()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases all resources used by the <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Packaging_EncryptedPackageEnvelope_Dispose_System_Boolean_\" data-linktype=\"self-bookmark\">Dispose(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a> and optionally releases the managed resources.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Packaging_EncryptedPackageEnvelope_Flush\" data-linktype=\"self-bookmark\">Flush()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Flush the stream for both the <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a> and its package content.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Packaging_EncryptedPackageEnvelope_GetPackage\" data-linktype=\"self-bookmark\">GetPackage()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the encrypted package inside the <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Packaging_EncryptedPackageEnvelope_IsEncryptedPackageEnvelope_System_IO_Stream_\" data-linktype=\"self-bookmark\">IsEncryptedPackageEnvelope(Stream)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value specifying whether the specified stream is an OLE compound file with an encrypted package stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Packaging_EncryptedPackageEnvelope_IsEncryptedPackageEnvelope_System_String_\" data-linktype=\"self-bookmark\">IsEncryptedPackageEnvelope(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value specifying whether the specified file is an OLE compound file with an encrypted package stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Packaging_EncryptedPackageEnvelope_Open_System_IO_Stream_\" data-linktype=\"self-bookmark\">Open(Stream)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Open the encrypted package in the specified stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Packaging_EncryptedPackageEnvelope_Open_System_String_\" data-linktype=\"self-bookmark\">Open(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Open the encrypted package in the specified file as read only and unshared.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Packaging_EncryptedPackageEnvelope_Open_System_String_System_IO_FileAccess_\" data-linktype=\"self-bookmark\">Open(String,FileAccess)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Open the encrypted package in the specified file as unshared and with the specified access.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Packaging_EncryptedPackageEnvelope_Open_System_String_System_IO_FileAccess_System_IO_FileShare_\" data-linktype=\"self-bookmark\">Open(String,FileAccess,FileShare)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Open the encrypted package in the specified file and gives it the specified access and sharing.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Packaging_EncryptedPackageEnvelope_FileOpenAccess\">\r\n    \r\n            <a id=\"System_IO_Packaging_EncryptedPackageEnvelope_FileOpenAccess_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FileOpenAccess</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that specifies whether the file was opened with access to read, write, or both.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.FileAccess FileOpenAccess { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileaccess\" data-linktype=\"relative-path\">FileAccess</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.io.fileaccess\" data-linktype=\"relative-path\">FileAccess</a> value that was used to open the file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Packaging_EncryptedPackageEnvelope_PackageProperties\">\r\n    \r\n            <a id=\"System_IO_Packaging_EncryptedPackageEnvelope_PackageProperties_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PackageProperties</div>        \r\n          </div>\r\n    \r\n            <p>Gets the core package properties (such as Title and Subject) of the rights managed document.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.Packaging.PackageProperties PackageProperties { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.packaging.packageproperties\" data-linktype=\"relative-path\">PackageProperties</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.io.packaging.packageproperties\" data-linktype=\"relative-path\">PackageProperties</a> for the package.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>These core properties are stored in the standard OLE property streams (\\005SummaryInformation and \\005DocumentSummaryInformation). The core properties are also stored in the package itself. It is the responsibility of the application to keep the two sets of properties synchronized.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Packaging_EncryptedPackageEnvelope_RightsManagementInformation\">\r\n    \r\n            <a id=\"System_IO_Packaging_EncryptedPackageEnvelope_RightsManagementInformation_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RightsManagementInformation</div>        \r\n          </div>\r\n    \r\n            <p>Gets the rights management information stored in the <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a>; specifically, the <a class=\"xref\" href=\"system.security.rightsmanagement.publishlicense\" data-linktype=\"relative-path\">PublishLicense</a> and the <a class=\"xref\" href=\"system.security.rightsmanagement.uselicense\" data-linktype=\"relative-path\">UseLicense</a>s stored in the OLE compound file that embodies the rights-management protected package</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.Packaging.RightsManagementInformation RightsManagementInformation { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.packaging.rightsmanagementinformation\" data-linktype=\"relative-path\">RightsManagementInformation</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.io.packaging.rightsmanagementinformation\" data-linktype=\"relative-path\">RightsManagementInformation</a> for the package.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to obtain <a class=\"xref\" href=\"system.io.packaging.rightsmanagementinformation\" data-linktype=\"relative-path\">RightsManagementInformation</a> for an encrypted package by use the RightsManagementInformation property.  </p>\n<pre><code class=\"lang-vb\" name=\"RightsManagedPackagePublish#RmPkgPubEncrypt\">WriteStatus(&quot;   Signing the UnsignedPublishLicense&quot; &amp; vbLf &amp; &quot;       to build the PublishLicense.&quot;)\n            Dim authorsUseLicense As UseLicense = Nothing\nDim publishLicense As PublishLicense = unsignedLicense.Sign(_secureEnv, authorsUseLicense)\n\nWriteStatus(&quot;   Binding the author&#39;s UseLicense and&quot;)\nWriteStatus(&quot;       obtaining the CryptoProvider.&quot;)\nDim cryptoProvider As CryptoProvider = authorsUseLicense.Bind(_secureEnv)\n\nWriteStatus(&quot;   Creating the EncryptedPackage.&quot;)\nDim packageStream As Stream = File.OpenRead(packageFile)\nDim ePackage As EncryptedPackageEnvelope = EncryptedPackageEnvelope.CreateFromPackage(encryptedFile, packageStream, publishLicense, cryptoProvider)\n\nWriteStatus(&quot;   Adding an author&#39;s UseLicense.&quot;)\nDim rmi As RightsManagementInformation = ePackage.RightsManagementInformation\nrmi.SaveUseLicense(author, authorsUseLicense)\n\nePackage.Close()\nWriteStatus(&quot;   Done - Package encryption complete.&quot;)\n\nWriteStatus(&quot;Verifying package encryption.&quot;)\nIf EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(encryptedFile) Then\n\tWriteStatus(&quot;   Confirmed - &#39;&quot; &amp; encryptedFilename &amp; &quot;&#39; is encrypted.&quot;)\nElse\n\tMessageBox.Show(&quot;ERROR: &#39;&quot; &amp; encryptedFilename &amp; &quot;&#39; is NOT ENCRYPTED.&quot;, &quot;Encryption Error&quot;, MessageBoxButton.OK, MessageBoxImage.Error)\n\tWriteStatus(&quot;ERROR: &#39;&quot; &amp; encryptedFilename &amp; &quot;&#39; is NOT ENCRYPTED.&quot; &amp; vbLf)\n\tReturn False\nEnd If\n</code></pre><pre><code class=\"lang-cs\" name=\"RightsManagedPackagePublish#RmPkgPubEncrypt\">WriteStatus(&quot;   Signing the UnsignedPublishLicense<br>&quot; +\n            &quot;       to build the PublishLicense.&quot;);\nUseLicense authorsUseLicense;\nPublishLicense publishLicense =\n    unsignedLicense.Sign(_secureEnv, out authorsUseLicense);\n\nWriteStatus(&quot;   Binding the author&#39;s UseLicense and&quot;);\nWriteStatus(&quot;       obtaining the CryptoProvider.&quot;);\nCryptoProvider cryptoProvider = authorsUseLicense.Bind(_secureEnv);\n\nWriteStatus(&quot;   Creating the EncryptedPackage.&quot;);\nStream packageStream = File.OpenRead(packageFile);\nEncryptedPackageEnvelope ePackage =\n    EncryptedPackageEnvelope.CreateFromPackage(encryptedFile,\n        packageStream, publishLicense, cryptoProvider);\n\nWriteStatus(&quot;   Adding an author&#39;s UseLicense.&quot;);\nRightsManagementInformation rmi =\n    ePackage.RightsManagementInformation;\nrmi.SaveUseLicense(author, authorsUseLicense);\n\nePackage.Close();\nWriteStatus(&quot;   Done - Package encryption complete.&quot;);\n\nWriteStatus(&quot;Verifying package encryption.&quot;);\nif (EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(encryptedFile))\n{\n    WriteStatus(&quot;   Confirmed - &#39;&quot; + encryptedFilename +\n                &quot;&#39; is encrypted.&quot;);\n}\nelse\n{\n    MessageBox.Show(&quot;ERROR: &#39;&quot; + encryptedFilename +\n        &quot;&#39; is NOT ENCRYPTED.&quot;, &quot;Encryption Error&quot;,\n        MessageBoxButton.OK, MessageBoxImage.Error);\n    WriteStatus(&quot;ERROR: &#39;&quot; + encryptedFilename +\n                &quot;&#39; is NOT ENCRYPTED.<br>&quot;);\n    return false;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Packaging_EncryptedPackageEnvelope_StorageInfo\">\r\n    \r\n            <a id=\"System_IO_Packaging_EncryptedPackageEnvelope_StorageInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StorageInfo</div>        \r\n          </div>\r\n    \r\n            <p>Gets an object that provides access to the compound file streams outside the encrypted package.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.Packaging.StorageInfo StorageInfo { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.packaging.storageinfo\" data-linktype=\"relative-path\">StorageInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.io.packaging.storageinfo\" data-linktype=\"relative-path\">StorageInfo</a> representing streams in the OLE compound file that are outside the encrypted package.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Packaging_EncryptedPackageEnvelope_Close\">\r\n    \r\n            <a id=\"System_IO_Packaging_EncryptedPackageEnvelope_Close_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Close()</div>        \r\n          </div>\r\n    \r\n            <p>Closes the encrypted package and the OLE compound file that holds it.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Close ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use this method to close an <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"RightsManagedPackagePublish#RmPkgPubEncrypt\">WriteStatus(&quot;   Signing the UnsignedPublishLicense&quot; &amp; vbLf &amp; &quot;       to build the PublishLicense.&quot;)\n            Dim authorsUseLicense As UseLicense = Nothing\nDim publishLicense As PublishLicense = unsignedLicense.Sign(_secureEnv, authorsUseLicense)\n\nWriteStatus(&quot;   Binding the author&#39;s UseLicense and&quot;)\nWriteStatus(&quot;       obtaining the CryptoProvider.&quot;)\nDim cryptoProvider As CryptoProvider = authorsUseLicense.Bind(_secureEnv)\n\nWriteStatus(&quot;   Creating the EncryptedPackage.&quot;)\nDim packageStream As Stream = File.OpenRead(packageFile)\nDim ePackage As EncryptedPackageEnvelope = EncryptedPackageEnvelope.CreateFromPackage(encryptedFile, packageStream, publishLicense, cryptoProvider)\n\nWriteStatus(&quot;   Adding an author&#39;s UseLicense.&quot;)\nDim rmi As RightsManagementInformation = ePackage.RightsManagementInformation\nrmi.SaveUseLicense(author, authorsUseLicense)\n\nePackage.Close()\nWriteStatus(&quot;   Done - Package encryption complete.&quot;)\n\nWriteStatus(&quot;Verifying package encryption.&quot;)\nIf EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(encryptedFile) Then\n\tWriteStatus(&quot;   Confirmed - &#39;&quot; &amp; encryptedFilename &amp; &quot;&#39; is encrypted.&quot;)\nElse\n\tMessageBox.Show(&quot;ERROR: &#39;&quot; &amp; encryptedFilename &amp; &quot;&#39; is NOT ENCRYPTED.&quot;, &quot;Encryption Error&quot;, MessageBoxButton.OK, MessageBoxImage.Error)\n\tWriteStatus(&quot;ERROR: &#39;&quot; &amp; encryptedFilename &amp; &quot;&#39; is NOT ENCRYPTED.&quot; &amp; vbLf)\n\tReturn False\nEnd If\n</code></pre><pre><code class=\"lang-cs\" name=\"RightsManagedPackagePublish#RmPkgPubEncrypt\">WriteStatus(&quot;   Signing the UnsignedPublishLicense<br>&quot; +\n            &quot;       to build the PublishLicense.&quot;);\nUseLicense authorsUseLicense;\nPublishLicense publishLicense =\n    unsignedLicense.Sign(_secureEnv, out authorsUseLicense);\n\nWriteStatus(&quot;   Binding the author&#39;s UseLicense and&quot;);\nWriteStatus(&quot;       obtaining the CryptoProvider.&quot;);\nCryptoProvider cryptoProvider = authorsUseLicense.Bind(_secureEnv);\n\nWriteStatus(&quot;   Creating the EncryptedPackage.&quot;);\nStream packageStream = File.OpenRead(packageFile);\nEncryptedPackageEnvelope ePackage =\n    EncryptedPackageEnvelope.CreateFromPackage(encryptedFile,\n        packageStream, publishLicense, cryptoProvider);\n\nWriteStatus(&quot;   Adding an author&#39;s UseLicense.&quot;);\nRightsManagementInformation rmi =\n    ePackage.RightsManagementInformation;\nrmi.SaveUseLicense(author, authorsUseLicense);\n\nePackage.Close();\nWriteStatus(&quot;   Done - Package encryption complete.&quot;);\n\nWriteStatus(&quot;Verifying package encryption.&quot;);\nif (EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(encryptedFile))\n{\n    WriteStatus(&quot;   Confirmed - &#39;&quot; + encryptedFilename +\n                &quot;&#39; is encrypted.&quot;);\n}\nelse\n{\n    MessageBox.Show(&quot;ERROR: &#39;&quot; + encryptedFilename +\n        &quot;&#39; is NOT ENCRYPTED.&quot;, &quot;Encryption Error&quot;,\n        MessageBoxButton.OK, MessageBoxImage.Error);\n    WriteStatus(&quot;ERROR: &#39;&quot; + encryptedFilename +\n                &quot;&#39; is NOT ENCRYPTED.<br>&quot;);\n    return false;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Packaging_EncryptedPackageEnvelope_Create_System_IO_Stream_System_Security_RightsManagement_PublishLicense_System_Security_RightsManagement_CryptoProvider_\">\r\n    \r\n            <a id=\"System_IO_Packaging_EncryptedPackageEnvelope_Create_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Create(Stream,PublishLicense,CryptoProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Creates and returns an <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a> on the specified stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.IO.Packaging.EncryptedPackageEnvelope Create (System.IO.Stream envelopeStream, System.Security.RightsManagement.PublishLicense publishLicense, System.Security.RightsManagement.CryptoProvider cryptoProvider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>envelopeStream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream on which to create the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>publishLicense</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.rightsmanagement.publishlicense\" data-linktype=\"relative-path\">PublishLicense</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The publish license that is embedded in the compound file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cryptoProvider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.rightsmanagement.cryptoprovider\" data-linktype=\"relative-path\">CryptoProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that determines what operations the current user is allowed to perform on the encrypted content.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a></div>\r\n                  </div>\r\n                  <p>The newly created <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>envelopeStream</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>envelopeStream</code> does not provide read/write access.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The current user has read/write access to the new file.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Packaging_EncryptedPackageEnvelope_Create_System_String_System_Security_RightsManagement_PublishLicense_System_Security_RightsManagement_CryptoProvider_\">\r\n    \r\n            <a id=\"System_IO_Packaging_EncryptedPackageEnvelope_Create_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Create(String,PublishLicense,CryptoProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Creates and returns an <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a> and gives it the specified file name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.IO.Packaging.EncryptedPackageEnvelope Create (string envelopeFileName, System.Security.RightsManagement.PublishLicense publishLicense, System.Security.RightsManagement.CryptoProvider cryptoProvider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>envelopeFileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the OLE compound file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>publishLicense</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.rightsmanagement.publishlicense\" data-linktype=\"relative-path\">PublishLicense</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The publish license that is embedded in the compound file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cryptoProvider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.rightsmanagement.cryptoprovider\" data-linktype=\"relative-path\">CryptoProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that determines what operations the current user is allowed to perform on the encrypted content.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a></div>\r\n                  </div>\r\n                  <p>The newly created <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>envelopeFileName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If a file with the specified name already exists, it is overwritten.  </p>\n<p> The current user has read/write access to the file.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Packaging_EncryptedPackageEnvelope_CreateFromPackage_System_IO_Stream_System_IO_Stream_System_Security_RightsManagement_PublishLicense_System_Security_RightsManagement_CryptoProvider_\">\r\n    \r\n            <a id=\"System_IO_Packaging_EncryptedPackageEnvelope_CreateFromPackage_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateFromPackage(Stream,Stream,PublishLicense,CryptoProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Creates and returns an <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a> (on the specified stream) that uses the specified unencrypted package as its content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.IO.Packaging.EncryptedPackageEnvelope CreateFromPackage (System.IO.Stream envelopeStream, System.IO.Stream packageStream, System.Security.RightsManagement.PublishLicense publishLicense, System.Security.RightsManagement.CryptoProvider cryptoProvider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>envelopeStream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream on which to create the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>packageStream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream representing the existing unencrypted package.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>publishLicense</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.rightsmanagement.publishlicense\" data-linktype=\"relative-path\">PublishLicense</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The publish license that is embedded in the compound file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cryptoProvider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.rightsmanagement.cryptoprovider\" data-linktype=\"relative-path\">CryptoProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that determines what operations the current user is allowed to perform on the encrypted content.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a></div>\r\n                  </div>\r\n                  <p>The newly created <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>envelopeStream</code> or <code>packageStream</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>envelopeStream</code> does not provide read/write access.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The current user has read/write access to the new file.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope#System_IO_Packaging_EncryptedPackageEnvelope_CreateFromPackage_\" data-linktype=\"relative-path\">CreateFromPackage</a> method to instantiate an <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"RightsManagedPackagePublish#RmPkgPubEncrypt\">WriteStatus(&quot;   Signing the UnsignedPublishLicense&quot; &amp; vbLf &amp; &quot;       to build the PublishLicense.&quot;)\n            Dim authorsUseLicense As UseLicense = Nothing\nDim publishLicense As PublishLicense = unsignedLicense.Sign(_secureEnv, authorsUseLicense)\n\nWriteStatus(&quot;   Binding the author&#39;s UseLicense and&quot;)\nWriteStatus(&quot;       obtaining the CryptoProvider.&quot;)\nDim cryptoProvider As CryptoProvider = authorsUseLicense.Bind(_secureEnv)\n\nWriteStatus(&quot;   Creating the EncryptedPackage.&quot;)\nDim packageStream As Stream = File.OpenRead(packageFile)\nDim ePackage As EncryptedPackageEnvelope = EncryptedPackageEnvelope.CreateFromPackage(encryptedFile, packageStream, publishLicense, cryptoProvider)\n\nWriteStatus(&quot;   Adding an author&#39;s UseLicense.&quot;)\nDim rmi As RightsManagementInformation = ePackage.RightsManagementInformation\nrmi.SaveUseLicense(author, authorsUseLicense)\n\nePackage.Close()\nWriteStatus(&quot;   Done - Package encryption complete.&quot;)\n\nWriteStatus(&quot;Verifying package encryption.&quot;)\nIf EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(encryptedFile) Then\n\tWriteStatus(&quot;   Confirmed - &#39;&quot; &amp; encryptedFilename &amp; &quot;&#39; is encrypted.&quot;)\nElse\n\tMessageBox.Show(&quot;ERROR: &#39;&quot; &amp; encryptedFilename &amp; &quot;&#39; is NOT ENCRYPTED.&quot;, &quot;Encryption Error&quot;, MessageBoxButton.OK, MessageBoxImage.Error)\n\tWriteStatus(&quot;ERROR: &#39;&quot; &amp; encryptedFilename &amp; &quot;&#39; is NOT ENCRYPTED.&quot; &amp; vbLf)\n\tReturn False\nEnd If\n</code></pre><pre><code class=\"lang-cs\" name=\"RightsManagedPackagePublish#RmPkgPubEncrypt\">WriteStatus(&quot;   Signing the UnsignedPublishLicense<br>&quot; +\n            &quot;       to build the PublishLicense.&quot;);\nUseLicense authorsUseLicense;\nPublishLicense publishLicense =\n    unsignedLicense.Sign(_secureEnv, out authorsUseLicense);\n\nWriteStatus(&quot;   Binding the author&#39;s UseLicense and&quot;);\nWriteStatus(&quot;       obtaining the CryptoProvider.&quot;);\nCryptoProvider cryptoProvider = authorsUseLicense.Bind(_secureEnv);\n\nWriteStatus(&quot;   Creating the EncryptedPackage.&quot;);\nStream packageStream = File.OpenRead(packageFile);\nEncryptedPackageEnvelope ePackage =\n    EncryptedPackageEnvelope.CreateFromPackage(encryptedFile,\n        packageStream, publishLicense, cryptoProvider);\n\nWriteStatus(&quot;   Adding an author&#39;s UseLicense.&quot;);\nRightsManagementInformation rmi =\n    ePackage.RightsManagementInformation;\nrmi.SaveUseLicense(author, authorsUseLicense);\n\nePackage.Close();\nWriteStatus(&quot;   Done - Package encryption complete.&quot;);\n\nWriteStatus(&quot;Verifying package encryption.&quot;);\nif (EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(encryptedFile))\n{\n    WriteStatus(&quot;   Confirmed - &#39;&quot; + encryptedFilename +\n                &quot;&#39; is encrypted.&quot;);\n}\nelse\n{\n    MessageBox.Show(&quot;ERROR: &#39;&quot; + encryptedFilename +\n        &quot;&#39; is NOT ENCRYPTED.&quot;, &quot;Encryption Error&quot;,\n        MessageBoxButton.OK, MessageBoxImage.Error);\n    WriteStatus(&quot;ERROR: &#39;&quot; + encryptedFilename +\n                &quot;&#39; is NOT ENCRYPTED.<br>&quot;);\n    return false;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Packaging_EncryptedPackageEnvelope_CreateFromPackage_System_String_System_IO_Stream_System_Security_RightsManagement_PublishLicense_System_Security_RightsManagement_CryptoProvider_\">\r\n    \r\n            <a id=\"System_IO_Packaging_EncryptedPackageEnvelope_CreateFromPackage_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateFromPackage(String,Stream,PublishLicense,CryptoProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Creates and returns an <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a> that uses the specified unencrypted package as its content, and gives it the specified file name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.IO.Packaging.EncryptedPackageEnvelope CreateFromPackage (string envelopeFileName, System.IO.Stream packageStream, System.Security.RightsManagement.PublishLicense publishLicense, System.Security.RightsManagement.CryptoProvider cryptoProvider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>envelopeFileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the OLE compound file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>packageStream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream representing the existing unencrypted package.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>publishLicense</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.rightsmanagement.publishlicense\" data-linktype=\"relative-path\">PublishLicense</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The publish license that is embedded in the compound file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cryptoProvider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.rightsmanagement.cryptoprovider\" data-linktype=\"relative-path\">CryptoProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that determines what operations the current user is allowed to perform on the encrypted content.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a></div>\r\n                  </div>\r\n                  <p>The newly created <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>envelopeFileName</code> or <code>packageStream</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If a file with the specified name already exists, it is overwritten.  </p>\n<p> The current user has read/write access to the file.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the CreateFromPackage method to instantiate an <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"RightsManagedPackagePublish#RmPkgPubEncrypt\">WriteStatus(&quot;   Signing the UnsignedPublishLicense&quot; &amp; vbLf &amp; &quot;       to build the PublishLicense.&quot;)\n            Dim authorsUseLicense As UseLicense = Nothing\nDim publishLicense As PublishLicense = unsignedLicense.Sign(_secureEnv, authorsUseLicense)\n\nWriteStatus(&quot;   Binding the author&#39;s UseLicense and&quot;)\nWriteStatus(&quot;       obtaining the CryptoProvider.&quot;)\nDim cryptoProvider As CryptoProvider = authorsUseLicense.Bind(_secureEnv)\n\nWriteStatus(&quot;   Creating the EncryptedPackage.&quot;)\nDim packageStream As Stream = File.OpenRead(packageFile)\nDim ePackage As EncryptedPackageEnvelope = EncryptedPackageEnvelope.CreateFromPackage(encryptedFile, packageStream, publishLicense, cryptoProvider)\n\nWriteStatus(&quot;   Adding an author&#39;s UseLicense.&quot;)\nDim rmi As RightsManagementInformation = ePackage.RightsManagementInformation\nrmi.SaveUseLicense(author, authorsUseLicense)\n\nePackage.Close()\nWriteStatus(&quot;   Done - Package encryption complete.&quot;)\n\nWriteStatus(&quot;Verifying package encryption.&quot;)\nIf EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(encryptedFile) Then\n\tWriteStatus(&quot;   Confirmed - &#39;&quot; &amp; encryptedFilename &amp; &quot;&#39; is encrypted.&quot;)\nElse\n\tMessageBox.Show(&quot;ERROR: &#39;&quot; &amp; encryptedFilename &amp; &quot;&#39; is NOT ENCRYPTED.&quot;, &quot;Encryption Error&quot;, MessageBoxButton.OK, MessageBoxImage.Error)\n\tWriteStatus(&quot;ERROR: &#39;&quot; &amp; encryptedFilename &amp; &quot;&#39; is NOT ENCRYPTED.&quot; &amp; vbLf)\n\tReturn False\nEnd If\n</code></pre><pre><code class=\"lang-cs\" name=\"RightsManagedPackagePublish#RmPkgPubEncrypt\">WriteStatus(&quot;   Signing the UnsignedPublishLicense<br>&quot; +\n            &quot;       to build the PublishLicense.&quot;);\nUseLicense authorsUseLicense;\nPublishLicense publishLicense =\n    unsignedLicense.Sign(_secureEnv, out authorsUseLicense);\n\nWriteStatus(&quot;   Binding the author&#39;s UseLicense and&quot;);\nWriteStatus(&quot;       obtaining the CryptoProvider.&quot;);\nCryptoProvider cryptoProvider = authorsUseLicense.Bind(_secureEnv);\n\nWriteStatus(&quot;   Creating the EncryptedPackage.&quot;);\nStream packageStream = File.OpenRead(packageFile);\nEncryptedPackageEnvelope ePackage =\n    EncryptedPackageEnvelope.CreateFromPackage(encryptedFile,\n        packageStream, publishLicense, cryptoProvider);\n\nWriteStatus(&quot;   Adding an author&#39;s UseLicense.&quot;);\nRightsManagementInformation rmi =\n    ePackage.RightsManagementInformation;\nrmi.SaveUseLicense(author, authorsUseLicense);\n\nePackage.Close();\nWriteStatus(&quot;   Done - Package encryption complete.&quot;);\n\nWriteStatus(&quot;Verifying package encryption.&quot;);\nif (EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(encryptedFile))\n{\n    WriteStatus(&quot;   Confirmed - &#39;&quot; + encryptedFilename +\n                &quot;&#39; is encrypted.&quot;);\n}\nelse\n{\n    MessageBox.Show(&quot;ERROR: &#39;&quot; + encryptedFilename +\n        &quot;&#39; is NOT ENCRYPTED.&quot;, &quot;Encryption Error&quot;,\n        MessageBoxButton.OK, MessageBoxImage.Error);\n    WriteStatus(&quot;ERROR: &#39;&quot; + encryptedFilename +\n                &quot;&#39; is NOT ENCRYPTED.<br>&quot;);\n    return false;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Packaging_EncryptedPackageEnvelope_Dispose\">\r\n    \r\n            <a id=\"System_IO_Packaging_EncryptedPackageEnvelope_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose()</div>        \r\n          </div>\r\n    \r\n            <p>Releases all resources used by the <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Dispose ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Call Dispose when finished with a <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a>. The Dispose method leaves the <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a> in an unusable state. After calling Dispose, you must release all references to the <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a> so the garbage collector can reclaim the memory that the <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a> was occupying. For more information, see <a href=\"../Topic/Cleaning%20Up%20Unmanaged%20Resources.md\" data-linktype=\"relative-path\">Cleaning Up Unmanaged Resources</a> and <a href=\"../Topic/Implementing%20a%20Dispose%20Method.md\" data-linktype=\"relative-path\">Implementing a Dispose Method</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Always call Dispose before you release your last reference to the <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a> object&#39;s <a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a> method.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Packaging_EncryptedPackageEnvelope_Dispose_System_Boolean_\">\r\n    \r\n            <a id=\"System_IO_Packaging_EncryptedPackageEnvelope_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a> and optionally releases the managed resources.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void Dispose (bool disposing);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>disposing</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to release both managed and unmanaged resources; <code>false</code> to release only unmanaged resources.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is called by the public <code>Dispose()</code>method and the <a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a> method. <code>Dispose()</code> invokes the protected <code>Dispose(Boolean)</code> method with the <code>disposing</code> parameter set to <code>true</code>. <a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a> invokes <code>Dispose</code> with <code>disposing</code> set to <code>false</code>.  </p>\n<p> When the <code>disposing</code> parameter is true, this method releases all resources held by any managed objects that this <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a> references. This method invokes the <code>Dispose()</code> method of each referenced object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Packaging_EncryptedPackageEnvelope_Flush\">\r\n    \r\n            <a id=\"System_IO_Packaging_EncryptedPackageEnvelope_Flush_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Flush()</div>        \r\n          </div>\r\n    \r\n            <p>Flush the stream for both the <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a> and its package content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Flush ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Packaging_EncryptedPackageEnvelope_GetPackage\">\r\n    \r\n            <a id=\"System_IO_Packaging_EncryptedPackageEnvelope_GetPackage_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetPackage()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the encrypted package inside the <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.Packaging.Package GetPackage ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.packaging.package\" data-linktype=\"relative-path\">Package</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.io.packaging.package\" data-linktype=\"relative-path\">Package</a> in the envelope.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Packaging_EncryptedPackageEnvelope_IsEncryptedPackageEnvelope_System_IO_Stream_\">\r\n    \r\n            <a id=\"System_IO_Packaging_EncryptedPackageEnvelope_IsEncryptedPackageEnvelope_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsEncryptedPackageEnvelope(Stream)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value specifying whether the specified stream is an OLE compound file with an encrypted package stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsEncryptedPackageEnvelope (System.IO.Stream stream);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream that is tested.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified stream is an OLE compound file with an encrypted package stream; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>stream</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Packaging_EncryptedPackageEnvelope_IsEncryptedPackageEnvelope_System_String_\">\r\n    \r\n            <a id=\"System_IO_Packaging_EncryptedPackageEnvelope_IsEncryptedPackageEnvelope_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsEncryptedPackageEnvelope(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value specifying whether the specified file is an OLE compound file with an encrypted package stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsEncryptedPackageEnvelope (string fileName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file that is tested.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified file is an OLE compound file with an encrypted package stream; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>fileName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use this method to test for encryption.  </p>\n<pre><code class=\"lang-vb\" name=\"RightsManagedPackagePublish#RmPkgPubEncrypt\">WriteStatus(&quot;   Signing the UnsignedPublishLicense&quot; &amp; vbLf &amp; &quot;       to build the PublishLicense.&quot;)\n            Dim authorsUseLicense As UseLicense = Nothing\nDim publishLicense As PublishLicense = unsignedLicense.Sign(_secureEnv, authorsUseLicense)\n\nWriteStatus(&quot;   Binding the author&#39;s UseLicense and&quot;)\nWriteStatus(&quot;       obtaining the CryptoProvider.&quot;)\nDim cryptoProvider As CryptoProvider = authorsUseLicense.Bind(_secureEnv)\n\nWriteStatus(&quot;   Creating the EncryptedPackage.&quot;)\nDim packageStream As Stream = File.OpenRead(packageFile)\nDim ePackage As EncryptedPackageEnvelope = EncryptedPackageEnvelope.CreateFromPackage(encryptedFile, packageStream, publishLicense, cryptoProvider)\n\nWriteStatus(&quot;   Adding an author&#39;s UseLicense.&quot;)\nDim rmi As RightsManagementInformation = ePackage.RightsManagementInformation\nrmi.SaveUseLicense(author, authorsUseLicense)\n\nePackage.Close()\nWriteStatus(&quot;   Done - Package encryption complete.&quot;)\n\nWriteStatus(&quot;Verifying package encryption.&quot;)\nIf EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(encryptedFile) Then\n\tWriteStatus(&quot;   Confirmed - &#39;&quot; &amp; encryptedFilename &amp; &quot;&#39; is encrypted.&quot;)\nElse\n\tMessageBox.Show(&quot;ERROR: &#39;&quot; &amp; encryptedFilename &amp; &quot;&#39; is NOT ENCRYPTED.&quot;, &quot;Encryption Error&quot;, MessageBoxButton.OK, MessageBoxImage.Error)\n\tWriteStatus(&quot;ERROR: &#39;&quot; &amp; encryptedFilename &amp; &quot;&#39; is NOT ENCRYPTED.&quot; &amp; vbLf)\n\tReturn False\nEnd If\n</code></pre><pre><code class=\"lang-cs\" name=\"RightsManagedPackagePublish#RmPkgPubEncrypt\">WriteStatus(&quot;   Signing the UnsignedPublishLicense<br>&quot; +\n            &quot;       to build the PublishLicense.&quot;);\nUseLicense authorsUseLicense;\nPublishLicense publishLicense =\n    unsignedLicense.Sign(_secureEnv, out authorsUseLicense);\n\nWriteStatus(&quot;   Binding the author&#39;s UseLicense and&quot;);\nWriteStatus(&quot;       obtaining the CryptoProvider.&quot;);\nCryptoProvider cryptoProvider = authorsUseLicense.Bind(_secureEnv);\n\nWriteStatus(&quot;   Creating the EncryptedPackage.&quot;);\nStream packageStream = File.OpenRead(packageFile);\nEncryptedPackageEnvelope ePackage =\n    EncryptedPackageEnvelope.CreateFromPackage(encryptedFile,\n        packageStream, publishLicense, cryptoProvider);\n\nWriteStatus(&quot;   Adding an author&#39;s UseLicense.&quot;);\nRightsManagementInformation rmi =\n    ePackage.RightsManagementInformation;\nrmi.SaveUseLicense(author, authorsUseLicense);\n\nePackage.Close();\nWriteStatus(&quot;   Done - Package encryption complete.&quot;);\n\nWriteStatus(&quot;Verifying package encryption.&quot;);\nif (EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(encryptedFile))\n{\n    WriteStatus(&quot;   Confirmed - &#39;&quot; + encryptedFilename +\n                &quot;&#39; is encrypted.&quot;);\n}\nelse\n{\n    MessageBox.Show(&quot;ERROR: &#39;&quot; + encryptedFilename +\n        &quot;&#39; is NOT ENCRYPTED.&quot;, &quot;Encryption Error&quot;,\n        MessageBoxButton.OK, MessageBoxImage.Error);\n    WriteStatus(&quot;ERROR: &#39;&quot; + encryptedFilename +\n                &quot;&#39; is NOT ENCRYPTED.<br>&quot;);\n    return false;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Packaging_EncryptedPackageEnvelope_Open_System_IO_Stream_\">\r\n    \r\n            <a id=\"System_IO_Packaging_EncryptedPackageEnvelope_Open_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Open(Stream)</div>        \r\n          </div>\r\n    \r\n            <p>Open the encrypted package in the specified stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.IO.Packaging.EncryptedPackageEnvelope Open (System.IO.Stream envelopeStream);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>envelopeStream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream containing the encrypted package.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a> that is opened.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The stream must have an encrypted package.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Packaging_EncryptedPackageEnvelope_Open_System_String_\">\r\n    \r\n            <a id=\"System_IO_Packaging_EncryptedPackageEnvelope_Open_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Open(String)</div>        \r\n          </div>\r\n    \r\n            <p>Open the encrypted package in the specified file as read only and unshared.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.IO.Packaging.EncryptedPackageEnvelope Open (string envelopeFileName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>envelopeFileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file containing the encrypted package.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a> that is opened.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The file must have an encrypted package.  </p>\n<p> The opened file is read only and unshared.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Packaging_EncryptedPackageEnvelope_Open_System_String_System_IO_FileAccess_\">\r\n    \r\n            <a id=\"System_IO_Packaging_EncryptedPackageEnvelope_Open_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Open(String,FileAccess)</div>        \r\n          </div>\r\n    \r\n            <p>Open the encrypted package in the specified file as unshared and with the specified access.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.IO.Packaging.EncryptedPackageEnvelope Open (string envelopeFileName, System.IO.FileAccess access);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>envelopeFileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file containing the encrypted package.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>access</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileaccess\" data-linktype=\"relative-path\">FileAccess</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of access.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a> that is opened.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The file must have an encrypted package.  </p>\n<p> The opened file is unshared.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Packaging_EncryptedPackageEnvelope_Open_System_String_System_IO_FileAccess_System_IO_FileShare_\">\r\n    \r\n            <a id=\"System_IO_Packaging_EncryptedPackageEnvelope_Open_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Open(String,FileAccess,FileShare)</div>        \r\n          </div>\r\n    \r\n            <p>Open the encrypted package in the specified file and gives it the specified access and sharing.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.IO.Packaging.EncryptedPackageEnvelope Open (string envelopeFileName, System.IO.FileAccess access, System.IO.FileShare sharing);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>envelopeFileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file containing the encrypted package.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>access</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileaccess\" data-linktype=\"relative-path\">FileAccess</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of access.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>sharing</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileshare\" data-linktype=\"relative-path\">FileShare</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of sharing.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.io.packaging.encryptedpackageenvelope\" data-linktype=\"relative-path\">EncryptedPackageEnvelope</a> that is opened.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The file must have an encrypted package.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.IO.Packaging.EncryptedPackageEnvelope.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IO.Packaging.EncryptedPackageEnvelope.yml\">\r\n<meta name=\"APIName\" content=\"System.IO.Packaging.EncryptedPackageEnvelope\">\r\n<meta name=\"APIName\" content=\"System.IO.Packaging.EncryptedPackageEnvelope.Close\">\r\n<meta name=\"APIName\" content=\"System.IO.Packaging.EncryptedPackageEnvelope.Create\">\r\n<meta name=\"APIName\" content=\"System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage\">\r\n<meta name=\"APIName\" content=\"System.IO.Packaging.EncryptedPackageEnvelope.Dispose\">\r\n<meta name=\"APIName\" content=\"System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess\">\r\n<meta name=\"APIName\" content=\"System.IO.Packaging.EncryptedPackageEnvelope.Flush\">\r\n<meta name=\"APIName\" content=\"System.IO.Packaging.EncryptedPackageEnvelope.GetPackage\">\r\n<meta name=\"APIName\" content=\"System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope\">\r\n<meta name=\"APIName\" content=\"System.IO.Packaging.EncryptedPackageEnvelope.Open\">\r\n<meta name=\"APIName\" content=\"System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties\">\r\n<meta name=\"APIName\" content=\"System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation\">\r\n<meta name=\"APIName\" content=\"System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo\">\r\n<meta name=\"APILocation\" content=\"WindowsBase.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"2028e7e4-6aa7-1e54-839f-969e4121452d\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\o2y0\\s\\fulldocset\\xml\\System.IO.Packaging\\EncryptedPackageEnvelope.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents an OLE compound file that contains an encrypted package.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.IO.Packaging/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.IO.Packaging.EncryptedPackageEnvelope\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.IO.Packaging.EncryptedPackageEnvelope.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IO.Packaging.EncryptedPackageEnvelope.yml","open_to_public_contributors":true,"api_name":["System.IO.Packaging.EncryptedPackageEnvelope","System.IO.Packaging.EncryptedPackageEnvelope.Close","System.IO.Packaging.EncryptedPackageEnvelope.Create","System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage","System.IO.Packaging.EncryptedPackageEnvelope.Dispose","System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess","System.IO.Packaging.EncryptedPackageEnvelope.Flush","System.IO.Packaging.EncryptedPackageEnvelope.GetPackage","System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope","System.IO.Packaging.EncryptedPackageEnvelope.Open","System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties","System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation","System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo"],"api_location":["WindowsBase.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.IO.Packaging.EncryptedPackageEnvelope","System::IO::Packaging::EncryptedPackageEnvelope","System.IO.Packaging.EncryptedPackageEnvelope.Close","System::IO::Packaging::EncryptedPackageEnvelope::Close","System.IO.Packaging.EncryptedPackageEnvelope.Create","System::IO::Packaging::EncryptedPackageEnvelope::Create","System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage","System::IO::Packaging::EncryptedPackageEnvelope::CreateFromPackage","System.IO.Packaging.EncryptedPackageEnvelope.Dispose","System::IO::Packaging::EncryptedPackageEnvelope::Dispose","System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess","System::IO::Packaging::EncryptedPackageEnvelope::FileOpenAccess","System.IO.Packaging.EncryptedPackageEnvelope.Flush","System::IO::Packaging::EncryptedPackageEnvelope::Flush","System.IO.Packaging.EncryptedPackageEnvelope.GetPackage","System::IO::Packaging::EncryptedPackageEnvelope::GetPackage","System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope","System::IO::Packaging::EncryptedPackageEnvelope::IsEncryptedPackageEnvelope","System.IO.Packaging.EncryptedPackageEnvelope.Open","System::IO::Packaging::EncryptedPackageEnvelope::Open","System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties","System::IO::Packaging::EncryptedPackageEnvelope::PackageProperties","System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation","System::IO::Packaging::EncryptedPackageEnvelope::RightsManagementInformation","System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo","System::IO::Packaging::EncryptedPackageEnvelope::StorageInfo"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"2028e7e4-6aa7-1e54-839f-969e4121452d","original_ecmaxml_local_path":"W:\\o2y0\\s\\fulldocset\\xml\\System.IO.Packaging\\EncryptedPackageEnvelope.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.IO.Packaging/EncryptedPackageEnvelope.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"EncryptedPackageEnvelope class | Microsoft Docs","_op_ogTitle":"EncryptedPackageEnvelope class","description":"Represents an OLE compound file that contains an encrypted package.\n","toc_asset_id":"_splitted/System.IO.Packaging/toc.json","toc_rel":"_splitted/System.IO.Packaging/toc.json","source_url":"","ms.assetid":"System.IO.Packaging.EncryptedPackageEnvelope","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.io.packaging.encryptedpackageenvelope","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.io.packaging.encryptedpackageenvelope","fileRelativePath":"System.IO.Packaging.EncryptedPackageEnvelope.html"},"themesRelativePathToOutputRoot":"_themes/"}