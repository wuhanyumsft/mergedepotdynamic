{"content":"    \r\n    <h1 id=\"Microsoft_JScript_IDebugVsaScriptCodeItem\">\r\n      <span class=\"lang-csharp\">IDebugVsaScriptCodeItem</span>\r\n        Interface\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Defines methods that evaluate expressions and parse strings. This interface is typically implemented by an object that represents a code block, and it is typically called by a debugger. This interface provides extra functionality that is needed by an IActiveScript host.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\n[System.Runtime.InteropServices.Guid(&quot;6DFE759A-CB8B-4ca0-A973-1D04E0BF0B53&quot;)]\npublic interface IDebugVsaScriptCodeItem</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_JScript_IDebugVsaScriptCodeItem_Evaluate\" data-linktype=\"self-bookmark\">Evaluate()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When implemented in a class, evaluates the block, expression, or statement represented by the code item and returns the value. It is typically called by a debugger that needs to evaluate an expression (in a Watch window, for example). For expressions, the value is the result of the expression. For blocks and statements, the resulting expression is the last expression calculated by the block or statement.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#Microsoft_JScript_IDebugVsaScriptCodeItem_ParseNamedBreakPoint_System_String_System_String__System_Int32__System_String__System_String__System_UInt64__\" data-linktype=\"self-bookmark\">ParseNamedBreakPoint(String,String,Int32,String,String,UInt64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When implemented in a class, parses strings and returns the parsed-out information. This method is typically called by a debugger that needs to parse information about a breakpoint that is represented as a <code>string</code>. The debugger might have a breakpoint typed in by the user in the form <em>functionname-arguments-ILoffset</em>. A named breakpoint string can have a complex format, for example, <code>F.B(C.D[], int, arg : double ) : C.Abc + 123.</code> The parameter list is optional, as is the IL offset.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_JScript_IDebugVsaScriptCodeItem_Evaluate\">\r\n    \r\n            <a id=\"Microsoft_JScript_IDebugVsaScriptCodeItem_Evaluate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Evaluate()</div>        \r\n          </div>\r\n    \r\n            <p>When implemented in a class, evaluates the block, expression, or statement represented by the code item and returns the value. It is typically called by a debugger that needs to evaluate an expression (in a Watch window, for example). For expressions, the value is the result of the expression. For blocks and statements, the resulting expression is the last expression calculated by the block or statement.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object Evaluate ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>Returns a value that represents the evaluation of the statement, expression, or block.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Note that the Evaluate method is functionally identical to the <a class=\"xref\" href=\"microsoft.jscript.ivsascriptcodeitem#Microsoft_JScript_IVsaScriptCodeItem_Execute_\" data-linktype=\"relative-path\">Execute</a> method. Only the marshaling attributes differ. This version of the interface allows an unmanaged debugger to obtain the return value as an <code>IUnknown</code> pointer rather than a <code>VARIANT</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"Microsoft_JScript_IDebugVsaScriptCodeItem_ParseNamedBreakPoint_System_String_System_String__System_Int32__System_String__System_String__System_UInt64__\">\r\n    \r\n            <a id=\"Microsoft_JScript_IDebugVsaScriptCodeItem_ParseNamedBreakPoint_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ParseNamedBreakPoint(String,String,Int32,String,String,UInt64)</div>        \r\n          </div>\r\n    \r\n            <p>When implemented in a class, parses strings and returns the parsed-out information. This method is typically called by a debugger that needs to parse information about a breakpoint that is represented as a <code>string</code>. The debugger might have a breakpoint typed in by the user in the form <em>functionname-arguments-ILoffset</em>. A named breakpoint string can have a complex format, for example, <code>F.B(C.D[], int, arg : double ) : C.Abc + 123.</code> The parameter list is optional, as is the IL offset.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool ParseNamedBreakPoint (string input, out string functionName, out int nargs, out string arguments, out string returnType, out ulong offset);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>input</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A well-formed named breakpoint string giving a function, optional argument list, and optional IL offset.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>functionName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Out parameter returning the name of the function parsed out of the input string, or the empty string if the input string is not well formed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>nargs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Out parameter returning the number of arguments in the optional argument list. Returns zero if there is no arguments list or if the string is not well formed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Out parameter returning a space-separated list of the names of the types of all the arguments in the arguments list, or an empty string if the arguments list was missing or the input string was not well formed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>returnType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Out parameter returning a string containing the return type of the function named in the input, or the empty string if the return type was missing or the input string was not well formed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Unsigned long integer giving the IL offset from the input string, or zero if there was no IL offset or the string was not well formed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>Returns <code>true</code> if the named breakpoint is successfully parsed, <code>false</code> otherwise.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/Microsoft.JScript.IDebugVsaScriptCodeItem.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/Microsoft.JScript.IDebugVsaScriptCodeItem.yml\">\r\n<meta name=\"APIName\" content=\"Microsoft.JScript.IDebugVsaScriptCodeItem\">\r\n<meta name=\"APIName\" content=\"Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate\">\r\n<meta name=\"APIName\" content=\"Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint\">\r\n<meta name=\"APILocation\" content=\"Microsoft.JScript.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"150f03f3-7ef4-2d06-a0e1-ef079b823b9a\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines methods that evaluate expressions and parse strings. This interface is typically implemented by an object that represents a code block, and it is typically called by a debugger. This interfac…\">\r\n<meta name=\"toc_rel\" content=\"_splitted/Microsoft.JScript/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"Microsoft.JScript.IDebugVsaScriptCodeItem\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/Microsoft.JScript.IDebugVsaScriptCodeItem.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/Microsoft.JScript.IDebugVsaScriptCodeItem.yml","open_to_public_contributors":true,"api_name":["Microsoft.JScript.IDebugVsaScriptCodeItem","Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate","Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint"],"api_location":["Microsoft.JScript.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["Microsoft.JScript.IDebugVsaScriptCodeItem","Microsoft::JScript::IDebugVsaScriptCodeItem","Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate","Microsoft::JScript::IDebugVsaScriptCodeItem::Evaluate","Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint","Microsoft::JScript::IDebugVsaScriptCodeItem::ParseNamedBreakPoint"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"150f03f3-7ef4-2d06-a0e1-ef079b823b9a","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/Microsoft.JScript/IDebugVsaScriptCodeItem.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IDebugVsaScriptCodeItem interface | Microsoft Docs","_op_ogTitle":"IDebugVsaScriptCodeItem interface","description":"Defines methods that evaluate expressions and parse strings. This interface is typically implemented by an object that represents a code block, and it is typically called by a debugger. This interfac…","toc_asset_id":"_splitted/Microsoft.JScript/toc.json","toc_rel":"_splitted/Microsoft.JScript/toc.json","source_url":"","ms.assetid":"Microsoft.JScript.IDebugVsaScriptCodeItem","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/microsoft.jscript.idebugvsascriptcodeitem","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/microsoft.jscript.idebugvsascriptcodeitem","fileRelativePath":"Microsoft.JScript.IDebugVsaScriptCodeItem.html"},"themesRelativePathToOutputRoot":"_themes/"}