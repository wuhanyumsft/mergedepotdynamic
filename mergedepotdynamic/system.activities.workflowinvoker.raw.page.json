{"content":"    \r\n    <h1 id=\"System_Activities_WorkflowInvoker\">\r\n      <span class=\"lang-csharp\">WorkflowInvoker</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides a means for invoking a workflow as if it were a method call.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public sealed class WorkflowInvoker</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">WorkflowInvoker</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>WorkflowInvoker contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.  </p>\n<p> WorkflowInvoker does not allow instance control such as persisting, unloading, or resuming bookmarks. If instance control is desired, use <a class=\"xref\" href=\"system.activities.workflowapplication\" data-linktype=\"relative-path\">WorkflowApplication</a> instead.  </p>\n<p> To execute workflows synchronously with no instance control, call the <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_Invoke_\" data-linktype=\"relative-path\">Invoke</a> method. To execute a workflow asynchronously with no instance control, use the <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_BeginInvoke_\" data-linktype=\"relative-path\">BeginInvoke</a> and <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_EndInvoke_\" data-linktype=\"relative-path\">EndInvoke</a> method pairs, or the <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_InvokeAsync_\" data-linktype=\"relative-path\">InvokeAsync</a> method.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Activities_WorkflowInvoker__ctor_System_Activities_Activity_\" data-linktype=\"self-bookmark\">WorkflowInvoker(Activity)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.activities.workflowinvoker\" data-linktype=\"relative-path\">WorkflowInvoker</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Activities_WorkflowInvoker_Extensions\" data-linktype=\"self-bookmark\">Extensions</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span> of extensions that are available to workflows invoked by a <a class=\"xref\" href=\"system.activities.workflowinvoker\" data-linktype=\"relative-path\">WorkflowInvoker</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Activities_WorkflowInvoker_BeginInvoke_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginInvoke(AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a workflow asynchronously using the specified <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> and user-provided state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Activities_WorkflowInvoker_BeginInvoke_System_Collections_Generic_IDictionary_System_String_System_Object__System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginInvoke(IDictionary&lt;String,Object&gt;,AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a workflow asynchronously using the specified <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span> of input parameters, <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a>, and user-provided state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Activities_WorkflowInvoker_BeginInvoke_System_TimeSpan_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginInvoke(TimeSpan,AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a workflow asynchronously using the specified time-out interval, <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a>, and user-provided state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Activities_WorkflowInvoker_BeginInvoke_System_Collections_Generic_IDictionary_System_String_System_Object__System_TimeSpan_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginInvoke(IDictionary&lt;String,Object&gt;,TimeSpan,AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a workflow asynchronously using the specified <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span> of input parameters, time-out interval, <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a>, and user-provided state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Activities_WorkflowInvoker_CancelAsync_System_Object_\" data-linktype=\"self-bookmark\">CancelAsync(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Attempts to cancel the workflow that was invoked with the specified <code>userState</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Activities_WorkflowInvoker_EndInvoke_System_IAsyncResult_\" data-linktype=\"self-bookmark\">EndInvoke(IAsyncResult)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the results of a workflow that was invoked using one of the <span class=\"xref\">stem.Activities.WorkflowInvoker.BeginInvoke*</span> overloads.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Activities_WorkflowInvoker_Invoke\" data-linktype=\"self-bookmark\">Invoke()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a workflow synchronously using the workflow definition passed to the <span class=\"xref\">stem.Activities.WorkflowInvoker.#ctor*</span> constructor.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Activities_WorkflowInvoker_Invoke_System_Activities_Activity_\" data-linktype=\"self-bookmark\">Invoke(Activity)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a workflow synchronously using the specified workflow definition.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Activities_WorkflowInvoker_Invoke_System_Collections_Generic_IDictionary_System_String_System_Object__\" data-linktype=\"self-bookmark\">Invoke(IDictionary&lt;String,Object&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes the activity passed to the <span class=\"xref\">stem.Activities.WorkflowInvoker.#ctor*</span> constructor synchronously with the specified <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span> of input parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Activities_WorkflowInvoker_Invoke_System_TimeSpan_\" data-linktype=\"self-bookmark\">Invoke(TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a workflow synchronously with the specified time-out interval.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Activities_WorkflowInvoker_Invoke_System_Activities_Activity_System_Collections_Generic_IDictionary_System_String_System_Object__\" data-linktype=\"self-bookmark\">Invoke(Activity,IDictionary&lt;String,Object&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a workflow synchronously using the specified workflow definition and <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span> of input parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Activities_WorkflowInvoker_Invoke_System_Activities_Activity_System_TimeSpan_\" data-linktype=\"self-bookmark\">Invoke(Activity,TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a workflow synchronously using the specified workflow definition and time-out interval.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Activities_WorkflowInvoker_Invoke_System_Collections_Generic_IDictionary_System_String_System_Object__System_TimeSpan_\" data-linktype=\"self-bookmark\">Invoke(IDictionary&lt;String,Object&gt;,TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes the activity passed to the <span class=\"xref\">stem.Activities.WorkflowInvoker.#ctor*</span> constructor synchronously with the specified <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span> of input parameters and the specified time-out interval.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Activities_WorkflowInvoker_Invoke_System_Activities_Activity_System_Collections_Generic_IDictionary_System_String_System_Object__System_TimeSpan_\" data-linktype=\"self-bookmark\">Invoke(Activity,IDictionary&lt;String,Object&gt;,TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a workflow synchronously using the specified workflow definition, <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span> of input parameters, and time-out interval.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Activities_WorkflowInvoker_Invoke__1_System_Activities_Activity___0__\" data-linktype=\"self-bookmark\">Invoke&lt;TResult&gt;(Activity&lt;TResult&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a workflow synchronously using the workflow definition passed to the <span class=\"xref\">stem.Activities.WorkflowInvoker.#ctor*</span> constructor.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Activities_WorkflowInvoker_Invoke__1_System_Activities_Activity___0__System_Collections_Generic_IDictionary_System_String_System_Object__\" data-linktype=\"self-bookmark\">Invoke&lt;TResult&gt;(Activity&lt;TResult&gt;,IDictionary&lt;String,Object&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a workflow synchronously using the specified workflow definition and <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span> of input parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Activities_WorkflowInvoker_Invoke__1_System_Activities_Activity___0__System_Collections_Generic_IDictionary_System_String_System_Object__System_TimeSpan_\" data-linktype=\"self-bookmark\">Invoke&lt;TResult&gt;(Activity&lt;TResult&gt;,IDictionary&lt;String,Object&gt;,TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a workflow synchronously using the specified workflow definition, <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span> of input parameters, and time-out interval.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Activities_WorkflowInvoker_Invoke__1_System_Activities_Activity___0__System_Collections_Generic_IDictionary_System_String_System_Object__System_Collections_Generic_IDictionary_System_String_System_Object___System_TimeSpan_\" data-linktype=\"self-bookmark\">Invoke&lt;TResult&gt;(Activity&lt;TResult&gt;,IDictionary&lt;String,Object&gt;,IDictionary&lt;String,Object&gt;,TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a workflow synchronously using the specified workflow definition, <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span> of input parameters, <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span> of additional output parameters, and time-out interval.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Activities_WorkflowInvoker_InvokeAsync\" data-linktype=\"self-bookmark\">InvokeAsync()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a workflow asynchronously.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Activities_WorkflowInvoker_InvokeAsync_System_Collections_Generic_IDictionary_System_String_System_Object__\" data-linktype=\"self-bookmark\">InvokeAsync(IDictionary&lt;String,Object&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a workflow asynchronously using the specified <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span> of input parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Activities_WorkflowInvoker_InvokeAsync_System_Object_\" data-linktype=\"self-bookmark\">InvokeAsync(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a workflow asynchronously using the specified unique identifier.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Activities_WorkflowInvoker_InvokeAsync_System_TimeSpan_\" data-linktype=\"self-bookmark\">InvokeAsync(TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a workflow asynchronously with the specified time-out interval.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Activities_WorkflowInvoker_InvokeAsync_System_Collections_Generic_IDictionary_System_String_System_Object__System_Object_\" data-linktype=\"self-bookmark\">InvokeAsync(IDictionary&lt;String,Object&gt;,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a workflow asynchronously using the specified <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span> of input parameters and a unique identifier.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Activities_WorkflowInvoker_InvokeAsync_System_Collections_Generic_IDictionary_System_String_System_Object__System_TimeSpan_\" data-linktype=\"self-bookmark\">InvokeAsync(IDictionary&lt;String,Object&gt;,TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a workflow asynchronously with the specified <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span> of input parameters and the specified time-out interval.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Activities_WorkflowInvoker_InvokeAsync_System_TimeSpan_System_Object_\" data-linktype=\"self-bookmark\">InvokeAsync(TimeSpan,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a workflow asynchronously with the specified time-out interval and a unique identifier.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Activities_WorkflowInvoker_InvokeAsync_System_Collections_Generic_IDictionary_System_String_System_Object__System_TimeSpan_System_Object_\" data-linktype=\"self-bookmark\">InvokeAsync(IDictionary&lt;String,Object&gt;,TimeSpan,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Invokes a workflow asynchronously with the specified <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span> of input parameters, the specified time-out interval, and a unique identifier.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Events\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Activities_WorkflowInvoker_InvokeCompleted\" data-linktype=\"self-bookmark\">InvokeCompleted</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the workflow invoked by one of the <span class=\"xref\">stem.Activities.WorkflowInvoker.InvokeAsync*</span> overloads is completed or canceled.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Activities_WorkflowInvoker__ctor_System_Activities_Activity_\">\r\n    \r\n            <a id=\"System_Activities_WorkflowInvoker__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WorkflowInvoker(Activity)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.activities.workflowinvoker\" data-linktype=\"relative-path\">WorkflowInvoker</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public WorkflowInvoker (System.Activities.Activity workflow);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>workflow</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.activities.activity\" data-linktype=\"relative-path\">Activity</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The workflow definition of the workflow to be invoked by this instance of the <a class=\"xref\" href=\"system.activities.workflowinvoker\" data-linktype=\"relative-path\">WorkflowInvoker</a> class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.activities.workflowinvoker\" data-linktype=\"relative-path\">WorkflowInvoker</a> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example invokes a workflow consisting of a single <a class=\"xref\" href=\"system.activities.statements.writeline\" data-linktype=\"relative-path\">WriteLine</a> activity.  </p>\n<pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#2\">            Activity wf = new WriteLine\n            {\n                Text = &quot;Hello World.&quot;\n            };\n\n            WorkflowInvoker invoker = new WorkflowInvoker(wf);\n\n            invoker.Invoke();\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Activities_WorkflowInvoker_Extensions\">\r\n    \r\n            <a id=\"System_Activities_WorkflowInvoker_Extensions_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Extensions</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span> of extensions that are available to workflows invoked by a <a class=\"xref\" href=\"system.activities.workflowinvoker\" data-linktype=\"relative-path\">WorkflowInvoker</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.activities.hosting.workflowinstanceextensionmanager\" data-linktype=\"relative-path\">WorkflowInstanceExtensionManager</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span> of extensions that are available to workflows invoked by a <a class=\"xref\" href=\"system.activities.workflowinvoker\" data-linktype=\"relative-path\">WorkflowInvoker</a> instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is used by workflow host authors to add extensions to the <a class=\"xref\" href=\"system.activities.workflowinvoker\" data-linktype=\"relative-path\">WorkflowInvoker</a> instance so they will be available to workflows invoked by it.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example registers a custom <a class=\"xref\" href=\"system.activities.tracking.trackingparticipant\" data-linktype=\"relative-path\">TrackingParticipant</a> with the Extensions collection of a <a class=\"xref\" href=\"system.activities.workflowinvoker\" data-linktype=\"relative-path\">WorkflowInvoker</a> instance. This code example is part of the <a href=\"../Topic/Custom%20Tracking.md\" data-linktype=\"relative-path\">Custom Tracking</a> sample.  </p>\n<pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#40\">            WorkflowInvoker invoker = new WorkflowInvoker(BuildSampleWorkflow());\n            invoker.Extensions.Add(customTrackingParticipant);\n\n            invoker.Invoke();\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Activities_WorkflowInvoker_BeginInvoke_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_Activities_WorkflowInvoker_BeginInvoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginInvoke(AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a workflow asynchronously using the specified <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> and user-provided state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IAsyncResult BeginInvoke (AsyncCallback callback, object state);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>callback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The method to be called when the workflow has completed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An optional application-specific object that contains information about the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>A reference to the asynchronous invoke operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_EndInvoke_\" data-linktype=\"relative-path\">EndInvoke</a> from the <code>callback</code> method. If <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_EndInvoke_\" data-linktype=\"relative-path\">EndInvoke</a> is called before the workflow completes, it blocks until the workflow completes. To configure a time-out interval in which the workflow must complete, use one of the <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_BeginInvoke_\" data-linktype=\"relative-path\">BeginInvoke</a> overloads that take a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.  </p>\n<p> This method invokes a workflow asynchronously using the <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> asynchronous design pattern. <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/crdefault-md.md&quot; -->For more information, see<!--END INCLUDE --><a href=\"http://go.microsoft.com/fwlink/?LinkId=141764\" data-linktype=\"external\">Asynchronous Programming Overview</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example invokes a workflow consisting of a <code>LongRunningDiceRoll</code> activity. The <code>LongRunningDiceRoll</code> activity has two output arguments that represent the results of the dice roll operation. These are retrieved by calling <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_EndInvoke_\" data-linktype=\"relative-path\">EndInvoke</a>. When the call to <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_EndInvoke_\" data-linktype=\"relative-path\">EndInvoke</a> returns, each output argument is returned in the outputs dictionary, keyed by argument name.  </p>\n<pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#131\">    public sealed class LongRunningDiceRoll : Activity\n    {\n        public OutArgument&lt;int&gt; D1 { get; set; }\n        public OutArgument&lt;int&gt; D2 { get; set; }\n\n        public LongRunningDiceRoll()\n        {\n            this.Implementation = () =&gt; new Sequence\n            {\n                Activities =\n                {\n                    new WriteLine\n                    {\n                        Text = &quot;Rolling the dice for 5 seconds.&quot;\n                    },\n                    new Delay\n                    {\n                        Duration = TimeSpan.FromSeconds(5)\n                    },\n                    new DiceRoll\n                    {\n                        D1 = new OutArgument&lt;int&gt;(env =&gt; this.D1.Get(env)),\n                        D2 = new OutArgument&lt;int&gt;(env =&gt; this.D2.Get(env))\n                    }\n                }\n            };\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#32\">        static void BeginInvokeExample()\n        {\n            WorkflowInvoker invoker = new WorkflowInvoker(new LongRunningDiceRoll());\n\n            string userState = &quot;BeginInvoke example&quot;;\n            IAsyncResult result = invoker.BeginInvoke(new AsyncCallback(WorkflowCompletedCallback), userState);\n\n            // You can inspect result from the host to determine if the workflow\n            // is complete.\n            Console.WriteLine(&quot;result.IsCompleted: {0}&quot;, result.IsCompleted);\n\n            // The results of the workflow are retrieved by calling EndInvoke, which\n            // can be called from the callback or from the host. If called from the\n            // host, it blocks until the workflow completes. If a callback is not\n            // required, pass null for the callback parameter.\n            Console.WriteLine(&quot;Waiting for the workflow to complete.&quot;);\n            IDictionary&lt;string, object&gt; outputs = invoker.EndInvoke(result);\n\n            Console.WriteLine(&quot;The two dice are {0} and {1}.&quot;,\n                outputs[&quot;D1&quot;], outputs[&quot;D2&quot;]);\n        }\n\n        static void WorkflowCompletedCallback(IAsyncResult result)\n        {\n            Console.WriteLine(&quot;Workflow complete.&quot;);\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Activities_WorkflowInvoker_BeginInvoke_System_Collections_Generic_IDictionary_System_String_System_Object__System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_Activities_WorkflowInvoker_BeginInvoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginInvoke(IDictionary&lt;String,Object&gt;,AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a workflow asynchronously using the specified <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span> of input parameters, <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a>, and user-provided state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, AsyncCallback callback, object state);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inputs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The dictionary of input parameters to the workflow, keyed by argument name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The method to be called when the workflow has completed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An optional application-specific object that contains information about the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>A reference to the asynchronous invoke operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_EndInvoke_\" data-linktype=\"relative-path\">EndInvoke</a> from the <code>callback</code> method. If <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_EndInvoke_\" data-linktype=\"relative-path\">EndInvoke</a> is called before the workflow completes, it blocks until the workflow completes.  To configure a time-out interval in which the workflow must complete, use one of the <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_BeginInvoke_\" data-linktype=\"relative-path\">BeginInvoke</a> overloads that take a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.  </p>\n<p> This method invokes a workflow asynchronously using the <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> asynchronous design pattern. <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/crdefault-md.md&quot; -->For more information, see<!--END INCLUDE --><a href=\"http://go.microsoft.com/fwlink/?LinkId=141764\" data-linktype=\"external\">Asynchronous Programming Overview</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example invokes a workflow consisting of a <code>LongRunningDiceRoll</code> activity. The <code>LongRunningDiceRoll</code> activity has two output arguments that represent the results of the dice roll operation. These are retrieved by calling <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_EndInvoke_\" data-linktype=\"relative-path\">EndInvoke</a>. When the call to <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_EndInvoke_\" data-linktype=\"relative-path\">EndInvoke</a> returns, each output argument is returned in the outputs dictionary, keyed by argument name.  </p>\n<pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#131\">    public sealed class LongRunningDiceRoll : Activity\n    {\n        public OutArgument&lt;int&gt; D1 { get; set; }\n        public OutArgument&lt;int&gt; D2 { get; set; }\n\n        public LongRunningDiceRoll()\n        {\n            this.Implementation = () =&gt; new Sequence\n            {\n                Activities =\n                {\n                    new WriteLine\n                    {\n                        Text = &quot;Rolling the dice for 5 seconds.&quot;\n                    },\n                    new Delay\n                    {\n                        Duration = TimeSpan.FromSeconds(5)\n                    },\n                    new DiceRoll\n                    {\n                        D1 = new OutArgument&lt;int&gt;(env =&gt; this.D1.Get(env)),\n                        D2 = new OutArgument&lt;int&gt;(env =&gt; this.D2.Get(env))\n                    }\n                }\n            };\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#32\">        static void BeginInvokeExample()\n        {\n            WorkflowInvoker invoker = new WorkflowInvoker(new LongRunningDiceRoll());\n\n            string userState = &quot;BeginInvoke example&quot;;\n            IAsyncResult result = invoker.BeginInvoke(new AsyncCallback(WorkflowCompletedCallback), userState);\n\n            // You can inspect result from the host to determine if the workflow\n            // is complete.\n            Console.WriteLine(&quot;result.IsCompleted: {0}&quot;, result.IsCompleted);\n\n            // The results of the workflow are retrieved by calling EndInvoke, which\n            // can be called from the callback or from the host. If called from the\n            // host, it blocks until the workflow completes. If a callback is not\n            // required, pass null for the callback parameter.\n            Console.WriteLine(&quot;Waiting for the workflow to complete.&quot;);\n            IDictionary&lt;string, object&gt; outputs = invoker.EndInvoke(result);\n\n            Console.WriteLine(&quot;The two dice are {0} and {1}.&quot;,\n                outputs[&quot;D1&quot;], outputs[&quot;D2&quot;]);\n        }\n\n        static void WorkflowCompletedCallback(IAsyncResult result)\n        {\n            Console.WriteLine(&quot;Workflow complete.&quot;);\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Activities_WorkflowInvoker_BeginInvoke_System_TimeSpan_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_Activities_WorkflowInvoker_BeginInvoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginInvoke(TimeSpan,AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a workflow asynchronously using the specified time-out interval, <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a>, and user-provided state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IAsyncResult BeginInvoke (TimeSpan timeout, AsyncCallback callback, object state);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The interval in which the workflow must complete before it is aborted and a <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is thrown.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The method to be called when the workflow has completed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An optional application-specific object that contains information about the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>A reference to the asynchronous invoke operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_EndInvoke_\" data-linktype=\"relative-path\">EndInvoke</a> from the <code>callback</code> method. If <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_EndInvoke_\" data-linktype=\"relative-path\">EndInvoke</a> is called before the workflow completes, it blocks until the workflow completes. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is thrown when the <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_EndInvoke_\" data-linktype=\"relative-path\">EndInvoke</a> method is called.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.  </p>\n</div>\n<p> This method invokes a workflow asynchronously using the <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> asynchronous design pattern. <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/crdefault-md.md&quot; -->For more information, see<!--END INCLUDE --><a href=\"http://go.microsoft.com/fwlink/?LinkId=141764\" data-linktype=\"external\">Asynchronous Programming Overview</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example invokes a workflow consisting of a <code>LongRunningDiceRoll</code> activity. The <code>LongRunningDiceRoll</code> activity has two output arguments that represent the results of the dice roll operation. These are retrieved by calling <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_EndInvoke_\" data-linktype=\"relative-path\">EndInvoke</a>. When the call to <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_EndInvoke_\" data-linktype=\"relative-path\">EndInvoke</a> returns, each output argument is returned in the outputs dictionary, keyed by argument name.  </p>\n<pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#131\">    public sealed class LongRunningDiceRoll : Activity\n    {\n        public OutArgument&lt;int&gt; D1 { get; set; }\n        public OutArgument&lt;int&gt; D2 { get; set; }\n\n        public LongRunningDiceRoll()\n        {\n            this.Implementation = () =&gt; new Sequence\n            {\n                Activities =\n                {\n                    new WriteLine\n                    {\n                        Text = &quot;Rolling the dice for 5 seconds.&quot;\n                    },\n                    new Delay\n                    {\n                        Duration = TimeSpan.FromSeconds(5)\n                    },\n                    new DiceRoll\n                    {\n                        D1 = new OutArgument&lt;int&gt;(env =&gt; this.D1.Get(env)),\n                        D2 = new OutArgument&lt;int&gt;(env =&gt; this.D2.Get(env))\n                    }\n                }\n            };\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#32\">        static void BeginInvokeExample()\n        {\n            WorkflowInvoker invoker = new WorkflowInvoker(new LongRunningDiceRoll());\n\n            string userState = &quot;BeginInvoke example&quot;;\n            IAsyncResult result = invoker.BeginInvoke(new AsyncCallback(WorkflowCompletedCallback), userState);\n\n            // You can inspect result from the host to determine if the workflow\n            // is complete.\n            Console.WriteLine(&quot;result.IsCompleted: {0}&quot;, result.IsCompleted);\n\n            // The results of the workflow are retrieved by calling EndInvoke, which\n            // can be called from the callback or from the host. If called from the\n            // host, it blocks until the workflow completes. If a callback is not\n            // required, pass null for the callback parameter.\n            Console.WriteLine(&quot;Waiting for the workflow to complete.&quot;);\n            IDictionary&lt;string, object&gt; outputs = invoker.EndInvoke(result);\n\n            Console.WriteLine(&quot;The two dice are {0} and {1}.&quot;,\n                outputs[&quot;D1&quot;], outputs[&quot;D2&quot;]);\n        }\n\n        static void WorkflowCompletedCallback(IAsyncResult result)\n        {\n            Console.WriteLine(&quot;Workflow complete.&quot;);\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Activities_WorkflowInvoker_BeginInvoke_System_Collections_Generic_IDictionary_System_String_System_Object__System_TimeSpan_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_Activities_WorkflowInvoker_BeginInvoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginInvoke(IDictionary&lt;String,Object&gt;,TimeSpan,AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a workflow asynchronously using the specified <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span> of input parameters, time-out interval, <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a>, and user-provided state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, AsyncCallback callback, object state);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inputs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The dictionary of input parameters to the workflow, keyed by argument name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The interval in which the workflow must complete before it is aborted and a <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is thrown.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The method to be called when the workflow has completed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An optional application-specific object that contains information about the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>A reference to the asynchronous invoke operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_EndInvoke_\" data-linktype=\"relative-path\">EndInvoke</a> from the <code>callback</code> method. If <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_EndInvoke_\" data-linktype=\"relative-path\">EndInvoke</a> is called before the workflow completes, it blocks until the workflow completes. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is thrown when <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_EndInvoke_\" data-linktype=\"relative-path\">EndInvoke</a> is called.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.  </p>\n</div>\n<p> This method invokes a workflow asynchronously using the <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> asynchronous design pattern. <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/crdefault-md.md&quot; -->For more information, see<!--END INCLUDE --><a href=\"http://go.microsoft.com/fwlink/?LinkId=141764\" data-linktype=\"external\">Asynchronous Programming Overview</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example invokes a workflow consisting of a <code>LongRunningDiceRoll</code> activity. The <code>LongRunningDiceRoll</code> activity has two output arguments that represent the results of the dice roll operation. These are retrieved by calling <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_EndInvoke_\" data-linktype=\"relative-path\">EndInvoke</a>. When the call to <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_EndInvoke_\" data-linktype=\"relative-path\">EndInvoke</a> returns, each output argument is returned in the outputs dictionary, keyed by argument name.  </p>\n<pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#131\">    public sealed class LongRunningDiceRoll : Activity\n    {\n        public OutArgument&lt;int&gt; D1 { get; set; }\n        public OutArgument&lt;int&gt; D2 { get; set; }\n\n        public LongRunningDiceRoll()\n        {\n            this.Implementation = () =&gt; new Sequence\n            {\n                Activities =\n                {\n                    new WriteLine\n                    {\n                        Text = &quot;Rolling the dice for 5 seconds.&quot;\n                    },\n                    new Delay\n                    {\n                        Duration = TimeSpan.FromSeconds(5)\n                    },\n                    new DiceRoll\n                    {\n                        D1 = new OutArgument&lt;int&gt;(env =&gt; this.D1.Get(env)),\n                        D2 = new OutArgument&lt;int&gt;(env =&gt; this.D2.Get(env))\n                    }\n                }\n            };\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#32\">        static void BeginInvokeExample()\n        {\n            WorkflowInvoker invoker = new WorkflowInvoker(new LongRunningDiceRoll());\n\n            string userState = &quot;BeginInvoke example&quot;;\n            IAsyncResult result = invoker.BeginInvoke(new AsyncCallback(WorkflowCompletedCallback), userState);\n\n            // You can inspect result from the host to determine if the workflow\n            // is complete.\n            Console.WriteLine(&quot;result.IsCompleted: {0}&quot;, result.IsCompleted);\n\n            // The results of the workflow are retrieved by calling EndInvoke, which\n            // can be called from the callback or from the host. If called from the\n            // host, it blocks until the workflow completes. If a callback is not\n            // required, pass null for the callback parameter.\n            Console.WriteLine(&quot;Waiting for the workflow to complete.&quot;);\n            IDictionary&lt;string, object&gt; outputs = invoker.EndInvoke(result);\n\n            Console.WriteLine(&quot;The two dice are {0} and {1}.&quot;,\n                outputs[&quot;D1&quot;], outputs[&quot;D2&quot;]);\n        }\n\n        static void WorkflowCompletedCallback(IAsyncResult result)\n        {\n            Console.WriteLine(&quot;Workflow complete.&quot;);\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Activities_WorkflowInvoker_CancelAsync_System_Object_\">\r\n    \r\n            <a id=\"System_Activities_WorkflowInvoker_CancelAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CancelAsync(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Attempts to cancel the workflow that was invoked with the specified <code>userState</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void CancelAsync (object userState);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>userState</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The token for the workflow to cancel.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Only a workflow invoked by one of the <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_InvokeAsync_\" data-linktype=\"relative-path\">InvokeAsync</a> overloads that takes a <code>userState</code> parameter can be canceled.  </p>\n<p> If the cancellation succeeds, the &lt;xref:System.ComponentModel.Cancelled%2A&gt; property of the <a class=\"xref\" href=\"system.activities.invokecompletedeventargs\" data-linktype=\"relative-path\">InvokeCompletedEventArgs</a> passed to the <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_InvokeCompleted\" data-linktype=\"relative-path\">InvokeCompleted</a> handler is set to <code>true</code>; otherwise, it is set to <code>false</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example invokes a workflow consisting of a <code>LongRunningDiceRoll</code> activity. The <code>LongRunningDiceRoll</code> activity has two output arguments that represent the results of the dice roll operation. Once the workflow is invoked, the host attempts to cancel the workflow.  </p>\n<pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#131\">    public sealed class LongRunningDiceRoll : Activity\n    {\n        public OutArgument&lt;int&gt; D1 { get; set; }\n        public OutArgument&lt;int&gt; D2 { get; set; }\n\n        public LongRunningDiceRoll()\n        {\n            this.Implementation = () =&gt; new Sequence\n            {\n                Activities =\n                {\n                    new WriteLine\n                    {\n                        Text = &quot;Rolling the dice for 5 seconds.&quot;\n                    },\n                    new Delay\n                    {\n                        Duration = TimeSpan.FromSeconds(5)\n                    },\n                    new DiceRoll\n                    {\n                        D1 = new OutArgument&lt;int&gt;(env =&gt; this.D1.Get(env)),\n                        D2 = new OutArgument&lt;int&gt;(env =&gt; this.D2.Get(env))\n                    }\n                }\n            };\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#34\">            AutoResetEvent syncEvent = new AutoResetEvent(false);\n\n            WorkflowInvoker invoker = new WorkflowInvoker(new LongRunningDiceRoll());\n\n            invoker.InvokeCompleted += delegate(object sender, InvokeCompletedEventArgs args)\n            {\n                if (args.Cancelled == true)\n                {\n                    Console.WriteLine(&quot;The workflow was cancelled.&quot;);\n                }\n                else if (args.Error != null)\n                {\n                    Console.WriteLine(&quot;Exception: {0}<br>{1}&quot;,\n                        args.Error.GetType().FullName,\n                        args.Error.Message);\n                }\n                else\n                {\n                    Console.WriteLine(&quot;The two dice are {0} and {1}.&quot;,\n                        args.Outputs[&quot;D1&quot;], args.Outputs[&quot;D2&quot;]);\n                }\n\n                syncEvent.Set();\n            };\n\n            string userState = &quot;CancelAsync Example&quot;;\n            invoker.InvokeAsync(userState);\n\n            Console.WriteLine(&quot;Waiting for the workflow to complete.&quot;);\n            Thread.Sleep(TimeSpan.FromSeconds(1));\n\n            Console.WriteLine(&quot;Attempting to cancel the workflow.&quot;);\n            invoker.CancelAsync(userState);\n\n            // Wait for the workflow to complete.\n            syncEvent.WaitOne();\n\n            Console.WriteLine(&quot;The workflow is either completed or cancelled.&quot;);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Activities_WorkflowInvoker_EndInvoke_System_IAsyncResult_\">\r\n    \r\n            <a id=\"System_Activities_WorkflowInvoker_EndInvoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndInvoke(IAsyncResult)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the results of a workflow that was invoked using one of the <span class=\"xref\">stem.Activities.WorkflowInvoker.BeginInvoke*</span> overloads.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IDictionary&lt;string,object&gt; EndInvoke (IAsyncResult result);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>result</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that references the <span class=\"xref\">stem.Activities.WorkflowInvoker.BeginInvoke*</span> operation that started the workflow.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </div>\r\n                  <p>A dictionary of the root activityâ€™s <a class=\"xref\" href=\"system.activities.outargument\" data-linktype=\"relative-path\">OutArgument</a> and <a class=\"xref\" href=\"system.activities.inoutargument\" data-linktype=\"relative-path\">InOutArgument</a> values keyed by argument name that represent the outputs of the workflow.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To be notified when the workflow is complete and retrieve the output parameters of the workflow, call EndInvoke from the <code>callback</code> method specified by <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_BeginInvoke_\" data-linktype=\"relative-path\">BeginInvoke</a>. If EndInvoke is called before the workflow completes, it blocks until the workflow completes.  </p>\n<p> This method returns the result of a workflow invoked asynchronously using the <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> asynchronous design pattern. <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/crdefault-md.md&quot; -->For more information, see<!--END INCLUDE --><a href=\"http://go.microsoft.com/fwlink/?LinkId=141764\" data-linktype=\"external\">Asynchronous Programming Overview</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example invokes a workflow consisting of a <code>LongRunningDiceRoll</code> activity. The <code>LongRunningDiceRoll</code> activity has two output arguments that represent the results of the dice roll operation. These are retrieved by calling EndInvoke. When the call to EndInvoke returns, each output argument is returned in the outputs dictionary, keyed by argument name.  </p>\n<pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#131\">    public sealed class LongRunningDiceRoll : Activity\n    {\n        public OutArgument&lt;int&gt; D1 { get; set; }\n        public OutArgument&lt;int&gt; D2 { get; set; }\n\n        public LongRunningDiceRoll()\n        {\n            this.Implementation = () =&gt; new Sequence\n            {\n                Activities =\n                {\n                    new WriteLine\n                    {\n                        Text = &quot;Rolling the dice for 5 seconds.&quot;\n                    },\n                    new Delay\n                    {\n                        Duration = TimeSpan.FromSeconds(5)\n                    },\n                    new DiceRoll\n                    {\n                        D1 = new OutArgument&lt;int&gt;(env =&gt; this.D1.Get(env)),\n                        D2 = new OutArgument&lt;int&gt;(env =&gt; this.D2.Get(env))\n                    }\n                }\n            };\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#32\">        static void BeginInvokeExample()\n        {\n            WorkflowInvoker invoker = new WorkflowInvoker(new LongRunningDiceRoll());\n\n            string userState = &quot;BeginInvoke example&quot;;\n            IAsyncResult result = invoker.BeginInvoke(new AsyncCallback(WorkflowCompletedCallback), userState);\n\n            // You can inspect result from the host to determine if the workflow\n            // is complete.\n            Console.WriteLine(&quot;result.IsCompleted: {0}&quot;, result.IsCompleted);\n\n            // The results of the workflow are retrieved by calling EndInvoke, which\n            // can be called from the callback or from the host. If called from the\n            // host, it blocks until the workflow completes. If a callback is not\n            // required, pass null for the callback parameter.\n            Console.WriteLine(&quot;Waiting for the workflow to complete.&quot;);\n            IDictionary&lt;string, object&gt; outputs = invoker.EndInvoke(result);\n\n            Console.WriteLine(&quot;The two dice are {0} and {1}.&quot;,\n                outputs[&quot;D1&quot;], outputs[&quot;D2&quot;]);\n        }\n\n        static void WorkflowCompletedCallback(IAsyncResult result)\n        {\n            Console.WriteLine(&quot;Workflow complete.&quot;);\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Activities_WorkflowInvoker_Invoke\">\r\n    \r\n            <a id=\"System_Activities_WorkflowInvoker_Invoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Invoke()</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a workflow synchronously using the workflow definition passed to the <span class=\"xref\">stem.Activities.WorkflowInvoker.#ctor*</span> constructor.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </div>\r\n                  <p>A dictionary of the root activityâ€™s <a class=\"xref\" href=\"system.activities.outargument\" data-linktype=\"relative-path\">OutArgument</a> and <a class=\"xref\" href=\"system.activities.inoutargument\" data-linktype=\"relative-path\">InOutArgument</a> values keyed by argument name that represent the outputs of the workflow.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_Invoke_\" data-linktype=\"relative-path\">Invoke</a> overloads that take a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example invokes a workflow consisting of a single <code>DiceRoll</code> activity. The <code>DiceRoll</code> activity has two output arguments that represent the results of the dice roll operation. When the call to <code>Invoke</code> returns, each output argument is returned in the outputs dictionary, keyed by argument name. The workflow is invoked twice, using the workflow definition passed into to the <code>WorkflowInvoker</code> constructor.  </p>\n<pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#130\">    public sealed class DiceRoll : CodeActivity\n    {\n        public OutArgument&lt;int&gt; D1 { get; set; }\n        public OutArgument&lt;int&gt; D2 { get; set; }\n\n        static Random r = new Random();\n\n        protected override void Execute(CodeActivityContext context)\n        {\n            D1.Set(context, r.Next(1, 7));\n            D2.Set(context, r.Next(1, 7));\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#31\">            WorkflowInvoker invoker = new WorkflowInvoker(new DiceRoll());\n\n            IDictionary&lt;string, object&gt; outputs =\n                invoker.Invoke();\n\n            Console.WriteLine(&quot;The two dice are {0} and {1}.&quot;,\n                outputs[&quot;D1&quot;], outputs[&quot;D2&quot;]);\n\n            outputs = invoker.Invoke();\n\n            Console.WriteLine(&quot;The next two dice are {0} and {1}.&quot;,\n                outputs[&quot;D1&quot;], outputs[&quot;D2&quot;]);\n</code></pre><p> If the workflow&#39;s root activity has no output arguments or they are not needed by the host, they can be disregarded. The following example invokes a workflow consisting of a single <a class=\"xref\" href=\"system.activities.statements.writeline\" data-linktype=\"relative-path\">WriteLine</a> activity that does not have any output arguments.  </p>\n<pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#2\">            Activity wf = new WriteLine\n            {\n                Text = &quot;Hello World.&quot;\n            };\n\n            WorkflowInvoker invoker = new WorkflowInvoker(wf);\n\n            invoker.Invoke();\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Activities_WorkflowInvoker_Invoke_System_Activities_Activity_\">\r\n    \r\n            <a id=\"System_Activities_WorkflowInvoker_Invoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Invoke(Activity)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a workflow synchronously using the specified workflow definition.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>workflow</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.activities.activity\" data-linktype=\"relative-path\">Activity</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The workflow definition of the workflow to invoke.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </div>\r\n                  <p>A dictionary of the root activityâ€™s <a class=\"xref\" href=\"system.activities.outargument\" data-linktype=\"relative-path\">OutArgument</a> and <a class=\"xref\" href=\"system.activities.inoutargument\" data-linktype=\"relative-path\">InOutArgument</a> values keyed by argument name that represent the outputs of the workflow.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_Invoke_\" data-linktype=\"relative-path\">Invoke</a> overloads that take a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example invokes a workflow consisting of a single <code>DiceRoll</code> activity. The <code>DiceRoll</code> activity has two output arguments that represent the results of the dice roll operation. When the call to <code>Invoke</code> returns, each output argument is returned in the outputs dictionary, keyed by argument name.  </p>\n<pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#130\">    public sealed class DiceRoll : CodeActivity\n    {\n        public OutArgument&lt;int&gt; D1 { get; set; }\n        public OutArgument&lt;int&gt; D2 { get; set; }\n\n        static Random r = new Random();\n\n        protected override void Execute(CodeActivityContext context)\n        {\n            D1.Set(context, r.Next(1, 7));\n            D2.Set(context, r.Next(1, 7));\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#30\">            IDictionary&lt;string, object&gt; outputs =\n                WorkflowInvoker.Invoke(new DiceRoll());\n\n            Console.WriteLine(&quot;The two dice are {0} and {1}.&quot;,\n                outputs[&quot;D1&quot;], outputs[&quot;D2&quot;]);\n</code></pre><p> If the workflow&#39;s root activity has no output arguments or they are not needed by the host, they can be disregarded. The following example invokes a workflow consisting of a single <a class=\"xref\" href=\"system.activities.statements.writeline\" data-linktype=\"relative-path\">WriteLine</a> activity that does not have any output arguments.  </p>\n<pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#1\">            Activity wf = new WriteLine\n            {\n                Text = &quot;Hello World.&quot;\n            };\n\n            WorkflowInvoker.Invoke(wf);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Activities_WorkflowInvoker_Invoke_System_Collections_Generic_IDictionary_System_String_System_Object__\">\r\n    \r\n            <a id=\"System_Activities_WorkflowInvoker_Invoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Invoke(IDictionary&lt;String,Object&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes the activity passed to the <span class=\"xref\">stem.Activities.WorkflowInvoker.#ctor*</span> constructor synchronously with the specified <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span> of input parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inputs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The dictionary of input parameters to the workflow, keyed by argument name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </div>\r\n                  <p>A dictionary of the root activityâ€™s <a class=\"xref\" href=\"system.activities.outargument\" data-linktype=\"relative-path\">OutArgument</a> and <a class=\"xref\" href=\"system.activities.inoutargument\" data-linktype=\"relative-path\">InOutArgument</a> values keyed by argument name that represent the outputs of the workflow.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_Invoke_\" data-linktype=\"relative-path\">Invoke</a> overloads that take a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example invokes a workflow consisting of a single <code>Divide</code> activity that has two input arguments and two output arguments. When the workflow is invoked, the <code>arguments</code> dictionary is passed which contains the values for each input argument, keyed by argument name. When the call to <code>Invoke</code> returns, each output argument is returned in the <code>outputs</code> dictionary, also keyed by argument name.  </p>\n<pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#120\">    public sealed class Divide : CodeActivity\n    {\n        [RequiredArgument]\n        public InArgument&lt;int&gt; Dividend { get; set; }\n\n        [RequiredArgument]\n        public InArgument&lt;int&gt; Divisor { get; set; }\n\n        public OutArgument&lt;int&gt; Remainder { get; set; }\n        public OutArgument&lt;int&gt; Result { get; set; }\n\n        protected override void Execute(CodeActivityContext context)\n        {\n            int quotient = Dividend.Get(context) / Divisor.Get(context);\n            int remainder = Dividend.Get(context) % Divisor.Get(context);\n\n            Result.Set(context, quotient);\n            Remainder.Set(context, remainder);\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#22\">            int dividend = 500;\n            int divisor = 36;\n\n            Dictionary&lt;string, object&gt; arguments = new Dictionary&lt;string, object&gt;();\n            arguments.Add(&quot;Dividend&quot;, dividend);\n            arguments.Add(&quot;Divisor&quot;, divisor);\n\n            WorkflowInvoker invoker = new WorkflowInvoker(new Divide());\n\n            IDictionary&lt;string, object&gt; outputs = invoker.Invoke(arguments);\n\n            Console.WriteLine(&quot;{0} / {1} = {2} Remainder {3}&quot;,\n                dividend, divisor, outputs[&quot;Result&quot;], outputs[&quot;Remainder&quot;]);\n</code></pre><p> If the workflow derives from <a class=\"xref\" href=\"system.activities.activitywithresult\" data-linktype=\"relative-path\">ActivityWithResult</a>, such as <code>CodeActivity&lt;TResult&gt;</code> or <code>Activity&lt;TResult&gt;</code>, and there are output arguments in addition to the well-defined <a class=\"xref\" href=\"system.activities.activity-1#System_Activities_Activity_1_Result_\" data-linktype=\"relative-path\">Result</a> output argument, a non-generic overload of <code>Invoke</code>, such as this one, must be used in order to retrieve the additional arguments. To do this, the workflow definition passed into the <code>WorkflowInvoker</code> constructor must be of type <a class=\"xref\" href=\"system.activities.activity\" data-linktype=\"relative-path\">Activity</a>. In this example the <code>Divide</code> activity derives from <code>CodeActivity&lt;int&gt;</code>, but is declared as <a class=\"xref\" href=\"system.activities.activity\" data-linktype=\"relative-path\">Activity</a> so that this overload of <code>Invoke</code>, which returns a dictionary of arguments instead of a single return value, is used.  </p>\n<pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#121\">    public sealed class Divide : CodeActivity&lt;int&gt;\n    {\n        public InArgument&lt;int&gt; Dividend { get; set; }\n        public InArgument&lt;int&gt; Divisor { get; set; }\n        public OutArgument&lt;int&gt; Remainder { get; set; }\n\n        protected override int Execute(CodeActivityContext context)\n        {\n            int quotient = Dividend.Get(context) / Divisor.Get(context);\n            int remainder = Dividend.Get(context) % Divisor.Get(context);\n\n            Remainder.Set(context, remainder);\n\n            return quotient;\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#23\">            int dividend = 500;\n            int divisor = 36;\n\n            Dictionary&lt;string, object&gt; arguments = new Dictionary&lt;string, object&gt;();\n            arguments.Add(&quot;Dividend&quot;, dividend);\n            arguments.Add(&quot;Divisor&quot;, divisor);\n\n            Activity wf = new Divide();\n\n            WorkflowInvoker invoker = new WorkflowInvoker(wf);\n\n            IDictionary&lt;string, object&gt; outputs = invoker.Invoke(arguments);\n\n            Console.WriteLine(&quot;{0} / {1} = {2} Remainder {3}&quot;,\n                dividend, divisor, outputs[&quot;Result&quot;], outputs[&quot;Remainder&quot;]);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Activities_WorkflowInvoker_Invoke_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_Activities_WorkflowInvoker_Invoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Invoke(TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a workflow synchronously with the specified time-out interval.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (TimeSpan timeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The interval in which the workflow must complete before it is aborted and a <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is thrown.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </div>\r\n                  <p>A dictionary of the root activityâ€™s <a class=\"xref\" href=\"system.activities.outargument\" data-linktype=\"relative-path\">OutArgument</a> and <a class=\"xref\" href=\"system.activities.inoutargument\" data-linktype=\"relative-path\">InOutArgument</a> values keyed by argument name that represent the outputs of the workflow.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is thrown.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example invokes a workflow that contains two <a class=\"xref\" href=\"system.activities.statements.writeline\" data-linktype=\"relative-path\">WriteLine</a> activities and a <a class=\"xref\" href=\"system.activities.statements.delay\" data-linktype=\"relative-path\">Delay</a> activity configured with a <a class=\"xref\" href=\"system.activities.statements.delay#System_Activities_Statements_Delay_Duration_\" data-linktype=\"relative-path\">Duration</a> of one minute. This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds. The first workflow completes successfully, but the second one does not and a <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is thrown and the following message is displayed.  </p>\n<pre><code class=\"lang-Output\">The operation did not complete within the allotted timeout of 00:00:30.   \nThe time allotted to this operation may have been a portion of a longer timeout.\n</code></pre><pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#51\">            Activity wf = new Sequence()\n            {\n                Activities = \n                {\n                    new WriteLine()\n                    {\n                        Text = &quot;Before the 1 minute delay.&quot;\n                    },\n                    new Delay()\n                    {\n                        Duration = TimeSpan.FromMinutes(1)\n                    },\n                    new WriteLine()\n                    {\n                        Text = &quot;After the 1 minute delay.&quot;\n                    }\n                }\n            };\n\n            WorkflowInvoker invoker = new WorkflowInvoker(wf);\n\n            // This workflow completes successfully.\n            invoker.Invoke(TimeSpan.FromMinutes(2));\n\n            // This workflow does not complete and a TimeoutException\n            // is thrown.\n            try\n            {\n                invoker.Invoke(TimeSpan.FromSeconds(30));\n            }\n            catch (TimeoutException ex)\n            {\n                Console.WriteLine(ex.Message);\n            }\n</code></pre><p> For an example of using <code>Invoke</code> with output arguments, see the overload of <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_Invoke_\" data-linktype=\"relative-path\">Invoke</a> with the same parameters as this overload without the time-out interval.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Activities_WorkflowInvoker_Invoke_System_Activities_Activity_System_Collections_Generic_IDictionary_System_String_System_Object__\">\r\n    \r\n            <a id=\"System_Activities_WorkflowInvoker_Invoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Invoke(Activity,IDictionary&lt;String,Object&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a workflow synchronously using the specified workflow definition and <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span> of input parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>workflow</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.activities.activity\" data-linktype=\"relative-path\">Activity</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The workflow definition of the workflow to invoke.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inputs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The dictionary of input parameters to the workflow, keyed by argument name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </div>\r\n                  <p>A dictionary of the root activityâ€™s <a class=\"xref\" href=\"system.activities.outargument\" data-linktype=\"relative-path\">OutArgument</a> and <a class=\"xref\" href=\"system.activities.inoutargument\" data-linktype=\"relative-path\">InOutArgument</a> values keyed by argument name that represent the outputs of the workflow.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_Invoke_\" data-linktype=\"relative-path\">Invoke</a> overloads that take a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example invokes a workflow consisting of a single <code>Divide</code> activity that has two input arguments and two output arguments. When the workflow is invoked, the <code>arguments</code> dictionary is passed which contains the values for each input argument, keyed by argument name. When the call to <code>Invoke</code> returns, each output argument is returned in the <code>outputs</code> dictionary, also keyed by argument name.  </p>\n<pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#120\">    public sealed class Divide : CodeActivity\n    {\n        [RequiredArgument]\n        public InArgument&lt;int&gt; Dividend { get; set; }\n\n        [RequiredArgument]\n        public InArgument&lt;int&gt; Divisor { get; set; }\n\n        public OutArgument&lt;int&gt; Remainder { get; set; }\n        public OutArgument&lt;int&gt; Result { get; set; }\n\n        protected override void Execute(CodeActivityContext context)\n        {\n            int quotient = Dividend.Get(context) / Divisor.Get(context);\n            int remainder = Dividend.Get(context) % Divisor.Get(context);\n\n            Result.Set(context, quotient);\n            Remainder.Set(context, remainder);\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#20\">            int dividend = 500;\n            int divisor = 36;\n\n            Dictionary&lt;string, object&gt; arguments = new Dictionary&lt;string, object&gt;();\n            arguments.Add(&quot;Dividend&quot;, dividend);\n            arguments.Add(&quot;Divisor&quot;, divisor);\n\n            IDictionary&lt;string, object&gt; outputs =\n                WorkflowInvoker.Invoke(new Divide(), arguments);\n\n            Console.WriteLine(&quot;{0} / {1} = {2} Remainder {3}&quot;,\n                dividend, divisor, outputs[&quot;Result&quot;], outputs[&quot;Remainder&quot;]);\n</code></pre><p> If the workflow derives from <a class=\"xref\" href=\"system.activities.activitywithresult\" data-linktype=\"relative-path\">ActivityWithResult</a>, such as <code>CodeActivity&lt;TResult&gt;</code> or <code>Activity&lt;TResult&gt;</code>, and there are output arguments in addition to the well-defined <a class=\"xref\" href=\"system.activities.activity-1#System_Activities_Activity_1_Result_\" data-linktype=\"relative-path\">Result</a> output argument, a non-generic overload of <code>Invoke</code>, such as this one, must be used in order to retrieve the additional arguments. To do this, the workflow definition passed into <code>Invoke</code> must be of type <a class=\"xref\" href=\"system.activities.activity\" data-linktype=\"relative-path\">Activity</a>. In this example the <code>Divide</code> activity derives from <code>CodeActivity&lt;int&gt;</code>, but is declared as <a class=\"xref\" href=\"system.activities.activity\" data-linktype=\"relative-path\">Activity</a> so that this overload of <code>Invoke</code>, which returns a dictionary of arguments instead of a single return value, is used.  </p>\n<pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#121\">    public sealed class Divide : CodeActivity&lt;int&gt;\n    {\n        public InArgument&lt;int&gt; Dividend { get; set; }\n        public InArgument&lt;int&gt; Divisor { get; set; }\n        public OutArgument&lt;int&gt; Remainder { get; set; }\n\n        protected override int Execute(CodeActivityContext context)\n        {\n            int quotient = Dividend.Get(context) / Divisor.Get(context);\n            int remainder = Dividend.Get(context) % Divisor.Get(context);\n\n            Remainder.Set(context, remainder);\n\n            return quotient;\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#21\">            int dividend = 500;\n            int divisor = 36;\n\n            Dictionary&lt;string, object&gt; arguments = new Dictionary&lt;string, object&gt;();\n            arguments.Add(&quot;Dividend&quot;, dividend);\n            arguments.Add(&quot;Divisor&quot;, divisor);\n\n            Activity wf = new Divide();\n\n            IDictionary&lt;string, object&gt; outputs =\n                WorkflowInvoker.Invoke(wf, arguments);\n\n            Console.WriteLine(&quot;{0} / {1} = {2} Remainder {3}&quot;,\n                dividend, divisor, outputs[&quot;Result&quot;], outputs[&quot;Remainder&quot;]);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Activities_WorkflowInvoker_Invoke_System_Activities_Activity_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_Activities_WorkflowInvoker_Invoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Invoke(Activity,TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a workflow synchronously using the specified workflow definition and time-out interval.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, TimeSpan timeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>workflow</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.activities.activity\" data-linktype=\"relative-path\">Activity</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The workflow definition of the workflow to invoke.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The interval in which the workflow must complete before it is aborted and a <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is thrown.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </div>\r\n                  <p>A dictionary of the root activityâ€™s <a class=\"xref\" href=\"system.activities.outargument\" data-linktype=\"relative-path\">OutArgument</a> and <a class=\"xref\" href=\"system.activities.inoutargument\" data-linktype=\"relative-path\">InOutArgument</a> values keyed by argument name that represent the outputs of the workflow.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is thrown.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example invokes a workflow that contains two <a class=\"xref\" href=\"system.activities.statements.writeline\" data-linktype=\"relative-path\">WriteLine</a> activities and a <a class=\"xref\" href=\"system.activities.statements.delay\" data-linktype=\"relative-path\">Delay</a> activity configured with a <a class=\"xref\" href=\"system.activities.statements.delay#System_Activities_Statements_Delay_Duration_\" data-linktype=\"relative-path\">Duration</a> of one minute. This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds. The first workflow completes successfully, but the second one does not and a <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is thrown.  </p>\n<pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#50\">            Activity wf = new Sequence()\n            {\n                Activities = \n                {\n                    new WriteLine()\n                    {\n                        Text = &quot;Before the 1 minute delay.&quot;\n                    },\n                    new Delay()\n                    {\n                        Duration = TimeSpan.FromMinutes(1)\n                    },\n                    new WriteLine()\n                    {\n                        Text = &quot;After the 1 minute delay.&quot;\n                    }\n                }\n            };\n\n            // This workflow completes successfully.\n            WorkflowInvoker.Invoke(wf, TimeSpan.FromMinutes(2));\n\n            // This workflow does not complete and a TimeoutException\n            // is thrown.\n            try\n            {\n                WorkflowInvoker.Invoke(wf, TimeSpan.FromSeconds(30));\n            }\n            catch (TimeoutException ex)\n            {\n                Console.WriteLine(ex.Message);\n            }\n</code></pre><p> For an example of using <code>Invoke</code> with output arguments, see the overload of <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_Invoke_\" data-linktype=\"relative-path\">Invoke</a> with the same parameters as this overload without the time-out interval.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Activities_WorkflowInvoker_Invoke_System_Collections_Generic_IDictionary_System_String_System_Object__System_TimeSpan_\">\r\n    \r\n            <a id=\"System_Activities_WorkflowInvoker_Invoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Invoke(IDictionary&lt;String,Object&gt;,TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes the activity passed to the <span class=\"xref\">stem.Activities.WorkflowInvoker.#ctor*</span> constructor synchronously with the specified <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span> of input parameters and the specified time-out interval.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inputs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The dictionary of input parameters to the workflow, keyed by argument name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The interval in which the workflow must complete before it is aborted and a <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is thrown.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </div>\r\n                  <p>A dictionary of the root activityâ€™s <a class=\"xref\" href=\"system.activities.outargument\" data-linktype=\"relative-path\">OutArgument</a> and <a class=\"xref\" href=\"system.activities.inoutargument\" data-linktype=\"relative-path\">InOutArgument</a> values keyed by argument name that represent the outputs of the workflow.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is thrown.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example invokes a workflow that contains two <a class=\"xref\" href=\"system.activities.statements.writeline\" data-linktype=\"relative-path\">WriteLine</a> activities and a <a class=\"xref\" href=\"system.activities.statements.delay\" data-linktype=\"relative-path\">Delay</a> activity configured with a <a class=\"xref\" href=\"system.activities.statements.delay#System_Activities_Statements_Delay_Duration_\" data-linktype=\"relative-path\">Duration</a> of one minute. This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds. The first workflow completes successfully, but the second one does not and a <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is thrown and the following message is displayed.  </p>\n<p><codecontentplaceholder>0</codecontentplaceholder>  </p>\n<pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#51\">            Activity wf = new Sequence()\n            {\n                Activities = \n                {\n                    new WriteLine()\n                    {\n                        Text = &quot;Before the 1 minute delay.&quot;\n                    },\n                    new Delay()\n                    {\n                        Duration = TimeSpan.FromMinutes(1)\n                    },\n                    new WriteLine()\n                    {\n                        Text = &quot;After the 1 minute delay.&quot;\n                    }\n                }\n            };\n\n            WorkflowInvoker invoker = new WorkflowInvoker(wf);\n\n            // This workflow completes successfully.\n            invoker.Invoke(TimeSpan.FromMinutes(2));\n\n            // This workflow does not complete and a TimeoutException\n            // is thrown.\n            try\n            {\n                invoker.Invoke(TimeSpan.FromSeconds(30));\n            }\n            catch (TimeoutException ex)\n            {\n                Console.WriteLine(ex.Message);\n            }\n</code></pre><p> For an example of using <code>Invoke</code> with input and output arguments, see the overload of <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_Invoke_\" data-linktype=\"relative-path\">Invoke</a> with the same parameters as this overload without the time-out interval.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Activities_WorkflowInvoker_Invoke_System_Activities_Activity_System_Collections_Generic_IDictionary_System_String_System_Object__System_TimeSpan_\">\r\n    \r\n            <a id=\"System_Activities_WorkflowInvoker_Invoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Invoke(Activity,IDictionary&lt;String,Object&gt;,TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a workflow synchronously using the specified workflow definition, <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span> of input parameters, and time-out interval.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>workflow</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.activities.activity\" data-linktype=\"relative-path\">Activity</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The workflow definition of the workflow to invoke.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inputs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The dictionary of input parameters to the workflow, keyed by argument name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The interval in which the workflow must complete before it is aborted and a <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is thrown.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </div>\r\n                  <p>A dictionary of the root activityâ€™s <a class=\"xref\" href=\"system.activities.outargument\" data-linktype=\"relative-path\">OutArgument</a> and <a class=\"xref\" href=\"system.activities.inoutargument\" data-linktype=\"relative-path\">InOutArgument</a> values keyed by argument name that represent the outputs of the workflow.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is thrown.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example invokes a workflow that contains two <a class=\"xref\" href=\"system.activities.statements.writeline\" data-linktype=\"relative-path\">WriteLine</a> activities and a <a class=\"xref\" href=\"system.activities.statements.delay\" data-linktype=\"relative-path\">Delay</a> activity configured with a <a class=\"xref\" href=\"system.activities.statements.delay#System_Activities_Statements_Delay_Duration_\" data-linktype=\"relative-path\">Duration</a> of one minute. This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds. The first workflow completes successfully, but the second one does not and a <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is thrown.  </p>\n<pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#50\">            Activity wf = new Sequence()\n            {\n                Activities = \n                {\n                    new WriteLine()\n                    {\n                        Text = &quot;Before the 1 minute delay.&quot;\n                    },\n                    new Delay()\n                    {\n                        Duration = TimeSpan.FromMinutes(1)\n                    },\n                    new WriteLine()\n                    {\n                        Text = &quot;After the 1 minute delay.&quot;\n                    }\n                }\n            };\n\n            // This workflow completes successfully.\n            WorkflowInvoker.Invoke(wf, TimeSpan.FromMinutes(2));\n\n            // This workflow does not complete and a TimeoutException\n            // is thrown.\n            try\n            {\n                WorkflowInvoker.Invoke(wf, TimeSpan.FromSeconds(30));\n            }\n            catch (TimeoutException ex)\n            {\n                Console.WriteLine(ex.Message);\n            }\n</code></pre><p> For an example of using <code>Invoke</code> with input and output arguments, see the overload of <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_Invoke_\" data-linktype=\"relative-path\">Invoke</a> with the same parameters as this overload without the time-out interval.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Activities_WorkflowInvoker_Invoke__1_System_Activities_Activity___0__\">\r\n    \r\n            <a id=\"System_Activities_WorkflowInvoker_Invoke_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Invoke&lt;TResult&gt;(Activity&lt;TResult&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a workflow synchronously using the workflow definition passed to the <span class=\"xref\">stem.Activities.WorkflowInvoker.#ctor*</span> constructor.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>workflow</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.activities.activity-1\" data-linktype=\"relative-path\">Activity<tresult></tresult></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The workflow definition of the workflow to invoke. The workflow definition needs to derive from <a class=\"xref\" href=\"system.activities.activitywithresult\" data-linktype=\"relative-path\">ActivityWithResult</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TResult</span></div>\r\n                  </div>\r\n                  <p>A value of type TResult with the result of the execution of the activity.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_Invoke_\" data-linktype=\"relative-path\">Invoke</a> overloads that take a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example invokes a workflow consisting of a single <code>Add</code> activity that has two input arguments and since it derives from <code>CodeActivity&lt;int&gt;</code> it has one well-defined <a class=\"xref\" href=\"system.activities.activity-1#System_Activities_Activity_1_Result_\" data-linktype=\"relative-path\">Result</a> output argument. When the workflow is invoked, the <code>arguments</code> dictionary is passed which contains the values for each input argument, keyed by argument name. When the call to <code>Invoke</code> returns, the value of the <a class=\"xref\" href=\"system.activities.activity-1#System_Activities_Activity_1_Result_\" data-linktype=\"relative-path\">Result</a> output argument is returned. This code example is based off of the <a href=\"../Topic/Using%20the%20WorkflowInvoker%20Class.md\" data-linktype=\"relative-path\">Using the WorkflowInvoker Class</a> sample.  </p>\n<pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#110\">    public sealed class Add : CodeActivity&lt;int&gt;\n    {\n        public InArgument&lt;int&gt; X { get; set; }\n        public InArgument&lt;int&gt; Y { get; set; }\n\n        protected override int Execute(CodeActivityContext context)\n        {\n            int x = X.Get(context);\n            int y = Y.Get(context);\n\n            return x + y;\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#10\">            int x = 1;\n            int y = 2;\n\n            Dictionary&lt;string, object&gt; arguments = new Dictionary&lt;string, object&gt;();\n            arguments.Add(&quot;X&quot;, x);\n            arguments.Add(&quot;Y&quot;, y);\n\n            Console.WriteLine(&quot;Invoking Add.&quot;);\n\n            int result = WorkflowInvoker.Invoke(new Add(), arguments);\n\n            Console.WriteLine(&quot;{0} + {1} = {2}&quot;, x, y, result);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Activities_WorkflowInvoker_Invoke__1_System_Activities_Activity___0__System_Collections_Generic_IDictionary_System_String_System_Object__\">\r\n    \r\n            <a id=\"System_Activities_WorkflowInvoker_Invoke_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Invoke&lt;TResult&gt;(Activity&lt;TResult&gt;,IDictionary&lt;String,Object&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a workflow synchronously using the specified workflow definition and <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span> of input parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>workflow</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.activities.activity-1\" data-linktype=\"relative-path\">Activity<tresult></tresult></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The workflow definition of the workflow to invoke.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inputs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The dictionary of input parameters to the workflow, keyed by argument name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TResult</span></div>\r\n                  </div>\r\n                  <p>A value of type TResult with the result of the execution of the activity.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. To configure a time-out interval in which the workflow must complete, use one of the <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_Invoke_\" data-linktype=\"relative-path\">Invoke</a> overloads that take a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example invokes a workflow consisting of a single <code>Add</code> activity that has two input arguments and since it derives from <code>CodeActivity&lt;int&gt;</code> it has one well-defined <a class=\"xref\" href=\"system.activities.activity-1#System_Activities_Activity_1_Result_\" data-linktype=\"relative-path\">Result</a> output argument. When the workflow is invoked, the <code>arguments</code> dictionary is passed which contains the values for each input argument, keyed by argument name. When the call to <code>Invoke</code> returns, the value of the <a class=\"xref\" href=\"system.activities.activity-1#System_Activities_Activity_1_Result_\" data-linktype=\"relative-path\">Result</a> output argument is returned. This code example is based off of the <a href=\"../Topic/Using%20the%20WorkflowInvoker%20Class.md\" data-linktype=\"relative-path\">Using the WorkflowInvoker Class</a> sample.  </p>\n<pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#110\">    public sealed class Add : CodeActivity&lt;int&gt;\n    {\n        public InArgument&lt;int&gt; X { get; set; }\n        public InArgument&lt;int&gt; Y { get; set; }\n\n        protected override int Execute(CodeActivityContext context)\n        {\n            int x = X.Get(context);\n            int y = Y.Get(context);\n\n            return x + y;\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#10\">            int x = 1;\n            int y = 2;\n\n            Dictionary&lt;string, object&gt; arguments = new Dictionary&lt;string, object&gt;();\n            arguments.Add(&quot;X&quot;, x);\n            arguments.Add(&quot;Y&quot;, y);\n\n            Console.WriteLine(&quot;Invoking Add.&quot;);\n\n            int result = WorkflowInvoker.Invoke(new Add(), arguments);\n\n            Console.WriteLine(&quot;{0} + {1} = {2}&quot;, x, y, result);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Activities_WorkflowInvoker_Invoke__1_System_Activities_Activity___0__System_Collections_Generic_IDictionary_System_String_System_Object__System_TimeSpan_\">\r\n    \r\n            <a id=\"System_Activities_WorkflowInvoker_Invoke_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Invoke&lt;TResult&gt;(Activity&lt;TResult&gt;,IDictionary&lt;String,Object&gt;,TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a workflow synchronously using the specified workflow definition, <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span> of input parameters, and time-out interval.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>workflow</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.activities.activity-1\" data-linktype=\"relative-path\">Activity<tresult></tresult></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The workflow definition of the workflow to invoke.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inputs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The dictionary of input parameters to the workflow, keyed by argument name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The interval in which the workflow must complete before it is aborted and a <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is thrown.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TResult</span></div>\r\n                  </div>\r\n                  <p>A value of type TResult with the result of the execution of the activity.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is thrown.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example invokes a workflow consisting of a single <code>Add</code> activity that has two input arguments and since it derives from <code>CodeActivity&lt;int&gt;</code> it has one well-defined <a class=\"xref\" href=\"system.activities.activity-1#System_Activities_Activity_1_Result_\" data-linktype=\"relative-path\">Result</a> output argument. When the workflow is invoked, the <code>arguments</code> dictionary is passed which contains the values for each input argument, keyed by argument name. When the call to <code>Invoke</code> returns, the value of the <a class=\"xref\" href=\"system.activities.activity-1#System_Activities_Activity_1_Result_\" data-linktype=\"relative-path\">Result</a> output argument is returned. This code example is based off of the <a href=\"../Topic/Using%20the%20WorkflowInvoker%20Class.md\" data-linktype=\"relative-path\">Using the WorkflowInvoker Class</a> sample.  </p>\n<pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#110\">    public sealed class Add : CodeActivity&lt;int&gt;\n    {\n        public InArgument&lt;int&gt; X { get; set; }\n        public InArgument&lt;int&gt; Y { get; set; }\n\n        protected override int Execute(CodeActivityContext context)\n        {\n            int x = X.Get(context);\n            int y = Y.Get(context);\n\n            return x + y;\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#10\">            int x = 1;\n            int y = 2;\n\n            Dictionary&lt;string, object&gt; arguments = new Dictionary&lt;string, object&gt;();\n            arguments.Add(&quot;X&quot;, x);\n            arguments.Add(&quot;Y&quot;, y);\n\n            Console.WriteLine(&quot;Invoking Add.&quot;);\n\n            int result = WorkflowInvoker.Invoke(new Add(), arguments);\n\n            Console.WriteLine(&quot;{0} + {1} = {2}&quot;, x, y, result);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Activities_WorkflowInvoker_Invoke__1_System_Activities_Activity___0__System_Collections_Generic_IDictionary_System_String_System_Object__System_Collections_Generic_IDictionary_System_String_System_Object___System_TimeSpan_\">\r\n    \r\n            <a id=\"System_Activities_WorkflowInvoker_Invoke_TResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Invoke&lt;TResult&gt;(Activity&lt;TResult&gt;,IDictionary&lt;String,Object&gt;,IDictionary&lt;String,Object&gt;,TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a workflow synchronously using the specified workflow definition, <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span> of input parameters, <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span> of additional output parameters, and time-out interval.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, out System.Collections.Generic.IDictionary&lt;string,object&gt; additionalOutputs, TimeSpan timeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>workflow</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.activities.activity-1\" data-linktype=\"relative-path\">Activity<tresult></tresult></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The workflow definition of the workflow to invoke.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inputs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The dictionary of input parameters to the workflow, keyed by argument name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>additionalOutputs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The dictionary of additional output parameters of the workflow, keyed by argument name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The interval in which the workflow must complete before it is aborted and a <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is thrown.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TResult</span></div>\r\n                  </div>\r\n                  <p>A value of type TResult with the result of the execution of the activity.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method blocks until the workflow has completed, including idle time. All workflow execution is guaranteed to execute on the invoking thread. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is thrown.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example invokes a workflow consisting of a single <code>Add</code> activity that has two input arguments and since it derives from <code>CodeActivity&lt;int&gt;</code> it has one well-defined <a class=\"xref\" href=\"system.activities.activity-1#System_Activities_Activity_1_Result_\" data-linktype=\"relative-path\">Result</a> output argument. When the workflow is invoked, the <code>arguments</code> dictionary is passed which contains the values for each input argument, keyed by argument name. When the call to <code>Invoke</code> returns, the value of the <a class=\"xref\" href=\"system.activities.activity-1#System_Activities_Activity_1_Result_\" data-linktype=\"relative-path\">Result</a> output argument is returned. This code example is based off of the <a href=\"../Topic/Using%20the%20WorkflowInvoker%20Class.md\" data-linktype=\"relative-path\">Using the WorkflowInvoker Class</a> sample.  </p>\n<pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#110\">    public sealed class Add : CodeActivity&lt;int&gt;\n    {\n        public InArgument&lt;int&gt; X { get; set; }\n        public InArgument&lt;int&gt; Y { get; set; }\n\n        protected override int Execute(CodeActivityContext context)\n        {\n            int x = X.Get(context);\n            int y = Y.Get(context);\n\n            return x + y;\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#10\">            int x = 1;\n            int y = 2;\n\n            Dictionary&lt;string, object&gt; arguments = new Dictionary&lt;string, object&gt;();\n            arguments.Add(&quot;X&quot;, x);\n            arguments.Add(&quot;Y&quot;, y);\n\n            Console.WriteLine(&quot;Invoking Add.&quot;);\n\n            int result = WorkflowInvoker.Invoke(new Add(), arguments);\n\n            Console.WriteLine(&quot;{0} + {1} = {2}&quot;, x, y, result);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Activities_WorkflowInvoker_InvokeAsync\">\r\n    \r\n            <a id=\"System_Activities_WorkflowInvoker_InvokeAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InvokeAsync()</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a workflow asynchronously.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void InvokeAsync ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To be notified when the workflow is complete, handle <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_InvokeCompleted\" data-linktype=\"relative-path\">InvokeCompleted</a>. To configure a time-out interval in which the workflow must complete, use one of the <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_InvokeAsync_\" data-linktype=\"relative-path\">InvokeAsync</a> overloads that take a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.  </p>\n<p> This method invokes a workflow asynchronously using the event-based asynchronous design pattern. <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/crdefault-md.md&quot; -->For more information, see<!--END INCLUDE --><a href=\"http://go.microsoft.com/fwlink/?LinkId=141765\" data-linktype=\"external\">Event-based Asynchronous Pattern Overview</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example invokes a workflow consisting of a <code>LongRunningDiceRoll</code> activity. The <code>LongRunningDiceRoll</code> activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_InvokeCompleted\" data-linktype=\"relative-path\">InvokeCompleted</a> handler.  </p>\n<pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#131\">    public sealed class LongRunningDiceRoll : Activity\n    {\n        public OutArgument&lt;int&gt; D1 { get; set; }\n        public OutArgument&lt;int&gt; D2 { get; set; }\n\n        public LongRunningDiceRoll()\n        {\n            this.Implementation = () =&gt; new Sequence\n            {\n                Activities =\n                {\n                    new WriteLine\n                    {\n                        Text = &quot;Rolling the dice for 5 seconds.&quot;\n                    },\n                    new Delay\n                    {\n                        Duration = TimeSpan.FromSeconds(5)\n                    },\n                    new DiceRoll\n                    {\n                        D1 = new OutArgument&lt;int&gt;(env =&gt; this.D1.Get(env)),\n                        D2 = new OutArgument&lt;int&gt;(env =&gt; this.D2.Get(env))\n                    }\n                }\n            };\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#33\">            AutoResetEvent syncEvent = new AutoResetEvent(false);\n\n            WorkflowInvoker invoker = new WorkflowInvoker(new LongRunningDiceRoll());\n\n            invoker.InvokeCompleted += delegate(object sender, InvokeCompletedEventArgs args)\n            {\n                if (args.Cancelled == true)\n                {\n                    Console.WriteLine(&quot;Workflow was cancelled.&quot;);\n                }\n                else if (args.Error != null)\n                {\n                    Console.WriteLine(&quot;Exception: {0}<br>{1}&quot;,\n                        args.Error.GetType().FullName,\n                        args.Error.Message);\n                }\n                else\n                {\n                    Console.WriteLine(&quot;The two dice are {0} and {1}.&quot;,\n                        args.Outputs[&quot;D1&quot;], args.Outputs[&quot;D2&quot;]);\n                }\n\n                syncEvent.Set();\n            };\n\n            invoker.InvokeAsync(&quot;InvokeAsync Example&quot;);\n\n            Console.WriteLine(&quot;Waiting for the workflow to complete.&quot;);\n\n            // Wait for the workflow to complete.\n            syncEvent.WaitOne();\n\n            Console.WriteLine(&quot;The workflow is complete.&quot;);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Activities_WorkflowInvoker_InvokeAsync_System_Collections_Generic_IDictionary_System_String_System_Object__\">\r\n    \r\n            <a id=\"System_Activities_WorkflowInvoker_InvokeAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InvokeAsync(IDictionary&lt;String,Object&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a workflow asynchronously using the specified <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span> of input parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inputs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The dictionary of input parameters to the workflow, keyed by argument name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To be notified when the workflow is complete, handle <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_InvokeCompleted\" data-linktype=\"relative-path\">InvokeCompleted</a>. To configure a time-out interval in which the workflow must complete, use one of the <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_InvokeAsync_\" data-linktype=\"relative-path\">InvokeAsync</a> overloads that take a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.  </p>\n<p> This method invokes a workflow asynchronously using the event-based asynchronous design pattern. <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/crdefault-md.md&quot; -->For more information, see<!--END INCLUDE --><a href=\"http://go.microsoft.com/fwlink/?LinkId=141765\" data-linktype=\"external\">Event-based Asynchronous Pattern Overview</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example invokes a workflow consisting of a <code>LongRunningDiceRoll</code> activity. The <code>LongRunningDiceRoll</code> activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_InvokeCompleted\" data-linktype=\"relative-path\">InvokeCompleted</a> handler.  </p>\n<pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#131\">    public sealed class LongRunningDiceRoll : Activity\n    {\n        public OutArgument&lt;int&gt; D1 { get; set; }\n        public OutArgument&lt;int&gt; D2 { get; set; }\n\n        public LongRunningDiceRoll()\n        {\n            this.Implementation = () =&gt; new Sequence\n            {\n                Activities =\n                {\n                    new WriteLine\n                    {\n                        Text = &quot;Rolling the dice for 5 seconds.&quot;\n                    },\n                    new Delay\n                    {\n                        Duration = TimeSpan.FromSeconds(5)\n                    },\n                    new DiceRoll\n                    {\n                        D1 = new OutArgument&lt;int&gt;(env =&gt; this.D1.Get(env)),\n                        D2 = new OutArgument&lt;int&gt;(env =&gt; this.D2.Get(env))\n                    }\n                }\n            };\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#33\">            AutoResetEvent syncEvent = new AutoResetEvent(false);\n\n            WorkflowInvoker invoker = new WorkflowInvoker(new LongRunningDiceRoll());\n\n            invoker.InvokeCompleted += delegate(object sender, InvokeCompletedEventArgs args)\n            {\n                if (args.Cancelled == true)\n                {\n                    Console.WriteLine(&quot;Workflow was cancelled.&quot;);\n                }\n                else if (args.Error != null)\n                {\n                    Console.WriteLine(&quot;Exception: {0}<br>{1}&quot;,\n                        args.Error.GetType().FullName,\n                        args.Error.Message);\n                }\n                else\n                {\n                    Console.WriteLine(&quot;The two dice are {0} and {1}.&quot;,\n                        args.Outputs[&quot;D1&quot;], args.Outputs[&quot;D2&quot;]);\n                }\n\n                syncEvent.Set();\n            };\n\n            invoker.InvokeAsync(&quot;InvokeAsync Example&quot;);\n\n            Console.WriteLine(&quot;Waiting for the workflow to complete.&quot;);\n\n            // Wait for the workflow to complete.\n            syncEvent.WaitOne();\n\n            Console.WriteLine(&quot;The workflow is complete.&quot;);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Activities_WorkflowInvoker_InvokeAsync_System_Object_\">\r\n    \r\n            <a id=\"System_Activities_WorkflowInvoker_InvokeAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InvokeAsync(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a workflow asynchronously using the specified unique identifier.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void InvokeAsync (object userState);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>userState</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>userState</code> parameter must be unique across all currently running <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_InvokeAsync_\" data-linktype=\"relative-path\">InvokeAsync</a> operations for the current activity. If the <code>userState</code> parameter is not unique, an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> is thrown. <code>userState</code> is used to identify the workflow in <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_InvokeCompleted\" data-linktype=\"relative-path\">InvokeCompleted</a>, and to cancel the workflow using <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_CancelAsync_\" data-linktype=\"relative-path\">CancelAsync</a>.  </p>\n<p> To be notified when the workflow is complete, handle <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_InvokeCompleted\" data-linktype=\"relative-path\">InvokeCompleted</a>. To configure a time-out interval in which the workflow must complete, use one of the <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_InvokeAsync_\" data-linktype=\"relative-path\">InvokeAsync</a> overloads that take a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.  </p>\n<p> This method invokes a workflow asynchronously using the event-based asynchronous design pattern. <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/crdefault-md.md&quot; -->For more information, see<!--END INCLUDE --><a href=\"http://go.microsoft.com/fwlink/?LinkId=141765\" data-linktype=\"external\">Event-based Asynchronous Pattern Overview</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example invokes a workflow consisting of a <code>LongRunningDiceRoll</code> activity. The <code>LongRunningDiceRoll</code> activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_InvokeCompleted\" data-linktype=\"relative-path\">InvokeCompleted</a> handler.  </p>\n<pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#131\">    public sealed class LongRunningDiceRoll : Activity\n    {\n        public OutArgument&lt;int&gt; D1 { get; set; }\n        public OutArgument&lt;int&gt; D2 { get; set; }\n\n        public LongRunningDiceRoll()\n        {\n            this.Implementation = () =&gt; new Sequence\n            {\n                Activities =\n                {\n                    new WriteLine\n                    {\n                        Text = &quot;Rolling the dice for 5 seconds.&quot;\n                    },\n                    new Delay\n                    {\n                        Duration = TimeSpan.FromSeconds(5)\n                    },\n                    new DiceRoll\n                    {\n                        D1 = new OutArgument&lt;int&gt;(env =&gt; this.D1.Get(env)),\n                        D2 = new OutArgument&lt;int&gt;(env =&gt; this.D2.Get(env))\n                    }\n                }\n            };\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#33\">            AutoResetEvent syncEvent = new AutoResetEvent(false);\n\n            WorkflowInvoker invoker = new WorkflowInvoker(new LongRunningDiceRoll());\n\n            invoker.InvokeCompleted += delegate(object sender, InvokeCompletedEventArgs args)\n            {\n                if (args.Cancelled == true)\n                {\n                    Console.WriteLine(&quot;Workflow was cancelled.&quot;);\n                }\n                else if (args.Error != null)\n                {\n                    Console.WriteLine(&quot;Exception: {0}<br>{1}&quot;,\n                        args.Error.GetType().FullName,\n                        args.Error.Message);\n                }\n                else\n                {\n                    Console.WriteLine(&quot;The two dice are {0} and {1}.&quot;,\n                        args.Outputs[&quot;D1&quot;], args.Outputs[&quot;D2&quot;]);\n                }\n\n                syncEvent.Set();\n            };\n\n            invoker.InvokeAsync(&quot;InvokeAsync Example&quot;);\n\n            Console.WriteLine(&quot;Waiting for the workflow to complete.&quot;);\n\n            // Wait for the workflow to complete.\n            syncEvent.WaitOne();\n\n            Console.WriteLine(&quot;The workflow is complete.&quot;);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Activities_WorkflowInvoker_InvokeAsync_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_Activities_WorkflowInvoker_InvokeAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InvokeAsync(TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a workflow asynchronously with the specified time-out interval.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void InvokeAsync (TimeSpan timeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The interval in which the workflow must complete before it is aborted and a <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is thrown.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To be notified when the workflow is complete, handle <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_InvokeCompleted\" data-linktype=\"relative-path\">InvokeCompleted</a>. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is thrown.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.  </p>\n</div>\n<p> This method invokes a workflow asynchronously using the event-based asynchronous design pattern. <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/crdefault-md.md&quot; -->For more information, see<!--END INCLUDE --><a href=\"http://go.microsoft.com/fwlink/?LinkId=141765\" data-linktype=\"external\">Event-based Asynchronous Pattern Overview</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example invokes a workflow consisting of a <code>LongRunningDiceRoll</code> activity. The <code>LongRunningDiceRoll</code> activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_InvokeCompleted\" data-linktype=\"relative-path\">InvokeCompleted</a> handler.  </p>\n<pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#131\">    public sealed class LongRunningDiceRoll : Activity\n    {\n        public OutArgument&lt;int&gt; D1 { get; set; }\n        public OutArgument&lt;int&gt; D2 { get; set; }\n\n        public LongRunningDiceRoll()\n        {\n            this.Implementation = () =&gt; new Sequence\n            {\n                Activities =\n                {\n                    new WriteLine\n                    {\n                        Text = &quot;Rolling the dice for 5 seconds.&quot;\n                    },\n                    new Delay\n                    {\n                        Duration = TimeSpan.FromSeconds(5)\n                    },\n                    new DiceRoll\n                    {\n                        D1 = new OutArgument&lt;int&gt;(env =&gt; this.D1.Get(env)),\n                        D2 = new OutArgument&lt;int&gt;(env =&gt; this.D2.Get(env))\n                    }\n                }\n            };\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#33\">            AutoResetEvent syncEvent = new AutoResetEvent(false);\n\n            WorkflowInvoker invoker = new WorkflowInvoker(new LongRunningDiceRoll());\n\n            invoker.InvokeCompleted += delegate(object sender, InvokeCompletedEventArgs args)\n            {\n                if (args.Cancelled == true)\n                {\n                    Console.WriteLine(&quot;Workflow was cancelled.&quot;);\n                }\n                else if (args.Error != null)\n                {\n                    Console.WriteLine(&quot;Exception: {0}<br>{1}&quot;,\n                        args.Error.GetType().FullName,\n                        args.Error.Message);\n                }\n                else\n                {\n                    Console.WriteLine(&quot;The two dice are {0} and {1}.&quot;,\n                        args.Outputs[&quot;D1&quot;], args.Outputs[&quot;D2&quot;]);\n                }\n\n                syncEvent.Set();\n            };\n\n            invoker.InvokeAsync(&quot;InvokeAsync Example&quot;);\n\n            Console.WriteLine(&quot;Waiting for the workflow to complete.&quot;);\n\n            // Wait for the workflow to complete.\n            syncEvent.WaitOne();\n\n            Console.WriteLine(&quot;The workflow is complete.&quot;);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Activities_WorkflowInvoker_InvokeAsync_System_Collections_Generic_IDictionary_System_String_System_Object__System_Object_\">\r\n    \r\n            <a id=\"System_Activities_WorkflowInvoker_InvokeAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InvokeAsync(IDictionary&lt;String,Object&gt;,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a workflow asynchronously using the specified <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span> of input parameters and a unique identifier.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, object userState);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inputs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The dictionary of input parameters to the workflow, keyed by argument name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>userState</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>userState</code> parameter must be unique across all currently running <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_InvokeAsync_\" data-linktype=\"relative-path\">InvokeAsync</a> operations for the current activity. If <code>userState</code> is not unique, an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> is thrown. <code>userState</code> is used to identify the workflow in <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_InvokeCompleted\" data-linktype=\"relative-path\">InvokeCompleted</a>, and to cancel the workflow using <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_CancelAsync_\" data-linktype=\"relative-path\">CancelAsync</a>.  </p>\n<p> To be notified when the workflow is complete, handle <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_InvokeCompleted\" data-linktype=\"relative-path\">InvokeCompleted</a>. To configure a time-out interval in which the workflow must complete, use one of the <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_InvokeAsync_\" data-linktype=\"relative-path\">InvokeAsync</a> overloads that take a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.  </p>\n<p> This method invokes a workflow asynchronously using the event-based asynchronous design pattern. <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/crdefault-md.md&quot; -->For more information, see<!--END INCLUDE --><a href=\"http://go.microsoft.com/fwlink/?LinkId=141765\" data-linktype=\"external\">Event-based Asynchronous Pattern Overview</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example invokes a workflow consisting of a <code>LongRunningDiceRoll</code> activity. The <code>LongRunningDiceRoll</code> activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_InvokeCompleted\" data-linktype=\"relative-path\">InvokeCompleted</a> handler.  </p>\n<pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#131\">    public sealed class LongRunningDiceRoll : Activity\n    {\n        public OutArgument&lt;int&gt; D1 { get; set; }\n        public OutArgument&lt;int&gt; D2 { get; set; }\n\n        public LongRunningDiceRoll()\n        {\n            this.Implementation = () =&gt; new Sequence\n            {\n                Activities =\n                {\n                    new WriteLine\n                    {\n                        Text = &quot;Rolling the dice for 5 seconds.&quot;\n                    },\n                    new Delay\n                    {\n                        Duration = TimeSpan.FromSeconds(5)\n                    },\n                    new DiceRoll\n                    {\n                        D1 = new OutArgument&lt;int&gt;(env =&gt; this.D1.Get(env)),\n                        D2 = new OutArgument&lt;int&gt;(env =&gt; this.D2.Get(env))\n                    }\n                }\n            };\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#33\">            AutoResetEvent syncEvent = new AutoResetEvent(false);\n\n            WorkflowInvoker invoker = new WorkflowInvoker(new LongRunningDiceRoll());\n\n            invoker.InvokeCompleted += delegate(object sender, InvokeCompletedEventArgs args)\n            {\n                if (args.Cancelled == true)\n                {\n                    Console.WriteLine(&quot;Workflow was cancelled.&quot;);\n                }\n                else if (args.Error != null)\n                {\n                    Console.WriteLine(&quot;Exception: {0}<br>{1}&quot;,\n                        args.Error.GetType().FullName,\n                        args.Error.Message);\n                }\n                else\n                {\n                    Console.WriteLine(&quot;The two dice are {0} and {1}.&quot;,\n                        args.Outputs[&quot;D1&quot;], args.Outputs[&quot;D2&quot;]);\n                }\n\n                syncEvent.Set();\n            };\n\n            invoker.InvokeAsync(&quot;InvokeAsync Example&quot;);\n\n            Console.WriteLine(&quot;Waiting for the workflow to complete.&quot;);\n\n            // Wait for the workflow to complete.\n            syncEvent.WaitOne();\n\n            Console.WriteLine(&quot;The workflow is complete.&quot;);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Activities_WorkflowInvoker_InvokeAsync_System_Collections_Generic_IDictionary_System_String_System_Object__System_TimeSpan_\">\r\n    \r\n            <a id=\"System_Activities_WorkflowInvoker_InvokeAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InvokeAsync(IDictionary&lt;String,Object&gt;,TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a workflow asynchronously with the specified <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span> of input parameters and the specified time-out interval.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inputs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The dictionary of input parameters to the workflow, keyed by argument name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The interval in which the workflow must complete before it is aborted and a <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is thrown.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To be notified when the workflow is complete, handle <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_InvokeCompleted\" data-linktype=\"relative-path\">InvokeCompleted</a>. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is thrown.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.  </p>\n</div>\n<p> This method invokes a workflow asynchronously using the event-based asynchronous design pattern. <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/crdefault-md.md&quot; -->For more information, see<!--END INCLUDE --><a href=\"http://go.microsoft.com/fwlink/?LinkId=141765\" data-linktype=\"external\">Event-based Asynchronous Pattern Overview</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example invokes a workflow consisting of a <code>LongRunningDiceRoll</code> activity. The <code>LongRunningDiceRoll</code> activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_InvokeCompleted\" data-linktype=\"relative-path\">InvokeCompleted</a> handler.  </p>\n<pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#131\">    public sealed class LongRunningDiceRoll : Activity\n    {\n        public OutArgument&lt;int&gt; D1 { get; set; }\n        public OutArgument&lt;int&gt; D2 { get; set; }\n\n        public LongRunningDiceRoll()\n        {\n            this.Implementation = () =&gt; new Sequence\n            {\n                Activities =\n                {\n                    new WriteLine\n                    {\n                        Text = &quot;Rolling the dice for 5 seconds.&quot;\n                    },\n                    new Delay\n                    {\n                        Duration = TimeSpan.FromSeconds(5)\n                    },\n                    new DiceRoll\n                    {\n                        D1 = new OutArgument&lt;int&gt;(env =&gt; this.D1.Get(env)),\n                        D2 = new OutArgument&lt;int&gt;(env =&gt; this.D2.Get(env))\n                    }\n                }\n            };\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#33\">            AutoResetEvent syncEvent = new AutoResetEvent(false);\n\n            WorkflowInvoker invoker = new WorkflowInvoker(new LongRunningDiceRoll());\n\n            invoker.InvokeCompleted += delegate(object sender, InvokeCompletedEventArgs args)\n            {\n                if (args.Cancelled == true)\n                {\n                    Console.WriteLine(&quot;Workflow was cancelled.&quot;);\n                }\n                else if (args.Error != null)\n                {\n                    Console.WriteLine(&quot;Exception: {0}<br>{1}&quot;,\n                        args.Error.GetType().FullName,\n                        args.Error.Message);\n                }\n                else\n                {\n                    Console.WriteLine(&quot;The two dice are {0} and {1}.&quot;,\n                        args.Outputs[&quot;D1&quot;], args.Outputs[&quot;D2&quot;]);\n                }\n\n                syncEvent.Set();\n            };\n\n            invoker.InvokeAsync(&quot;InvokeAsync Example&quot;);\n\n            Console.WriteLine(&quot;Waiting for the workflow to complete.&quot;);\n\n            // Wait for the workflow to complete.\n            syncEvent.WaitOne();\n\n            Console.WriteLine(&quot;The workflow is complete.&quot;);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Activities_WorkflowInvoker_InvokeAsync_System_TimeSpan_System_Object_\">\r\n    \r\n            <a id=\"System_Activities_WorkflowInvoker_InvokeAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InvokeAsync(TimeSpan,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a workflow asynchronously with the specified time-out interval and a unique identifier.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void InvokeAsync (TimeSpan timeout, object userState);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The interval in which the workflow must complete before it is aborted and a <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is thrown.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>userState</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>userState</code> parameter must be unique across all currently running <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_InvokeAsync_\" data-linktype=\"relative-path\">InvokeAsync</a> operations for the current activity. If <code>userState</code> is not unique, an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> is thrown. <code>userState</code> is used to identify the workflow in <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_InvokeCompleted\" data-linktype=\"relative-path\">InvokeCompleted</a>, and to cancel the workflow using <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_CancelAsync_\" data-linktype=\"relative-path\">CancelAsync</a>.  </p>\n<p> To be notified when the workflow is complete, handle <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_InvokeCompleted\" data-linktype=\"relative-path\">InvokeCompleted</a>. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is thrown.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.  </p>\n</div>\n<p> This method invokes a workflow asynchronously using the event-based asynchronous design pattern. <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/crdefault-md.md&quot; -->For more information, see<!--END INCLUDE --><a href=\"http://go.microsoft.com/fwlink/?LinkId=141765\" data-linktype=\"external\">Event-based Asynchronous Pattern Overview</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example invokes a workflow consisting of a <code>LongRunningDiceRoll</code> activity. The <code>LongRunningDiceRoll</code> activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_InvokeCompleted\" data-linktype=\"relative-path\">InvokeCompleted</a> handler.  </p>\n<pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#131\">    public sealed class LongRunningDiceRoll : Activity\n    {\n        public OutArgument&lt;int&gt; D1 { get; set; }\n        public OutArgument&lt;int&gt; D2 { get; set; }\n\n        public LongRunningDiceRoll()\n        {\n            this.Implementation = () =&gt; new Sequence\n            {\n                Activities =\n                {\n                    new WriteLine\n                    {\n                        Text = &quot;Rolling the dice for 5 seconds.&quot;\n                    },\n                    new Delay\n                    {\n                        Duration = TimeSpan.FromSeconds(5)\n                    },\n                    new DiceRoll\n                    {\n                        D1 = new OutArgument&lt;int&gt;(env =&gt; this.D1.Get(env)),\n                        D2 = new OutArgument&lt;int&gt;(env =&gt; this.D2.Get(env))\n                    }\n                }\n            };\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#33\">            AutoResetEvent syncEvent = new AutoResetEvent(false);\n\n            WorkflowInvoker invoker = new WorkflowInvoker(new LongRunningDiceRoll());\n\n            invoker.InvokeCompleted += delegate(object sender, InvokeCompletedEventArgs args)\n            {\n                if (args.Cancelled == true)\n                {\n                    Console.WriteLine(&quot;Workflow was cancelled.&quot;);\n                }\n                else if (args.Error != null)\n                {\n                    Console.WriteLine(&quot;Exception: {0}<br>{1}&quot;,\n                        args.Error.GetType().FullName,\n                        args.Error.Message);\n                }\n                else\n                {\n                    Console.WriteLine(&quot;The two dice are {0} and {1}.&quot;,\n                        args.Outputs[&quot;D1&quot;], args.Outputs[&quot;D2&quot;]);\n                }\n\n                syncEvent.Set();\n            };\n\n            invoker.InvokeAsync(&quot;InvokeAsync Example&quot;);\n\n            Console.WriteLine(&quot;Waiting for the workflow to complete.&quot;);\n\n            // Wait for the workflow to complete.\n            syncEvent.WaitOne();\n\n            Console.WriteLine(&quot;The workflow is complete.&quot;);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Activities_WorkflowInvoker_InvokeAsync_System_Collections_Generic_IDictionary_System_String_System_Object__System_TimeSpan_System_Object_\">\r\n    \r\n            <a id=\"System_Activities_WorkflowInvoker_InvokeAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InvokeAsync(IDictionary&lt;String,Object&gt;,TimeSpan,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Invokes a workflow asynchronously with the specified <span class=\"xref\">stem.Collections.Generic.IDictionary`2</span> of input parameters, the specified time-out interval, and a unique identifier.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, object userState);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inputs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The dictionary of input parameters to the workflow, keyed by argument name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The interval in which the workflow must complete before it is aborted and a <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is thrown.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>userState</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>userState</code> parameter must be unique across all currently running <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_InvokeAsync_\" data-linktype=\"relative-path\">InvokeAsync</a> operations for the current activity. If <code>userState</code> is not unique, an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> is thrown. <code>userState</code> is used to identify the workflow in <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_InvokeCompleted\" data-linktype=\"relative-path\">InvokeCompleted</a>, and to cancel the workflow using <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_CancelAsync_\" data-linktype=\"relative-path\">CancelAsync</a>.  </p>\n<p> To be notified when the workflow is complete, handle <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_InvokeCompleted\" data-linktype=\"relative-path\">InvokeCompleted</a>. If the workflow does not complete within the specified time-out interval the workflow is aborted and a <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is thrown.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a> is only thrown if the time-out interval elapses and the workflow becomes idle during execution. A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.  </p>\n</div>\n<p> This method invokes a workflow asynchronously using the event-based asynchronous design pattern. <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/crdefault-md.md&quot; -->For more information, see<!--END INCLUDE --><a href=\"http://go.microsoft.com/fwlink/?LinkId=141765\" data-linktype=\"external\">Event-based Asynchronous Pattern Overview</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example invokes a workflow consisting of a <code>LongRunningDiceRoll</code> activity. The <code>LongRunningDiceRoll</code> activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_InvokeCompleted\" data-linktype=\"relative-path\">InvokeCompleted</a> handler.  </p>\n<pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#131\">    public sealed class LongRunningDiceRoll : Activity\n    {\n        public OutArgument&lt;int&gt; D1 { get; set; }\n        public OutArgument&lt;int&gt; D2 { get; set; }\n\n        public LongRunningDiceRoll()\n        {\n            this.Implementation = () =&gt; new Sequence\n            {\n                Activities =\n                {\n                    new WriteLine\n                    {\n                        Text = &quot;Rolling the dice for 5 seconds.&quot;\n                    },\n                    new Delay\n                    {\n                        Duration = TimeSpan.FromSeconds(5)\n                    },\n                    new DiceRoll\n                    {\n                        D1 = new OutArgument&lt;int&gt;(env =&gt; this.D1.Get(env)),\n                        D2 = new OutArgument&lt;int&gt;(env =&gt; this.D2.Get(env))\n                    }\n                }\n            };\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#33\">            AutoResetEvent syncEvent = new AutoResetEvent(false);\n\n            WorkflowInvoker invoker = new WorkflowInvoker(new LongRunningDiceRoll());\n\n            invoker.InvokeCompleted += delegate(object sender, InvokeCompletedEventArgs args)\n            {\n                if (args.Cancelled == true)\n                {\n                    Console.WriteLine(&quot;Workflow was cancelled.&quot;);\n                }\n                else if (args.Error != null)\n                {\n                    Console.WriteLine(&quot;Exception: {0}<br>{1}&quot;,\n                        args.Error.GetType().FullName,\n                        args.Error.Message);\n                }\n                else\n                {\n                    Console.WriteLine(&quot;The two dice are {0} and {1}.&quot;,\n                        args.Outputs[&quot;D1&quot;], args.Outputs[&quot;D2&quot;]);\n                }\n\n                syncEvent.Set();\n            };\n\n            invoker.InvokeAsync(&quot;InvokeAsync Example&quot;);\n\n            Console.WriteLine(&quot;Waiting for the workflow to complete.&quot;);\n\n            // Wait for the workflow to complete.\n            syncEvent.WaitOne();\n\n            Console.WriteLine(&quot;The workflow is complete.&quot;);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"events\">\r\n        <h2>Events\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Activities_WorkflowInvoker_InvokeCompleted\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InvokeCompleted</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the workflow invoked by one of the <span class=\"xref\">stem.Activities.WorkflowInvoker.InvokeAsync*</span> overloads is completed or canceled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Handle this to determine whether a workflow invoked with one of the <a class=\"xref\" href=\"system.activities.workflowinvoker#System_Activities_WorkflowInvoker_InvokeAsync_\" data-linktype=\"relative-path\">InvokeAsync</a> overloads completed successfully and to retrieve the output arguments of the completed workflow.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example invokes a workflow consisting of a <code>LongRunningDiceRoll</code> activity. The <code>LongRunningDiceRoll</code> activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the InvokeCompleted handler.  </p>\n<pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#131\">    public sealed class LongRunningDiceRoll : Activity\n    {\n        public OutArgument&lt;int&gt; D1 { get; set; }\n        public OutArgument&lt;int&gt; D2 { get; set; }\n\n        public LongRunningDiceRoll()\n        {\n            this.Implementation = () =&gt; new Sequence\n            {\n                Activities =\n                {\n                    new WriteLine\n                    {\n                        Text = &quot;Rolling the dice for 5 seconds.&quot;\n                    },\n                    new Delay\n                    {\n                        Duration = TimeSpan.FromSeconds(5)\n                    },\n                    new DiceRoll\n                    {\n                        D1 = new OutArgument&lt;int&gt;(env =&gt; this.D1.Get(env)),\n                        D2 = new OutArgument&lt;int&gt;(env =&gt; this.D2.Get(env))\n                    }\n                }\n            };\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"CFX_WorkflowInvokerExample#33\">            AutoResetEvent syncEvent = new AutoResetEvent(false);\n\n            WorkflowInvoker invoker = new WorkflowInvoker(new LongRunningDiceRoll());\n\n            invoker.InvokeCompleted += delegate(object sender, InvokeCompletedEventArgs args)\n            {\n                if (args.Cancelled == true)\n                {\n                    Console.WriteLine(&quot;Workflow was cancelled.&quot;);\n                }\n                else if (args.Error != null)\n                {\n                    Console.WriteLine(&quot;Exception: {0}<br>{1}&quot;,\n                        args.Error.GetType().FullName,\n                        args.Error.Message);\n                }\n                else\n                {\n                    Console.WriteLine(&quot;The two dice are {0} and {1}.&quot;,\n                        args.Outputs[&quot;D1&quot;], args.Outputs[&quot;D2&quot;]);\n                }\n\n                syncEvent.Set();\n            };\n\n            invoker.InvokeAsync(&quot;InvokeAsync Example&quot;);\n\n            Console.WriteLine(&quot;Waiting for the workflow to complete.&quot;);\n\n            // Wait for the workflow to complete.\n            syncEvent.WaitOne();\n\n            Console.WriteLine(&quot;The workflow is complete.&quot;);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Activities.WorkflowInvoker.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Activities.WorkflowInvoker.yml\">\r\n<meta name=\"APIName\" content=\"System.Activities.WorkflowInvoker\">\r\n<meta name=\"APIName\" content=\"System.Activities.WorkflowInvoker..ctor\">\r\n<meta name=\"APIName\" content=\"System.Activities.WorkflowInvoker.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Activities.WorkflowInvoker.CancelAsync\">\r\n<meta name=\"APIName\" content=\"System.Activities.WorkflowInvoker.EndInvoke\">\r\n<meta name=\"APIName\" content=\"System.Activities.WorkflowInvoker.Extensions\">\r\n<meta name=\"APIName\" content=\"System.Activities.WorkflowInvoker.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Activities.WorkflowInvoker.Invoke&lt;TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Activities.WorkflowInvoker.InvokeAsync\">\r\n<meta name=\"APIName\" content=\"System.Activities.WorkflowInvoker.InvokeCompleted\">\r\n<meta name=\"APIName\" content=\"System.Activities.WorkflowInvoker.add_InvokeCompleted\">\r\n<meta name=\"APIName\" content=\"System.Activities.WorkflowInvoker.remove_InvokeCompleted\">\r\n<meta name=\"APILocation\" content=\"System.Activities.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"119fc23e-c0be-7f11-6263-4a85c5469ee3\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Activities\\WorkflowInvoker.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a means for invoking a workflow as if it were a method call.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Activities/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Activities.WorkflowInvoker\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Activities.WorkflowInvoker.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Activities.WorkflowInvoker.yml","open_to_public_contributors":true,"api_name":["System.Activities.WorkflowInvoker","System.Activities.WorkflowInvoker..ctor","System.Activities.WorkflowInvoker.BeginInvoke","System.Activities.WorkflowInvoker.CancelAsync","System.Activities.WorkflowInvoker.EndInvoke","System.Activities.WorkflowInvoker.Extensions","System.Activities.WorkflowInvoker.Invoke","System.Activities.WorkflowInvoker.Invoke<TResult>","System.Activities.WorkflowInvoker.InvokeAsync","System.Activities.WorkflowInvoker.InvokeCompleted","System.Activities.WorkflowInvoker.add_InvokeCompleted","System.Activities.WorkflowInvoker.remove_InvokeCompleted"],"api_location":["System.Activities.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Activities.WorkflowInvoker","System::Activities::WorkflowInvoker","System.Activities.WorkflowInvoker.#ctor","System::Activities::WorkflowInvoker::#ctor","System.Activities.WorkflowInvoker.BeginInvoke","System::Activities::WorkflowInvoker::BeginInvoke","System.Activities.WorkflowInvoker.CancelAsync","System::Activities::WorkflowInvoker::CancelAsync","System.Activities.WorkflowInvoker.EndInvoke","System::Activities::WorkflowInvoker::EndInvoke","System.Activities.WorkflowInvoker.Extensions","System::Activities::WorkflowInvoker::Extensions","System.Activities.WorkflowInvoker.Invoke","System::Activities::WorkflowInvoker::Invoke","System.Activities.WorkflowInvoker.Invoke``1","System::Activities::WorkflowInvoker::Invoke``1","System.Activities.WorkflowInvoker.InvokeAsync","System::Activities::WorkflowInvoker::InvokeAsync","System.Activities.WorkflowInvoker.InvokeCompleted","System::Activities::WorkflowInvoker::InvokeCompleted"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"119fc23e-c0be-7f11-6263-4a85c5469ee3","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Activities\\WorkflowInvoker.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Activities/WorkflowInvoker.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"WorkflowInvoker class | Microsoft Docs","_op_ogTitle":"WorkflowInvoker class","description":"Provides a means for invoking a workflow as if it were a method call.\n","toc_asset_id":"_splitted/System.Activities/toc.json","toc_rel":"_splitted/System.Activities/toc.json","source_url":"","ms.assetid":"System.Activities.WorkflowInvoker","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.activities.workflowinvoker","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.activities.workflowinvoker","fileRelativePath":"System.Activities.WorkflowInvoker.html"},"themesRelativePathToOutputRoot":"_themes/"}