{"content":"    \r\n    <h1 id=\"System_Linq_IOrderedEnumerable_1\">\r\n      <span class=\"lang-csharp\">IOrderedEnumerable&lt;TElement&gt;</span>\r\n        Interface\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a sorted sequence.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public interface IOrderedEnumerable&lt;TElement&gt; : System.Collections.Generic.IEnumerable&lt;TElement&gt;</code></pre>\r\n    \r\n    \r\n    \t<h2>Type Parameters</h2>\r\n    \r\n    \t<table class=\"nameValue\">\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tTElement\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of the elements of the sequence.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t</table>\r\n    \r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>This type is enumerable because it inherits from <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>.  </p>\n<p> The extension methods &lt;xref:System.Linq.Enumerable.ThenBy%2A&gt; and &lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt; operate on objects of type IOrderedEnumerable(TElement). An object of type IOrderedEnumerable(TElement) can be obtained by calling one of the primary sort methods, &lt;xref:System.Linq.Enumerable.OrderBy%2A&gt; or &lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;, which return an IOrderedEnumerable(TElement). &lt;xref:System.Linq.Enumerable.ThenBy%2A&gt; and &lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;, the subordinate sort methods, in turn also return an object of type IOrderedEnumerable(TElement). This design allows for any number of consecutive calls to &lt;xref:System.Linq.Enumerable.ThenBy%2A&gt; or &lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;, where each call performs a subordinate ordering on the sorted data returned from the previous call.</p>\n\r\n    \r\n    \r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_IOrderedEnumerable_1_CreateOrderedEnumerable__1_System_Func__0___0__System_Collections_Generic_IComparer___0__System_Boolean_\" data-linktype=\"self-bookmark\">CreateOrderedEnumerable&lt;TKey&gt;(Func&lt;TElement,TKey&gt;,IComparer&lt;TKey&gt;,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs a subsequent ordering on the elements of an <span class=\"xref\">stem.Linq.IOrderedEnumerable`1</span> according to a key.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_IOrderedEnumerable_1_CreateOrderedEnumerable__1_System_Func__0___0__System_Collections_Generic_IComparer___0__System_Boolean_\">\r\n    \r\n            <a id=\"System_Linq_IOrderedEnumerable_1_CreateOrderedEnumerable_TKey__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateOrderedEnumerable&lt;TKey&gt;(Func&lt;TElement,TKey&gt;,IComparer&lt;TKey&gt;,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Performs a subsequent ordering on the elements of an <span class=\"xref\">stem.Linq.IOrderedEnumerable`1</span> according to a key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Linq.IOrderedEnumerable&lt;TElement&gt; CreateOrderedEnumerable&lt;TKey&gt; (Func&lt;TElement,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer, bool descending);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySelector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TElement</span>,<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Func`2</span> used to extract the key for each element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer</a>&lt;<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> used to compare keys for placement in the returned sequence.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>descending</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to sort the elements in descending order; <code>false</code> to sort the elements in ascending order.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.iorderedenumerable-1\" data-linktype=\"relative-path\">IOrderedEnumerable<telement></telement></a></div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Linq.IOrderedEnumerable`1</span> whose elements are sorted according to a key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The functionality provided by this method is like that provided by &lt;xref:System.Linq.Enumerable.ThenBy%2A&gt; or &lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;, depending on whether <code>descending</code> is <code>true</code> or <code>false</code>. They both perform a subordinate ordering of an already sorted sequence of type <a class=\"xref\" href=\"system.linq.iorderedenumerable-1\" data-linktype=\"relative-path\">IOrderedEnumerable&lt;TElement&gt;</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use CreateOrderedEnumerable(TKey) to perform a secondary ordering on an <a class=\"xref\" href=\"system.linq.iorderedenumerable-1\" data-linktype=\"relative-path\">IOrderedEnumerable&lt;TElement&gt;</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.IOrderedEnumerable#2\">            // Create an array of strings to sort.\n            string[] fruits = { &quot;apricot&quot;, &quot;orange&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;apple&quot;, &quot;grape&quot;, &quot;strawberry&quot; };\n            // First sort the strings by their length.\n            IOrderedEnumerable&lt;string&gt; sortedFruits2 =\n                fruits.OrderBy(fruit =&gt; fruit.Length);\n            // Secondarily sort the strings alphabetically, using the default comparer.\n            IOrderedEnumerable&lt;string&gt; sortedFruits3 =\n                sortedFruits2.CreateOrderedEnumerable&lt;string&gt;(\n                    fruit =&gt; fruit,\n                    Comparer&lt;string&gt;.Default, false);\n\n            // Output the resulting sequence of strings.\n            foreach (string fruit in sortedFruits3)\n                Console.WriteLine(fruit);\n\n            // This code produces the following output:\n            //\n            // apple\n            // grape\n            // mango\n            // banana\n            // orange\n            // apricot\n            // strawberry\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.IOrderedEnumerable#2\">        &#39; Create an array of strings to sort.\n        Dim fruits() As String = {&quot;apricot&quot;, &quot;orange&quot;, &quot;banana&quot;, &quot;mango&quot;, &quot;apple&quot;, &quot;grape&quot;, &quot;strawberry&quot;}\n        &#39; First sort the strings by their length.\n        Dim sortedFruits2 As IOrderedEnumerable(Of String) = _\n            fruits.OrderBy(Function(ByVal fruit) fruit.Length)\n        &#39; Secondarily sort the strings alphabetically, using the default comparer.\n        Dim sortedFruits3 As IOrderedEnumerable(Of String) = _\n            sortedFruits2.CreateOrderedEnumerable(Of String)( _\n                Function(ByVal fruit) fruit, _\n                System.Collections.Generic.Comparer(Of String).Default, _\n                False)\n\n        Dim output As New System.Text.StringBuilder\n        &#39; Output the resulting sequence of strings.\n        For Each fruit As String In sortedFruits3\n            output.AppendLine(fruit)\n        Next\n\n        &#39; Display the results.\n        MsgBox(output.ToString())\n\n        &#39; This code produces the following output:\n        &#39;\n        &#39; apple\n        &#39; grape\n        &#39; mango\n        &#39; banana\n        &#39; orange\n        &#39; apricot\n        &#39; strawberry\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Linq.IOrderedEnumerable-1.yml\">\r\n<meta name=\"APIName\" content=\"System.Linq.IOrderedEnumerable&lt;TElement&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.IOrderedEnumerable&lt;TElement&gt;.CreateOrderedEnumerable&lt;TKey&gt;\">\r\n<meta name=\"APILocation\" content=\"System.Core.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-17 08:51 AM\">\r\n<meta name=\"document_id\" content=\"2b0b0dfe-ebbf-f44b-0ba7-b0d7f3d7e732\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a sorted sequence.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Linq/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Linq.IOrderedEnumerable`1\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Linq.IOrderedEnumerable-1.yml","open_to_public_contributors":true,"api_name":["System.Linq.IOrderedEnumerable<TElement>","System.Linq.IOrderedEnumerable<TElement>.CreateOrderedEnumerable<TKey>"],"api_location":["System.Core.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Linq.IOrderedEnumerable`1","System::Linq::IOrderedEnumerable`1","System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable``1","System::Linq::IOrderedEnumerable`1::CreateOrderedEnumerable``1"],"dev_langs":["csharp"],"updated_at":"2017-03-17 08:51 AM","document_id":"2b0b0dfe-ebbf-f44b-0ba7-b0d7f3d7e732","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Linq/IOrderedEnumerable`1.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IOrderedEnumerable<TElement> interface | Microsoft Docs","_op_ogTitle":"IOrderedEnumerable<TElement> interface","description":"Represents a sorted sequence.\n","toc_asset_id":"_splitted/System.Linq/toc.json","toc_rel":"_splitted/System.Linq/toc.json","source_url":"","ms.assetid":"System.Linq.IOrderedEnumerable`1","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.linq.iorderedenumerable-1","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.linq.iorderedenumerable-1","fileRelativePath":"System.Linq.IOrderedEnumerable-1.html"},"themesRelativePathToOutputRoot":"_themes/"}