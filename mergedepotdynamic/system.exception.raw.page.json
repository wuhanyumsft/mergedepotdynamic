{"content":"    \r\n    <h1 id=\"System_Exception\">\r\n      <span class=\"lang-csharp\">Exception</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents errors that occur during application execution.  </p>\n<p> To browse the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/exception.cs#f092fb2b893a0162\" data-linktype=\"external\">Reference Source</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n[System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._Exception))]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic class Exception : System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Exception</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <div class=\"NOTE\"><h5>Note</h5><p> To view the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/exception.cs#f092fb2b893a0162\" data-linktype=\"external\">Reference Source</a>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <a href=\"http://referencesource.microsoft.com/\" data-linktype=\"external\">instructions</a>.  </p>\n</div>\n<p> This class is the base class for all exceptions. When an error occurs, either the system or the currently executing application reports it by throwing an exception that contains information about the error. After an exception is thrown, it is handled by the application or by the default exception handler.  </p>\n<p> In this section:  </p>\n<p> <a href=\"#Errors\" data-linktype=\"self-bookmark\">Errors and exceptions</a><br> <a href=\"#TryCatch\" data-linktype=\"self-bookmark\">Try/catch blocks</a><br> <a href=\"#Features\" data-linktype=\"self-bookmark\">Exception type features</a><br> <a href=\"#Properties\" data-linktype=\"self-bookmark\">Exception class properties</a><br> <a href=\"#Performance\" data-linktype=\"self-bookmark\">Performance considerations</a><br> <a href=\"#Rethrow\" data-linktype=\"self-bookmark\">Re-throwing an exception</a><br> <a href=\"#Standard\" data-linktype=\"self-bookmark\">Choosing standard exceptions</a><br> <a href=\"#Custom\" data-linktype=\"self-bookmark\">Implementing custom exceptions</a>  </p>\n<p><a name=\"Errors\"></a>   </p>\n<h2 id=\"errors-and-exceptions\">Errors and exceptions</h2>\n<p> Run-time errors can occur for a variety of reasons. However, not all errors should be handled as exceptions in your code. Here are some categories of errors that can occur at run time and the appropriate ways to respond to them.  </p>\n<ul>\n<li><p><strong>Usage errors.</strong> A usage error represents an error in program logic that can result in an exception. However, the error should be addressed not through exception handling but by modifying the faulty code. For example, the override of the <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">System.Object.Equals(Object)</a> method in the following example assumes that the <code>obj</code> argument must always be non-null.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Exception.Class#4\">Public Class Person\n   Private _name As String\n   \n   Public Property Name As String\n      Get\n         Return _name\n      End Get\n      Set\n         _name = value\n      End Set\n   End Property\n   \n   Public Overrides Function Equals(obj As Object) As Boolean\n      &#39; This implementation contains an error in program logic:\n      &#39; It assumes that the obj argument is not null.\n      Dim p As Person = CType(obj, Person)\n      Return Me.Name.Equals(p.Name)\n   End Function\nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim p1 As New Person()\n      p1.Name = &quot;John&quot;\n      Dim p2 As Person = Nothing\n      \n      &#39; The following throws a NullReferenceException.\n      Console.WriteLine(&quot;p1 = p2: {0}&quot;, p1.Equals(p2))   \n   End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Exception.Class#4\">using System;\n\npublic class Person\n{\n   private string _name;\n   \n   public string Name \n   {\n      get { return _name; } \n      set { _name = value; }\n   }\n   \n   public override int GetHashCode()\n   {\n      return this.Name.GetHashCode();  \n   }  \n                        \n   public override bool Equals(object obj)\n   {\n      // This implementation contains an error in program logic:\n      // It assumes that the obj argument is not null.\n      Person p = (Person) obj;\n      return this.Name.Equals(p.Name);\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      Person p1 = new Person();\n      p1.Name = &quot;John&quot;;\n      Person p2 = null; \n      \n      // The following throws a NullReferenceException.\n      Console.WriteLine(&quot;p1 = p2: {0}&quot;, p1.Equals(p2));   \n   }\n}\n</code></pre><p> The <a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> exception that results when <code>obj</code> is <code>null</code> can be eliminated by modifying the source code to explicitly test for null before calling the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> override and then re-compiling. The following example contains the corrected source code that handles a <code>null</code> argument.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Exception.Class#5\">Public Class Person\n   Private _name As String\n   \n   Public Property Name As String\n      Get\n         Return _name\n      End Get\n      Set\n         _name = value\n      End Set\n   End Property\n   \n   Public Overrides Function Equals(obj As Object) As Boolean\n      &#39; This implementation handles a null obj argument.\n      Dim p As Person = TryCast(obj, Person)\n      If p Is Nothing Then \n         Return False\n      Else\n         Return Me.Name.Equals(p.Name)\n      End If\n   End Function\nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim p1 As New Person()\n      p1.Name = &quot;John&quot;\n      Dim p2 As Person = Nothing\n      \n      Console.WriteLine(&quot;p1 = p2: {0}&quot;, p1.Equals(p2))   \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       p1 = p2: False\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Exception.Class#5\">using System;\n\npublic class Person\n{\n   private string _name;\n   \n   public string Name \n   {\n      get { return _name; } \n      set { _name = value; }\n   }\n   \n   public override int GetHashCode()\n   {\n      return this.Name.GetHashCode();  \n   }  \n                        \n   public override bool Equals(object obj)\n   {\n       // This implementation handles a null obj argument.\n       Person p = obj as Person; \n       if (p == null) \n          return false;\n       else\n          return this.Name.Equals(p.Name);\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      Person p1 = new Person();\n      p1.Name = &quot;John&quot;;\n      Person p2 = null; \n      \n      Console.WriteLine(&quot;p1 = p2: {0}&quot;, p1.Equals(p2));   \n   }\n}\n// The example displays the following output:\n//        p1 = p2: False\n</code></pre><p> Instead of using exception handling for usage errors, you can use the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Assert_\" data-linktype=\"relative-path\">Assert</a> method to identify usage errors in debug builds, and the <a class=\"xref\" href=\"system.diagnostics.trace#System_Diagnostics_Trace_Assert_\" data-linktype=\"relative-path\">Assert</a> method to identify usage errors in both debug and release builds. For more information, see <a href=\"../Topic/Assertions%20in%20Managed%20Code.md\" data-linktype=\"relative-path\">Assertions in Managed Code</a>.  </p>\n</li>\n<li><p><strong>Program errors.</strong> A program error is a run-time error that cannot necessarily be avoided by writing bug-free code.  </p>\n<p> In some cases, a program error may reflect an expected or routine error condition. In this case, you may want to avoid using exception handling to deal with the program error and instead retry the operation. For example, if the user is expected to input a date in a particular format, you can parse the date string by calling the <a class=\"xref\" href=\"system.datetime#System_DateTime_TryParseExact_\" data-linktype=\"relative-path\">TryParseExact</a> method, which returns a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the parse operation succeeded, instead of using the <a class=\"xref\" href=\"system.datetime#System_DateTime_ParseExact_\" data-linktype=\"relative-path\">ParseExact</a> method, which throws a <a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a> exception if the date string cannot be converted to a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value. Similarly, if a user tries to open a file that does not exist, you can first call the <a class=\"xref\" href=\"system.io.file#System_IO_File_Exists_\" data-linktype=\"relative-path\">Exists</a> method to check whether the file exists and, if it does not, prompt the user whether he or she wants to create it.  </p>\n<p> In other cases, a program error reflects an unexpected error condition that can be handled in your code. For example, even if you&#39;ve checked to ensure that a file exists, it may be deleted before you can open it, or it may be corrupted. In that case, trying to open the file by instantiating a <a class=\"xref\" href=\"system.io.streamreader\" data-linktype=\"relative-path\">StreamReader</a> object or calling the <a class=\"xref\" href=\"system.io.file#System_IO_File_Open_\" data-linktype=\"relative-path\">Open</a> method may throw a <a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a> exception. In these cases, you should use exception handling to recover from the error.  </p>\n</li>\n<li><p><strong>System failures.</strong> A system failure is a run-time error that cannot be handled programmatically in a meaningful way. For example, any method can throw an <a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a> exception if the common language runtime is unable to allocate additional memory. Ordinarily, system failures are not handled by using exception handling. Instead, you may be able to use an event such as <a class=\"xref\" href=\"system.appdomain#System_AppDomain_UnhandledException\" data-linktype=\"relative-path\">System.AppDomain.UnhandledException</a> and call the <a class=\"xref\" href=\"system.environment#System_Environment_FailFast_\" data-linktype=\"relative-path\">FailFast</a> method to log exception information and notify the user of the failure before the application terminates.  </p>\n</li>\n</ul>\n<p><a name=\"TryCatch\"></a>   </p>\n<h2 id=\"trycatch-blocks\">Try/catch blocks</h2>\n<p> The common language runtime provides an exception handling model that is based on the representation of exceptions as objects, and the separation of program code and exception handling code into <code>try</code> blocks and <code>catch</code> blocks. There can be one or more <code>catch</code> blocks, each designed to handle a particular type of exception, or one block designed to catch a more specific exception than another block.  </p>\n<p> If an application handles exceptions that occur during the execution of a block of application code, the code must be placed within a <code>try</code> statement and is called a <code>try</code> block. Application code that handles exceptions thrown by a <code>try</code> block is placed within a <code>catch</code> statement and is called a <code>catch</code> block. Zero or more <code>catch</code> blocks are associated with a <code>try</code> block, and each <code>catch</code> block includes a type filter that determines the types of exceptions it handles.  </p>\n<p> When an exception occurs in a <code>try</code> block, the system searches the associated <code>catch</code> blocks in the order they appear in application code, until it locates a <code>catch</code> block that handles the exception. A <code>catch</code> block handles an exception of type <code>T</code> if the type filter of the catch block specifies <code>T</code> or any type that <code>T</code> derives from. The system stops searching after it finds the first <code>catch</code> block that handles the exception. For this reason, in application code, a <code>catch</code> block that handles a type must be specified before a <code>catch</code> block that handles its base types, as demonstrated in the example that follows this section. A catch block that handles <code>System.Exception</code> is specified last.  </p>\n<p> If none of the <code>catch</code> blocks associated with the current <code>try</code> block handle the exception, and the current <code>try</code> block is nested within other <code>try</code> blocks in the current call, the <code>catch</code> blocks associated with the next enclosing <code>try</code> block are searched. If no <code>catch</code> block for the exception is found, the system searches previous nesting levels in the current call. If no <code>catch</code> block for the exception is found in the current call, the exception is passed up the call stack, and the previous stack frame is searched for a <code>catch</code> block that handles the exception. The search of the call stack continues until the exception is handled or until no more frames exist on the call stack. If the top of the call stack is reached without finding a <code>catch</code> block that handles the exception, the default exception handler handles it and the application terminates.  </p>\n<p><a name=\"Features\"></a>   </p>\n<h2 id=\"exception-type-features\">Exception type features</h2>\n<p> Exception types support the following features:  </p>\n<ul>\n<li><p>Human-readable text that describes the error. When an exception occurs, the runtime makes a text message available to inform the user of the nature of the error and to suggest action to resolve the problem. This text message is held in the <a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a> property of the exception object. During the creation of the exception object, you can pass a text string to the constructor to describe the details of that particular exception. If no error message argument is supplied to the constructor, the default error message is used. For more information, see the <a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a> property.  </p>\n</li>\n<li><p>The state of the call stack when the exception was thrown. The <a class=\"xref\" href=\"system.exception#System_Exception_StackTrace_\" data-linktype=\"relative-path\">StackTrace</a> property carries a stack trace that can be used to determine where the error occurs in the code. The stack trace lists all the called methods and the line numbers in the source file where the calls are made.  </p>\n</li>\n</ul>\n<p><a name=\"Properties\"></a>   </p>\n<h2 id=\"exception-class-properties\">Exception class properties</h2>\n<p> The Exception class includes a number of properties that help identify the code location, the type, the help file, and the reason for the exception: <a class=\"xref\" href=\"system.exception#System_Exception_StackTrace_\" data-linktype=\"relative-path\">StackTrace</a>, <a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a>, <a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a>, <a class=\"xref\" href=\"system.exception#System_Exception_HelpLink_\" data-linktype=\"relative-path\">HelpLink</a>, <a class=\"xref\" href=\"system.exception#System_Exception_HResult_\" data-linktype=\"relative-path\">HResult</a>, <a class=\"xref\" href=\"system.exception#System_Exception_Source_\" data-linktype=\"relative-path\">Source</a>, <a class=\"xref\" href=\"system.exception#System_Exception_TargetSite_\" data-linktype=\"relative-path\">TargetSite</a>, and <a class=\"xref\" href=\"system.exception#System_Exception_Data_\" data-linktype=\"relative-path\">Data</a>.  </p>\n<p> When a causal relationship exists between two or more exceptions, the <a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a> property maintains this information. The outer exception is thrown in response to this inner exception. The code that handles the outer exception can use the information from the earlier inner exception to handle the error more appropriately. Supplementary information about the exception can be stored as a collection of key/value pairs in the <a class=\"xref\" href=\"system.exception#System_Exception_Data_\" data-linktype=\"relative-path\">Data</a> property.  </p>\n<p> The error message string that is passed to the constructor during the creation of the exception object should be localized and can be supplied from a resource file by using the <a class=\"xref\" href=\"system.resources.resourcemanager\" data-linktype=\"relative-path\">ResourceManager</a> class. For more information about localized resources, see the <a href=\"../Topic/Creating%20Satellite%20Assemblies%20for%20Desktop%20Apps.md\" data-linktype=\"relative-path\">Creating Satellite Assemblies</a> and <a href=\"../Topic/Packaging%20and%20Deploying%20Resources%20in%20Desktop%20Apps.md\" data-linktype=\"relative-path\">Packaging and Deploying Resources</a> topics.  </p>\n<p> To provide the user with extensive information about why the exception occurred, the <a class=\"xref\" href=\"system.exception#System_Exception_HelpLink_\" data-linktype=\"relative-path\">HelpLink</a> property can hold a URL (or URN) to a help file.  </p>\n<p> The Exception class uses the HRESULT COR_E_EXCEPTION, which has the value 0x80131500.  </p>\n<p> For a list of initial property values for an instance of the Exception class, see the <a class=\"xref\" href=\"system.exception#System_Exception__ctor_\" data-linktype=\"relative-path\">Exception</a> constructors.  </p>\n<p><a name=\"Performance\"></a>   </p>\n<h2 id=\"performance-considerations\">Performance considerations</h2>\n<p> Throwing or handling an exception consumes a significant amount of system resources and execution time. Throw exceptions only to handle truly extraordinary conditions, not to handle predictable events or flow control. For example, in some cases, such as when you&#39;re developing a class library, it&#39;s reasonable to throw an exception if a method argument is invalid, because you expect your method to be called with valid parameters. An invalid method argument, if it is not the result of a usage error, means that something extraordinary has occurred. Conversely, do not throw an exception if user input is invalid, because you can expect users to occasionally enter invalid data. Instead, provide a retry mechanism so users can enter valid input. Nor should you use exceptions to handle usage errors. Instead, use <a href=\"../Topic/Assertions%20in%20Managed%20Code.md\" data-linktype=\"relative-path\">assertions</a> to identify and correct usage errors.  </p>\n<p> In addition, do not throw an exception when a return code is sufficient; do not convert a return code to an exception; and do not routinely catch an exception, ignore it, and then continue processing.  </p>\n<p><a name=\"Rethrow\"></a>   </p>\n<h2 id=\"re-throwing-an-exception\">Re-throwing an exception</h2>\n<p> In many cases, an exception handler simply wants to pass the exception on to the caller. This most often occurs in:  </p>\n<ul>\n<li><p>A class library that in turn wraps calls to methods in the .NET Framework class library or other class libraries.  </p>\n</li>\n<li><p>An application or library that encounters a fatal exception. The exception handler can log the exception and then re-throw the exception.  </p>\n<p>The recommended way to re-throw an exception is to simply use the <a href=\"../Topic/throw%20(C%23%20Reference).md\" data-linktype=\"relative-path\">throw</a> statement in C# and the <a href=\"../Topic/Throw%20Statement%20(Visual%20Basic).md\" data-linktype=\"relative-path\">Throw</a> statement in Visual Basic without including an expression. This ensures that all call stack information is preserved when the exception is propagated to the caller. The following example illustrates this. A string extension method, <code>FindOccurrences</code>, wraps one or more calls to <a class=\"xref\" href=\"system.string#System_String_IndexOf_System_String_System_Int32_\" data-linktype=\"relative-path\">System.String.IndexOf(String,Int32)</a> without validating its arguments beforehand.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Exception.Class#6\">Imports System.Collections.Generic\nImports System.Runtime.CompilerServices\n\nPublic Module Library\n   &lt;Extension()&gt;\n   Public Function FindOccurrences(s As String, f As String) As Integer()\n      Dim indexes As New List(Of Integer)\n      Dim currentIndex As Integer = 0\n      Try\n         Do While currentIndex &gt;= 0 And currentIndex &lt; s.Length\n            currentIndex = s.IndexOf(f, currentIndex)\n            If currentIndex &gt;= 0 Then\n               indexes.Add(currentIndex)\n               currentIndex += 1\n            End If\n         Loop\n      Catch e As ArgumentNullException\n         &#39; Perform some action here, such as logging this exception.\n         \n         Throw\n      End Try\n      Return indexes.ToArray()\n   End Function\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Exception.Class#6\">using System;\nusing System.Collections.Generic;\nusing System.Runtime.CompilerServices;\n\npublic static class Library\n{\n   public static int[] FindOccurrences(this String s, String f)\n   {\n      var indexes = new List&lt;int&gt;();\n      int currentIndex = 0;\n      try {\n         while (currentIndex &gt;= 0 &amp;&amp; currentIndex &lt; s.Length) {\n            currentIndex = s.IndexOf(f, currentIndex);\n            if (currentIndex &gt;= 0) {\n               indexes.Add(currentIndex);\n               currentIndex++;\n            }\n         }\n      }\n      catch (ArgumentNullException e) {\n         // Perform some action here, such as logging this exception.\n\n         throw;\n      }\n      return indexes.ToArray();\n   }\n}\n</code></pre><p>A caller then calls <code>FindOccurrences</code> twice. In the second call to <code>FindOccurrences</code>, the caller passes a <code>null</code> as the search string, which cases the <a class=\"xref\" href=\"system.string#System_String_IndexOf_System_String_System_Int32_\" data-linktype=\"relative-path\">System.String.IndexOf(String,Int32)</a> method to throw an <a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a> exception. This exception is handled by the <code>FindOccurrences</code> method and passed back to the caller. Because the throw statement is used with no expression, the output from the example shows that the call stack is preserved.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Exception.Class#7\">Module Example\n   Public Sub Main()\n      Dim s As String = &quot;It was a cold day when...&quot;\n      Dim indexes() As Integer = s.FindOccurrences(&quot;a&quot;)\n      ShowOccurrences(s, &quot;a&quot;, indexes)\n      Console.WriteLine()\n\n      Dim toFind As String = Nothing\n      Try\n         indexes = s.FindOccurrences(toFind)\n         ShowOccurrences(s, toFind, indexes)\n      Catch e As ArgumentNullException\n         Console.WriteLine(&quot;An exception ({0}) occurred.&quot;,\n                           e.GetType().Name)\n         Console.WriteLine(&quot;Message:{0}   {1}{0}&quot;, vbCrLf, e.Message)\n         Console.WriteLine(&quot;Stack Trace:{0}   {1}{0}&quot;, vbCrLf, e.StackTrace)\n      End Try\n   End Sub\n   \n   Private Sub ShowOccurrences(s As String, toFind As String, indexes As Integer())\n      Console.Write(&quot;&#39;{0}&#39; occurs at the following character positions: &quot;,\n                    toFind)\n      For ctr As Integer = 0 To indexes.Length - 1\n         Console.Write(&quot;{0}{1}&quot;, indexes(ctr),\n                       If(ctr = indexes.Length - 1, &quot;&quot;, &quot;, &quot;))\n      Next\n      Console.WriteLine()\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    &#39;a&#39; occurs at the following character positions: 4, 7, 15\n&#39;\n&#39;    An exception (ArgumentNullException) occurred.\n&#39;    Message:\n&#39;       Value cannot be null.\n&#39;    Parameter name: value\n&#39;\n&#39;    Stack Trace:\n&#39;          at System.String.IndexOf(String value, Int32 startIndex, Int32 count, Stri\n&#39;    ngComparison comparisonType)\n&#39;       at Library.FindOccurrences(String s, String f)\n&#39;       at Example.Main()\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Exception.Class#7\">public class Example\n{\n   public static void Main()\n   {\n      String s = &quot;It was a cold day when...&quot;;\n      int[] indexes = s.FindOccurrences(&quot;a&quot;);\n      ShowOccurrences(s, &quot;a&quot;, indexes);\n      Console.WriteLine();\n      \n      String toFind = null;\n      try {\n         indexes = s.FindOccurrences(toFind);\n         ShowOccurrences(s, toFind, indexes);\n      }\n      catch (ArgumentNullException e) {\n         Console.WriteLine(&quot;An exception ({0}) occurred.&quot;,\n                           e.GetType().Name);\n         Console.WriteLine(&quot;Message:\\n   {0}\\n&quot;, e.Message);\n         Console.WriteLine(&quot;Stack Trace:\\n   {0}\\n&quot;, e.StackTrace);\n      }\n   }\n\n   private static void ShowOccurrences(String s, String toFind, int[] indexes)\n   {\n      Console.Write(&quot;&#39;{0}&#39; occurs at the following character positions: &quot;,\n                    toFind);\n      for (int ctr = 0; ctr &lt; indexes.Length; ctr++)\n         Console.Write(&quot;{0}{1}&quot;, indexes[ctr],\n                       ctr == indexes.Length - 1 ? &quot;&quot; : &quot;, &quot;);\n\n      Console.WriteLine();\n   }\n}\n// The example displays the following output:\n//    &#39;a&#39; occurs at the following character positions: 4, 7, 15\n//\n//    An exception (ArgumentNullException) occurred.\n//    Message:\n//       Value cannot be null.\n//    Parameter name: value\n//\n//    Stack Trace:\n//          at System.String.IndexOf(String value, Int32 startIndex, Int32 count, Stri\n//    ngComparison comparisonType)\n//       at Library.FindOccurrences(String s, String f)\n//       at Example.Main()\n</code></pre><p>In contrast, if the exception is re-thrown by using the  </p>\n</li>\n</ul>\n<pre><code class=\"lang-c#\">throw e  \n</code></pre><pre><code class=\"lang-vb\">Throw e  \n</code></pre><p> statement, the full call stack is not preserved, and the example would generate the following output:  </p>\n<pre><code class=\"lang-Output\">\n&#39;a&#39; occurs at the following character positions: 4, 7, 15  \n\nAn exception (ArgumentNullException) occurred.  \nMessage:  \n   Value cannot be null.  \nParameter name: value  \n\nStack Trace:  \n      at Library.FindOccurrences(String s, String f)  \n   at Example.Main()  \n</code></pre><p> A slightly more cumbersome alternative is to throw a new exception, and to preserve the original exception&#39;s call stack information in an inner exception. The caller can then use the new exception&#39;s <a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a> property to retrieve stack frame and other information about the original exception. In this case, the throw statement is:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Exception.Class#8\">Throw New ArgumentNullException(&quot;You must supply a search string.&quot;,\n                                e)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Exception.Class#8\">throw new ArgumentNullException(&quot;You must supply a search string.&quot;,\n                                e);\n</code></pre><p> The user code that handles the exception has to know that the <a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a> property contains information about the original exception, as the following exception handler illustrates.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Exception.Class#9\">Try\n   indexes = s.FindOccurrences(toFind)\n   ShowOccurrences(s, toFind, indexes)\nCatch e As ArgumentNullException\n   Console.WriteLine(&quot;An exception ({0}) occurred.&quot;,\n                     e.GetType().Name)\n   Console.WriteLine(&quot;   Message: {1}{0}&quot;, vbCrLf, e.Message)\n   Console.WriteLine(&quot;   Stack Trace:{0}   {1}{0}&quot;, vbCrLf, e.StackTrace)\n   Dim ie As Exception = e.InnerException\n   If ie IsNot Nothing Then\n      Console.WriteLine(&quot;   The Inner Exception:&quot;)\n      Console.WriteLine(&quot;      Exception Name: {0}&quot;, ie.GetType().Name)\n      Console.WriteLine(&quot;      Message: {1}{0}&quot;, vbCrLf, ie.Message)\n      Console.WriteLine(&quot;      Stack Trace:{0}   {1}{0}&quot;, vbCrLf, ie.StackTrace)\n   End If\nEnd Try\n&#39; The example displays the following output:\n&#39;       &#39;a&#39; occurs at the following character positions: 4, 7, 15\n&#39;\n&#39;       An exception (ArgumentNullException) occurred.\n&#39;          Message: You must supply a search string.\n&#39;\n&#39;          Stack Trace:\n&#39;             at Library.FindOccurrences(String s, String f)\n&#39;          at Example.Main()\n&#39;\n&#39;          The Inner Exception:\n&#39;             Exception Name: ArgumentNullException\n&#39;             Message: Value cannot be null.\n&#39;       Parameter name: value\n&#39;\n&#39;             Stack Trace:\n&#39;             at System.String.IndexOf(String value, Int32 startIndex, Int32 count, Stri\n&#39;       ngComparison comparisonType)\n&#39;          at Library.FindOccurrences(String s, String f)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Exception.Class#9\">try {\n   indexes = s.FindOccurrences(toFind);\n   ShowOccurrences(s, toFind, indexes);\n}\ncatch (ArgumentNullException e) {\n   Console.WriteLine(&quot;An exception ({0}) occurred.&quot;,\n                     e.GetType().Name);\n   Console.WriteLine(&quot;   Message:\\n{0}&quot;, e.Message);\n   Console.WriteLine(&quot;   Stack Trace:\\n   {0}&quot;, e.StackTrace);\n   Exception ie = e.InnerException;\n   if (ie != null) {\n      Console.WriteLine(&quot;   The Inner Exception:&quot;);\n      Console.WriteLine(&quot;      Exception Name: {0}&quot;, ie.GetType().Name);\n      Console.WriteLine(&quot;      Message: {0}\\n&quot;, ie.Message);\n      Console.WriteLine(&quot;      Stack Trace:\\n   {0}\\n&quot;, ie.StackTrace);\n   }\n}\n// The example displays the following output:\n//    &#39;a&#39; occurs at the following character positions: 4, 7, 15\n//\n//    An exception (ArgumentNullException) occurred.\n//       Message: You must supply a search string.\n//\n//       Stack Trace:\n//          at Library.FindOccurrences(String s, String f)\n//       at Example.Main()\n//\n//       The Inner Exception:\n//          Exception Name: ArgumentNullException\n//          Message: Value cannot be null.\n//    Parameter name: value\n//\n//          Stack Trace:\n//          at System.String.IndexOf(String value, Int32 startIndex, Int32 count, Stri\n//    ngComparison comparisonType)\n//       at Library.FindOccurrences(String s, String f)\n</code></pre><p><a name=\"Standard\"></a>   </p>\n<h2 id=\"choosing-standard-exceptions\">Choosing standard exceptions</h2>\n<p> When you have to throw an exception, you can often use an existing exception type in the .NET Framework instead of implementing a custom exception. You should use a standard exception type under these two conditions:  </p>\n<ul>\n<li><p>You are throwing an exception that is caused by a usage error (that is, by an error in program logic made by the developer who is calling your method). Typically, you would throw an exception such as <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>, <a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a>, <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>, or <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a>. The string you supply to the exception object&#39;s constructor when instantiating the exception object should describe the error so that the developer can fix it. For more information, see the <a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a> property.  </p>\n</li>\n<li><p>You are handling an error that can be communicated to the caller with an existing .NET Framework exception. You should throw the most derived exception possible. For example, if a method requires an argument to be a valid member of an enumeration type, you should throw an <a class=\"xref\" href=\"system.componentmodel.invalidenumargumentexception\" data-linktype=\"relative-path\">InvalidEnumArgumentException</a> (the most derived class) rather than an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>.  </p>\n<p>The following table lists common exception types and the conditions under which you would throw them.  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Exception</th>\n<th>Condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></td>\n<td>A non-null argument that is passed to a method is invalid.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></td>\n<td>An argument that is passed to a method is <code>null</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></td>\n<td>An argument is outside the range of valid values.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></td>\n<td>Part of a directory path is not valid.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.dividebyzeroexception\" data-linktype=\"relative-path\">DivideByZeroException</a></td>\n<td>The denominator in an integer or <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> division operation is zero.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.io.drivenotfoundexception\" data-linktype=\"relative-path\">DriveNotFoundException</a></td>\n<td>A drive is unavailable or does not exist.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></td>\n<td>A file does not exist.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></td>\n<td>A value is not in an appropriate format to be converted from a string by a conversion method such as <code>Parse</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a></td>\n<td>An index is outside the bounds of an array or collection.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></td>\n<td>A method call is invalid in an object&#39;s current state.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.keynotfoundexception\" data-linktype=\"relative-path\">KeyNotFoundException</a></td>\n<td>The specified key for accessing a member in a collection cannot be found.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></td>\n<td>A method or operation is not implemented.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></td>\n<td>A method or operation is not supported.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></td>\n<td>An operation is performed on an object that has been disposed.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></td>\n<td>An arithmetic, casting, or conversion operation results in an overflow.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></td>\n<td>A path or file name exceeds the maximum system-defined length.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></td>\n<td>The operation is not supported on the current platform.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.rankexception\" data-linktype=\"relative-path\">RankException</a></td>\n<td>An array with the wrong number of dimensions is passed to a method.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.timeoutexception\" data-linktype=\"relative-path\">TimeoutException</a></td>\n<td>The time interval allotted to an operation has expired.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.uriformatexception\" data-linktype=\"relative-path\">UriFormatException</a></td>\n<td>An invalid Uniform Resource Identifier (URI) is used.</td>\n</tr>\n</tbody>\n</table>\n<p><a name=\"Custom\"></a>   </p>\n<h2 id=\"implementing-custom-exceptions\">Implementing custom exceptions</h2>\n<p> In the following cases, using an existing .NET Framework exception to handle an error condition is not adequate:  </p>\n<ul>\n<li><p>When the exception reflects a unique program error that cannot be mapped to an existing .NET Framework exception.  </p>\n</li>\n<li><p>When the exception requires handling that is different from the handling that is appropriate for an existing .NET Framework exception, or the exception must be disambiguated from a similar exception. For example, if you throw an <a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a> exception when parsing the numeric representation of a string that is out of range of the target integral type, you would not want to use the same exception for an error that results from the caller not supplying the appropriate constrained values when calling the method.  </p>\n<p>The Exception class is the base class of all exceptions in the .NET Framework. Many derived classes rely on the inherited behavior of the members of the Exception class; they do not override the members of Exception, nor do they define any unique members.  </p>\n<p>To define your own exception class:  </p>\n</li>\n</ul>\n<ol>\n<li><p>Define a class that inherits from Exception. If necessary, define any unique members needed by your class to provide additional information about the exception. For example, the <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> class includes a <a class=\"xref\" href=\"system.argumentexception#System_ArgumentException_ParamName_\" data-linktype=\"relative-path\">ParamName</a> property that specifies the name of the parameter whose argument caused the exception, and the <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> property includes a <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception#System_Text_RegularExpressions_RegexMatchTimeoutException_MatchTimeout_\" data-linktype=\"relative-path\">MatchTimeout</a> property that indicates the time-out interval.  </p>\n</li>\n<li><p>If necessary, override any inherited members whose functionality you want to change or modify. Note that most existing derived classes of Exception do not override the behavior of inherited members.  </p>\n</li>\n<li><p>Determine whether your custom exception object is serializable. Serialization enables you to save information about the exception and permits exception information to be shared by a server and a client proxy in a remoting context. To make the exception object serializable, mark it with the <a class=\"xref\" href=\"system.serializableattribute\" data-linktype=\"relative-path\">SerializableAttribute</a> attribute.  </p>\n</li>\n<li><p>Define the constructors of your exception class. Typically, exception classes have one or more of the following constructors:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"system.exception#System_Exception__ctor\" data-linktype=\"relative-path\">Exception()</a>, which uses default values to initialize the properties of a new exception object.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.exception#System_Exception__ctor_System_String_\" data-linktype=\"relative-path\">Exception(String)</a>, which initializes a new exception object with a specified error message.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.exception#System_Exception__ctor_System_String_System_Exception_\" data-linktype=\"relative-path\">Exception(String,Exception)</a>, which initializes a new exception object with a specified error message and inner exception.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.exception#System_Exception__ctor_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"relative-path\">Exception(SerializationInfo,StreamingContext)</a>, which is a <code>protected</code> constructor that initializes a new exception object from serialized data. You should implement this constructor if you&#39;ve chosen to make your exception object serializable.  </p>\n</li>\n</ul>\n<p>The following example illustrates the use of a custom exception class. It defines a <code>NotPrimeException</code> exception that is thrown when a client tries to retrieve a sequence of prime numbers by specifying a starting number that is not prime. The exception defines a new property, <code>NonPrime</code>, that returns the non-prime number that caused the exception. Besides implementing a protected parameterless constructor and a constructor with <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> and <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a> parameters for serialization, the <code>NotPrimeException</code> class defines three additional constructors to support the <code>NonPrime</code> property.  Each constructor calls a base class constructor in addition to preserving the value of the non-prime number. The <code>NotPrimeException</code> class is also marked with the <a class=\"xref\" href=\"system.serializableattribute\" data-linktype=\"relative-path\">SerializableAttribute</a> attribute.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Exception.Class#1\">using System;\nusing System.Runtime.Serialization;\n\n[Serializable()]\npublic class NotPrimeException : Exception\n{\n   private int notAPrime;\n\n   protected NotPrimeException()\n      : base()\n   { }\n\n   public NotPrimeException(int value) :\n      base(String.Format(&quot;{0} is not a prime number.&quot;, value))\n   {\n      notAPrime = value;\n   }\n\n   public NotPrimeException(int value, string message)\n      : base(message)\n   {\n      notAPrime = value;\n   }\n\n   public NotPrimeException(int value, string message, Exception innerException) :\n      base(message, innerException)\n   {\n      notAPrime = value;\n   }\n\n   protected NotPrimeException(SerializationInfo info,\n                               StreamingContext context)\n      : base(info, context)\n   { }\n\n   public int NonPrime\n   { get { return notAPrime; } }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Exception.Class#1\">Imports System.Runtime.Serialization\n\n&lt;Serializable()&gt; _\nPublic Class NotPrimeException : Inherits Exception\n   Private notAPrime As Integer\n\n   Protected Sub New()\n      MyBase.New()\n   End Sub\n\n   Public Sub New(value As Integer)\n      MyBase.New(String.Format(&quot;{0} is not a prime number.&quot;, value))\n      notAPrime = value\n   End Sub\n\n   Public Sub New(value As Integer, message As String)\n      MyBase.New(message)\n      notAPrime = value\n   End Sub\n\n   Public Sub New(value As Integer, message As String, innerException As Exception)\n      MyBase.New(message, innerException)\n      notAPrime = value\n   End Sub\n\n   Protected Sub New(info As SerializationInfo,\n                     context As StreamingContext)\n      MyBase.New(info, context)\n   End Sub\n\n   Public ReadOnly Property NonPrime As Integer\n      Get\n         Return notAPrime\n      End Get\n   End Property\nEnd Class\n</code></pre><p>The <code>PrimeNumberGenerator</code> class shown in the following example uses the Sieve of Eratosthenes to calculate the sequence of prime numbers from 2 to a limit specified by the client in the call to its class constructor. The <code>GetPrimesFrom</code> method returns all prime numbers that are greater than or equal to a specified lower limit, but throws a <code>NotPrimeException</code> if that lower limit is not a prime number.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Exception.Class#2\">Imports System.Collections.Generic\n\n&lt;Serializable()&gt; Public Class PrimeNumberGenerator\n   Private Const START As Integer = 2\n   Private maxUpperBound As Integer = 10000000\n   Private upperBound As Integer\n   Private primeTable() As Boolean\n   Private primes As New List(Of Integer)\n\n   Public Sub New(upperBound As Integer)\n      If upperBound &gt; maxUpperBound Then\n         Dim message As String = String.Format(\n             &quot;{0} exceeds the maximum upper bound of {1}.&quot;,\n             upperBound, maxUpperBound)\n         Throw New ArgumentOutOfRangeException(message)\n      End If\n      Me.upperBound = upperBound\n      &#39; Create array and mark 0, 1 as not prime (True).\n      ReDim primeTable(upperBound)\n      primeTable(0) = True\n      primeTable(1) = True\n\n      &#39; Use Sieve of Eratosthenes to determine prime numbers.\n      For ctr As Integer = START To CInt(Math.Ceiling(Math.Sqrt(upperBound)))\n         If primeTable(ctr) Then Continue For\n\n         For multiplier As Integer = ctr To CInt(upperBound \\ ctr)\n            If ctr * multiplier &lt;= upperBound Then primeTable(ctr * multiplier) = True\n         Next\n      Next\n      &#39; Populate array with prime number information.\n      Dim index As Integer = START\n      Do While index &lt;&gt; -1\n         index = Array.FindIndex(primeTable, index, Function(flag)\n                                                       Return Not flag\n                                                    End Function)\n         If index &gt;= 1 Then\n            primes.Add(index)\n            index += 1\n         End If\n      Loop\n   End Sub\n\n   Public Function GetAllPrimes() As Integer()\n      Return primes.ToArray()\n   End Function\n\n   Public Function GetPrimesFrom(prime As Integer) As Integer()\n      Dim start As Integer = primes.FindIndex(Function(value)\n                                                 Return value = prime\n                                              End Function)\n      If start &lt; 0 Then\n         Throw New NotPrimeException(prime, String.Format(&quot;{0} is not a prime number.&quot;, prime))\n      Else\n         Return primes.FindAll(Function(value)\n                                  Return value &gt;= prime\n                               End Function).ToArray()\n      End If\n   End Function\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Exception.Class#2\">using System;\nusing System.Collections.Generic;\n\n\n[Serializable]\npublic class PrimeNumberGenerator\n{\n   private const int START = 2;\n   private int maxUpperBound = 10000000;\n   private int upperBound;\n   private bool[] primeTable;\n   private List&lt;int&gt; primes = new List&lt;int&gt;();\n\n   public PrimeNumberGenerator(int upperBound)\n   {\n      if (upperBound &gt; maxUpperBound)\n      {\n         string message = String.Format(\n                           &quot;{0} exceeds the maximum upper bound of {1}.&quot;,\n                           upperBound, maxUpperBound);\n         throw new ArgumentOutOfRangeException(message);\n      }\n      this.upperBound = upperBound;\n      // Create array and mark 0, 1 as not prime (True).\n      primeTable = new bool[upperBound + 1];\n      primeTable[0] = true;\n      primeTable[1] = true;\n\n      // Use Sieve of Eratosthenes to determine prime numbers.\n      for (int ctr = START; ctr &lt;= (int)Math.Ceiling(Math.Sqrt(upperBound));\n            ctr++)\n      {\n         if (primeTable[ctr]) continue;\n\n         for (int multiplier = ctr; multiplier &lt;= upperBound / ctr; multiplier++)\n            if (ctr * multiplier &lt;= upperBound) primeTable[ctr * multiplier] = true;\n      }\n      // Populate array with prime number information.\n      int index = START;\n      while (index != -1)\n      {\n         index = Array.FindIndex(primeTable, index, (flag) =&gt; !flag);\n         if (index &gt;= 1)\n         {\n            primes.Add(index);\n            index++;\n         }\n      }\n   }\n\n   public int[] GetAllPrimes()\n   {\n      return primes.ToArray();\n   }\n\n   public int[] GetPrimesFrom(int prime)\n   {\n      int start = primes.FindIndex((value) =&gt; value == prime);\n      if (start &lt; 0)\n         throw new NotPrimeException(prime, String.Format(&quot;{0} is not a prime number.&quot;, prime));\n      else\n         return primes.FindAll((value) =&gt; value &gt;= prime).ToArray();\n   }\n}\n</code></pre><p>The following example makes two calls to the <code>GetPrimesFrom</code> method with non-prime numbers, one of which crosses application domain boundaries. In both cases, the exception is thrown and successfully handled in client code.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Exception.Class#3\">using System;\nusing System.Reflection;\n\nclass Example\n{\n   public static void Main()\n   {\n      int limit = 10000000;\n      PrimeNumberGenerator primes = new PrimeNumberGenerator(limit);\n      int start = 1000001;\n      try\n      {\n         int[] values = primes.GetPrimesFrom(start);\n         Console.WriteLine(&quot;There are {0} prime numbers from {1} to {2}&quot;,\n                           start, limit);\n      }\n      catch (NotPrimeException e)\n      {\n         Console.WriteLine(&quot;{0} is not prime&quot;, e.NonPrime);\n         Console.WriteLine(e);\n         Console.WriteLine(&quot;--------&quot;);\n      }\n\n      AppDomain domain = AppDomain.CreateDomain(&quot;Domain2&quot;);\n      PrimeNumberGenerator gen = (PrimeNumberGenerator)domain.CreateInstanceAndUnwrap(\n                                        typeof(Example).Assembly.FullName,\n                                        &quot;PrimeNumberGenerator&quot;, true,\n                                        BindingFlags.Default, null,\n                                        new object[] { 1000000 }, null, null);\n      try\n      {\n         start = 100;\n         Console.WriteLine(gen.GetPrimesFrom(start));\n      }\n      catch (NotPrimeException e)\n      {\n         Console.WriteLine(&quot;{0} is not prime&quot;, e.NonPrime);\n         Console.WriteLine(e);\n         Console.WriteLine(&quot;--------&quot;);\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Exception.Class#3\">Imports System.Reflection\n\nModule Example\n   Sub Main()\n      Dim limit As Integer = 10000000\n      Dim primes As New PrimeNumberGenerator(limit)\n      Dim start As Integer = 1000001\n      Try\n         Dim values() As Integer = primes.GetPrimesFrom(start)\n         Console.WriteLine(&quot;There are {0} prime numbers from {1} to {2}&quot;,\n                           start, limit)\n      Catch e As NotPrimeException\n         Console.WriteLine(&quot;{0} is not prime&quot;, e.NonPrime)\n         Console.WriteLine(e)\n         Console.WriteLine(&quot;--------&quot;)\n      End Try\n\n      Dim domain As AppDomain = AppDomain.CreateDomain(&quot;Domain2&quot;)\n      Dim gen As PrimeNumberGenerator = domain.CreateInstanceAndUnwrap(\n                                        GetType(Example).Assembly.FullName,\n                                        &quot;PrimeNumberGenerator&quot;, True,\n                                        BindingFlags.Default, Nothing,\n                                        {1000000}, Nothing, Nothing)\n      Try\n         start = 100\n         Console.WriteLine(gen.GetPrimesFrom(start))\n      Catch e As NotPrimeException\n         Console.WriteLine(&quot;{0} is not prime&quot;, e.NonPrime)\n         Console.WriteLine(e)\n         Console.WriteLine(&quot;--------&quot;)\n      End Try\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;      1000001 is not prime\n&#39;      NotPrimeException: 1000001 is not a prime number.\n&#39;         at PrimeNumberGenerator.GetPrimesFrom(Int32 prime)\n&#39;         at Example.Main()\n&#39;      --------\n&#39;      100 is not prime\n&#39;      NotPrimeException: 100 is not a prime number.\n&#39;         at PrimeNumberGenerator.GetPrimesFrom(Int32 prime)\n&#39;         at Example.Main()\n&#39;      --------\n</code></pre></li>\n</ol>\n<h2 id=\"windows-runtime-and-includenetv451addincludesnet-v451-mdmd\">Windows Runtime and .NET Framework 4.5.1</h2>\n<p> In .NET for Windows 8.x Store apps for Windows 8, some exception information is typically lost when an exception is propagated through non-.NET Framework stack frames. Starting with the .NET Framework 4.5.1 and Windows 8.1, the common language runtime continues to use the original Exception object that was thrown unless that exception was modified in a non-.NET Framework stack frame.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Exception__ctor\" data-linktype=\"self-bookmark\">Exception()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Exception__ctor_System_String_\" data-linktype=\"self-bookmark\">Exception(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> class with a specified error message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Exception__ctor_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">Exception(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> class with serialized data.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Exception__ctor_System_String_System_Exception_\" data-linktype=\"self-bookmark\">Exception(String,Exception)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> class with a specified error message and a reference to the inner exception that is the cause of this exception.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Exception_Data\" data-linktype=\"self-bookmark\">Data</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a collection of key/value pairs that provide additional user-defined information about the exception.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Exception_HelpLink\" data-linktype=\"self-bookmark\">HelpLink</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a link to the help file associated with this exception.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Exception_HResult\" data-linktype=\"self-bookmark\">HResult</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets HRESULT, a coded numerical value that is assigned to a specific exception.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Exception_InnerException\" data-linktype=\"self-bookmark\">InnerException</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> instance that caused the current exception.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Exception_Message\" data-linktype=\"self-bookmark\">Message</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a message that describes the current exception.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Exception_Source\" data-linktype=\"self-bookmark\">Source</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the name of the application or the object that causes the error.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Exception_StackTrace\" data-linktype=\"self-bookmark\">StackTrace</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a string representation of the immediate frames on the call stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Exception_TargetSite\" data-linktype=\"self-bookmark\">TargetSite</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the method that throws the current exception.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Exception_GetBaseException\" data-linktype=\"self-bookmark\">GetBaseException()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, returns the <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> that is the root cause of one or more subsequent exceptions.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Exception_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">GetObjectData(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, sets the <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> with information about the exception.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Exception_GetType\" data-linktype=\"self-bookmark\">GetType()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the runtime type of the current instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Exception_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates and returns a string representation of the current exception.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Events\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Exception_SerializeObjectState\" data-linktype=\"self-bookmark\">SerializeObjectState</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when an exception is serialized to create an exception state object that contains serialized data about the exception.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Exception__ctor\">\r\n    \r\n            <a id=\"System_Exception__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Exception()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Exception ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor initializes the <a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a> property of the new instance to a system-supplied message that describes the error and takes into account the current system culture.  </p>\n<p> All the derived classes should provide this default constructor. The following table shows the initial property values for an instance of <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a>.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a></td>\n<td>A null reference (<code>Nothing</code> in Visual Basic).</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a></td>\n<td>A system-supplied localized description.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example derives an <code>Exception</code> that uses a predefined message. The code demonstrates the use of the parameterless constructor for the derived class and the base <code>Exception</code> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Exception.Ctor#1\">// Example for the Exception( ) constructor.\nusing namespace System;\n\nnamespace NDP_UE_CPP\n{\n\n   // Derive an exception with a predefined message.\n   public ref class NotEvenException: public Exception\n   {\n   public:\n      NotEvenException()\n         : Exception( &quot;The argument to a function requiring &quot;\n      &quot;even input is not divisible by 2.&quot; )\n      {}\n\n   };\n\n\n   // Half throws a base exception if the input is not even.\n   int Half( int input )\n   {\n      if ( input % 2 != 0 )\n            throw gcnew Exception;\n      else\n            return input / 2;\n   }\n\n\n   // Half2 throws a derived exception if the input is not even.\n   int Half2( int input )\n   {\n      if ( input % 2 != 0 )\n            throw gcnew NotEvenException;\n      else\n            return input / 2;\n   }\n\n\n   // CalcHalf calls Half and catches any thrown exceptions.\n   void CalcHalf( int input )\n   {\n      try\n      {\n         int halfInput = Half( input );\n         Console::WriteLine( &quot;Half of {0} is {1}.&quot;, input, halfInput );\n      }\n      catch ( Exception^ ex ) \n      {\n         Console::WriteLine( ex-&gt;ToString() );\n      }\n\n   }\n\n\n   // CalcHalf2 calls Half2 and catches any thrown exceptions.\n   void CalcHalf2( int input )\n   {\n      try\n      {\n         int halfInput = Half2( input );\n         Console::WriteLine( &quot;Half of {0} is {1}.&quot;, input, halfInput );\n      }\n      catch ( Exception^ ex ) \n      {\n         Console::WriteLine( ex-&gt;ToString() );\n      }\n\n   }\n\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the Exception( ) constructor &quot;\n   &quot;generates the following output.&quot; );\n   Console::WriteLine( &quot;<br>Here, an exception is thrown using the <br>&quot;\n   &quot;parameterless constructor of the base class.<br>&quot; );\n   NDP_UE_CPP::CalcHalf( 12 );\n   NDP_UE_CPP::CalcHalf( 15 );\n   Console::WriteLine( &quot;<br>Here, an exception is thrown using the <br>&quot;\n   &quot;parameterless constructor of a derived class.<br>&quot; );\n   NDP_UE_CPP::CalcHalf2( 24 );\n   NDP_UE_CPP::CalcHalf2( 27 );\n}\n\n/*\nThis example of the Exception( ) constructor generates the following output.\n\nHere, an exception is thrown using the\nparameterless constructor of the base class.\n\nHalf of 12 is 6.\nSystem.Exception: Exception of type System.Exception was thrown.\n   at NDP_UE_CPP.Half(Int32 input)\n   at NDP_UE_CPP.CalcHalf(Int32 input)\n\nHere, an exception is thrown using the\nparameterless constructor of a derived class.\n\nHalf of 24 is 12.\nNDP_UE_CPP.NotEvenException: The argument to a function requiring even input is\n not divisible by 2.\n   at NDP_UE_CPP.Half2(Int32 input)\n   at NDP_UE_CPP.CalcHalf2(Int32 input)\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Exception.Ctor#1\">// Example for the Exception( ) constructor.\nusing System;\n\nnamespace NDP_UE_CS\n{\n    // Derive an exception with a predefined message.\n    class NotEvenException : Exception\n    {\n        public NotEvenException( ) :\n            base( &quot;The argument to a function requiring &quot; +\n                &quot;even input is not divisible by 2.&quot; )\n        { }\n    }\n\n    class NewExceptionDemo \n    {\n        public static void Main() \n        {\n            Console.WriteLine( \n                &quot;This example of the Exception( ) constructor &quot; +\n                &quot;generates the following output.&quot; );\n            Console.WriteLine( \n                &quot;<br>Here, an exception is thrown using the <br>&quot; +\n                &quot;parameterless constructor of the base class.<br>&quot; );\n\n            CalcHalf( 12 );\n            CalcHalf( 15 );\n\n            Console.WriteLine( \n                &quot;<br>Here, an exception is thrown using the <br>&quot; +\n                &quot;parameterless constructor of a derived class.<br>&quot; );\n\n            CalcHalf2( 24 );\n            CalcHalf2( 27 );\n        }\n    \t\n        // Half throws a base exception if the input is not even.\n        static int Half( int input )\n        {\n            if( input % 2 != 0 )\n                throw new Exception( );\n\n            else return input / 2;\n        }\n\n        // Half2 throws a derived exception if the input is not even.\n        static int Half2( int input )\n        {\n            if( input % 2 != 0 )\n                throw new NotEvenException( );\n\n            else return input / 2;\n        }\n\n        // CalcHalf calls Half and catches any thrown exceptions.\n        static void CalcHalf(int input )\n        {\n            try\n            {\n                int halfInput = Half( input );\n                Console.WriteLine( \n                    &quot;Half of {0} is {1}.&quot;, input, halfInput );\n            }\n            catch( Exception ex )\n            {\n                Console.WriteLine( ex.ToString( ) );\n            }\n        }\n\n        // CalcHalf2 calls Half2 and catches any thrown exceptions.\n        static void CalcHalf2(int input )\n        {\n            try\n            {\n                int halfInput = Half2( input );\n                Console.WriteLine( \n                    &quot;Half of {0} is {1}.&quot;, input, halfInput );\n            }\n            catch( Exception ex )\n            {\n                Console.WriteLine( ex.ToString( ) );\n            }\n        }\n    }\n}\n\n/*\nThis example of the Exception( ) constructor generates the following output.\n\nHere, an exception is thrown using the\nparameterless constructor of the base class.\n\nHalf of 12 is 6.\nSystem.Exception: Exception of type System.Exception was thrown.\n   at NDP_UE_CS.NewExceptionDemo.Half(Int32 input)\n   at NDP_UE_CS.NewExceptionDemo.CalcHalf(Int32 input)\n\nHere, an exception is thrown using the\nparameterless constructor of a derived class.\n\nHalf of 24 is 12.\nNDP_UE_CS.NotEvenException: The argument to a function requiring even input is\nnot divisible by 2.\n   at NDP_UE_CS.NewExceptionDemo.Half2(Int32 input)\n   at NDP_UE_CS.NewExceptionDemo.CalcHalf2(Int32 input)\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Exception.Ctor#1\">&#39; Example for the Exception( ) constructor.\nImports System\nImports Microsoft.VisualBasic\n\nNamespace NDP_UE_VB\n\n    &#39; Derive an exception with a predefined message.\n    Class NotEvenException\n        Inherits Exception\n           \n        Public Sub New( )\n            MyBase.New( _\n                &quot;The argument to a function requiring &quot; &amp; _\n                &quot;even input is not divisible by 2.&quot; )\n        End Sub &#39; New\n    End Class &#39; NotEvenException\n\n    Module NewExceptionDemo\n       \n        Sub Main( )\n            Console.WriteLine( _\n                &quot;This example of the Exception( ) constructor &quot; &amp; _\n                &quot;generates the following output.&quot; )\n            Console.WriteLine( vbCrLf &amp; _\n                &quot;Here, an exception is thrown using the &quot; &amp; vbCrLf &amp; _\n                &quot;parameterless constructor of the base class.&quot; &amp; _\n                vbCrLf )\n\n            CalcHalf( 12 )\n            CalcHalf( 15 )\n              \n            Console.WriteLine(vbCrLf &amp; _\n                &quot;Here, an exception is thrown using the &quot; &amp; vbCrLf &amp; _\n                &quot;parameterless constructor of a derived class.&quot; &amp; _\n                vbCrLf )\n\n            CalcHalf2( 24 )\n            CalcHalf2( 27 )\n        End Sub &#39; Main\n           \n        &#39; Half throws a base exception if the input is not even.\n        Function Half( input As Integer ) As Integer\n\n            If input Mod 2 &lt;&gt; 0 Then\n                Throw New Exception( )\n            Else\n                Return input / 2\n            End If\n        End Function &#39; Half\n            \n        &#39; Half2 throws a derived exception if the input is not even.\n        Function Half2( input As Integer ) As Integer\n\n            If input Mod 2 &lt;&gt; 0 Then\n                Throw New NotEvenException( )\n            Else\n                Return input / 2\n            End If\n        End Function &#39; Half2\n            \n        &#39; CalcHalf calls Half and catches any thrown exceptions.\n        Sub CalcHalf( input As Integer )\n\n            Try\n                Dim halfInput As Integer = Half( input )\n                Console.WriteLine( _\n                    &quot;Half of {0} is {1}.&quot;, input, halfInput )\n\n            Catch ex As Exception\n                Console.WriteLine( ex.ToString( ) )\n            End Try\n        End Sub &#39; CalcHalf\n           \n        &#39; CalcHalf2 calls Half2 and catches any thrown exceptions.\n        Sub CalcHalf2( input As Integer )\n\n            Try\n                Dim halfInput As Integer = Half2( input )\n                Console.WriteLine( _\n                    &quot;Half of {0} is {1}.&quot;, input, halfInput )\n\n            Catch ex As Exception\n                Console.WriteLine( ex.ToString( ) )\n            End Try\n        End Sub &#39; CalcHalf2\n\n    End Module &#39; NewExceptionDemo\nEnd Namespace &#39; NDP_UE_VB\n\n&#39; This example of the Exception( ) constructor generates the following output.\n&#39; \n&#39; Here, an exception is thrown using the\n&#39; parameterless constructor of the base class.\n&#39; \n&#39; Half of 12 is 6.\n&#39; System.Exception: Exception of type System.Exception was thrown.\n&#39;    at NDP_UE_VB.NewExceptionDemo.Half(Int32 input)\n&#39;    at NDP_UE_VB.NewExceptionDemo.CalcHalf(Int32 input)\n&#39; \n&#39; Here, an exception is thrown using the\n&#39; parameterless constructor of a derived class.\n&#39; \n&#39; Half of 24 is 12.\n&#39; NDP_UE_VB.NotEvenException: The argument to a function requiring even input i\n&#39; s not divisible by 2.\n&#39;    at NDP_UE_VB.NewExceptionDemo.Half2(Int32 input)\n&#39;    at NDP_UE_VB.NewExceptionDemo.CalcHalf2(Int32 input)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Exception__ctor_System_String_\">\r\n    \r\n            <a id=\"System_Exception__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Exception(String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> class with a specified error message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Exception (string message);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The message that describes the error.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor initializes the <a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a> property of the new instance by using the <code>message</code> parameter. If the <code>message</code> parameter is <code>null</code>, this is the same as calling the <a class=\"xref\" href=\"system.exception#System_Exception__ctor_\" data-linktype=\"relative-path\">Exception</a> constructor.  </p>\n<p> The following table shows the initial property values for an instance of <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a>.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a></td>\n<td>A null reference (<code>Nothing</code> in Visual Basic).</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a></td>\n<td>The error message string.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example derives an <code>Exception</code> for a specific condition. The code demonstrates the use of the constructor that takes a caller-specified message as a parameter, for both the derived class and the base <code>Exception</code> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Exception.Ctor#2\">// Example for the Exception( string ) constructor.\nusing System;\n\nnamespace NDP_UE_CS\n{\n    // Derive an exception with a specifiable message.\n    class NotEvenException : Exception\n    {\n        const string notEvenMessage = \n            &quot;The argument to a function requiring &quot; +\n            &quot;even input is not divisible by 2.&quot;;\n\n        public NotEvenException( ) :\n            base( notEvenMessage )\n        { }\n\n        public NotEvenException( string auxMessage ) :\n            base( String.Format( &quot;{0} - {1}&quot;, \n                auxMessage, notEvenMessage ) )\n        { }\n    }\n\n    class NewSExceptionDemo \n    {\n        public static void Main() \n        {\n            Console.WriteLine( \n                &quot;This example of the Exception( string )<br>&quot; +\n                &quot;constructor generates the following output.&quot; );\n            Console.WriteLine( \n                &quot;<br>Here, an exception is thrown using the <br>&quot; +\n                &quot;constructor of the base class.<br>&quot; );\n\n            CalcHalf( 18 );\n            CalcHalf( 21 );\n\n            Console.WriteLine( \n                &quot;<br>Here, an exception is thrown using the <br>&quot; +\n                &quot;constructor of a derived class.<br>&quot; );\n\n            CalcHalf2( 30 );\n            CalcHalf2( 33 );\n        }\n    \t\n        // Half throws a base exception if the input is not even.\n        static int Half( int input )\n        {\n            if( input % 2 != 0 )\n                throw new Exception( String.Format( \n                    &quot;The argument {0} is not divisible by 2.&quot;, \n                    input ) );\n\n            else return input / 2;\n        }\n\n        // Half2 throws a derived exception if the input is not even.\n        static int Half2( int input )\n        {\n            if( input % 2 != 0 )\n                throw new NotEvenException( \n                    String.Format( &quot;Invalid argument: {0}&quot;, input ) );\n\n            else return input / 2;\n        }\n\n        // CalcHalf calls Half and catches any thrown exceptions.\n        static void CalcHalf(int input )\n        {\n            try\n            {\n                int halfInput = Half( input );\n                Console.WriteLine( \n                    &quot;Half of {0} is {1}.&quot;, input, halfInput );\n            }\n            catch( Exception ex )\n            {\n                Console.WriteLine( ex.ToString( ) );\n            }\n        }\n\n        // CalcHalf2 calls Half2 and catches any thrown exceptions.\n        static void CalcHalf2(int input )\n        {\n            try\n            {\n                int halfInput = Half2( input );\n                Console.WriteLine( \n                    &quot;Half of {0} is {1}.&quot;, input, halfInput );\n            }\n            catch( Exception ex )\n            {\n                Console.WriteLine( ex.ToString( ) );\n            }\n        }\n    }\n}\n\n/*\nThis example of the Exception( string )\nconstructor generates the following output.\n\nHere, an exception is thrown using the\nconstructor of the base class.\n\nHalf of 18 is 9.\nSystem.Exception: The argument 21 is not divisible by 2.\n   at NDP_UE_CS.NewSExceptionDemo.Half(Int32 input)\n   at NDP_UE_CS.NewSExceptionDemo.CalcHalf(Int32 input)\n\nHere, an exception is thrown using the\nconstructor of a derived class.\n\nHalf of 30 is 15.\nNDP_UE_CS.NotEvenException: Invalid argument: 33 - The argument to a function r\nequiring even input is not divisible by 2.\n   at NDP_UE_CS.NewSExceptionDemo.Half2(Int32 input)\n   at NDP_UE_CS.NewSExceptionDemo.CalcHalf2(Int32 input)\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Exception.Ctor#2\">&#39; Example for the Exception( String ) constructor( String ).\nImports System\nImports Microsoft.VisualBasic\n\nNamespace NDP_UE_VB\n\n    &#39; Derive an exception with a specifiable message.\n    Class NotEvenException\n        Inherits Exception\n\n        Private Const notEvenMessage As String = _\n            &quot;The argument to a function requiring &quot; &amp; _\n            &quot;even input is not divisible by 2.&quot;\n           \n        Public Sub New()\n            MyBase.New(notEvenMessage)\n        End Sub &#39; New\n           \n        Public Sub New(auxMessage As String)\n            MyBase.New(String.Format(&quot;{0} - {1}&quot;, _\n                auxMessage, notEvenMessage))\n        End Sub &#39; New\n    End Class &#39; NotEvenException\n\n    Module NewSExceptionDemo\n       \n        Sub Main()\n            Console.WriteLine( _\n                &quot;This example of the Exception( String )&quot; &amp; vbCrLf &amp; _\n                &quot;constructor generates the following output.&quot; )\n            Console.WriteLine( vbCrLf &amp; _\n                &quot;Here, an exception is thrown using the &quot; &amp; vbCrLf &amp; _\n                &quot;constructor of the base class.&quot; &amp; vbCrLf )\n\n            CalcHalf(18)\n            CalcHalf(21)\n              \n            Console.WriteLine(vbCrLf &amp; _\n                &quot;Here, an exception is thrown using the &quot; &amp; vbCrLf &amp; _\n                &quot;constructor of a derived class.&quot; &amp; vbCrLf )\n\n            CalcHalf2(30)\n            CalcHalf2(33)\n        End Sub &#39; Main\n           \n        &#39; Half throws a base exception if the input is not even.\n        Function Half(input As Integer) As Integer\n\n            If input Mod 2 &lt;&gt; 0 Then\n                Throw New Exception( String.Format( _\n                    &quot;The argument {0} is not divisible by 2.&quot;, _\n                    input ) )\n            Else\n                Return input / 2\n            End If\n        End Function &#39; Half\n            \n        &#39; Half2 throws a derived exception if the input is not even.\n        Function Half2(input As Integer) As Integer\n\n            If input Mod 2 &lt;&gt; 0 Then\n                Throw New NotEvenException( _\n                    String.Format( &quot;Invalid argument: {0}&quot;, input ) )\n            Else\n                Return input / 2\n            End If\n        End Function &#39; Half2\n            \n        &#39; CalcHalf calls Half and catches any thrown exceptions.\n        Sub CalcHalf(input As Integer)\n\n            Try\n                Dim halfInput As Integer = Half(input)\n                Console.WriteLine( _\n                    &quot;Half of {0} is {1}.&quot;, input, halfInput )\n\n            Catch ex As Exception\n                Console.WriteLine( ex.ToString( ) )\n            End Try\n        End Sub &#39; CalcHalf\n           \n           \n        &#39; CalcHalf2 calls Half2 and catches any thrown exceptions.\n        Sub CalcHalf2( input As Integer )\n\n            Try\n                Dim halfInput As Integer = Half2( input )\n                Console.WriteLine( _\n                    &quot;Half of {0} is {1}.&quot;, input, halfInput )\n\n            Catch ex As Exception\n                Console.WriteLine( ex.ToString( ) )\n            End Try\n        End Sub &#39; CalcHalf2\n\n    End Module &#39; NewSExceptionDemo\nEnd Namespace &#39; NDP_UE_VB\n\n&#39; This example of the Exception( String )\n&#39; constructor generates the following output.\n&#39; \n&#39; Here, an exception is thrown using the\n&#39; constructor of the base class.\n&#39; \n&#39; Half of 18 is 9.\n&#39; System.Exception: The argument 21 is not divisible by 2.\n&#39;    at NDP_UE_VB.NewSExceptionDemo.Half(Int32 input)\n&#39;    at NDP_UE_VB.NewSExceptionDemo.CalcHalf(Int32 input)\n&#39; \n&#39; Here, an exception is thrown using the\n&#39; constructor of a derived class.\n&#39; \n&#39; Half of 30 is 15.\n&#39; NDP_UE_VB.NotEvenException: Invalid argument: 33 - The argument to a function\n&#39;  requiring even input is not divisible by 2.\n&#39;    at NDP_UE_VB.NewSExceptionDemo.Half2(Int32 input)\n&#39;    at NDP_UE_VB.NewSExceptionDemo.CalcHalf2(Int32 input)\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Exception.Ctor#2\">// Example for the Exception( String* ) constructor.\nusing namespace System;\n\nnamespace NDP_UE_CPP\n{\n\n   // Derive an exception with a specifiable message.\n   public ref class NotEvenException: public Exception\n   {\n   private:\n      static String^ notEvenMessage = &quot;The argument to a function requiring &quot;\n      &quot;even input is not divisible by 2.&quot;;\n\n   public:\n      NotEvenException()\n         : Exception( notEvenMessage )\n      {}\n\n      NotEvenException( String^ auxMessage )\n         : Exception( String::Format( &quot;{0} - {1}&quot;, auxMessage, notEvenMessage ) )\n      {}\n\n   };\n\n\n   // Half throws a base exception if the input is not even.\n   int Half( int input )\n   {\n      if ( input % 2 != 0 )\n            throw gcnew Exception( String::Format( &quot;The argument {0} is not divisible by 2.&quot;, input ) );\n      else\n            return input / 2;\n   }\n\n\n   // Half2 throws a derived exception if the input is not even.\n   int Half2( int input )\n   {\n      if ( input % 2 != 0 )\n            throw gcnew NotEvenException( String::Format( &quot;Invalid argument: {0}&quot;, input ) );\n      else\n            return input / 2;\n   }\n\n\n   // CalcHalf calls Half and catches any thrown exceptions.\n   void CalcHalf( int input )\n   {\n      try\n      {\n         int halfInput = Half( input );\n         Console::WriteLine( &quot;Half of {0} is {1}.&quot;, input, halfInput );\n      }\n      catch ( Exception^ ex ) \n      {\n         Console::WriteLine( ex-&gt;ToString() );\n      }\n\n   }\n\n\n   // CalcHalf2 calls Half2 and catches any thrown exceptions.\n   void CalcHalf2( int input )\n   {\n      try\n      {\n         int halfInput = Half2( input );\n         Console::WriteLine( &quot;Half of {0} is {1}.&quot;, input, halfInput );\n      }\n      catch ( Exception^ ex ) \n      {\n         Console::WriteLine( ex-&gt;ToString() );\n      }\n\n   }\n\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the Exception( String* )<br>&quot;\n   &quot;constructor generates the following output.&quot; );\n   Console::WriteLine( &quot;<br>Here, an exception is thrown using the <br>&quot;\n   &quot;constructor of the base class.<br>&quot; );\n   NDP_UE_CPP::CalcHalf( 18 );\n   NDP_UE_CPP::CalcHalf( 21 );\n   Console::WriteLine( &quot;<br>Here, an exception is thrown using the <br>&quot;\n   &quot;constructor of a derived class.<br>&quot; );\n   NDP_UE_CPP::CalcHalf2( 30 );\n   NDP_UE_CPP::CalcHalf2( 33 );\n}\n\n/*\nThis example of the Exception( String* )\nconstructor generates the following output.\n\nHere, an exception is thrown using the\nconstructor of the base class.\n\nHalf of 18 is 9.\nSystem.Exception: The argument 21 is not divisible by 2.\n   at NDP_UE_CPP.Half(Int32 input)\n   at NDP_UE_CPP.CalcHalf(Int32 input)\n\nHere, an exception is thrown using the\nconstructor of a derived class.\n\nHalf of 30 is 15.\nNDP_UE_CPP.NotEvenException: Invalid argument: 33 - The argument to a function\nrequiring even input is not divisible by 2.\n   at NDP_UE_CPP.Half2(Int32 input)\n   at NDP_UE_CPP.CalcHalf2(Int32 input)\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Exception__ctor_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_Exception__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Exception(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> class with serialized data.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected Exception (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>info</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> that holds the serialized object data about the exception being thrown.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a> that contains contextual information about the source or destination.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>info</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationexception\" data-linktype=\"relative-path\">SerializationException</a></div>\r\n                  </div>\r\n                  <p>The class name is <code>null</code> or <span class=\"xref\">stem.Exception.HResult*</span> is zero (0).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. For more information, see <a href=\"../Topic/XML%20and%20SOAP%20Serialization.md\" data-linktype=\"relative-path\">XML and SOAP Serialization</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example defines a derived serializable <code>Exception</code> class. The code forces a divide-by-0 error and then creates an instance of the derived exception using the (<a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a>, <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a>) constructor. The code serializes the instance to a file, deserializes the file into a new exception, which it throws, and then catches and displays the exception&#39;s data.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Exception.GetObjectData#1\">using System;\nusing System.IO;\nusing System.Runtime.Serialization;\nusing System.Runtime.Serialization.Formatters.Soap;\nusing System.Security.Permissions;\n\n // Define a serializable derived exception class.\n [Serializable()]\n class SecondLevelException : Exception, ISerializable\n {\n     // This public constructor is used by class instantiators.\n     public SecondLevelException( string message, Exception inner ) :\n         base( message, inner )\n     {\n         HelpLink = &quot;http://MSDN.Microsoft.com&quot;;\n         Source = &quot;Exception_Class_Samples&quot;;\n     }\n\n     // This protected constructor is used for deserialization.\n     protected SecondLevelException( SerializationInfo info, \n         StreamingContext context ) :\n             base( info, context )\n     { }\n\n     // GetObjectData performs a custom serialization.\n     [SecurityPermissionAttribute(SecurityAction.Demand,SerializationFormatter=true)]\n     public override void GetObjectData( SerializationInfo info, \n         StreamingContext context ) \n     {\n         // Change the case of two properties, and then use the \n         // method of the base class.\n         HelpLink = HelpLink.ToLower( );\n         Source = Source.ToUpperInvariant();\n\n         base.GetObjectData( info, context );\n     }\n }\n\n class SerializationDemo \n {\n     public static void Main() \n     {\n         Console.WriteLine( \n             &quot;This example of the Exception constructor &quot; +\n             &quot;and Exception.GetObjectData<br>with Serialization&quot; +\n             &quot;Info and StreamingContext parameters &quot; +\n             &quot;generates <br>the following output.<br>&quot; );\n\n         try\n         {\n             // This code forces a division by 0 and catches the \n             // resulting exception.\n             try\n             {\n                 int  zero = 0;\n                 int  ecks = 1 / zero;\n             }\n             catch( Exception ex )\n             {\n                 // Create a new exception to throw again.\n                 SecondLevelException newExcept =\n                     new SecondLevelException( \n                         &quot;Forced a division by 0 and threw &quot; +\n                         &quot;another exception.&quot;, ex );\n\n                 Console.WriteLine( \n                     &quot;Forced a division by 0, caught the &quot; +\n                     &quot;resulting exception, <br>&quot; +\n                     &quot;and created a derived exception:<br>&quot; );\n                 Console.WriteLine( &quot;HelpLink: {0}&quot;, \n                     newExcept.HelpLink );\n                 Console.WriteLine( &quot;Source:   {0}&quot;, \n                     newExcept.Source );\n\n                 // This FileStream is used for the serialization.\n                 FileStream stream = \n                     new FileStream( &quot;NewException.dat&quot;, \n                         FileMode.Create );\n\n                 try\n                 {\n                     // Serialize the derived exception.\n                     SoapFormatter formatter = \n                         new SoapFormatter( null,\n                             new StreamingContext( \n                                 StreamingContextStates.File ) );\n                     formatter.Serialize( stream, newExcept );\n\n                     // Rewind the stream and deserialize the \n                     // exception.\n                     stream.Position = 0;\n                     SecondLevelException deserExcept = \n                         (SecondLevelException)\n                             formatter.Deserialize( stream );\n\n                     Console.WriteLine( \n                         &quot;<br>Serialized the exception, and then &quot; +\n                         &quot;deserialized the resulting stream &quot; +\n                         &quot;into a <br>new exception. &quot; +\n                         &quot;The deserialization changed the case &quot; +\n                         &quot;of certain properties:<br>&quot; );\n                     \n                     // Throw the deserialized exception again.\n                     throw deserExcept;\n                 }\n                 catch( SerializationException se )\n                 {\n                     Console.WriteLine( &quot;Failed to serialize: {0}&quot;, \n                         se.ToString( ) );\n                 }\n                 finally\n                 {\n                     stream.Close( );\n                 }\n             }\n         }\n         catch( Exception ex )\n         {\n             Console.WriteLine( &quot;HelpLink: {0}&quot;, ex.HelpLink );\n             Console.WriteLine( &quot;Source:   {0}&quot;, ex.Source );\n\n             Console.WriteLine( );\n             Console.WriteLine( ex.ToString( ) );\n         }\n     }\n }\n/*\nThis example displays the following output.\n\nForced a division by 0, caught the resulting exception,\nand created a derived exception:\n\nHelpLink: http://MSDN.Microsoft.com\nSource:   Exception_Class_Samples\n\nSerialized the exception, and then deserialized the resulting stream into a\nnew exception. The deserialization changed the case of certain properties:\n\nHelpLink: http://msdn.microsoft.com\nSource:   EXCEPTION_CLASS_SAMPLES\n\nNDP_UE_CS.SecondLevelException: Forced a division by 0 and threw another except\nion. ---&gt; System.DivideByZeroException: Attempted to divide by zero.\n   at NDP_UE_CS.SerializationDemo.Main()\n   --- End of inner exception stack trace ---\n   at NDP_UE_CS.SerializationDemo.Main()\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Exception.GetObjectData#1\">#using &lt;System.Runtime.Serialization.Formatters.Soap.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Runtime::Serialization;\nusing namespace System::Runtime::Serialization::Formatters::Soap;\n\n// Define a serializable derived exception class.\n\n[Serializable]\nref class SecondLevelException: public Exception, public ISerializable\n{\npublic:\n\n   // This public constructor is used by class instantiators.\n   SecondLevelException( String^ message, Exception^ inner )\n      : Exception( message, inner )\n   {\n      HelpLink = &quot;http://MSDN.Microsoft.com&quot;;\n      Source = &quot;Exception_Class_Samples&quot;;\n   }\n\n\nprotected:\n\n   // This protected constructor is used for deserialization.\n   SecondLevelException( SerializationInfo^ info, StreamingContext context )\n      : Exception( info, context )\n   {}\n\n\npublic:\n\n   // GetObjectData performs a custom serialization.\n   [System::Security::Permissions::SecurityPermissionAttribute\n   (System::Security::Permissions::SecurityAction::LinkDemand, \n   Flags=System::Security::Permissions::SecurityPermissionFlag::SerializationFormatter)]\n   virtual void GetObjectData( SerializationInfo^ info, StreamingContext context ) override\n   {\n      \n      // Change the case of two properties, and then use the \n      // method of the base class.\n      HelpLink = HelpLink-&gt;ToLower();\n      Source = Source-&gt;ToUpperInvariant();\n      Exception::GetObjectData( info, context );\n   }\n\n};\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the Exception constructor &quot;\n   &quot;and Exception.GetObjectData<br>with Serialization&quot;\n   &quot;Info and StreamingContext parameters &quot;\n   &quot;generates <br>the following output.<br>&quot; );\n   try\n   {\n      \n      // This code forces a division by 0 and catches the \n      // resulting exception.\n      try\n      {\n         int zero = 0;\n         int ecks = 1 / zero;\n      }\n      catch ( Exception^ ex ) \n      {\n         \n         // Create a new exception to throw again.\n         SecondLevelException^ newExcept = gcnew SecondLevelException( &quot;Forced a division by 0 and threw &quot;\n         &quot;another exception.&quot;,ex );\n         Console::WriteLine( &quot;Forced a division by 0, caught the &quot;\n         &quot;resulting exception, <br>&quot;\n         &quot;and created a derived exception:<br>&quot; );\n         Console::WriteLine( &quot;HelpLink: {0}&quot;, newExcept-&gt;HelpLink );\n         Console::WriteLine( &quot;Source:   {0}&quot;, newExcept-&gt;Source );\n         \n         // This FileStream is used for the serialization.\n         FileStream^ stream = gcnew FileStream( &quot;NewException.dat&quot;,FileMode::Create );\n         try\n         {\n            \n            // Serialize the derived exception.\n            SoapFormatter^ formatter = gcnew SoapFormatter( nullptr,StreamingContext(StreamingContextStates::File) );\n            formatter-&gt;Serialize( stream, newExcept );\n            \n            // Rewind the stream and deserialize the \n            // exception.\n            stream-&gt;Position = 0;\n            SecondLevelException^ deserExcept = dynamic_cast&lt;SecondLevelException^&gt;(formatter-&gt;Deserialize( stream ));\n            Console::WriteLine( &quot;<br>Serialized the exception, and then &quot;\n            &quot;deserialized the resulting stream &quot;\n            &quot;into a <br>new exception. &quot;\n            &quot;The deserialization changed the case &quot;\n            &quot;of certain properties:<br>&quot; );\n            \n            // Throw the deserialized exception again.\n            throw deserExcept;\n         }\n         catch ( SerializationException^ se ) \n         {\n            Console::WriteLine( &quot;Failed to serialize: {0}&quot;, se-&gt;ToString() );\n         }\n         finally\n         {\n            stream-&gt;Close();\n         }\n\n      }\n\n   }\n   catch ( Exception^ ex ) \n   {\n      Console::WriteLine( &quot;HelpLink: {0}&quot;, ex-&gt;HelpLink );\n      Console::WriteLine( &quot;Source:   {0}&quot;, ex-&gt;Source );\n      Console::WriteLine();\n      Console::WriteLine( ex-&gt;ToString() );\n   }\n\n}\n\n/*\nThis example of the Exception constructor and Exception.GetObjectData\nwith SerializationInfo and StreamingContext parameters generates\nthe following output.\n\nForced a division by 0, caught the resulting exception,\nand created a derived exception:\n\nHelpLink: http://MSDN.Microsoft.com\nSource:   Exception_Class_Samples\n\nSerialized the exception, and then deserialized the resulting stream into a\nnew exception. The deserialization changed the case of certain properties:\n\nHelpLink: http://msdn.microsoft.com\nSource:   EXCEPTION_CLASS_SAMPLES\n\nSecondLevelException: Forced a division by 0 and threw another exception. ---&gt; S\nystem.DivideByZeroException: Attempted to divide by zero.\n   at main()\n   --- End of inner exception stack trace ---\n   at main()\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Exception.GetObjectData#1\">&#39; If compiling with the Visual Basic compiler (vbc.exe) from the command\n&#39; prompt, be sure to add the following switch:\n&#39;    /reference:System.Runtime.Serialization.Formatters.Soap.dll \nImports System.IO\nImports System.Runtime.Serialization\nImports System.Runtime.Serialization.Formatters.Soap\nImports System.Security.Permissions\n\n &#39; Define a serializable derived exception class.\n &lt;Serializable()&gt;  _\n Class SecondLevelException\n     Inherits Exception\n\n     &#39; This public constructor is used by class instantiators.\n     Public Sub New( message As String, inner As Exception )\n         MyBase.New( message, inner )\n\n         HelpLink = &quot;http://MSDN.Microsoft.com&quot;\n         Source = &quot;Exception_Class_Samples&quot;\n     End Sub\n\n     &#39; This protected constructor is used for deserialization.\n     Protected Sub New( info As SerializationInfo, _\n         context As StreamingContext )\n             MyBase.New( info, context )\n     End Sub\n\n     &#39; GetObjectData performs a custom serialization.\n     &lt;SecurityPermissionAttribute(SecurityAction.Demand, _\n                                  SerializationFormatter:=True)&gt; _\n     Overrides Sub GetObjectData( info As SerializationInfo, _\n         context As StreamingContext)\n\n         &#39; Change the case of two properties, and then use the\n         &#39; method of the base class.\n         HelpLink = HelpLink.ToLower()\n         Source = Source.ToUpperInvariant()\n\n         MyBase.GetObjectData(info, context)\n     End Sub\n End Class\n\n Module SerializationDemo\n\n     Sub Main()\n         Console.WriteLine( _\n             &quot;This example of the Exception constructor &quot; &amp; _\n             &quot;and Exception.GetObjectData &quot; &amp; vbCrLf &amp; _\n             &quot;with SerializationInfo and StreamingContext &quot; &amp; _\n             &quot;parameters generates &quot; &amp; vbCrLf &amp; _\n             &quot;the following output.&quot; &amp; vbCrLf )\n\n         &#39; This code forces a division by 0 and catches the\n         &#39; resulting exception.\n         Try\n             Try\n                 Dim zero As Integer = 0\n                 Dim ecks As Integer = 1 \\ zero\n\n             &#39; Create a new exception to throw again.\n             Catch ex As Exception\n\n                 Dim newExcept As New SecondLevelException( _\n                     &quot;Forced a division by 0 and threw &quot; &amp; _\n                     &quot;another exception.&quot;, ex )\n\n                 Console.WriteLine( _\n                     &quot;Forced a division by 0, caught the &quot; &amp; _\n                     &quot;resulting exception, &quot; &amp; vbCrLf &amp; _\n                     &quot;and created a derived exception:&quot; &amp; vbCrLf )\n                 Console.WriteLine( &quot;HelpLink: {0}&quot;, _\n                     newExcept.HelpLink )\n                 Console.WriteLine( &quot;Source:   {0}&quot;, _\n                     newExcept.Source )\n\n                 &#39; This FileStream is used for the serialization.\n                 Dim stream As New FileStream( _\n                     &quot;NewException.dat&quot;, FileMode.Create )\n\n                 &#39; Serialize the derived exception.\n                 Try\n                     Dim formatter As New SoapFormatter( Nothing, _\n                         New StreamingContext( _\n                             StreamingContextStates.File ) )\n                     formatter.Serialize( stream, newExcept )\n\n                     &#39; Rewind the stream and deserialize the\n                     &#39; exception.\n                     stream.Position = 0\n                     Dim deserExcept As SecondLevelException = _\n                         CType( formatter.Deserialize( stream ), _\n                             SecondLevelException )\n\n                     Console.WriteLine( vbCrLf &amp; _\n                         &quot;Serialized the exception, and then &quot; &amp; _\n                         &quot;deserialized the resulting stream &quot; &amp; _\n                         &quot;into a &quot; &amp; vbCrLf &amp; &quot;new exception. &quot; &amp; _\n                         &quot;The deserialization changed the case &quot; &amp; _\n                         &quot;of certain properties:&quot; &amp; vbCrLf )\n\n                     &#39; Throw the deserialized exception again.\n                     Throw deserExcept\n\n                 Catch se As SerializationException\n                     Console.WriteLine( &quot;Failed to serialize: {0}&quot;, _\n                         se.ToString( ) )\n\n                 Finally\n                     stream.Close( )\n                 End Try\n             End Try\n         Catch ex As Exception\n             Console.WriteLine( &quot;HelpLink: {0}&quot;, ex.HelpLink )\n             Console.WriteLine( &quot;Source:   {0}&quot;, ex.Source )\n\n             Console.WriteLine( )\n             Console.WriteLine( ex.ToString( ) )\n         End Try\n     End Sub\n End Module\n&#39; This example displays the following output:\n&#39; \n&#39; Forced a division by 0, caught the resulting exception,\n&#39; and created a derived exception:\n&#39; \n&#39; HelpLink: http://MSDN.Microsoft.com\n&#39; Source:   Exception_Class_Samples\n&#39; \n&#39; Serialized the exception, and then deserialized the resulting stream into a\n&#39; new exception. The deserialization changed the case of certain properties:\n&#39; \n&#39; HelpLink: http://msdn.microsoft.com\n&#39; Source:   EXCEPTION_CLASS_SAMPLES\n&#39; \n&#39; NDP_UE_VB.SecondLevelException: Forced a division by 0 and threw another exce\n&#39; ption. ---&gt; System.DivideByZeroException: Attempted to divide by zero.\n&#39;    at NDP_UE_VB.SerializationDemo.Main()\n&#39;    --- End of inner exception stack trace ---\n&#39;    at NDP_UE_VB.SerializationDemo.Main()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Exception__ctor_System_String_System_Exception_\">\r\n    \r\n            <a id=\"System_Exception__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Exception(String,Exception)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> class with a specified error message and a reference to the inner exception that is the cause of this exception.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Exception (string message, Exception innerException);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The error message that explains the reason for the exception.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>innerException</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The exception that is the cause of the current exception, or a null reference (<code>Nothing</code> in Visual Basic) if no inner exception is specified.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a> property. The <a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a> property returns the same value that is passed into the constructor, or a null reference (<code>Nothing</code> in Visual Basic) if the <a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a> property does not supply the inner exception value to the constructor.  </p>\n<p> The following table shows the initial property values for an instance of <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a>.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a></td>\n<td>The inner exception reference.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a></td>\n<td>The error message string.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example derives an <code>Exception</code> for a specific condition. The code demonstrates the use of the constructor that takes a message and an inner exception as parameters, for both the derived class and the base <code>Exception</code> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Exception.Ctor#3\">// Example for the Exception( string, Exception ) constructor.\nusing System;\n\nnamespace NDP_UE_CS\n{\n    // Derive an exception with a specifiable message and inner exception.\n    class LogTableOverflowException : Exception\n    {\n        const string overflowMessage = \n            &quot;The log table has overflowed.&quot;;\n\n        public LogTableOverflowException( ) :\n            base( overflowMessage )\n        { }\n\n        public LogTableOverflowException( string auxMessage ) :\n            base( String.Format( &quot;{0} - {1}&quot;, \n                overflowMessage, auxMessage ) )\n        { }\n\n        public LogTableOverflowException( \n            string auxMessage, Exception inner ) :\n                base( String.Format( &quot;{0} - {1}&quot;, \n                    overflowMessage, auxMessage ), inner )\n        { }\n    }\n\n    class LogTable\n    {\n        public LogTable( int numElements )\n        {\n            logArea = new string[ numElements ];\n            elemInUse = 0;\n        }\n\n        protected string[ ] logArea;\n        protected int       elemInUse;\n\n        // The AddRecord method throws a derived exception \n        // if the array bounds exception is caught.\n        public    int       AddRecord( string newRecord )\n        {\n            try\n            {\n                logArea[ elemInUse ] = newRecord;\n                return elemInUse++;\n            }\n            catch( Exception ex )\n            {\n                throw new LogTableOverflowException( \n                    String.Format( &quot;Record \\&quot;{0}\\&quot; was not logged.&quot;, \n                        newRecord ), ex );\n            }\n        }\n    }\n\n    class OverflowDemo \n    {\n        // Create a log table and force an overflow.\n        public static void Main() \n        {\n            LogTable log = new LogTable( 4 );\n\n            Console.WriteLine( \n                &quot;This example of the Exception( string, Exception )&quot; +\n                &quot;<br>constructor generates the following output.&quot; );\n            Console.WriteLine( \n                &quot;<br>Example of a derived exception &quot; +\n                &quot;that references an inner exception:<br>&quot; );\n            try\n            {\n                for( int count = 1; ; count++ )\n                {\n                    log.AddRecord( \n                        String.Format( \n                            &quot;Log record number {0}&quot;, count ) );\n                }\n            }\n            catch( Exception ex )\n            {\n                Console.WriteLine( ex.ToString( ) );\n            }\n        }\n    }\n}\n\n/*\nThis example of the Exception( string, Exception )\nconstructor generates the following output.\n\nExample of a derived exception that references an inner exception:\n\nNDP_UE_CS.LogTableOverflowException: The log table has overflowed. - Record &quot;Lo\ng record number 5&quot; was not logged. ---&gt; System.IndexOutOfRangeException: Index\nwas outside the bounds of the array.\n   at NDP_UE_CS.LogTable.AddRecord(String newRecord)\n   --- End of inner exception stack trace ---\n   at NDP_UE_CS.LogTable.AddRecord(String newRecord)\n   at NDP_UE_CS.OverflowDemo.Main()\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Exception.Ctor#3\">// Example for the Exception( String*, Exception* ) constructor.\nusing namespace System;\n\nnamespace NDP_UE_CPP\n{\n\n   // Derive an exception with a specifiable message and inner exception.\n   public ref class LogTableOverflowException: public Exception\n   {\n   private:\n      static String^ overflowMessage =  &quot;The log table has overflowed.&quot;;\n\n   public:\n      LogTableOverflowException()\n         : Exception( overflowMessage )\n      {}\n\n      LogTableOverflowException( String^ auxMessage )\n         : Exception( String::Format( &quot;{0} - {1}&quot;, overflowMessage, auxMessage ) )\n      {}\n\n      LogTableOverflowException( String^ auxMessage, Exception^ inner )\n         : Exception( String::Format( &quot;{0} - {1}&quot;, overflowMessage, auxMessage ), inner )\n      {}\n\n   };\n\n   public ref class LogTable\n   {\n   public:\n      LogTable( int numElements )\n      {\n         logArea = gcnew array&lt;String^&gt;(numElements);\n         elemInUse = 0;\n      }\n\n\n   protected:\n      array&lt;String^&gt;^logArea;\n      int elemInUse;\n\n   public:\n\n      // The AddRecord method throws a derived exception \n      // if the array bounds exception is caught.\n      int AddRecord( String^ newRecord )\n      {\n         try\n         {\n            logArea[ elemInUse ] = newRecord;\n            return elemInUse++;\n         }\n         catch ( Exception^ ex ) \n         {\n            throw gcnew LogTableOverflowException( String::Format( &quot;Record \\&quot;{0}\\&quot; was not logged.&quot;, newRecord ),ex );\n         }\n\n      }\n\n   };\n\n\n   // Create a log table and force an overflow.\n   void ForceOverflow()\n   {\n      LogTable^ log = gcnew LogTable( 4 );\n      try\n      {\n         for ( int count = 1; ; count++ )\n         {\n            log-&gt;AddRecord( String::Format( &quot;Log record number {0}&quot;, count ) );\n\n         }\n      }\n      catch ( Exception^ ex ) \n      {\n         Console::WriteLine( ex-&gt;ToString() );\n      }\n\n   }\n\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the Exception( String*, Exception* )<br>&quot;\n   &quot;constructor generates the following output.&quot; );\n   Console::WriteLine( &quot;<br>Example of a derived exception &quot;\n   &quot;that references an inner exception:<br>&quot; );\n   NDP_UE_CPP::ForceOverflow();\n}\n\n/*\nThis example of the Exception( String*, Exception* )\nconstructor generates the following output.\n\nExample of a derived exception that references an inner exception:\n\nNDP_UE_CPP.LogTableOverflowException: The log table has overflowed. - Record &quot;L\nog record number 5&quot; was not logged. ---&gt; System.IndexOutOfRangeException: Index\n was outside the bounds of the array.\n   at NDP_UE_CPP.LogTable.AddRecord(String newRecord)\n   --- End of inner exception stack trace ---\n   at NDP_UE_CPP.LogTable.AddRecord(String newRecord)\n   at NDP_UE_CPP.ForceOverflow()\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Exception.Ctor#3\">&#39; Sample for Exception( String, Exception ) constructor.\nImports System\nImports Microsoft.VisualBasic\n\nNamespace NDP_UE_VB\n\n    &#39; Derive an exception with a specifiable message and inner exception.\n    Class LogTableOverflowException\n        Inherits Exception\n\n        Private Const overflowMessage As String = _\n            &quot;The log table has overflowed.&quot;\n           \n        Public Sub New( )\n            MyBase.New( overflowMessage )\n        End Sub &#39; New\n           \n        Public Sub New( auxMessage As String )\n            MyBase.New( String.Format( &quot;{0} - {1}&quot;, _\n                overflowMessage, auxMessage ) )\n        End Sub &#39; New\n           \n        Public Sub New( auxMessage As String, inner As Exception )\n            MyBase.New( String.Format( &quot;{0} - {1}&quot;, _\n                overflowMessage, auxMessage ), inner )\n        End Sub &#39; New\n    End Class &#39; LogTableOverflowException\n\n    Class LogTable\n       \n        Public Sub New( numElements As Integer )\n            logArea = New String( numElements ) { }\n            elemInUse = 0\n        End Sub &#39; New\n           \n        Protected logArea( ) As String\n        Protected elemInUse As Integer\n           \n        &#39; The AddRecord method throws a derived exception \n        &#39; if the array bounds exception is caught.\n        Public Function AddRecord( newRecord As String ) As Integer\n\n            Try\n                Dim curElement as Integer = elemInUse\n                logArea( elemInUse ) = newRecord\n                elemInUse += 1\n                Return curElement\n\n            Catch ex As Exception\n                Throw New LogTableOverflowException( String.Format( _\n                    &quot;Record &quot;&quot;{0}&quot;&quot; was not logged.&quot;, newRecord ), ex )\n            End Try\n        End Function &#39; AddRecord\n        End Class &#39; LogTable\n\n        Module OverflowDemo\n           \n        &#39; Create a log table and force an overflow.\n        Sub Main()\n            Dim log As New LogTable(4)\n              \n            Console.WriteLine( _\n                &quot;This example of the Exception( String, Exception )&quot; &amp; _\n                vbCrLf &amp; &quot;constructor generates the following output.&quot; )\n            Console.WriteLine( vbCrLf &amp; _\n                &quot;Example of a derived exception &quot; &amp; vbCrLf &amp; _\n                &quot;that references an inner exception:&quot; &amp; vbCrLf )\n            Try\n                Dim count As Integer = 0\n                 \n                Do\n                    log.AddRecord( _\n                        String.Format( _\n                            &quot;Log record number {0}&quot;, count ) )\n                    count += 1\n                Loop\n\n            Catch ex As Exception\n                Console.WriteLine( ex.ToString( ) )\n            End Try\n        End Sub &#39; Main\n\n    End Module &#39; OverflowDemo\nEnd Namespace &#39; NDP_UE_VB\n\n&#39; This example of the Exception( String, Exception )\n&#39; constructor generates the following output.\n&#39; \n&#39; Example of a derived exception\n&#39; that references an inner exception:\n&#39; \n&#39; NDP_UE_VB.LogTableOverflowException: The log table has overflowed. - Record &quot;\n&#39; Log record number 5&quot; was not logged. ---&gt; System.IndexOutOfRangeException: In\n&#39; dex was outside the bounds of the array.\n&#39;    at NDP_UE_VB.LogTable.AddRecord(String newRecord)\n&#39;    --- End of inner exception stack trace ---\n&#39;    at NDP_UE_VB.LogTable.AddRecord(String newRecord)\n&#39;    at NDP_UE_VB.OverflowDemo.Main()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Exception_Data\">\r\n    \r\n            <a id=\"System_Exception_Data_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Data</div>        \r\n          </div>\r\n    \r\n            <p>Gets a collection of key/value pairs that provide additional user-defined information about the exception.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Collections.IDictionary Data { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a></div>\r\n                  </div>\r\n                  <p>An object that implements the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> interface and contains a collection of user-defined key/value pairs. The default is an empty collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">System.Collections.IDictionary</a> object returned by the Data property to store and retrieve supplementary information relevant to the exception. The information is in the form of an arbitrary number of user-defined key/value pairs. The key component of each key/value pair is typically an identifying string, whereas the value component of the pair can be any type of object.  </p>\n<h2 id=\"keyvalue-pair-security\">Key/Value Pair Security</h2>\n<p> The key/value pairs stored in the collection returned by the Data property are not secure. If your application calls a nested series of routines, and each routine contains exception handlers, the resulting call stack contains a hierarchy of those exception handlers. If a lower-level routine throws an exception, any upper-level exception handler in the call stack hierarchy can read and/or modify the key/value pairs stored in the collection by any other exception handler. This means you must guarantee that the information in the key/value pairs is not confidential and that your application will operate correctly if the information in the key/value pairs is corrupted.  </p>\n<h2 id=\"key-conflicts\">Key Conflicts</h2>\n<p> A key conflict occurs when different exception handlers specify the same key to access a key/value pair. Use caution when developing your application because the consequence of a key conflict is that lower-level exception handlers can inadvertently communicate with higher-level exception handlers, and this communication might cause subtle program errors. However, if you are cautious you can use key conflicts to enhance your application.  </p>\n<h2 id=\"avoiding-key-conflicts\">Avoiding Key Conflicts</h2>\n<p> Avoid key conflicts by adopting a naming convention to generate unique keys for key/value pairs. For example, a naming convention might yield a key that consists of the period-delimited name of your application, the method that provides supplementary information for the pair, and a unique identifier.  </p>\n<p> Suppose two applications, named Products and Suppliers, each has a method named Sales. The Sales method in the Products application provides the identification number (the stock keeping unit or SKU) of a product. The Sales method in the Suppliers application provides the identification number, or SID, of a supplier. Consequently, the naming convention for this example yields the keys, &quot;Products.Sales.SKU&quot; and &quot;Suppliers.Sales.SID&quot;.  </p>\n<h2 id=\"exploiting-key-conflicts\">Exploiting Key Conflicts</h2>\n<p> Exploit key conflicts by using the presence of one or more special, prearranged keys to control processing. Suppose, in one scenario, the highest level exception handler in the call stack hierarchy catches all exceptions thrown by lower-level exception handlers. If a key/value pair with a special key exists, the high-level exception handler formats the remaining key/value pairs in the <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object in some nonstandard way; otherwise, the remaining key/value pairs are formatted in some normal manner.  </p>\n<p> Now suppose, in another scenario, the exception handler at each level of the call stack hierarchy catches the exception thrown by the next lower-level exception handler. In addition, each exception handler knows the collection returned by the Data property contains a set of key/value pairs that can be accessed with a prearranged set of keys.  </p>\n<p> Each exception handler uses the prearranged set of keys to update the value component of the corresponding key/value pair with information unique to that exception handler. After the update process is complete, the exception handler throws the exception to the next higher-level exception handler. Finally, the highest level exception handler accesses the key/value pairs and displays the consolidated update information from all the lower-level exception handlers.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to add and retrieve information using the Data property.  </p>\n<pre><code class=\"lang-vb\" name=\"exception.data#1\">Imports System.Collections\n\nModule Example\n   Public Sub Main()\n      Console.WriteLine()\n      Console.WriteLine(&quot;Exception with some extra information...&quot;)\n      RunTest(False)\n      Console.WriteLine()\n      Console.WriteLine(&quot;Exception with all extra information...&quot;)\n      RunTest(True)\n   End Sub\n\n   Public Sub RunTest(displayDetails As Boolean)\n      Try\n         NestedRoutine1(displayDetails)\n      Catch e As Exception\n         Console.WriteLine(&quot;An exception was thrown.&quot;)\n         Console.WriteLine(e.Message)\n         If e.Data.Count &gt; 0 Then\n            Console.WriteLine(&quot;  Extra details:&quot;)\n            For Each de As DictionaryEntry In e.Data\n               Console.WriteLine(&quot;    Key: {0,-20}      Value: {1}&quot;,\n                                 &quot;&#39;&quot; + de.Key.ToString() + &quot;&#39;&quot;, de.Value)\n            Next\n         End If \n      End Try \n   End Sub \n\n   Public Sub NestedRoutine1(displayDetails As Boolean)\n      Try\n         NestedRoutine2(displayDetails)\n      Catch e As Exception\n         e.Data(&quot;ExtraInfo&quot;) = &quot;Information from NestedRoutine1.&quot;\n         e.Data.Add(&quot;MoreExtraInfo&quot;, &quot;More information from NestedRoutine1.&quot;)\n         Throw e\n      End Try \n   End Sub\n\n   Public Sub NestedRoutine2(displayDetails As Boolean)\n      Dim e As New Exception(&quot;This statement is the original exception message.&quot;)\n      If displayDetails Then \n         Dim s As String = &quot;Information from NestedRoutine2.&quot; \n         Dim i As Integer = -903\n         Dim dt As DateTime = DateTime.Now\n         e.Data.Add(&quot;stringInfo&quot;, s)\n         e.Data(&quot;IntInfo&quot;) = i\n         e.Data(&quot;DateTimeInfo&quot;) = dt\n      End If \n      Throw e\n   End Sub \nEnd Module\n&#39; This example displays the following output: \n&#39;    Exception with some extra information...\n&#39;    An exception was thrown.\n&#39;    This statement is the original exception message.\n&#39;      Extra details:\n&#39;        Key: &#39;ExtraInfo&#39;               Value: Information from NestedRoutine1.\n&#39;        Key: &#39;MoreExtraInfo&#39;           Value: More information from NestedRoutine1.\n&#39;    \n&#39;    Exception with all extra information...\n&#39;    An exception was thrown.\n&#39;    This statement is the original exception message.\n&#39;      Extra details:\n&#39;        Key: &#39;stringInfo&#39;              Value: Information from NestedRoutine2.\n&#39;        Key: &#39;IntInfo&#39;                 Value: -903\n&#39;        Key: &#39;DateTimeInfo&#39;            Value: 7/29/2013 10:50:13 AM\n&#39;        Key: &#39;ExtraInfo&#39;               Value: Information from NestedRoutine1.\n&#39;        Key: &#39;MoreExtraInfo&#39;           Value: More information from NestedRoutine1. \n</code></pre><pre><code class=\"lang-cs\" name=\"exception.data#1\">// This example demonstrates the Exception.Data property.\nusing System;\nusing System.Collections;\n\nclass Sample \n{\n   public static void Main()\n   {\n      Console.WriteLine(&quot;<br>Exception with some extra information...&quot;);\n      RunTest(false);\n      Console.WriteLine(&quot;<br>Exception with all extra information...&quot;);\n      RunTest(true);\n   }\n\n   public static void RunTest(bool displayDetails)\n   {\n      try {\n         NestedRoutine1(displayDetails);\n      }\n      catch (Exception e) {\n         Console.WriteLine(&quot;An exception was thrown.&quot;);\n         Console.WriteLine(e.Message);\n         if (e.Data.Count &gt; 0) {\n            Console.WriteLine(&quot;  Extra details:&quot;);\n            foreach (DictionaryEntry de in e.Data)\n               Console.WriteLine(&quot;    Key: {0,-20}      Value: {1}&quot;, \n                                 &quot;&#39;&quot; + de.Key.ToString() + &quot;&#39;&quot;, de.Value);\n         }\n      }\n   }\n    \n   public static void NestedRoutine1(bool displayDetails)\n   {\n      try {\n         NestedRoutine2(displayDetails);\n      }\n      catch (Exception e) {\n         e.Data[&quot;ExtraInfo&quot;] = &quot;Information from NestedRoutine1.&quot;;\n         e.Data.Add(&quot;MoreExtraInfo&quot;, &quot;More information from NestedRoutine1.&quot;);\n         throw;\n      }\n   }\n    \n   public static void NestedRoutine2(bool displayDetails)\n   {\n      Exception e = new Exception(&quot;This statement is the original exception message.&quot;);\n      if (displayDetails) {\n         string s = &quot;Information from NestedRoutine2.&quot;;\n         int i = -903;\n         DateTime dt = DateTime.Now;\n         e.Data.Add(&quot;stringInfo&quot;, s);\n         e.Data[&quot;IntInfo&quot;] = i;\n         e.Data[&quot;DateTimeInfo&quot;] = dt;\n      }\n      throw e;\n   }\n}\n// The example displays the following output: \n//    Exception with some extra information...\n//    An exception was thrown.\n//    This statement is the original exception message.\n//      Extra details:                                               \n//        Key: &#39;ExtraInfo&#39;               Value: Information from NestedRoutine1.\n//        Key: &#39;MoreExtraInfo&#39;           Value: More information from NestedRoutine1.\n//    \n//    Exception with all extra information...\n//    An exception was thrown.\n//    This statement is the original exception message.\n//      Extra details:\n//        Key: &#39;stringInfo&#39;              Value: Information from NestedRoutine2.\n//        Key: &#39;IntInfo&#39;                 Value: -903\n//        Key: &#39;DateTimeInfo&#39;            Value: 7/29/2013 10:50:13 AM\n//        Key: &#39;ExtraInfo&#39;               Value: Information from NestedRoutine1.\n//        Key: &#39;MoreExtraInfo&#39;           Value: More information from NestedRoutine1. \n</code></pre><pre><code class=\"lang-cpp\" name=\"exception.data#1\">using namespace System;\nusing namespace System::Collections;\n\nvoid NestedRunTest( bool displayDetails ); // forward declarations\nvoid NestedRoutine1( bool displayDetails );\nvoid NestedRoutine2( bool displayDetails );\nvoid RunTest( bool displayDetails );\n\nint main()\n{\n   Console::WriteLine(&quot;<br>Exception with some extra information...&quot; );\n   RunTest(false);\n   Console::WriteLine(&quot;<br>Exception with all extra information...&quot; );\n   RunTest(true);\n}\n\nvoid RunTest( bool displayDetails )\n{\n   try\n   {\n      NestedRoutine1( displayDetails );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;An exception was thrown.&quot; );\n      Console::WriteLine( e-&gt;Message );\n      if ( e-&gt;Data != nullptr )\n      {\n         Console::WriteLine( &quot;  Extra details:&quot; );\n\n         for each (DictionaryEntry de in e-&gt;Data)\n            Console::WriteLine(&quot;    Key: {0,-20}      Value: {1}&quot;, \n                               &quot;&#39;&quot; + de.Key-&gt;ToString() + &quot;&#39;&quot;, de.Value);\n      }\n   }\n}\n\nvoid NestedRoutine1( bool displayDetails )\n{\n   try\n   {\n      NestedRoutine2( displayDetails );\n   }\n   catch ( Exception^ e ) \n   {\n      e-&gt;Data[ &quot;ExtraInfo&quot; ] = &quot;Information from NestedRoutine1.&quot;;\n      e-&gt;Data-&gt;Add( &quot;MoreExtraInfo&quot;, &quot;More information from NestedRoutine1.&quot; );\n      throw;\n   }\n}\n\nvoid NestedRoutine2( bool displayDetails )\n{\n   Exception^ e = gcnew Exception( &quot;This statement is the original exception message.&quot; );\n   if ( displayDetails )\n   {\n      String^ s = &quot;Information from NestedRoutine2.&quot;;\n      int i = -903;\n      DateTime dt = DateTime::Now;\n      e-&gt;Data-&gt;Add( &quot;stringInfo&quot;, s );\n      e-&gt;Data[ &quot;IntInfo&quot; ] = i;\n      e-&gt;Data[ &quot;DateTimeInfo&quot; ] = dt;\n   }\n\n   throw e;\n}\n\n/*\nThis example produces the following results:\n\nException with some extra information...\nAn exception was thrown.\nThis statement is the original exception message.\n  Extra details:\n    The key is &#39;ExtraInfo&#39; and the value is: Information from NestedRoutine1.\n    The key is &#39;MoreExtraInfo&#39; and the value is: More information from NestedRoutine1.\n\nException with all extra information...\nAn exception was thrown.\nThis statement is the original exception message.\n  Extra details:\n    The key is &#39;stringInfo&#39; and the value is: Information from NestedRoutine2.\n    The key is &#39;IntInfo&#39; and the value is: -903\n    The key is &#39;DateTimeInfo&#39; and the value is: 11/26/2002 2:12:58 PM\n    The key is &#39;ExtraInfo&#39; and the value is: Information from NestedRoutine1.\n    The key is &#39;MoreExtraInfo&#39; and the value is: More information from NestedRoutine1.\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Exception_HelpLink\">\r\n    \r\n            <a id=\"System_Exception_HelpLink_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HelpLink</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a link to the help file associated with this exception.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string HelpLink { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The Uniform Resource Name (URN) or Uniform Resource Locator (URL).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value, which represents a help file, is a URN or URL. For example, the <code>HelpLink</code> value could be:  </p>\n<p> &quot;file:///C:/Applications/Bazzal/help.html#ErrorNum42&quot;</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example throws an <code>Exception</code> that sets the <code>HelpLink</code> property in its constructor and then catches the exception and displays <code>HelpLink</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Exception.Properties#1\">// Example for the Exception::HelpLink, Exception::Source,\n// Exception::StackTrace, and Exception::TargetSite properties.\nusing namespace System;\n\nnamespace NDP_UE_CPP\n{\n\n   // Derive an exception; the constructor sets the HelpLink and \n   // Source properties.\n   public ref class LogTableOverflowException: public Exception\n   {\n   private:\n      static String^ overflowMessage = &quot;The log table has overflowed.&quot;;\n\n   public:\n      LogTableOverflowException( String^ auxMessage, Exception^ inner )\n         : Exception( String::Format( &quot;{0} - {1}&quot;, overflowMessage, auxMessage ), inner )\n      {\n         this-&gt;HelpLink = &quot;http://msdn.microsoft.com&quot;;\n         this-&gt;Source = &quot;Exception_Class_Samples&quot;;\n      }\n\n   };\n\n   public ref class LogTable\n   {\n   public:\n      LogTable( int numElements )\n      {\n         logArea = gcnew array&lt;String^&gt;(numElements);\n         elemInUse = 0;\n      }\n\n\n   protected:\n      array&lt;String^&gt;^logArea;\n      int elemInUse;\n\n   public:\n\n      // The AddRecord method throws a derived exception if \n      // the array bounds exception is caught.\n      int AddRecord( String^ newRecord )\n      {\n         try\n         {\n            logArea[ elemInUse ] = newRecord;\n            return elemInUse++;\n         }\n         catch ( Exception^ ex ) \n         {\n            throw gcnew LogTableOverflowException( String::Format( &quot;Record \\&quot;{0}\\&quot; was not logged.&quot;, newRecord ),ex );\n         }\n\n      }\n\n   };\n\n\n   // Create a log table and force an overflow.\n   void ForceOverflow()\n   {\n      LogTable^ log = gcnew LogTable( 4 );\n      try\n      {\n         for ( int count = 1; ; count++ )\n         {\n            log-&gt;AddRecord( String::Format( &quot;Log record number {0}&quot;, count ) );\n\n         }\n      }\n      catch ( Exception^ ex ) \n      {\n         Console::WriteLine( &quot;<br>Message ---<br>{0}&quot;, ex-&gt;Message );\n         Console::WriteLine( &quot;<br>HelpLink ---<br>{0}&quot;, ex-&gt;HelpLink );\n         Console::WriteLine( &quot;<br>Source ---<br>{0}&quot;, ex-&gt;Source );\n         Console::WriteLine( &quot;<br>StackTrace ---<br>{0}&quot;, ex-&gt;StackTrace );\n         Console::WriteLine( &quot;<br>TargetSite ---<br>{0}&quot;, ex-&gt;TargetSite-&gt;ToString() );\n      }\n\n   }\n\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of <br>   Exception::Message, <br>&quot;\n   &quot;   Exception::HelpLink, <br>   Exception::Source, <br>&quot;\n   &quot;   Exception::StackTrace, and <br>   Exception::&quot;\n   &quot;TargetSite <br>generates the following output.&quot; );\n   NDP_UE_CPP::ForceOverflow();\n}\n\n/*\nThis example of\n   Exception::Message,\n   Exception::HelpLink,\n   Exception::Source,\n   Exception::StackTrace, and\n   Exception::TargetSite\ngenerates the following output.\n\nMessage ---\nThe log table has overflowed. - Record &quot;Log record number 5&quot; was not logged.\n\nHelpLink ---\nhttp://msdn.microsoft.com\n\nSource ---\nException_Class_Samples\n\nStackTrace ---\n   at NDP_UE_CPP.LogTable.AddRecord(String newRecord)\n   at NDP_UE_CPP.ForceOverflow()\n\nTargetSite ---\nInt32 AddRecord(System.String)\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Exception.Properties#1\">// Example for the Exception.HelpLink, Exception.Source,\n// Exception.StackTrace, and Exception.TargetSite properties.\nusing System;\n\nnamespace NDP_UE_CS\n{\n    // Derive an exception; the constructor sets the HelpLink and \n    // Source properties.\n    class LogTableOverflowException : Exception\n    {\n        const string overflowMessage = &quot;The log table has overflowed.&quot;;\n\n        public LogTableOverflowException( \n            string auxMessage, Exception inner ) :\n                base( String.Format( &quot;{0} - {1}&quot;, \n                    overflowMessage, auxMessage ), inner )\n        {\n            this.HelpLink = &quot;http://msdn.microsoft.com&quot;;\n            this.Source = &quot;Exception_Class_Samples&quot;;\n        }\n    }\n\n    class LogTable\n    {\n        public LogTable( int numElements )\n        {\n            logArea = new string[ numElements ];\n            elemInUse = 0;\n        }\n\n        protected string[ ] logArea;\n        protected int       elemInUse;\n\n        // The AddRecord method throws a derived exception if \n        // the array bounds exception is caught.\n        public    int       AddRecord( string newRecord )\n        {\n            try\n            {\n                logArea[ elemInUse ] = newRecord;\n                return elemInUse++;\n            }\n            catch( Exception e )\n            {\n                throw new LogTableOverflowException( \n                    String.Format( &quot;Record \\&quot;{0}\\&quot; was not logged.&quot;, \n                        newRecord ), e );\n            }\n        }\n    }\n\n    class OverflowDemo \n    {\n        // Create a log table and force an overflow.\n        public static void Main() \n        {\n            LogTable log = new LogTable( 4 );\n\n            Console.WriteLine( \n                &quot;This example of <br>   Exception.Message, <br>&quot; +\n                &quot;   Exception.HelpLink, <br>   Exception.Source, <br>&quot; +\n                &quot;   Exception.StackTrace, and <br>   Exception.&quot; +\n                &quot;TargetSite <br>generates the following output.&quot; );\n\n            try\n            {\n                for( int count = 1; ; count++ )\n                {\n                    log.AddRecord( \n                        String.Format( \n                            &quot;Log record number {0}&quot;, count ) );\n                }\n            }\n            catch( Exception ex )\n            {\n                Console.WriteLine( &quot;<br>Message ---<br>{0}&quot;, ex.Message );\n                Console.WriteLine( \n                    &quot;<br>HelpLink ---<br>{0}&quot;, ex.HelpLink );\n                Console.WriteLine( &quot;<br>Source ---<br>{0}&quot;, ex.Source );\n                Console.WriteLine( \n                    &quot;<br>StackTrace ---<br>{0}&quot;, ex.StackTrace );\n                Console.WriteLine( \n                    &quot;<br>TargetSite ---<br>{0}&quot;, ex.TargetSite );\n            }\n        }\n    }\n}\n\n/*\nThis example of\n   Exception.Message,\n   Exception.HelpLink,\n   Exception.Source,\n   Exception.StackTrace, and\n   Exception.TargetSite\ngenerates the following output.\n\nMessage ---\nThe log table has overflowed. - Record &quot;Log record number 5&quot; was not logged.\n\nHelpLink ---\nhttp://msdn.microsoft.com\n\nSource ---\nException_Class_Samples\n\nStackTrace ---\n   at NDP_UE_CS.LogTable.AddRecord(String newRecord)\n   at NDP_UE_CS.OverflowDemo.Main()\n\nTargetSite ---\nInt32 AddRecord(System.String)\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Exception.Properties#1\">&#39; Example for the Exception.HelpLink, Exception.Source,\n&#39; Exception.StackTrace, and Exception.TargetSite properties.\nImports System\nImports Microsoft.VisualBasic\n\nNamespace NDP_UE_VB\n\n    &#39; Derive an exception; the constructor sets the HelpLink and \n    &#39; Source properties.\n    Class LogTableOverflowException\n        Inherits Exception\n\n        Private Const overflowMessage As String = _\n            &quot;The log table has overflowed.&quot;\n           \n        Public Sub New( auxMessage As String, inner As Exception )\n            MyBase.New( String.Format( &quot;{0} - {1}&quot;, _\n                overflowMessage, auxMessage ), inner )\n\n            Me.HelpLink = &quot;http://msdn.microsoft.com&quot;\n            Me.Source = &quot;Exception_Class_Samples&quot;\n\n        End Sub &#39; New\n    End Class &#39; LogTableOverflowException\n\n    Class LogTable\n       \n        Public Sub New(numElements As Integer)\n            logArea = New String(numElements) {}\n            elemInUse = 0\n        End Sub &#39; New\n           \n        Protected logArea() As String\n        Protected elemInUse As Integer\n           \n        &#39; The AddRecord method throws a derived exception if \n        &#39; the array bounds exception is caught.\n        Public Function AddRecord( newRecord As String ) As Integer\n\n            Try\n                Dim curElement as Integer = elemInUse\n                logArea( elemInUse ) = newRecord\n                elemInUse += 1\n                Return curElement\n\n            Catch ex As Exception\n                Throw New LogTableOverflowException( _\n                    String.Format( &quot;Record &quot;&quot;{0}&quot;&quot; was not logged.&quot;, _\n                        newRecord ), ex )\n            End Try\n        End Function &#39; AddRecord\n    End Class &#39; LogTable\n\n    Module OverflowDemo\n       \n        &#39; Create a log table and force an overflow.\n        Sub Main( )\n            Dim log As New LogTable( 4 )\n              \n            Console.WriteLine( &quot;This example of &quot; &amp; vbCrLf &amp; _\n                &quot;   Exception.Message, &quot; &amp; vbCrLf &amp; _\n                &quot;   Exception.HelpLink, &quot; &amp; vbCrLf &amp; _\n                &quot;   Exception.Source, &quot; &amp; vbCrLf &amp; _\n                &quot;   Exception.StackTrace, and &quot; &amp; vbCrLf &amp; _\n                &quot;   Exception.TargetSite &quot; &amp; vbCrLf &amp; _\n                &quot;generates the following output.&quot; )\n              \n            Try\n                Dim count As Integer = 0\n                 \n                Do\n                    log.AddRecord( _\n                        String.Format( &quot;Log record number {0}&quot;, count ) )\n                    count += 1\n                Loop\n\n            Catch ex As Exception\n                Console.WriteLine( vbCrLf &amp; _\n                    &quot;Message ---&quot; &amp; vbCrLf &amp; ex.Message )\n                Console.WriteLine( vbCrLf &amp; _\n                    &quot;HelpLink ---&quot; &amp; vbCrLf &amp; ex.HelpLink )\n                Console.WriteLine( vbCrLf &amp; _\n                    &quot;Source ---&quot; &amp; vbCrLf &amp; ex.Source )\n                Console.WriteLine( vbCrLf &amp; _\n                    &quot;StackTrace ---&quot; &amp; vbCrLf &amp; ex.StackTrace )\n                Console.WriteLine( vbCrLf &amp; &quot;TargetSite ---&quot; &amp; _\n                    vbCrLf &amp; ex.TargetSite.ToString( ) )\n            End Try\n        End Sub &#39; Main\n\n    End Module &#39; OverflowDemo\nEnd Namespace &#39; NDP_UE_VB\n\n&#39; This example of\n&#39;    Exception.Message,\n&#39;    Exception.HelpLink,\n&#39;    Exception.Source,\n&#39;    Exception.StackTrace, and\n&#39;    Exception.TargetSite\n&#39; generates the following output.\n&#39; \n&#39; Message ---\n&#39; The log table has overflowed. - Record &quot;Log record number 5&quot; was not logged.\n&#39; \n&#39; HelpLink ---\n&#39; http://msdn.microsoft.com\n&#39; \n&#39; Source ---\n&#39; Exception_Class_Samples\n&#39; \n&#39; StackTrace ---\n&#39;    at NDP_UE_VB.LogTable.AddRecord(String newRecord)\n&#39;    at NDP_UE_VB.OverflowDemo.Main()\n&#39; \n&#39; TargetSite ---\n&#39; Int32 AddRecord(System.String)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Exception_HResult\">\r\n    \r\n            <a id=\"System_Exception_HResult_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HResult</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets HRESULT, a coded numerical value that is assigned to a specific exception.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int HResult { get; protected set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The HRESULT value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>HRESULT is a 32-bit value, divided into three different fields: a severity code, a facility code, and an error code. The severity code indicates whether the return value represents information, warning, or error. The facility code identifies the area of the system responsible for the error. The error code is a unique number that is assigned to represent the exception. Each exception is mapped to a distinct HRESULT. When managed code throws an exception, the runtime passes the HRESULT to the COM client. When unmanaged code returns an error, the HRESULT is converted to an exception, which is then thrown by the runtime. For information about HRESULT values and their corresponding .NET Framework exceptions, see <a href=\"../Topic/How%20to:%20Map%20HRESULTs%20and%20Exceptions.md\" data-linktype=\"relative-path\">How to: Map HRESULTs and Exceptions</a>. See <a href=\"http://msdn.microsoft.com/library/windows/desktop/aa378137.aspx\" data-linktype=\"external\">Common HRESULT Values</a> in the Windows documentation for a list of the values you are most likely to encounter.  </p>\n<p> Starting with the .NET Framework 4.5, the HResult property&#39;s setter is protected, whereas its getter is public.  In previous versions of the .NET Framework, both getter and setter are protected.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example defines a derived <code>Exception</code> class that sets the <code>HResult</code> property to a custom value in its constructor.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Exception.HResult#1\">// Example for the Exception::HResult property.\nusing namespace System;\n\nnamespace NDP_UE_CPP\n{\n\n   // Create the derived exception class.\n   ref class SecondLevelException: public Exception\n   {\n   private:\n      static int SecondLevelHResult = (int)0x81234567;\n\n   public:\n\n      // Set HResult for this exception, and include it in \n      // the exception message.\n      SecondLevelException( String^ message, Exception^ inner )\n         : Exception( String::Format( &quot;(HRESULT:0x{1:X8}) {0}&quot;, message, SecondLevelHResult ), inner )\n      {\n         HResult = SecondLevelHResult;\n      }\n\n   };\n\n\n   // This function forces a division by 0 and throws \n   // a second exception.\n   void DivideBy0()\n   {\n      try\n      {\n         try\n         {\n            int zero = 0;\n            int ecks = 1 / zero;\n         }\n         catch ( Exception^ ex ) \n         {\n            throw gcnew SecondLevelException( &quot;Forced a division by 0 and threw &quot;\n            &quot;a second exception.&quot;,ex );\n         }\n\n      }\n      catch ( Exception^ ex ) \n      {\n         Console::WriteLine( ex-&gt;ToString() );\n      }\n\n   }\n\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of Exception::HResult &quot;\n   &quot;generates the following output.<br>&quot; );\n   NDP_UE_CPP::DivideBy0();\n}\n\n/*\nThis example of Exception::HResult generates the following output.\n\nNDP_UE_CPP.SecondLevelException: (HRESULT:0x81234567) Forced a division by 0 an\nd threw a second exception. ---&gt; System.DivideByZeroException: Attempted to div\nide by zero.\n   at NDP_UE_CPP.DivideBy0()\n   --- End of inner exception stack trace ---\n   at NDP_UE_CPP.DivideBy0()\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Exception.HResult#1\">// Example for the Exception.HResult property.\nusing System;\n\nnamespace NDP_UE_CS\n{\n    // Create the derived exception class.\n    class SecondLevelException : Exception\n    {\n        const int SecondLevelHResult = unchecked( (int)0x81234567 );\n\n        // Set HResult for this exception, and include it in \n        // the exception message.\n        public SecondLevelException( string message, Exception inner ) :\n            base( string.Format( &quot;(HRESULT:0x{1:X8}) {0}&quot;, \n                message, SecondLevelHResult ), inner )\n        {\n            HResult = SecondLevelHResult;\n        }\n    }\n\n    class HResultDemo \n    {\n        public static void Main() \n        {\n            Console.WriteLine( \n                &quot;This example of Exception.HResult &quot; +\n                &quot;generates the following output.<br>&quot; );\n\n            // This function forces a division by 0 and throws \n            // a second exception.\n            try\n            {\n                try\n                {\n                    int  zero = 0;\n                    int  ecks = 1 / zero;\n                }\n                catch( Exception ex )\n                {\n                    throw new SecondLevelException( \n                        &quot;Forced a division by 0 and threw &quot; +\n                        &quot;a second exception.&quot;, ex );\n                }\n            }\n            catch( Exception ex )\n            {\n                Console.WriteLine( ex.ToString( ) );\n            }\n        }\n    }\n}\n\n/*\nThis example of Exception.HResult generates the following output.\n\nNDP_UE_CS.SecondLevelException: (HRESULT:0x81234567) Forced a division by 0 and\n threw a second exception. ---&gt; System.DivideByZeroException: Attempted to divi\nde by zero.\n   at NDP_UE_CS.HResultDemo.Main()\n   --- End of inner exception stack trace ---\n   at NDP_UE_CS.HResultDemo.Main()\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Exception.HResult#1\">&#39; Example for the Exception.HResult property.\nImports System\nImports Microsoft.VisualBasic\n\nNamespace NDP_UE_VB\n\n    &#39; Create the derived exception class.\n    Class SecondLevelException\n        Inherits Exception\n\n        Private Const SecondLevelHResult As Integer = &amp;H81234567\n       \n        &#39; Set HResult for this exception, and include it in \n        &#39; the exception message.\n        Public Sub New(message As String, inner As Exception)\n\n            MyBase.New( String.Format( &quot;(HRESULT:0x{1:X8}) {0}&quot;, _\n                message, SecondLevelHResult ), inner )\n            HResult = SecondLevelHResult\n        End Sub &#39; New\n    End Class &#39; SecondLevelException\n\n    Module HResultDemo\n       \n        Sub Main()\n            Console.WriteLine( _\n                &quot;This example of Exception.HResult &quot; &amp; _\n                &quot;generates the following output.&quot; &amp; vbCrLf )\n              \n            &#39; This function forces a division by 0 and throws \n            &#39; a second exception.\n            Try\n                Try\n                    Dim zero As Integer = 0\n                    Dim ecks As Integer = 1 \\ zero\n\n                Catch ex As Exception\n                    Throw New SecondLevelException( _\n                        &quot;Forced a division by 0 and threw &quot; &amp; _\n                        &quot;a second exception.&quot;, ex )\n                End Try\n              \n            Catch ex As Exception\n                Console.WriteLine( ex.ToString( ) )\n            End Try\n        End Sub &#39; Main\n\n    End Module &#39; HResultDemo\nEnd Namespace &#39; NDP_UE_VB\n\n&#39; This example of Exception.HResult generates the following output.\n&#39; \n&#39; NDP_UE_VB.SecondLevelException: (HRESULT:0x81234567) Forced a division by 0 a\n&#39; nd threw a second exception. ---&gt; System.DivideByZeroException: Attempted to\n&#39; divide by zero.\n&#39;    at NDP_UE_VB.HResultDemo.Main()\n&#39;    --- End of inner exception stack trace ---\n&#39;    at NDP_UE_VB.HResultDemo.Main()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Exception_InnerException\">\r\n    \r\n            <a id=\"System_Exception_InnerException_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InnerException</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> instance that caused the current exception.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Exception InnerException { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a></div>\r\n                  </div>\r\n                  <p>An object that describes the error that caused the current exception. The InnerException property returns the same value as was passed into the <span class=\"xref\">stem.Exception.#ctor(System.String,System.Exception)</span> constructor, or <code>null</code> if the inner exception value was not supplied to the constructor. This property is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When an exception <code>X</code> is thrown as a direct result of a previous exception <code>Y</code>, the InnerException property of <code>X</code> should contain a reference to <code>Y</code>.  </p>\n<p> Use the InnerException property to obtain the set of exceptions that led to the current exception.  </p>\n<p> You can create a new exception that catches an earlier exception. The code that handles the second exception can make use of the additional information from the earlier exception to handle the error more appropriately.  </p>\n<p> Suppose that there is a function that reads a file and formats the data from that file. In this example, as the code tries to read the file, an <a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a> is thrown. The function catches the <a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a> and throws a <a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a>. The <a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a> could be saved in the InnerException property of the <a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a>, enabling the code that catches the <a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a> to examine the cause of the initial error.  </p>\n<p> The InnerException property, which holds a reference to the inner exception, is set upon initialization of the exception object.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates throwing and catching an exception that references an inner exception.  </p>\n<pre><code class=\"lang-cs\" name=\"InnerEx#1\">using System;\n\npublic class AppException : Exception\n{\n   public AppException(String message) : base (message)\n   {}\n\n   public AppException(String message, Exception inner) : base(message,inner) {}\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      Example ex = new Example();\n\n      try {\n         ex.CatchInner();\n      }\n      catch(AppException e) {\n         Console.WriteLine (&quot;In catch block of Main method.&quot;);\n         Console.WriteLine(&quot;Caught: {0}&quot;, e.Message);\n         if (e.InnerException != null)\n            Console.WriteLine(&quot;Inner exception: {0}&quot;, e.InnerException);\n      }\n   }\n\n   public void ThrowInner ()\n   {\n      throw new AppException(&quot;Exception in ThrowInner method.&quot;);\n   }\n\n   public void CatchInner() \n   {\n      try {\n         this.ThrowInner();\n      }\n      catch (AppException e) {\n         throw new AppException(&quot;Error in CatchInner caused by calling the ThrowInner method.&quot;, e);\n      }\n   }\n}\n// The example displays the following output:\n//    In catch block of Main method.\n//    Caught: Error in CatchInner caused by calling the ThrowInner method.\n//    Inner exception: AppException: Exception in ThrowInner method.\n//       at Example.CatchInner()\n</code></pre><pre><code class=\"lang-vb\" name=\"InnerEx#1\">Public Class AppException : Inherits Exception\n   Public Sub New(message As String)\n      MyBase.New(message)\n   End Sub\n   \n   Public Sub New(message As String, inner As Exception)\n      MyBase.New(message, inner)\n   End Sub\nEnd Class\n\nPublic Class Example\n   Public Shared Sub Main()\n      Dim testInstance As New Example()\n      Try\n         testInstance.CatchInner()\n      Catch e As AppException\n         Console.WriteLine (&quot;In catch block of Main method.&quot;)\n         Console.WriteLine(&quot;Caught: {0}&quot;, e.Message)\n         If e.InnerException IsNot Nothing Then\n            Console.WriteLine(&quot;Inner exception: {0}&quot;, e.InnerException)\n         End If\n      End Try\n   End Sub\n   \n   Public Sub ThrowInner()\n      Throw New AppException(&quot;Exception in ThrowInner method.&quot;)\n   End Sub\n   \n   Public Sub CatchInner()\n      Try\n         Me.ThrowInner()\n      Catch e As AppException\n         Throw New AppException(&quot;Error in CatchInner caused by calling the ThrowInner method.&quot;, e)\n      End Try\n   End Sub\nEnd Class\n&#39; The example displays the following output:\n&#39;    In catch block of Main method.\n&#39;    Caught: Error in CatchInner caused by calling the ThrowInner method.\n&#39;    Inner exception: AppException: Exception in ThrowInner method.\n&#39;       at Example.CatchInner()\n</code></pre><pre><code class=\"lang-cpp\" name=\"InnerEx#1\">using namespace System;\n\npublic ref class AppException: public Exception\n{\npublic:\n   AppException(String^ message ) : Exception(message)\n   {}\n\n   AppException(String^ message, Exception^ inner) : Exception(message, inner)\n   {}\n};\n\npublic ref class Example\n{\npublic:\n   void ThrowInner()\n   {\n      throw gcnew AppException(&quot;Exception in ThrowInner method.&quot;);\n   }\n\n   void CatchInner()\n   {\n      try {\n         this-&gt;ThrowInner();\n      }\n      catch (AppException^ e) {\n         throw gcnew AppException(&quot;Error in CatchInner caused by calling the ThrowInner method.&quot;, e);\n      }\n   }\n};\n\nint main()\n{\n   Example^ ex = gcnew Example();\n   try {\n      ex-&gt;CatchInner();\n   }\n   catch (AppException^ e) {\n      Console::WriteLine(&quot;In catch block of Main method.&quot;);\n      Console::WriteLine(&quot;Caught: {0}&quot;, e-&gt;Message);\n      if (e-&gt;InnerException != nullptr)\n         Console::WriteLine(&quot;Inner exception: {0}&quot;, e-&gt;InnerException);\n   }\n}\n// The example displays the following output:\n//    In catch block of Main method.\n//    Caught: Error in CatchInner caused by calling the ThrowInner method.\n//    Inner exception: AppException: Exception in ThrowInner method.\n//       at Example.CatchInner()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Exception_Message\">\r\n    \r\n            <a id=\"System_Exception_Message_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Message</div>        \r\n          </div>\r\n    \r\n            <p>Gets a message that describes the current exception.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string Message { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The error message that explains the reason for the exception, or an empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Error messages target the developer who is handling the exception. The text of the Message property should completely describe the error and, when possible, should also explain how to correct the error. Top-level exception handlers may display the message to end-users, so you should ensure that it is grammatically correct and that each sentence of the message ends with a period. Do not use question marks or exclamation points. If your application uses localized exception messages, you should ensure that they are accurately translated.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Do not disclose sensitive information in exception messages without checking for the appropriate permissions.  </p>\n</div>\n<p> The value of the Message property is included in the information returned by <a class=\"xref\" href=\"system.exception#System_Exception_ToString_\" data-linktype=\"relative-path\">ToString</a>.The Message property is set only when creating an <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a>. If no message was supplied to the constructor for the current instance, the system supplies a default message that is formatted using the current system culture.  </p>\n<h2 id=\"windows-runtime-and-includenetv451addincludesnet-v451-mdmd\">Windows Runtime and .NET Framework 4.5.1</h2>\n<p> Starting with the .NET Framework 4.5.1 and Windows 8.1, the fidelity of error messages from exceptions that are propagated from Windows Runtime types and members that are not part of the .NET Framework is improved. In particular, exception messages from Visual C++ component extensions (C++/CX) are now propagated back into .NET Framework <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> objects.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example throws and then catches an <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a>Exception and displays the exception&#39;s text message using the Message property.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Exception.Properties#1\">// Example for the Exception::HelpLink, Exception::Source,\n// Exception::StackTrace, and Exception::TargetSite properties.\nusing namespace System;\n\nnamespace NDP_UE_CPP\n{\n\n   // Derive an exception; the constructor sets the HelpLink and \n   // Source properties.\n   public ref class LogTableOverflowException: public Exception\n   {\n   private:\n      static String^ overflowMessage = &quot;The log table has overflowed.&quot;;\n\n   public:\n      LogTableOverflowException( String^ auxMessage, Exception^ inner )\n         : Exception( String::Format( &quot;{0} - {1}&quot;, overflowMessage, auxMessage ), inner )\n      {\n         this-&gt;HelpLink = &quot;http://msdn.microsoft.com&quot;;\n         this-&gt;Source = &quot;Exception_Class_Samples&quot;;\n      }\n\n   };\n\n   public ref class LogTable\n   {\n   public:\n      LogTable( int numElements )\n      {\n         logArea = gcnew array&lt;String^&gt;(numElements);\n         elemInUse = 0;\n      }\n\n\n   protected:\n      array&lt;String^&gt;^logArea;\n      int elemInUse;\n\n   public:\n\n      // The AddRecord method throws a derived exception if \n      // the array bounds exception is caught.\n      int AddRecord( String^ newRecord )\n      {\n         try\n         {\n            logArea[ elemInUse ] = newRecord;\n            return elemInUse++;\n         }\n         catch ( Exception^ ex ) \n         {\n            throw gcnew LogTableOverflowException( String::Format( &quot;Record \\&quot;{0}\\&quot; was not logged.&quot;, newRecord ),ex );\n         }\n\n      }\n\n   };\n\n\n   // Create a log table and force an overflow.\n   void ForceOverflow()\n   {\n      LogTable^ log = gcnew LogTable( 4 );\n      try\n      {\n         for ( int count = 1; ; count++ )\n         {\n            log-&gt;AddRecord( String::Format( &quot;Log record number {0}&quot;, count ) );\n\n         }\n      }\n      catch ( Exception^ ex ) \n      {\n         Console::WriteLine( &quot;<br>Message ---<br>{0}&quot;, ex-&gt;Message );\n         Console::WriteLine( &quot;<br>HelpLink ---<br>{0}&quot;, ex-&gt;HelpLink );\n         Console::WriteLine( &quot;<br>Source ---<br>{0}&quot;, ex-&gt;Source );\n         Console::WriteLine( &quot;<br>StackTrace ---<br>{0}&quot;, ex-&gt;StackTrace );\n         Console::WriteLine( &quot;<br>TargetSite ---<br>{0}&quot;, ex-&gt;TargetSite-&gt;ToString() );\n      }\n\n   }\n\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of <br>   Exception::Message, <br>&quot;\n   &quot;   Exception::HelpLink, <br>   Exception::Source, <br>&quot;\n   &quot;   Exception::StackTrace, and <br>   Exception::&quot;\n   &quot;TargetSite <br>generates the following output.&quot; );\n   NDP_UE_CPP::ForceOverflow();\n}\n\n/*\nThis example of\n   Exception::Message,\n   Exception::HelpLink,\n   Exception::Source,\n   Exception::StackTrace, and\n   Exception::TargetSite\ngenerates the following output.\n\nMessage ---\nThe log table has overflowed. - Record &quot;Log record number 5&quot; was not logged.\n\nHelpLink ---\nhttp://msdn.microsoft.com\n\nSource ---\nException_Class_Samples\n\nStackTrace ---\n   at NDP_UE_CPP.LogTable.AddRecord(String newRecord)\n   at NDP_UE_CPP.ForceOverflow()\n\nTargetSite ---\nInt32 AddRecord(System.String)\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Exception.Properties#1\">// Example for the Exception.HelpLink, Exception.Source,\n// Exception.StackTrace, and Exception.TargetSite properties.\nusing System;\n\nnamespace NDP_UE_CS\n{\n    // Derive an exception; the constructor sets the HelpLink and \n    // Source properties.\n    class LogTableOverflowException : Exception\n    {\n        const string overflowMessage = &quot;The log table has overflowed.&quot;;\n\n        public LogTableOverflowException( \n            string auxMessage, Exception inner ) :\n                base( String.Format( &quot;{0} - {1}&quot;, \n                    overflowMessage, auxMessage ), inner )\n        {\n            this.HelpLink = &quot;http://msdn.microsoft.com&quot;;\n            this.Source = &quot;Exception_Class_Samples&quot;;\n        }\n    }\n\n    class LogTable\n    {\n        public LogTable( int numElements )\n        {\n            logArea = new string[ numElements ];\n            elemInUse = 0;\n        }\n\n        protected string[ ] logArea;\n        protected int       elemInUse;\n\n        // The AddRecord method throws a derived exception if \n        // the array bounds exception is caught.\n        public    int       AddRecord( string newRecord )\n        {\n            try\n            {\n                logArea[ elemInUse ] = newRecord;\n                return elemInUse++;\n            }\n            catch( Exception e )\n            {\n                throw new LogTableOverflowException( \n                    String.Format( &quot;Record \\&quot;{0}\\&quot; was not logged.&quot;, \n                        newRecord ), e );\n            }\n        }\n    }\n\n    class OverflowDemo \n    {\n        // Create a log table and force an overflow.\n        public static void Main() \n        {\n            LogTable log = new LogTable( 4 );\n\n            Console.WriteLine( \n                &quot;This example of <br>   Exception.Message, <br>&quot; +\n                &quot;   Exception.HelpLink, <br>   Exception.Source, <br>&quot; +\n                &quot;   Exception.StackTrace, and <br>   Exception.&quot; +\n                &quot;TargetSite <br>generates the following output.&quot; );\n\n            try\n            {\n                for( int count = 1; ; count++ )\n                {\n                    log.AddRecord( \n                        String.Format( \n                            &quot;Log record number {0}&quot;, count ) );\n                }\n            }\n            catch( Exception ex )\n            {\n                Console.WriteLine( &quot;<br>Message ---<br>{0}&quot;, ex.Message );\n                Console.WriteLine( \n                    &quot;<br>HelpLink ---<br>{0}&quot;, ex.HelpLink );\n                Console.WriteLine( &quot;<br>Source ---<br>{0}&quot;, ex.Source );\n                Console.WriteLine( \n                    &quot;<br>StackTrace ---<br>{0}&quot;, ex.StackTrace );\n                Console.WriteLine( \n                    &quot;<br>TargetSite ---<br>{0}&quot;, ex.TargetSite );\n            }\n        }\n    }\n}\n\n/*\nThis example of\n   Exception.Message,\n   Exception.HelpLink,\n   Exception.Source,\n   Exception.StackTrace, and\n   Exception.TargetSite\ngenerates the following output.\n\nMessage ---\nThe log table has overflowed. - Record &quot;Log record number 5&quot; was not logged.\n\nHelpLink ---\nhttp://msdn.microsoft.com\n\nSource ---\nException_Class_Samples\n\nStackTrace ---\n   at NDP_UE_CS.LogTable.AddRecord(String newRecord)\n   at NDP_UE_CS.OverflowDemo.Main()\n\nTargetSite ---\nInt32 AddRecord(System.String)\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Exception.Properties#1\">&#39; Example for the Exception.HelpLink, Exception.Source,\n&#39; Exception.StackTrace, and Exception.TargetSite properties.\nImports System\nImports Microsoft.VisualBasic\n\nNamespace NDP_UE_VB\n\n    &#39; Derive an exception; the constructor sets the HelpLink and \n    &#39; Source properties.\n    Class LogTableOverflowException\n        Inherits Exception\n\n        Private Const overflowMessage As String = _\n            &quot;The log table has overflowed.&quot;\n           \n        Public Sub New( auxMessage As String, inner As Exception )\n            MyBase.New( String.Format( &quot;{0} - {1}&quot;, _\n                overflowMessage, auxMessage ), inner )\n\n            Me.HelpLink = &quot;http://msdn.microsoft.com&quot;\n            Me.Source = &quot;Exception_Class_Samples&quot;\n\n        End Sub &#39; New\n    End Class &#39; LogTableOverflowException\n\n    Class LogTable\n       \n        Public Sub New(numElements As Integer)\n            logArea = New String(numElements) {}\n            elemInUse = 0\n        End Sub &#39; New\n           \n        Protected logArea() As String\n        Protected elemInUse As Integer\n           \n        &#39; The AddRecord method throws a derived exception if \n        &#39; the array bounds exception is caught.\n        Public Function AddRecord( newRecord As String ) As Integer\n\n            Try\n                Dim curElement as Integer = elemInUse\n                logArea( elemInUse ) = newRecord\n                elemInUse += 1\n                Return curElement\n\n            Catch ex As Exception\n                Throw New LogTableOverflowException( _\n                    String.Format( &quot;Record &quot;&quot;{0}&quot;&quot; was not logged.&quot;, _\n                        newRecord ), ex )\n            End Try\n        End Function &#39; AddRecord\n    End Class &#39; LogTable\n\n    Module OverflowDemo\n       \n        &#39; Create a log table and force an overflow.\n        Sub Main( )\n            Dim log As New LogTable( 4 )\n              \n            Console.WriteLine( &quot;This example of &quot; &amp; vbCrLf &amp; _\n                &quot;   Exception.Message, &quot; &amp; vbCrLf &amp; _\n                &quot;   Exception.HelpLink, &quot; &amp; vbCrLf &amp; _\n                &quot;   Exception.Source, &quot; &amp; vbCrLf &amp; _\n                &quot;   Exception.StackTrace, and &quot; &amp; vbCrLf &amp; _\n                &quot;   Exception.TargetSite &quot; &amp; vbCrLf &amp; _\n                &quot;generates the following output.&quot; )\n              \n            Try\n                Dim count As Integer = 0\n                 \n                Do\n                    log.AddRecord( _\n                        String.Format( &quot;Log record number {0}&quot;, count ) )\n                    count += 1\n                Loop\n\n            Catch ex As Exception\n                Console.WriteLine( vbCrLf &amp; _\n                    &quot;Message ---&quot; &amp; vbCrLf &amp; ex.Message )\n                Console.WriteLine( vbCrLf &amp; _\n                    &quot;HelpLink ---&quot; &amp; vbCrLf &amp; ex.HelpLink )\n                Console.WriteLine( vbCrLf &amp; _\n                    &quot;Source ---&quot; &amp; vbCrLf &amp; ex.Source )\n                Console.WriteLine( vbCrLf &amp; _\n                    &quot;StackTrace ---&quot; &amp; vbCrLf &amp; ex.StackTrace )\n                Console.WriteLine( vbCrLf &amp; &quot;TargetSite ---&quot; &amp; _\n                    vbCrLf &amp; ex.TargetSite.ToString( ) )\n            End Try\n        End Sub &#39; Main\n\n    End Module &#39; OverflowDemo\nEnd Namespace &#39; NDP_UE_VB\n\n&#39; This example of\n&#39;    Exception.Message,\n&#39;    Exception.HelpLink,\n&#39;    Exception.Source,\n&#39;    Exception.StackTrace, and\n&#39;    Exception.TargetSite\n&#39; generates the following output.\n&#39; \n&#39; Message ---\n&#39; The log table has overflowed. - Record &quot;Log record number 5&quot; was not logged.\n&#39; \n&#39; HelpLink ---\n&#39; http://msdn.microsoft.com\n&#39; \n&#39; Source ---\n&#39; Exception_Class_Samples\n&#39; \n&#39; StackTrace ---\n&#39;    at NDP_UE_VB.LogTable.AddRecord(String newRecord)\n&#39;    at NDP_UE_VB.OverflowDemo.Main()\n&#39; \n&#39; TargetSite ---\n&#39; Int32 AddRecord(System.String)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Exception_Source\">\r\n    \r\n            <a id=\"System_Exception_Source_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Source</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the name of the application or the object that causes the error.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string Source { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the application or the object that causes the error.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The object must be a runtime <a class=\"xref\" href=\"system.reflection\" data-linktype=\"relative-path\">System.Reflection</a> object</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the Source property is not set explicitly, the runtime automatically sets it to the name of the assembly in which the exception originated.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example throws an <code>Exception</code> that sets the <code>Source</code> property in its constructor and then catches the exception and displays <code>Source</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Exception.Properties#1\">// Example for the Exception::HelpLink, Exception::Source,\n// Exception::StackTrace, and Exception::TargetSite properties.\nusing namespace System;\n\nnamespace NDP_UE_CPP\n{\n\n   // Derive an exception; the constructor sets the HelpLink and \n   // Source properties.\n   public ref class LogTableOverflowException: public Exception\n   {\n   private:\n      static String^ overflowMessage = &quot;The log table has overflowed.&quot;;\n\n   public:\n      LogTableOverflowException( String^ auxMessage, Exception^ inner )\n         : Exception( String::Format( &quot;{0} - {1}&quot;, overflowMessage, auxMessage ), inner )\n      {\n         this-&gt;HelpLink = &quot;http://msdn.microsoft.com&quot;;\n         this-&gt;Source = &quot;Exception_Class_Samples&quot;;\n      }\n\n   };\n\n   public ref class LogTable\n   {\n   public:\n      LogTable( int numElements )\n      {\n         logArea = gcnew array&lt;String^&gt;(numElements);\n         elemInUse = 0;\n      }\n\n\n   protected:\n      array&lt;String^&gt;^logArea;\n      int elemInUse;\n\n   public:\n\n      // The AddRecord method throws a derived exception if \n      // the array bounds exception is caught.\n      int AddRecord( String^ newRecord )\n      {\n         try\n         {\n            logArea[ elemInUse ] = newRecord;\n            return elemInUse++;\n         }\n         catch ( Exception^ ex ) \n         {\n            throw gcnew LogTableOverflowException( String::Format( &quot;Record \\&quot;{0}\\&quot; was not logged.&quot;, newRecord ),ex );\n         }\n\n      }\n\n   };\n\n\n   // Create a log table and force an overflow.\n   void ForceOverflow()\n   {\n      LogTable^ log = gcnew LogTable( 4 );\n      try\n      {\n         for ( int count = 1; ; count++ )\n         {\n            log-&gt;AddRecord( String::Format( &quot;Log record number {0}&quot;, count ) );\n\n         }\n      }\n      catch ( Exception^ ex ) \n      {\n         Console::WriteLine( &quot;<br>Message ---<br>{0}&quot;, ex-&gt;Message );\n         Console::WriteLine( &quot;<br>HelpLink ---<br>{0}&quot;, ex-&gt;HelpLink );\n         Console::WriteLine( &quot;<br>Source ---<br>{0}&quot;, ex-&gt;Source );\n         Console::WriteLine( &quot;<br>StackTrace ---<br>{0}&quot;, ex-&gt;StackTrace );\n         Console::WriteLine( &quot;<br>TargetSite ---<br>{0}&quot;, ex-&gt;TargetSite-&gt;ToString() );\n      }\n\n   }\n\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of <br>   Exception::Message, <br>&quot;\n   &quot;   Exception::HelpLink, <br>   Exception::Source, <br>&quot;\n   &quot;   Exception::StackTrace, and <br>   Exception::&quot;\n   &quot;TargetSite <br>generates the following output.&quot; );\n   NDP_UE_CPP::ForceOverflow();\n}\n\n/*\nThis example of\n   Exception::Message,\n   Exception::HelpLink,\n   Exception::Source,\n   Exception::StackTrace, and\n   Exception::TargetSite\ngenerates the following output.\n\nMessage ---\nThe log table has overflowed. - Record &quot;Log record number 5&quot; was not logged.\n\nHelpLink ---\nhttp://msdn.microsoft.com\n\nSource ---\nException_Class_Samples\n\nStackTrace ---\n   at NDP_UE_CPP.LogTable.AddRecord(String newRecord)\n   at NDP_UE_CPP.ForceOverflow()\n\nTargetSite ---\nInt32 AddRecord(System.String)\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Exception.Properties#1\">// Example for the Exception.HelpLink, Exception.Source,\n// Exception.StackTrace, and Exception.TargetSite properties.\nusing System;\n\nnamespace NDP_UE_CS\n{\n    // Derive an exception; the constructor sets the HelpLink and \n    // Source properties.\n    class LogTableOverflowException : Exception\n    {\n        const string overflowMessage = &quot;The log table has overflowed.&quot;;\n\n        public LogTableOverflowException( \n            string auxMessage, Exception inner ) :\n                base( String.Format( &quot;{0} - {1}&quot;, \n                    overflowMessage, auxMessage ), inner )\n        {\n            this.HelpLink = &quot;http://msdn.microsoft.com&quot;;\n            this.Source = &quot;Exception_Class_Samples&quot;;\n        }\n    }\n\n    class LogTable\n    {\n        public LogTable( int numElements )\n        {\n            logArea = new string[ numElements ];\n            elemInUse = 0;\n        }\n\n        protected string[ ] logArea;\n        protected int       elemInUse;\n\n        // The AddRecord method throws a derived exception if \n        // the array bounds exception is caught.\n        public    int       AddRecord( string newRecord )\n        {\n            try\n            {\n                logArea[ elemInUse ] = newRecord;\n                return elemInUse++;\n            }\n            catch( Exception e )\n            {\n                throw new LogTableOverflowException( \n                    String.Format( &quot;Record \\&quot;{0}\\&quot; was not logged.&quot;, \n                        newRecord ), e );\n            }\n        }\n    }\n\n    class OverflowDemo \n    {\n        // Create a log table and force an overflow.\n        public static void Main() \n        {\n            LogTable log = new LogTable( 4 );\n\n            Console.WriteLine( \n                &quot;This example of <br>   Exception.Message, <br>&quot; +\n                &quot;   Exception.HelpLink, <br>   Exception.Source, <br>&quot; +\n                &quot;   Exception.StackTrace, and <br>   Exception.&quot; +\n                &quot;TargetSite <br>generates the following output.&quot; );\n\n            try\n            {\n                for( int count = 1; ; count++ )\n                {\n                    log.AddRecord( \n                        String.Format( \n                            &quot;Log record number {0}&quot;, count ) );\n                }\n            }\n            catch( Exception ex )\n            {\n                Console.WriteLine( &quot;<br>Message ---<br>{0}&quot;, ex.Message );\n                Console.WriteLine( \n                    &quot;<br>HelpLink ---<br>{0}&quot;, ex.HelpLink );\n                Console.WriteLine( &quot;<br>Source ---<br>{0}&quot;, ex.Source );\n                Console.WriteLine( \n                    &quot;<br>StackTrace ---<br>{0}&quot;, ex.StackTrace );\n                Console.WriteLine( \n                    &quot;<br>TargetSite ---<br>{0}&quot;, ex.TargetSite );\n            }\n        }\n    }\n}\n\n/*\nThis example of\n   Exception.Message,\n   Exception.HelpLink,\n   Exception.Source,\n   Exception.StackTrace, and\n   Exception.TargetSite\ngenerates the following output.\n\nMessage ---\nThe log table has overflowed. - Record &quot;Log record number 5&quot; was not logged.\n\nHelpLink ---\nhttp://msdn.microsoft.com\n\nSource ---\nException_Class_Samples\n\nStackTrace ---\n   at NDP_UE_CS.LogTable.AddRecord(String newRecord)\n   at NDP_UE_CS.OverflowDemo.Main()\n\nTargetSite ---\nInt32 AddRecord(System.String)\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Exception.Properties#1\">&#39; Example for the Exception.HelpLink, Exception.Source,\n&#39; Exception.StackTrace, and Exception.TargetSite properties.\nImports System\nImports Microsoft.VisualBasic\n\nNamespace NDP_UE_VB\n\n    &#39; Derive an exception; the constructor sets the HelpLink and \n    &#39; Source properties.\n    Class LogTableOverflowException\n        Inherits Exception\n\n        Private Const overflowMessage As String = _\n            &quot;The log table has overflowed.&quot;\n           \n        Public Sub New( auxMessage As String, inner As Exception )\n            MyBase.New( String.Format( &quot;{0} - {1}&quot;, _\n                overflowMessage, auxMessage ), inner )\n\n            Me.HelpLink = &quot;http://msdn.microsoft.com&quot;\n            Me.Source = &quot;Exception_Class_Samples&quot;\n\n        End Sub &#39; New\n    End Class &#39; LogTableOverflowException\n\n    Class LogTable\n       \n        Public Sub New(numElements As Integer)\n            logArea = New String(numElements) {}\n            elemInUse = 0\n        End Sub &#39; New\n           \n        Protected logArea() As String\n        Protected elemInUse As Integer\n           \n        &#39; The AddRecord method throws a derived exception if \n        &#39; the array bounds exception is caught.\n        Public Function AddRecord( newRecord As String ) As Integer\n\n            Try\n                Dim curElement as Integer = elemInUse\n                logArea( elemInUse ) = newRecord\n                elemInUse += 1\n                Return curElement\n\n            Catch ex As Exception\n                Throw New LogTableOverflowException( _\n                    String.Format( &quot;Record &quot;&quot;{0}&quot;&quot; was not logged.&quot;, _\n                        newRecord ), ex )\n            End Try\n        End Function &#39; AddRecord\n    End Class &#39; LogTable\n\n    Module OverflowDemo\n       \n        &#39; Create a log table and force an overflow.\n        Sub Main( )\n            Dim log As New LogTable( 4 )\n              \n            Console.WriteLine( &quot;This example of &quot; &amp; vbCrLf &amp; _\n                &quot;   Exception.Message, &quot; &amp; vbCrLf &amp; _\n                &quot;   Exception.HelpLink, &quot; &amp; vbCrLf &amp; _\n                &quot;   Exception.Source, &quot; &amp; vbCrLf &amp; _\n                &quot;   Exception.StackTrace, and &quot; &amp; vbCrLf &amp; _\n                &quot;   Exception.TargetSite &quot; &amp; vbCrLf &amp; _\n                &quot;generates the following output.&quot; )\n              \n            Try\n                Dim count As Integer = 0\n                 \n                Do\n                    log.AddRecord( _\n                        String.Format( &quot;Log record number {0}&quot;, count ) )\n                    count += 1\n                Loop\n\n            Catch ex As Exception\n                Console.WriteLine( vbCrLf &amp; _\n                    &quot;Message ---&quot; &amp; vbCrLf &amp; ex.Message )\n                Console.WriteLine( vbCrLf &amp; _\n                    &quot;HelpLink ---&quot; &amp; vbCrLf &amp; ex.HelpLink )\n                Console.WriteLine( vbCrLf &amp; _\n                    &quot;Source ---&quot; &amp; vbCrLf &amp; ex.Source )\n                Console.WriteLine( vbCrLf &amp; _\n                    &quot;StackTrace ---&quot; &amp; vbCrLf &amp; ex.StackTrace )\n                Console.WriteLine( vbCrLf &amp; &quot;TargetSite ---&quot; &amp; _\n                    vbCrLf &amp; ex.TargetSite.ToString( ) )\n            End Try\n        End Sub &#39; Main\n\n    End Module &#39; OverflowDemo\nEnd Namespace &#39; NDP_UE_VB\n\n&#39; This example of\n&#39;    Exception.Message,\n&#39;    Exception.HelpLink,\n&#39;    Exception.Source,\n&#39;    Exception.StackTrace, and\n&#39;    Exception.TargetSite\n&#39; generates the following output.\n&#39; \n&#39; Message ---\n&#39; The log table has overflowed. - Record &quot;Log record number 5&quot; was not logged.\n&#39; \n&#39; HelpLink ---\n&#39; http://msdn.microsoft.com\n&#39; \n&#39; Source ---\n&#39; Exception_Class_Samples\n&#39; \n&#39; StackTrace ---\n&#39;    at NDP_UE_VB.LogTable.AddRecord(String newRecord)\n&#39;    at NDP_UE_VB.OverflowDemo.Main()\n&#39; \n&#39; TargetSite ---\n&#39; Int32 AddRecord(System.String)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Exception_StackTrace\">\r\n    \r\n            <a id=\"System_Exception_StackTrace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StackTrace</div>        \r\n          </div>\r\n    \r\n            <p>Gets a string representation of the immediate frames on the call stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string StackTrace { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that describes the immediate frames of the call stack.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The execution stack keeps track of all the methods that are in execution at a given instant. A trace of the method calls is called a stack trace. The stack trace listing provides a way to follow the call stack to the line number in the method where the exception occurs.  </p>\n<p> The StackTrace property returns the frames of the call stack that originate at the location where the exception was thrown. You can obtain information about additional frames in the call stack by creating a new instance of the <a class=\"xref\" href=\"system.diagnostics.stacktrace\" data-linktype=\"relative-path\">System.Diagnostics.StackTrace</a> class and using its <a class=\"xref\" href=\"system.diagnostics.stacktrace#System_Diagnostics_StackTrace_ToString_\" data-linktype=\"relative-path\">ToString</a> method.  </p>\n<p> The common language runtime (CLR) updates the stack trace whenever an exception is thrown in application code (by using the <code>throw</code> keyword). If the exception was rethrown in a method that is different than the method where it was originally thrown, the stack trace contains both the location in the method where the exception was originally thrown, and the location in the method where the exception was rethrown. If the exception is thrown, and later rethrown, in the same method, the stack trace only contains the location where the exception was rethrown and does not include the location where the exception was originally thrown.  </p>\n<p> The StackTrace property may not report as many method calls as expected because of code transformations, such as inlining, that occur during optimization.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example throws an <code>Exception</code> and then catches it and displays a stack trace using the <code>StackTrace</code> property.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Exception.Properties#1\">// Example for the Exception::HelpLink, Exception::Source,\n// Exception::StackTrace, and Exception::TargetSite properties.\nusing namespace System;\n\nnamespace NDP_UE_CPP\n{\n\n   // Derive an exception; the constructor sets the HelpLink and \n   // Source properties.\n   public ref class LogTableOverflowException: public Exception\n   {\n   private:\n      static String^ overflowMessage = &quot;The log table has overflowed.&quot;;\n\n   public:\n      LogTableOverflowException( String^ auxMessage, Exception^ inner )\n         : Exception( String::Format( &quot;{0} - {1}&quot;, overflowMessage, auxMessage ), inner )\n      {\n         this-&gt;HelpLink = &quot;http://msdn.microsoft.com&quot;;\n         this-&gt;Source = &quot;Exception_Class_Samples&quot;;\n      }\n\n   };\n\n   public ref class LogTable\n   {\n   public:\n      LogTable( int numElements )\n      {\n         logArea = gcnew array&lt;String^&gt;(numElements);\n         elemInUse = 0;\n      }\n\n\n   protected:\n      array&lt;String^&gt;^logArea;\n      int elemInUse;\n\n   public:\n\n      // The AddRecord method throws a derived exception if \n      // the array bounds exception is caught.\n      int AddRecord( String^ newRecord )\n      {\n         try\n         {\n            logArea[ elemInUse ] = newRecord;\n            return elemInUse++;\n         }\n         catch ( Exception^ ex ) \n         {\n            throw gcnew LogTableOverflowException( String::Format( &quot;Record \\&quot;{0}\\&quot; was not logged.&quot;, newRecord ),ex );\n         }\n\n      }\n\n   };\n\n\n   // Create a log table and force an overflow.\n   void ForceOverflow()\n   {\n      LogTable^ log = gcnew LogTable( 4 );\n      try\n      {\n         for ( int count = 1; ; count++ )\n         {\n            log-&gt;AddRecord( String::Format( &quot;Log record number {0}&quot;, count ) );\n\n         }\n      }\n      catch ( Exception^ ex ) \n      {\n         Console::WriteLine( &quot;<br>Message ---<br>{0}&quot;, ex-&gt;Message );\n         Console::WriteLine( &quot;<br>HelpLink ---<br>{0}&quot;, ex-&gt;HelpLink );\n         Console::WriteLine( &quot;<br>Source ---<br>{0}&quot;, ex-&gt;Source );\n         Console::WriteLine( &quot;<br>StackTrace ---<br>{0}&quot;, ex-&gt;StackTrace );\n         Console::WriteLine( &quot;<br>TargetSite ---<br>{0}&quot;, ex-&gt;TargetSite-&gt;ToString() );\n      }\n\n   }\n\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of <br>   Exception::Message, <br>&quot;\n   &quot;   Exception::HelpLink, <br>   Exception::Source, <br>&quot;\n   &quot;   Exception::StackTrace, and <br>   Exception::&quot;\n   &quot;TargetSite <br>generates the following output.&quot; );\n   NDP_UE_CPP::ForceOverflow();\n}\n\n/*\nThis example of\n   Exception::Message,\n   Exception::HelpLink,\n   Exception::Source,\n   Exception::StackTrace, and\n   Exception::TargetSite\ngenerates the following output.\n\nMessage ---\nThe log table has overflowed. - Record &quot;Log record number 5&quot; was not logged.\n\nHelpLink ---\nhttp://msdn.microsoft.com\n\nSource ---\nException_Class_Samples\n\nStackTrace ---\n   at NDP_UE_CPP.LogTable.AddRecord(String newRecord)\n   at NDP_UE_CPP.ForceOverflow()\n\nTargetSite ---\nInt32 AddRecord(System.String)\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Exception.Properties#1\">// Example for the Exception.HelpLink, Exception.Source,\n// Exception.StackTrace, and Exception.TargetSite properties.\nusing System;\n\nnamespace NDP_UE_CS\n{\n    // Derive an exception; the constructor sets the HelpLink and \n    // Source properties.\n    class LogTableOverflowException : Exception\n    {\n        const string overflowMessage = &quot;The log table has overflowed.&quot;;\n\n        public LogTableOverflowException( \n            string auxMessage, Exception inner ) :\n                base( String.Format( &quot;{0} - {1}&quot;, \n                    overflowMessage, auxMessage ), inner )\n        {\n            this.HelpLink = &quot;http://msdn.microsoft.com&quot;;\n            this.Source = &quot;Exception_Class_Samples&quot;;\n        }\n    }\n\n    class LogTable\n    {\n        public LogTable( int numElements )\n        {\n            logArea = new string[ numElements ];\n            elemInUse = 0;\n        }\n\n        protected string[ ] logArea;\n        protected int       elemInUse;\n\n        // The AddRecord method throws a derived exception if \n        // the array bounds exception is caught.\n        public    int       AddRecord( string newRecord )\n        {\n            try\n            {\n                logArea[ elemInUse ] = newRecord;\n                return elemInUse++;\n            }\n            catch( Exception e )\n            {\n                throw new LogTableOverflowException( \n                    String.Format( &quot;Record \\&quot;{0}\\&quot; was not logged.&quot;, \n                        newRecord ), e );\n            }\n        }\n    }\n\n    class OverflowDemo \n    {\n        // Create a log table and force an overflow.\n        public static void Main() \n        {\n            LogTable log = new LogTable( 4 );\n\n            Console.WriteLine( \n                &quot;This example of <br>   Exception.Message, <br>&quot; +\n                &quot;   Exception.HelpLink, <br>   Exception.Source, <br>&quot; +\n                &quot;   Exception.StackTrace, and <br>   Exception.&quot; +\n                &quot;TargetSite <br>generates the following output.&quot; );\n\n            try\n            {\n                for( int count = 1; ; count++ )\n                {\n                    log.AddRecord( \n                        String.Format( \n                            &quot;Log record number {0}&quot;, count ) );\n                }\n            }\n            catch( Exception ex )\n            {\n                Console.WriteLine( &quot;<br>Message ---<br>{0}&quot;, ex.Message );\n                Console.WriteLine( \n                    &quot;<br>HelpLink ---<br>{0}&quot;, ex.HelpLink );\n                Console.WriteLine( &quot;<br>Source ---<br>{0}&quot;, ex.Source );\n                Console.WriteLine( \n                    &quot;<br>StackTrace ---<br>{0}&quot;, ex.StackTrace );\n                Console.WriteLine( \n                    &quot;<br>TargetSite ---<br>{0}&quot;, ex.TargetSite );\n            }\n        }\n    }\n}\n\n/*\nThis example of\n   Exception.Message,\n   Exception.HelpLink,\n   Exception.Source,\n   Exception.StackTrace, and\n   Exception.TargetSite\ngenerates the following output.\n\nMessage ---\nThe log table has overflowed. - Record &quot;Log record number 5&quot; was not logged.\n\nHelpLink ---\nhttp://msdn.microsoft.com\n\nSource ---\nException_Class_Samples\n\nStackTrace ---\n   at NDP_UE_CS.LogTable.AddRecord(String newRecord)\n   at NDP_UE_CS.OverflowDemo.Main()\n\nTargetSite ---\nInt32 AddRecord(System.String)\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Exception.Properties#1\">&#39; Example for the Exception.HelpLink, Exception.Source,\n&#39; Exception.StackTrace, and Exception.TargetSite properties.\nImports System\nImports Microsoft.VisualBasic\n\nNamespace NDP_UE_VB\n\n    &#39; Derive an exception; the constructor sets the HelpLink and \n    &#39; Source properties.\n    Class LogTableOverflowException\n        Inherits Exception\n\n        Private Const overflowMessage As String = _\n            &quot;The log table has overflowed.&quot;\n           \n        Public Sub New( auxMessage As String, inner As Exception )\n            MyBase.New( String.Format( &quot;{0} - {1}&quot;, _\n                overflowMessage, auxMessage ), inner )\n\n            Me.HelpLink = &quot;http://msdn.microsoft.com&quot;\n            Me.Source = &quot;Exception_Class_Samples&quot;\n\n        End Sub &#39; New\n    End Class &#39; LogTableOverflowException\n\n    Class LogTable\n       \n        Public Sub New(numElements As Integer)\n            logArea = New String(numElements) {}\n            elemInUse = 0\n        End Sub &#39; New\n           \n        Protected logArea() As String\n        Protected elemInUse As Integer\n           \n        &#39; The AddRecord method throws a derived exception if \n        &#39; the array bounds exception is caught.\n        Public Function AddRecord( newRecord As String ) As Integer\n\n            Try\n                Dim curElement as Integer = elemInUse\n                logArea( elemInUse ) = newRecord\n                elemInUse += 1\n                Return curElement\n\n            Catch ex As Exception\n                Throw New LogTableOverflowException( _\n                    String.Format( &quot;Record &quot;&quot;{0}&quot;&quot; was not logged.&quot;, _\n                        newRecord ), ex )\n            End Try\n        End Function &#39; AddRecord\n    End Class &#39; LogTable\n\n    Module OverflowDemo\n       \n        &#39; Create a log table and force an overflow.\n        Sub Main( )\n            Dim log As New LogTable( 4 )\n              \n            Console.WriteLine( &quot;This example of &quot; &amp; vbCrLf &amp; _\n                &quot;   Exception.Message, &quot; &amp; vbCrLf &amp; _\n                &quot;   Exception.HelpLink, &quot; &amp; vbCrLf &amp; _\n                &quot;   Exception.Source, &quot; &amp; vbCrLf &amp; _\n                &quot;   Exception.StackTrace, and &quot; &amp; vbCrLf &amp; _\n                &quot;   Exception.TargetSite &quot; &amp; vbCrLf &amp; _\n                &quot;generates the following output.&quot; )\n              \n            Try\n                Dim count As Integer = 0\n                 \n                Do\n                    log.AddRecord( _\n                        String.Format( &quot;Log record number {0}&quot;, count ) )\n                    count += 1\n                Loop\n\n            Catch ex As Exception\n                Console.WriteLine( vbCrLf &amp; _\n                    &quot;Message ---&quot; &amp; vbCrLf &amp; ex.Message )\n                Console.WriteLine( vbCrLf &amp; _\n                    &quot;HelpLink ---&quot; &amp; vbCrLf &amp; ex.HelpLink )\n                Console.WriteLine( vbCrLf &amp; _\n                    &quot;Source ---&quot; &amp; vbCrLf &amp; ex.Source )\n                Console.WriteLine( vbCrLf &amp; _\n                    &quot;StackTrace ---&quot; &amp; vbCrLf &amp; ex.StackTrace )\n                Console.WriteLine( vbCrLf &amp; &quot;TargetSite ---&quot; &amp; _\n                    vbCrLf &amp; ex.TargetSite.ToString( ) )\n            End Try\n        End Sub &#39; Main\n\n    End Module &#39; OverflowDemo\nEnd Namespace &#39; NDP_UE_VB\n\n&#39; This example of\n&#39;    Exception.Message,\n&#39;    Exception.HelpLink,\n&#39;    Exception.Source,\n&#39;    Exception.StackTrace, and\n&#39;    Exception.TargetSite\n&#39; generates the following output.\n&#39; \n&#39; Message ---\n&#39; The log table has overflowed. - Record &quot;Log record number 5&quot; was not logged.\n&#39; \n&#39; HelpLink ---\n&#39; http://msdn.microsoft.com\n&#39; \n&#39; Source ---\n&#39; Exception_Class_Samples\n&#39; \n&#39; StackTrace ---\n&#39;    at NDP_UE_VB.LogTable.AddRecord(String newRecord)\n&#39;    at NDP_UE_VB.OverflowDemo.Main()\n&#39; \n&#39; TargetSite ---\n&#39; Int32 AddRecord(System.String)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Exception_TargetSite\">\r\n    \r\n            <a id=\"System_Exception_TargetSite_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TargetSite</div>        \r\n          </div>\r\n    \r\n            <p>Gets the method that throws the current exception.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.MethodBase TargetSite { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodbase\" data-linktype=\"relative-path\">MethodBase</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.reflection.methodbase\" data-linktype=\"relative-path\">MethodBase</a> that threw the current exception.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the method that throws this exception is not available and the stack trace is not a null reference (<code>Nothing</code> in Visual Basic), TargetSite obtains the method from the stack trace. If the stack trace is a null reference, TargetSite also returns a null reference.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The TargetSite property may not accurately report the name of the method in which an exception was thrown if the exception handler handles an exception across application domain boundaries.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example throws an <code>Exception</code> and then catches it and displays the originating method using the <code>TargetSite</code> property.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Exception.Properties#1\">// Example for the Exception::HelpLink, Exception::Source,\n// Exception::StackTrace, and Exception::TargetSite properties.\nusing namespace System;\n\nnamespace NDP_UE_CPP\n{\n\n   // Derive an exception; the constructor sets the HelpLink and \n   // Source properties.\n   public ref class LogTableOverflowException: public Exception\n   {\n   private:\n      static String^ overflowMessage = &quot;The log table has overflowed.&quot;;\n\n   public:\n      LogTableOverflowException( String^ auxMessage, Exception^ inner )\n         : Exception( String::Format( &quot;{0} - {1}&quot;, overflowMessage, auxMessage ), inner )\n      {\n         this-&gt;HelpLink = &quot;http://msdn.microsoft.com&quot;;\n         this-&gt;Source = &quot;Exception_Class_Samples&quot;;\n      }\n\n   };\n\n   public ref class LogTable\n   {\n   public:\n      LogTable( int numElements )\n      {\n         logArea = gcnew array&lt;String^&gt;(numElements);\n         elemInUse = 0;\n      }\n\n\n   protected:\n      array&lt;String^&gt;^logArea;\n      int elemInUse;\n\n   public:\n\n      // The AddRecord method throws a derived exception if \n      // the array bounds exception is caught.\n      int AddRecord( String^ newRecord )\n      {\n         try\n         {\n            logArea[ elemInUse ] = newRecord;\n            return elemInUse++;\n         }\n         catch ( Exception^ ex ) \n         {\n            throw gcnew LogTableOverflowException( String::Format( &quot;Record \\&quot;{0}\\&quot; was not logged.&quot;, newRecord ),ex );\n         }\n\n      }\n\n   };\n\n\n   // Create a log table and force an overflow.\n   void ForceOverflow()\n   {\n      LogTable^ log = gcnew LogTable( 4 );\n      try\n      {\n         for ( int count = 1; ; count++ )\n         {\n            log-&gt;AddRecord( String::Format( &quot;Log record number {0}&quot;, count ) );\n\n         }\n      }\n      catch ( Exception^ ex ) \n      {\n         Console::WriteLine( &quot;<br>Message ---<br>{0}&quot;, ex-&gt;Message );\n         Console::WriteLine( &quot;<br>HelpLink ---<br>{0}&quot;, ex-&gt;HelpLink );\n         Console::WriteLine( &quot;<br>Source ---<br>{0}&quot;, ex-&gt;Source );\n         Console::WriteLine( &quot;<br>StackTrace ---<br>{0}&quot;, ex-&gt;StackTrace );\n         Console::WriteLine( &quot;<br>TargetSite ---<br>{0}&quot;, ex-&gt;TargetSite-&gt;ToString() );\n      }\n\n   }\n\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of <br>   Exception::Message, <br>&quot;\n   &quot;   Exception::HelpLink, <br>   Exception::Source, <br>&quot;\n   &quot;   Exception::StackTrace, and <br>   Exception::&quot;\n   &quot;TargetSite <br>generates the following output.&quot; );\n   NDP_UE_CPP::ForceOverflow();\n}\n\n/*\nThis example of\n   Exception::Message,\n   Exception::HelpLink,\n   Exception::Source,\n   Exception::StackTrace, and\n   Exception::TargetSite\ngenerates the following output.\n\nMessage ---\nThe log table has overflowed. - Record &quot;Log record number 5&quot; was not logged.\n\nHelpLink ---\nhttp://msdn.microsoft.com\n\nSource ---\nException_Class_Samples\n\nStackTrace ---\n   at NDP_UE_CPP.LogTable.AddRecord(String newRecord)\n   at NDP_UE_CPP.ForceOverflow()\n\nTargetSite ---\nInt32 AddRecord(System.String)\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Exception.Properties#1\">// Example for the Exception.HelpLink, Exception.Source,\n// Exception.StackTrace, and Exception.TargetSite properties.\nusing System;\n\nnamespace NDP_UE_CS\n{\n    // Derive an exception; the constructor sets the HelpLink and \n    // Source properties.\n    class LogTableOverflowException : Exception\n    {\n        const string overflowMessage = &quot;The log table has overflowed.&quot;;\n\n        public LogTableOverflowException( \n            string auxMessage, Exception inner ) :\n                base( String.Format( &quot;{0} - {1}&quot;, \n                    overflowMessage, auxMessage ), inner )\n        {\n            this.HelpLink = &quot;http://msdn.microsoft.com&quot;;\n            this.Source = &quot;Exception_Class_Samples&quot;;\n        }\n    }\n\n    class LogTable\n    {\n        public LogTable( int numElements )\n        {\n            logArea = new string[ numElements ];\n            elemInUse = 0;\n        }\n\n        protected string[ ] logArea;\n        protected int       elemInUse;\n\n        // The AddRecord method throws a derived exception if \n        // the array bounds exception is caught.\n        public    int       AddRecord( string newRecord )\n        {\n            try\n            {\n                logArea[ elemInUse ] = newRecord;\n                return elemInUse++;\n            }\n            catch( Exception e )\n            {\n                throw new LogTableOverflowException( \n                    String.Format( &quot;Record \\&quot;{0}\\&quot; was not logged.&quot;, \n                        newRecord ), e );\n            }\n        }\n    }\n\n    class OverflowDemo \n    {\n        // Create a log table and force an overflow.\n        public static void Main() \n        {\n            LogTable log = new LogTable( 4 );\n\n            Console.WriteLine( \n                &quot;This example of <br>   Exception.Message, <br>&quot; +\n                &quot;   Exception.HelpLink, <br>   Exception.Source, <br>&quot; +\n                &quot;   Exception.StackTrace, and <br>   Exception.&quot; +\n                &quot;TargetSite <br>generates the following output.&quot; );\n\n            try\n            {\n                for( int count = 1; ; count++ )\n                {\n                    log.AddRecord( \n                        String.Format( \n                            &quot;Log record number {0}&quot;, count ) );\n                }\n            }\n            catch( Exception ex )\n            {\n                Console.WriteLine( &quot;<br>Message ---<br>{0}&quot;, ex.Message );\n                Console.WriteLine( \n                    &quot;<br>HelpLink ---<br>{0}&quot;, ex.HelpLink );\n                Console.WriteLine( &quot;<br>Source ---<br>{0}&quot;, ex.Source );\n                Console.WriteLine( \n                    &quot;<br>StackTrace ---<br>{0}&quot;, ex.StackTrace );\n                Console.WriteLine( \n                    &quot;<br>TargetSite ---<br>{0}&quot;, ex.TargetSite );\n            }\n        }\n    }\n}\n\n/*\nThis example of\n   Exception.Message,\n   Exception.HelpLink,\n   Exception.Source,\n   Exception.StackTrace, and\n   Exception.TargetSite\ngenerates the following output.\n\nMessage ---\nThe log table has overflowed. - Record &quot;Log record number 5&quot; was not logged.\n\nHelpLink ---\nhttp://msdn.microsoft.com\n\nSource ---\nException_Class_Samples\n\nStackTrace ---\n   at NDP_UE_CS.LogTable.AddRecord(String newRecord)\n   at NDP_UE_CS.OverflowDemo.Main()\n\nTargetSite ---\nInt32 AddRecord(System.String)\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Exception.Properties#1\">&#39; Example for the Exception.HelpLink, Exception.Source,\n&#39; Exception.StackTrace, and Exception.TargetSite properties.\nImports System\nImports Microsoft.VisualBasic\n\nNamespace NDP_UE_VB\n\n    &#39; Derive an exception; the constructor sets the HelpLink and \n    &#39; Source properties.\n    Class LogTableOverflowException\n        Inherits Exception\n\n        Private Const overflowMessage As String = _\n            &quot;The log table has overflowed.&quot;\n           \n        Public Sub New( auxMessage As String, inner As Exception )\n            MyBase.New( String.Format( &quot;{0} - {1}&quot;, _\n                overflowMessage, auxMessage ), inner )\n\n            Me.HelpLink = &quot;http://msdn.microsoft.com&quot;\n            Me.Source = &quot;Exception_Class_Samples&quot;\n\n        End Sub &#39; New\n    End Class &#39; LogTableOverflowException\n\n    Class LogTable\n       \n        Public Sub New(numElements As Integer)\n            logArea = New String(numElements) {}\n            elemInUse = 0\n        End Sub &#39; New\n           \n        Protected logArea() As String\n        Protected elemInUse As Integer\n           \n        &#39; The AddRecord method throws a derived exception if \n        &#39; the array bounds exception is caught.\n        Public Function AddRecord( newRecord As String ) As Integer\n\n            Try\n                Dim curElement as Integer = elemInUse\n                logArea( elemInUse ) = newRecord\n                elemInUse += 1\n                Return curElement\n\n            Catch ex As Exception\n                Throw New LogTableOverflowException( _\n                    String.Format( &quot;Record &quot;&quot;{0}&quot;&quot; was not logged.&quot;, _\n                        newRecord ), ex )\n            End Try\n        End Function &#39; AddRecord\n    End Class &#39; LogTable\n\n    Module OverflowDemo\n       \n        &#39; Create a log table and force an overflow.\n        Sub Main( )\n            Dim log As New LogTable( 4 )\n              \n            Console.WriteLine( &quot;This example of &quot; &amp; vbCrLf &amp; _\n                &quot;   Exception.Message, &quot; &amp; vbCrLf &amp; _\n                &quot;   Exception.HelpLink, &quot; &amp; vbCrLf &amp; _\n                &quot;   Exception.Source, &quot; &amp; vbCrLf &amp; _\n                &quot;   Exception.StackTrace, and &quot; &amp; vbCrLf &amp; _\n                &quot;   Exception.TargetSite &quot; &amp; vbCrLf &amp; _\n                &quot;generates the following output.&quot; )\n              \n            Try\n                Dim count As Integer = 0\n                 \n                Do\n                    log.AddRecord( _\n                        String.Format( &quot;Log record number {0}&quot;, count ) )\n                    count += 1\n                Loop\n\n            Catch ex As Exception\n                Console.WriteLine( vbCrLf &amp; _\n                    &quot;Message ---&quot; &amp; vbCrLf &amp; ex.Message )\n                Console.WriteLine( vbCrLf &amp; _\n                    &quot;HelpLink ---&quot; &amp; vbCrLf &amp; ex.HelpLink )\n                Console.WriteLine( vbCrLf &amp; _\n                    &quot;Source ---&quot; &amp; vbCrLf &amp; ex.Source )\n                Console.WriteLine( vbCrLf &amp; _\n                    &quot;StackTrace ---&quot; &amp; vbCrLf &amp; ex.StackTrace )\n                Console.WriteLine( vbCrLf &amp; &quot;TargetSite ---&quot; &amp; _\n                    vbCrLf &amp; ex.TargetSite.ToString( ) )\n            End Try\n        End Sub &#39; Main\n\n    End Module &#39; OverflowDemo\nEnd Namespace &#39; NDP_UE_VB\n\n&#39; This example of\n&#39;    Exception.Message,\n&#39;    Exception.HelpLink,\n&#39;    Exception.Source,\n&#39;    Exception.StackTrace, and\n&#39;    Exception.TargetSite\n&#39; generates the following output.\n&#39; \n&#39; Message ---\n&#39; The log table has overflowed. - Record &quot;Log record number 5&quot; was not logged.\n&#39; \n&#39; HelpLink ---\n&#39; http://msdn.microsoft.com\n&#39; \n&#39; Source ---\n&#39; Exception_Class_Samples\n&#39; \n&#39; StackTrace ---\n&#39;    at NDP_UE_VB.LogTable.AddRecord(String newRecord)\n&#39;    at NDP_UE_VB.OverflowDemo.Main()\n&#39; \n&#39; TargetSite ---\n&#39; Int32 AddRecord(System.String)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Exception_GetBaseException\">\r\n    \r\n            <a id=\"System_Exception_GetBaseException_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetBaseException()</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, returns the <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> that is the root cause of one or more subsequent exceptions.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual Exception GetBaseException ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a></div>\r\n                  </div>\r\n                  <p>The first exception thrown in a chain of exceptions. If the <span class=\"xref\">stem.Exception.InnerException*</span> property of the current exception is a null reference (<code>Nothing</code> in Visual Basic), this property returns the current exception.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A chain of exceptions consists of a set of exceptions such that each exception in the chain was thrown as a direct result of the exception referenced in its <code>InnerException</code> property. For a given chain, there can be exactly one exception that is the root cause of all other exceptions in the chain. This exception is called the base exception and its <code>InnerException</code> property always contains a null reference.  </p>\n<p> For all exceptions in a chain of exceptions, the <code>GetBaseException</code> method must return the same object (the base exception).  </p>\n<p> Use the <code>GetBaseException</code> method when you want to find the root cause of an exception but do not need information about exceptions that may have occurred between the current exception and the first exception.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example defines two derived <code>Exception</code> classes. It forces an exception and then throws it again with each of the derived classes. The code shows the use of the <code>GetBaseException</code> method to retrieve the original exception.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Exception.GetBaseException#1\">&#39; Example for the Exception.GetBaseException method.\nImports System\nImports Microsoft.VisualBasic\n\nNamespace NDP_UE_VB\n\n    &#39; Define two derived exceptions to demonstrate nested exceptions.\n    Class SecondLevelException\n        Inherits Exception\n           \n        Public Sub New( message As String, inner As Exception )\n            MyBase.New( message, inner )\n        End Sub &#39; New\n    End Class &#39; SecondLevelException\n\n    Class ThirdLevelException\n        Inherits Exception\n           \n        Public Sub New( message As String, inner As Exception )\n            MyBase.New( message, inner )\n        End Sub &#39; New\n    End Class &#39; ThirdLevelException\n\n    Class NestedExceptions\n       \n        Public Shared Sub Main( )\n            Console.WriteLine( _\n                &quot;This example of Exception.GetBaseException &quot; &amp; _\n                &quot;generates the following output.&quot; )\n            Console.WriteLine( vbCrLf &amp; _\n                &quot;The program forces a division by 0, then throws &quot; &amp; _\n                &quot;the exception &quot; &amp; vbCrLf &amp; &quot;twice more, using &quot; &amp; _\n                &quot;a different derived exception each time:&quot; &amp; vbCrLf )\n              \n            Try\n                &#39; This sub calls another that forces a division by 0.\n                Rethrow()\n\n            Catch ex As Exception\n                Dim current As Exception\n                 \n                Console.WriteLine( _\n                    &quot;Unwind the nested exceptions using the &quot; &amp; _\n                    &quot;InnerException property:&quot; &amp; vbCrLf )\n                 \n                &#39; This code unwinds the nested exceptions using the \n                &#39; InnerException property.\n                current = ex\n                While Not ( current Is Nothing )\n                    Console.WriteLine( current.ToString( ) )\n                    Console.WriteLine( )\n                    current = current.InnerException\n                End While\n                 \n                &#39; Display the innermost exception.\n                Console.WriteLine( _\n                    &quot;Display the base exception using the &quot; &amp; _\n                    &quot;GetBaseException method:&quot; &amp; vbCrLf )\n                Console.WriteLine( _\n                    ex.GetBaseException( ).ToString( ) )\n            End Try\n        End Sub &#39; Main\n           \n        &#39; This sub catches the exception from the called sub\n        &#39; DivideBy0( ) and throws another in response.\n        Shared Sub Rethrow( )\n            Try\n                DivideBy0( )\n\n            Catch ex As Exception\n                Throw New ThirdLevelException( _\n                    &quot;Caught the second exception and &quot; &amp; _\n                    &quot;threw a third in response.&quot;, ex )\n            End Try\n        End Sub &#39; Rethrow\n           \n        &#39; This sub forces a division by 0 and throws a second \n        &#39; exception.\n        Shared Sub DivideBy0( )\n            Try\n                Dim zero As Integer = 0\n                Dim ecks As Integer = 1 \\ zero\n\n            Catch ex As Exception\n                Throw New SecondLevelException( _\n                    &quot;Forced a division by 0 and threw &quot; &amp; _\n                    &quot;a second exception.&quot;, ex )\n            End Try\n        End Sub &#39; DivideBy0\n    End Class &#39; NestedExceptions\nEnd Namespace &#39; NDP_UE_VB\n\n&#39; This example of Exception.GetBaseException generates the following output.\n&#39; \n&#39; The program forces a division by 0, then throws the exception\n&#39; twice more, using a different derived exception each time:\n&#39; \n&#39; Unwind the nested exceptions using the InnerException property:\n&#39; \n&#39; NDP_UE_VB.ThirdLevelException: Caught the second exception and threw a third\n&#39; in response. ---&gt; NDP_UE_VB.SecondLevelException: Forced a division by 0 and\n&#39; threw a second exception. ---&gt; System.DivideByZeroException: Attempted to div\n&#39; ide by zero.\n&#39;    at NDP_UE_VB.NestedExceptions.DivideBy0()\n&#39;    --- End of inner exception stack trace ---\n&#39;    at NDP_UE_VB.NestedExceptions.DivideBy0()\n&#39;    at NDP_UE_VB.NestedExceptions.Rethrow()\n&#39;    --- End of inner exception stack trace ---\n&#39;    at NDP_UE_VB.NestedExceptions.Rethrow()\n&#39;    at NDP_UE_VB.NestedExceptions.Main()\n&#39; \n&#39; NDP_UE_VB.SecondLevelException: Forced a division by 0 and threw a second exc\n&#39; eption. ---&gt; System.DivideByZeroException: Attempted to divide by zero.\n&#39;    at NDP_UE_VB.NestedExceptions.DivideBy0()\n&#39;    --- End of inner exception stack trace ---\n&#39;    at NDP_UE_VB.NestedExceptions.DivideBy0()\n&#39;    at NDP_UE_VB.NestedExceptions.Rethrow()\n&#39; \n&#39; System.DivideByZeroException: Attempted to divide by zero.\n&#39;    at NDP_UE_VB.NestedExceptions.DivideBy0()\n&#39; \n&#39; Display the base exception using the GetBaseException method:\n&#39; \n&#39; System.DivideByZeroException: Attempted to divide by zero.\n&#39;    at NDP_UE_VB.NestedExceptions.DivideBy0()\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Exception.GetBaseException#1\">// Example for the Exception::GetBaseException method.\nusing namespace System;\n\nnamespace NDP_UE_CPP\n{\n\n   // Define two derived exceptions to demonstrate nested exceptions.\n   ref class SecondLevelException: public Exception\n   {\n   public:\n      SecondLevelException( String^ message, Exception^ inner )\n         : Exception( message, inner )\n      {}\n\n   };\n\n   ref class ThirdLevelException: public Exception\n   {\n   public:\n      ThirdLevelException( String^ message, Exception^ inner )\n         : Exception( message, inner )\n      {}\n\n   };\n\n\n   // DivideBy0 forces a division by 0 and throws a second exception.\n   void DivideBy0()\n   {\n      try\n      {\n         int zero = 0;\n         int ecks = 1 / zero;\n      }\n      catch ( Exception^ ex ) \n      {\n         throw gcnew SecondLevelException( &quot;Forced a division by 0 and threw &quot;\n         &quot;a second exception.&quot;,ex );\n      }\n\n   }\n\n\n   // This function catches the exception from the called function\n   // DivideBy0( ) and throws another in response.\n   void Rethrow()\n   {\n      try\n      {\n         DivideBy0();\n      }\n      catch ( Exception^ ex ) \n      {\n         throw gcnew ThirdLevelException( &quot;Caught the second exception and &quot;\n         &quot;threw a third in response.&quot;,ex );\n      }\n\n   }\n\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of Exception.GetBaseException &quot;\n   &quot;generates the following output.&quot; );\n   Console::WriteLine( &quot;<br>The program forces a division by 0, &quot;\n   &quot;then throws the exception <br>twice more, &quot;\n   &quot;using a different derived exception each time.<br>&quot; );\n   try\n   {\n      \n      // This function calls another that forces a division by 0.\n      NDP_UE_CPP::Rethrow();\n   }\n   catch ( Exception^ e ) \n   {\n      Exception^ current;\n      Console::WriteLine( &quot;Unwind the nested exceptions using &quot;\n      &quot;the InnerException property:<br>&quot; );\n      \n      // This code unwinds the nested exceptions using the \n      // InnerException property.\n      current = e;\n      while ( current != (Object^)0 )\n      {\n         Console::WriteLine( current-&gt;ToString() );\n         Console::WriteLine();\n         current = current-&gt;InnerException;\n      }\n      \n      // Display the innermost exception.\n      Console::WriteLine( &quot;Display the base exception using the <br>&quot;\n      &quot;GetBaseException method:<br>&quot; );\n      Console::WriteLine( e-&gt;GetBaseException()-&gt;ToString() );\n   }\n\n}\n\n/*\nThis example of Exception.GetBaseException generates the following output.\n\nThe program forces a division by 0, then throws the exception\ntwice more, using a different derived exception each time.\n\nUnwind the nested exceptions using the InnerException property:\n\nNDP_UE_CPP.ThirdLevelException: Caught the second exception and threw a third i\nn response. ---&gt; NDP_UE_CPP.SecondLevelException: Forced a division by 0 and th\nrew a second exception. ---&gt; System.DivideByZeroException: Attempted to divide\nby zero.\n   at NDP_UE_CPP.DivideBy0()\n   --- End of inner exception stack trace ---\n   at NDP_UE_CPP.DivideBy0()\n   at NDP_UE_CPP.Rethrow()\n   --- End of inner exception stack trace ---\n   at NDP_UE_CPP.Rethrow()\n   at main()\n\nNDP_UE_CPP.SecondLevelException: Forced a division by 0 and threw a second exce\nption. ---&gt; System.DivideByZeroException: Attempted to divide by zero.\n   at NDP_UE_CPP.DivideBy0()\n   --- End of inner exception stack trace ---\n   at NDP_UE_CPP.DivideBy0()\n   at NDP_UE_CPP.Rethrow()\n\nSystem.DivideByZeroException: Attempted to divide by zero.\n   at NDP_UE_CPP.DivideBy0()\n\nDisplay the base exception using the\nGetBaseException method:\n\nSystem.DivideByZeroException: Attempted to divide by zero.\n   at NDP_UE_CPP.DivideBy0()\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Exception.GetBaseException#1\">// Example for the Exception.GetBaseException method.\nusing System;\n\nnamespace NDP_UE_CS\n{\n    // Define two derived exceptions to demonstrate nested exceptions.\n    class SecondLevelException : Exception\n    {\n        public SecondLevelException( string message, Exception inner )\n            : base( message, inner )\n        { }\n    }\n    class ThirdLevelException : Exception\n    {\n        public ThirdLevelException( string message, Exception inner ) \n            : base( message, inner )\n        { }\n    }\n\n    class NestedExceptions\n    {\n        public static void Main() \n        {\n            Console.WriteLine( \n                &quot;This example of Exception.GetBaseException &quot; +\n                &quot;generates the following output.&quot; );\n            Console.WriteLine( \n                &quot;<br>The program forces a division by 0, then &quot; +\n                &quot;throws the exception <br>twice more, &quot; +\n                &quot;using a different derived exception each time.<br>&quot; );\n\n            try\n            {\n                // This function calls another that forces a \n                // division by 0.\n                Rethrow( );\n            }\n            catch( Exception ex )\n            {\n                Exception current;\n\n                Console.WriteLine( \n                    &quot;Unwind the nested exceptions &quot; +\n                    &quot;using the InnerException property:<br>&quot; );\n\n                // This code unwinds the nested exceptions using the \n                // InnerException property.\n                current = ex;\n                while( current != null )\n                {\n                    Console.WriteLine( current.ToString( ) );\n                    Console.WriteLine( );\n                    current = current.InnerException;\n                }\n\n                // Display the innermost exception.\n                Console.WriteLine( \n                    &quot;Display the base exception &quot; +\n                    &quot;using the GetBaseException method:<br>&quot; );\n                Console.WriteLine( \n                    ex.GetBaseException( ).ToString( ) );\n            }\n        }\n\n        // This function catches the exception from the called \n        // function DivideBy0( ) and throws another in response.\n        static void Rethrow()\n        {\n            try\n            {\n                DivideBy0( );\n            }\n            catch( Exception ex )\n            {\n                throw new ThirdLevelException( \n                    &quot;Caught the second exception and &quot; +\n                    &quot;threw a third in response.&quot;, ex );\n            }\n        }\n\n        // This function forces a division by 0 and throws a second \n        // exception.\n        static void DivideBy0( )\n        {\n            try\n            {\n                int  zero = 0;\n                int  ecks = 1 / zero;\n            }\n            catch( Exception ex )\n            {\n                throw new SecondLevelException( \n                    &quot;Forced a division by 0 and threw &quot; +\n                    &quot;a second exception.&quot;, ex );\n            }\n        }\n    }\n}\n\n/*\nThis example of Exception.GetBaseException generates the following output.\n\nThe program forces a division by 0, then throws the exception\ntwice more, using a different derived exception each time.\n\nUnwind the nested exceptions using the InnerException property:\n\nNDP_UE_CS.ThirdLevelException: Caught the second exception and threw a third in\n response. ---&gt; NDP_UE_CS.SecondLevelException: Forced a division by 0 and thre\nw a second exception. ---&gt; System.DivideByZeroException: Attempted to divide by\n zero.\n   at NDP_UE_CS.NestedExceptions.DivideBy0()\n   --- End of inner exception stack trace ---\n   at NDP_UE_CS.NestedExceptions.DivideBy0()\n   at NDP_UE_CS.NestedExceptions.Rethrow()\n   --- End of inner exception stack trace ---\n   at NDP_UE_CS.NestedExceptions.Rethrow()\n   at NDP_UE_CS.NestedExceptions.Main()\n\nNDP_UE_CS.SecondLevelException: Forced a division by 0 and threw a second excep\ntion. ---&gt; System.DivideByZeroException: Attempted to divide by zero.\n   at NDP_UE_CS.NestedExceptions.DivideBy0()\n   --- End of inner exception stack trace ---\n   at NDP_UE_CS.NestedExceptions.DivideBy0()\n   at NDP_UE_CS.NestedExceptions.Rethrow()\n\nSystem.DivideByZeroException: Attempted to divide by zero.\n   at NDP_UE_CS.NestedExceptions.DivideBy0()\n\nDisplay the base exception using the GetBaseException method:\n\nSystem.DivideByZeroException: Attempted to divide by zero.\n   at NDP_UE_CS.NestedExceptions.DivideBy0()\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Exception_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_Exception_GetObjectData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetObjectData(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, sets the <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> with information about the exception.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>info</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> that holds the serialized object data about the exception being thrown.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a> that contains contextual information about the source or destination.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>info</code> parameter is a null reference (<code>Nothing</code> in Visual Basic).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>GetObjectData</code> sets a <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> with all the exception object data targeted for serialization. During deserialization, the exception is reconstituted from the <code>SerializationInfo</code> transmitted over the stream.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example defines a derived serializable <code>Exception</code> class that implements <code>GetObjectData</code>, which makes minor changes to two properties and then calls the base class to perform the serialization. The example forces a divide-by-0 error and then creates an instance of the derived exception. The code serializes the instance to a file, deserializes the file into a new exception, which it throws, and then catches and displays the exception&#39;s data.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Exception.GetObjectData#1\">using System;\nusing System.IO;\nusing System.Runtime.Serialization;\nusing System.Runtime.Serialization.Formatters.Soap;\nusing System.Security.Permissions;\n\n // Define a serializable derived exception class.\n [Serializable()]\n class SecondLevelException : Exception, ISerializable\n {\n     // This public constructor is used by class instantiators.\n     public SecondLevelException( string message, Exception inner ) :\n         base( message, inner )\n     {\n         HelpLink = &quot;http://MSDN.Microsoft.com&quot;;\n         Source = &quot;Exception_Class_Samples&quot;;\n     }\n\n     // This protected constructor is used for deserialization.\n     protected SecondLevelException( SerializationInfo info, \n         StreamingContext context ) :\n             base( info, context )\n     { }\n\n     // GetObjectData performs a custom serialization.\n     [SecurityPermissionAttribute(SecurityAction.Demand,SerializationFormatter=true)]\n     public override void GetObjectData( SerializationInfo info, \n         StreamingContext context ) \n     {\n         // Change the case of two properties, and then use the \n         // method of the base class.\n         HelpLink = HelpLink.ToLower( );\n         Source = Source.ToUpperInvariant();\n\n         base.GetObjectData( info, context );\n     }\n }\n\n class SerializationDemo \n {\n     public static void Main() \n     {\n         Console.WriteLine( \n             &quot;This example of the Exception constructor &quot; +\n             &quot;and Exception.GetObjectData<br>with Serialization&quot; +\n             &quot;Info and StreamingContext parameters &quot; +\n             &quot;generates <br>the following output.<br>&quot; );\n\n         try\n         {\n             // This code forces a division by 0 and catches the \n             // resulting exception.\n             try\n             {\n                 int  zero = 0;\n                 int  ecks = 1 / zero;\n             }\n             catch( Exception ex )\n             {\n                 // Create a new exception to throw again.\n                 SecondLevelException newExcept =\n                     new SecondLevelException( \n                         &quot;Forced a division by 0 and threw &quot; +\n                         &quot;another exception.&quot;, ex );\n\n                 Console.WriteLine( \n                     &quot;Forced a division by 0, caught the &quot; +\n                     &quot;resulting exception, <br>&quot; +\n                     &quot;and created a derived exception:<br>&quot; );\n                 Console.WriteLine( &quot;HelpLink: {0}&quot;, \n                     newExcept.HelpLink );\n                 Console.WriteLine( &quot;Source:   {0}&quot;, \n                     newExcept.Source );\n\n                 // This FileStream is used for the serialization.\n                 FileStream stream = \n                     new FileStream( &quot;NewException.dat&quot;, \n                         FileMode.Create );\n\n                 try\n                 {\n                     // Serialize the derived exception.\n                     SoapFormatter formatter = \n                         new SoapFormatter( null,\n                             new StreamingContext( \n                                 StreamingContextStates.File ) );\n                     formatter.Serialize( stream, newExcept );\n\n                     // Rewind the stream and deserialize the \n                     // exception.\n                     stream.Position = 0;\n                     SecondLevelException deserExcept = \n                         (SecondLevelException)\n                             formatter.Deserialize( stream );\n\n                     Console.WriteLine( \n                         &quot;<br>Serialized the exception, and then &quot; +\n                         &quot;deserialized the resulting stream &quot; +\n                         &quot;into a <br>new exception. &quot; +\n                         &quot;The deserialization changed the case &quot; +\n                         &quot;of certain properties:<br>&quot; );\n                     \n                     // Throw the deserialized exception again.\n                     throw deserExcept;\n                 }\n                 catch( SerializationException se )\n                 {\n                     Console.WriteLine( &quot;Failed to serialize: {0}&quot;, \n                         se.ToString( ) );\n                 }\n                 finally\n                 {\n                     stream.Close( );\n                 }\n             }\n         }\n         catch( Exception ex )\n         {\n             Console.WriteLine( &quot;HelpLink: {0}&quot;, ex.HelpLink );\n             Console.WriteLine( &quot;Source:   {0}&quot;, ex.Source );\n\n             Console.WriteLine( );\n             Console.WriteLine( ex.ToString( ) );\n         }\n     }\n }\n/*\nThis example displays the following output.\n\nForced a division by 0, caught the resulting exception,\nand created a derived exception:\n\nHelpLink: http://MSDN.Microsoft.com\nSource:   Exception_Class_Samples\n\nSerialized the exception, and then deserialized the resulting stream into a\nnew exception. The deserialization changed the case of certain properties:\n\nHelpLink: http://msdn.microsoft.com\nSource:   EXCEPTION_CLASS_SAMPLES\n\nNDP_UE_CS.SecondLevelException: Forced a division by 0 and threw another except\nion. ---&gt; System.DivideByZeroException: Attempted to divide by zero.\n   at NDP_UE_CS.SerializationDemo.Main()\n   --- End of inner exception stack trace ---\n   at NDP_UE_CS.SerializationDemo.Main()\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Exception.GetObjectData#1\">#using &lt;System.Runtime.Serialization.Formatters.Soap.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Runtime::Serialization;\nusing namespace System::Runtime::Serialization::Formatters::Soap;\n\n// Define a serializable derived exception class.\n\n[Serializable]\nref class SecondLevelException: public Exception, public ISerializable\n{\npublic:\n\n   // This public constructor is used by class instantiators.\n   SecondLevelException( String^ message, Exception^ inner )\n      : Exception( message, inner )\n   {\n      HelpLink = &quot;http://MSDN.Microsoft.com&quot;;\n      Source = &quot;Exception_Class_Samples&quot;;\n   }\n\n\nprotected:\n\n   // This protected constructor is used for deserialization.\n   SecondLevelException( SerializationInfo^ info, StreamingContext context )\n      : Exception( info, context )\n   {}\n\n\npublic:\n\n   // GetObjectData performs a custom serialization.\n   [System::Security::Permissions::SecurityPermissionAttribute\n   (System::Security::Permissions::SecurityAction::LinkDemand, \n   Flags=System::Security::Permissions::SecurityPermissionFlag::SerializationFormatter)]\n   virtual void GetObjectData( SerializationInfo^ info, StreamingContext context ) override\n   {\n      \n      // Change the case of two properties, and then use the \n      // method of the base class.\n      HelpLink = HelpLink-&gt;ToLower();\n      Source = Source-&gt;ToUpperInvariant();\n      Exception::GetObjectData( info, context );\n   }\n\n};\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the Exception constructor &quot;\n   &quot;and Exception.GetObjectData<br>with Serialization&quot;\n   &quot;Info and StreamingContext parameters &quot;\n   &quot;generates <br>the following output.<br>&quot; );\n   try\n   {\n      \n      // This code forces a division by 0 and catches the \n      // resulting exception.\n      try\n      {\n         int zero = 0;\n         int ecks = 1 / zero;\n      }\n      catch ( Exception^ ex ) \n      {\n         \n         // Create a new exception to throw again.\n         SecondLevelException^ newExcept = gcnew SecondLevelException( &quot;Forced a division by 0 and threw &quot;\n         &quot;another exception.&quot;,ex );\n         Console::WriteLine( &quot;Forced a division by 0, caught the &quot;\n         &quot;resulting exception, <br>&quot;\n         &quot;and created a derived exception:<br>&quot; );\n         Console::WriteLine( &quot;HelpLink: {0}&quot;, newExcept-&gt;HelpLink );\n         Console::WriteLine( &quot;Source:   {0}&quot;, newExcept-&gt;Source );\n         \n         // This FileStream is used for the serialization.\n         FileStream^ stream = gcnew FileStream( &quot;NewException.dat&quot;,FileMode::Create );\n         try\n         {\n            \n            // Serialize the derived exception.\n            SoapFormatter^ formatter = gcnew SoapFormatter( nullptr,StreamingContext(StreamingContextStates::File) );\n            formatter-&gt;Serialize( stream, newExcept );\n            \n            // Rewind the stream and deserialize the \n            // exception.\n            stream-&gt;Position = 0;\n            SecondLevelException^ deserExcept = dynamic_cast&lt;SecondLevelException^&gt;(formatter-&gt;Deserialize( stream ));\n            Console::WriteLine( &quot;<br>Serialized the exception, and then &quot;\n            &quot;deserialized the resulting stream &quot;\n            &quot;into a <br>new exception. &quot;\n            &quot;The deserialization changed the case &quot;\n            &quot;of certain properties:<br>&quot; );\n            \n            // Throw the deserialized exception again.\n            throw deserExcept;\n         }\n         catch ( SerializationException^ se ) \n         {\n            Console::WriteLine( &quot;Failed to serialize: {0}&quot;, se-&gt;ToString() );\n         }\n         finally\n         {\n            stream-&gt;Close();\n         }\n\n      }\n\n   }\n   catch ( Exception^ ex ) \n   {\n      Console::WriteLine( &quot;HelpLink: {0}&quot;, ex-&gt;HelpLink );\n      Console::WriteLine( &quot;Source:   {0}&quot;, ex-&gt;Source );\n      Console::WriteLine();\n      Console::WriteLine( ex-&gt;ToString() );\n   }\n\n}\n\n/*\nThis example of the Exception constructor and Exception.GetObjectData\nwith SerializationInfo and StreamingContext parameters generates\nthe following output.\n\nForced a division by 0, caught the resulting exception,\nand created a derived exception:\n\nHelpLink: http://MSDN.Microsoft.com\nSource:   Exception_Class_Samples\n\nSerialized the exception, and then deserialized the resulting stream into a\nnew exception. The deserialization changed the case of certain properties:\n\nHelpLink: http://msdn.microsoft.com\nSource:   EXCEPTION_CLASS_SAMPLES\n\nSecondLevelException: Forced a division by 0 and threw another exception. ---&gt; S\nystem.DivideByZeroException: Attempted to divide by zero.\n   at main()\n   --- End of inner exception stack trace ---\n   at main()\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Exception.GetObjectData#1\">&#39; If compiling with the Visual Basic compiler (vbc.exe) from the command\n&#39; prompt, be sure to add the following switch:\n&#39;    /reference:System.Runtime.Serialization.Formatters.Soap.dll \nImports System.IO\nImports System.Runtime.Serialization\nImports System.Runtime.Serialization.Formatters.Soap\nImports System.Security.Permissions\n\n &#39; Define a serializable derived exception class.\n &lt;Serializable()&gt;  _\n Class SecondLevelException\n     Inherits Exception\n\n     &#39; This public constructor is used by class instantiators.\n     Public Sub New( message As String, inner As Exception )\n         MyBase.New( message, inner )\n\n         HelpLink = &quot;http://MSDN.Microsoft.com&quot;\n         Source = &quot;Exception_Class_Samples&quot;\n     End Sub\n\n     &#39; This protected constructor is used for deserialization.\n     Protected Sub New( info As SerializationInfo, _\n         context As StreamingContext )\n             MyBase.New( info, context )\n     End Sub\n\n     &#39; GetObjectData performs a custom serialization.\n     &lt;SecurityPermissionAttribute(SecurityAction.Demand, _\n                                  SerializationFormatter:=True)&gt; _\n     Overrides Sub GetObjectData( info As SerializationInfo, _\n         context As StreamingContext)\n\n         &#39; Change the case of two properties, and then use the\n         &#39; method of the base class.\n         HelpLink = HelpLink.ToLower()\n         Source = Source.ToUpperInvariant()\n\n         MyBase.GetObjectData(info, context)\n     End Sub\n End Class\n\n Module SerializationDemo\n\n     Sub Main()\n         Console.WriteLine( _\n             &quot;This example of the Exception constructor &quot; &amp; _\n             &quot;and Exception.GetObjectData &quot; &amp; vbCrLf &amp; _\n             &quot;with SerializationInfo and StreamingContext &quot; &amp; _\n             &quot;parameters generates &quot; &amp; vbCrLf &amp; _\n             &quot;the following output.&quot; &amp; vbCrLf )\n\n         &#39; This code forces a division by 0 and catches the\n         &#39; resulting exception.\n         Try\n             Try\n                 Dim zero As Integer = 0\n                 Dim ecks As Integer = 1 \\ zero\n\n             &#39; Create a new exception to throw again.\n             Catch ex As Exception\n\n                 Dim newExcept As New SecondLevelException( _\n                     &quot;Forced a division by 0 and threw &quot; &amp; _\n                     &quot;another exception.&quot;, ex )\n\n                 Console.WriteLine( _\n                     &quot;Forced a division by 0, caught the &quot; &amp; _\n                     &quot;resulting exception, &quot; &amp; vbCrLf &amp; _\n                     &quot;and created a derived exception:&quot; &amp; vbCrLf )\n                 Console.WriteLine( &quot;HelpLink: {0}&quot;, _\n                     newExcept.HelpLink )\n                 Console.WriteLine( &quot;Source:   {0}&quot;, _\n                     newExcept.Source )\n\n                 &#39; This FileStream is used for the serialization.\n                 Dim stream As New FileStream( _\n                     &quot;NewException.dat&quot;, FileMode.Create )\n\n                 &#39; Serialize the derived exception.\n                 Try\n                     Dim formatter As New SoapFormatter( Nothing, _\n                         New StreamingContext( _\n                             StreamingContextStates.File ) )\n                     formatter.Serialize( stream, newExcept )\n\n                     &#39; Rewind the stream and deserialize the\n                     &#39; exception.\n                     stream.Position = 0\n                     Dim deserExcept As SecondLevelException = _\n                         CType( formatter.Deserialize( stream ), _\n                             SecondLevelException )\n\n                     Console.WriteLine( vbCrLf &amp; _\n                         &quot;Serialized the exception, and then &quot; &amp; _\n                         &quot;deserialized the resulting stream &quot; &amp; _\n                         &quot;into a &quot; &amp; vbCrLf &amp; &quot;new exception. &quot; &amp; _\n                         &quot;The deserialization changed the case &quot; &amp; _\n                         &quot;of certain properties:&quot; &amp; vbCrLf )\n\n                     &#39; Throw the deserialized exception again.\n                     Throw deserExcept\n\n                 Catch se As SerializationException\n                     Console.WriteLine( &quot;Failed to serialize: {0}&quot;, _\n                         se.ToString( ) )\n\n                 Finally\n                     stream.Close( )\n                 End Try\n             End Try\n         Catch ex As Exception\n             Console.WriteLine( &quot;HelpLink: {0}&quot;, ex.HelpLink )\n             Console.WriteLine( &quot;Source:   {0}&quot;, ex.Source )\n\n             Console.WriteLine( )\n             Console.WriteLine( ex.ToString( ) )\n         End Try\n     End Sub\n End Module\n&#39; This example displays the following output:\n&#39; \n&#39; Forced a division by 0, caught the resulting exception,\n&#39; and created a derived exception:\n&#39; \n&#39; HelpLink: http://MSDN.Microsoft.com\n&#39; Source:   Exception_Class_Samples\n&#39; \n&#39; Serialized the exception, and then deserialized the resulting stream into a\n&#39; new exception. The deserialization changed the case of certain properties:\n&#39; \n&#39; HelpLink: http://msdn.microsoft.com\n&#39; Source:   EXCEPTION_CLASS_SAMPLES\n&#39; \n&#39; NDP_UE_VB.SecondLevelException: Forced a division by 0 and threw another exce\n&#39; ption. ---&gt; System.DivideByZeroException: Attempted to divide by zero.\n&#39;    at NDP_UE_VB.SerializationDemo.Main()\n&#39;    --- End of inner exception stack trace ---\n&#39;    at NDP_UE_VB.SerializationDemo.Main()\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Exception_GetType\">\r\n    \r\n            <a id=\"System_Exception_GetType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetType()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the runtime type of the current instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Type GetType ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the exact runtime type of the current instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetType method exists to support the .NET Framework infrastructure, and internally invokes the fundamental method, <a class=\"xref\" href=\"system.object#System_Object_GetType_\" data-linktype=\"relative-path\">GetType</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Exception_ToString\">\r\n    \r\n            <a id=\"System_Exception_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Creates and returns a string representation of the current exception.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string representation of the current exception.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>ToString returns a representation of the current exception that is intended to be understood by humans. Where the exception contains culture-sensitive data, the string representation returned by <code>ToString</code> is required to take into account the current system culture. Although there are no exact requirements for the format of the returned string, it should attempt to reflect the value of the object as perceived by the user.  </p>\n<p> The default implementation of ToString obtains the name of the class that threw the current exception, the message, the result of calling ToString on the inner exception, and the result of calling <a class=\"xref\" href=\"system.environment#System_Environment_StackTrace_\" data-linktype=\"relative-path\">StackTrace</a>. If any of these members is <code>null</code>, its value is not included in the returned string.  </p>\n<p> If there is no error message or if it is an empty string (&quot;&quot;), then no error message is returned. The name of the inner exception and the stack trace are returned only if they are not <code>null</code>.  </p>\n<p> This method overrides <a class=\"xref\" href=\"system.object#System_Object_ToString_\" data-linktype=\"relative-path\">ToString</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example causes an exception and displays the result of calling ToString on that exception. Note that the ToString method is called implicitly when the Exception class instance appears in the argument list of the <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Exception.ToString#1\">using namespace System;\n\npublic ref class TestClass{};\n\nint main()\n{\n   TestClass^ test = gcnew TestClass;\n   array&lt;Object^&gt;^ objectsToCompare = { test, test-&gt;ToString(), 123,\n                                        (123).ToString(), &quot;some text&quot;,\n                                        &quot;Some Text&quot; };\n   String^ s = &quot;some text&quot;;\n   for each (Object^ objectToCompare in objectsToCompare) {\n      try {\n         Int32 i = s-&gt;CompareTo(objectToCompare);\n         Console::WriteLine(&quot;Comparing &#39;{0}&#39; with &#39;{1}&#39;: {2}&quot;,\n                            s, objectToCompare, i);\n      }\n      catch (ArgumentException^ e) {\n            Console::WriteLine(&quot;Bad argument: {0} (type {1})&quot;,\n                              objectToCompare,\n                              objectToCompare-&gt;GetType()-&gt;Name);\n            Console::WriteLine(&quot;Exception information: {0}&quot;, e);\n      }\n      Console::WriteLine();\n   }\n}\n// The example displays the following output:\n//     Bad argument: TestClass (type TestClass)\n//     Exception information: System.ArgumentException: Object must be of type String.\n//        at System.String.CompareTo(Object value)\n//        at Example.Main()\n//     \n//     Comparing &#39;some text&#39; with &#39;TestClass&#39;: -1\n//     \n//     Bad argument: 123 (type Int32)\n//     Exception information: System.ArgumentException: Object must be of type String.\n//        at System.String.CompareTo(Object value)\n//        at Example.Main()\n//     \n//     Comparing &#39;some text&#39; with &#39;123&#39;: 1\n//     \n//     Comparing &#39;some text&#39; with &#39;some text&#39;: 0\n//     \n//     Comparing &#39;some text&#39; with &#39;Some Text&#39;: -1\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Exception.ToString#1\">using System;\n\npublic class TestClass\n{}\n\npublic class Example \n{\n   public static void Main()\n   {\n      var test = new TestClass();\n      Object[] objectsToCompare = { test, test.ToString(), 123,\n                                    123.ToString(), &quot;some text&quot;,\n                                    &quot;Some Text&quot; };\n      string s = &quot;some text&quot;;\n      foreach (var objectToCompare in objectsToCompare) {\n         try {\n            int i = s.CompareTo(objectToCompare);\n            Console.WriteLine(&quot;Comparing &#39;{0}&#39; with &#39;{1}&#39;: {2}&quot;,\n                              s, objectToCompare, i);\n         }\n         catch (ArgumentException e) {\n            Console.WriteLine(&quot;Bad argument: {0} (type {1})&quot;,\n                              objectToCompare,\n                              objectToCompare.GetType().Name);\n            Console.WriteLine(&quot;Exception information: {0}&quot;, e);\n         }\n         Console.WriteLine();\n      }\n   }\n}\n// The example displays the following output:\n//     Bad argument: TestClass (type TestClass)\n//     Exception information: System.ArgumentException: Object must be of type String.\n//        at System.String.CompareTo(Object value)\n//        at Example.Main()\n//     \n//     Comparing &#39;some text&#39; with &#39;TestClass&#39;: -1\n//     \n//     Bad argument: 123 (type Int32)\n//     Exception information: System.ArgumentException: Object must be of type String.\n//        at System.String.CompareTo(Object value)\n//        at Example.Main()\n//     \n//     Comparing &#39;some text&#39; with &#39;123&#39;: 1\n//     \n//     Comparing &#39;some text&#39; with &#39;some text&#39;: 0\n//     \n//     Comparing &#39;some text&#39; with &#39;Some Text&#39;: -1\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Exception.ToString#1\">Public Class TestClass\nEnd Class \n\nPublic Class Example\n   Public Shared Sub Main()\n      Dim test As New TestClass()\n      Dim objectsToCompare() As Object = { test, test.ToString(), 123,\n                                           123.ToString(), &quot;some text&quot;,\n                                           &quot;Some Text&quot; }\n      Dim s As String = &quot;some text&quot;\n      For Each objectToCompare In objectsToCompare\n         Try\n            Dim i As Integer = s.CompareTo(objectToCompare)\n            Console.WriteLine(&quot;Comparing &#39;{0}&#39; with &#39;{1}&#39;: {2}&quot;,\n                              s, objectToCompare, i)\n         Catch e As ArgumentException\n            Console.WriteLine(&quot;Bad argument: {0} (type {1})&quot;,\n                              objectToCompare,\n                              objectToCompare.GetType().Name)\n            Console.WriteLine(&quot;Exception information: {0}&quot;, e)\n         End Try\n         Console.WriteLine()\n      Next\n   End Sub \nEnd Class \n&#39; The example displays the following output:\n&#39;     Bad argument: TestClass (type TestClass)\n&#39;     Exception information: System.ArgumentException: Object must be of type String.\n&#39;        at System.String.CompareTo(Object value)\n&#39;        at Example.Main()\n&#39;     \n&#39;     Comparing &#39;some text&#39; with &#39;TestClass&#39;: -1\n&#39;     \n&#39;     Bad argument: 123 (type Int32)\n&#39;     Exception information: System.ArgumentException: Object must be of type String.\n&#39;        at System.String.CompareTo(Object value)\n&#39;        at Example.Main()\n&#39;     \n&#39;     Comparing &#39;some text&#39; with &#39;123&#39;: 1\n&#39;     \n&#39;     Comparing &#39;some text&#39; with &#39;some text&#39;: 0\n&#39;     \n&#39;     Comparing &#39;some text&#39; with &#39;Some Text&#39;: -1\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"events\">\r\n        <h2>Events\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Exception_SerializeObjectState\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SerializeObjectState</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when an exception is serialized to create an exception state object that contains serialized data about the exception.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected event EventHandler&lt;System.Runtime.Serialization.SafeSerializationEventArgs&gt; SerializeObjectState;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The exception state object implements the <a class=\"xref\" href=\"system.runtime.serialization.isafeserializationdata\" data-linktype=\"relative-path\">ISafeSerializationData</a> interface.  </p>\n<p> When the SerializeObjectState event is subscribed to, the exception is deserialized and created as an empty exception. The exception&#39;s constructor is not run, and the exception state is also deserialized. The <a class=\"xref\" href=\"system.runtime.serialization.isafeserializationdata#System_Runtime_Serialization_ISafeSerializationData_CompleteDeserialization_\" data-linktype=\"relative-path\">CompleteDeserialization</a> callback method of the exception state object is then notified so that it can push deserialized data into the empty exception.  </p>\n<p> The SerializeObjectState event enables transparent exception types to serialize and deserialize exception data. Transparent code can execute commands within the bounds of the permission set it is operating within, but cannot execute, call, derive from, or contain critical code.  </p>\n<p> If the SerializeObjectState event is not subscribed to, deserialization occurs as usual using the <a class=\"xref\" href=\"system.exception#System_Exception__ctor_\" data-linktype=\"relative-path\">Exception</a> constructor.  </p>\n<p> Typically, a handler for the SerializeObjectState event is added in the exception&#39;s constructor to provide for its serialization. But because the constructor is not executed when the SerializeObjectState event handler executes, serializing a deserialized exception can throw a <a class=\"xref\" href=\"system.runtime.serialization.serializationexception\" data-linktype=\"relative-path\">SerializationException</a> exception when you try to deserialize the exception. To avoid this, you should also add the handler for the SerializeObjectState event in the <a class=\"xref\" href=\"system.runtime.serialization.isafeserializationdata#System_Runtime_Serialization_ISafeSerializationData_CompleteDeserialization_\" data-linktype=\"relative-path\">CompleteDeserialization</a> method. See the Examples section for an illustration.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a <code>BadDivisionException</code> that handles the SerializeObjectState event. It also contains a state object, which is a nested structure named <code>BadDivisionExceptionState</code> that implements the <a class=\"xref\" href=\"system.runtime.serialization.isafeserializationdata\" data-linktype=\"relative-path\">ISafeSerializationData</a> interface.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Exception.SerializeObjectState#1\">Imports System.IO\nImports System.Runtime.Serialization\nImports System.Runtime.Serialization.Formatters.Binary\n           \nModule Example\n   Public Sub Main()\n      Dim serialized As Boolean = False\n      Dim formatter As New BinaryFormatter()\n      Dim values() As Double = { 3, 2, 1 }\n      Dim divisor As Double = 0\n      For Each value In values\n         Try\n            Dim ex As BadDivisionException = Nothing\n            If divisor = 0 Then \n               If Not serialized Then\n                  &#39; Instantiate the exception object.\n                  ex = New BadDivisionException(0)\n                  &#39; Serialize the exception object.\n                  Dim fs As New FileStream(&quot;BadDivision1.dat&quot;, \n                                           FileMode.Create)\n                  formatter.Serialize(fs, ex)\n                  fs.Close()\n                  Console.WriteLine(&quot;Serialized the exception...&quot;)\n               Else\n                  &#39; Deserialize the exception.\n                  Dim fs As New FileStream(&quot;BadDivision1.dat&quot;,\n                                           FileMode.Open)\n                  ex = CType(formatter.Deserialize(fs), BadDivisionException)\n                  &#39; Reserialize the exception.\n                  fs.Position = 0\n                  formatter.Serialize(fs, ex)\n                  fs.Close()\n                  Console.WriteLine(&quot;Reserialized the exception...&quot;)                                            \n               End If   \n              Throw ex \n            End If \n            Console.WriteLine(&quot;{0} / {1} = {1}&quot;, value, divisor, value/divisor)\n         Catch e As BadDivisionException\n            Console.WriteLine(&quot;Bad divisor from a {0} exception: {1}&quot;,\n                              If(serialized, &quot;deserialized&quot;, &quot;new&quot;), e.Divisor)             \n            serialized = True\n         End Try   \n      Next\n   End Sub\nEnd Module\n\n&lt;Serializable&gt; Public Class BadDivisionException : Inherits Exception\n   &#39; Maintain an internal BadDivisionException state object.\n   &lt;NonSerialized&gt; Private state As New BadDivisionExceptionState()\n\n   Public Sub New(divisor As Double)\n      state.Divisor = divisor\n      HandleSerialization()      \n   End Sub\n   \n   Private Sub HandleSerialization()\n      AddHandler SerializeObjectState, \n                 Sub(exception As Object, eventArgs As SafeSerializationEventArgs)\n                    eventArgs.AddSerializedState(state)\n                 End Sub\n   End Sub\n   \n   Public ReadOnly Property Divisor As Double\n      Get\n         Return state.Divisor\n      End Get      \n   End Property\n\n   &lt;Serializable&gt; Private Structure BadDivisionExceptionState \n                                    Implements ISafeSerializationData\n      private badDivisor As Double\n      \n      Public Property Divisor As Double\n         Get\n            Return badDivisor\n         End Get\n         Set\n            badDivisor = value\n         End Set\n      End Property \n\n      Sub CompleteDeserialization(deserialized As Object) _\n            Implements ISafeSerializationData.CompleteDeserialization\n         Dim ex As BadDivisionException = TryCast(deserialized, BadDivisionException)\n         ex.HandleSerialization()\n         ex.state = Me \n      End Sub\n   End Structure\nEnd Class\n&#39; The example displays the following output:\n&#39;       Serialized the exception...\n&#39;       Bad divisor from a new exception: 0\n&#39;       Reserialized the exception...\n&#39;       Bad divisor from a deserialized exception: 0\n&#39;       Reserialized the exception...\n&#39;       Bad divisor from a deserialized exception: 0\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Exception.SerializeObjectState#1\">using System;\nusing System.IO;\nusing System.Runtime.Serialization;\nusing System.Runtime.Serialization.Formatters.Binary;\n\npublic class Example\n{\n   public static void Main()\n   {\n      bool serialized = false;\n      var formatter = new BinaryFormatter();\n      Double[] values = { 3, 2, 1 };\n      Double divisor = 0;\n      foreach (var value in values) {\n         try {\n            BadDivisionException ex = null;\n            if (divisor == 0) { \n               if (! serialized) {\n                  // Instantiate the exception object.\n                  ex = new BadDivisionException(0);\n                  // Serialize the exception object.\n                  var fs = new FileStream(&quot;BadDivision1.dat&quot;, \n                                           FileMode.Create);\n                  formatter.Serialize(fs, ex);\n                  fs.Close();\n                  Console.WriteLine(&quot;Serialized the exception...&quot;);\n               }\n               else {\n                  // Deserialize the exception.\n                  var fs = new FileStream(&quot;BadDivision1.dat&quot;,\n                                           FileMode.Open);\n                  ex = (BadDivisionException) formatter.Deserialize(fs);\n                  // Reserialize the exception.\n                  fs.Position = 0;\n                  formatter.Serialize(fs, ex);\n                  fs.Close();\n                  Console.WriteLine(&quot;Reserialized the exception...&quot;);                                            \n               }   \n              throw ex; \n            } \n            Console.WriteLine(&quot;{0} / {1} = {1}&quot;, value, divisor, value/divisor);\n         }   \n         catch (BadDivisionException e) {\n            Console.WriteLine(&quot;Bad divisor from a {0} exception: {1}&quot;,\n                              serialized ? &quot;deserialized&quot; : &quot;new&quot;, e.Divisor);             \n            serialized = true;\n         }   \n      }\n   }\n}\n\n[Serializable] public class BadDivisionException : Exception\n{\n   // Maintain an internal BadDivisionException state object.\n   [NonSerialized] private BadDivisionExceptionState state = new BadDivisionExceptionState();\n\n   public BadDivisionException(Double divisor)\n   {\n      state.Divisor = divisor;\n      HandleSerialization();      \n   }\n   \n   private void HandleSerialization()\n   {\n      SerializeObjectState += delegate(object exception, SafeSerializationEventArgs eventArgs) \n                                      { \n                                          eventArgs.AddSerializedState(state);\n                                      };\n   }\n   \n   public Double Divisor\n   { get { return state.Divisor; } }\n\n   [Serializable] private struct BadDivisionExceptionState : ISafeSerializationData \n   {\n      private Double badDivisor;\n      \n      public Double Divisor\n      { get { return badDivisor; } \n        set { badDivisor = value; } }\n\n      void ISafeSerializationData.CompleteDeserialization(object deserialized)\n      { \n         var ex = deserialized as BadDivisionException;\n         ex.HandleSerialization();\n         ex.state = this; \n      }\n   }\n}\n// The example displays the following output:\n//       Serialized the exception...\n//       Bad divisor from a new exception: 0\n//       Reserialized the exception...\n//       Bad divisor from a deserialized exception: 0\n//       Reserialized the exception...\n//       Bad divisor from a deserialized exception: 0\n</code></pre><p> The <code>BadDivisionException</code> exception is thrown when a floating-point division by zero occurs. During the first division by zero, the example instantiates a <code>BadDivisionException</code> object, serializes it, and throws the exception. When subsequent divisions by zero occur, the example deserializes the  previously serialized object, reserializes it, and throws the exception. To provide for object serialization, deserialization, reserialization, and deserialization, the example adds the SerializeObjectState event handler both in the <code>BadDivisionException</code> class constructor and in the <a class=\"xref\" href=\"system.runtime.serialization.isafeserializationdata#System_Runtime_Serialization_ISafeSerializationData_CompleteDeserialization_\" data-linktype=\"relative-path\">CompleteDeserialization</a> implementation.</p>\n\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Exception.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Exception.yml\">\r\n<meta name=\"APIName\" content=\"System.Exception\">\r\n<meta name=\"APIName\" content=\"System.Exception..ctor\">\r\n<meta name=\"APIName\" content=\"System.Exception.Data\">\r\n<meta name=\"APIName\" content=\"System.Exception.GetBaseException\">\r\n<meta name=\"APIName\" content=\"System.Exception.GetObjectData\">\r\n<meta name=\"APIName\" content=\"System.Exception.GetType\">\r\n<meta name=\"APIName\" content=\"System.Exception.HelpLink\">\r\n<meta name=\"APIName\" content=\"System.Exception.HResult\">\r\n<meta name=\"APIName\" content=\"System.Exception.InnerException\">\r\n<meta name=\"APIName\" content=\"System.Exception.Message\">\r\n<meta name=\"APIName\" content=\"System.Exception.SerializeObjectState\">\r\n<meta name=\"APIName\" content=\"System.Exception.add_SerializeObjectState\">\r\n<meta name=\"APIName\" content=\"System.Exception.remove_SerializeObjectState\">\r\n<meta name=\"APIName\" content=\"System.Exception.Source\">\r\n<meta name=\"APIName\" content=\"System.Exception.StackTrace\">\r\n<meta name=\"APIName\" content=\"System.Exception.TargetSite\">\r\n<meta name=\"APIName\" content=\"System.Exception.ToString\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"fba2c783-fb7a-fecb-2218-d6193d28e2a2\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents errors that occur during application execution.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Exception\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Exception.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Exception.yml","open_to_public_contributors":true,"api_name":["System.Exception","System.Exception..ctor","System.Exception.Data","System.Exception.GetBaseException","System.Exception.GetObjectData","System.Exception.GetType","System.Exception.HelpLink","System.Exception.HResult","System.Exception.InnerException","System.Exception.Message","System.Exception.SerializeObjectState","System.Exception.add_SerializeObjectState","System.Exception.remove_SerializeObjectState","System.Exception.Source","System.Exception.StackTrace","System.Exception.TargetSite","System.Exception.ToString"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Exception","System::Exception","System.Exception.#ctor","System::Exception::#ctor","System.Exception.Data","System::Exception::Data","System.Exception.GetBaseException","System::Exception::GetBaseException","System.Exception.GetObjectData","System::Exception::GetObjectData","System.Exception.GetType","System::Exception::GetType","System.Exception.HelpLink","System::Exception::HelpLink","System.Exception.HResult","System::Exception::HResult","System.Exception.InnerException","System::Exception::InnerException","System.Exception.Message","System::Exception::Message","System.Exception.SerializeObjectState","System::Exception::SerializeObjectState","System.Exception.Source","System::Exception::Source","System.Exception.StackTrace","System::Exception::StackTrace","System.Exception.TargetSite","System::Exception::TargetSite","System.Exception.ToString","System::Exception::ToString"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"fba2c783-fb7a-fecb-2218-d6193d28e2a2","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/Exception.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Exception class | Microsoft Docs","_op_ogTitle":"Exception class","description":"Represents errors that occur during application execution.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Exception","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.exception","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.exception","fileRelativePath":"System.Exception.html"},"themesRelativePathToOutputRoot":"_themes/"}