{"content":"    \r\n    <h1 id=\"System_Windows_Forms_DataGridViewCellParsingEventArgs\">\r\n      <span class=\"lang-csharp\">DataGridViewCellParsingEventArgs</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides data for the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellParsing\" data-linktype=\"relative-path\">CellParsing</a> event of a <a class=\"xref\" href=\"system.windows.forms.datagridview\" data-linktype=\"relative-path\">DataGridView</a> control.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class DataGridViewCellParsingEventArgs : System.Windows.Forms.ConvertEventArgs</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.converteventargs\" data-linktype=\"relative-path\">System.Windows.Forms.ConvertEventArgs</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">DataGridViewCellParsingEventArgs</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.eventargs#System_EventArgs_Empty\" data-linktype=\"relative-path\">Empty</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.converteventargs#System_Windows_Forms_ConvertEventArgs_DesiredType\" data-linktype=\"relative-path\">DesiredType</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.converteventargs#System_Windows_Forms_ConvertEventArgs_Value\" data-linktype=\"relative-path\">Value</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Handle the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellParsing\" data-linktype=\"relative-path\">CellParsing</a> event to provide custom value conversion from a user-specified value to a value in the type specified by the cell <a class=\"xref\" href=\"system.windows.forms.datagridviewcell#System_Windows_Forms_DataGridViewCell_ValueType_\" data-linktype=\"relative-path\">ValueType</a> property.  </p>\n<p> When you handle the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellParsing\" data-linktype=\"relative-path\">CellParsing</a> event, you can convert the value yourself or you can customize the default conversion. For example, you can convert the value yourself using the cell <a class=\"xref\" href=\"system.windows.forms.datagridviewcell#System_Windows_Forms_DataGridViewCell_ParseFormattedValue_\" data-linktype=\"relative-path\">ParseFormattedValue</a> method with type converters of your choosing. Alternately, you can let the default type converters parse the value, but modify the <a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle#System_Windows_Forms_DataGridViewCellStyle_NullValue_\" data-linktype=\"relative-path\">NullValue</a>, <a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle#System_Windows_Forms_DataGridViewCellStyle_DataSourceNullValue_\" data-linktype=\"relative-path\">DataSourceNullValue</a>, and <a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle#System_Windows_Forms_DataGridViewCellStyle_FormatProvider_\" data-linktype=\"relative-path\">FormatProvider</a> properties of the object returned by the <a class=\"xref\" href=\"system.windows.forms.datagridviewcellparsingeventargs#System_Windows_Forms_DataGridViewCellParsingEventArgs_InheritedCellStyle_\" data-linktype=\"relative-path\">InheritedCellStyle</a> property, which is initialized using the cell <a class=\"xref\" href=\"system.windows.forms.datagridviewcell#System_Windows_Forms_DataGridViewCell_InheritedStyle_\" data-linktype=\"relative-path\">InheritedStyle</a> property.  </p>\n<p> When you convert the value yourself, replace the initial, formatted value of the <a class=\"xref\" href=\"system.windows.forms.converteventargs#System_Windows_Forms_ConvertEventArgs_Value_\" data-linktype=\"relative-path\">Value</a> property with the converted value in the type specified by the cell <a class=\"xref\" href=\"system.windows.forms.datagridviewcell#System_Windows_Forms_DataGridViewCell_ValueType_\" data-linktype=\"relative-path\">ValueType</a> property. To indicate that no further parsing is necessary, set the <a class=\"xref\" href=\"system.windows.forms.datagridviewcellparsingeventargs#System_Windows_Forms_DataGridViewCellParsingEventArgs_ParsingApplied_\" data-linktype=\"relative-path\">ParsingApplied</a> property to <code>true</code>.  </p>\n<p> When the event handler completes, if the <a class=\"xref\" href=\"system.windows.forms.converteventargs#System_Windows_Forms_ConvertEventArgs_Value_\" data-linktype=\"relative-path\">Value</a> is <code>null</code> or is not of the correct type, or the <a class=\"xref\" href=\"system.windows.forms.datagridviewcellparsingeventargs#System_Windows_Forms_DataGridViewCellParsingEventArgs_ParsingApplied_\" data-linktype=\"relative-path\">ParsingApplied</a> property is <code>false</code>, the <a class=\"xref\" href=\"system.windows.forms.converteventargs#System_Windows_Forms_ConvertEventArgs_Value_\" data-linktype=\"relative-path\">Value</a> is parsed using the cell <a class=\"xref\" href=\"system.windows.forms.datagridviewcell#System_Windows_Forms_DataGridViewCell_ParseFormattedValue_\" data-linktype=\"relative-path\">ParseFormattedValue</a> method with default type converters. The default implementation of this method parses the value using the <a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle#System_Windows_Forms_DataGridViewCellStyle_NullValue_\" data-linktype=\"relative-path\">NullValue</a>, <a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle#System_Windows_Forms_DataGridViewCellStyle_DataSourceNullValue_\" data-linktype=\"relative-path\">DataSourceNullValue</a>, and <a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle#System_Windows_Forms_DataGridViewCellStyle_FormatProvider_\" data-linktype=\"relative-path\">FormatProvider</a> properties of the cell style passed in. If the value is not equal to <a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle#System_Windows_Forms_DataGridViewCellStyle_NullValue_\" data-linktype=\"relative-path\">NullValue</a>, the value is parsed using the <a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle#System_Windows_Forms_DataGridViewCellStyle_FormatProvider_\" data-linktype=\"relative-path\">FormatProvider</a> property and the type converters passed in.  </p>\n<p> To customize the conversion of a cell value into a formatted value for display, handle the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellFormatting\" data-linktype=\"relative-path\">CellFormatting</a> event.  </p>\n<p> For more information about handling events, see <a href=\"http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67\" data-linktype=\"external\">NIB: Consuming Events</a>.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_DataGridViewCellParsingEventArgs__ctor_System_Int32_System_Int32_System_Object_System_Type_System_Windows_Forms_DataGridViewCellStyle_\" data-linktype=\"self-bookmark\">DataGridViewCellParsingEventArgs(Int32,Int32,Object,Type,DataGridViewCellStyle)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.datagridviewcellparsingeventargs\" data-linktype=\"relative-path\">DataGridViewCellParsingEventArgs</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_DataGridViewCellParsingEventArgs_ColumnIndex\" data-linktype=\"self-bookmark\">ColumnIndex</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the column index of the cell data that requires parsing.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_DataGridViewCellParsingEventArgs_InheritedCellStyle\" data-linktype=\"self-bookmark\">InheritedCellStyle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the style applied to the edited cell.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_DataGridViewCellParsingEventArgs_ParsingApplied\" data-linktype=\"self-bookmark\">ParsingApplied</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether a cell&#39;s value has been successfully parsed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_DataGridViewCellParsingEventArgs_RowIndex\" data-linktype=\"self-bookmark\">RowIndex</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the row index of the cell that requires parsing.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_DataGridViewCellParsingEventArgs__ctor_System_Int32_System_Int32_System_Object_System_Type_System_Windows_Forms_DataGridViewCellStyle_\">\r\n    \r\n            <a id=\"System_Windows_Forms_DataGridViewCellParsingEventArgs__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DataGridViewCellParsingEventArgs(Int32,Int32,Object,Type,DataGridViewCellStyle)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.datagridviewcellparsingeventargs\" data-linktype=\"relative-path\">DataGridViewCellParsingEventArgs</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DataGridViewCellParsingEventArgs (int rowIndex, int columnIndex, object value, Type desiredType, System.Windows.Forms.DataGridViewCellStyle inheritedCellStyle);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rowIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The row index of the cell that was changed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>columnIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The column index of the cell that was changed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>desiredType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the new value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inheritedCellStyle</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle\" data-linktype=\"relative-path\">DataGridViewCellStyle</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The style applied to the cell that was changed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_DataGridViewCellParsingEventArgs_ColumnIndex\">\r\n    \r\n            <a id=\"System_Windows_Forms_DataGridViewCellParsingEventArgs_ColumnIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ColumnIndex</div>        \r\n          </div>\r\n    \r\n            <p>Gets the column index of the cell data that requires parsing.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int ColumnIndex { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The column index of the cell that was changed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the ColumnIndex property to obtain an index into the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_Columns_\" data-linktype=\"relative-path\">Columns</a> property of a <a class=\"xref\" href=\"system.windows.forms.datagridview\" data-linktype=\"relative-path\">DataGridView</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using ColumnIndex to discover if the changed cell is in the date column.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.GridViewUnbound#2\">    &#39; Handling CellParsing allows one to accept user input, then map it to a different\n    &#39; internal representation.\n    Private Sub dataGridView1_CellParsing(ByVal sender As Object, _\n        ByVal e As DataGridViewCellParsingEventArgs) _\n        Handles dataGridView1.CellParsing\n\n        If Me.dataGridView1.Columns(e.ColumnIndex).Name = _\n            &quot;Release Date&quot; Then\n            If e IsNot Nothing Then\n                If e.Value IsNot Nothing Then\n                    Try\n                        &#39; Map what the user typed into UTC.\n                        e.Value = _\n                        DateTime.Parse(e.Value.ToString()).ToUniversalTime()\n                        &#39; Set the ParsingApplied property to \n                        &#39; Show the event is handled.\n                        e.ParsingApplied = True\n\n                    Catch ex As FormatException\n                        &#39; Set to false in case another CellParsing handler\n                        &#39; wants to try to parse this DataGridViewCellParsingEventArgs instance.\n                        e.ParsingApplied = False\n                    End Try\n                End If\n            End If\n        End If\n    End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.GridViewUnbound#2\">   // Handling CellParsing allows one to accept user input, then map it to a different\n   // internal representation.\n   void dataGridView1_CellParsing( Object^ /*sender*/, DataGridViewCellParsingEventArgs^ e )\n   {\n      if ( this-&gt;dataGridView1-&gt;Columns[ e-&gt;ColumnIndex ]-&gt;Name-&gt;Equals( &quot;Release Date&quot; ) )\n      {\n         if ( e != nullptr )\n         {\n            if ( e-&gt;Value != nullptr )\n            {\n               try\n               {\n                  // Map what the user typed into UTC.\n                  e-&gt;Value = DateTime::Parse( e-&gt;Value-&gt;ToString() ).ToUniversalTime();\n\n                  // Set the ParsingApplied property to \n                  // Show the event is handled.\n                  e-&gt;ParsingApplied = true;\n               }\n               catch ( FormatException^ /*ex*/ ) \n               {\n                  // Set to false in case another CellParsing handler\n                  // wants to try to parse this DataGridViewCellParsingEventArgs instance.\n                  e-&gt;ParsingApplied = false;\n               }\n            }\n         }\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.GridViewUnbound#2\">    // Handling CellParsing allows one to accept user input, then map it to a different\n    // internal representation.\n    private void dataGridView1_CellParsing(object sender, DataGridViewCellParsingEventArgs e)\n    {\n        if (this.dataGridView1.Columns[e.ColumnIndex].Name == &quot;Release Date&quot;)\n        {\n            if (e != null)\n            {\n                if (e.Value != null)\n                {\n                    try\n                    {\n                        // Map what the user typed into UTC.\n                        e.Value = DateTime.Parse(e.Value.ToString()).ToUniversalTime();\n                        // Set the ParsingApplied property to \n                        // Show the event is handled.\n                        e.ParsingApplied = true;\n\n                    }\n                    catch (FormatException)\n                    {\n                        // Set to false in case another CellParsing handler\n                        // wants to try to parse this DataGridViewCellParsingEventArgs instance.\n                        e.ParsingApplied = false;\n                    }\n                }\n            }\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_DataGridViewCellParsingEventArgs_InheritedCellStyle\">\r\n    \r\n            <a id=\"System_Windows_Forms_DataGridViewCellParsingEventArgs_InheritedCellStyle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InheritedCellStyle</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the style applied to the edited cell.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.DataGridViewCellStyle InheritedCellStyle { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle\" data-linktype=\"relative-path\">DataGridViewCellStyle</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle\" data-linktype=\"relative-path\">DataGridViewCellStyle</a> that represents the current style of the cell being edited. The default value is the value of the cell <span class=\"xref\">stem.Windows.Forms.DataGridViewCell.InheritedStyle*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use this property to determine the formatting in effect for the cell. Setting this property or changing the properties of the object that this property returns has no effect unless the <a class=\"xref\" href=\"system.windows.forms.datagridviewcellparsingeventargs#System_Windows_Forms_DataGridViewCellParsingEventArgs_ParsingApplied_\" data-linktype=\"relative-path\">ParsingApplied</a> is <code>false</code> when the event handler exits. In this case, the <a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle#System_Windows_Forms_DataGridViewCellStyle_NullValue_\" data-linktype=\"relative-path\">NullValue</a>, <a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle#System_Windows_Forms_DataGridViewCellStyle_DataSourceNullValue_\" data-linktype=\"relative-path\">DataSourceNullValue</a>, and <a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle#System_Windows_Forms_DataGridViewCellStyle_FormatProvider_\" data-linktype=\"relative-path\">FormatProvider</a> properties of the cell style are used to parse the cell value.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellParsing\" data-linktype=\"relative-path\">System.Windows.Forms.DataGridView.CellParsing</a> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of type <a class=\"xref\" href=\"system.windows.forms.datagridview\" data-linktype=\"relative-path\">DataGridView</a> named <code>DataGridView1</code>. Then ensure that the event handler is associated with the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellParsing\" data-linktype=\"relative-path\">System.Windows.Forms.DataGridView.CellParsing</a> event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#303\">private void DataGridView1_CellParsing(Object sender, DataGridViewCellParsingEventArgs e) {\n\nSystem.Text.StringBuilder messageBoxCS = new System.Text.StringBuilder();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;RowIndex&quot;, e.RowIndex );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ColumnIndex&quot;, e.ColumnIndex );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;InheritedCellStyle&quot;, e.InheritedCellStyle );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ParsingApplied&quot;, e.ParsingApplied );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;Value&quot;, e.Value );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;DesiredType&quot;, e.DesiredType );\nmessageBoxCS.AppendLine();\nMessageBox.Show(messageBoxCS.ToString(), &quot;CellParsing Event&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#303\">Private Sub DataGridView1_CellParsing(sender as Object, e as DataGridViewCellParsingEventArgs) _ \n     Handles DataGridView1.CellParsing\n\n    Dim messageBoxVB as New System.Text.StringBuilder()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;RowIndex&quot;, e.RowIndex)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ColumnIndex&quot;, e.ColumnIndex)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;InheritedCellStyle&quot;, e.InheritedCellStyle)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ParsingApplied&quot;, e.ParsingApplied)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;Value&quot;, e.Value)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;DesiredType&quot;, e.DesiredType)\n    messageBoxVB.AppendLine()\n    MessageBox.Show(messageBoxVB.ToString(),&quot;CellParsing Event&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_DataGridViewCellParsingEventArgs_ParsingApplied\">\r\n    \r\n            <a id=\"System_Windows_Forms_DataGridViewCellParsingEventArgs_ParsingApplied_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ParsingApplied</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether a cell&#39;s value has been successfully parsed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool ParsingApplied { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the cell&#39;s value has been successfully parsed; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.windows.forms.datagridviewcellparsingeventhandler\" data-linktype=\"relative-path\">DataGridViewCellParsingEventHandler</a> sets the ParsingApplied property to indicate whether the new cell value was successfully parsed and no further conversion is necessary.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets ParsingApplied to <code>true</code> when the cell&#39;s value is successfully parsed.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.GridViewUnbound#2\">    &#39; Handling CellParsing allows one to accept user input, then map it to a different\n    &#39; internal representation.\n    Private Sub dataGridView1_CellParsing(ByVal sender As Object, _\n        ByVal e As DataGridViewCellParsingEventArgs) _\n        Handles dataGridView1.CellParsing\n\n        If Me.dataGridView1.Columns(e.ColumnIndex).Name = _\n            &quot;Release Date&quot; Then\n            If e IsNot Nothing Then\n                If e.Value IsNot Nothing Then\n                    Try\n                        &#39; Map what the user typed into UTC.\n                        e.Value = _\n                        DateTime.Parse(e.Value.ToString()).ToUniversalTime()\n                        &#39; Set the ParsingApplied property to \n                        &#39; Show the event is handled.\n                        e.ParsingApplied = True\n\n                    Catch ex As FormatException\n                        &#39; Set to false in case another CellParsing handler\n                        &#39; wants to try to parse this DataGridViewCellParsingEventArgs instance.\n                        e.ParsingApplied = False\n                    End Try\n                End If\n            End If\n        End If\n    End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.GridViewUnbound#2\">   // Handling CellParsing allows one to accept user input, then map it to a different\n   // internal representation.\n   void dataGridView1_CellParsing( Object^ /*sender*/, DataGridViewCellParsingEventArgs^ e )\n   {\n      if ( this-&gt;dataGridView1-&gt;Columns[ e-&gt;ColumnIndex ]-&gt;Name-&gt;Equals( &quot;Release Date&quot; ) )\n      {\n         if ( e != nullptr )\n         {\n            if ( e-&gt;Value != nullptr )\n            {\n               try\n               {\n                  // Map what the user typed into UTC.\n                  e-&gt;Value = DateTime::Parse( e-&gt;Value-&gt;ToString() ).ToUniversalTime();\n\n                  // Set the ParsingApplied property to \n                  // Show the event is handled.\n                  e-&gt;ParsingApplied = true;\n               }\n               catch ( FormatException^ /*ex*/ ) \n               {\n                  // Set to false in case another CellParsing handler\n                  // wants to try to parse this DataGridViewCellParsingEventArgs instance.\n                  e-&gt;ParsingApplied = false;\n               }\n            }\n         }\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.GridViewUnbound#2\">    // Handling CellParsing allows one to accept user input, then map it to a different\n    // internal representation.\n    private void dataGridView1_CellParsing(object sender, DataGridViewCellParsingEventArgs e)\n    {\n        if (this.dataGridView1.Columns[e.ColumnIndex].Name == &quot;Release Date&quot;)\n        {\n            if (e != null)\n            {\n                if (e.Value != null)\n                {\n                    try\n                    {\n                        // Map what the user typed into UTC.\n                        e.Value = DateTime.Parse(e.Value.ToString()).ToUniversalTime();\n                        // Set the ParsingApplied property to \n                        // Show the event is handled.\n                        e.ParsingApplied = true;\n\n                    }\n                    catch (FormatException)\n                    {\n                        // Set to false in case another CellParsing handler\n                        // wants to try to parse this DataGridViewCellParsingEventArgs instance.\n                        e.ParsingApplied = false;\n                    }\n                }\n            }\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_DataGridViewCellParsingEventArgs_RowIndex\">\r\n    \r\n            <a id=\"System_Windows_Forms_DataGridViewCellParsingEventArgs_RowIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RowIndex</div>        \r\n          </div>\r\n    \r\n            <p>Gets the row index of the cell that requires parsing.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int RowIndex { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The row index of the cell that was changed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the RowIndex property to obtain an index into the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_Rows_\" data-linktype=\"relative-path\">Rows</a> property of a <a class=\"xref\" href=\"system.windows.forms.datagridview\" data-linktype=\"relative-path\">DataGridView</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellParsing\" data-linktype=\"relative-path\">System.Windows.Forms.DataGridView.CellParsing</a> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of type <a class=\"xref\" href=\"system.windows.forms.datagridview\" data-linktype=\"relative-path\">DataGridView</a> named <code>DataGridView1</code>. Then ensure that the event handler is associated with the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellParsing\" data-linktype=\"relative-path\">System.Windows.Forms.DataGridView.CellParsing</a> event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#303\">private void DataGridView1_CellParsing(Object sender, DataGridViewCellParsingEventArgs e) {\n\nSystem.Text.StringBuilder messageBoxCS = new System.Text.StringBuilder();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;RowIndex&quot;, e.RowIndex );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ColumnIndex&quot;, e.ColumnIndex );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;InheritedCellStyle&quot;, e.InheritedCellStyle );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;ParsingApplied&quot;, e.ParsingApplied );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;Value&quot;, e.Value );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;DesiredType&quot;, e.DesiredType );\nmessageBoxCS.AppendLine();\nMessageBox.Show(messageBoxCS.ToString(), &quot;CellParsing Event&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#303\">Private Sub DataGridView1_CellParsing(sender as Object, e as DataGridViewCellParsingEventArgs) _ \n     Handles DataGridView1.CellParsing\n\n    Dim messageBoxVB as New System.Text.StringBuilder()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;RowIndex&quot;, e.RowIndex)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ColumnIndex&quot;, e.ColumnIndex)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;InheritedCellStyle&quot;, e.InheritedCellStyle)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;ParsingApplied&quot;, e.ParsingApplied)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;Value&quot;, e.Value)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;DesiredType&quot;, e.DesiredType)\n    messageBoxVB.AppendLine()\n    MessageBox.Show(messageBoxVB.ToString(),&quot;CellParsing Event&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Forms.DataGridViewCellParsingEventArgs.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Forms.DataGridViewCellParsingEventArgs.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellParsingEventArgs\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellParsingEventArgs..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellParsingEventArgs.ColumnIndex\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellParsingEventArgs.InheritedCellStyle\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellParsingEventArgs.ParsingApplied\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellParsingEventArgs.RowIndex\">\r\n<meta name=\"APILocation\" content=\"System.Windows.Forms.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"639bacb1-5105-620e-80ed-71f9866011bc\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Windows.Forms\\DataGridViewCellParsingEventArgs.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides data for the  event of a  control.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows.Forms/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.DataGridViewCellParsingEventArgs\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Forms.DataGridViewCellParsingEventArgs.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Forms.DataGridViewCellParsingEventArgs.yml","open_to_public_contributors":true,"api_name":["System.Windows.Forms.DataGridViewCellParsingEventArgs","System.Windows.Forms.DataGridViewCellParsingEventArgs..ctor","System.Windows.Forms.DataGridViewCellParsingEventArgs.ColumnIndex","System.Windows.Forms.DataGridViewCellParsingEventArgs.InheritedCellStyle","System.Windows.Forms.DataGridViewCellParsingEventArgs.ParsingApplied","System.Windows.Forms.DataGridViewCellParsingEventArgs.RowIndex"],"api_location":["System.Windows.Forms.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.DataGridViewCellParsingEventArgs","System::Windows::Forms::DataGridViewCellParsingEventArgs","System.Windows.Forms.DataGridViewCellParsingEventArgs.#ctor","System::Windows::Forms::DataGridViewCellParsingEventArgs::#ctor","System.Windows.Forms.DataGridViewCellParsingEventArgs.ColumnIndex","System::Windows::Forms::DataGridViewCellParsingEventArgs::ColumnIndex","System.Windows.Forms.DataGridViewCellParsingEventArgs.InheritedCellStyle","System::Windows::Forms::DataGridViewCellParsingEventArgs::InheritedCellStyle","System.Windows.Forms.DataGridViewCellParsingEventArgs.ParsingApplied","System::Windows::Forms::DataGridViewCellParsingEventArgs::ParsingApplied","System.Windows.Forms.DataGridViewCellParsingEventArgs.RowIndex","System::Windows::Forms::DataGridViewCellParsingEventArgs::RowIndex"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"639bacb1-5105-620e-80ed-71f9866011bc","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Windows.Forms\\DataGridViewCellParsingEventArgs.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows.Forms/DataGridViewCellParsingEventArgs.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DataGridViewCellParsingEventArgs class | Microsoft Docs","_op_ogTitle":"DataGridViewCellParsingEventArgs class","description":"Provides data for the  event of a  control.\n","toc_asset_id":"_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.DataGridViewCellParsingEventArgs","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.forms.datagridviewcellparsingeventargs","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.forms.datagridviewcellparsingeventargs","fileRelativePath":"System.Windows.Forms.DataGridViewCellParsingEventArgs.html"},"themesRelativePathToOutputRoot":"_themes/"}