{"content":"    \r\n    <h1 id=\"System_Windows_Automation_Text_TextPatternRange\">\r\n      <span class=\"lang-csharp\">TextPatternRange</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a span of continuous text in a <a class=\"xref\" href=\"system.windows.automation.textpattern\" data-linktype=\"relative-path\">TextPattern</a> container.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class TextPatternRange</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">TextPatternRange</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>A TextPatternRange can represent an insertion point, a subset, or all of the text in a <a class=\"xref\" href=\"system.windows.automation.textpattern\" data-linktype=\"relative-path\">TextPattern</a> container.  </p>\n<p> A TextPatternRange will become invalid if one of the following occurs: the text in the <a class=\"xref\" href=\"system.windows.automation.textpattern\" data-linktype=\"relative-path\">TextPattern</a> container changes because of some user activity, or the <a class=\"xref\" href=\"system.windows.automation.valuepattern#System_Windows_Automation_ValuePattern_SetValue_\" data-linktype=\"relative-path\">SetValue</a> method of <a class=\"xref\" href=\"system.windows.automation.valuepattern\" data-linktype=\"relative-path\">ValuePattern</a> is used to programmatically change the value of the text in the <a class=\"xref\" href=\"system.windows.automation.textpattern\" data-linktype=\"relative-path\">TextPattern</a> container.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_Text_TextPatternRange_TextPattern\" data-linktype=\"self-bookmark\">TextPattern</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.windows.automation.textpattern\" data-linktype=\"relative-path\">TextPattern</a> associated with the text range.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_Text_TextPatternRange_AddToSelection\" data-linktype=\"self-bookmark\">AddToSelection()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds to the collection of highlighted text in a text container that supports multiple, disjoint selections.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_Text_TextPatternRange_Clone\" data-linktype=\"self-bookmark\">Clone()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves a new <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange\" data-linktype=\"relative-path\">TextPatternRange</a> identical to the original <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange\" data-linktype=\"relative-path\">TextPatternRange</a> and inheriting all properties of the original.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_Text_TextPatternRange_Compare_System_Windows_Automation_Text_TextPatternRange_\" data-linktype=\"self-bookmark\">Compare(TextPatternRange)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value indicating whether the span (the <a class=\"xref\" href=\"system.windows.automation.text.textpatternrangeendpoint\" data-linktype=\"relative-path\">TextPatternRangeEndpoint</a> endpoint to the <a class=\"xref\" href=\"system.windows.automation.text.textpatternrangeendpoint\" data-linktype=\"relative-path\">TextPatternRangeEndpoint</a> endpoint) of a text range is the same as another text range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_Text_TextPatternRange_CompareEndpoints_System_Windows_Automation_Text_TextPatternRangeEndpoint_System_Windows_Automation_Text_TextPatternRange_System_Windows_Automation_Text_TextPatternRangeEndpoint_\" data-linktype=\"self-bookmark\">CompareEndpoints(TextPatternRangeEndpoint,TextPatternRange,TextPatternRangeEndpoint)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> indicating whether two text ranges have identical endpoints.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_Text_TextPatternRange_ExpandToEnclosingUnit_System_Windows_Automation_Text_TextUnit_\" data-linktype=\"self-bookmark\">ExpandToEnclosingUnit(TextUnit)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Expands the text range to the specified <a class=\"xref\" href=\"system.windows.automation.text.textunit\" data-linktype=\"relative-path\">TextUnit</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_Text_TextPatternRange_FindAttribute_System_Windows_Automation_AutomationTextAttribute_System_Object_System_Boolean_\" data-linktype=\"self-bookmark\">FindAttribute(AutomationTextAttribute,Object,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a text range subset that has the specified attribute value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_Text_TextPatternRange_FindText_System_String_System_Boolean_System_Boolean_\" data-linktype=\"self-bookmark\">FindText(String,Boolean,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a text range subset that contains the specified text.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_Text_TextPatternRange_GetAttributeValue_System_Windows_Automation_AutomationTextAttribute_\" data-linktype=\"self-bookmark\">GetAttributeValue(AutomationTextAttribute)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the value of the specified attribute across the entire text range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_Text_TextPatternRange_GetBoundingRectangles\" data-linktype=\"self-bookmark\">GetBoundingRectangles()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves a collection of bounding rectangles for each fully or partially visible line of text in a text range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_Text_TextPatternRange_GetChildren\" data-linktype=\"self-bookmark\">GetChildren()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves a collection of all embedded objects that fall within the text range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_Text_TextPatternRange_GetEnclosingElement\" data-linktype=\"self-bookmark\">GetEnclosingElement()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the innermost <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a> that encloses the text range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_Text_TextPatternRange_GetText_System_Int32_\" data-linktype=\"self-bookmark\">GetText(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the plain text of the text range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_Text_TextPatternRange_Move_System_Windows_Automation_Text_TextUnit_System_Int32_\" data-linktype=\"self-bookmark\">Move(TextUnit,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Moves the text range the specified number of text units.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_Text_TextPatternRange_MoveEndpointByRange_System_Windows_Automation_Text_TextPatternRangeEndpoint_System_Windows_Automation_Text_TextPatternRange_System_Windows_Automation_Text_TextPatternRangeEndpoint_\" data-linktype=\"self-bookmark\">MoveEndpointByRange(TextPatternRangeEndpoint,TextPatternRange,TextPatternRangeEndpoint)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Moves one endpoint of a text range to the specified endpoint of a second text range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_Text_TextPatternRange_MoveEndpointByUnit_System_Windows_Automation_Text_TextPatternRangeEndpoint_System_Windows_Automation_Text_TextUnit_System_Int32_\" data-linktype=\"self-bookmark\">MoveEndpointByUnit(TextPatternRangeEndpoint,TextUnit,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Moves one endpoint of the text range the specified number of <a class=\"xref\" href=\"system.windows.automation.text.textunit\" data-linktype=\"relative-path\">TextUnit</a>s within the document range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_Text_TextPatternRange_RemoveFromSelection\" data-linktype=\"self-bookmark\">RemoveFromSelection()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes a highlighted section of text, corresponding to the calling text range <a class=\"xref\" href=\"system.windows.automation.text.textpatternrangeendpoint\" data-linktype=\"relative-path\">TextPatternRangeEndpoint</a> and <a class=\"xref\" href=\"system.windows.automation.text.textpatternrangeendpoint\" data-linktype=\"relative-path\">TextPatternRangeEndpoint</a> endpoints, from an existing collection of highlighted text in a text container that supports multiple, disjoint selections.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_Text_TextPatternRange_ScrollIntoView_System_Boolean_\" data-linktype=\"self-bookmark\">ScrollIntoView(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Causes the text control to scroll vertically until the text range is visible in the viewport.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_Text_TextPatternRange_Select\" data-linktype=\"self-bookmark\">Select()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Highlights text in the text control corresponding to the text range <a class=\"xref\" href=\"system.windows.automation.text.textpatternrangeendpoint\" data-linktype=\"relative-path\">TextPatternRangeEndpoint</a> and <a class=\"xref\" href=\"system.windows.automation.text.textpatternrangeendpoint\" data-linktype=\"relative-path\">TextPatternRangeEndpoint</a> endpoints.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_Text_TextPatternRange_TextPattern\">\r\n    \r\n            <a id=\"System_Windows_Automation_Text_TextPatternRange_TextPattern_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TextPattern</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.windows.automation.textpattern\" data-linktype=\"relative-path\">TextPattern</a> associated with the text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Automation.TextPattern TextPattern { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.automation.textpattern\" data-linktype=\"relative-path\">TextPattern</a></div>\r\n                  </div>\r\n                  <p>The text provider.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1076\">private TextPattern TextPatternFromSelection(AutomationElement target)\n{\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return null;\n    }\n\n    TextPatternRange[] currentSelection = textpatternPattern.GetSelection();\n\n    return currentSelection[0].TextPattern;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2076\">Private Function TextPatternFromSelection(ByVal target As AutomationElement) As TextPattern\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return Nothing\n    End If\n    Dim currentSelection As TextPatternRange() = textpatternPattern.GetSelection()\n    Return currentSelection(0).TextPattern\nEnd Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_Text_TextPatternRange_AddToSelection\">\r\n    \r\n            <a id=\"System_Windows_Automation_Text_TextPatternRange_AddToSelection_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddToSelection()</div>        \r\n          </div>\r\n    \r\n            <p>Adds to the collection of highlighted text in a text container that supports multiple, disjoint selections.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AddToSelection ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>If text provider does not support multiple, disjoint selections (for example, <span class=\"xref\">stem.Windows.Automation.TextPattern.SupportedTextSelection*</span> must have a value of <code>Multiple</code>).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The text insertion point moves to the area of the new selection.  </p>\n<p> Providing a degenerate text range moves the insertion point.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_Text_TextPatternRange_Clone\">\r\n    \r\n            <a id=\"System_Windows_Automation_Text_TextPatternRange_Clone_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clone()</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves a new <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange\" data-linktype=\"relative-path\">TextPatternRange</a> identical to the original <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange\" data-linktype=\"relative-path\">TextPatternRange</a> and inheriting all properties of the original.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Automation.Text.TextPatternRange Clone ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.automation.text.textpatternrange\" data-linktype=\"relative-path\">TextPatternRange</a></div>\r\n                  </div>\r\n                  <p>The new text range. A null reference (<code>Nothing</code> in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/tlasharptla-visualbnet-md.md&quot; -->Microsoft Visual Basic .NET<!--END INCLUDE -->) is never returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Alternatively, create a new <a class=\"xref\" href=\"system.windows.automation.textpattern#System_Windows_Automation_TextPattern_DocumentRange_\" data-linktype=\"relative-path\">DocumentRange</a> from the <a class=\"xref\" href=\"system.windows.automation.textpattern\" data-linktype=\"relative-path\">TextPattern</a> and move the two endpoints to correspond with the endpoints of the original text range.  </p>\n<p> The new range can be manipulated independently from the original.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1060\">private TextPatternRange CloneSelection(AutomationElement target)\n{\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return null;\n    }\n    TextPatternRange[] currentSelection = textpatternPattern.GetSelection();\n    return currentSelection[0].Clone();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2060\">Private Function CloneSelection(ByVal target As AutomationElement) As TextPatternRange\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return Nothing\n    End If\n    Dim currentSelection As TextPatternRange() = textpatternPattern.GetSelection()\n    Return currentSelection.Clone(0)\nEnd Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_Text_TextPatternRange_Compare_System_Windows_Automation_Text_TextPatternRange_\">\r\n    \r\n            <a id=\"System_Windows_Automation_Text_TextPatternRange_Compare_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Compare(TextPatternRange)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value indicating whether the span (the <a class=\"xref\" href=\"system.windows.automation.text.textpatternrangeendpoint\" data-linktype=\"relative-path\">TextPatternRangeEndpoint</a> endpoint to the <a class=\"xref\" href=\"system.windows.automation.text.textpatternrangeendpoint\" data-linktype=\"relative-path\">TextPatternRangeEndpoint</a> endpoint) of a text range is the same as another text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Compare (System.Windows.Automation.Text.TextPatternRange range);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>range</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.automation.text.textpatternrange\" data-linktype=\"relative-path\">TextPatternRange</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A text range to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the span of both text ranges is identical; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>If the range being compared does not come from the same text provider.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1061\">private Boolean CompareRanges(AutomationElement target)\n{\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return false;\n    }\n    TextPatternRange[] currentSelection = textpatternPattern.GetSelection();\n    TextPatternRange[] currentVisibleRanges = textpatternPattern.GetVisibleRanges();\n    return currentSelection[0].Compare(currentVisibleRanges[0]);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2061\">Private Function CompareRanges(ByVal target As AutomationElement) As Boolean\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return Nothing\n    End If\n    Dim currentSelection As TextPatternRange() = textpatternPattern.GetSelection()\n    Dim currentVisibleRange As TextPatternRange() = textpatternPattern.GetVisibleRanges()\n    Return currentSelection(0).Compare(currentVisibleRange(0))\nEnd Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_Text_TextPatternRange_CompareEndpoints_System_Windows_Automation_Text_TextPatternRangeEndpoint_System_Windows_Automation_Text_TextPatternRange_System_Windows_Automation_Text_TextPatternRangeEndpoint_\">\r\n    \r\n            <a id=\"System_Windows_Automation_Text_TextPatternRange_CompareEndpoints_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CompareEndpoints(TextPatternRangeEndpoint,TextPatternRange,TextPatternRangeEndpoint)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> indicating whether two text ranges have identical endpoints.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int CompareEndpoints (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Text.TextPatternRange targetRange, System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>endpoint</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.automation.text.textpatternrangeendpoint\" data-linktype=\"relative-path\">TextPatternRangeEndpoint</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.automation.text.textpatternrangeendpoint\" data-linktype=\"relative-path\">TextPatternRangeEndpoint</a> or <a class=\"xref\" href=\"system.windows.automation.text.textpatternrangeendpoint\" data-linktype=\"relative-path\">TextPatternRangeEndpoint</a> endpoint of the caller.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>targetRange</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.automation.text.textpatternrange\" data-linktype=\"relative-path\">TextPatternRange</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The target range for comparison.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>targetEndpoint</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.automation.text.textpatternrangeendpoint\" data-linktype=\"relative-path\">TextPatternRangeEndpoint</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.automation.text.textpatternrangeendpoint\" data-linktype=\"relative-path\">TextPatternRangeEndpoint</a> or <a class=\"xref\" href=\"system.windows.automation.text.textpatternrangeendpoint\" data-linktype=\"relative-path\">TextPatternRangeEndpoint</a> endpoint of the target.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>Returns a negative value if the caller&#39;s endpoint occurs earlier in the text than the target endpoint.  </p>\n<p> Returns zero if the caller&#39;s endpoint is at the same location as the target endpoint.  </p>\n<p> Returns a positive value if the caller&#39;s endpoint occurs later in the text than the target endpoint.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>If range is a null reference (<code>Nothing</code> in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/tlasharptla-visualbnet-md.md&quot; -->Microsoft Visual Basic .NET<!--END INCLUDE -->).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>If range is from another container.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By comparing the starting and ending endpoints of the same text range you can identify if a text range is degenerate or if the endpoints are in the order of logical text flow.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1062\">private Int32 CompareRangeEndpoints(AutomationElement target)\n{\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return 0;\n    }\n    TextPatternRange[] currentSelections = textpatternPattern.GetSelection();\n    TextPatternRange[] currentVisibleRanges = textpatternPattern.GetVisibleRanges();\n    return currentSelections[0].CompareEndpoints(\n        TextPatternRangeEndpoint.Start, \n        currentVisibleRanges[0], \n        TextPatternRangeEndpoint.Start);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2062\">Private Function CompareRangeEndpoints(ByVal target As AutomationElement) As Integer\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return Nothing\n    End If\n    Dim currentSelection As TextPatternRange() = textpatternPattern.GetSelection()\n    Dim currentVisibleRanges As TextPatternRange() = textpatternPattern.GetVisibleRanges()\n    Return currentSelection(0).CompareEndpoints(TextPatternRangeEndpoint.Start, _\n                                         currentVisibleRanges(0), _\n                                         TextPatternRangeEndpoint.Start)\nEnd Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_Text_TextPatternRange_ExpandToEnclosingUnit_System_Windows_Automation_Text_TextUnit_\">\r\n    \r\n            <a id=\"System_Windows_Automation_Text_TextPatternRange_ExpandToEnclosingUnit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExpandToEnclosingUnit(TextUnit)</div>        \r\n          </div>\r\n    \r\n            <p>Expands the text range to the specified <a class=\"xref\" href=\"system.windows.automation.text.textunit\" data-linktype=\"relative-path\">TextUnit</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ExpandToEnclosingUnit (System.Windows.Automation.Text.TextUnit unit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>unit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.automation.text.textunit\" data-linktype=\"relative-path\">TextUnit</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The textual unit.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the range is already an exact quantity of the specified units then it remains unchanged.  </p>\n<p> In order for the ExpandToEnclosingUnit method to execute successfully, a sequence of actions is performed behind the scenes.  </p>\n<ol>\n<li><p>The text range is normalized; that is, the text range is collapsed to a degenerate range at the <a class=\"xref\" href=\"system.windows.automation.text.textpatternrangeendpoint\" data-linktype=\"relative-path\">TextPatternRangeEndpoint</a> endpoint, making the <a class=\"xref\" href=\"system.windows.automation.text.textpatternrangeendpoint\" data-linktype=\"relative-path\">TextPatternRangeEndpoint</a> endpoint superfluous. This step is necessary to remove ambiguity in situations where a text range spans <code>unit</code> boundaries; for example, &quot;{The U}RL <a href=\"http://www.microsoft.com\" data-linktype=\"external\">http://www.microsoft.com</a> is embedded in text&quot; where &quot;{&quot; and &quot;}&quot; are the text range endpoints.  </p>\n</li>\n<li><p>The resulting range is moved backward in the <a class=\"xref\" href=\"system.windows.automation.textpattern#System_Windows_Automation_TextPattern_DocumentRange_\" data-linktype=\"relative-path\">DocumentRange</a> to the beginning of the requested <code>unit</code> boundary.  </p>\n</li>\n<li><p>The range is moved forward or backward in the <a class=\"xref\" href=\"system.windows.automation.textpattern#System_Windows_Automation_TextPattern_DocumentRange_\" data-linktype=\"relative-path\">DocumentRange</a> by the requested number of <code>unit</code> boundaries.  </p>\n</li>\n<li><p>The range is then expanded from a degenerate range state by moving the <a class=\"xref\" href=\"system.windows.automation.text.textpatternrangeendpoint\" data-linktype=\"relative-path\">TextPatternRangeEndpoint</a> endpoint by one requested <code>unit</code> boundary.  </p>\n<p><img src=\"add/media/uia-textpattern-moveandexpand-examples.png\" alt=\"Range adjustments by Move &amp; ExpandToEnclosingUnit\" title=\"Range adjustments by Move &amp; ExpandToEnclosingUnit\" data-linktype=\"relative-path\"><br>Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()  </p>\n</li>\n</ol>\n<div class=\"NOTE\"><h5>Note</h5><p> These steps are necessary since it is common for a screen reader to read out a full word, sentence, or entire paragraph at the insertion point or any virtual cursor position.  </p>\n</div>\n<p> ExpandToEnclosingUnit respects both hidden and visible text. The UI Automation client can check the <a class=\"xref\" href=\"system.windows.automation.textpattern#System_Windows_Automation_TextPattern_IsHiddenAttribute\" data-linktype=\"relative-path\">IsHiddenAttribute</a> for text visibility.  </p>\n<p> ExpandToEnclosingUnit defers to the next largest <a class=\"xref\" href=\"system.windows.automation.text.textunit\" data-linktype=\"relative-path\">TextUnit</a> supported if the given <a class=\"xref\" href=\"system.windows.automation.text.textunit\" data-linktype=\"relative-path\">TextUnit</a> is not supported by the control.  </p>\n<p> The order, from smallest unit to largest, is listed below.  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.windows.automation.text.textunit\" data-linktype=\"relative-path\">TextUnit</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.automation.text.textunit\" data-linktype=\"relative-path\">TextUnit</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.automation.text.textunit\" data-linktype=\"relative-path\">TextUnit</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.automation.text.textunit\" data-linktype=\"relative-path\">TextUnit</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.automation.text.textunit\" data-linktype=\"relative-path\">TextUnit</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.automation.text.textunit\" data-linktype=\"relative-path\">TextUnit</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.automation.text.textunit\" data-linktype=\"relative-path\">TextUnit</a></li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1063\"> private void ExpandSelection(AutomationElement target)\n{\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return;\n    }\n    TextPatternRange[] currentSelection = textpatternPattern.GetSelection();\n    // Expand selection to include entire document\n    currentSelection[0].ExpandToEnclosingUnit(TextUnit.Document);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2063\">Private Sub ExpandSelection(ByVal target As AutomationElement)\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return\n    End If\n    Dim currentSelection As TextPatternRange() = textpatternPattern.GetSelection()\n    currentSelection(0).ExpandToEnclosingUnit(TextUnit.Document)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_Text_TextPatternRange_FindAttribute_System_Windows_Automation_AutomationTextAttribute_System_Object_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Automation_Text_TextPatternRange_FindAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FindAttribute(AutomationTextAttribute,Object,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a text range subset that has the specified attribute value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Automation.Text.TextPatternRange FindAttribute (System.Windows.Automation.AutomationTextAttribute attribute, object value, bool backward);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>attribute</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.automation.automationtextattribute\" data-linktype=\"relative-path\">AutomationTextAttribute</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attribute to search for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The attribute value to search for. This value must match the type specified for the attribute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>backward</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> if the last occurring text range should be returned instead of the first; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.automation.text.textpatternrange\" data-linktype=\"relative-path\">TextPatternRange</a></div>\r\n                  </div>\r\n                  <p>A text range having a matching attribute and attribute value; otherwise null (<code>Nothing</code> in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/tlasharptla-visualbnet-md.md&quot; -->Microsoft Visual Basic .NET<!--END INCLUDE -->).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>There is no differentiation between hidden and visible text. UI Automation clients can use <a class=\"xref\" href=\"system.windows.automation.textpattern#System_Windows_Automation_TextPattern_IsHiddenAttribute\" data-linktype=\"relative-path\">IsHiddenAttribute</a> to check text visibility.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Use <a class=\"xref\" href=\"system.windows.automation.textpattern#System_Windows_Automation_TextPattern_DocumentRange_\" data-linktype=\"relative-path\">DocumentRange</a> to search the entire document.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1064\"> private TextPatternRange RangeFromAttribute(AutomationElement target)\n{\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return null;\n    }\n    TextPatternRange[] currentSelelction = textpatternPattern.GetSelection();\n    // Find &#39;italic&#39; range\n    return currentSelelction[0].FindAttribute(TextPattern.IsItalicAttribute, true, false);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2064\">Private Function RangeFromAttribute(ByVal target As AutomationElement) As TextPatternRange\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return Nothing\n    End If\n    Dim currentSelection As TextPatternRange() = textpatternPattern.GetSelection()\n    Return currentSelection(0).FindAttribute(TextPattern.IsItalicAttribute, True, False)\nEnd Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_Text_TextPatternRange_FindText_System_String_System_Boolean_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Automation_Text_TextPatternRange_FindText_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FindText(String,Boolean,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a text range subset that contains the specified text.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Automation.Text.TextPatternRange FindText (string text, bool backward, bool ignoreCase);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>text</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The text string to search for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>backward</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> if the last occurring text range should be returned instead of the first; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ignoreCase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> if case should be ignored; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.automation.text.textpatternrange\" data-linktype=\"relative-path\">TextPatternRange</a></div>\r\n                  </div>\r\n                  <p>A text range matching the specified text; otherwise null (<code>Nothing</code> in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/tlasharptla-visualbnet-md.md&quot; -->Microsoft Visual Basic .NET<!--END INCLUDE -->).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>There is no differentiation between hidden and visible text. UI Automation clients can use <a class=\"xref\" href=\"system.windows.automation.textpattern#System_Windows_Automation_TextPattern_IsHiddenAttribute\" data-linktype=\"relative-path\">IsHiddenAttribute</a> to check text visibility.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Use <a class=\"xref\" href=\"system.windows.automation.textpattern#System_Windows_Automation_TextPattern_DocumentRange_\" data-linktype=\"relative-path\">DocumentRange</a> to search the entire document.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1065\"> private TextPatternRange TextFromSelection(AutomationElement target)\n{\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return null;\n    }\n    TextPatternRange[] tprSelection = textpatternPattern.GetSelection();\n    // Find &#39;text&#39; in selection range\n    return tprSelection[0].FindText(&quot;text&quot;, false, true);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2065\">Private Function TextFromSelection(ByVal target As AutomationElement) As TextPatternRange\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return Nothing\n    End If\n    Dim currentSelection As TextPatternRange() = textpatternPattern.GetSelection()\n    &#39; Find &#39;text&#39; in selection range\n    Return currentSelection(0).FindText(&quot;text&quot;, False, True)\nEnd Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_Text_TextPatternRange_GetAttributeValue_System_Windows_Automation_AutomationTextAttribute_\">\r\n    \r\n            <a id=\"System_Windows_Automation_Text_TextPatternRange_GetAttributeValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAttributeValue(AutomationTextAttribute)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the value of the specified attribute across the entire text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object GetAttributeValue (System.Windows.Automation.AutomationTextAttribute attribute);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>attribute</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.automation.automationtextattribute\" data-linktype=\"relative-path\">AutomationTextAttribute</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The text attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>Returns the value of the specified attribute. For example, GetAttributeValue(TextPattern.FontNameAttribute) would return a string that represents the font name, if unique, of the text range while GetAttributeValue(TextPattern.IsItalicAttribute) would return a boolean.  </p>\n<p> Returns <a class=\"xref\" href=\"system.windows.automation.textpattern#System_Windows_Automation_TextPattern_MixedAttributeValue\" data-linktype=\"relative-path\">MixedAttributeValue</a> if the value of the specified attribute varies over the text range.  </p>\n<p> Returns <a class=\"xref\" href=\"system.windows.automation.automationelement#System_Windows_Automation_AutomationElement_NotSupported\" data-linktype=\"relative-path\">NotSupported</a> if the specified attribute is not supported by the provider or the control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>If the specified attribute is not valid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>There is no differentiation between hidden and visible text. UI Automation clients can use <a class=\"xref\" href=\"system.windows.automation.textpattern#System_Windows_Automation_TextPattern_IsHiddenAttribute\" data-linktype=\"relative-path\">IsHiddenAttribute</a> to check text visibility.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1066\"> private Object AttributeValueFromSelection(AutomationElement target)\n{\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return null;\n    }\n    TextPatternRange[] currentSelection = textpatternPattern.GetSelection();\n    // Is &#39;italic&#39;?\n    return currentSelection[0].GetAttributeValue(TextPattern.IsItalicAttribute);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2066\">Private Function AttributeValueFromSelection(ByVal target As AutomationElement) As Object\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return Nothing\n    End If\n    Dim currentSelection As TextPatternRange() = textpatternPattern.GetSelection()\n    &#39; Is &#39;italic&#39;?\n    Return currentSelection(0).GetAttributeValue(TextPattern.IsItalicAttribute)\nEnd Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_Text_TextPatternRange_GetBoundingRectangles\">\r\n    \r\n            <a id=\"System_Windows_Automation_Text_TextPatternRange_GetBoundingRectangles_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetBoundingRectangles()</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves a collection of bounding rectangles for each fully or partially visible line of text in a text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Rect[] GetBoundingRectangles ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a>[]</div>\r\n                  </div>\r\n                  <p>An array of bounding rectangles for each full or partial line of text in a text range.  </p>\n<p> An empty array for a degenerate text range.  </p>\n<p> An empty array for a text range that has screen coordinates placing it completely off-screen, scrolled out of view, or obscured by an overlapping window.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1067\"> private Rect[] BoundingRectanglesFromSelection(AutomationElement target)\n{\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return null;\n    }\n    TextPatternRange[] currentSelection = textpatternPattern.GetSelection();\n\n    return currentSelection[0].GetBoundingRectangles();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2067\">Private Function BoundingRectanglesFromSelection(ByVal target As AutomationElement) As Rect()\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return Nothing\n    End If\n    Dim currentSelection As TextPatternRange() = textpatternPattern.GetSelection()\n    Return currentSelection(0).GetBoundingRectangles()\nEnd Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_Text_TextPatternRange_GetChildren\">\r\n    \r\n            <a id=\"System_Windows_Automation_Text_TextPatternRange_GetChildren_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetChildren()</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves a collection of all embedded objects that fall within the text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Automation.AutomationElement[] GetChildren ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a>[]</div>\r\n                  </div>\r\n                  <p>A collection of all child objects that fall within the range. Children that overlap with the range but are not entirely enclosed by it will also be included in the collection.  </p>\n<p> Returns an empty collection if there are no child objects.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#StartTarget\">&#39;&#39;&#39; -------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Starts the target application and returns the AutomationElement \n&#39;&#39;&#39; obtained from the targets window handle.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;exe&quot;&gt;\n&#39;&#39;&#39; The target application.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;param name=&quot;filename&quot;&gt;\n&#39;&#39;&#39; The text file to be opened in the target application\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;returns&gt;\n&#39;&#39;&#39; An AutomationElement representing the target application.\n&#39;&#39;&#39; &lt;/returns&gt;\n&#39;&#39;&#39; -------------------------------------------------------------------\nPrivate Function StartTarget( _\nByVal exe As String, ByVal filename As String) As AutomationElement\n    &#39; Start text editor and load with a text file.\n    Dim p As Process = Process.Start(exe, filename)\n\n    &#39; targetApp --&gt; the root AutomationElement.\n    Dim targetApp As AutomationElement\n    targetApp = AutomationElement.FromHandle(p.MainWindowHandle)\n\n    Return targetApp\nEnd Function\n</code></pre><pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#StartTarget\">/// -------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Starts the target application and returns the AutomationElement \n/// obtained from the targets window handle.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;exe&quot;&gt;\n/// The target application.\n/// &lt;/param&gt;\n/// &lt;param name=&quot;filename&quot;&gt;\n/// The text file to be opened in the target application\n/// &lt;/param&gt;\n/// &lt;returns&gt;\n/// An AutomationElement representing the target application.\n/// &lt;/returns&gt;\n/// -------------------------------------------------------------------\nprivate AutomationElement StartTarget(string exe, string filename)\n{\n    // Start text editor and load with a text file.\n    Process p = Process.Start(exe, filename);\n\n    // targetApp --&gt; the root AutomationElement.\n    AutomationElement targetApp =\n        AutomationElement.FromHandle(p.MainWindowHandle);\n\n    return targetApp;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#GetTextElement\">&#39;&#39;&#39; -------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Obtain the text control of interest from the target application.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetApp&quot;&gt;\n&#39;&#39;&#39; The target application.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;returns&gt;\n&#39;&#39;&#39; An AutomationElement. representing a text control.\n&#39;&#39;&#39; &lt;/returns&gt;\n&#39;&#39;&#39; -------------------------------------------------------------------\nPrivate Function GetTextElement(ByVal targetApp As AutomationElement) As AutomationElement\n    &#39; The control type we&#39;re looking for; in this case &#39;Document&#39;\n    Dim cond1 As PropertyCondition = _\n        New PropertyCondition( _\n        AutomationElement.ControlTypeProperty, _\n        ControlType.Document)\n\n    &#39; The control pattern of interest; in this case &#39;TextPattern&#39;.\n    Dim cond2 As PropertyCondition = _\n        New PropertyCondition( _\n        AutomationElement.IsTextPatternAvailableProperty, _\n        True)\n\n    Dim textCondition As AndCondition = New AndCondition(cond1, cond2)\n\n    Dim targetTextElement As AutomationElement = _\n        targetApp.FindFirst(TreeScope.Descendants, textCondition)\n\n    &#39; If targetText is null then a suitable text control was not found.\n    Return targetTextElement\nEnd Function\n</code></pre><pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#GetTextElement\">/// -------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Obtain the text control of interest from the target application.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetApp&quot;&gt;\n/// The target application.\n/// &lt;/param&gt;\n/// &lt;returns&gt;\n/// An AutomationElement that represents a text provider..\n/// &lt;/returns&gt;\n/// -------------------------------------------------------------------\nprivate AutomationElement GetTextElement(AutomationElement targetApp)\n{\n    // The control type we&#39;re looking for; in this case &#39;Document&#39;\n    PropertyCondition cond1 =\n        new PropertyCondition(\n        AutomationElement.ControlTypeProperty,\n        ControlType.Document);\n\n    // The control pattern of interest; in this case &#39;TextPattern&#39;.\n    PropertyCondition cond2 = \n        new PropertyCondition(\n        AutomationElement.IsTextPatternAvailableProperty, \n        true);\n\n    AndCondition textCondition = new AndCondition(cond1, cond2);\n\n    AutomationElement targetTextElement =\n        targetApp.FindFirst(TreeScope.Descendants, textCondition);\n\n    // If targetText is null then a suitable text control was not found.\n    return targetTextElement;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#GetEmbeddedObjects\">&#39;&#39;&#39; -------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Retrieves the embedded children of a document control.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetTextElement&quot;&gt;\n&#39;&#39;&#39; The AutomationElement. representing a text control.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; -------------------------------------------------------------------\nPrivate Sub GetEmbeddedObjects( _\nByVal targetTextElement As AutomationElement)\n    Dim textPattern As TextPattern = _\n    DirectCast(targetTextElement.GetCurrentPattern(textPattern.Pattern), TextPattern)\n\n    If (textPattern Is Nothing) Then\n        &#39; Target control doesn&#39;t support TextPattern.\n        Return\n    End If\n\n    &#39; Obtain a text range spanning the entire document.\n    Dim textRange As TextPatternRange = textPattern.DocumentRange\n\n    &#39; Retrieve the embedded objects within the range.\n    Dim embeddedObjects() As AutomationElement = textRange.GetChildren()\n\n    Dim embeddedObject As AutomationElement\n    For Each embeddedObject In embeddedObjects\n        Console.WriteLine(embeddedObject.Current.Name)\n    Next\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#GetEmbeddedObjects\">/// -------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Retrieves the embedded children of a document control.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetTextElement&quot;&gt;\n/// The AutomationElment that represents a text control.\n/// &lt;/param&gt;\n/// -------------------------------------------------------------------\nprivate void GetEmbeddedObjects(AutomationElement targetTextElement)\n{\n    TextPattern textPattern = \n        targetTextElement.GetCurrentPattern(TextPattern.Pattern) \n        as TextPattern;\n\n    if (textPattern == null)\n    {\n        // Target control doesn&#39;t support TextPattern.\n        return;\n    }\n\n    // Obtain a text range spanning the entire document.\n    TextPatternRange textRange = textPattern.DocumentRange;\n\n    // Retrieve the embedded objects within the range.\n    AutomationElement[] embeddedObjects = textRange.GetChildren();\n\n    foreach (AutomationElement embeddedObject in embeddedObjects)\n    {\n        Console.WriteLine(embeddedObject.Current.Name);\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_Text_TextPatternRange_GetEnclosingElement\">\r\n    \r\n            <a id=\"System_Windows_Automation_Text_TextPatternRange_GetEnclosingElement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEnclosingElement()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the innermost <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a> that encloses the text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Automation.AutomationElement GetEnclosingElement ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a></div>\r\n                  </div>\r\n                  <p>The innermost element enclosing the caller.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The enclosing <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a>, typically the text provider that supplies the text range. However, if the text provider supports child elements such as tables or hyperlinks, then the enclosing element could be a descendant of the text provider.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1069\"> private AutomationElement EnclosingElementFromSelection(AutomationElement target)\n{\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return null;\n    }\n    TextPatternRange[] currentSelection = textpatternPattern.GetSelection();\n\n    return currentSelection[0].GetEnclosingElement();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2069\">Private Function EnclosingElementFromSelection(ByVal target As AutomationElement) As AutomationElement\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return Nothing\n    End If\n    Dim currentSelection As TextPatternRange() = textpatternPattern.GetSelection()\n    Return currentSelection(0).GetEnclosingElement()\nEnd Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_Text_TextPatternRange_GetText_System_Int32_\">\r\n    \r\n            <a id=\"System_Windows_Automation_Text_TextPatternRange_GetText_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetText(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the plain text of the text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string GetText (int maxLength);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>maxLength</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum length of the string to return. Use <code>-1</code> if no limit is required.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The plain text of the text range, possibly truncated at the specified <code>maxLength</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>If <code>maxLength</code> is less than -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>GetText respects both hidden and visible text. The UI Automation client can check the <a class=\"xref\" href=\"system.windows.automation.textpattern#System_Windows_Automation_TextPattern_IsHiddenAttribute\" data-linktype=\"relative-path\">IsHiddenAttribute</a> for text visibility.  </p>\n<p> If <code>maxLength</code> is greater than the length of the text span of the caller, the string returned will be the plain text of the text range.  </p>\n<p> GetText will not be affected by the order of endpoints in the text flow; it will always return the text between the Start and End endpoints of the text range in the logical text flow order.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1070\"> private String TextFromSelection(AutomationElement target, Int32 length)\n{\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return null;\n    }\n    TextPatternRange[] currentSelection = textpatternPattern.GetSelection();\n\n    // GetText(-1) retrieves all characters but can be inefficient\n    return currentSelection[0].GetText(length);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2070\">Private Function TextFromSelection(ByVal target As AutomationElement, ByVal length As Int32) As String\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return Nothing\n    End If\n    Dim currentSelection As TextPatternRange() = textpatternPattern.GetSelection()\n    &#39; GetText(-1) retrieves all characters but can be inefficient\n    Return currentSelection(0).GetText(length)\nEnd Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_Text_TextPatternRange_Move_System_Windows_Automation_Text_TextUnit_System_Int32_\">\r\n    \r\n            <a id=\"System_Windows_Automation_Text_TextPatternRange_Move_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Move(TextUnit,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Moves the text range the specified number of text units.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Move (System.Windows.Automation.Text.TextUnit unit, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>unit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.automation.text.textunit\" data-linktype=\"relative-path\">TextUnit</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The text unit boundary.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of text units to move. A positive value moves the text range forward, a negative value moves the text range backward, and 0 has no effect.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of units actually moved. This can be less than the number requested if either of the new text range endpoints is greater than or less than the <span class=\"xref\">stem.Windows.Automation.TextPattern.DocumentRange*</span> endpoints.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the Move method to execute successfully.  </p>\n<ol>\n<li><p>The text range is normalized; that is, the text range is collapsed to a degenerate range at the <a class=\"xref\" href=\"system.windows.automation.text.textpatternrangeendpoint\" data-linktype=\"relative-path\">TextPatternRangeEndpoint</a> endpoint, which makes the <a class=\"xref\" href=\"system.windows.automation.text.textpatternrangeendpoint\" data-linktype=\"relative-path\">TextPatternRangeEndpoint</a> endpoint superfluous. This step is necessary to remove ambiguity in situations where a text range spans <code>unit</code> boundaries; for example, &quot;{The U}RL <a href=\"http://www.microsoft.com\" data-linktype=\"external\">http://www.microsoft.com</a> is embedded in text&quot; where &quot;{&quot; and &quot;}&quot; are the text range endpoints.  </p>\n</li>\n<li><p>The resulting range is moved backward in the <a class=\"xref\" href=\"system.windows.automation.textpattern#System_Windows_Automation_TextPattern_DocumentRange_\" data-linktype=\"relative-path\">DocumentRange</a> to the beginning of the requested <code>unit</code> boundary.  </p>\n</li>\n<li><p>The range is moved forward or backward in the <a class=\"xref\" href=\"system.windows.automation.textpattern#System_Windows_Automation_TextPattern_DocumentRange_\" data-linktype=\"relative-path\">DocumentRange</a> by the requested number of <code>unit</code> boundaries.  </p>\n</li>\n<li><p>The range is then expanded from a degenerate range state by moving the <a class=\"xref\" href=\"system.windows.automation.text.textpatternrangeendpoint\" data-linktype=\"relative-path\">TextPatternRangeEndpoint</a> endpoint by one requested <code>unit</code> boundary.  </p>\n<p><img src=\"add/media/uia-textpattern-moveandexpand-examples.png\" alt=\"Range adjustments by Move &amp; ExpandToEnclosingUnit\" title=\"Range adjustments by Move &amp; ExpandToEnclosingUnit\" data-linktype=\"relative-path\"><br>Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()  </p>\n<p>The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/tla2sharptla-uiautomation-md.md&quot; -->UI Automation<!--END INCLUDE --> tree; object boundaries are ignored. If a UI Automation client is retrieving the text for the purpose of reciting, interpreting, or analyzing in some manner, the text range should be checked for special cases, such as a table with textual content or other embedded objects. This can be accomplished by calling <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange#System_Windows_Automation_Text_TextPatternRange_GetChildren_\" data-linktype=\"relative-path\">GetChildren</a> to obtain an <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a> for each embedded object and then calling <a class=\"xref\" href=\"system.windows.automation.textpattern#System_Windows_Automation_TextPattern_RangeFromChild_\" data-linktype=\"relative-path\">RangeFromChild</a> to obtain a text range for each element; this is done recursively until all textual content has been retrieved.  </p>\n<p><img src=\"add/media/uia-textpattern-embeddedobjecttextranges.png\" alt=\"Text ranges spanned by embedded objects.\" title=\"Text ranges spanned by embedded objects.\" data-linktype=\"relative-path\"><br>Example of a text stream with embedded objects and their range spans  </p>\n<p>Move respects both hidden and visible text. The UI Automation client can check the <a class=\"xref\" href=\"system.windows.automation.textpattern#System_Windows_Automation_TextPattern_IsHiddenAttribute\" data-linktype=\"relative-path\">IsHiddenAttribute</a> for text visibility.  </p>\n<p>Move defers to the next largest <a class=\"xref\" href=\"system.windows.automation.text.textunit\" data-linktype=\"relative-path\">TextUnit</a> supported if the given <a class=\"xref\" href=\"system.windows.automation.text.textunit\" data-linktype=\"relative-path\">TextUnit</a> is not supported by the control.  </p>\n<p>The order, from smallest unit to largest, is listed below.  </p>\n</li>\n</ol>\n<ul>\n<li><a class=\"xref\" href=\"system.windows.automation.text.textunit\" data-linktype=\"relative-path\">TextUnit</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.automation.text.textunit\" data-linktype=\"relative-path\">TextUnit</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.automation.text.textunit\" data-linktype=\"relative-path\">TextUnit</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.automation.text.textunit\" data-linktype=\"relative-path\">TextUnit</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.automation.text.textunit\" data-linktype=\"relative-path\">TextUnit</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.automation.text.textunit\" data-linktype=\"relative-path\">TextUnit</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.automation.text.textunit\" data-linktype=\"relative-path\">TextUnit</a>  \n\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> The text is not altered in any way as the text range just spans a different part of the text.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#StartTarget\">&#39;&#39;&#39; -------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Starts the target application and returns the AutomationElement \n&#39;&#39;&#39; obtained from the targets window handle.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;exe&quot;&gt;\n&#39;&#39;&#39; The target application.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;param name=&quot;filename&quot;&gt;\n&#39;&#39;&#39; The text file to be opened in the target application\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;returns&gt;\n&#39;&#39;&#39; An AutomationElement representing the target application.\n&#39;&#39;&#39; &lt;/returns&gt;\n&#39;&#39;&#39; -------------------------------------------------------------------\nPrivate Function StartTarget( _\nByVal exe As String, ByVal filename As String) As AutomationElement\n    &#39; Start text editor and load with a text file.\n    Dim p As Process = Process.Start(exe, filename)\n\n    &#39; targetApp --&gt; the root AutomationElement.\n    Dim targetApp As AutomationElement\n    targetApp = AutomationElement.FromHandle(p.MainWindowHandle)\n\n    Return targetApp\nEnd Function\n</code></pre><pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#StartTarget\">/// -------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Starts the target application and returns the AutomationElement \n/// obtained from the targets window handle.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;exe&quot;&gt;\n/// The target application.\n/// &lt;/param&gt;\n/// &lt;param name=&quot;filename&quot;&gt;\n/// The text file to be opened in the target application\n/// &lt;/param&gt;\n/// &lt;returns&gt;\n/// An AutomationElement representing the target application.\n/// &lt;/returns&gt;\n/// -------------------------------------------------------------------\nprivate AutomationElement StartTarget(string exe, string filename)\n{\n    // Start text editor and load with a text file.\n    Process p = Process.Start(exe, filename);\n\n    // targetApp --&gt; the root AutomationElement.\n    AutomationElement targetApp =\n        AutomationElement.FromHandle(p.MainWindowHandle);\n\n    return targetApp;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#GetTextElement\">&#39;&#39;&#39; -------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Obtain the text control of interest from the target application.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetApp&quot;&gt;\n&#39;&#39;&#39; The target application.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;returns&gt;\n&#39;&#39;&#39; An AutomationElement. representing a text control.\n&#39;&#39;&#39; &lt;/returns&gt;\n&#39;&#39;&#39; -------------------------------------------------------------------\nPrivate Function GetTextElement(ByVal targetApp As AutomationElement) As AutomationElement\n    &#39; The control type we&#39;re looking for; in this case &#39;Document&#39;\n    Dim cond1 As PropertyCondition = _\n        New PropertyCondition( _\n        AutomationElement.ControlTypeProperty, _\n        ControlType.Document)\n\n    &#39; The control pattern of interest; in this case &#39;TextPattern&#39;.\n    Dim cond2 As PropertyCondition = _\n        New PropertyCondition( _\n        AutomationElement.IsTextPatternAvailableProperty, _\n        True)\n\n    Dim textCondition As AndCondition = New AndCondition(cond1, cond2)\n\n    Dim targetTextElement As AutomationElement = _\n        targetApp.FindFirst(TreeScope.Descendants, textCondition)\n\n    &#39; If targetText is null then a suitable text control was not found.\n    Return targetTextElement\nEnd Function\n</code></pre><pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#GetTextElement\">/// -------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Obtain the text control of interest from the target application.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetApp&quot;&gt;\n/// The target application.\n/// &lt;/param&gt;\n/// &lt;returns&gt;\n/// An AutomationElement that represents a text provider..\n/// &lt;/returns&gt;\n/// -------------------------------------------------------------------\nprivate AutomationElement GetTextElement(AutomationElement targetApp)\n{\n    // The control type we&#39;re looking for; in this case &#39;Document&#39;\n    PropertyCondition cond1 =\n        new PropertyCondition(\n        AutomationElement.ControlTypeProperty,\n        ControlType.Document);\n\n    // The control pattern of interest; in this case &#39;TextPattern&#39;.\n    PropertyCondition cond2 = \n        new PropertyCondition(\n        AutomationElement.IsTextPatternAvailableProperty, \n        true);\n\n    AndCondition textCondition = new AndCondition(cond1, cond2);\n\n    AutomationElement targetTextElement =\n        targetApp.FindFirst(TreeScope.Descendants, textCondition);\n\n    // If targetText is null then a suitable text control was not found.\n    return targetTextElement;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#MoveSelection\">&#39;&#39;&#39; -------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Moves a text range a specified number of text units.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetTextElement&quot;&gt;\n&#39;&#39;&#39; The AutomationElement that represents a text control.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;param name=&quot;textUnit&quot;&gt;\n&#39;&#39;&#39; The text unit value.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;param name=&quot;units&quot;&gt;\n&#39;&#39;&#39; The number of text units to move.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;param name=&quot;direction&quot;&gt;\n&#39;&#39;&#39; Direction to move the text range. Valid values are -1, 0, 1.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;returns&gt;\n&#39;&#39;&#39; The number of text units actually moved. This can be less than the \n&#39;&#39;&#39; number requested if either of the new text range endpoints is \n&#39;&#39;&#39; greater than or less than the DocumentRange endpoints. \n&#39;&#39;&#39; &lt;/returns&gt;\n&#39;&#39;&#39; &lt;remarks&gt;\n&#39;&#39;&#39; Moving the text range does not modify the text source in any way. \n&#39;&#39;&#39; Only the text range starting and ending endpoints are modified.\n&#39;&#39;&#39; &lt;/remarks&gt;\n&#39;&#39;&#39; -------------------------------------------------------------------\nPrivate Function MoveSelection( _\n    ByVal targetTextElement As AutomationElement, _\n    ByVal textUnit As TextUnit, _\n    ByVal units As Integer, _\n    ByVal direction As Integer) As Integer\n\n    Dim textPattern As TextPattern = _\n    DirectCast( _\n    targetTextElement.GetCurrentPattern(textPattern.Pattern), _\n    TextPattern)\n\n    If (textPattern Is Nothing) Then\n        &#39; Target control doesn&#39;t support TextPattern.\n        Return -1\n    End If\n\n    Dim currentSelection As TextPatternRange() = _\n    textPattern.GetSelection()\n\n    If (currentSelection.Length &gt; 1) Then\n        &#39; For this example, we cannot move more than one text range.\n        Return -1\n    End If\n\n    Return currentSelection(0).Move(textUnit, Math.Sign(direction) * units)\nEnd Function\n</code></pre><pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#MoveSelection\">/// -------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Moves a text range a specified number of text units. The text range \n/// is the current selection.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetTextElement&quot;&gt;\n/// The AutomationElment that represents a text control.\n/// &lt;/param&gt;\n/// &lt;param name=&quot;textUnit&quot;&gt;\n/// The text unit value.\n/// &lt;/param&gt;\n/// &lt;param name=&quot;units&quot;&gt;\n/// The number of text units to move.\n/// &lt;/param&gt;\n/// &lt;param name=&quot;direction&quot;&gt;\n/// Direction to move the text range. Valid values are -1, 0, 1.\n/// &lt;/param&gt;\n/// &lt;returns&gt;\n/// The number of text units actually moved. This can be less than the \n/// number requested if either of the new text range endpoints is \n/// greater than or less than the DocumentRange endpoints. \n/// &lt;/returns&gt;\n/// &lt;remarks&gt;\n/// Moving the text range does not modify the text source in any way. \n/// Only the text range starting and ending endpoints are modified.\n/// &lt;/remarks&gt;\n/// -------------------------------------------------------------------\nprivate Int32 MoveSelection(\n    AutomationElement targetTextElement, \n    TextUnit textUnit,\n    int units,\n    int direction)\n{\n    TextPattern textPattern =\n        targetTextElement.GetCurrentPattern(TextPattern.Pattern) \n        as TextPattern;\n\n    if (textPattern == null)\n    {\n        // Target control doesn&#39;t support TextPattern.\n        return -1;\n    }\n\n    TextPatternRange[] currentSelection = textPattern.GetSelection();\n\n    if (currentSelection.Length &gt; 1)\n    {\n        // For this example, we cannot move more than one text range.\n        return -1;\n    }\n\n    return currentSelection[0].Move(textUnit, Math.Sign(direction) * units);\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_Text_TextPatternRange_MoveEndpointByRange_System_Windows_Automation_Text_TextPatternRangeEndpoint_System_Windows_Automation_Text_TextPatternRange_System_Windows_Automation_Text_TextPatternRangeEndpoint_\">\r\n    \r\n            <a id=\"System_Windows_Automation_Text_TextPatternRange_MoveEndpointByRange_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveEndpointByRange(TextPatternRangeEndpoint,TextPatternRange,TextPatternRangeEndpoint)</div>        \r\n          </div>\r\n    \r\n            <p>Moves one endpoint of a text range to the specified endpoint of a second text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void MoveEndpointByRange (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Text.TextPatternRange targetRange, System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>endpoint</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.automation.text.textpatternrangeendpoint\" data-linktype=\"relative-path\">TextPatternRangeEndpoint</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The endpoint to move.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>targetRange</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.automation.text.textpatternrange\" data-linktype=\"relative-path\">TextPatternRange</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Another range from the same text provider.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>targetEndpoint</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.automation.text.textpatternrangeendpoint\" data-linktype=\"relative-path\">TextPatternRangeEndpoint</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An endpoint on the other range.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the endpoint being moved crosses the other endpoint of the same text range then that other endpoint is moved also, resulting in a degenerate range and ensuring the correct ordering of the endpoints (that is, <a class=\"xref\" href=\"system.windows.automation.text.textpatternrangeendpoint\" data-linktype=\"relative-path\">TextPatternRangeEndpoint</a> is always less than or equal to <a class=\"xref\" href=\"system.windows.automation.text.textpatternrangeendpoint\" data-linktype=\"relative-path\">TextPatternRangeEndpoint</a>).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1072\"> private void MoveEndpointByRangeFromSelection(AutomationElement target)\n{\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return;\n    }\n    TextPatternRange[] currentSelection = textpatternPattern.GetSelection();\n    TextPatternRange[] currentVisibleRanges = textpatternPattern.GetVisibleRanges();\n\n    currentSelection[0].MoveEndpointByRange(\n        TextPatternRangeEndpoint.Start,\n        currentVisibleRanges[0], \n        TextPatternRangeEndpoint.Start);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2072\">Private Sub MoveEndpointByRangeFromSelection(ByVal target As AutomationElement)\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return\n    End If\n    Dim currentSelection As TextPatternRange() = textpatternPattern.GetSelection()\n    Dim currentVisibleRanges As TextPatternRange() = textpatternPattern.GetVisibleRanges()\n    currentSelection(0).MoveEndpointByRange(TextPatternRangeEndpoint.Start, _\n                                     currentVisibleRanges(0), _\n                                     TextPatternRangeEndpoint.Start)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_Text_TextPatternRange_MoveEndpointByUnit_System_Windows_Automation_Text_TextPatternRangeEndpoint_System_Windows_Automation_Text_TextUnit_System_Int32_\">\r\n    \r\n            <a id=\"System_Windows_Automation_Text_TextPatternRange_MoveEndpointByUnit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveEndpointByUnit(TextPatternRangeEndpoint,TextUnit,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Moves one endpoint of the text range the specified number of <a class=\"xref\" href=\"system.windows.automation.text.textunit\" data-linktype=\"relative-path\">TextUnit</a>s within the document range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int MoveEndpointByUnit (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Text.TextUnit unit, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>endpoint</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.automation.text.textpatternrangeendpoint\" data-linktype=\"relative-path\">TextPatternRangeEndpoint</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The endpoint to move.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>unit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.automation.text.textunit\" data-linktype=\"relative-path\">TextUnit</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The textual unit for moving.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of units to move. A positive count moves the endpoint forward. A negative count moves backward. A count of 0 has no effect.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of units actually moved, which can be less than the number requested if moving the endpoint runs into the beginning or end of the document.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange#System_Windows_Automation_Text_TextPatternRange_Move_\" data-linktype=\"relative-path\">Move</a> method to execute successfully.  </p>\n<ol>\n<li><p>The text range is normalized; that is, the text range is collapsed to a degenerate range at the <a class=\"xref\" href=\"system.windows.automation.text.textpatternrangeendpoint\" data-linktype=\"relative-path\">TextPatternRangeEndpoint</a> endpoint, which makes the <a class=\"xref\" href=\"system.windows.automation.text.textpatternrangeendpoint\" data-linktype=\"relative-path\">TextPatternRangeEndpoint</a> endpoint superfluous. This step is necessary to remove ambiguity in situations where a text range spans <code>unit</code> boundaries; for example, &quot;{The U}RL <a href=\"http://www.microsoft.com\" data-linktype=\"external\">http://www.microsoft.com</a> is embedded in text&quot; where &quot;{&quot; and &quot;}&quot; are the text range endpoints.  </p>\n</li>\n<li><p>The resulting range is moved backward in the <a class=\"xref\" href=\"system.windows.automation.textpattern#System_Windows_Automation_TextPattern_DocumentRange_\" data-linktype=\"relative-path\">DocumentRange</a> to the beginning of the requested <code>unit</code> boundary.  </p>\n</li>\n<li><p>The range is then expanded from a degenerate range state by moving the <a class=\"xref\" href=\"system.windows.automation.text.textpatternrangeendpoint\" data-linktype=\"relative-path\">TextPatternRangeEndpoint</a> endpoint by one requested <code>unit</code> boundary.  </p>\n<p><img src=\"add/media/uia-textpattern-moveandexpand-examples.png\" alt=\"Range adjustments by Move &amp; ExpandToEnclosingUnit\" title=\"Range adjustments by Move &amp; ExpandToEnclosingUnit\" data-linktype=\"relative-path\"><br>Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()  </p>\n<p>The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/tla2sharptla-uiautomation-md.md&quot; -->UI Automation<!--END INCLUDE --> tree; object boundaries are ignored. If a UI Automation client is retrieving the text for the purpose of reciting, interpreting, or analyzing in some manner, the text range should be checked for special cases, such as a table with textual content or other embedded objects. This can be accomplished by calling <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange#System_Windows_Automation_Text_TextPatternRange_GetChildren_\" data-linktype=\"relative-path\">GetChildren</a> to obtain an <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a> for each embedded object and then calling <a class=\"xref\" href=\"system.windows.automation.textpattern#System_Windows_Automation_TextPattern_RangeFromChild_\" data-linktype=\"relative-path\">RangeFromChild</a> to obtain a text range for each element; this is done recursively until all textual content has been retrieved.  </p>\n<p><img src=\"add/media/uia-textpattern-embeddedobjecttextranges.png\" alt=\"Text ranges spanned by embedded objects.\" title=\"Text ranges spanned by embedded objects.\" data-linktype=\"relative-path\"><br>Example of a text stream with embedded objects and their range spans  </p>\n<p>MoveEndpointByUnit defers to the next largest <a class=\"xref\" href=\"system.windows.automation.text.textunit\" data-linktype=\"relative-path\">TextUnit</a> supported if the given <a class=\"xref\" href=\"system.windows.automation.text.textunit\" data-linktype=\"relative-path\">TextUnit</a> is not supported by the control.  </p>\n<p>The order, from smallest unit to largest, is listed below.  </p>\n</li>\n</ol>\n<ul>\n<li><a class=\"xref\" href=\"system.windows.automation.text.textunit\" data-linktype=\"relative-path\">TextUnit</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.automation.text.textunit\" data-linktype=\"relative-path\">TextUnit</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.automation.text.textunit\" data-linktype=\"relative-path\">TextUnit</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.automation.text.textunit\" data-linktype=\"relative-path\">TextUnit</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.automation.text.textunit\" data-linktype=\"relative-path\">TextUnit</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.automation.text.textunit\" data-linktype=\"relative-path\">TextUnit</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.automation.text.textunit\" data-linktype=\"relative-path\">TextUnit</a></li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1073\">private Int32 MoveEndpointByRangeFromSelection(AutomationElement target, Int32 units)\n{\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return 0;\n    }\n    TextPatternRange[] currentSelection = textpatternPattern.GetSelection();\n\n    return currentSelection[0].MoveEndpointByUnit(\n        TextPatternRangeEndpoint.Start, TextUnit.Paragraph, units);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2073\">Private Function MoveEndpointByRangeFromSelection(ByVal target As AutomationElement, ByVal units As Int32) As Int32\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return Nothing\n    End If\n    Dim currentSelection As TextPatternRange() = textpatternPattern.GetSelection()\n    &#39; GetText(-1) retrieves all characters but can be inefficient\n    Return currentSelection(0).MoveEndpointByUnit(TextPatternRangeEndpoint.Start, TextUnit.Paragraph, units)\nEnd Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_Text_TextPatternRange_RemoveFromSelection\">\r\n    \r\n            <a id=\"System_Windows_Automation_Text_TextPatternRange_RemoveFromSelection_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveFromSelection()</div>        \r\n          </div>\r\n    \r\n            <p>Removes a highlighted section of text, corresponding to the calling text range <a class=\"xref\" href=\"system.windows.automation.text.textpatternrangeendpoint\" data-linktype=\"relative-path\">TextPatternRangeEndpoint</a> and <a class=\"xref\" href=\"system.windows.automation.text.textpatternrangeendpoint\" data-linktype=\"relative-path\">TextPatternRangeEndpoint</a> endpoints, from an existing collection of highlighted text in a text container that supports multiple, disjoint selections.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RemoveFromSelection ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>If text provider does not support multiple, disjoint selections (for example, <span class=\"xref\">stem.Windows.Automation.TextPattern.SupportedTextSelection*</span> must have a value of <code>Multiple</code>).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The text insertion point will move to the area of the removed highlight.  </p>\n<p> Providing a degenerate text range will move the insertion point.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_Text_TextPatternRange_ScrollIntoView_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Automation_Text_TextPatternRange_ScrollIntoView_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ScrollIntoView(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Causes the text control to scroll vertically until the text range is visible in the viewport.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ScrollIntoView (bool alignToTop);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>alignToTop</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> if the text control should be scrolled so the text range is flush with the top of the viewport; <code>false</code> if it should be flush with the bottom of the viewport.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>If scrolling is not supported by the control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>ScrollIntoView respects both hidden and visible text. The UI Automation client can check the <a class=\"xref\" href=\"system.windows.automation.textpattern#System_Windows_Automation_TextPattern_IsHiddenAttribute\" data-linktype=\"relative-path\">IsHiddenAttribute</a> for text visibility. If the text range is hidden, the text control will scroll only if the hidden text has an anchor in the viewport.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1074\">private void ScrollToSelection(AutomationElement target)\n{\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return;\n    }\n    TextPatternRange[] currentSelection = textpatternPattern.GetSelection();\n\n    currentSelection[0].ScrollIntoView(true);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2074\">Private Sub ScrollToSelection(ByVal target As AutomationElement)\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return\n    End If\n    Dim currentSelection As TextPatternRange() = textpatternPattern.GetSelection()\n    currentSelection(0).ScrollIntoView(True)\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_Text_TextPatternRange_Select\">\r\n    \r\n            <a id=\"System_Windows_Automation_Text_TextPatternRange_Select_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Select()</div>        \r\n          </div>\r\n    \r\n            <p>Highlights text in the text control corresponding to the text range <a class=\"xref\" href=\"system.windows.automation.text.textpatternrangeendpoint\" data-linktype=\"relative-path\">TextPatternRangeEndpoint</a> and <a class=\"xref\" href=\"system.windows.automation.text.textpatternrangeendpoint\" data-linktype=\"relative-path\">TextPatternRangeEndpoint</a> endpoints.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Select ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Occurs when text selection is not supported by the text control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If a degenerate text range is provided, the text insertion point will move to the <a class=\"xref\" href=\"system.windows.automation.text.textpatternrangeendpoint\" data-linktype=\"relative-path\">TextPatternRangeEndpoint</a> endpoint of the text range.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1075\">private void SetSelection(AutomationElement target, String s, Boolean backward, Boolean ignorecase)\n{\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return;\n    }\n    TextPatternRange[] currentSelection = textpatternPattern.GetSelection();\n\n    TextPatternRange tprText = currentSelection[0].FindText(s, backward, ignorecase);\n    tprText.Select();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2075\">Private Sub SetSelection(ByVal target As AutomationElement, ByVal s As String, ByVal backward As Boolean, ByVal ignorecase As Boolean)\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return\n    End If\n    Dim currentSelection As TextPatternRange() = textpatternPattern.GetSelection()\n    Dim selectedText As TextPatternRange = currentSelection(0).FindText(s, backward, ignorecase)\n    selectedText.Select()\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Automation.Text.TextPatternRange.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Automation.Text.TextPatternRange.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.Text.TextPatternRange\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.Text.TextPatternRange.AddToSelection\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.Text.TextPatternRange.Clone\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.Text.TextPatternRange.Compare\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.Text.TextPatternRange.CompareEndpoints\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.Text.TextPatternRange.FindAttribute\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.Text.TextPatternRange.FindText\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.Text.TextPatternRange.GetAttributeValue\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.Text.TextPatternRange.GetBoundingRectangles\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.Text.TextPatternRange.GetChildren\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.Text.TextPatternRange.GetEnclosingElement\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.Text.TextPatternRange.GetText\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.Text.TextPatternRange.Move\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.Text.TextPatternRange.MoveEndpointByRange\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.Text.TextPatternRange.ScrollIntoView\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.Text.TextPatternRange.Select\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.Text.TextPatternRange.TextPattern\">\r\n<meta name=\"APILocation\" content=\"UIAutomationClient.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"8dfa008f-6db3-d0ea-2c5d-25136335f0d9\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Windows.Automation.Text\\TextPatternRange.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a span of continuous text in a  container.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows.Automation.Text/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Automation.Text.TextPatternRange\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Automation.Text.TextPatternRange.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Automation.Text.TextPatternRange.yml","open_to_public_contributors":true,"api_name":["System.Windows.Automation.Text.TextPatternRange","System.Windows.Automation.Text.TextPatternRange.AddToSelection","System.Windows.Automation.Text.TextPatternRange.Clone","System.Windows.Automation.Text.TextPatternRange.Compare","System.Windows.Automation.Text.TextPatternRange.CompareEndpoints","System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit","System.Windows.Automation.Text.TextPatternRange.FindAttribute","System.Windows.Automation.Text.TextPatternRange.FindText","System.Windows.Automation.Text.TextPatternRange.GetAttributeValue","System.Windows.Automation.Text.TextPatternRange.GetBoundingRectangles","System.Windows.Automation.Text.TextPatternRange.GetChildren","System.Windows.Automation.Text.TextPatternRange.GetEnclosingElement","System.Windows.Automation.Text.TextPatternRange.GetText","System.Windows.Automation.Text.TextPatternRange.Move","System.Windows.Automation.Text.TextPatternRange.MoveEndpointByRange","System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit","System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection","System.Windows.Automation.Text.TextPatternRange.ScrollIntoView","System.Windows.Automation.Text.TextPatternRange.Select","System.Windows.Automation.Text.TextPatternRange.TextPattern"],"api_location":["UIAutomationClient.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Automation.Text.TextPatternRange","System::Windows::Automation::Text::TextPatternRange","System.Windows.Automation.Text.TextPatternRange.AddToSelection","System::Windows::Automation::Text::TextPatternRange::AddToSelection","System.Windows.Automation.Text.TextPatternRange.Clone","System::Windows::Automation::Text::TextPatternRange::Clone","System.Windows.Automation.Text.TextPatternRange.Compare","System::Windows::Automation::Text::TextPatternRange::Compare","System.Windows.Automation.Text.TextPatternRange.CompareEndpoints","System::Windows::Automation::Text::TextPatternRange::CompareEndpoints","System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit","System::Windows::Automation::Text::TextPatternRange::ExpandToEnclosingUnit","System.Windows.Automation.Text.TextPatternRange.FindAttribute","System::Windows::Automation::Text::TextPatternRange::FindAttribute","System.Windows.Automation.Text.TextPatternRange.FindText","System::Windows::Automation::Text::TextPatternRange::FindText","System.Windows.Automation.Text.TextPatternRange.GetAttributeValue","System::Windows::Automation::Text::TextPatternRange::GetAttributeValue","System.Windows.Automation.Text.TextPatternRange.GetBoundingRectangles","System::Windows::Automation::Text::TextPatternRange::GetBoundingRectangles","System.Windows.Automation.Text.TextPatternRange.GetChildren","System::Windows::Automation::Text::TextPatternRange::GetChildren","System.Windows.Automation.Text.TextPatternRange.GetEnclosingElement","System::Windows::Automation::Text::TextPatternRange::GetEnclosingElement","System.Windows.Automation.Text.TextPatternRange.GetText","System::Windows::Automation::Text::TextPatternRange::GetText","System.Windows.Automation.Text.TextPatternRange.Move","System::Windows::Automation::Text::TextPatternRange::Move","System.Windows.Automation.Text.TextPatternRange.MoveEndpointByRange","System::Windows::Automation::Text::TextPatternRange::MoveEndpointByRange","System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit","System::Windows::Automation::Text::TextPatternRange::MoveEndpointByUnit","System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection","System::Windows::Automation::Text::TextPatternRange::RemoveFromSelection","System.Windows.Automation.Text.TextPatternRange.ScrollIntoView","System::Windows::Automation::Text::TextPatternRange::ScrollIntoView","System.Windows.Automation.Text.TextPatternRange.Select","System::Windows::Automation::Text::TextPatternRange::Select","System.Windows.Automation.Text.TextPatternRange.TextPattern","System::Windows::Automation::Text::TextPatternRange::TextPattern"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"8dfa008f-6db3-d0ea-2c5d-25136335f0d9","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Windows.Automation.Text\\TextPatternRange.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows.Automation.Text/TextPatternRange.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"TextPatternRange class | Microsoft Docs","_op_ogTitle":"TextPatternRange class","description":"Represents a span of continuous text in a  container.\n","toc_asset_id":"_splitted/System.Windows.Automation.Text/toc.json","toc_rel":"_splitted/System.Windows.Automation.Text/toc.json","source_url":"","ms.assetid":"System.Windows.Automation.Text.TextPatternRange","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.automation.text.textpatternrange","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.automation.text.textpatternrange","fileRelativePath":"System.Windows.Automation.Text.TextPatternRange.html"},"themesRelativePathToOutputRoot":"_themes/"}