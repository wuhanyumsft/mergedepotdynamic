{"content":"    \r\n    <h1 id=\"System_TimeSpan\">\r\n      <span class=\"lang-csharp\">TimeSpan</span>\r\n        Struct\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a time interval.  </p>\n<p> To browse the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/timespan.cs#865ef7b89f41b632\" data-linktype=\"external\">Reference Source</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic struct TimeSpan : IComparable, IComparable&lt;TimeSpan&gt;, IEquatable&lt;TimeSpan&gt;, IFormattable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">System.ValueType</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">TimeSpan</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <div class=\"NOTE\"><h5>Note</h5><p> To view the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/timespan.cs#865ef7b89f41b632\" data-linktype=\"external\">Reference Source</a>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <a href=\"http://referencesource.microsoft.com/\" data-linktype=\"external\">instructions</a>.  </p>\n</div>\n<p> A TimeSpan object represents a time interval (duration of time or elapsed time) that is measured as a positive or negative number of days, hours, minutes, seconds, and fractions of a second. The TimeSpan structure can also be used to represent the time of day, but only if the time is unrelated to a particular date. Otherwise, the <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> or <a class=\"xref\" href=\"system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> structure should be used instead. (For more information about using the TimeSpan structure to reflect the time of day, see <a href=\"../Topic/Choosing%20Between%20DateTime,%20DateTimeOffset,%20TimeSpan,%20and%20TimeZoneInfo.md\" data-linktype=\"relative-path\">Choosing Between DateTime, DateTimeOffset, TimeSpan, and TimeZoneInfo</a>.)  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> A TimeSpan value represents a time interval and can be expressed as a particular number of days, hours, minutes, seconds, and milliseconds. Because it represents a general interval without reference to a particular start or end point, it cannot be expressed in terms of years and months, both of which have a variable number of days. It differs from a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value, which represents a date and time without reference to a particular time zone, or a <a class=\"xref\" href=\"system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> value, which represents a specific moment of time.  </p>\n</div>\n<p> The largest unit of time that the TimeSpan structure uses to measure duration is a day. Time intervals are measured in days for consistency, because the number of days in larger units of time, such as months and years, varies.  </p>\n<p> The value of a TimeSpan object is the number of ticks that equal the represented time interval. A tick is equal to 100 nanoseconds, or one ten-millionth of a second. The value of a TimeSpan object can range from <a class=\"xref\" href=\"system.timespan#System_TimeSpan_MinValue\" data-linktype=\"relative-path\">System.TimeSpan.MinValue</a> to <a class=\"xref\" href=\"system.timespan#System_TimeSpan_MaxValue\" data-linktype=\"relative-path\">System.TimeSpan.MaxValue</a>.  </p>\n<h2 id=\"instantiating-a-timespan-value\">Instantiating a TimeSpan Value</h2>\n<p> You can instantiate a TimeSpan value in a number of ways:  </p>\n<ul>\n<li><p>By calling its implicit default constructor. This creates an object whose value is <a class=\"xref\" href=\"system.timespan#System_TimeSpan_Zero\" data-linktype=\"relative-path\">System.TimeSpan.Zero</a>, as the following example shows.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeSpan.Class#2\">      TimeSpan interval = new TimeSpan();\n      Console.WriteLine(interval.Equals(TimeSpan.Zero));    // Displays &quot;True&quot;.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.Class#2\">      Dim interval As New TimeSpan()\n      Console.WriteLine(interval.Equals(TimeSpan.Zero))     &#39; Displays &quot;True&quot;.\n</code></pre></li>\n<li><p>By calling one of its explicit constructors. The following example initializes a TimeSpan value to a specified number of hours, minutes, and seconds.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeSpan.Class#3\">      TimeSpan interval = new TimeSpan(2, 14, 18);\n      Console.WriteLine(interval.ToString());              // Displays &quot;02:14:18&quot;.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.Class#3\">      Dim interval As New TimeSpan(2, 14, 18)\n      Console.WriteLine(interval.ToString())                &#39; Displays &quot;02:14:18&quot;.\n</code></pre></li>\n<li><p>By calling a method or performing an operation that returns a TimeSpan value. For example, you can instantiate a TimeSpan value that represents the interval between two date and time values, as the following example shows.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeSpan.Class#4\">      DateTime departure = new DateTime(2010, 6, 12, 18, 32, 0);\n      DateTime arrival = new DateTime(2010, 6, 13, 22, 47, 0);\n      TimeSpan travelTime = arrival - departure;  \n      Console.WriteLine(&quot;{0} - {1} = {2}&quot;, arrival, departure, travelTime);      \n      // The example displays the following output:\n      //       6/13/2010 10:47:00 PM - 6/12/2010 6:32:00 PM = 1.04:15:00\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.Class#4\">      Dim departure As DateTime = #06/12/2010 6:32PM#\n      Dim arrival As DateTime = #06/13/2010 10:47PM#\n      Dim travelTime As TimeSpan = arrival - departure  \n      Console.WriteLine(&quot;{0} - {1} = {2}&quot;, arrival, departure, travelTime)      \n      &#39; The example displays the following output:\n      &#39;       6/13/2010 10:47:00 PM - 6/12/2010 6:32:00 PM = 1.04:15:00\n</code></pre><p> You can also initialize a TimeSpan object to a zero time value in this way, as the following example shows.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeSpan.Class#6\">using System;\n\npublic class Example\n{\n   static Random rnd = new Random();\n   \n   public static void Main()\n   {\n      TimeSpan timeSpent = TimeSpan.Zero;\n\n      timeSpent += GetTimeBeforeLunch();\n      timeSpent += GetTimeAfterLunch();\n\n      Console.WriteLine(&quot;Total time: {0}&quot;, timeSpent);\n   }\n\n   private static TimeSpan GetTimeBeforeLunch()\n   {\n      return new TimeSpan(rnd.Next(3, 6), 0, 0);\n   }\n   \n   private static TimeSpan GetTimeAfterLunch()\n   {\n      return new TimeSpan(rnd.Next(3, 6), 0, 0);\n   }\n}\n// The example displays output like the following:\n//        Total time: 08:00:00\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.Class#6\">Module Example\n   Dim rnd As New Random()\n   \n   Public Sub Main()\n      Dim timeSpent As TimeSpan = TimeSpan.Zero\n\n      timeSpent += GetTimeBeforeLunch()\n      timeSpent += GetTimeAfterLunch()\n\n      Console.WriteLine(&quot;Total time: {0}&quot;, timeSpent)\n   End Sub\n   \n   Private Function GetTimeBeforeLunch() As TimeSpan\n      Return New TimeSpan(rnd.Next(3, 6), 0, 0)\n   End Function\n   \n   Private Function GetTimeAfterLunch() As TimeSpan\n      Return New TimeSpan(rnd.Next(3, 6), 0, 0)\n   End Function\nEnd Module\n&#39; The example displays output like the following:\n&#39;       Total time: 08:00:00\n</code></pre><p> TimeSpan values are returned by arithmetic operators and methods of the <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>, <a class=\"xref\" href=\"system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a>, and TimeSpan structures.  </p>\n</li>\n<li><p>By parsing the string representation of a TimeSpan value. You can use the <a class=\"xref\" href=\"system.timespan#System_TimeSpan_Parse_\" data-linktype=\"relative-path\">Parse</a> and <a class=\"xref\" href=\"system.timespan#System_TimeSpan_TryParse_\" data-linktype=\"relative-path\">TryParse</a> methods to convert strings that contain time intervals to TimeSpan values. The following example uses the <a class=\"xref\" href=\"system.timespan#System_TimeSpan_Parse_\" data-linktype=\"relative-path\">Parse</a> method to convert an array of strings to TimeSpan values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeSpan.Class#5\">      string[] values = { &quot;12&quot;, &quot;31.&quot;, &quot;5.8:32:16&quot;, &quot;12:12:15.95&quot;, &quot;.12&quot;};\n      foreach (string value in values)\n      {\n         try {\n            TimeSpan ts = TimeSpan.Parse(value);\n            Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, value, ts);\n         }\n         catch (FormatException) {\n            Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;&quot;, value);\n         }\n         catch (OverflowException) {\n            Console.WriteLine(&quot;&#39;{0}&#39; is outside the range of a TimeSpan.&quot;, value);\n         }   \n      }\n      // The example displays the following output:\n      //       &#39;12&#39; --&gt; 12.00:00:00\n      //       Unable to parse &#39;31.&#39;\n      //       &#39;5.8:32:16&#39; --&gt; 5.08:32:16\n      //       &#39;12:12:15.95&#39; --&gt; 12:12:15.9500000\n      //       Unable to parse &#39;.12&#39;  \n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.Class#5\">      Dim values() As String = { &quot;12&quot;, &quot;31.&quot;, &quot;5.8:32:16&quot;, &quot;12:12:15.95&quot;, &quot;.12&quot;}\n      For Each value As String In values\n         Try\n            Dim ts As TimeSpan = TimeSpan.Parse(value)\n            Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, value, ts)\n         Catch e As FormatException\n            Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;&quot;, value)\n         Catch e As OverflowException\n            Console.WriteLine(&quot;&#39;{0}&#39; is outside the range of a TimeSpan.&quot;, value)\n         End Try   \n      Next\n      &#39; The example displays the following output:\n      &#39;       &#39;12&#39; --&gt; 12.00:00:00\n      &#39;       Unable to parse &#39;31.&#39;\n      &#39;       &#39;5.8:32:16&#39; --&gt; 5.08:32:16\n      &#39;       &#39;12:12:15.95&#39; --&gt; 12:12:15.9500000\n      &#39;       Unable to parse &#39;.12&#39;  \n</code></pre><p> In addition, you can define the precise format of the input string to be parsed and converted to a TimeSpan value by calling the <a class=\"xref\" href=\"system.timespan#System_TimeSpan_ParseExact_\" data-linktype=\"relative-path\">ParseExact</a> or <a class=\"xref\" href=\"system.timespan#System_TimeSpan_TryParseExact_\" data-linktype=\"relative-path\">TryParseExact</a> method.  </p>\n</li>\n</ul>\n<h2 id=\"performing-operations-on-timespan-values\">Performing Operations on TimeSpan Values</h2>\n<p> You can add and subtract time durations either by using the <a class=\"xref\" href=\"system.timespan#System_TimeSpan_op_Addition_\" data-linktype=\"relative-path\">op_Addition</a> and <a class=\"xref\" href=\"system.timespan#System_TimeSpan_op_Subtraction_\" data-linktype=\"relative-path\">op_Subtraction</a> operators, or by calling the <a class=\"xref\" href=\"system.timespan#System_TimeSpan_Add_\" data-linktype=\"relative-path\">Add</a> and <a class=\"xref\" href=\"system.timespan#System_TimeSpan_Subtract_\" data-linktype=\"relative-path\">Subtract</a> methods. You can also compare two time durations by calling the <a class=\"xref\" href=\"system.timespan#System_TimeSpan_Compare_\" data-linktype=\"relative-path\">Compare</a>, <a class=\"xref\" href=\"system.timespan#System_TimeSpan_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a>, and <a class=\"xref\" href=\"system.timespan#System_TimeSpan_Equals_\" data-linktype=\"relative-path\">Equals</a> methods. The TimeSpan structure also includes the <a class=\"xref\" href=\"system.timespan#System_TimeSpan_Duration_\" data-linktype=\"relative-path\">Duration</a> and <a class=\"xref\" href=\"system.timespan#System_TimeSpan_Negate_\" data-linktype=\"relative-path\">Negate</a> methods, which convert time intervals to positive and negative values,  </p>\n<p> The range of TimeSpan values is <a class=\"xref\" href=\"system.timespan#System_TimeSpan_MinValue\" data-linktype=\"relative-path\">MinValue</a> to <a class=\"xref\" href=\"system.timespan#System_TimeSpan_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.  </p>\n<h2 id=\"formatting-a-timespan-value\">Formatting a TimeSpan Value</h2>\n<p> A TimeSpan value can be represented as [<em>-</em>]<em>d</em>.<em>hh</em>:<em>mm</em>:<em>ss</em>.<em>ff</em>, where the optional minus sign indicates a negative time interval, the <em>d</em> component is days, <em>hh</em> is hours as measured on a 24-hour clock, <em>mm</em> is minutes, <em>ss</em> is seconds, and <em>ff</em> is fractions of a second. That is, a time interval consists of a positive or negative number of days without a time of day, or a number of days with a time of day, or only a time of day.  </p>\n<p> Beginning with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v40-long-md.md&quot; -->.NET Framework 4<!--END INCLUDE -->, the TimeSpan structure supports culture-sensitive formatting through the overloads of its <a class=\"xref\" href=\"system.timespan#System_TimeSpan_ToString_\" data-linktype=\"relative-path\">ToString</a> method, which converts a TimeSpan value to its string representation. The default <a class=\"xref\" href=\"system.timespan#System_TimeSpan_ToString\" data-linktype=\"relative-path\">System.TimeSpan.ToString()</a> method returns a time interval by using an invariant format that is identical to its return value in previous versions of the .NET Framework. The <a class=\"xref\" href=\"system.timespan#System_TimeSpan_ToString_System_String_\" data-linktype=\"relative-path\">System.TimeSpan.ToString(String)</a> overload lets you specify a format string that defines the string representation of the time interval. The <a class=\"xref\" href=\"system.timespan#System_TimeSpan_ToString_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.TimeSpan.ToString(String,IFormatProvider)</a> overload lets you specify a format string and the culture whose formatting conventions are used to create the string representation of the time interval. TimeSpan supports both standard and custom format strings. (For more information, see <a href=\"../Topic/Standard%20TimeSpan%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard TimeSpan Format Strings</a> and <a href=\"../Topic/Custom%20TimeSpan%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom TimeSpan Format Strings</a>.) However, only standard format strings are culture-sensitive.  </p>\n<h2 id=\"restoring-legacy-timespan-formatting\">Restoring Legacy TimeSpan Formatting</h2>\n<p> In some cases, code that successfully formats TimeSpan values in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-short-md.md&quot; -->.NET Framework 3.5<!--END INCLUDE --> and earlier versions fails in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v40-short-md.md&quot; -->.NET Framework 4<!--END INCLUDE -->. This is most common in code that calls a <a href=\"../Topic/%3CTimeSpan_LegacyFormatMode%3E%20Element.md\" data-linktype=\"relative-path\"><timespan_legacyformatmode> element</timespan_legacyformatmode></a> method to format a TimeSpan value with a format string. The following example successfully formats a TimeSpan value in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-short-md.md&quot; -->.NET Framework 3.5<!--END INCLUDE --> and earlier versions, but throws an exception in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v40-short-md.md&quot; -->.NET Framework 4<!--END INCLUDE --> and later versions. Note that it attempts to format a TimeSpan value by using an unsupported format specifier, which is ignored in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-short-md.md&quot; -->.NET Framework 3.5<!--END INCLUDE --> and earlier versions.  </p>\n<pre><code class=\"lang-vb\" name=\"System.TimeSpan.Class.Legacy#1\">      Dim interval As New TimeSpan(12, 30, 45)\n      Dim output As String\n      Try\n         output = String.Format(&quot;{0:r}&quot;, interval)\n      Catch e As FormatException\n         output = &quot;Invalid Format&quot;\n      End Try\n      Console.WriteLine(output)\n      &#39; Output from .NET Framework 3.5 and earlier versions:\n      &#39;       12:30:45\n      &#39; Output from .NET Framework 4:\n      &#39;       Invalid Format\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.Class.Legacy#1\">      TimeSpan interval = new TimeSpan(12, 30, 45);\n      string output;\n      try {\n         output = String.Format(&quot;{0:r}&quot;, interval);\n      }\n      catch (FormatException) {\n         output = &quot;Invalid Format&quot;;\n      }\n      Console.WriteLine(output);\n      // Output from .NET Framework 3.5 and earlier versions:\n      //       12:30:45\n      // Output from .NET Framework 4:\n      //       Invalid Format\n</code></pre><p> If you cannot modify the code, you can restore the legacy formatting of TimeSpan values in one of the following ways:  </p>\n<ul>\n<li><p>By creating a configuration file that contains the <a href=\"../Topic/%3CTimeSpan_LegacyFormatMode%3E%20Element.md\" data-linktype=\"relative-path\"><timespan_legacyformatmode> element</timespan_legacyformatmode></a>. Setting this element&#39;s <code>enabled</code> attribute to <code>true</code> restores legacy TimeSpan formatting on a per-application basis.  </p>\n</li>\n<li><p>By setting the &quot;NetFx40_TimeSpanLegacyFormatMode&quot; compatibility switch when you create an application domain. This enables legacy TimeSpan formatting on a per-application-domain basis. The following example creates an application domain that uses legacy TimeSpan formatting.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeSpan.Class.AppDomain#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      AppDomainSetup appSetup = new AppDomainSetup();\n      appSetup.SetCompatibilitySwitches( new string[] { &quot;NetFx40_TimeSpanLegacyFormatMode&quot; } );\n      AppDomain legacyDomain = AppDomain.CreateDomain(&quot;legacyDomain&quot;, \n                                                      null, appSetup);\n      legacyDomain.ExecuteAssembly(&quot;ShowTimeSpan.exe&quot;);\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.Class.AppDomain#1\">Module Example\n   Public Sub Main()\n      Dim appSetup As New AppDomainSetup()\n      appSetup.SetCompatibilitySwitches( { &quot;NetFx40_TimeSpanLegacyFormatMode&quot; } )\n      Dim legacyDomain As AppDomain = AppDomain.CreateDomain(&quot;legacyDomain&quot;, \n                                                             Nothing, appSetup)\n      legacyDomain.ExecuteAssembly(&quot;ShowTimeSpan.exe&quot;)\n   End Sub\nEnd Module\n</code></pre><p> When the following code executes in the new application domain, it reverts to legacy TimeSpan formatting behavior.  </p>\n<pre><code class=\"lang-vb\" name=\"System.TimeSpan.Class.AppDomain#2\">Module Example\n   Public Sub Main()\n      Dim interval As TimeSpan = Date.Now - Date.Now.Date\n      Dim msg As String = String.Format(&quot;Elapsed Time Today: {0:d} hours.&quot;,\n                                         interval)\n      Console.WriteLine(msg)\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;       Elapsed Time Today: 01:40:52.2524662 hours.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.Class.AppDomain#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      TimeSpan interval = DateTime.Now - DateTime.Now.Date;\n      string msg = String.Format(&quot;Elapsed Time Today: {0:d} hours.&quot;,\n                                 interval);\n      Console.WriteLine(msg);\n   }\n}\n// The example displays the following output:\n//       Elapsed Time Today: 01:40:52.2524662 hours.\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan__ctor_System_Int64_\" data-linktype=\"self-bookmark\">TimeSpan(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> structure to the specified number of ticks.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan__ctor_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">TimeSpan(Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> structure to a specified number of hours, minutes, and seconds.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan__ctor_System_Int32_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">TimeSpan(Int32,Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> structure to a specified number of days, hours, minutes, and seconds.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan__ctor_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">TimeSpan(Int32,Int32,Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> structure to a specified number of days, hours, minutes, seconds, and milliseconds.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_MaxValue\" data-linktype=\"self-bookmark\">MaxValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the maximum <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value. This field is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_MinValue\" data-linktype=\"self-bookmark\">MinValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the minimum <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value. This field is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_TicksPerDay\" data-linktype=\"self-bookmark\">TicksPerDay</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the number of ticks in 1 day. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_TicksPerHour\" data-linktype=\"self-bookmark\">TicksPerHour</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the number of ticks in 1 hour. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_TicksPerMillisecond\" data-linktype=\"self-bookmark\">TicksPerMillisecond</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the number of ticks in 1 millisecond. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_TicksPerMinute\" data-linktype=\"self-bookmark\">TicksPerMinute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the number of ticks in 1 minute. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_TicksPerSecond\" data-linktype=\"self-bookmark\">TicksPerSecond</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the number of ticks in 1 second.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_Zero\" data-linktype=\"self-bookmark\">Zero</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the zero <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value. This field is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_Days\" data-linktype=\"self-bookmark\">Days</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the days component of the time interval represented by the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> structure.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_Hours\" data-linktype=\"self-bookmark\">Hours</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the hours component of the time interval represented by the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> structure.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_Milliseconds\" data-linktype=\"self-bookmark\">Milliseconds</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the milliseconds component of the time interval represented by the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> structure.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_Minutes\" data-linktype=\"self-bookmark\">Minutes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the minutes component of the time interval represented by the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> structure.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_Seconds\" data-linktype=\"self-bookmark\">Seconds</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the seconds component of the time interval represented by the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> structure.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_Ticks\" data-linktype=\"self-bookmark\">Ticks</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of ticks that represent the value of the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> structure.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_TotalDays\" data-linktype=\"self-bookmark\">TotalDays</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> structure expressed in whole and fractional days.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_TotalHours\" data-linktype=\"self-bookmark\">TotalHours</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> structure expressed in whole and fractional hours.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_TotalMilliseconds\" data-linktype=\"self-bookmark\">TotalMilliseconds</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> structure expressed in whole and fractional milliseconds.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_TotalMinutes\" data-linktype=\"self-bookmark\">TotalMinutes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> structure expressed in whole and fractional minutes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_TotalSeconds\" data-linktype=\"self-bookmark\">TotalSeconds</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> structure expressed in whole and fractional seconds.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_Add_System_TimeSpan_\" data-linktype=\"self-bookmark\">Add(TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a new <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object whose value is the sum of the specified <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object and this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_Compare_System_TimeSpan_System_TimeSpan_\" data-linktype=\"self-bookmark\">Compare(TimeSpan,TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares two <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> values and returns an integer that indicates whether the first value is shorter than, equal to, or longer than the second value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_CompareTo_System_Object_\" data-linktype=\"self-bookmark\">CompareTo(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares this instance to a specified object and returns an integer that indicates whether this instance is shorter than, equal to, or longer than the specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_CompareTo_System_TimeSpan_\" data-linktype=\"self-bookmark\">CompareTo(TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares this instance to a specified <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object and returns an integer that indicates whether this instance is shorter than, equal to, or longer than the <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_Duration\" data-linktype=\"self-bookmark\">Duration()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a new <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object whose value is the absolute value of the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value indicating whether this instance is equal to a specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_Equals_System_TimeSpan_\" data-linktype=\"self-bookmark\">Equals(TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value indicating whether this instance is equal to a specified <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_Equals_System_TimeSpan_System_TimeSpan_\" data-linktype=\"self-bookmark\">Equals(TimeSpan,TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether two specified instances of <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> are equal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_FromDays_System_Double_\" data-linktype=\"self-bookmark\">FromDays(Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that represents a specified number of days, where the specification is accurate to the nearest millisecond.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_FromHours_System_Double_\" data-linktype=\"self-bookmark\">FromHours(Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that represents a specified number of hours, where the specification is accurate to the nearest millisecond.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_FromMilliseconds_System_Double_\" data-linktype=\"self-bookmark\">FromMilliseconds(Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that represents a specified number of milliseconds.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_FromMinutes_System_Double_\" data-linktype=\"self-bookmark\">FromMinutes(Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that represents a specified number of minutes, where the specification is accurate to the nearest millisecond.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_FromSeconds_System_Double_\" data-linktype=\"self-bookmark\">FromSeconds(Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that represents a specified number of seconds, where the specification is accurate to the nearest millisecond.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_FromTicks_System_Int64_\" data-linktype=\"self-bookmark\">FromTicks(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that represents a specified time, where the specification is in units of ticks.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a hash code for this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_Negate\" data-linktype=\"self-bookmark\">Negate()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a new <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object whose value is the negated value of this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_Parse_System_String_\" data-linktype=\"self-bookmark\">Parse(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a time interval to its <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> equivalent.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_Parse_System_String_System_IFormatProvider_\" data-linktype=\"self-bookmark\">Parse(String,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a time interval to its <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> equivalent by using the specified culture-specific format information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_ParseExact_System_String_System_String_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ParseExact(String,String,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a time interval to its <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> equivalent by using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_ParseExact_System_String_System_String___System_IFormatProvider_\" data-linktype=\"self-bookmark\">ParseExact(String,String[],IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a time interval to its <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> equivalent by using the specified array of format strings and culture-specific format information. The format of the string representation must match one of the specified formats exactly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_ParseExact_System_String_System_String_System_IFormatProvider_System_Globalization_TimeSpanStyles_\" data-linktype=\"self-bookmark\">ParseExact(String,String,IFormatProvider,TimeSpanStyles)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a time interval to its <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> equivalent by using the specified format, culture-specific format information, and styles. The format of the string representation must match the specified format exactly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_ParseExact_System_String_System_String___System_IFormatProvider_System_Globalization_TimeSpanStyles_\" data-linktype=\"self-bookmark\">ParseExact(String,String[],IFormatProvider,TimeSpanStyles)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a time interval to its <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> equivalent by using the specified formats, culture-specific format information, and styles. The format of the string representation must match one of the specified formats exactly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_Subtract_System_TimeSpan_\" data-linktype=\"self-bookmark\">Subtract(TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a new <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object whose value is the difference between the specified <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object and this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object to its equivalent string representation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_ToString_System_String_\" data-linktype=\"self-bookmark\">ToString(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object to its equivalent string representation by using the specified format.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_ToString_System_String_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToString(String,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object to its equivalent string representation by using the specified format and culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_TryParse_System_String_System_TimeSpan__\" data-linktype=\"self-bookmark\">TryParse(String,TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a time interval to its <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> equivalent and returns a value that indicates whether the conversion succeeded.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_TryParse_System_String_System_IFormatProvider_System_TimeSpan__\" data-linktype=\"self-bookmark\">TryParse(String,IFormatProvider,TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a time interval to its <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> equivalent by using the specified culture-specific formatting information, and returns a value that indicates whether the conversion succeeded.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_TryParseExact_System_String_System_String_System_IFormatProvider_System_TimeSpan__\" data-linktype=\"self-bookmark\">TryParseExact(String,String,IFormatProvider,TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a time interval to its <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> equivalent by using the specified format and culture-specific format information, and returns a value that indicates whether the conversion succeeded. The format of the string representation must match the specified format exactly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_TryParseExact_System_String_System_String___System_IFormatProvider_System_TimeSpan__\" data-linktype=\"self-bookmark\">TryParseExact(String,String[],IFormatProvider,TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified string representation of a time interval to its <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> equivalent by using the specified formats and culture-specific format information, and returns a value that indicates whether the conversion succeeded. The format of the string representation must match one of the specified formats exactly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_TryParseExact_System_String_System_String_System_IFormatProvider_System_Globalization_TimeSpanStyles_System_TimeSpan__\" data-linktype=\"self-bookmark\">TryParseExact(String,String,IFormatProvider,TimeSpanStyles,TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a time interval to its <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> equivalent by using the specified format, culture-specific format information, and styles, and returns a value that indicates whether the conversion succeeded. The format of the string representation must match the specified format exactly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_TryParseExact_System_String_System_String___System_IFormatProvider_System_Globalization_TimeSpanStyles_System_TimeSpan__\" data-linktype=\"self-bookmark\">TryParseExact(String,String[],IFormatProvider,TimeSpanStyles,TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified string representation of a time interval to its <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> equivalent by using the specified formats, culture-specific format information, and styles, and returns a value that indicates whether the conversion succeeded. The format of the string representation must match one of the specified formats exactly.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Operators\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_op_Addition_System_TimeSpan_System_TimeSpan_\" data-linktype=\"self-bookmark\">op_Addition(TimeSpan,TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds two specified <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> instances.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_op_Equality_System_TimeSpan_System_TimeSpan_\" data-linktype=\"self-bookmark\">op_Equality(TimeSpan,TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether two <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> instances are equal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_op_GreaterThan_System_TimeSpan_System_TimeSpan_\" data-linktype=\"self-bookmark\">op_GreaterThan(TimeSpan,TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether a specified <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> is greater than another specified <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_op_GreaterThanOrEqual_System_TimeSpan_System_TimeSpan_\" data-linktype=\"self-bookmark\">op_GreaterThanOrEqual(TimeSpan,TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether a specified <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> is greater than or equal to another specified <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_op_Inequality_System_TimeSpan_System_TimeSpan_\" data-linktype=\"self-bookmark\">op_Inequality(TimeSpan,TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether two <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> instances are not equal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_op_LessThan_System_TimeSpan_System_TimeSpan_\" data-linktype=\"self-bookmark\">op_LessThan(TimeSpan,TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether a specified <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> is less than another specified <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_op_LessThanOrEqual_System_TimeSpan_System_TimeSpan_\" data-linktype=\"self-bookmark\">op_LessThanOrEqual(TimeSpan,TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether a specified <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> is less than or equal to another specified <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_op_Subtraction_System_TimeSpan_System_TimeSpan_\" data-linktype=\"self-bookmark\">op_Subtraction(TimeSpan,TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Subtracts a specified <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> from another specified <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_op_UnaryNegation_System_TimeSpan_\" data-linktype=\"self-bookmark\">op_UnaryNegation(TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> whose value is the negated value of the specified instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TimeSpan_op_UnaryPlus_System_TimeSpan_\" data-linktype=\"self-bookmark\">op_UnaryPlus(TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the specified instance of <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan__ctor_System_Int64_\">\r\n    \r\n            <a id=\"System_TimeSpan__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TimeSpan(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> structure to the specified number of ticks.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TimeSpan (long ticks);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ticks</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A time period expressed in 100-nanosecond units.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A single tick represents one hundred nanoseconds or one ten-millionth of a second. There are 10,000 ticks in a millisecond.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates several <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> objects using the constructor overload that initializes a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> to a specified number of ticks.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeSpan.Ctor#1\">// Example of the TimeSpan( long ) constructor.\nusing System;\n\nclass TimeSpanCtorLDemo\n{\n    // Create a TimeSpan object and display its value.\n    static void CreateTimeSpan( long ticks )\n    {\n        TimeSpan elapsedTime = new TimeSpan( ticks );\n\n        // Format the constructor for display.\n        string ctor = String.Format( &quot;TimeSpan( {0} )&quot;, ticks );\n\n        // Pad the end of a TimeSpan string with spaces if\n        // it does not contain milliseconds.\n        string  elapsedStr = elapsedTime.ToString( );\n        int     pointIndex = elapsedStr.IndexOf( &#39;:&#39; );\n\n        pointIndex = elapsedStr.IndexOf( &#39;.&#39;, pointIndex );\n        if( pointIndex &lt; 0 ) elapsedStr += &quot;        &quot;;\n\n        // Display the constructor and its value.\n        Console.WriteLine( &quot;{0,-33}{1,24}&quot;, ctor, elapsedStr );\n    }\n    \n    static void Main( )\n    {\n        Console.WriteLine( \n            &quot;This example of the TimeSpan( long ) constructor &quot; +\n            &quot;<br>generates the following output.<br>&quot; );\n        Console.WriteLine( &quot;{0,-33}{1,16}&quot;, &quot;Constructor&quot;, &quot;Value&quot; );\n        Console.WriteLine( &quot;{0,-33}{1,16}&quot;, &quot;-----------&quot;, &quot;-----&quot; );\n\n        CreateTimeSpan( 1 );                \n        CreateTimeSpan( 999999 );                \n        CreateTimeSpan( -1000000000000 );        \n        CreateTimeSpan( 18012202000000 );        \n        CreateTimeSpan( 999999999999999999 );    \n        CreateTimeSpan( 1000000000000000000 );   \n    } \n} \n\n/*\nThis example of the TimeSpan( long ) constructor\ngenerates the following output.\n\nConstructor                                 Value\n-----------                                 -----\nTimeSpan( 1 )                            00:00:00.0000001\nTimeSpan( 999999 )                       00:00:00.0999999\nTimeSpan( -1000000000000 )            -1.03:46:40\nTimeSpan( 18012202000000 )            20.20:20:20.2000000\nTimeSpan( 999999999999999999 )   1157407.09:46:39.9999999\nTimeSpan( 1000000000000000000 )  1157407.09:46:40\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.Ctor#1\">&#39; Example of the TimeSpan( Long ) constructor.\nImports System\nImports Microsoft.VisualBasic\n\nModule TimeSpanCtorLDemo\n\n    &#39; Create a TimeSpan object and display its value.\n    Sub CreateTimeSpan( ticks As Long )\n\n        Dim elapsedTime As New TimeSpan( ticks )\n\n        &#39; Format the constructor for display.\n        Dim ctor AS String = _\n            String.Format( &quot;TimeSpan( {0} )&quot;, ticks )\n\n        &#39; Pad the end of a TimeSpan string with spaces if\n        &#39; it does not contain milliseconds.\n        Dim elapsedStr As String = elapsedTime.ToString( )\n        Dim pointIndex  As Integer = elapsedStr.IndexOf( &quot;:&quot;c )\n\n        pointIndex = elapsedStr.IndexOf( &quot;.&quot;c, pointIndex )\n        If pointIndex &lt; 0 Then elapsedStr &amp;= &quot;        &quot;\n\n        &#39; Display the constructor and its value.\n        Console.WriteLine( &quot;{0,-33}{1,24}&quot;, ctor, elapsedStr )\n    End Sub\n    \n    Sub Main( )\n\n        Console.WriteLine( _\n            &quot;This example of the TimeSpan( Long ) constructor &quot; &amp; _\n            vbCrLf &amp; &quot;generates the following output.&quot; &amp; vbCrLf )\n        Console.WriteLine( &quot;{0,-33}{1,16}&quot;, &quot;Constructor&quot;, &quot;Value&quot; )\n        Console.WriteLine( &quot;{0,-33}{1,16}&quot;, &quot;-----------&quot;, &quot;-----&quot; )\n\n        CreateTimeSpan( 1 )                \n        CreateTimeSpan( 999999 )                \n        CreateTimeSpan( -1000000000000 )        \n        CreateTimeSpan( 18012202000000 )        \n        CreateTimeSpan( 999999999999999999 )    \n        CreateTimeSpan( 1000000000000000000 )   \n\n    End Sub \nEnd Module \n\n&#39; This example of the TimeSpan( Long ) constructor\n&#39; generates the following output.\n&#39; \n&#39; Constructor                                 Value\n&#39; -----------                                 -----\n&#39; TimeSpan( 1 )                            00:00:00.0000001\n&#39; TimeSpan( 999999 )                       00:00:00.0999999\n&#39; TimeSpan( -1000000000000 )            -1.03:46:40\n&#39; TimeSpan( 18012202000000 )            20.20:20:20.2000000\n&#39; TimeSpan( 999999999999999999 )   1157407.09:46:39.9999999\n&#39; TimeSpan( 1000000000000000000 )  1157407.09:46:40\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.TimeSpan.Ctor#1\">// Example of the TimeSpan( __int64 ) constructor.\nusing namespace System;\n\n// Create a TimeSpan object and display its value.\nvoid CreateTimeSpan( __int64 ticks )\n{\n   TimeSpan elapsedTime = TimeSpan(ticks);\n   \n   // Format the constructor for display.\n   String^ ctor = String::Format( &quot;TimeSpan( {0} )&quot;, ticks );\n   \n   // Pad the end of a TimeSpan string with spaces if\n   // it does not contain milliseconds.\n   String^ elapsedStr = elapsedTime.ToString();\n   int pointIndex = elapsedStr-&gt;IndexOf( &#39;:&#39; );\n   pointIndex = elapsedStr-&gt;IndexOf( &#39;.&#39;, pointIndex );\n   if ( pointIndex &lt; 0 )\n      elapsedStr = String::Concat( elapsedStr, &quot;        &quot; );\n\n   \n   // Display the constructor and its value.\n   Console::WriteLine( &quot;{0,-33}{1,24}&quot;, ctor, elapsedStr );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the TimeSpan( __int64 ) constructor &quot;\n   &quot;<br>generates the following output.<br>&quot; );\n   Console::WriteLine( &quot;{0,-33}{1,16}&quot;, &quot;Constructor&quot;, &quot;Value&quot; );\n   Console::WriteLine( &quot;{0,-33}{1,16}&quot;, &quot;-----------&quot;, &quot;-----&quot; );\n   CreateTimeSpan( 1 );\n   CreateTimeSpan( 999999 );\n   CreateTimeSpan(  -1000000000000 );\n   CreateTimeSpan( 18012202000000 );\n   CreateTimeSpan( 999999999999999999 );\n   CreateTimeSpan( 1000000000000000000 );\n}\n\n/*\nThis example of the TimeSpan( __int64 ) constructor\ngenerates the following output.\n\nConstructor                                 Value\n-----------                                 -----\nTimeSpan( 1 )                            00:00:00.0000001\nTimeSpan( 999999 )                       00:00:00.0999999\nTimeSpan( -1000000000000 )            -1.03:46:40\nTimeSpan( 18012202000000 )            20.20:20:20.2000000\nTimeSpan( 999999999999999999 )   1157407.09:46:39.9999999\nTimeSpan( 1000000000000000000 )  1157407.09:46:40\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan__ctor_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_TimeSpan__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TimeSpan(Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> structure to a specified number of hours, minutes, and seconds.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TimeSpan (int hours, int minutes, int seconds);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>hours</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Number of hours.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>minutes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Number of minutes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>seconds</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Number of seconds.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The parameters specify a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value less than <a class=\"xref\" href=\"system.timespan#System_TimeSpan_MinValue\" data-linktype=\"relative-path\">MinValue</a> or greater than <a class=\"xref\" href=\"system.timespan#System_TimeSpan_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The specified <code>hours</code>, <code>minutes</code>, and <code>seconds</code> are converted to ticks, and that value initializes this instance.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates several <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> objects using the constructor overload that initializes a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> to a specified number of hours, minutes, and seconds.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.TimeSpan.Ctor#2\">// Example of the TimeSpan( int, int, int ) constructor.\nusing namespace System;\n\n// Create a TimeSpan object and display its value.\nstatic void CreateTimeSpan( int hours, int minutes, int seconds )\n{\n   TimeSpan elapsedTime = TimeSpan(hours,minutes,seconds);\n   \n   // Format the constructor for display.\n   String^ ctor = String::Format( &quot;TimeSpan( {0}, {1}, {2} )&quot;, hours, minutes, seconds );\n   \n   // Display the constructor and its value.\n   Console::WriteLine( &quot;{0,-37}{1,16}&quot;, ctor, elapsedTime.ToString() );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the TimeSpan( int, int, int ) &quot;\n   &quot;<br>constructor generates the following output.<br>&quot; );\n   Console::WriteLine( &quot;{0,-37}{1,16}&quot;, &quot;Constructor&quot;, &quot;Value&quot; );\n   Console::WriteLine( &quot;{0,-37}{1,16}&quot;, &quot;-----------&quot;, &quot;-----&quot; );\n   CreateTimeSpan( 10, 20, 30 );\n   CreateTimeSpan(  -10, 20, 30 );\n   CreateTimeSpan( 0, 0, 37230 );\n   CreateTimeSpan( 1000, 2000, 3000 );\n   CreateTimeSpan( 1000, -2000, -3000 );\n   CreateTimeSpan( 999999, 999999, 999999 );\n}\n\n/*\nThis example of the TimeSpan( int, int, int )\nconstructor generates the following output.\n\nConstructor                                     Value\n-----------                                     -----\nTimeSpan( 10, 20, 30 )                       10:20:30\nTimeSpan( -10, 20, 30 )                     -09:39:30\nTimeSpan( 0, 0, 37230 )                      10:20:30\nTimeSpan( 1000, 2000, 3000 )              43.02:10:00\nTimeSpan( 1000, -2000, -3000 )            40.05:50:00\nTimeSpan( 999999, 999999, 999999 )     42372.15:25:39\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.Ctor#2\">&#39; Example of the TimeSpan( Integer, Integer, Integer ) constructor.\nImports System\nImports Microsoft.VisualBasic\n\nModule TimeSpanCtorIIIDemo\n\n    &#39; Create a TimeSpan object and display its value.\n    Sub CreateTimeSpan( hours As Integer, minutes As Integer, _\n        seconds As Integer )\n\n        Dim elapsedTime As New TimeSpan( hours, minutes, seconds )\n\n        &#39; Format the constructor for display.\n        Dim ctor AS String = _\n            String.Format( &quot;TimeSpan( {0}, {1}, {2} )&quot;, _\n                hours, minutes, seconds )\n\n        &#39; Display the constructor and its value.\n        Console.WriteLine( &quot;{0,-37}{1,16}&quot;, _\n            ctor, elapsedTime.ToString( ) )\n    End Sub\n    \n    Sub Main()\n\n        Console.WriteLine( _\n            &quot;This example of the &quot; &amp; _\n            &quot;TimeSpan( Integer, Integer, Integer ) &quot; &amp; vbCrLf &amp; _\n            &quot;constructor generates the following output.&quot; &amp; vbCrLf )\n        Console.WriteLine( &quot;{0,-37}{1,16}&quot;, &quot;Constructor&quot;, &quot;Value&quot; )\n        Console.WriteLine( &quot;{0,-37}{1,16}&quot;, &quot;-----------&quot;, &quot;-----&quot; )\n\n        CreateTimeSpan( 10, 20, 30 )\n        CreateTimeSpan( -10, 20, 30 )\n        CreateTimeSpan( 0, 0, 37230 )\n        CreateTimeSpan( 1000, 2000, 3000 )\n        CreateTimeSpan( 1000, -2000, -3000 )\n        CreateTimeSpan( 999999, 999999, 999999 )\n    End Sub \nEnd Module \n\n&#39; This example of the TimeSpan( Integer, Integer, Integer )\n&#39; constructor generates the following output.\n&#39; \n&#39; Constructor                                     Value\n&#39; -----------                                     -----\n&#39; TimeSpan( 10, 20, 30 )                       10:20:30\n&#39; TimeSpan( -10, 20, 30 )                     -09:39:30\n&#39; TimeSpan( 0, 0, 37230 )                      10:20:30\n&#39; TimeSpan( 1000, 2000, 3000 )              43.02:10:00\n&#39; TimeSpan( 1000, -2000, -3000 )            40.05:50:00\n&#39; TimeSpan( 999999, 999999, 999999 )     42372.15:25:39\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.Ctor#2\">// Example of the TimeSpan( int, int, int ) constructor.\nusing System;\n\nclass TimeSpanCtorIIIDemo\n{\n    // Create a TimeSpan object and display its value.\n    static void CreateTimeSpan( int hours, int minutes, \n        int seconds )\n    {\n        TimeSpan elapsedTime = \n            new TimeSpan( hours, minutes, seconds );\n\n        // Format the constructor for display.\n        string ctor = String.Format( &quot;TimeSpan( {0}, {1}, {2} )&quot;, \n            hours, minutes, seconds);\n\n        // Display the constructor and its value.\n        Console.WriteLine( &quot;{0,-37}{1,16}&quot;, \n            ctor, elapsedTime.ToString( ) );\n    }\n    \n    static void Main( )\n    {\n        Console.WriteLine(\n            &quot;This example of the TimeSpan( int, int, int ) &quot; +\n            &quot;<br>constructor generates the following output.<br>&quot; );\n        Console.WriteLine( &quot;{0,-37}{1,16}&quot;, &quot;Constructor&quot;, &quot;Value&quot; );\n        Console.WriteLine( &quot;{0,-37}{1,16}&quot;, &quot;-----------&quot;, &quot;-----&quot; );\n\n        CreateTimeSpan( 10, 20, 30 );\n        CreateTimeSpan( -10, 20, 30 );\n        CreateTimeSpan( 0, 0, 37230 );\n        CreateTimeSpan( 1000, 2000, 3000 );\n        CreateTimeSpan( 1000, -2000, -3000 );\n        CreateTimeSpan( 999999, 999999, 999999 );\n    } \n} \n\n/*\nThis example of the TimeSpan( int, int, int )\nconstructor generates the following output.\n\nConstructor                                     Value\n-----------                                     -----\nTimeSpan( 10, 20, 30 )                       10:20:30\nTimeSpan( -10, 20, 30 )                     -09:39:30\nTimeSpan( 0, 0, 37230 )                      10:20:30\nTimeSpan( 1000, 2000, 3000 )              43.02:10:00\nTimeSpan( 1000, -2000, -3000 )            40.05:50:00\nTimeSpan( 999999, 999999, 999999 )     42372.15:25:39\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan__ctor_System_Int32_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_TimeSpan__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TimeSpan(Int32,Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> structure to a specified number of days, hours, minutes, and seconds.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TimeSpan (int days, int hours, int minutes, int seconds);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>days</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Number of days.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hours</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Number of hours.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>minutes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Number of minutes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>seconds</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Number of seconds.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The parameters specify a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value less than <a class=\"xref\" href=\"system.timespan#System_TimeSpan_MinValue\" data-linktype=\"relative-path\">MinValue</a> or greater than <a class=\"xref\" href=\"system.timespan#System_TimeSpan_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The specified <code>days</code>, <code>hours</code>, <code>minutes</code>, and <code>seconds</code> are converted to ticks, and that value initializes this instance.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates several <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> objects using the constructor overload that initializes a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> to a specified number of days, hours, minutes, and seconds.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.TimeSpan.Ctor#3\">using namespace System;\n\n// Create a TimeSpan object and display its value.\nvoid CreateTimeSpan( int days, int hours, int minutes, int seconds )\n{\n   TimeSpan elapsedTime = TimeSpan(days,hours,minutes,seconds);\n   \n   // Format the constructor for display.\n   array&lt;Object^&gt;^boxedParams = gcnew array&lt;Object^&gt;(4);\n   boxedParams[ 0 ] = days;\n   boxedParams[ 1 ] = hours;\n   boxedParams[ 2 ] = minutes;\n   boxedParams[ 3 ] = seconds;\n   String^ ctor = String::Format( &quot;TimeSpan( {0}, {1}, {2}, {3} )&quot;, boxedParams );\n   \n   // Display the constructor and its value.\n   Console::WriteLine( &quot;{0,-44}{1,16}&quot;, ctor, elapsedTime.ToString() );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;{0,-44}{1,16}&quot;, &quot;Constructor&quot;, &quot;Value&quot; );\n   Console::WriteLine( &quot;{0,-44}{1,16}&quot;, &quot;-----------&quot;, &quot;-----&quot; );\n   CreateTimeSpan( 10, 20, 30, 40 );\n   CreateTimeSpan(  -10, 20, 30, 40 );\n   CreateTimeSpan( 0, 0, 0, 937840 );\n   CreateTimeSpan( 1000, 2000, 3000, 4000 );\n   CreateTimeSpan( 1000, -2000, -3000, -4000 );\n   CreateTimeSpan( 999999, 999999, 999999, 999999 );\n}\n// The example displays the following output:\n//       Constructor                                            Value\n//       -----------                                            -----\n//       TimeSpan( 10, 20, 30, 40 )                       10.20:30:40\n//       TimeSpan( -10, 20, 30, 40 )                      -9.03:29:20\n//       TimeSpan( 0, 0, 0, 937840 )                      10.20:30:40\n//       TimeSpan( 1000, 2000, 3000, 4000 )             1085.11:06:40\n//       TimeSpan( 1000, -2000, -3000, -4000 )           914.12:53:20\n//       TimeSpan( 999999, 999999, 999999, 999999 )  1042371.15:25:39\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.Ctor#3\">Module Example\n    &#39; Create a TimeSpan object and display its value.\n    Sub CreateTimeSpan( days As Integer, hours As Integer, _\n        minutes As Integer, seconds As Integer )\n\n        Dim elapsedTime As New TimeSpan( _\n            days, hours, minutes, seconds )\n\n        &#39; Format the constructor for display.\n        Dim ctor AS String = _\n            String.Format( &quot;TimeSpan( {0}, {1}, {2}, {3} )&quot;, _\n                days, hours, minutes, seconds )\n\n        &#39; Display the constructor and its value.\n        Console.WriteLine( &quot;{0,-44}{1,16}&quot;, _\n            ctor, elapsedTime.ToString( ) )\n    End Sub\n    \n    Sub Main()\n        Console.WriteLine( &quot;{0,-44}{1,16}&quot;, &quot;Constructor&quot;, &quot;Value&quot; )\n        Console.WriteLine( &quot;{0,-44}{1,16}&quot;, &quot;-----------&quot;, &quot;-----&quot; )\n\n        CreateTimeSpan( 10, 20, 30, 40 )\n        CreateTimeSpan( -10, 20, 30, 40 )\n        CreateTimeSpan( 0, 0, 0, 937840 )\n        CreateTimeSpan( 1000, 2000, 3000, 4000 )\n        CreateTimeSpan( 1000, -2000, -3000, -4000 )\n        CreateTimeSpan( 999999, 999999, 999999, 999999 )\n    End Sub \nEnd Module \n&#39; The example generates the following output:\n&#39;       Constructor                                            Value\n&#39;       -----------                                            -----\n&#39;       TimeSpan( 10, 20, 30, 40 )                       10.20:30:40\n&#39;       TimeSpan( -10, 20, 30, 40 )                      -9.03:29:20\n&#39;       TimeSpan( 0, 0, 0, 937840 )                      10.20:30:40\n&#39;       TimeSpan( 1000, 2000, 3000, 4000 )             1085.11:06:40\n&#39;       TimeSpan( 1000, -2000, -3000, -4000 )           914.12:53:20\n&#39;       TimeSpan( 999999, 999999, 999999, 999999 )  1042371.15:25:39\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.Ctor#3\">using System;\n\nclass Example\n{\n    // Create a TimeSpan object and display its value.\n    static void CreateTimeSpan( int days, int hours, \n        int minutes, int seconds )\n    {\n        TimeSpan elapsedTime = \n            new TimeSpan( days, hours, minutes, seconds );\n\n        // Format the constructor for display.\n        string ctor = \n            String.Format( &quot;TimeSpan( {0}, {1}, {2}, {3} )&quot;, \n                days, hours, minutes, seconds);\n\n        // Display the constructor and its value.\n        Console.WriteLine( &quot;{0,-44}{1,16}&quot;, \n            ctor, elapsedTime.ToString( ) );\n    }\n    \n    static void Main( )\n    {\n        Console.WriteLine( &quot;{0,-44}{1,16}&quot;, &quot;Constructor&quot;, &quot;Value&quot; );\n        Console.WriteLine( &quot;{0,-44}{1,16}&quot;, &quot;-----------&quot;, &quot;-----&quot; );\n\n        CreateTimeSpan( 10, 20, 30, 40 );\n        CreateTimeSpan( -10, 20, 30, 40 );\n        CreateTimeSpan( 0, 0, 0, 937840 );\n        CreateTimeSpan( 1000, 2000, 3000, 4000 );\n        CreateTimeSpan( 1000, -2000, -3000, -4000 );\n        CreateTimeSpan( 999999, 999999, 999999, 999999 );\n    } \n} \n// The example displays the following output:\n//       Constructor                                            Value\n//       -----------                                            -----\n//       TimeSpan( 10, 20, 30, 40 )                       10.20:30:40\n//       TimeSpan( -10, 20, 30, 40 )                      -9.03:29:20\n//       TimeSpan( 0, 0, 0, 937840 )                      10.20:30:40\n//       TimeSpan( 1000, 2000, 3000, 4000 )             1085.11:06:40\n//       TimeSpan( 1000, -2000, -3000, -4000 )           914.12:53:20\n//       TimeSpan( 999999, 999999, 999999, 999999 )  1042371.15:25:39\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan__ctor_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_TimeSpan__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TimeSpan(Int32,Int32,Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> structure to a specified number of days, hours, minutes, seconds, and milliseconds.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TimeSpan (int days, int hours, int minutes, int seconds, int milliseconds);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>days</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Number of days.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hours</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Number of hours.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>minutes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Number of minutes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>seconds</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Number of seconds.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>milliseconds</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Number of milliseconds.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The parameters specify a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value less than <a class=\"xref\" href=\"system.timespan#System_TimeSpan_MinValue\" data-linktype=\"relative-path\">MinValue</a> or greater than <a class=\"xref\" href=\"system.timespan#System_TimeSpan_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The specified <code>days</code>, <code>hours</code>, <code>minutes</code>, <code>seconds</code>, and <code>milliseconds</code> are converted to ticks, and that value initializes this instance.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates several <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> objects using the constructor overload that initializes a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> to a specified number of days, hours, minutes, seconds, and milliseconds.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.TimeSpan.Ctor#4\">// Example of the TimeSpan( int, int, int, int, int ) constructor. \nusing namespace System;\n\n// Create a TimeSpan object and display its value.\nvoid CreateTimeSpan( int days, int hours, int minutes, int seconds, int millisec )\n{\n   TimeSpan elapsedTime = TimeSpan(days,hours,minutes,seconds,millisec);\n   \n   // Format the constructor for display.\n   array&lt;Object^&gt;^boxedParams = gcnew array&lt;Object^&gt;(5);\n   boxedParams[ 0 ] = days;\n   boxedParams[ 1 ] = hours;\n   boxedParams[ 2 ] = minutes;\n   boxedParams[ 3 ] = seconds;\n   boxedParams[ 4 ] = millisec;\n   String^ ctor = String::Format( &quot;TimeSpan( {0}, {1}, {2}, {3}, {4} )&quot;, boxedParams );\n   \n   // Display the constructor and its value.\n   Console::WriteLine( &quot;{0,-48}{1,24}&quot;, ctor, elapsedTime.ToString() );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the TimeSpan( int, int, int, int, int ) &quot;\n   &quot;<br>constructor generates the following output.<br>&quot; );\n   Console::WriteLine( &quot;{0,-48}{1,16}&quot;, &quot;Constructor&quot;, &quot;Value&quot; );\n   Console::WriteLine( &quot;{0,-48}{1,16}&quot;, &quot;-----------&quot;, &quot;-----&quot; );\n   CreateTimeSpan( 10, 20, 30, 40, 50 );\n   CreateTimeSpan(  -10, 20, 30, 40, 50 );\n   CreateTimeSpan( 0, 0, 0, 0, 937840050 );\n   CreateTimeSpan( 1111, 2222, 3333, 4444, 5555 );\n   CreateTimeSpan( 1111, -2222, -3333, -4444, -5555 );\n   CreateTimeSpan( 99999, 99999, 99999, 99999, 99999 );\n}\n\n/*\nThis example of the TimeSpan( int, int, int, int, int )\nconstructor generates the following output.\n\nConstructor                                                Value\n-----------                                                -----\nTimeSpan( 10, 20, 30, 40, 50 )                       10.20:30:40.0500000\nTimeSpan( -10, 20, 30, 40, 50 )                      -9.03:29:19.9500000\nTimeSpan( 0, 0, 0, 0, 937840050 )                    10.20:30:40.0500000\nTimeSpan( 1111, 2222, 3333, 4444, 5555 )           1205.22:47:09.5550000\nTimeSpan( 1111, -2222, -3333, -4444, -5555 )       1016.01:12:50.4450000\nTimeSpan( 99999, 99999, 99999, 99999, 99999 )    104236.05:27:18.9990000\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.Ctor#4\">&#39; Example of the \n&#39; TimeSpan( Integer, Integer, Integer, Integer, Integer ) constructor. \nImports System\nImports Microsoft.VisualBasic\n\nModule TimeSpanCtorIIIIIDemo\n\n    &#39; Create a TimeSpan object and display its value.\n    Sub CreateTimeSpan( days As Integer, hours As Integer, _\n        minutes As Integer, seconds As Integer, millisec As Integer )\n\n        Dim elapsedTime As New TimeSpan( _\n            days, hours, minutes, seconds, millisec )\n\n        &#39; Format the constructor for display.\n        Dim ctor As String = _\n            String.Format( &quot;TimeSpan( {0}, {1}, {2}, {3}, {4} )&quot;, _\n                days, hours, minutes, seconds, millisec )\n\n        &#39; Display the constructor and its value.\n        Console.WriteLine( &quot;{0,-48}{1,24}&quot;, _\n            ctor, elapsedTime.ToString( ) )\n    End Sub\n\n    Sub Main( )\n\n        Console.WriteLine( _\n            &quot;This example of the &quot; &amp; vbCrLf &amp; _\n            &quot;TimeSpan( Integer, Integer, &quot; &amp; _\n            &quot;Integer, Integer, Integer ) &quot; &amp; vbCrLf &amp; _\n            &quot;constructor generates the following output.&quot; &amp; vbCrLf )\n        Console.WriteLine( &quot;{0,-48}{1,16}&quot;, &quot;Constructor&quot;, &quot;Value&quot; )\n        Console.WriteLine( &quot;{0,-48}{1,16}&quot;, &quot;-----------&quot;, &quot;-----&quot; )\n\n        CreateTimeSpan( 10, 20, 30, 40, 50 )\n        CreateTimeSpan( -10, 20, 30, 40, 50 )\n        CreateTimeSpan( 0, 0, 0, 0, 937840050 )\n        CreateTimeSpan( 1111, 2222, 3333, 4444, 5555 )\n        CreateTimeSpan( 1111, -2222, -3333, -4444, -5555 )\n        CreateTimeSpan( 99999, 99999, 99999, 99999, 99999 )\n    End Sub \nEnd Module \n\n&#39; This example of the\n&#39; TimeSpan( Integer, Integer, Integer, Integer, Integer )\n&#39; constructor generates the following output.\n&#39; \n&#39; Constructor                                                Value\n&#39; -----------                                                -----\n&#39; TimeSpan( 10, 20, 30, 40, 50 )                       10.20:30:40.0500000\n&#39; TimeSpan( -10, 20, 30, 40, 50 )                      -9.03:29:19.9500000\n&#39; TimeSpan( 0, 0, 0, 0, 937840050 )                    10.20:30:40.0500000\n&#39; TimeSpan( 1111, 2222, 3333, 4444, 5555 )           1205.22:47:09.5550000\n&#39; TimeSpan( 1111, -2222, -3333, -4444, -5555 )       1016.01:12:50.4450000\n&#39; TimeSpan( 99999, 99999, 99999, 99999, 99999 )    104236.05:27:18.9990000\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.Ctor#4\">// Example of the TimeSpan( int, int, int, int, int ) constructor. \nusing System;\n\nclass TimeSpanCtorIIIIIDemo\n{\n    // Create a TimeSpan object and display its value.\n    static void CreateTimeSpan( int days, int hours, \n        int minutes, int seconds, int millisec )\n    {\n        TimeSpan elapsedTime = new TimeSpan( \n            days, hours, minutes, seconds, millisec );\n\n        // Format the constructor for display.\n        string ctor = \n            String.Format( &quot;TimeSpan( {0}, {1}, {2}, {3}, {4} )&quot;, \n                days, hours, minutes, seconds, millisec);\n\n        // Display the constructor and its value.\n        Console.WriteLine( &quot;{0,-48}{1,24}&quot;, \n            ctor, elapsedTime.ToString( ) );\n    }\n\n    static void Main( )\n    {\n        Console.WriteLine( \n            &quot;This example of the &quot; +\n            &quot;TimeSpan( int, int, int, int, int ) &quot; +\n            &quot;<br>constructor generates the following output.<br>&quot; );\n        Console.WriteLine( &quot;{0,-48}{1,16}&quot;, &quot;Constructor&quot;, &quot;Value&quot; );\n        Console.WriteLine( &quot;{0,-48}{1,16}&quot;, &quot;-----------&quot;, &quot;-----&quot; );\n\n        CreateTimeSpan( 10, 20, 30, 40, 50 );\n        CreateTimeSpan( -10, 20, 30, 40, 50 );\n        CreateTimeSpan( 0, 0, 0, 0, 937840050 );\n        CreateTimeSpan( 1111, 2222, 3333, 4444, 5555 );\n        CreateTimeSpan( 1111, -2222, -3333, -4444, -5555 );\n        CreateTimeSpan( 99999, 99999, 99999, 99999, 99999 );\n    } \n} \n\n/*\nThis example of the TimeSpan( int, int, int, int, int )\nconstructor generates the following output.\n\nConstructor                                                Value\n-----------                                                -----\nTimeSpan( 10, 20, 30, 40, 50 )                       10.20:30:40.0500000\nTimeSpan( -10, 20, 30, 40, 50 )                      -9.03:29:19.9500000\nTimeSpan( 0, 0, 0, 0, 937840050 )                    10.20:30:40.0500000\nTimeSpan( 1111, 2222, 3333, 4444, 5555 )           1205.22:47:09.5550000\nTimeSpan( 1111, -2222, -3333, -4444, -5555 )       1016.01:12:50.4450000\nTimeSpan( 99999, 99999, 99999, 99999, 99999 )    104236.05:27:18.9990000\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_MaxValue\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MaxValue</div>        \r\n          </div>\r\n    \r\n            <p>Represents the maximum <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value. This field is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly TimeSpan MaxValue;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of this field is equivalent to <a class=\"xref\" href=\"system.int64#System_Int64_MaxValue\" data-linktype=\"relative-path\">System.Int64.MaxValue</a> ticks. The string representation of this value is positive 10675199.02:48:05.4775807, or slightly more than 10,675,199 days.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example references and displays the value of the MaxValue field.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.TimeSpan.Fields#1\">// Example of the TimeSpan fields.\nusing namespace System;\n\n// Pad the end of a TimeSpan string with spaces if it does not \n// contain milliseconds.\nString^ Align( TimeSpan interval )\n{\n   String^ intervalStr = interval.ToString();\n   int pointIndex = intervalStr-&gt;IndexOf( &#39;:&#39; );\n   pointIndex = intervalStr-&gt;IndexOf( &#39;.&#39;, pointIndex );\n   if ( pointIndex &lt; 0 )\n      intervalStr = String::Concat( intervalStr, &quot;        &quot; );\n\n   return intervalStr;\n}\n\nint main()\n{\n   String^ numberFmt = &quot;{0,-22}{1,18:N0}&quot;;\n   String^ timeFmt = &quot;{0,-22}{1,26}&quot;;\n   Console::WriteLine( &quot;This example of the fields of the TimeSpan class&quot;\n   &quot;<br>generates the following output.<br>&quot; );\n   Console::WriteLine( numberFmt, &quot;Field&quot;, &quot;Value&quot; );\n   Console::WriteLine( numberFmt, &quot;-----&quot;, &quot;-----&quot; );\n   \n   // Display the maximum, minimum, and zero TimeSpan values.\n   Console::WriteLine( timeFmt, &quot;Maximum TimeSpan&quot;, Align( TimeSpan::MaxValue ) );\n   Console::WriteLine( timeFmt, &quot;Minimum TimeSpan&quot;, Align( TimeSpan::MinValue ) );\n   Console::WriteLine( timeFmt, &quot;Zero TimeSpan&quot;, Align( TimeSpan::Zero ) );\n   Console::WriteLine();\n   \n   // Display the ticks-per-time-unit fields.\n   Console::WriteLine( numberFmt, &quot;Ticks per day&quot;, TimeSpan::TicksPerDay );\n   Console::WriteLine( numberFmt, &quot;Ticks per hour&quot;, TimeSpan::TicksPerHour );\n   Console::WriteLine( numberFmt, &quot;Ticks per minute&quot;, TimeSpan::TicksPerMinute );\n   Console::WriteLine( numberFmt, &quot;Ticks per second&quot;, TimeSpan::TicksPerSecond );\n   Console::WriteLine( numberFmt, &quot;Ticks per millisecond&quot;, TimeSpan::TicksPerMillisecond );\n}\n\n/*\nThis example of the fields of the TimeSpan class\ngenerates the following output.\n\nField                              Value\n-----                              -----\nMaximum TimeSpan       10675199.02:48:05.4775807\nMinimum TimeSpan      -10675199.02:48:05.4775808\nZero TimeSpan                   00:00:00\n\nTicks per day            864,000,000,000\nTicks per hour            36,000,000,000\nTicks per minute             600,000,000\nTicks per second              10,000,000\nTicks per millisecond             10,000\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.Fields#1\">// Example of the TimeSpan fields.\nusing System;\n\nclass TimeSpanFieldsDemo\n{\n    // Pad the end of a TimeSpan string with spaces if it does not \n    // contain milliseconds.\n    static string Align( TimeSpan interval )\n    {\n        string  intervalStr = interval.ToString( );\n        int     pointIndex = intervalStr.IndexOf( &#39;:&#39; );\n\n        pointIndex = intervalStr.IndexOf( &#39;.&#39;, pointIndex );\n        if( pointIndex &lt; 0 ) intervalStr += &quot;        &quot;;\n        return intervalStr;\n    } \n\n    static void Main( )\n    {\n        const string numberFmt = &quot;{0,-22}{1,18:N0}&quot; ;\n        const string timeFmt = &quot;{0,-22}{1,26}&quot; ;\n\n        Console.WriteLine( \n            &quot;This example of the fields of the TimeSpan class&quot; +\n            &quot;<br>generates the following output.<br>&quot; );\n        Console.WriteLine( numberFmt, &quot;Field&quot;, &quot;Value&quot; );\n        Console.WriteLine( numberFmt, &quot;-----&quot;, &quot;-----&quot; );\n\n        // Display the maximum, minimum, and zero TimeSpan values.\n        Console.WriteLine( timeFmt, &quot;Maximum TimeSpan&quot;, \n            Align( TimeSpan.MaxValue ) );\n        Console.WriteLine( timeFmt, &quot;Minimum TimeSpan&quot;, \n            Align( TimeSpan.MinValue ) );\n        Console.WriteLine( timeFmt, &quot;Zero TimeSpan&quot;, \n            Align( TimeSpan.Zero ) );\n        Console.WriteLine( );\n\n        // Display the ticks-per-time-unit fields.\n        Console.WriteLine( numberFmt, &quot;Ticks per day&quot;, \n            TimeSpan.TicksPerDay );\n        Console.WriteLine( numberFmt, &quot;Ticks per hour&quot;, \n            TimeSpan.TicksPerHour );\n        Console.WriteLine( numberFmt, &quot;Ticks per minute&quot;, \n            TimeSpan.TicksPerMinute );\n        Console.WriteLine( numberFmt, &quot;Ticks per second&quot;, \n            TimeSpan.TicksPerSecond );\n        Console.WriteLine( numberFmt, &quot;Ticks per millisecond&quot;, \n            TimeSpan.TicksPerMillisecond );\n    }\n} \n\n/*\nThis example of the fields of the TimeSpan class\ngenerates the following output.\n\nField                              Value\n-----                              -----\nMaximum TimeSpan       10675199.02:48:05.4775807\nMinimum TimeSpan      -10675199.02:48:05.4775808\nZero TimeSpan                   00:00:00\n\nTicks per day            864,000,000,000\nTicks per hour            36,000,000,000\nTicks per minute             600,000,000\nTicks per second              10,000,000\nTicks per millisecond             10,000\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.Fields#1\">&#39; Example of the TimeSpan fields.\nImports System\nImports Microsoft.VisualBasic\n\nModule TimeSpanFieldsDemo\n    \n    &#39; Pad the end of a TimeSpan string with spaces if it does not \n    &#39; contain milliseconds.\n    Function Align( interval As TimeSpan ) As String\n\n        Dim intervalStr As String = interval.ToString( )\n        Dim pointIndex  As Integer = intervalStr.IndexOf( &quot;:&quot;c )\n\n        pointIndex = intervalStr.IndexOf( &quot;.&quot;c, pointIndex )\n        If pointIndex &lt; 0 Then intervalStr &amp;= &quot;        &quot;\n        Align = intervalStr\n    End Function\n    \n    Sub Main( )\n\n        Const numberFmt As String = &quot;{0,-22}{1,18:N0}&quot;\n        Const timeFmt As String = &quot;{0,-22}{1,26}&quot;\n\n        Console.WriteLine( _\n            &quot;This example of the fields of the TimeSpan class&quot; &amp; _\n            vbCrLf &amp; &quot;generates the following output.&quot; &amp; vbCrLf )\n        Console.WriteLine( numberFmt, &quot;Field&quot;, &quot;Value&quot; )\n        Console.WriteLine( numberFmt, &quot;-----&quot;, &quot;-----&quot; )\n\n        &#39; Display the maximum, minimum, and zero TimeSpan values.\n        Console.WriteLine( timeFmt, &quot;Maximum TimeSpan&quot;, _\n            Align( TimeSpan.MaxValue ) )\n        Console.WriteLine( timeFmt, &quot;Minimum TimeSpan&quot;, _\n            Align( TimeSpan.MinValue ) )\n        Console.WriteLine( timeFmt, &quot;Zero TimeSpan&quot;, _\n            Align( TimeSpan.Zero ) )\n        Console.WriteLine( )\n\n        &#39; Display the ticks-per-time-unit fields.\n        Console.WriteLine( numberFmt, &quot;Ticks per day&quot;, _\n            TimeSpan.TicksPerDay )\n        Console.WriteLine( numberFmt, &quot;Ticks per hour&quot;, _\n            TimeSpan.TicksPerHour )\n        Console.WriteLine( numberFmt, &quot;Ticks per minute&quot;, _\n            TimeSpan.TicksPerMinute )\n        Console.WriteLine( numberFmt, &quot;Ticks per second&quot;, _\n            TimeSpan.TicksPerSecond )\n        Console.WriteLine( numberFmt, &quot;Ticks per millisecond&quot;, _\n            TimeSpan.TicksPerMillisecond )\n    End Sub \nEnd Module \n\n&#39; This example of the fields of the TimeSpan class\n&#39; generates the following output.\n&#39; \n&#39; Field                              Value\n&#39; -----                              -----\n&#39; Maximum TimeSpan       10675199.02:48:05.4775807\n&#39; Minimum TimeSpan      -10675199.02:48:05.4775808\n&#39; Zero TimeSpan                   00:00:00\n&#39; \n&#39; Ticks per day            864,000,000,000\n&#39; Ticks per hour            36,000,000,000\n&#39; Ticks per minute             600,000,000\n&#39; Ticks per second              10,000,000\n&#39; Ticks per millisecond             10,000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_MinValue\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MinValue</div>        \r\n          </div>\r\n    \r\n            <p>Represents the minimum <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value. This field is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly TimeSpan MinValue;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of this field is equivalent to <a class=\"xref\" href=\"system.int64#System_Int64_MinValue\" data-linktype=\"relative-path\">System.Int64.MinValue</a> ticks. The string representation of this value is negative 10675199.02:48:05.4775808, or slightly more than negative 10,675,199 days.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example references and displays the value of the MinValue field.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.TimeSpan.Fields#1\">// Example of the TimeSpan fields.\nusing namespace System;\n\n// Pad the end of a TimeSpan string with spaces if it does not \n// contain milliseconds.\nString^ Align( TimeSpan interval )\n{\n   String^ intervalStr = interval.ToString();\n   int pointIndex = intervalStr-&gt;IndexOf( &#39;:&#39; );\n   pointIndex = intervalStr-&gt;IndexOf( &#39;.&#39;, pointIndex );\n   if ( pointIndex &lt; 0 )\n      intervalStr = String::Concat( intervalStr, &quot;        &quot; );\n\n   return intervalStr;\n}\n\nint main()\n{\n   String^ numberFmt = &quot;{0,-22}{1,18:N0}&quot;;\n   String^ timeFmt = &quot;{0,-22}{1,26}&quot;;\n   Console::WriteLine( &quot;This example of the fields of the TimeSpan class&quot;\n   &quot;<br>generates the following output.<br>&quot; );\n   Console::WriteLine( numberFmt, &quot;Field&quot;, &quot;Value&quot; );\n   Console::WriteLine( numberFmt, &quot;-----&quot;, &quot;-----&quot; );\n   \n   // Display the maximum, minimum, and zero TimeSpan values.\n   Console::WriteLine( timeFmt, &quot;Maximum TimeSpan&quot;, Align( TimeSpan::MaxValue ) );\n   Console::WriteLine( timeFmt, &quot;Minimum TimeSpan&quot;, Align( TimeSpan::MinValue ) );\n   Console::WriteLine( timeFmt, &quot;Zero TimeSpan&quot;, Align( TimeSpan::Zero ) );\n   Console::WriteLine();\n   \n   // Display the ticks-per-time-unit fields.\n   Console::WriteLine( numberFmt, &quot;Ticks per day&quot;, TimeSpan::TicksPerDay );\n   Console::WriteLine( numberFmt, &quot;Ticks per hour&quot;, TimeSpan::TicksPerHour );\n   Console::WriteLine( numberFmt, &quot;Ticks per minute&quot;, TimeSpan::TicksPerMinute );\n   Console::WriteLine( numberFmt, &quot;Ticks per second&quot;, TimeSpan::TicksPerSecond );\n   Console::WriteLine( numberFmt, &quot;Ticks per millisecond&quot;, TimeSpan::TicksPerMillisecond );\n}\n\n/*\nThis example of the fields of the TimeSpan class\ngenerates the following output.\n\nField                              Value\n-----                              -----\nMaximum TimeSpan       10675199.02:48:05.4775807\nMinimum TimeSpan      -10675199.02:48:05.4775808\nZero TimeSpan                   00:00:00\n\nTicks per day            864,000,000,000\nTicks per hour            36,000,000,000\nTicks per minute             600,000,000\nTicks per second              10,000,000\nTicks per millisecond             10,000\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.Fields#1\">// Example of the TimeSpan fields.\nusing System;\n\nclass TimeSpanFieldsDemo\n{\n    // Pad the end of a TimeSpan string with spaces if it does not \n    // contain milliseconds.\n    static string Align( TimeSpan interval )\n    {\n        string  intervalStr = interval.ToString( );\n        int     pointIndex = intervalStr.IndexOf( &#39;:&#39; );\n\n        pointIndex = intervalStr.IndexOf( &#39;.&#39;, pointIndex );\n        if( pointIndex &lt; 0 ) intervalStr += &quot;        &quot;;\n        return intervalStr;\n    } \n\n    static void Main( )\n    {\n        const string numberFmt = &quot;{0,-22}{1,18:N0}&quot; ;\n        const string timeFmt = &quot;{0,-22}{1,26}&quot; ;\n\n        Console.WriteLine( \n            &quot;This example of the fields of the TimeSpan class&quot; +\n            &quot;<br>generates the following output.<br>&quot; );\n        Console.WriteLine( numberFmt, &quot;Field&quot;, &quot;Value&quot; );\n        Console.WriteLine( numberFmt, &quot;-----&quot;, &quot;-----&quot; );\n\n        // Display the maximum, minimum, and zero TimeSpan values.\n        Console.WriteLine( timeFmt, &quot;Maximum TimeSpan&quot;, \n            Align( TimeSpan.MaxValue ) );\n        Console.WriteLine( timeFmt, &quot;Minimum TimeSpan&quot;, \n            Align( TimeSpan.MinValue ) );\n        Console.WriteLine( timeFmt, &quot;Zero TimeSpan&quot;, \n            Align( TimeSpan.Zero ) );\n        Console.WriteLine( );\n\n        // Display the ticks-per-time-unit fields.\n        Console.WriteLine( numberFmt, &quot;Ticks per day&quot;, \n            TimeSpan.TicksPerDay );\n        Console.WriteLine( numberFmt, &quot;Ticks per hour&quot;, \n            TimeSpan.TicksPerHour );\n        Console.WriteLine( numberFmt, &quot;Ticks per minute&quot;, \n            TimeSpan.TicksPerMinute );\n        Console.WriteLine( numberFmt, &quot;Ticks per second&quot;, \n            TimeSpan.TicksPerSecond );\n        Console.WriteLine( numberFmt, &quot;Ticks per millisecond&quot;, \n            TimeSpan.TicksPerMillisecond );\n    }\n} \n\n/*\nThis example of the fields of the TimeSpan class\ngenerates the following output.\n\nField                              Value\n-----                              -----\nMaximum TimeSpan       10675199.02:48:05.4775807\nMinimum TimeSpan      -10675199.02:48:05.4775808\nZero TimeSpan                   00:00:00\n\nTicks per day            864,000,000,000\nTicks per hour            36,000,000,000\nTicks per minute             600,000,000\nTicks per second              10,000,000\nTicks per millisecond             10,000\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.Fields#1\">&#39; Example of the TimeSpan fields.\nImports System\nImports Microsoft.VisualBasic\n\nModule TimeSpanFieldsDemo\n    \n    &#39; Pad the end of a TimeSpan string with spaces if it does not \n    &#39; contain milliseconds.\n    Function Align( interval As TimeSpan ) As String\n\n        Dim intervalStr As String = interval.ToString( )\n        Dim pointIndex  As Integer = intervalStr.IndexOf( &quot;:&quot;c )\n\n        pointIndex = intervalStr.IndexOf( &quot;.&quot;c, pointIndex )\n        If pointIndex &lt; 0 Then intervalStr &amp;= &quot;        &quot;\n        Align = intervalStr\n    End Function\n    \n    Sub Main( )\n\n        Const numberFmt As String = &quot;{0,-22}{1,18:N0}&quot;\n        Const timeFmt As String = &quot;{0,-22}{1,26}&quot;\n\n        Console.WriteLine( _\n            &quot;This example of the fields of the TimeSpan class&quot; &amp; _\n            vbCrLf &amp; &quot;generates the following output.&quot; &amp; vbCrLf )\n        Console.WriteLine( numberFmt, &quot;Field&quot;, &quot;Value&quot; )\n        Console.WriteLine( numberFmt, &quot;-----&quot;, &quot;-----&quot; )\n\n        &#39; Display the maximum, minimum, and zero TimeSpan values.\n        Console.WriteLine( timeFmt, &quot;Maximum TimeSpan&quot;, _\n            Align( TimeSpan.MaxValue ) )\n        Console.WriteLine( timeFmt, &quot;Minimum TimeSpan&quot;, _\n            Align( TimeSpan.MinValue ) )\n        Console.WriteLine( timeFmt, &quot;Zero TimeSpan&quot;, _\n            Align( TimeSpan.Zero ) )\n        Console.WriteLine( )\n\n        &#39; Display the ticks-per-time-unit fields.\n        Console.WriteLine( numberFmt, &quot;Ticks per day&quot;, _\n            TimeSpan.TicksPerDay )\n        Console.WriteLine( numberFmt, &quot;Ticks per hour&quot;, _\n            TimeSpan.TicksPerHour )\n        Console.WriteLine( numberFmt, &quot;Ticks per minute&quot;, _\n            TimeSpan.TicksPerMinute )\n        Console.WriteLine( numberFmt, &quot;Ticks per second&quot;, _\n            TimeSpan.TicksPerSecond )\n        Console.WriteLine( numberFmt, &quot;Ticks per millisecond&quot;, _\n            TimeSpan.TicksPerMillisecond )\n    End Sub \nEnd Module \n\n&#39; This example of the fields of the TimeSpan class\n&#39; generates the following output.\n&#39; \n&#39; Field                              Value\n&#39; -----                              -----\n&#39; Maximum TimeSpan       10675199.02:48:05.4775807\n&#39; Minimum TimeSpan      -10675199.02:48:05.4775808\n&#39; Zero TimeSpan                   00:00:00\n&#39; \n&#39; Ticks per day            864,000,000,000\n&#39; Ticks per hour            36,000,000,000\n&#39; Ticks per minute             600,000,000\n&#39; Ticks per second              10,000,000\n&#39; Ticks per millisecond             10,000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_TicksPerDay\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TicksPerDay</div>        \r\n          </div>\r\n    \r\n            <p>Represents the number of ticks in 1 day. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const long TicksPerDay = 864000000000;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of this constant is 864 billion; that is, 864,000,000,000.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example references and displays the value of the TicksPerDay field.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.TimeSpan.Fields#1\">// Example of the TimeSpan fields.\nusing namespace System;\n\n// Pad the end of a TimeSpan string with spaces if it does not \n// contain milliseconds.\nString^ Align( TimeSpan interval )\n{\n   String^ intervalStr = interval.ToString();\n   int pointIndex = intervalStr-&gt;IndexOf( &#39;:&#39; );\n   pointIndex = intervalStr-&gt;IndexOf( &#39;.&#39;, pointIndex );\n   if ( pointIndex &lt; 0 )\n      intervalStr = String::Concat( intervalStr, &quot;        &quot; );\n\n   return intervalStr;\n}\n\nint main()\n{\n   String^ numberFmt = &quot;{0,-22}{1,18:N0}&quot;;\n   String^ timeFmt = &quot;{0,-22}{1,26}&quot;;\n   Console::WriteLine( &quot;This example of the fields of the TimeSpan class&quot;\n   &quot;<br>generates the following output.<br>&quot; );\n   Console::WriteLine( numberFmt, &quot;Field&quot;, &quot;Value&quot; );\n   Console::WriteLine( numberFmt, &quot;-----&quot;, &quot;-----&quot; );\n   \n   // Display the maximum, minimum, and zero TimeSpan values.\n   Console::WriteLine( timeFmt, &quot;Maximum TimeSpan&quot;, Align( TimeSpan::MaxValue ) );\n   Console::WriteLine( timeFmt, &quot;Minimum TimeSpan&quot;, Align( TimeSpan::MinValue ) );\n   Console::WriteLine( timeFmt, &quot;Zero TimeSpan&quot;, Align( TimeSpan::Zero ) );\n   Console::WriteLine();\n   \n   // Display the ticks-per-time-unit fields.\n   Console::WriteLine( numberFmt, &quot;Ticks per day&quot;, TimeSpan::TicksPerDay );\n   Console::WriteLine( numberFmt, &quot;Ticks per hour&quot;, TimeSpan::TicksPerHour );\n   Console::WriteLine( numberFmt, &quot;Ticks per minute&quot;, TimeSpan::TicksPerMinute );\n   Console::WriteLine( numberFmt, &quot;Ticks per second&quot;, TimeSpan::TicksPerSecond );\n   Console::WriteLine( numberFmt, &quot;Ticks per millisecond&quot;, TimeSpan::TicksPerMillisecond );\n}\n\n/*\nThis example of the fields of the TimeSpan class\ngenerates the following output.\n\nField                              Value\n-----                              -----\nMaximum TimeSpan       10675199.02:48:05.4775807\nMinimum TimeSpan      -10675199.02:48:05.4775808\nZero TimeSpan                   00:00:00\n\nTicks per day            864,000,000,000\nTicks per hour            36,000,000,000\nTicks per minute             600,000,000\nTicks per second              10,000,000\nTicks per millisecond             10,000\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.Fields#1\">// Example of the TimeSpan fields.\nusing System;\n\nclass TimeSpanFieldsDemo\n{\n    // Pad the end of a TimeSpan string with spaces if it does not \n    // contain milliseconds.\n    static string Align( TimeSpan interval )\n    {\n        string  intervalStr = interval.ToString( );\n        int     pointIndex = intervalStr.IndexOf( &#39;:&#39; );\n\n        pointIndex = intervalStr.IndexOf( &#39;.&#39;, pointIndex );\n        if( pointIndex &lt; 0 ) intervalStr += &quot;        &quot;;\n        return intervalStr;\n    } \n\n    static void Main( )\n    {\n        const string numberFmt = &quot;{0,-22}{1,18:N0}&quot; ;\n        const string timeFmt = &quot;{0,-22}{1,26}&quot; ;\n\n        Console.WriteLine( \n            &quot;This example of the fields of the TimeSpan class&quot; +\n            &quot;<br>generates the following output.<br>&quot; );\n        Console.WriteLine( numberFmt, &quot;Field&quot;, &quot;Value&quot; );\n        Console.WriteLine( numberFmt, &quot;-----&quot;, &quot;-----&quot; );\n\n        // Display the maximum, minimum, and zero TimeSpan values.\n        Console.WriteLine( timeFmt, &quot;Maximum TimeSpan&quot;, \n            Align( TimeSpan.MaxValue ) );\n        Console.WriteLine( timeFmt, &quot;Minimum TimeSpan&quot;, \n            Align( TimeSpan.MinValue ) );\n        Console.WriteLine( timeFmt, &quot;Zero TimeSpan&quot;, \n            Align( TimeSpan.Zero ) );\n        Console.WriteLine( );\n\n        // Display the ticks-per-time-unit fields.\n        Console.WriteLine( numberFmt, &quot;Ticks per day&quot;, \n            TimeSpan.TicksPerDay );\n        Console.WriteLine( numberFmt, &quot;Ticks per hour&quot;, \n            TimeSpan.TicksPerHour );\n        Console.WriteLine( numberFmt, &quot;Ticks per minute&quot;, \n            TimeSpan.TicksPerMinute );\n        Console.WriteLine( numberFmt, &quot;Ticks per second&quot;, \n            TimeSpan.TicksPerSecond );\n        Console.WriteLine( numberFmt, &quot;Ticks per millisecond&quot;, \n            TimeSpan.TicksPerMillisecond );\n    }\n} \n\n/*\nThis example of the fields of the TimeSpan class\ngenerates the following output.\n\nField                              Value\n-----                              -----\nMaximum TimeSpan       10675199.02:48:05.4775807\nMinimum TimeSpan      -10675199.02:48:05.4775808\nZero TimeSpan                   00:00:00\n\nTicks per day            864,000,000,000\nTicks per hour            36,000,000,000\nTicks per minute             600,000,000\nTicks per second              10,000,000\nTicks per millisecond             10,000\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.Fields#1\">&#39; Example of the TimeSpan fields.\nImports System\nImports Microsoft.VisualBasic\n\nModule TimeSpanFieldsDemo\n    \n    &#39; Pad the end of a TimeSpan string with spaces if it does not \n    &#39; contain milliseconds.\n    Function Align( interval As TimeSpan ) As String\n\n        Dim intervalStr As String = interval.ToString( )\n        Dim pointIndex  As Integer = intervalStr.IndexOf( &quot;:&quot;c )\n\n        pointIndex = intervalStr.IndexOf( &quot;.&quot;c, pointIndex )\n        If pointIndex &lt; 0 Then intervalStr &amp;= &quot;        &quot;\n        Align = intervalStr\n    End Function\n    \n    Sub Main( )\n\n        Const numberFmt As String = &quot;{0,-22}{1,18:N0}&quot;\n        Const timeFmt As String = &quot;{0,-22}{1,26}&quot;\n\n        Console.WriteLine( _\n            &quot;This example of the fields of the TimeSpan class&quot; &amp; _\n            vbCrLf &amp; &quot;generates the following output.&quot; &amp; vbCrLf )\n        Console.WriteLine( numberFmt, &quot;Field&quot;, &quot;Value&quot; )\n        Console.WriteLine( numberFmt, &quot;-----&quot;, &quot;-----&quot; )\n\n        &#39; Display the maximum, minimum, and zero TimeSpan values.\n        Console.WriteLine( timeFmt, &quot;Maximum TimeSpan&quot;, _\n            Align( TimeSpan.MaxValue ) )\n        Console.WriteLine( timeFmt, &quot;Minimum TimeSpan&quot;, _\n            Align( TimeSpan.MinValue ) )\n        Console.WriteLine( timeFmt, &quot;Zero TimeSpan&quot;, _\n            Align( TimeSpan.Zero ) )\n        Console.WriteLine( )\n\n        &#39; Display the ticks-per-time-unit fields.\n        Console.WriteLine( numberFmt, &quot;Ticks per day&quot;, _\n            TimeSpan.TicksPerDay )\n        Console.WriteLine( numberFmt, &quot;Ticks per hour&quot;, _\n            TimeSpan.TicksPerHour )\n        Console.WriteLine( numberFmt, &quot;Ticks per minute&quot;, _\n            TimeSpan.TicksPerMinute )\n        Console.WriteLine( numberFmt, &quot;Ticks per second&quot;, _\n            TimeSpan.TicksPerSecond )\n        Console.WriteLine( numberFmt, &quot;Ticks per millisecond&quot;, _\n            TimeSpan.TicksPerMillisecond )\n    End Sub \nEnd Module \n\n&#39; This example of the fields of the TimeSpan class\n&#39; generates the following output.\n&#39; \n&#39; Field                              Value\n&#39; -----                              -----\n&#39; Maximum TimeSpan       10675199.02:48:05.4775807\n&#39; Minimum TimeSpan      -10675199.02:48:05.4775808\n&#39; Zero TimeSpan                   00:00:00\n&#39; \n&#39; Ticks per day            864,000,000,000\n&#39; Ticks per hour            36,000,000,000\n&#39; Ticks per minute             600,000,000\n&#39; Ticks per second              10,000,000\n&#39; Ticks per millisecond             10,000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_TicksPerHour\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TicksPerHour</div>        \r\n          </div>\r\n    \r\n            <p>Represents the number of ticks in 1 hour. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const long TicksPerHour = 36000000000;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of this constant is 36 billion; that is, 36,000,000,000.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example references and displays the value of the TicksPerHour field.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.TimeSpan.Fields#1\">// Example of the TimeSpan fields.\nusing namespace System;\n\n// Pad the end of a TimeSpan string with spaces if it does not \n// contain milliseconds.\nString^ Align( TimeSpan interval )\n{\n   String^ intervalStr = interval.ToString();\n   int pointIndex = intervalStr-&gt;IndexOf( &#39;:&#39; );\n   pointIndex = intervalStr-&gt;IndexOf( &#39;.&#39;, pointIndex );\n   if ( pointIndex &lt; 0 )\n      intervalStr = String::Concat( intervalStr, &quot;        &quot; );\n\n   return intervalStr;\n}\n\nint main()\n{\n   String^ numberFmt = &quot;{0,-22}{1,18:N0}&quot;;\n   String^ timeFmt = &quot;{0,-22}{1,26}&quot;;\n   Console::WriteLine( &quot;This example of the fields of the TimeSpan class&quot;\n   &quot;<br>generates the following output.<br>&quot; );\n   Console::WriteLine( numberFmt, &quot;Field&quot;, &quot;Value&quot; );\n   Console::WriteLine( numberFmt, &quot;-----&quot;, &quot;-----&quot; );\n   \n   // Display the maximum, minimum, and zero TimeSpan values.\n   Console::WriteLine( timeFmt, &quot;Maximum TimeSpan&quot;, Align( TimeSpan::MaxValue ) );\n   Console::WriteLine( timeFmt, &quot;Minimum TimeSpan&quot;, Align( TimeSpan::MinValue ) );\n   Console::WriteLine( timeFmt, &quot;Zero TimeSpan&quot;, Align( TimeSpan::Zero ) );\n   Console::WriteLine();\n   \n   // Display the ticks-per-time-unit fields.\n   Console::WriteLine( numberFmt, &quot;Ticks per day&quot;, TimeSpan::TicksPerDay );\n   Console::WriteLine( numberFmt, &quot;Ticks per hour&quot;, TimeSpan::TicksPerHour );\n   Console::WriteLine( numberFmt, &quot;Ticks per minute&quot;, TimeSpan::TicksPerMinute );\n   Console::WriteLine( numberFmt, &quot;Ticks per second&quot;, TimeSpan::TicksPerSecond );\n   Console::WriteLine( numberFmt, &quot;Ticks per millisecond&quot;, TimeSpan::TicksPerMillisecond );\n}\n\n/*\nThis example of the fields of the TimeSpan class\ngenerates the following output.\n\nField                              Value\n-----                              -----\nMaximum TimeSpan       10675199.02:48:05.4775807\nMinimum TimeSpan      -10675199.02:48:05.4775808\nZero TimeSpan                   00:00:00\n\nTicks per day            864,000,000,000\nTicks per hour            36,000,000,000\nTicks per minute             600,000,000\nTicks per second              10,000,000\nTicks per millisecond             10,000\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.Fields#1\">// Example of the TimeSpan fields.\nusing System;\n\nclass TimeSpanFieldsDemo\n{\n    // Pad the end of a TimeSpan string with spaces if it does not \n    // contain milliseconds.\n    static string Align( TimeSpan interval )\n    {\n        string  intervalStr = interval.ToString( );\n        int     pointIndex = intervalStr.IndexOf( &#39;:&#39; );\n\n        pointIndex = intervalStr.IndexOf( &#39;.&#39;, pointIndex );\n        if( pointIndex &lt; 0 ) intervalStr += &quot;        &quot;;\n        return intervalStr;\n    } \n\n    static void Main( )\n    {\n        const string numberFmt = &quot;{0,-22}{1,18:N0}&quot; ;\n        const string timeFmt = &quot;{0,-22}{1,26}&quot; ;\n\n        Console.WriteLine( \n            &quot;This example of the fields of the TimeSpan class&quot; +\n            &quot;<br>generates the following output.<br>&quot; );\n        Console.WriteLine( numberFmt, &quot;Field&quot;, &quot;Value&quot; );\n        Console.WriteLine( numberFmt, &quot;-----&quot;, &quot;-----&quot; );\n\n        // Display the maximum, minimum, and zero TimeSpan values.\n        Console.WriteLine( timeFmt, &quot;Maximum TimeSpan&quot;, \n            Align( TimeSpan.MaxValue ) );\n        Console.WriteLine( timeFmt, &quot;Minimum TimeSpan&quot;, \n            Align( TimeSpan.MinValue ) );\n        Console.WriteLine( timeFmt, &quot;Zero TimeSpan&quot;, \n            Align( TimeSpan.Zero ) );\n        Console.WriteLine( );\n\n        // Display the ticks-per-time-unit fields.\n        Console.WriteLine( numberFmt, &quot;Ticks per day&quot;, \n            TimeSpan.TicksPerDay );\n        Console.WriteLine( numberFmt, &quot;Ticks per hour&quot;, \n            TimeSpan.TicksPerHour );\n        Console.WriteLine( numberFmt, &quot;Ticks per minute&quot;, \n            TimeSpan.TicksPerMinute );\n        Console.WriteLine( numberFmt, &quot;Ticks per second&quot;, \n            TimeSpan.TicksPerSecond );\n        Console.WriteLine( numberFmt, &quot;Ticks per millisecond&quot;, \n            TimeSpan.TicksPerMillisecond );\n    }\n} \n\n/*\nThis example of the fields of the TimeSpan class\ngenerates the following output.\n\nField                              Value\n-----                              -----\nMaximum TimeSpan       10675199.02:48:05.4775807\nMinimum TimeSpan      -10675199.02:48:05.4775808\nZero TimeSpan                   00:00:00\n\nTicks per day            864,000,000,000\nTicks per hour            36,000,000,000\nTicks per minute             600,000,000\nTicks per second              10,000,000\nTicks per millisecond             10,000\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.Fields#1\">&#39; Example of the TimeSpan fields.\nImports System\nImports Microsoft.VisualBasic\n\nModule TimeSpanFieldsDemo\n    \n    &#39; Pad the end of a TimeSpan string with spaces if it does not \n    &#39; contain milliseconds.\n    Function Align( interval As TimeSpan ) As String\n\n        Dim intervalStr As String = interval.ToString( )\n        Dim pointIndex  As Integer = intervalStr.IndexOf( &quot;:&quot;c )\n\n        pointIndex = intervalStr.IndexOf( &quot;.&quot;c, pointIndex )\n        If pointIndex &lt; 0 Then intervalStr &amp;= &quot;        &quot;\n        Align = intervalStr\n    End Function\n    \n    Sub Main( )\n\n        Const numberFmt As String = &quot;{0,-22}{1,18:N0}&quot;\n        Const timeFmt As String = &quot;{0,-22}{1,26}&quot;\n\n        Console.WriteLine( _\n            &quot;This example of the fields of the TimeSpan class&quot; &amp; _\n            vbCrLf &amp; &quot;generates the following output.&quot; &amp; vbCrLf )\n        Console.WriteLine( numberFmt, &quot;Field&quot;, &quot;Value&quot; )\n        Console.WriteLine( numberFmt, &quot;-----&quot;, &quot;-----&quot; )\n\n        &#39; Display the maximum, minimum, and zero TimeSpan values.\n        Console.WriteLine( timeFmt, &quot;Maximum TimeSpan&quot;, _\n            Align( TimeSpan.MaxValue ) )\n        Console.WriteLine( timeFmt, &quot;Minimum TimeSpan&quot;, _\n            Align( TimeSpan.MinValue ) )\n        Console.WriteLine( timeFmt, &quot;Zero TimeSpan&quot;, _\n            Align( TimeSpan.Zero ) )\n        Console.WriteLine( )\n\n        &#39; Display the ticks-per-time-unit fields.\n        Console.WriteLine( numberFmt, &quot;Ticks per day&quot;, _\n            TimeSpan.TicksPerDay )\n        Console.WriteLine( numberFmt, &quot;Ticks per hour&quot;, _\n            TimeSpan.TicksPerHour )\n        Console.WriteLine( numberFmt, &quot;Ticks per minute&quot;, _\n            TimeSpan.TicksPerMinute )\n        Console.WriteLine( numberFmt, &quot;Ticks per second&quot;, _\n            TimeSpan.TicksPerSecond )\n        Console.WriteLine( numberFmt, &quot;Ticks per millisecond&quot;, _\n            TimeSpan.TicksPerMillisecond )\n    End Sub \nEnd Module \n\n&#39; This example of the fields of the TimeSpan class\n&#39; generates the following output.\n&#39; \n&#39; Field                              Value\n&#39; -----                              -----\n&#39; Maximum TimeSpan       10675199.02:48:05.4775807\n&#39; Minimum TimeSpan      -10675199.02:48:05.4775808\n&#39; Zero TimeSpan                   00:00:00\n&#39; \n&#39; Ticks per day            864,000,000,000\n&#39; Ticks per hour            36,000,000,000\n&#39; Ticks per minute             600,000,000\n&#39; Ticks per second              10,000,000\n&#39; Ticks per millisecond             10,000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_TicksPerMillisecond\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TicksPerMillisecond</div>        \r\n          </div>\r\n    \r\n            <p>Represents the number of ticks in 1 millisecond. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const long TicksPerMillisecond = 10000;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of this constant is 10 thousand; that is, 10,000.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example references and displays the value of the TicksPerMillisecond field.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.TimeSpan.Fields#1\">// Example of the TimeSpan fields.\nusing namespace System;\n\n// Pad the end of a TimeSpan string with spaces if it does not \n// contain milliseconds.\nString^ Align( TimeSpan interval )\n{\n   String^ intervalStr = interval.ToString();\n   int pointIndex = intervalStr-&gt;IndexOf( &#39;:&#39; );\n   pointIndex = intervalStr-&gt;IndexOf( &#39;.&#39;, pointIndex );\n   if ( pointIndex &lt; 0 )\n      intervalStr = String::Concat( intervalStr, &quot;        &quot; );\n\n   return intervalStr;\n}\n\nint main()\n{\n   String^ numberFmt = &quot;{0,-22}{1,18:N0}&quot;;\n   String^ timeFmt = &quot;{0,-22}{1,26}&quot;;\n   Console::WriteLine( &quot;This example of the fields of the TimeSpan class&quot;\n   &quot;<br>generates the following output.<br>&quot; );\n   Console::WriteLine( numberFmt, &quot;Field&quot;, &quot;Value&quot; );\n   Console::WriteLine( numberFmt, &quot;-----&quot;, &quot;-----&quot; );\n   \n   // Display the maximum, minimum, and zero TimeSpan values.\n   Console::WriteLine( timeFmt, &quot;Maximum TimeSpan&quot;, Align( TimeSpan::MaxValue ) );\n   Console::WriteLine( timeFmt, &quot;Minimum TimeSpan&quot;, Align( TimeSpan::MinValue ) );\n   Console::WriteLine( timeFmt, &quot;Zero TimeSpan&quot;, Align( TimeSpan::Zero ) );\n   Console::WriteLine();\n   \n   // Display the ticks-per-time-unit fields.\n   Console::WriteLine( numberFmt, &quot;Ticks per day&quot;, TimeSpan::TicksPerDay );\n   Console::WriteLine( numberFmt, &quot;Ticks per hour&quot;, TimeSpan::TicksPerHour );\n   Console::WriteLine( numberFmt, &quot;Ticks per minute&quot;, TimeSpan::TicksPerMinute );\n   Console::WriteLine( numberFmt, &quot;Ticks per second&quot;, TimeSpan::TicksPerSecond );\n   Console::WriteLine( numberFmt, &quot;Ticks per millisecond&quot;, TimeSpan::TicksPerMillisecond );\n}\n\n/*\nThis example of the fields of the TimeSpan class\ngenerates the following output.\n\nField                              Value\n-----                              -----\nMaximum TimeSpan       10675199.02:48:05.4775807\nMinimum TimeSpan      -10675199.02:48:05.4775808\nZero TimeSpan                   00:00:00\n\nTicks per day            864,000,000,000\nTicks per hour            36,000,000,000\nTicks per minute             600,000,000\nTicks per second              10,000,000\nTicks per millisecond             10,000\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.Fields#1\">// Example of the TimeSpan fields.\nusing System;\n\nclass TimeSpanFieldsDemo\n{\n    // Pad the end of a TimeSpan string with spaces if it does not \n    // contain milliseconds.\n    static string Align( TimeSpan interval )\n    {\n        string  intervalStr = interval.ToString( );\n        int     pointIndex = intervalStr.IndexOf( &#39;:&#39; );\n\n        pointIndex = intervalStr.IndexOf( &#39;.&#39;, pointIndex );\n        if( pointIndex &lt; 0 ) intervalStr += &quot;        &quot;;\n        return intervalStr;\n    } \n\n    static void Main( )\n    {\n        const string numberFmt = &quot;{0,-22}{1,18:N0}&quot; ;\n        const string timeFmt = &quot;{0,-22}{1,26}&quot; ;\n\n        Console.WriteLine( \n            &quot;This example of the fields of the TimeSpan class&quot; +\n            &quot;<br>generates the following output.<br>&quot; );\n        Console.WriteLine( numberFmt, &quot;Field&quot;, &quot;Value&quot; );\n        Console.WriteLine( numberFmt, &quot;-----&quot;, &quot;-----&quot; );\n\n        // Display the maximum, minimum, and zero TimeSpan values.\n        Console.WriteLine( timeFmt, &quot;Maximum TimeSpan&quot;, \n            Align( TimeSpan.MaxValue ) );\n        Console.WriteLine( timeFmt, &quot;Minimum TimeSpan&quot;, \n            Align( TimeSpan.MinValue ) );\n        Console.WriteLine( timeFmt, &quot;Zero TimeSpan&quot;, \n            Align( TimeSpan.Zero ) );\n        Console.WriteLine( );\n\n        // Display the ticks-per-time-unit fields.\n        Console.WriteLine( numberFmt, &quot;Ticks per day&quot;, \n            TimeSpan.TicksPerDay );\n        Console.WriteLine( numberFmt, &quot;Ticks per hour&quot;, \n            TimeSpan.TicksPerHour );\n        Console.WriteLine( numberFmt, &quot;Ticks per minute&quot;, \n            TimeSpan.TicksPerMinute );\n        Console.WriteLine( numberFmt, &quot;Ticks per second&quot;, \n            TimeSpan.TicksPerSecond );\n        Console.WriteLine( numberFmt, &quot;Ticks per millisecond&quot;, \n            TimeSpan.TicksPerMillisecond );\n    }\n} \n\n/*\nThis example of the fields of the TimeSpan class\ngenerates the following output.\n\nField                              Value\n-----                              -----\nMaximum TimeSpan       10675199.02:48:05.4775807\nMinimum TimeSpan      -10675199.02:48:05.4775808\nZero TimeSpan                   00:00:00\n\nTicks per day            864,000,000,000\nTicks per hour            36,000,000,000\nTicks per minute             600,000,000\nTicks per second              10,000,000\nTicks per millisecond             10,000\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.Fields#1\">&#39; Example of the TimeSpan fields.\nImports System\nImports Microsoft.VisualBasic\n\nModule TimeSpanFieldsDemo\n    \n    &#39; Pad the end of a TimeSpan string with spaces if it does not \n    &#39; contain milliseconds.\n    Function Align( interval As TimeSpan ) As String\n\n        Dim intervalStr As String = interval.ToString( )\n        Dim pointIndex  As Integer = intervalStr.IndexOf( &quot;:&quot;c )\n\n        pointIndex = intervalStr.IndexOf( &quot;.&quot;c, pointIndex )\n        If pointIndex &lt; 0 Then intervalStr &amp;= &quot;        &quot;\n        Align = intervalStr\n    End Function\n    \n    Sub Main( )\n\n        Const numberFmt As String = &quot;{0,-22}{1,18:N0}&quot;\n        Const timeFmt As String = &quot;{0,-22}{1,26}&quot;\n\n        Console.WriteLine( _\n            &quot;This example of the fields of the TimeSpan class&quot; &amp; _\n            vbCrLf &amp; &quot;generates the following output.&quot; &amp; vbCrLf )\n        Console.WriteLine( numberFmt, &quot;Field&quot;, &quot;Value&quot; )\n        Console.WriteLine( numberFmt, &quot;-----&quot;, &quot;-----&quot; )\n\n        &#39; Display the maximum, minimum, and zero TimeSpan values.\n        Console.WriteLine( timeFmt, &quot;Maximum TimeSpan&quot;, _\n            Align( TimeSpan.MaxValue ) )\n        Console.WriteLine( timeFmt, &quot;Minimum TimeSpan&quot;, _\n            Align( TimeSpan.MinValue ) )\n        Console.WriteLine( timeFmt, &quot;Zero TimeSpan&quot;, _\n            Align( TimeSpan.Zero ) )\n        Console.WriteLine( )\n\n        &#39; Display the ticks-per-time-unit fields.\n        Console.WriteLine( numberFmt, &quot;Ticks per day&quot;, _\n            TimeSpan.TicksPerDay )\n        Console.WriteLine( numberFmt, &quot;Ticks per hour&quot;, _\n            TimeSpan.TicksPerHour )\n        Console.WriteLine( numberFmt, &quot;Ticks per minute&quot;, _\n            TimeSpan.TicksPerMinute )\n        Console.WriteLine( numberFmt, &quot;Ticks per second&quot;, _\n            TimeSpan.TicksPerSecond )\n        Console.WriteLine( numberFmt, &quot;Ticks per millisecond&quot;, _\n            TimeSpan.TicksPerMillisecond )\n    End Sub \nEnd Module \n\n&#39; This example of the fields of the TimeSpan class\n&#39; generates the following output.\n&#39; \n&#39; Field                              Value\n&#39; -----                              -----\n&#39; Maximum TimeSpan       10675199.02:48:05.4775807\n&#39; Minimum TimeSpan      -10675199.02:48:05.4775808\n&#39; Zero TimeSpan                   00:00:00\n&#39; \n&#39; Ticks per day            864,000,000,000\n&#39; Ticks per hour            36,000,000,000\n&#39; Ticks per minute             600,000,000\n&#39; Ticks per second              10,000,000\n&#39; Ticks per millisecond             10,000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_TicksPerMinute\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TicksPerMinute</div>        \r\n          </div>\r\n    \r\n            <p>Represents the number of ticks in 1 minute. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const long TicksPerMinute = 600000000;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of this constant is 600 million; that is, 600,000,000.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example references and displays the value of the TicksPerMinute field.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.TimeSpan.Fields#1\">// Example of the TimeSpan fields.\nusing namespace System;\n\n// Pad the end of a TimeSpan string with spaces if it does not \n// contain milliseconds.\nString^ Align( TimeSpan interval )\n{\n   String^ intervalStr = interval.ToString();\n   int pointIndex = intervalStr-&gt;IndexOf( &#39;:&#39; );\n   pointIndex = intervalStr-&gt;IndexOf( &#39;.&#39;, pointIndex );\n   if ( pointIndex &lt; 0 )\n      intervalStr = String::Concat( intervalStr, &quot;        &quot; );\n\n   return intervalStr;\n}\n\nint main()\n{\n   String^ numberFmt = &quot;{0,-22}{1,18:N0}&quot;;\n   String^ timeFmt = &quot;{0,-22}{1,26}&quot;;\n   Console::WriteLine( &quot;This example of the fields of the TimeSpan class&quot;\n   &quot;<br>generates the following output.<br>&quot; );\n   Console::WriteLine( numberFmt, &quot;Field&quot;, &quot;Value&quot; );\n   Console::WriteLine( numberFmt, &quot;-----&quot;, &quot;-----&quot; );\n   \n   // Display the maximum, minimum, and zero TimeSpan values.\n   Console::WriteLine( timeFmt, &quot;Maximum TimeSpan&quot;, Align( TimeSpan::MaxValue ) );\n   Console::WriteLine( timeFmt, &quot;Minimum TimeSpan&quot;, Align( TimeSpan::MinValue ) );\n   Console::WriteLine( timeFmt, &quot;Zero TimeSpan&quot;, Align( TimeSpan::Zero ) );\n   Console::WriteLine();\n   \n   // Display the ticks-per-time-unit fields.\n   Console::WriteLine( numberFmt, &quot;Ticks per day&quot;, TimeSpan::TicksPerDay );\n   Console::WriteLine( numberFmt, &quot;Ticks per hour&quot;, TimeSpan::TicksPerHour );\n   Console::WriteLine( numberFmt, &quot;Ticks per minute&quot;, TimeSpan::TicksPerMinute );\n   Console::WriteLine( numberFmt, &quot;Ticks per second&quot;, TimeSpan::TicksPerSecond );\n   Console::WriteLine( numberFmt, &quot;Ticks per millisecond&quot;, TimeSpan::TicksPerMillisecond );\n}\n\n/*\nThis example of the fields of the TimeSpan class\ngenerates the following output.\n\nField                              Value\n-----                              -----\nMaximum TimeSpan       10675199.02:48:05.4775807\nMinimum TimeSpan      -10675199.02:48:05.4775808\nZero TimeSpan                   00:00:00\n\nTicks per day            864,000,000,000\nTicks per hour            36,000,000,000\nTicks per minute             600,000,000\nTicks per second              10,000,000\nTicks per millisecond             10,000\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.Fields#1\">// Example of the TimeSpan fields.\nusing System;\n\nclass TimeSpanFieldsDemo\n{\n    // Pad the end of a TimeSpan string with spaces if it does not \n    // contain milliseconds.\n    static string Align( TimeSpan interval )\n    {\n        string  intervalStr = interval.ToString( );\n        int     pointIndex = intervalStr.IndexOf( &#39;:&#39; );\n\n        pointIndex = intervalStr.IndexOf( &#39;.&#39;, pointIndex );\n        if( pointIndex &lt; 0 ) intervalStr += &quot;        &quot;;\n        return intervalStr;\n    } \n\n    static void Main( )\n    {\n        const string numberFmt = &quot;{0,-22}{1,18:N0}&quot; ;\n        const string timeFmt = &quot;{0,-22}{1,26}&quot; ;\n\n        Console.WriteLine( \n            &quot;This example of the fields of the TimeSpan class&quot; +\n            &quot;<br>generates the following output.<br>&quot; );\n        Console.WriteLine( numberFmt, &quot;Field&quot;, &quot;Value&quot; );\n        Console.WriteLine( numberFmt, &quot;-----&quot;, &quot;-----&quot; );\n\n        // Display the maximum, minimum, and zero TimeSpan values.\n        Console.WriteLine( timeFmt, &quot;Maximum TimeSpan&quot;, \n            Align( TimeSpan.MaxValue ) );\n        Console.WriteLine( timeFmt, &quot;Minimum TimeSpan&quot;, \n            Align( TimeSpan.MinValue ) );\n        Console.WriteLine( timeFmt, &quot;Zero TimeSpan&quot;, \n            Align( TimeSpan.Zero ) );\n        Console.WriteLine( );\n\n        // Display the ticks-per-time-unit fields.\n        Console.WriteLine( numberFmt, &quot;Ticks per day&quot;, \n            TimeSpan.TicksPerDay );\n        Console.WriteLine( numberFmt, &quot;Ticks per hour&quot;, \n            TimeSpan.TicksPerHour );\n        Console.WriteLine( numberFmt, &quot;Ticks per minute&quot;, \n            TimeSpan.TicksPerMinute );\n        Console.WriteLine( numberFmt, &quot;Ticks per second&quot;, \n            TimeSpan.TicksPerSecond );\n        Console.WriteLine( numberFmt, &quot;Ticks per millisecond&quot;, \n            TimeSpan.TicksPerMillisecond );\n    }\n} \n\n/*\nThis example of the fields of the TimeSpan class\ngenerates the following output.\n\nField                              Value\n-----                              -----\nMaximum TimeSpan       10675199.02:48:05.4775807\nMinimum TimeSpan      -10675199.02:48:05.4775808\nZero TimeSpan                   00:00:00\n\nTicks per day            864,000,000,000\nTicks per hour            36,000,000,000\nTicks per minute             600,000,000\nTicks per second              10,000,000\nTicks per millisecond             10,000\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.Fields#1\">&#39; Example of the TimeSpan fields.\nImports System\nImports Microsoft.VisualBasic\n\nModule TimeSpanFieldsDemo\n    \n    &#39; Pad the end of a TimeSpan string with spaces if it does not \n    &#39; contain milliseconds.\n    Function Align( interval As TimeSpan ) As String\n\n        Dim intervalStr As String = interval.ToString( )\n        Dim pointIndex  As Integer = intervalStr.IndexOf( &quot;:&quot;c )\n\n        pointIndex = intervalStr.IndexOf( &quot;.&quot;c, pointIndex )\n        If pointIndex &lt; 0 Then intervalStr &amp;= &quot;        &quot;\n        Align = intervalStr\n    End Function\n    \n    Sub Main( )\n\n        Const numberFmt As String = &quot;{0,-22}{1,18:N0}&quot;\n        Const timeFmt As String = &quot;{0,-22}{1,26}&quot;\n\n        Console.WriteLine( _\n            &quot;This example of the fields of the TimeSpan class&quot; &amp; _\n            vbCrLf &amp; &quot;generates the following output.&quot; &amp; vbCrLf )\n        Console.WriteLine( numberFmt, &quot;Field&quot;, &quot;Value&quot; )\n        Console.WriteLine( numberFmt, &quot;-----&quot;, &quot;-----&quot; )\n\n        &#39; Display the maximum, minimum, and zero TimeSpan values.\n        Console.WriteLine( timeFmt, &quot;Maximum TimeSpan&quot;, _\n            Align( TimeSpan.MaxValue ) )\n        Console.WriteLine( timeFmt, &quot;Minimum TimeSpan&quot;, _\n            Align( TimeSpan.MinValue ) )\n        Console.WriteLine( timeFmt, &quot;Zero TimeSpan&quot;, _\n            Align( TimeSpan.Zero ) )\n        Console.WriteLine( )\n\n        &#39; Display the ticks-per-time-unit fields.\n        Console.WriteLine( numberFmt, &quot;Ticks per day&quot;, _\n            TimeSpan.TicksPerDay )\n        Console.WriteLine( numberFmt, &quot;Ticks per hour&quot;, _\n            TimeSpan.TicksPerHour )\n        Console.WriteLine( numberFmt, &quot;Ticks per minute&quot;, _\n            TimeSpan.TicksPerMinute )\n        Console.WriteLine( numberFmt, &quot;Ticks per second&quot;, _\n            TimeSpan.TicksPerSecond )\n        Console.WriteLine( numberFmt, &quot;Ticks per millisecond&quot;, _\n            TimeSpan.TicksPerMillisecond )\n    End Sub \nEnd Module \n\n&#39; This example of the fields of the TimeSpan class\n&#39; generates the following output.\n&#39; \n&#39; Field                              Value\n&#39; -----                              -----\n&#39; Maximum TimeSpan       10675199.02:48:05.4775807\n&#39; Minimum TimeSpan      -10675199.02:48:05.4775808\n&#39; Zero TimeSpan                   00:00:00\n&#39; \n&#39; Ticks per day            864,000,000,000\n&#39; Ticks per hour            36,000,000,000\n&#39; Ticks per minute             600,000,000\n&#39; Ticks per second              10,000,000\n&#39; Ticks per millisecond             10,000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_TicksPerSecond\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TicksPerSecond</div>        \r\n          </div>\r\n    \r\n            <p>Represents the number of ticks in 1 second.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const long TicksPerSecond = 10000000;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of this constant is 10 million; that is, 10,000,000.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example references and displays the value of the TicksPerSecond field.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.TimeSpan.Fields#1\">// Example of the TimeSpan fields.\nusing namespace System;\n\n// Pad the end of a TimeSpan string with spaces if it does not \n// contain milliseconds.\nString^ Align( TimeSpan interval )\n{\n   String^ intervalStr = interval.ToString();\n   int pointIndex = intervalStr-&gt;IndexOf( &#39;:&#39; );\n   pointIndex = intervalStr-&gt;IndexOf( &#39;.&#39;, pointIndex );\n   if ( pointIndex &lt; 0 )\n      intervalStr = String::Concat( intervalStr, &quot;        &quot; );\n\n   return intervalStr;\n}\n\nint main()\n{\n   String^ numberFmt = &quot;{0,-22}{1,18:N0}&quot;;\n   String^ timeFmt = &quot;{0,-22}{1,26}&quot;;\n   Console::WriteLine( &quot;This example of the fields of the TimeSpan class&quot;\n   &quot;<br>generates the following output.<br>&quot; );\n   Console::WriteLine( numberFmt, &quot;Field&quot;, &quot;Value&quot; );\n   Console::WriteLine( numberFmt, &quot;-----&quot;, &quot;-----&quot; );\n   \n   // Display the maximum, minimum, and zero TimeSpan values.\n   Console::WriteLine( timeFmt, &quot;Maximum TimeSpan&quot;, Align( TimeSpan::MaxValue ) );\n   Console::WriteLine( timeFmt, &quot;Minimum TimeSpan&quot;, Align( TimeSpan::MinValue ) );\n   Console::WriteLine( timeFmt, &quot;Zero TimeSpan&quot;, Align( TimeSpan::Zero ) );\n   Console::WriteLine();\n   \n   // Display the ticks-per-time-unit fields.\n   Console::WriteLine( numberFmt, &quot;Ticks per day&quot;, TimeSpan::TicksPerDay );\n   Console::WriteLine( numberFmt, &quot;Ticks per hour&quot;, TimeSpan::TicksPerHour );\n   Console::WriteLine( numberFmt, &quot;Ticks per minute&quot;, TimeSpan::TicksPerMinute );\n   Console::WriteLine( numberFmt, &quot;Ticks per second&quot;, TimeSpan::TicksPerSecond );\n   Console::WriteLine( numberFmt, &quot;Ticks per millisecond&quot;, TimeSpan::TicksPerMillisecond );\n}\n\n/*\nThis example of the fields of the TimeSpan class\ngenerates the following output.\n\nField                              Value\n-----                              -----\nMaximum TimeSpan       10675199.02:48:05.4775807\nMinimum TimeSpan      -10675199.02:48:05.4775808\nZero TimeSpan                   00:00:00\n\nTicks per day            864,000,000,000\nTicks per hour            36,000,000,000\nTicks per minute             600,000,000\nTicks per second              10,000,000\nTicks per millisecond             10,000\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.Fields#1\">// Example of the TimeSpan fields.\nusing System;\n\nclass TimeSpanFieldsDemo\n{\n    // Pad the end of a TimeSpan string with spaces if it does not \n    // contain milliseconds.\n    static string Align( TimeSpan interval )\n    {\n        string  intervalStr = interval.ToString( );\n        int     pointIndex = intervalStr.IndexOf( &#39;:&#39; );\n\n        pointIndex = intervalStr.IndexOf( &#39;.&#39;, pointIndex );\n        if( pointIndex &lt; 0 ) intervalStr += &quot;        &quot;;\n        return intervalStr;\n    } \n\n    static void Main( )\n    {\n        const string numberFmt = &quot;{0,-22}{1,18:N0}&quot; ;\n        const string timeFmt = &quot;{0,-22}{1,26}&quot; ;\n\n        Console.WriteLine( \n            &quot;This example of the fields of the TimeSpan class&quot; +\n            &quot;<br>generates the following output.<br>&quot; );\n        Console.WriteLine( numberFmt, &quot;Field&quot;, &quot;Value&quot; );\n        Console.WriteLine( numberFmt, &quot;-----&quot;, &quot;-----&quot; );\n\n        // Display the maximum, minimum, and zero TimeSpan values.\n        Console.WriteLine( timeFmt, &quot;Maximum TimeSpan&quot;, \n            Align( TimeSpan.MaxValue ) );\n        Console.WriteLine( timeFmt, &quot;Minimum TimeSpan&quot;, \n            Align( TimeSpan.MinValue ) );\n        Console.WriteLine( timeFmt, &quot;Zero TimeSpan&quot;, \n            Align( TimeSpan.Zero ) );\n        Console.WriteLine( );\n\n        // Display the ticks-per-time-unit fields.\n        Console.WriteLine( numberFmt, &quot;Ticks per day&quot;, \n            TimeSpan.TicksPerDay );\n        Console.WriteLine( numberFmt, &quot;Ticks per hour&quot;, \n            TimeSpan.TicksPerHour );\n        Console.WriteLine( numberFmt, &quot;Ticks per minute&quot;, \n            TimeSpan.TicksPerMinute );\n        Console.WriteLine( numberFmt, &quot;Ticks per second&quot;, \n            TimeSpan.TicksPerSecond );\n        Console.WriteLine( numberFmt, &quot;Ticks per millisecond&quot;, \n            TimeSpan.TicksPerMillisecond );\n    }\n} \n\n/*\nThis example of the fields of the TimeSpan class\ngenerates the following output.\n\nField                              Value\n-----                              -----\nMaximum TimeSpan       10675199.02:48:05.4775807\nMinimum TimeSpan      -10675199.02:48:05.4775808\nZero TimeSpan                   00:00:00\n\nTicks per day            864,000,000,000\nTicks per hour            36,000,000,000\nTicks per minute             600,000,000\nTicks per second              10,000,000\nTicks per millisecond             10,000\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.Fields#1\">&#39; Example of the TimeSpan fields.\nImports System\nImports Microsoft.VisualBasic\n\nModule TimeSpanFieldsDemo\n    \n    &#39; Pad the end of a TimeSpan string with spaces if it does not \n    &#39; contain milliseconds.\n    Function Align( interval As TimeSpan ) As String\n\n        Dim intervalStr As String = interval.ToString( )\n        Dim pointIndex  As Integer = intervalStr.IndexOf( &quot;:&quot;c )\n\n        pointIndex = intervalStr.IndexOf( &quot;.&quot;c, pointIndex )\n        If pointIndex &lt; 0 Then intervalStr &amp;= &quot;        &quot;\n        Align = intervalStr\n    End Function\n    \n    Sub Main( )\n\n        Const numberFmt As String = &quot;{0,-22}{1,18:N0}&quot;\n        Const timeFmt As String = &quot;{0,-22}{1,26}&quot;\n\n        Console.WriteLine( _\n            &quot;This example of the fields of the TimeSpan class&quot; &amp; _\n            vbCrLf &amp; &quot;generates the following output.&quot; &amp; vbCrLf )\n        Console.WriteLine( numberFmt, &quot;Field&quot;, &quot;Value&quot; )\n        Console.WriteLine( numberFmt, &quot;-----&quot;, &quot;-----&quot; )\n\n        &#39; Display the maximum, minimum, and zero TimeSpan values.\n        Console.WriteLine( timeFmt, &quot;Maximum TimeSpan&quot;, _\n            Align( TimeSpan.MaxValue ) )\n        Console.WriteLine( timeFmt, &quot;Minimum TimeSpan&quot;, _\n            Align( TimeSpan.MinValue ) )\n        Console.WriteLine( timeFmt, &quot;Zero TimeSpan&quot;, _\n            Align( TimeSpan.Zero ) )\n        Console.WriteLine( )\n\n        &#39; Display the ticks-per-time-unit fields.\n        Console.WriteLine( numberFmt, &quot;Ticks per day&quot;, _\n            TimeSpan.TicksPerDay )\n        Console.WriteLine( numberFmt, &quot;Ticks per hour&quot;, _\n            TimeSpan.TicksPerHour )\n        Console.WriteLine( numberFmt, &quot;Ticks per minute&quot;, _\n            TimeSpan.TicksPerMinute )\n        Console.WriteLine( numberFmt, &quot;Ticks per second&quot;, _\n            TimeSpan.TicksPerSecond )\n        Console.WriteLine( numberFmt, &quot;Ticks per millisecond&quot;, _\n            TimeSpan.TicksPerMillisecond )\n    End Sub \nEnd Module \n\n&#39; This example of the fields of the TimeSpan class\n&#39; generates the following output.\n&#39; \n&#39; Field                              Value\n&#39; -----                              -----\n&#39; Maximum TimeSpan       10675199.02:48:05.4775807\n&#39; Minimum TimeSpan      -10675199.02:48:05.4775808\n&#39; Zero TimeSpan                   00:00:00\n&#39; \n&#39; Ticks per day            864,000,000,000\n&#39; Ticks per hour            36,000,000,000\n&#39; Ticks per minute             600,000,000\n&#39; Ticks per second              10,000,000\n&#39; Ticks per millisecond             10,000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_Zero\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Zero</div>        \r\n          </div>\r\n    \r\n            <p>Represents the zero <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value. This field is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly TimeSpan Zero;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Because the value of the Zero field is a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object that represents a zero time value, you can compare it with other <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> objects to determine whether the latter represent positive, non-zero, or negative time intervals. You can also use this field to initialize a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object to a zero time value.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example references and displays the value of the Zero field.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.TimeSpan.Fields#1\">// Example of the TimeSpan fields.\nusing namespace System;\n\n// Pad the end of a TimeSpan string with spaces if it does not \n// contain milliseconds.\nString^ Align( TimeSpan interval )\n{\n   String^ intervalStr = interval.ToString();\n   int pointIndex = intervalStr-&gt;IndexOf( &#39;:&#39; );\n   pointIndex = intervalStr-&gt;IndexOf( &#39;.&#39;, pointIndex );\n   if ( pointIndex &lt; 0 )\n      intervalStr = String::Concat( intervalStr, &quot;        &quot; );\n\n   return intervalStr;\n}\n\nint main()\n{\n   String^ numberFmt = &quot;{0,-22}{1,18:N0}&quot;;\n   String^ timeFmt = &quot;{0,-22}{1,26}&quot;;\n   Console::WriteLine( &quot;This example of the fields of the TimeSpan class&quot;\n   &quot;<br>generates the following output.<br>&quot; );\n   Console::WriteLine( numberFmt, &quot;Field&quot;, &quot;Value&quot; );\n   Console::WriteLine( numberFmt, &quot;-----&quot;, &quot;-----&quot; );\n   \n   // Display the maximum, minimum, and zero TimeSpan values.\n   Console::WriteLine( timeFmt, &quot;Maximum TimeSpan&quot;, Align( TimeSpan::MaxValue ) );\n   Console::WriteLine( timeFmt, &quot;Minimum TimeSpan&quot;, Align( TimeSpan::MinValue ) );\n   Console::WriteLine( timeFmt, &quot;Zero TimeSpan&quot;, Align( TimeSpan::Zero ) );\n   Console::WriteLine();\n   \n   // Display the ticks-per-time-unit fields.\n   Console::WriteLine( numberFmt, &quot;Ticks per day&quot;, TimeSpan::TicksPerDay );\n   Console::WriteLine( numberFmt, &quot;Ticks per hour&quot;, TimeSpan::TicksPerHour );\n   Console::WriteLine( numberFmt, &quot;Ticks per minute&quot;, TimeSpan::TicksPerMinute );\n   Console::WriteLine( numberFmt, &quot;Ticks per second&quot;, TimeSpan::TicksPerSecond );\n   Console::WriteLine( numberFmt, &quot;Ticks per millisecond&quot;, TimeSpan::TicksPerMillisecond );\n}\n\n/*\nThis example of the fields of the TimeSpan class\ngenerates the following output.\n\nField                              Value\n-----                              -----\nMaximum TimeSpan       10675199.02:48:05.4775807\nMinimum TimeSpan      -10675199.02:48:05.4775808\nZero TimeSpan                   00:00:00\n\nTicks per day            864,000,000,000\nTicks per hour            36,000,000,000\nTicks per minute             600,000,000\nTicks per second              10,000,000\nTicks per millisecond             10,000\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.Fields#1\">// Example of the TimeSpan fields.\nusing System;\n\nclass TimeSpanFieldsDemo\n{\n    // Pad the end of a TimeSpan string with spaces if it does not \n    // contain milliseconds.\n    static string Align( TimeSpan interval )\n    {\n        string  intervalStr = interval.ToString( );\n        int     pointIndex = intervalStr.IndexOf( &#39;:&#39; );\n\n        pointIndex = intervalStr.IndexOf( &#39;.&#39;, pointIndex );\n        if( pointIndex &lt; 0 ) intervalStr += &quot;        &quot;;\n        return intervalStr;\n    } \n\n    static void Main( )\n    {\n        const string numberFmt = &quot;{0,-22}{1,18:N0}&quot; ;\n        const string timeFmt = &quot;{0,-22}{1,26}&quot; ;\n\n        Console.WriteLine( \n            &quot;This example of the fields of the TimeSpan class&quot; +\n            &quot;<br>generates the following output.<br>&quot; );\n        Console.WriteLine( numberFmt, &quot;Field&quot;, &quot;Value&quot; );\n        Console.WriteLine( numberFmt, &quot;-----&quot;, &quot;-----&quot; );\n\n        // Display the maximum, minimum, and zero TimeSpan values.\n        Console.WriteLine( timeFmt, &quot;Maximum TimeSpan&quot;, \n            Align( TimeSpan.MaxValue ) );\n        Console.WriteLine( timeFmt, &quot;Minimum TimeSpan&quot;, \n            Align( TimeSpan.MinValue ) );\n        Console.WriteLine( timeFmt, &quot;Zero TimeSpan&quot;, \n            Align( TimeSpan.Zero ) );\n        Console.WriteLine( );\n\n        // Display the ticks-per-time-unit fields.\n        Console.WriteLine( numberFmt, &quot;Ticks per day&quot;, \n            TimeSpan.TicksPerDay );\n        Console.WriteLine( numberFmt, &quot;Ticks per hour&quot;, \n            TimeSpan.TicksPerHour );\n        Console.WriteLine( numberFmt, &quot;Ticks per minute&quot;, \n            TimeSpan.TicksPerMinute );\n        Console.WriteLine( numberFmt, &quot;Ticks per second&quot;, \n            TimeSpan.TicksPerSecond );\n        Console.WriteLine( numberFmt, &quot;Ticks per millisecond&quot;, \n            TimeSpan.TicksPerMillisecond );\n    }\n} \n\n/*\nThis example of the fields of the TimeSpan class\ngenerates the following output.\n\nField                              Value\n-----                              -----\nMaximum TimeSpan       10675199.02:48:05.4775807\nMinimum TimeSpan      -10675199.02:48:05.4775808\nZero TimeSpan                   00:00:00\n\nTicks per day            864,000,000,000\nTicks per hour            36,000,000,000\nTicks per minute             600,000,000\nTicks per second              10,000,000\nTicks per millisecond             10,000\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.Fields#1\">&#39; Example of the TimeSpan fields.\nImports System\nImports Microsoft.VisualBasic\n\nModule TimeSpanFieldsDemo\n    \n    &#39; Pad the end of a TimeSpan string with spaces if it does not \n    &#39; contain milliseconds.\n    Function Align( interval As TimeSpan ) As String\n\n        Dim intervalStr As String = interval.ToString( )\n        Dim pointIndex  As Integer = intervalStr.IndexOf( &quot;:&quot;c )\n\n        pointIndex = intervalStr.IndexOf( &quot;.&quot;c, pointIndex )\n        If pointIndex &lt; 0 Then intervalStr &amp;= &quot;        &quot;\n        Align = intervalStr\n    End Function\n    \n    Sub Main( )\n\n        Const numberFmt As String = &quot;{0,-22}{1,18:N0}&quot;\n        Const timeFmt As String = &quot;{0,-22}{1,26}&quot;\n\n        Console.WriteLine( _\n            &quot;This example of the fields of the TimeSpan class&quot; &amp; _\n            vbCrLf &amp; &quot;generates the following output.&quot; &amp; vbCrLf )\n        Console.WriteLine( numberFmt, &quot;Field&quot;, &quot;Value&quot; )\n        Console.WriteLine( numberFmt, &quot;-----&quot;, &quot;-----&quot; )\n\n        &#39; Display the maximum, minimum, and zero TimeSpan values.\n        Console.WriteLine( timeFmt, &quot;Maximum TimeSpan&quot;, _\n            Align( TimeSpan.MaxValue ) )\n        Console.WriteLine( timeFmt, &quot;Minimum TimeSpan&quot;, _\n            Align( TimeSpan.MinValue ) )\n        Console.WriteLine( timeFmt, &quot;Zero TimeSpan&quot;, _\n            Align( TimeSpan.Zero ) )\n        Console.WriteLine( )\n\n        &#39; Display the ticks-per-time-unit fields.\n        Console.WriteLine( numberFmt, &quot;Ticks per day&quot;, _\n            TimeSpan.TicksPerDay )\n        Console.WriteLine( numberFmt, &quot;Ticks per hour&quot;, _\n            TimeSpan.TicksPerHour )\n        Console.WriteLine( numberFmt, &quot;Ticks per minute&quot;, _\n            TimeSpan.TicksPerMinute )\n        Console.WriteLine( numberFmt, &quot;Ticks per second&quot;, _\n            TimeSpan.TicksPerSecond )\n        Console.WriteLine( numberFmt, &quot;Ticks per millisecond&quot;, _\n            TimeSpan.TicksPerMillisecond )\n    End Sub \nEnd Module \n\n&#39; This example of the fields of the TimeSpan class\n&#39; generates the following output.\n&#39; \n&#39; Field                              Value\n&#39; -----                              -----\n&#39; Maximum TimeSpan       10675199.02:48:05.4775807\n&#39; Minimum TimeSpan      -10675199.02:48:05.4775808\n&#39; Zero TimeSpan                   00:00:00\n&#39; \n&#39; Ticks per day            864,000,000,000\n&#39; Ticks per hour            36,000,000,000\n&#39; Ticks per minute             600,000,000\n&#39; Ticks per second              10,000,000\n&#39; Ticks per millisecond             10,000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_Days\">\r\n    \r\n            <a id=\"System_TimeSpan_Days_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Days</div>        \r\n          </div>\r\n    \r\n            <p>Gets the days component of the time interval represented by the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> structure.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Days { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The day component of this instance. The return value can be positive or negative.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value can be represented as [<em>-</em>]<em>d</em>.<em>hh</em>:<em>mm</em>:<em>ss</em>.<em>ff</em>, where the optional minus sign indicates a negative time interval, the <em>d</em> component is days, <em>hh</em> is hours as measured on a 24-hour clock, <em>mm</em> is minutes, <em>ss</em> is seconds, and <em>ff</em> is fractions of a second. The value of the Days property is the day component, <em>d</em>.  </p>\n<p> The Days property represents whole days, whereas the <a class=\"xref\" href=\"system.timespan#System_TimeSpan_TotalDays_\" data-linktype=\"relative-path\">TotalDays</a> property represents whole and fractional days.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates several <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> objects and displays the Days property of each.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.TimeSpan.Properties#1\">using namespace System;\n\nstatic void ShowTimeSpanProperties(TimeSpan interval)\n{\n   Console::WriteLine(&quot;{0,21}&quot;, interval );\n   Console::WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n                      &quot;Days&quot;, interval.Days, &quot;TotalDays&quot;,\n                      interval.TotalDays);\n   Console::WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n                      &quot;Hours&quot;, interval.Hours, &quot;TotalHours&quot;,\n                      interval.TotalHours);\n   Console::WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n                      &quot;Minutes&quot;, interval.Minutes, &quot;TotalMinutes&quot;,\n                      interval.TotalMinutes);\n   Console::WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n                      &quot;Seconds&quot;, interval.Seconds, &quot;TotalSeconds&quot;,\n                      interval.TotalSeconds);\n   Console::WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n                      &quot;Milliseconds&quot;, interval.Milliseconds,\n                      &quot;TotalMilliseconds&quot;, interval.TotalMilliseconds);\n   Console::WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N0}&quot;,\n                      nullptr, nullptr, &quot;Ticks&quot;, interval.Ticks);\n}\n\nvoid main()\n{\n   // Create and display a TimeSpan value of 1 tick.\n   Console::Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 1 )&quot;);\n   ShowTimeSpanProperties(TimeSpan(1));\n   \n   // Create a TimeSpan value with a large number of ticks.\n   Console::Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 111222333444555 )&quot;);\n   ShowTimeSpanProperties( TimeSpan(111222333444555));\n   \n   // This TimeSpan has all fields specified.\n   Console::Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 10, 20, 30, 40, 50 )&quot;);\n   ShowTimeSpanProperties( TimeSpan(10,20,30,40,50));\n   \n   // This TimeSpan has all fields overflowing.\n   Console::Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 1111, 2222, 3333, 4444, 5555 )&quot;);\n   ShowTimeSpanProperties( TimeSpan(1111,2222,3333,4444,5555));\n   \n   // This TimeSpan is based on a number of days.\n   Console::Write(&quot;<br>{0,-45}&quot;, &quot;FromDays( 20.84745602 )&quot;);\n   ShowTimeSpanProperties( TimeSpan::FromDays( 20.84745602 ));\n}\n// The example displays the following output if the current culture is en-US:\n//    TimeSpan( 1 )                                     00:00:00.0000001\n//    Days               0       TotalDays                         0.000\n//    Hours              0       TotalHours                        0.000\n//    Minutes            0       TotalMinutes                      0.000\n//    Seconds            0       TotalSeconds                      0.000\n//    Milliseconds       0       TotalMilliseconds                 0.000\n//                               Ticks                                 1\n//\n//    TimeSpan( 111222333444555 )                   128.17:30:33.3444555\n//    Days             128       TotalDays                       128.730\n//    Hours             17       TotalHours                    3,089.509\n//    Minutes           30       TotalMinutes                185,370.556\n//    Seconds           33       TotalSeconds             11,122,233.344\n//    Milliseconds     344       TotalMilliseconds    11,122,233,344.456\n//                               Ticks               111,222,333,444,555\n//\n//    TimeSpan( 10, 20, 30, 40, 50 )                 10.20:30:40.0500000\n//    Days              10       TotalDays                        10.855\n//    Hours             20       TotalHours                      260.511\n//    Minutes           30       TotalMinutes                 15,630.668\n//    Seconds           40       TotalSeconds                937,840.050\n//    Milliseconds      50       TotalMilliseconds       937,840,050.000\n//                               Ticks                 9,378,400,500,000\n//\n//    TimeSpan( 1111, 2222, 3333, 4444, 5555 )     1205.22:47:09.5550000\n//    Days            1205       TotalDays                     1,205.949\n//    Hours             22       TotalHours                   28,942.786\n//    Minutes           47       TotalMinutes              1,736,567.159\n//    Seconds            9       TotalSeconds            104,194,029.555\n//    Milliseconds     555       TotalMilliseconds   104,194,029,555.000\n//                               Ticks             1,041,940,295,550,000\n//\n//    FromDays( 20.84745602 )                        20.20:20:20.2000000\n//    Days              20       TotalDays                        20.847\n//    Hours             20       TotalHours                      500.339\n//    Minutes           20       TotalMinutes                 30,020.337\n//    Seconds           20       TotalSeconds              1,801,220.200\n//    Milliseconds     200       TotalMilliseconds     1,801,220,200.000\n//                               Ticks                18,012,202,000,000\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.Properties#1\">Module Example\n    Sub Main()\n        &#39; Create and display a TimeSpan value of 1 tick.\n        Console.Write(vbCrLf &amp; &quot;{0,-45}&quot;, &quot;TimeSpan( 1 )&quot;)\n        ShowTimeSpanProperties(New TimeSpan(1))\n\n        &#39; Create a TimeSpan value with a large number of ticks.\n        Console.Write(vbCrLf &amp; &quot;{0,-45}&quot;, &quot;TimeSpan( 111222333444555 )&quot;)\n        ShowTimeSpanProperties(New TimeSpan(111222333444555))\n\n        &#39; This TimeSpan has all fields specified.\n        Console.Write(vbCrLf &amp; &quot;{0,-45}&quot;, &quot;TimeSpan( 10, 20, 30, 40, 50 )&quot;)\n        ShowTimeSpanProperties(New TimeSpan( 10, 20, 30, 40, 50))\n\n        &#39; This TimeSpan has all fields overflowing.\n        Console.Write(vbCrLf &amp; &quot;{0,-45}&quot;,\n                      &quot;TimeSpan( 1111, 2222, 3333, 4444, 5555 )&quot;)\n        ShowTimeSpanProperties(New TimeSpan( 1111, 2222, 3333, 4444, 5555))\n\n        &#39; This TimeSpan is based on a number of days.\n        Console.Write( vbCrLf &amp; &quot;{0,-45}&quot;, &quot;FromDays( 20.84745602 )&quot;)\n        ShowTimeSpanProperties(TimeSpan.FromDays( 20.84745602))\n    End Sub\n\n    Sub ShowTimeSpanProperties(interval As TimeSpan)\n        Console.WriteLine(&quot;{0,21}&quot;, interval)\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n            &quot;Days&quot;, interval.Days, &quot;TotalDays&quot;, interval.TotalDays)\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Hours&quot;, interval.Hours,\n            &quot;TotalHours&quot;, interval.TotalHours)\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Minutes&quot;, interval.Minutes,\n            &quot;TotalMinutes&quot;, interval.TotalMinutes)\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Seconds&quot;, interval.Seconds,\n            &quot;TotalSeconds&quot;, interval.TotalSeconds)\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n            &quot;Milliseconds&quot;, interval.Milliseconds,\n            &quot;TotalMilliseconds&quot;, interval.TotalMilliseconds)\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N0}&quot;,\n            Nothing, Nothing, &quot;Ticks&quot;, interval.Ticks)\n    End Sub \nEnd Module\n&#39; The example displays the following output if the current culture is en-US:\n&#39;    TimeSpan( 1 )                                     00:00:00.0000001\n&#39;    Days               0       TotalDays                         0.000\n&#39;    Hours              0       TotalHours                        0.000\n&#39;    Minutes            0       TotalMinutes                      0.000\n&#39;    Seconds            0       TotalSeconds                      0.000\n&#39;    Milliseconds       0       TotalMilliseconds                 0.000\n&#39;                               Ticks                                 1\n&#39;\n&#39;    TimeSpan( 111222333444555 )                   128.17:30:33.3444555\n&#39;    Days             128       TotalDays                       128.730\n&#39;    Hours             17       TotalHours                    3,089.509\n&#39;    Minutes           30       TotalMinutes                185,370.556\n&#39;    Seconds           33       TotalSeconds             11,122,233.344\n&#39;    Milliseconds     344       TotalMilliseconds    11,122,233,344.456\n&#39;                               Ticks               111,222,333,444,555\n&#39;\n&#39;    TimeSpan( 10, 20, 30, 40, 50 )                 10.20:30:40.0500000\n&#39;    Days              10       TotalDays                        10.855\n&#39;    Hours             20       TotalHours                      260.511\n&#39;    Minutes           30       TotalMinutes                 15,630.668\n&#39;    Seconds           40       TotalSeconds                937,840.050\n&#39;    Milliseconds      50       TotalMilliseconds       937,840,050.000\n&#39;                               Ticks                 9,378,400,500,000\n&#39;\n&#39;    TimeSpan( 1111, 2222, 3333, 4444, 5555 )     1205.22:47:09.5550000\n&#39;    Days            1205       TotalDays                     1,205.949\n&#39;    Hours             22       TotalHours                   28,942.786\n&#39;    Minutes           47       TotalMinutes              1,736,567.159\n&#39;    Seconds            9       TotalSeconds            104,194,029.555\n&#39;    Milliseconds     555       TotalMilliseconds   104,194,029,555.000\n&#39;                               Ticks             1,041,940,295,550,000\n&#39;\n&#39;    FromDays( 20.84745602 )                        20.20:20:20.2000000\n&#39;    Days              20       TotalDays                        20.847\n&#39;    Hours             20       TotalHours                      500.339\n&#39;    Minutes           20       TotalMinutes                 30,020.337\n&#39;    Seconds           20       TotalSeconds              1,801,220.200\n&#39;    Milliseconds     200       TotalMilliseconds     1,801,220,200.000\n&#39;                               Ticks                18,012,202,000,000\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.Properties#1\">using System;\n\nclass Example\n{\n    static void Main()\n    {\n        // Create and display a TimeSpan value of 1 tick.\n        Console.Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 1 )&quot;);\n        ShowTimeSpanProperties(new TimeSpan(1));\n\n        // Create a TimeSpan value with a large number of ticks.\n        Console.Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 111222333444555 )&quot;);\n        ShowTimeSpanProperties(new TimeSpan(111222333444555));\n\n        // This TimeSpan has all fields specified.\n        Console.Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 10, 20, 30, 40, 50 )&quot;);\n        ShowTimeSpanProperties(new TimeSpan(10, 20, 30, 40, 50));\n\n        // This TimeSpan has all fields overflowing.\n        Console.Write(&quot;<br>{0,-45}&quot;,\n                      &quot;TimeSpan( 1111, 2222, 3333, 4444, 5555 )&quot;);\n        ShowTimeSpanProperties(\n           new TimeSpan(1111, 2222, 3333, 4444, 5555));\n\n        // This TimeSpan is based on a number of days.\n        Console.Write(&quot;<br>{0,-45}&quot;, &quot;FromDays( 20.84745602 )&quot;);\n        ShowTimeSpanProperties(TimeSpan.FromDays( 20.84745602));\n    }\n\n    static void ShowTimeSpanProperties( TimeSpan interval )\n    {\n        Console.WriteLine(&quot;{0,21}&quot;, interval);\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Days&quot;,\n                          interval.Days, &quot;TotalDays&quot;, interval.TotalDays);\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Hours&quot;,\n                          interval.Hours, &quot;TotalHours&quot;, interval.TotalHours);\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Minutes&quot;,\n                          interval.Minutes, &quot;TotalMinutes&quot;, interval.TotalMinutes);\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Seconds&quot;,\n                          interval.Seconds, &quot;TotalSeconds&quot;, interval.TotalSeconds);\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Milliseconds&quot;,\n                          interval.Milliseconds, &quot;TotalMilliseconds&quot;,\n                          interval.TotalMilliseconds);\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N0}&quot;, null, null,\n            &quot;Ticks&quot;, interval.Ticks);\n    } \n}\n// The example displays the following output if the current culture is en-US:\n//    TimeSpan( 1 )                                     00:00:00.0000001\n//    Days               0       TotalDays                         0.000\n//    Hours              0       TotalHours                        0.000\n//    Minutes            0       TotalMinutes                      0.000\n//    Seconds            0       TotalSeconds                      0.000\n//    Milliseconds       0       TotalMilliseconds                 0.000\n//                               Ticks                                 1\n//\n//    TimeSpan( 111222333444555 )                   128.17:30:33.3444555\n//    Days             128       TotalDays                       128.730\n//    Hours             17       TotalHours                    3,089.509\n//    Minutes           30       TotalMinutes                185,370.556\n//    Seconds           33       TotalSeconds             11,122,233.344\n//    Milliseconds     344       TotalMilliseconds    11,122,233,344.456\n//                               Ticks               111,222,333,444,555\n//\n//    TimeSpan( 10, 20, 30, 40, 50 )                 10.20:30:40.0500000\n//    Days              10       TotalDays                        10.855\n//    Hours             20       TotalHours                      260.511\n//    Minutes           30       TotalMinutes                 15,630.668\n//    Seconds           40       TotalSeconds                937,840.050\n//    Milliseconds      50       TotalMilliseconds       937,840,050.000\n//                               Ticks                 9,378,400,500,000\n//\n//    TimeSpan( 1111, 2222, 3333, 4444, 5555 )     1205.22:47:09.5550000\n//    Days            1205       TotalDays                     1,205.949\n//    Hours             22       TotalHours                   28,942.786\n//    Minutes           47       TotalMinutes              1,736,567.159\n//    Seconds            9       TotalSeconds            104,194,029.555\n//    Milliseconds     555       TotalMilliseconds   104,194,029,555.000\n//                               Ticks             1,041,940,295,550,000\n//\n//    FromDays( 20.84745602 )                        20.20:20:20.2000000\n//    Days              20       TotalDays                        20.847\n//    Hours             20       TotalHours                      500.339\n//    Minutes           20       TotalMinutes                 30,020.337\n//    Seconds           20       TotalSeconds              1,801,220.200\n//    Milliseconds     200       TotalMilliseconds     1,801,220,200.000\n//                               Ticks                18,012,202,000,000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_Hours\">\r\n    \r\n            <a id=\"System_TimeSpan_Hours_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Hours</div>        \r\n          </div>\r\n    \r\n            <p>Gets the hours component of the time interval represented by the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> structure.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Hours { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The hour component of the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> structure. The return value ranges from -23 through 23.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value can be represented as [<em>-</em>]<em>d</em>.<em>hh</em>:<em>mm</em>:<em>ss</em>.<em>ff</em>, where the optional minus sign indicates a negative time interval, the <em>d</em> component is days, <em>hh</em> is hours as measured on a 24-hour clock, <em>mm</em> is minutes, <em>ss</em> is seconds, and <em>ff</em> is fractions of a second. The value of the Hours property is the hours component, <em>hh</em>.  </p>\n<p> The Hours property represents whole hours, whereas the <a class=\"xref\" href=\"system.timespan#System_TimeSpan_TotalHours_\" data-linktype=\"relative-path\">TotalHours</a> property represents whole and fractional hours.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates several <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> objects and displays the Hours property of each.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.TimeSpan.Properties#1\">using namespace System;\n\nstatic void ShowTimeSpanProperties(TimeSpan interval)\n{\n   Console::WriteLine(&quot;{0,21}&quot;, interval );\n   Console::WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n                      &quot;Days&quot;, interval.Days, &quot;TotalDays&quot;,\n                      interval.TotalDays);\n   Console::WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n                      &quot;Hours&quot;, interval.Hours, &quot;TotalHours&quot;,\n                      interval.TotalHours);\n   Console::WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n                      &quot;Minutes&quot;, interval.Minutes, &quot;TotalMinutes&quot;,\n                      interval.TotalMinutes);\n   Console::WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n                      &quot;Seconds&quot;, interval.Seconds, &quot;TotalSeconds&quot;,\n                      interval.TotalSeconds);\n   Console::WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n                      &quot;Milliseconds&quot;, interval.Milliseconds,\n                      &quot;TotalMilliseconds&quot;, interval.TotalMilliseconds);\n   Console::WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N0}&quot;,\n                      nullptr, nullptr, &quot;Ticks&quot;, interval.Ticks);\n}\n\nvoid main()\n{\n   // Create and display a TimeSpan value of 1 tick.\n   Console::Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 1 )&quot;);\n   ShowTimeSpanProperties(TimeSpan(1));\n   \n   // Create a TimeSpan value with a large number of ticks.\n   Console::Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 111222333444555 )&quot;);\n   ShowTimeSpanProperties( TimeSpan(111222333444555));\n   \n   // This TimeSpan has all fields specified.\n   Console::Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 10, 20, 30, 40, 50 )&quot;);\n   ShowTimeSpanProperties( TimeSpan(10,20,30,40,50));\n   \n   // This TimeSpan has all fields overflowing.\n   Console::Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 1111, 2222, 3333, 4444, 5555 )&quot;);\n   ShowTimeSpanProperties( TimeSpan(1111,2222,3333,4444,5555));\n   \n   // This TimeSpan is based on a number of days.\n   Console::Write(&quot;<br>{0,-45}&quot;, &quot;FromDays( 20.84745602 )&quot;);\n   ShowTimeSpanProperties( TimeSpan::FromDays( 20.84745602 ));\n}\n// The example displays the following output if the current culture is en-US:\n//    TimeSpan( 1 )                                     00:00:00.0000001\n//    Days               0       TotalDays                         0.000\n//    Hours              0       TotalHours                        0.000\n//    Minutes            0       TotalMinutes                      0.000\n//    Seconds            0       TotalSeconds                      0.000\n//    Milliseconds       0       TotalMilliseconds                 0.000\n//                               Ticks                                 1\n//\n//    TimeSpan( 111222333444555 )                   128.17:30:33.3444555\n//    Days             128       TotalDays                       128.730\n//    Hours             17       TotalHours                    3,089.509\n//    Minutes           30       TotalMinutes                185,370.556\n//    Seconds           33       TotalSeconds             11,122,233.344\n//    Milliseconds     344       TotalMilliseconds    11,122,233,344.456\n//                               Ticks               111,222,333,444,555\n//\n//    TimeSpan( 10, 20, 30, 40, 50 )                 10.20:30:40.0500000\n//    Days              10       TotalDays                        10.855\n//    Hours             20       TotalHours                      260.511\n//    Minutes           30       TotalMinutes                 15,630.668\n//    Seconds           40       TotalSeconds                937,840.050\n//    Milliseconds      50       TotalMilliseconds       937,840,050.000\n//                               Ticks                 9,378,400,500,000\n//\n//    TimeSpan( 1111, 2222, 3333, 4444, 5555 )     1205.22:47:09.5550000\n//    Days            1205       TotalDays                     1,205.949\n//    Hours             22       TotalHours                   28,942.786\n//    Minutes           47       TotalMinutes              1,736,567.159\n//    Seconds            9       TotalSeconds            104,194,029.555\n//    Milliseconds     555       TotalMilliseconds   104,194,029,555.000\n//                               Ticks             1,041,940,295,550,000\n//\n//    FromDays( 20.84745602 )                        20.20:20:20.2000000\n//    Days              20       TotalDays                        20.847\n//    Hours             20       TotalHours                      500.339\n//    Minutes           20       TotalMinutes                 30,020.337\n//    Seconds           20       TotalSeconds              1,801,220.200\n//    Milliseconds     200       TotalMilliseconds     1,801,220,200.000\n//                               Ticks                18,012,202,000,000\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.Properties#1\">Module Example\n    Sub Main()\n        &#39; Create and display a TimeSpan value of 1 tick.\n        Console.Write(vbCrLf &amp; &quot;{0,-45}&quot;, &quot;TimeSpan( 1 )&quot;)\n        ShowTimeSpanProperties(New TimeSpan(1))\n\n        &#39; Create a TimeSpan value with a large number of ticks.\n        Console.Write(vbCrLf &amp; &quot;{0,-45}&quot;, &quot;TimeSpan( 111222333444555 )&quot;)\n        ShowTimeSpanProperties(New TimeSpan(111222333444555))\n\n        &#39; This TimeSpan has all fields specified.\n        Console.Write(vbCrLf &amp; &quot;{0,-45}&quot;, &quot;TimeSpan( 10, 20, 30, 40, 50 )&quot;)\n        ShowTimeSpanProperties(New TimeSpan( 10, 20, 30, 40, 50))\n\n        &#39; This TimeSpan has all fields overflowing.\n        Console.Write(vbCrLf &amp; &quot;{0,-45}&quot;,\n                      &quot;TimeSpan( 1111, 2222, 3333, 4444, 5555 )&quot;)\n        ShowTimeSpanProperties(New TimeSpan( 1111, 2222, 3333, 4444, 5555))\n\n        &#39; This TimeSpan is based on a number of days.\n        Console.Write( vbCrLf &amp; &quot;{0,-45}&quot;, &quot;FromDays( 20.84745602 )&quot;)\n        ShowTimeSpanProperties(TimeSpan.FromDays( 20.84745602))\n    End Sub\n\n    Sub ShowTimeSpanProperties(interval As TimeSpan)\n        Console.WriteLine(&quot;{0,21}&quot;, interval)\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n            &quot;Days&quot;, interval.Days, &quot;TotalDays&quot;, interval.TotalDays)\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Hours&quot;, interval.Hours,\n            &quot;TotalHours&quot;, interval.TotalHours)\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Minutes&quot;, interval.Minutes,\n            &quot;TotalMinutes&quot;, interval.TotalMinutes)\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Seconds&quot;, interval.Seconds,\n            &quot;TotalSeconds&quot;, interval.TotalSeconds)\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n            &quot;Milliseconds&quot;, interval.Milliseconds,\n            &quot;TotalMilliseconds&quot;, interval.TotalMilliseconds)\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N0}&quot;,\n            Nothing, Nothing, &quot;Ticks&quot;, interval.Ticks)\n    End Sub \nEnd Module\n&#39; The example displays the following output if the current culture is en-US:\n&#39;    TimeSpan( 1 )                                     00:00:00.0000001\n&#39;    Days               0       TotalDays                         0.000\n&#39;    Hours              0       TotalHours                        0.000\n&#39;    Minutes            0       TotalMinutes                      0.000\n&#39;    Seconds            0       TotalSeconds                      0.000\n&#39;    Milliseconds       0       TotalMilliseconds                 0.000\n&#39;                               Ticks                                 1\n&#39;\n&#39;    TimeSpan( 111222333444555 )                   128.17:30:33.3444555\n&#39;    Days             128       TotalDays                       128.730\n&#39;    Hours             17       TotalHours                    3,089.509\n&#39;    Minutes           30       TotalMinutes                185,370.556\n&#39;    Seconds           33       TotalSeconds             11,122,233.344\n&#39;    Milliseconds     344       TotalMilliseconds    11,122,233,344.456\n&#39;                               Ticks               111,222,333,444,555\n&#39;\n&#39;    TimeSpan( 10, 20, 30, 40, 50 )                 10.20:30:40.0500000\n&#39;    Days              10       TotalDays                        10.855\n&#39;    Hours             20       TotalHours                      260.511\n&#39;    Minutes           30       TotalMinutes                 15,630.668\n&#39;    Seconds           40       TotalSeconds                937,840.050\n&#39;    Milliseconds      50       TotalMilliseconds       937,840,050.000\n&#39;                               Ticks                 9,378,400,500,000\n&#39;\n&#39;    TimeSpan( 1111, 2222, 3333, 4444, 5555 )     1205.22:47:09.5550000\n&#39;    Days            1205       TotalDays                     1,205.949\n&#39;    Hours             22       TotalHours                   28,942.786\n&#39;    Minutes           47       TotalMinutes              1,736,567.159\n&#39;    Seconds            9       TotalSeconds            104,194,029.555\n&#39;    Milliseconds     555       TotalMilliseconds   104,194,029,555.000\n&#39;                               Ticks             1,041,940,295,550,000\n&#39;\n&#39;    FromDays( 20.84745602 )                        20.20:20:20.2000000\n&#39;    Days              20       TotalDays                        20.847\n&#39;    Hours             20       TotalHours                      500.339\n&#39;    Minutes           20       TotalMinutes                 30,020.337\n&#39;    Seconds           20       TotalSeconds              1,801,220.200\n&#39;    Milliseconds     200       TotalMilliseconds     1,801,220,200.000\n&#39;                               Ticks                18,012,202,000,000\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.Properties#1\">using System;\n\nclass Example\n{\n    static void Main()\n    {\n        // Create and display a TimeSpan value of 1 tick.\n        Console.Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 1 )&quot;);\n        ShowTimeSpanProperties(new TimeSpan(1));\n\n        // Create a TimeSpan value with a large number of ticks.\n        Console.Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 111222333444555 )&quot;);\n        ShowTimeSpanProperties(new TimeSpan(111222333444555));\n\n        // This TimeSpan has all fields specified.\n        Console.Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 10, 20, 30, 40, 50 )&quot;);\n        ShowTimeSpanProperties(new TimeSpan(10, 20, 30, 40, 50));\n\n        // This TimeSpan has all fields overflowing.\n        Console.Write(&quot;<br>{0,-45}&quot;,\n                      &quot;TimeSpan( 1111, 2222, 3333, 4444, 5555 )&quot;);\n        ShowTimeSpanProperties(\n           new TimeSpan(1111, 2222, 3333, 4444, 5555));\n\n        // This TimeSpan is based on a number of days.\n        Console.Write(&quot;<br>{0,-45}&quot;, &quot;FromDays( 20.84745602 )&quot;);\n        ShowTimeSpanProperties(TimeSpan.FromDays( 20.84745602));\n    }\n\n    static void ShowTimeSpanProperties( TimeSpan interval )\n    {\n        Console.WriteLine(&quot;{0,21}&quot;, interval);\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Days&quot;,\n                          interval.Days, &quot;TotalDays&quot;, interval.TotalDays);\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Hours&quot;,\n                          interval.Hours, &quot;TotalHours&quot;, interval.TotalHours);\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Minutes&quot;,\n                          interval.Minutes, &quot;TotalMinutes&quot;, interval.TotalMinutes);\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Seconds&quot;,\n                          interval.Seconds, &quot;TotalSeconds&quot;, interval.TotalSeconds);\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Milliseconds&quot;,\n                          interval.Milliseconds, &quot;TotalMilliseconds&quot;,\n                          interval.TotalMilliseconds);\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N0}&quot;, null, null,\n            &quot;Ticks&quot;, interval.Ticks);\n    } \n}\n// The example displays the following output if the current culture is en-US:\n//    TimeSpan( 1 )                                     00:00:00.0000001\n//    Days               0       TotalDays                         0.000\n//    Hours              0       TotalHours                        0.000\n//    Minutes            0       TotalMinutes                      0.000\n//    Seconds            0       TotalSeconds                      0.000\n//    Milliseconds       0       TotalMilliseconds                 0.000\n//                               Ticks                                 1\n//\n//    TimeSpan( 111222333444555 )                   128.17:30:33.3444555\n//    Days             128       TotalDays                       128.730\n//    Hours             17       TotalHours                    3,089.509\n//    Minutes           30       TotalMinutes                185,370.556\n//    Seconds           33       TotalSeconds             11,122,233.344\n//    Milliseconds     344       TotalMilliseconds    11,122,233,344.456\n//                               Ticks               111,222,333,444,555\n//\n//    TimeSpan( 10, 20, 30, 40, 50 )                 10.20:30:40.0500000\n//    Days              10       TotalDays                        10.855\n//    Hours             20       TotalHours                      260.511\n//    Minutes           30       TotalMinutes                 15,630.668\n//    Seconds           40       TotalSeconds                937,840.050\n//    Milliseconds      50       TotalMilliseconds       937,840,050.000\n//                               Ticks                 9,378,400,500,000\n//\n//    TimeSpan( 1111, 2222, 3333, 4444, 5555 )     1205.22:47:09.5550000\n//    Days            1205       TotalDays                     1,205.949\n//    Hours             22       TotalHours                   28,942.786\n//    Minutes           47       TotalMinutes              1,736,567.159\n//    Seconds            9       TotalSeconds            104,194,029.555\n//    Milliseconds     555       TotalMilliseconds   104,194,029,555.000\n//                               Ticks             1,041,940,295,550,000\n//\n//    FromDays( 20.84745602 )                        20.20:20:20.2000000\n//    Days              20       TotalDays                        20.847\n//    Hours             20       TotalHours                      500.339\n//    Minutes           20       TotalMinutes                 30,020.337\n//    Seconds           20       TotalSeconds              1,801,220.200\n//    Milliseconds     200       TotalMilliseconds     1,801,220,200.000\n//                               Ticks                18,012,202,000,000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_Milliseconds\">\r\n    \r\n            <a id=\"System_TimeSpan_Milliseconds_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Milliseconds</div>        \r\n          </div>\r\n    \r\n            <p>Gets the milliseconds component of the time interval represented by the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> structure.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Milliseconds { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The millisecond component of the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> structure. The return value ranges from -999 through 999.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value can be represented as [<em>-</em>]<em>d</em>.<em>hh</em>:<em>mm</em>:<em>ss</em>.<em>ff</em>, where the optional minus sign indicates a negative time interval, the <em>d</em> component is days, <em>hh</em> is hours as measured on a 24-hour clock, <em>mm</em> is minutes, <em>ss</em> is seconds, and <em>ff</em> is fractions of a second. The value of the Milliseconds property is the fractional second component, <em>ff</em>.  </p>\n<p> The Milliseconds property represents whole milliseconds, whereas the <a class=\"xref\" href=\"system.timespan#System_TimeSpan_TotalMilliseconds_\" data-linktype=\"relative-path\">TotalMilliseconds</a> property represents whole and fractional milliseconds.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates several <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> objects and displays the Milliseconds property of each.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.TimeSpan.Properties#1\">using namespace System;\n\nstatic void ShowTimeSpanProperties(TimeSpan interval)\n{\n   Console::WriteLine(&quot;{0,21}&quot;, interval );\n   Console::WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n                      &quot;Days&quot;, interval.Days, &quot;TotalDays&quot;,\n                      interval.TotalDays);\n   Console::WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n                      &quot;Hours&quot;, interval.Hours, &quot;TotalHours&quot;,\n                      interval.TotalHours);\n   Console::WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n                      &quot;Minutes&quot;, interval.Minutes, &quot;TotalMinutes&quot;,\n                      interval.TotalMinutes);\n   Console::WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n                      &quot;Seconds&quot;, interval.Seconds, &quot;TotalSeconds&quot;,\n                      interval.TotalSeconds);\n   Console::WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n                      &quot;Milliseconds&quot;, interval.Milliseconds,\n                      &quot;TotalMilliseconds&quot;, interval.TotalMilliseconds);\n   Console::WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N0}&quot;,\n                      nullptr, nullptr, &quot;Ticks&quot;, interval.Ticks);\n}\n\nvoid main()\n{\n   // Create and display a TimeSpan value of 1 tick.\n   Console::Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 1 )&quot;);\n   ShowTimeSpanProperties(TimeSpan(1));\n   \n   // Create a TimeSpan value with a large number of ticks.\n   Console::Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 111222333444555 )&quot;);\n   ShowTimeSpanProperties( TimeSpan(111222333444555));\n   \n   // This TimeSpan has all fields specified.\n   Console::Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 10, 20, 30, 40, 50 )&quot;);\n   ShowTimeSpanProperties( TimeSpan(10,20,30,40,50));\n   \n   // This TimeSpan has all fields overflowing.\n   Console::Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 1111, 2222, 3333, 4444, 5555 )&quot;);\n   ShowTimeSpanProperties( TimeSpan(1111,2222,3333,4444,5555));\n   \n   // This TimeSpan is based on a number of days.\n   Console::Write(&quot;<br>{0,-45}&quot;, &quot;FromDays( 20.84745602 )&quot;);\n   ShowTimeSpanProperties( TimeSpan::FromDays( 20.84745602 ));\n}\n// The example displays the following output if the current culture is en-US:\n//    TimeSpan( 1 )                                     00:00:00.0000001\n//    Days               0       TotalDays                         0.000\n//    Hours              0       TotalHours                        0.000\n//    Minutes            0       TotalMinutes                      0.000\n//    Seconds            0       TotalSeconds                      0.000\n//    Milliseconds       0       TotalMilliseconds                 0.000\n//                               Ticks                                 1\n//\n//    TimeSpan( 111222333444555 )                   128.17:30:33.3444555\n//    Days             128       TotalDays                       128.730\n//    Hours             17       TotalHours                    3,089.509\n//    Minutes           30       TotalMinutes                185,370.556\n//    Seconds           33       TotalSeconds             11,122,233.344\n//    Milliseconds     344       TotalMilliseconds    11,122,233,344.456\n//                               Ticks               111,222,333,444,555\n//\n//    TimeSpan( 10, 20, 30, 40, 50 )                 10.20:30:40.0500000\n//    Days              10       TotalDays                        10.855\n//    Hours             20       TotalHours                      260.511\n//    Minutes           30       TotalMinutes                 15,630.668\n//    Seconds           40       TotalSeconds                937,840.050\n//    Milliseconds      50       TotalMilliseconds       937,840,050.000\n//                               Ticks                 9,378,400,500,000\n//\n//    TimeSpan( 1111, 2222, 3333, 4444, 5555 )     1205.22:47:09.5550000\n//    Days            1205       TotalDays                     1,205.949\n//    Hours             22       TotalHours                   28,942.786\n//    Minutes           47       TotalMinutes              1,736,567.159\n//    Seconds            9       TotalSeconds            104,194,029.555\n//    Milliseconds     555       TotalMilliseconds   104,194,029,555.000\n//                               Ticks             1,041,940,295,550,000\n//\n//    FromDays( 20.84745602 )                        20.20:20:20.2000000\n//    Days              20       TotalDays                        20.847\n//    Hours             20       TotalHours                      500.339\n//    Minutes           20       TotalMinutes                 30,020.337\n//    Seconds           20       TotalSeconds              1,801,220.200\n//    Milliseconds     200       TotalMilliseconds     1,801,220,200.000\n//                               Ticks                18,012,202,000,000\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.Properties#1\">Module Example\n    Sub Main()\n        &#39; Create and display a TimeSpan value of 1 tick.\n        Console.Write(vbCrLf &amp; &quot;{0,-45}&quot;, &quot;TimeSpan( 1 )&quot;)\n        ShowTimeSpanProperties(New TimeSpan(1))\n\n        &#39; Create a TimeSpan value with a large number of ticks.\n        Console.Write(vbCrLf &amp; &quot;{0,-45}&quot;, &quot;TimeSpan( 111222333444555 )&quot;)\n        ShowTimeSpanProperties(New TimeSpan(111222333444555))\n\n        &#39; This TimeSpan has all fields specified.\n        Console.Write(vbCrLf &amp; &quot;{0,-45}&quot;, &quot;TimeSpan( 10, 20, 30, 40, 50 )&quot;)\n        ShowTimeSpanProperties(New TimeSpan( 10, 20, 30, 40, 50))\n\n        &#39; This TimeSpan has all fields overflowing.\n        Console.Write(vbCrLf &amp; &quot;{0,-45}&quot;,\n                      &quot;TimeSpan( 1111, 2222, 3333, 4444, 5555 )&quot;)\n        ShowTimeSpanProperties(New TimeSpan( 1111, 2222, 3333, 4444, 5555))\n\n        &#39; This TimeSpan is based on a number of days.\n        Console.Write( vbCrLf &amp; &quot;{0,-45}&quot;, &quot;FromDays( 20.84745602 )&quot;)\n        ShowTimeSpanProperties(TimeSpan.FromDays( 20.84745602))\n    End Sub\n\n    Sub ShowTimeSpanProperties(interval As TimeSpan)\n        Console.WriteLine(&quot;{0,21}&quot;, interval)\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n            &quot;Days&quot;, interval.Days, &quot;TotalDays&quot;, interval.TotalDays)\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Hours&quot;, interval.Hours,\n            &quot;TotalHours&quot;, interval.TotalHours)\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Minutes&quot;, interval.Minutes,\n            &quot;TotalMinutes&quot;, interval.TotalMinutes)\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Seconds&quot;, interval.Seconds,\n            &quot;TotalSeconds&quot;, interval.TotalSeconds)\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n            &quot;Milliseconds&quot;, interval.Milliseconds,\n            &quot;TotalMilliseconds&quot;, interval.TotalMilliseconds)\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N0}&quot;,\n            Nothing, Nothing, &quot;Ticks&quot;, interval.Ticks)\n    End Sub \nEnd Module\n&#39; The example displays the following output if the current culture is en-US:\n&#39;    TimeSpan( 1 )                                     00:00:00.0000001\n&#39;    Days               0       TotalDays                         0.000\n&#39;    Hours              0       TotalHours                        0.000\n&#39;    Minutes            0       TotalMinutes                      0.000\n&#39;    Seconds            0       TotalSeconds                      0.000\n&#39;    Milliseconds       0       TotalMilliseconds                 0.000\n&#39;                               Ticks                                 1\n&#39;\n&#39;    TimeSpan( 111222333444555 )                   128.17:30:33.3444555\n&#39;    Days             128       TotalDays                       128.730\n&#39;    Hours             17       TotalHours                    3,089.509\n&#39;    Minutes           30       TotalMinutes                185,370.556\n&#39;    Seconds           33       TotalSeconds             11,122,233.344\n&#39;    Milliseconds     344       TotalMilliseconds    11,122,233,344.456\n&#39;                               Ticks               111,222,333,444,555\n&#39;\n&#39;    TimeSpan( 10, 20, 30, 40, 50 )                 10.20:30:40.0500000\n&#39;    Days              10       TotalDays                        10.855\n&#39;    Hours             20       TotalHours                      260.511\n&#39;    Minutes           30       TotalMinutes                 15,630.668\n&#39;    Seconds           40       TotalSeconds                937,840.050\n&#39;    Milliseconds      50       TotalMilliseconds       937,840,050.000\n&#39;                               Ticks                 9,378,400,500,000\n&#39;\n&#39;    TimeSpan( 1111, 2222, 3333, 4444, 5555 )     1205.22:47:09.5550000\n&#39;    Days            1205       TotalDays                     1,205.949\n&#39;    Hours             22       TotalHours                   28,942.786\n&#39;    Minutes           47       TotalMinutes              1,736,567.159\n&#39;    Seconds            9       TotalSeconds            104,194,029.555\n&#39;    Milliseconds     555       TotalMilliseconds   104,194,029,555.000\n&#39;                               Ticks             1,041,940,295,550,000\n&#39;\n&#39;    FromDays( 20.84745602 )                        20.20:20:20.2000000\n&#39;    Days              20       TotalDays                        20.847\n&#39;    Hours             20       TotalHours                      500.339\n&#39;    Minutes           20       TotalMinutes                 30,020.337\n&#39;    Seconds           20       TotalSeconds              1,801,220.200\n&#39;    Milliseconds     200       TotalMilliseconds     1,801,220,200.000\n&#39;                               Ticks                18,012,202,000,000\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.Properties#1\">using System;\n\nclass Example\n{\n    static void Main()\n    {\n        // Create and display a TimeSpan value of 1 tick.\n        Console.Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 1 )&quot;);\n        ShowTimeSpanProperties(new TimeSpan(1));\n\n        // Create a TimeSpan value with a large number of ticks.\n        Console.Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 111222333444555 )&quot;);\n        ShowTimeSpanProperties(new TimeSpan(111222333444555));\n\n        // This TimeSpan has all fields specified.\n        Console.Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 10, 20, 30, 40, 50 )&quot;);\n        ShowTimeSpanProperties(new TimeSpan(10, 20, 30, 40, 50));\n\n        // This TimeSpan has all fields overflowing.\n        Console.Write(&quot;<br>{0,-45}&quot;,\n                      &quot;TimeSpan( 1111, 2222, 3333, 4444, 5555 )&quot;);\n        ShowTimeSpanProperties(\n           new TimeSpan(1111, 2222, 3333, 4444, 5555));\n\n        // This TimeSpan is based on a number of days.\n        Console.Write(&quot;<br>{0,-45}&quot;, &quot;FromDays( 20.84745602 )&quot;);\n        ShowTimeSpanProperties(TimeSpan.FromDays( 20.84745602));\n    }\n\n    static void ShowTimeSpanProperties( TimeSpan interval )\n    {\n        Console.WriteLine(&quot;{0,21}&quot;, interval);\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Days&quot;,\n                          interval.Days, &quot;TotalDays&quot;, interval.TotalDays);\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Hours&quot;,\n                          interval.Hours, &quot;TotalHours&quot;, interval.TotalHours);\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Minutes&quot;,\n                          interval.Minutes, &quot;TotalMinutes&quot;, interval.TotalMinutes);\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Seconds&quot;,\n                          interval.Seconds, &quot;TotalSeconds&quot;, interval.TotalSeconds);\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Milliseconds&quot;,\n                          interval.Milliseconds, &quot;TotalMilliseconds&quot;,\n                          interval.TotalMilliseconds);\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N0}&quot;, null, null,\n            &quot;Ticks&quot;, interval.Ticks);\n    } \n}\n// The example displays the following output if the current culture is en-US:\n//    TimeSpan( 1 )                                     00:00:00.0000001\n//    Days               0       TotalDays                         0.000\n//    Hours              0       TotalHours                        0.000\n//    Minutes            0       TotalMinutes                      0.000\n//    Seconds            0       TotalSeconds                      0.000\n//    Milliseconds       0       TotalMilliseconds                 0.000\n//                               Ticks                                 1\n//\n//    TimeSpan( 111222333444555 )                   128.17:30:33.3444555\n//    Days             128       TotalDays                       128.730\n//    Hours             17       TotalHours                    3,089.509\n//    Minutes           30       TotalMinutes                185,370.556\n//    Seconds           33       TotalSeconds             11,122,233.344\n//    Milliseconds     344       TotalMilliseconds    11,122,233,344.456\n//                               Ticks               111,222,333,444,555\n//\n//    TimeSpan( 10, 20, 30, 40, 50 )                 10.20:30:40.0500000\n//    Days              10       TotalDays                        10.855\n//    Hours             20       TotalHours                      260.511\n//    Minutes           30       TotalMinutes                 15,630.668\n//    Seconds           40       TotalSeconds                937,840.050\n//    Milliseconds      50       TotalMilliseconds       937,840,050.000\n//                               Ticks                 9,378,400,500,000\n//\n//    TimeSpan( 1111, 2222, 3333, 4444, 5555 )     1205.22:47:09.5550000\n//    Days            1205       TotalDays                     1,205.949\n//    Hours             22       TotalHours                   28,942.786\n//    Minutes           47       TotalMinutes              1,736,567.159\n//    Seconds            9       TotalSeconds            104,194,029.555\n//    Milliseconds     555       TotalMilliseconds   104,194,029,555.000\n//                               Ticks             1,041,940,295,550,000\n//\n//    FromDays( 20.84745602 )                        20.20:20:20.2000000\n//    Days              20       TotalDays                        20.847\n//    Hours             20       TotalHours                      500.339\n//    Minutes           20       TotalMinutes                 30,020.337\n//    Seconds           20       TotalSeconds              1,801,220.200\n//    Milliseconds     200       TotalMilliseconds     1,801,220,200.000\n//                               Ticks                18,012,202,000,000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_Minutes\">\r\n    \r\n            <a id=\"System_TimeSpan_Minutes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Minutes</div>        \r\n          </div>\r\n    \r\n            <p>Gets the minutes component of the time interval represented by the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> structure.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Minutes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The minute component of the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> structure. The return value ranges from -59 through 59.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value can be represented as [<em>-</em>]<em>d</em>.<em>hh</em>:<em>mm</em>:<em>ss</em>.<em>ff</em>, where the optional minus sign indicates a negative time interval, the <em>d</em> component is days, <em>hh</em> is hours as measured on a 24-hour clock, <em>mm</em> is minutes, <em>ss</em> is seconds, and <em>ff</em> is fractions of a second. The value of the Minutes property is the minute component, <em>mm</em>.  </p>\n<p> The Minutes property represents whole minutes, whereas the <a class=\"xref\" href=\"system.timespan#System_TimeSpan_TotalMinutes_\" data-linktype=\"relative-path\">TotalMinutes</a> property represents whole and fractional minutes.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates several <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> objects and displays the Minutes property of each.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.TimeSpan.Properties#1\">using namespace System;\n\nstatic void ShowTimeSpanProperties(TimeSpan interval)\n{\n   Console::WriteLine(&quot;{0,21}&quot;, interval );\n   Console::WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n                      &quot;Days&quot;, interval.Days, &quot;TotalDays&quot;,\n                      interval.TotalDays);\n   Console::WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n                      &quot;Hours&quot;, interval.Hours, &quot;TotalHours&quot;,\n                      interval.TotalHours);\n   Console::WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n                      &quot;Minutes&quot;, interval.Minutes, &quot;TotalMinutes&quot;,\n                      interval.TotalMinutes);\n   Console::WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n                      &quot;Seconds&quot;, interval.Seconds, &quot;TotalSeconds&quot;,\n                      interval.TotalSeconds);\n   Console::WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n                      &quot;Milliseconds&quot;, interval.Milliseconds,\n                      &quot;TotalMilliseconds&quot;, interval.TotalMilliseconds);\n   Console::WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N0}&quot;,\n                      nullptr, nullptr, &quot;Ticks&quot;, interval.Ticks);\n}\n\nvoid main()\n{\n   // Create and display a TimeSpan value of 1 tick.\n   Console::Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 1 )&quot;);\n   ShowTimeSpanProperties(TimeSpan(1));\n   \n   // Create a TimeSpan value with a large number of ticks.\n   Console::Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 111222333444555 )&quot;);\n   ShowTimeSpanProperties( TimeSpan(111222333444555));\n   \n   // This TimeSpan has all fields specified.\n   Console::Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 10, 20, 30, 40, 50 )&quot;);\n   ShowTimeSpanProperties( TimeSpan(10,20,30,40,50));\n   \n   // This TimeSpan has all fields overflowing.\n   Console::Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 1111, 2222, 3333, 4444, 5555 )&quot;);\n   ShowTimeSpanProperties( TimeSpan(1111,2222,3333,4444,5555));\n   \n   // This TimeSpan is based on a number of days.\n   Console::Write(&quot;<br>{0,-45}&quot;, &quot;FromDays( 20.84745602 )&quot;);\n   ShowTimeSpanProperties( TimeSpan::FromDays( 20.84745602 ));\n}\n// The example displays the following output if the current culture is en-US:\n//    TimeSpan( 1 )                                     00:00:00.0000001\n//    Days               0       TotalDays                         0.000\n//    Hours              0       TotalHours                        0.000\n//    Minutes            0       TotalMinutes                      0.000\n//    Seconds            0       TotalSeconds                      0.000\n//    Milliseconds       0       TotalMilliseconds                 0.000\n//                               Ticks                                 1\n//\n//    TimeSpan( 111222333444555 )                   128.17:30:33.3444555\n//    Days             128       TotalDays                       128.730\n//    Hours             17       TotalHours                    3,089.509\n//    Minutes           30       TotalMinutes                185,370.556\n//    Seconds           33       TotalSeconds             11,122,233.344\n//    Milliseconds     344       TotalMilliseconds    11,122,233,344.456\n//                               Ticks               111,222,333,444,555\n//\n//    TimeSpan( 10, 20, 30, 40, 50 )                 10.20:30:40.0500000\n//    Days              10       TotalDays                        10.855\n//    Hours             20       TotalHours                      260.511\n//    Minutes           30       TotalMinutes                 15,630.668\n//    Seconds           40       TotalSeconds                937,840.050\n//    Milliseconds      50       TotalMilliseconds       937,840,050.000\n//                               Ticks                 9,378,400,500,000\n//\n//    TimeSpan( 1111, 2222, 3333, 4444, 5555 )     1205.22:47:09.5550000\n//    Days            1205       TotalDays                     1,205.949\n//    Hours             22       TotalHours                   28,942.786\n//    Minutes           47       TotalMinutes              1,736,567.159\n//    Seconds            9       TotalSeconds            104,194,029.555\n//    Milliseconds     555       TotalMilliseconds   104,194,029,555.000\n//                               Ticks             1,041,940,295,550,000\n//\n//    FromDays( 20.84745602 )                        20.20:20:20.2000000\n//    Days              20       TotalDays                        20.847\n//    Hours             20       TotalHours                      500.339\n//    Minutes           20       TotalMinutes                 30,020.337\n//    Seconds           20       TotalSeconds              1,801,220.200\n//    Milliseconds     200       TotalMilliseconds     1,801,220,200.000\n//                               Ticks                18,012,202,000,000\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.Properties#1\">Module Example\n    Sub Main()\n        &#39; Create and display a TimeSpan value of 1 tick.\n        Console.Write(vbCrLf &amp; &quot;{0,-45}&quot;, &quot;TimeSpan( 1 )&quot;)\n        ShowTimeSpanProperties(New TimeSpan(1))\n\n        &#39; Create a TimeSpan value with a large number of ticks.\n        Console.Write(vbCrLf &amp; &quot;{0,-45}&quot;, &quot;TimeSpan( 111222333444555 )&quot;)\n        ShowTimeSpanProperties(New TimeSpan(111222333444555))\n\n        &#39; This TimeSpan has all fields specified.\n        Console.Write(vbCrLf &amp; &quot;{0,-45}&quot;, &quot;TimeSpan( 10, 20, 30, 40, 50 )&quot;)\n        ShowTimeSpanProperties(New TimeSpan( 10, 20, 30, 40, 50))\n\n        &#39; This TimeSpan has all fields overflowing.\n        Console.Write(vbCrLf &amp; &quot;{0,-45}&quot;,\n                      &quot;TimeSpan( 1111, 2222, 3333, 4444, 5555 )&quot;)\n        ShowTimeSpanProperties(New TimeSpan( 1111, 2222, 3333, 4444, 5555))\n\n        &#39; This TimeSpan is based on a number of days.\n        Console.Write( vbCrLf &amp; &quot;{0,-45}&quot;, &quot;FromDays( 20.84745602 )&quot;)\n        ShowTimeSpanProperties(TimeSpan.FromDays( 20.84745602))\n    End Sub\n\n    Sub ShowTimeSpanProperties(interval As TimeSpan)\n        Console.WriteLine(&quot;{0,21}&quot;, interval)\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n            &quot;Days&quot;, interval.Days, &quot;TotalDays&quot;, interval.TotalDays)\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Hours&quot;, interval.Hours,\n            &quot;TotalHours&quot;, interval.TotalHours)\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Minutes&quot;, interval.Minutes,\n            &quot;TotalMinutes&quot;, interval.TotalMinutes)\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Seconds&quot;, interval.Seconds,\n            &quot;TotalSeconds&quot;, interval.TotalSeconds)\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n            &quot;Milliseconds&quot;, interval.Milliseconds,\n            &quot;TotalMilliseconds&quot;, interval.TotalMilliseconds)\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N0}&quot;,\n            Nothing, Nothing, &quot;Ticks&quot;, interval.Ticks)\n    End Sub \nEnd Module\n&#39; The example displays the following output if the current culture is en-US:\n&#39;    TimeSpan( 1 )                                     00:00:00.0000001\n&#39;    Days               0       TotalDays                         0.000\n&#39;    Hours              0       TotalHours                        0.000\n&#39;    Minutes            0       TotalMinutes                      0.000\n&#39;    Seconds            0       TotalSeconds                      0.000\n&#39;    Milliseconds       0       TotalMilliseconds                 0.000\n&#39;                               Ticks                                 1\n&#39;\n&#39;    TimeSpan( 111222333444555 )                   128.17:30:33.3444555\n&#39;    Days             128       TotalDays                       128.730\n&#39;    Hours             17       TotalHours                    3,089.509\n&#39;    Minutes           30       TotalMinutes                185,370.556\n&#39;    Seconds           33       TotalSeconds             11,122,233.344\n&#39;    Milliseconds     344       TotalMilliseconds    11,122,233,344.456\n&#39;                               Ticks               111,222,333,444,555\n&#39;\n&#39;    TimeSpan( 10, 20, 30, 40, 50 )                 10.20:30:40.0500000\n&#39;    Days              10       TotalDays                        10.855\n&#39;    Hours             20       TotalHours                      260.511\n&#39;    Minutes           30       TotalMinutes                 15,630.668\n&#39;    Seconds           40       TotalSeconds                937,840.050\n&#39;    Milliseconds      50       TotalMilliseconds       937,840,050.000\n&#39;                               Ticks                 9,378,400,500,000\n&#39;\n&#39;    TimeSpan( 1111, 2222, 3333, 4444, 5555 )     1205.22:47:09.5550000\n&#39;    Days            1205       TotalDays                     1,205.949\n&#39;    Hours             22       TotalHours                   28,942.786\n&#39;    Minutes           47       TotalMinutes              1,736,567.159\n&#39;    Seconds            9       TotalSeconds            104,194,029.555\n&#39;    Milliseconds     555       TotalMilliseconds   104,194,029,555.000\n&#39;                               Ticks             1,041,940,295,550,000\n&#39;\n&#39;    FromDays( 20.84745602 )                        20.20:20:20.2000000\n&#39;    Days              20       TotalDays                        20.847\n&#39;    Hours             20       TotalHours                      500.339\n&#39;    Minutes           20       TotalMinutes                 30,020.337\n&#39;    Seconds           20       TotalSeconds              1,801,220.200\n&#39;    Milliseconds     200       TotalMilliseconds     1,801,220,200.000\n&#39;                               Ticks                18,012,202,000,000\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.Properties#1\">using System;\n\nclass Example\n{\n    static void Main()\n    {\n        // Create and display a TimeSpan value of 1 tick.\n        Console.Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 1 )&quot;);\n        ShowTimeSpanProperties(new TimeSpan(1));\n\n        // Create a TimeSpan value with a large number of ticks.\n        Console.Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 111222333444555 )&quot;);\n        ShowTimeSpanProperties(new TimeSpan(111222333444555));\n\n        // This TimeSpan has all fields specified.\n        Console.Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 10, 20, 30, 40, 50 )&quot;);\n        ShowTimeSpanProperties(new TimeSpan(10, 20, 30, 40, 50));\n\n        // This TimeSpan has all fields overflowing.\n        Console.Write(&quot;<br>{0,-45}&quot;,\n                      &quot;TimeSpan( 1111, 2222, 3333, 4444, 5555 )&quot;);\n        ShowTimeSpanProperties(\n           new TimeSpan(1111, 2222, 3333, 4444, 5555));\n\n        // This TimeSpan is based on a number of days.\n        Console.Write(&quot;<br>{0,-45}&quot;, &quot;FromDays( 20.84745602 )&quot;);\n        ShowTimeSpanProperties(TimeSpan.FromDays( 20.84745602));\n    }\n\n    static void ShowTimeSpanProperties( TimeSpan interval )\n    {\n        Console.WriteLine(&quot;{0,21}&quot;, interval);\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Days&quot;,\n                          interval.Days, &quot;TotalDays&quot;, interval.TotalDays);\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Hours&quot;,\n                          interval.Hours, &quot;TotalHours&quot;, interval.TotalHours);\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Minutes&quot;,\n                          interval.Minutes, &quot;TotalMinutes&quot;, interval.TotalMinutes);\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Seconds&quot;,\n                          interval.Seconds, &quot;TotalSeconds&quot;, interval.TotalSeconds);\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Milliseconds&quot;,\n                          interval.Milliseconds, &quot;TotalMilliseconds&quot;,\n                          interval.TotalMilliseconds);\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N0}&quot;, null, null,\n            &quot;Ticks&quot;, interval.Ticks);\n    } \n}\n// The example displays the following output if the current culture is en-US:\n//    TimeSpan( 1 )                                     00:00:00.0000001\n//    Days               0       TotalDays                         0.000\n//    Hours              0       TotalHours                        0.000\n//    Minutes            0       TotalMinutes                      0.000\n//    Seconds            0       TotalSeconds                      0.000\n//    Milliseconds       0       TotalMilliseconds                 0.000\n//                               Ticks                                 1\n//\n//    TimeSpan( 111222333444555 )                   128.17:30:33.3444555\n//    Days             128       TotalDays                       128.730\n//    Hours             17       TotalHours                    3,089.509\n//    Minutes           30       TotalMinutes                185,370.556\n//    Seconds           33       TotalSeconds             11,122,233.344\n//    Milliseconds     344       TotalMilliseconds    11,122,233,344.456\n//                               Ticks               111,222,333,444,555\n//\n//    TimeSpan( 10, 20, 30, 40, 50 )                 10.20:30:40.0500000\n//    Days              10       TotalDays                        10.855\n//    Hours             20       TotalHours                      260.511\n//    Minutes           30       TotalMinutes                 15,630.668\n//    Seconds           40       TotalSeconds                937,840.050\n//    Milliseconds      50       TotalMilliseconds       937,840,050.000\n//                               Ticks                 9,378,400,500,000\n//\n//    TimeSpan( 1111, 2222, 3333, 4444, 5555 )     1205.22:47:09.5550000\n//    Days            1205       TotalDays                     1,205.949\n//    Hours             22       TotalHours                   28,942.786\n//    Minutes           47       TotalMinutes              1,736,567.159\n//    Seconds            9       TotalSeconds            104,194,029.555\n//    Milliseconds     555       TotalMilliseconds   104,194,029,555.000\n//                               Ticks             1,041,940,295,550,000\n//\n//    FromDays( 20.84745602 )                        20.20:20:20.2000000\n//    Days              20       TotalDays                        20.847\n//    Hours             20       TotalHours                      500.339\n//    Minutes           20       TotalMinutes                 30,020.337\n//    Seconds           20       TotalSeconds              1,801,220.200\n//    Milliseconds     200       TotalMilliseconds     1,801,220,200.000\n//                               Ticks                18,012,202,000,000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_Seconds\">\r\n    \r\n            <a id=\"System_TimeSpan_Seconds_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Seconds</div>        \r\n          </div>\r\n    \r\n            <p>Gets the seconds component of the time interval represented by the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> structure.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Seconds { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The second component of the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> structure. The return value ranges from -59 through 59.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value can be represented as [<em>-</em>]<em>d</em>.<em>hh</em>:<em>mm</em>:<em>ss</em>.<em>ff</em>, where the optional minus sign indicates a negative time interval, the <em>d</em> component is days, <em>hh</em> is hours as measured on a 24-hour clock, <em>mm</em> is minutes, <em>ss</em> is seconds, and <em>ff</em> is fractions of a second. The value of the Seconds property is the seconds component, <em>ss</em>.  </p>\n<p> The Seconds property represents whole seconds, whereas the <a class=\"xref\" href=\"system.timespan#System_TimeSpan_TotalSeconds_\" data-linktype=\"relative-path\">TotalSeconds</a> property represents whole and fractional seconds.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates several <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> objects and displays the Seconds property of each.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.TimeSpan.Properties#1\">using namespace System;\n\nstatic void ShowTimeSpanProperties(TimeSpan interval)\n{\n   Console::WriteLine(&quot;{0,21}&quot;, interval );\n   Console::WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n                      &quot;Days&quot;, interval.Days, &quot;TotalDays&quot;,\n                      interval.TotalDays);\n   Console::WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n                      &quot;Hours&quot;, interval.Hours, &quot;TotalHours&quot;,\n                      interval.TotalHours);\n   Console::WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n                      &quot;Minutes&quot;, interval.Minutes, &quot;TotalMinutes&quot;,\n                      interval.TotalMinutes);\n   Console::WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n                      &quot;Seconds&quot;, interval.Seconds, &quot;TotalSeconds&quot;,\n                      interval.TotalSeconds);\n   Console::WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n                      &quot;Milliseconds&quot;, interval.Milliseconds,\n                      &quot;TotalMilliseconds&quot;, interval.TotalMilliseconds);\n   Console::WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N0}&quot;,\n                      nullptr, nullptr, &quot;Ticks&quot;, interval.Ticks);\n}\n\nvoid main()\n{\n   // Create and display a TimeSpan value of 1 tick.\n   Console::Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 1 )&quot;);\n   ShowTimeSpanProperties(TimeSpan(1));\n   \n   // Create a TimeSpan value with a large number of ticks.\n   Console::Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 111222333444555 )&quot;);\n   ShowTimeSpanProperties( TimeSpan(111222333444555));\n   \n   // This TimeSpan has all fields specified.\n   Console::Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 10, 20, 30, 40, 50 )&quot;);\n   ShowTimeSpanProperties( TimeSpan(10,20,30,40,50));\n   \n   // This TimeSpan has all fields overflowing.\n   Console::Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 1111, 2222, 3333, 4444, 5555 )&quot;);\n   ShowTimeSpanProperties( TimeSpan(1111,2222,3333,4444,5555));\n   \n   // This TimeSpan is based on a number of days.\n   Console::Write(&quot;<br>{0,-45}&quot;, &quot;FromDays( 20.84745602 )&quot;);\n   ShowTimeSpanProperties( TimeSpan::FromDays( 20.84745602 ));\n}\n// The example displays the following output if the current culture is en-US:\n//    TimeSpan( 1 )                                     00:00:00.0000001\n//    Days               0       TotalDays                         0.000\n//    Hours              0       TotalHours                        0.000\n//    Minutes            0       TotalMinutes                      0.000\n//    Seconds            0       TotalSeconds                      0.000\n//    Milliseconds       0       TotalMilliseconds                 0.000\n//                               Ticks                                 1\n//\n//    TimeSpan( 111222333444555 )                   128.17:30:33.3444555\n//    Days             128       TotalDays                       128.730\n//    Hours             17       TotalHours                    3,089.509\n//    Minutes           30       TotalMinutes                185,370.556\n//    Seconds           33       TotalSeconds             11,122,233.344\n//    Milliseconds     344       TotalMilliseconds    11,122,233,344.456\n//                               Ticks               111,222,333,444,555\n//\n//    TimeSpan( 10, 20, 30, 40, 50 )                 10.20:30:40.0500000\n//    Days              10       TotalDays                        10.855\n//    Hours             20       TotalHours                      260.511\n//    Minutes           30       TotalMinutes                 15,630.668\n//    Seconds           40       TotalSeconds                937,840.050\n//    Milliseconds      50       TotalMilliseconds       937,840,050.000\n//                               Ticks                 9,378,400,500,000\n//\n//    TimeSpan( 1111, 2222, 3333, 4444, 5555 )     1205.22:47:09.5550000\n//    Days            1205       TotalDays                     1,205.949\n//    Hours             22       TotalHours                   28,942.786\n//    Minutes           47       TotalMinutes              1,736,567.159\n//    Seconds            9       TotalSeconds            104,194,029.555\n//    Milliseconds     555       TotalMilliseconds   104,194,029,555.000\n//                               Ticks             1,041,940,295,550,000\n//\n//    FromDays( 20.84745602 )                        20.20:20:20.2000000\n//    Days              20       TotalDays                        20.847\n//    Hours             20       TotalHours                      500.339\n//    Minutes           20       TotalMinutes                 30,020.337\n//    Seconds           20       TotalSeconds              1,801,220.200\n//    Milliseconds     200       TotalMilliseconds     1,801,220,200.000\n//                               Ticks                18,012,202,000,000\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.Properties#1\">Module Example\n    Sub Main()\n        &#39; Create and display a TimeSpan value of 1 tick.\n        Console.Write(vbCrLf &amp; &quot;{0,-45}&quot;, &quot;TimeSpan( 1 )&quot;)\n        ShowTimeSpanProperties(New TimeSpan(1))\n\n        &#39; Create a TimeSpan value with a large number of ticks.\n        Console.Write(vbCrLf &amp; &quot;{0,-45}&quot;, &quot;TimeSpan( 111222333444555 )&quot;)\n        ShowTimeSpanProperties(New TimeSpan(111222333444555))\n\n        &#39; This TimeSpan has all fields specified.\n        Console.Write(vbCrLf &amp; &quot;{0,-45}&quot;, &quot;TimeSpan( 10, 20, 30, 40, 50 )&quot;)\n        ShowTimeSpanProperties(New TimeSpan( 10, 20, 30, 40, 50))\n\n        &#39; This TimeSpan has all fields overflowing.\n        Console.Write(vbCrLf &amp; &quot;{0,-45}&quot;,\n                      &quot;TimeSpan( 1111, 2222, 3333, 4444, 5555 )&quot;)\n        ShowTimeSpanProperties(New TimeSpan( 1111, 2222, 3333, 4444, 5555))\n\n        &#39; This TimeSpan is based on a number of days.\n        Console.Write( vbCrLf &amp; &quot;{0,-45}&quot;, &quot;FromDays( 20.84745602 )&quot;)\n        ShowTimeSpanProperties(TimeSpan.FromDays( 20.84745602))\n    End Sub\n\n    Sub ShowTimeSpanProperties(interval As TimeSpan)\n        Console.WriteLine(&quot;{0,21}&quot;, interval)\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n            &quot;Days&quot;, interval.Days, &quot;TotalDays&quot;, interval.TotalDays)\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Hours&quot;, interval.Hours,\n            &quot;TotalHours&quot;, interval.TotalHours)\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Minutes&quot;, interval.Minutes,\n            &quot;TotalMinutes&quot;, interval.TotalMinutes)\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Seconds&quot;, interval.Seconds,\n            &quot;TotalSeconds&quot;, interval.TotalSeconds)\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n            &quot;Milliseconds&quot;, interval.Milliseconds,\n            &quot;TotalMilliseconds&quot;, interval.TotalMilliseconds)\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N0}&quot;,\n            Nothing, Nothing, &quot;Ticks&quot;, interval.Ticks)\n    End Sub \nEnd Module\n&#39; The example displays the following output if the current culture is en-US:\n&#39;    TimeSpan( 1 )                                     00:00:00.0000001\n&#39;    Days               0       TotalDays                         0.000\n&#39;    Hours              0       TotalHours                        0.000\n&#39;    Minutes            0       TotalMinutes                      0.000\n&#39;    Seconds            0       TotalSeconds                      0.000\n&#39;    Milliseconds       0       TotalMilliseconds                 0.000\n&#39;                               Ticks                                 1\n&#39;\n&#39;    TimeSpan( 111222333444555 )                   128.17:30:33.3444555\n&#39;    Days             128       TotalDays                       128.730\n&#39;    Hours             17       TotalHours                    3,089.509\n&#39;    Minutes           30       TotalMinutes                185,370.556\n&#39;    Seconds           33       TotalSeconds             11,122,233.344\n&#39;    Milliseconds     344       TotalMilliseconds    11,122,233,344.456\n&#39;                               Ticks               111,222,333,444,555\n&#39;\n&#39;    TimeSpan( 10, 20, 30, 40, 50 )                 10.20:30:40.0500000\n&#39;    Days              10       TotalDays                        10.855\n&#39;    Hours             20       TotalHours                      260.511\n&#39;    Minutes           30       TotalMinutes                 15,630.668\n&#39;    Seconds           40       TotalSeconds                937,840.050\n&#39;    Milliseconds      50       TotalMilliseconds       937,840,050.000\n&#39;                               Ticks                 9,378,400,500,000\n&#39;\n&#39;    TimeSpan( 1111, 2222, 3333, 4444, 5555 )     1205.22:47:09.5550000\n&#39;    Days            1205       TotalDays                     1,205.949\n&#39;    Hours             22       TotalHours                   28,942.786\n&#39;    Minutes           47       TotalMinutes              1,736,567.159\n&#39;    Seconds            9       TotalSeconds            104,194,029.555\n&#39;    Milliseconds     555       TotalMilliseconds   104,194,029,555.000\n&#39;                               Ticks             1,041,940,295,550,000\n&#39;\n&#39;    FromDays( 20.84745602 )                        20.20:20:20.2000000\n&#39;    Days              20       TotalDays                        20.847\n&#39;    Hours             20       TotalHours                      500.339\n&#39;    Minutes           20       TotalMinutes                 30,020.337\n&#39;    Seconds           20       TotalSeconds              1,801,220.200\n&#39;    Milliseconds     200       TotalMilliseconds     1,801,220,200.000\n&#39;                               Ticks                18,012,202,000,000\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.Properties#1\">using System;\n\nclass Example\n{\n    static void Main()\n    {\n        // Create and display a TimeSpan value of 1 tick.\n        Console.Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 1 )&quot;);\n        ShowTimeSpanProperties(new TimeSpan(1));\n\n        // Create a TimeSpan value with a large number of ticks.\n        Console.Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 111222333444555 )&quot;);\n        ShowTimeSpanProperties(new TimeSpan(111222333444555));\n\n        // This TimeSpan has all fields specified.\n        Console.Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 10, 20, 30, 40, 50 )&quot;);\n        ShowTimeSpanProperties(new TimeSpan(10, 20, 30, 40, 50));\n\n        // This TimeSpan has all fields overflowing.\n        Console.Write(&quot;<br>{0,-45}&quot;,\n                      &quot;TimeSpan( 1111, 2222, 3333, 4444, 5555 )&quot;);\n        ShowTimeSpanProperties(\n           new TimeSpan(1111, 2222, 3333, 4444, 5555));\n\n        // This TimeSpan is based on a number of days.\n        Console.Write(&quot;<br>{0,-45}&quot;, &quot;FromDays( 20.84745602 )&quot;);\n        ShowTimeSpanProperties(TimeSpan.FromDays( 20.84745602));\n    }\n\n    static void ShowTimeSpanProperties( TimeSpan interval )\n    {\n        Console.WriteLine(&quot;{0,21}&quot;, interval);\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Days&quot;,\n                          interval.Days, &quot;TotalDays&quot;, interval.TotalDays);\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Hours&quot;,\n                          interval.Hours, &quot;TotalHours&quot;, interval.TotalHours);\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Minutes&quot;,\n                          interval.Minutes, &quot;TotalMinutes&quot;, interval.TotalMinutes);\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Seconds&quot;,\n                          interval.Seconds, &quot;TotalSeconds&quot;, interval.TotalSeconds);\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Milliseconds&quot;,\n                          interval.Milliseconds, &quot;TotalMilliseconds&quot;,\n                          interval.TotalMilliseconds);\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N0}&quot;, null, null,\n            &quot;Ticks&quot;, interval.Ticks);\n    } \n}\n// The example displays the following output if the current culture is en-US:\n//    TimeSpan( 1 )                                     00:00:00.0000001\n//    Days               0       TotalDays                         0.000\n//    Hours              0       TotalHours                        0.000\n//    Minutes            0       TotalMinutes                      0.000\n//    Seconds            0       TotalSeconds                      0.000\n//    Milliseconds       0       TotalMilliseconds                 0.000\n//                               Ticks                                 1\n//\n//    TimeSpan( 111222333444555 )                   128.17:30:33.3444555\n//    Days             128       TotalDays                       128.730\n//    Hours             17       TotalHours                    3,089.509\n//    Minutes           30       TotalMinutes                185,370.556\n//    Seconds           33       TotalSeconds             11,122,233.344\n//    Milliseconds     344       TotalMilliseconds    11,122,233,344.456\n//                               Ticks               111,222,333,444,555\n//\n//    TimeSpan( 10, 20, 30, 40, 50 )                 10.20:30:40.0500000\n//    Days              10       TotalDays                        10.855\n//    Hours             20       TotalHours                      260.511\n//    Minutes           30       TotalMinutes                 15,630.668\n//    Seconds           40       TotalSeconds                937,840.050\n//    Milliseconds      50       TotalMilliseconds       937,840,050.000\n//                               Ticks                 9,378,400,500,000\n//\n//    TimeSpan( 1111, 2222, 3333, 4444, 5555 )     1205.22:47:09.5550000\n//    Days            1205       TotalDays                     1,205.949\n//    Hours             22       TotalHours                   28,942.786\n//    Minutes           47       TotalMinutes              1,736,567.159\n//    Seconds            9       TotalSeconds            104,194,029.555\n//    Milliseconds     555       TotalMilliseconds   104,194,029,555.000\n//                               Ticks             1,041,940,295,550,000\n//\n//    FromDays( 20.84745602 )                        20.20:20:20.2000000\n//    Days              20       TotalDays                        20.847\n//    Hours             20       TotalHours                      500.339\n//    Minutes           20       TotalMinutes                 30,020.337\n//    Seconds           20       TotalSeconds              1,801,220.200\n//    Milliseconds     200       TotalMilliseconds     1,801,220,200.000\n//                               Ticks                18,012,202,000,000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_Ticks\">\r\n    \r\n            <a id=\"System_TimeSpan_Ticks_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ticks</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of ticks that represent the value of the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> structure.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public long Ticks { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The number of ticks contained in this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The smallest unit of time is the tick, which is equal to 100 nanoseconds or one ten-millionth of a second. There are 10,000 ticks in a millisecond. The value of the Ticks property can be negative or positive to represent a negative or positive time interval.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates several <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> objects and displays the Ticks property of each.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.TimeSpan.Properties#1\">using namespace System;\n\nstatic void ShowTimeSpanProperties(TimeSpan interval)\n{\n   Console::WriteLine(&quot;{0,21}&quot;, interval );\n   Console::WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n                      &quot;Days&quot;, interval.Days, &quot;TotalDays&quot;,\n                      interval.TotalDays);\n   Console::WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n                      &quot;Hours&quot;, interval.Hours, &quot;TotalHours&quot;,\n                      interval.TotalHours);\n   Console::WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n                      &quot;Minutes&quot;, interval.Minutes, &quot;TotalMinutes&quot;,\n                      interval.TotalMinutes);\n   Console::WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n                      &quot;Seconds&quot;, interval.Seconds, &quot;TotalSeconds&quot;,\n                      interval.TotalSeconds);\n   Console::WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n                      &quot;Milliseconds&quot;, interval.Milliseconds,\n                      &quot;TotalMilliseconds&quot;, interval.TotalMilliseconds);\n   Console::WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N0}&quot;,\n                      nullptr, nullptr, &quot;Ticks&quot;, interval.Ticks);\n}\n\nvoid main()\n{\n   // Create and display a TimeSpan value of 1 tick.\n   Console::Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 1 )&quot;);\n   ShowTimeSpanProperties(TimeSpan(1));\n   \n   // Create a TimeSpan value with a large number of ticks.\n   Console::Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 111222333444555 )&quot;);\n   ShowTimeSpanProperties( TimeSpan(111222333444555));\n   \n   // This TimeSpan has all fields specified.\n   Console::Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 10, 20, 30, 40, 50 )&quot;);\n   ShowTimeSpanProperties( TimeSpan(10,20,30,40,50));\n   \n   // This TimeSpan has all fields overflowing.\n   Console::Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 1111, 2222, 3333, 4444, 5555 )&quot;);\n   ShowTimeSpanProperties( TimeSpan(1111,2222,3333,4444,5555));\n   \n   // This TimeSpan is based on a number of days.\n   Console::Write(&quot;<br>{0,-45}&quot;, &quot;FromDays( 20.84745602 )&quot;);\n   ShowTimeSpanProperties( TimeSpan::FromDays( 20.84745602 ));\n}\n// The example displays the following output if the current culture is en-US:\n//    TimeSpan( 1 )                                     00:00:00.0000001\n//    Days               0       TotalDays                         0.000\n//    Hours              0       TotalHours                        0.000\n//    Minutes            0       TotalMinutes                      0.000\n//    Seconds            0       TotalSeconds                      0.000\n//    Milliseconds       0       TotalMilliseconds                 0.000\n//                               Ticks                                 1\n//\n//    TimeSpan( 111222333444555 )                   128.17:30:33.3444555\n//    Days             128       TotalDays                       128.730\n//    Hours             17       TotalHours                    3,089.509\n//    Minutes           30       TotalMinutes                185,370.556\n//    Seconds           33       TotalSeconds             11,122,233.344\n//    Milliseconds     344       TotalMilliseconds    11,122,233,344.456\n//                               Ticks               111,222,333,444,555\n//\n//    TimeSpan( 10, 20, 30, 40, 50 )                 10.20:30:40.0500000\n//    Days              10       TotalDays                        10.855\n//    Hours             20       TotalHours                      260.511\n//    Minutes           30       TotalMinutes                 15,630.668\n//    Seconds           40       TotalSeconds                937,840.050\n//    Milliseconds      50       TotalMilliseconds       937,840,050.000\n//                               Ticks                 9,378,400,500,000\n//\n//    TimeSpan( 1111, 2222, 3333, 4444, 5555 )     1205.22:47:09.5550000\n//    Days            1205       TotalDays                     1,205.949\n//    Hours             22       TotalHours                   28,942.786\n//    Minutes           47       TotalMinutes              1,736,567.159\n//    Seconds            9       TotalSeconds            104,194,029.555\n//    Milliseconds     555       TotalMilliseconds   104,194,029,555.000\n//                               Ticks             1,041,940,295,550,000\n//\n//    FromDays( 20.84745602 )                        20.20:20:20.2000000\n//    Days              20       TotalDays                        20.847\n//    Hours             20       TotalHours                      500.339\n//    Minutes           20       TotalMinutes                 30,020.337\n//    Seconds           20       TotalSeconds              1,801,220.200\n//    Milliseconds     200       TotalMilliseconds     1,801,220,200.000\n//                               Ticks                18,012,202,000,000\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.Properties#1\">Module Example\n    Sub Main()\n        &#39; Create and display a TimeSpan value of 1 tick.\n        Console.Write(vbCrLf &amp; &quot;{0,-45}&quot;, &quot;TimeSpan( 1 )&quot;)\n        ShowTimeSpanProperties(New TimeSpan(1))\n\n        &#39; Create a TimeSpan value with a large number of ticks.\n        Console.Write(vbCrLf &amp; &quot;{0,-45}&quot;, &quot;TimeSpan( 111222333444555 )&quot;)\n        ShowTimeSpanProperties(New TimeSpan(111222333444555))\n\n        &#39; This TimeSpan has all fields specified.\n        Console.Write(vbCrLf &amp; &quot;{0,-45}&quot;, &quot;TimeSpan( 10, 20, 30, 40, 50 )&quot;)\n        ShowTimeSpanProperties(New TimeSpan( 10, 20, 30, 40, 50))\n\n        &#39; This TimeSpan has all fields overflowing.\n        Console.Write(vbCrLf &amp; &quot;{0,-45}&quot;,\n                      &quot;TimeSpan( 1111, 2222, 3333, 4444, 5555 )&quot;)\n        ShowTimeSpanProperties(New TimeSpan( 1111, 2222, 3333, 4444, 5555))\n\n        &#39; This TimeSpan is based on a number of days.\n        Console.Write( vbCrLf &amp; &quot;{0,-45}&quot;, &quot;FromDays( 20.84745602 )&quot;)\n        ShowTimeSpanProperties(TimeSpan.FromDays( 20.84745602))\n    End Sub\n\n    Sub ShowTimeSpanProperties(interval As TimeSpan)\n        Console.WriteLine(&quot;{0,21}&quot;, interval)\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n            &quot;Days&quot;, interval.Days, &quot;TotalDays&quot;, interval.TotalDays)\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Hours&quot;, interval.Hours,\n            &quot;TotalHours&quot;, interval.TotalHours)\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Minutes&quot;, interval.Minutes,\n            &quot;TotalMinutes&quot;, interval.TotalMinutes)\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Seconds&quot;, interval.Seconds,\n            &quot;TotalSeconds&quot;, interval.TotalSeconds)\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;,\n            &quot;Milliseconds&quot;, interval.Milliseconds,\n            &quot;TotalMilliseconds&quot;, interval.TotalMilliseconds)\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N0}&quot;,\n            Nothing, Nothing, &quot;Ticks&quot;, interval.Ticks)\n    End Sub \nEnd Module\n&#39; The example displays the following output if the current culture is en-US:\n&#39;    TimeSpan( 1 )                                     00:00:00.0000001\n&#39;    Days               0       TotalDays                         0.000\n&#39;    Hours              0       TotalHours                        0.000\n&#39;    Minutes            0       TotalMinutes                      0.000\n&#39;    Seconds            0       TotalSeconds                      0.000\n&#39;    Milliseconds       0       TotalMilliseconds                 0.000\n&#39;                               Ticks                                 1\n&#39;\n&#39;    TimeSpan( 111222333444555 )                   128.17:30:33.3444555\n&#39;    Days             128       TotalDays                       128.730\n&#39;    Hours             17       TotalHours                    3,089.509\n&#39;    Minutes           30       TotalMinutes                185,370.556\n&#39;    Seconds           33       TotalSeconds             11,122,233.344\n&#39;    Milliseconds     344       TotalMilliseconds    11,122,233,344.456\n&#39;                               Ticks               111,222,333,444,555\n&#39;\n&#39;    TimeSpan( 10, 20, 30, 40, 50 )                 10.20:30:40.0500000\n&#39;    Days              10       TotalDays                        10.855\n&#39;    Hours             20       TotalHours                      260.511\n&#39;    Minutes           30       TotalMinutes                 15,630.668\n&#39;    Seconds           40       TotalSeconds                937,840.050\n&#39;    Milliseconds      50       TotalMilliseconds       937,840,050.000\n&#39;                               Ticks                 9,378,400,500,000\n&#39;\n&#39;    TimeSpan( 1111, 2222, 3333, 4444, 5555 )     1205.22:47:09.5550000\n&#39;    Days            1205       TotalDays                     1,205.949\n&#39;    Hours             22       TotalHours                   28,942.786\n&#39;    Minutes           47       TotalMinutes              1,736,567.159\n&#39;    Seconds            9       TotalSeconds            104,194,029.555\n&#39;    Milliseconds     555       TotalMilliseconds   104,194,029,555.000\n&#39;                               Ticks             1,041,940,295,550,000\n&#39;\n&#39;    FromDays( 20.84745602 )                        20.20:20:20.2000000\n&#39;    Days              20       TotalDays                        20.847\n&#39;    Hours             20       TotalHours                      500.339\n&#39;    Minutes           20       TotalMinutes                 30,020.337\n&#39;    Seconds           20       TotalSeconds              1,801,220.200\n&#39;    Milliseconds     200       TotalMilliseconds     1,801,220,200.000\n&#39;                               Ticks                18,012,202,000,000\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.Properties#1\">using System;\n\nclass Example\n{\n    static void Main()\n    {\n        // Create and display a TimeSpan value of 1 tick.\n        Console.Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 1 )&quot;);\n        ShowTimeSpanProperties(new TimeSpan(1));\n\n        // Create a TimeSpan value with a large number of ticks.\n        Console.Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 111222333444555 )&quot;);\n        ShowTimeSpanProperties(new TimeSpan(111222333444555));\n\n        // This TimeSpan has all fields specified.\n        Console.Write(&quot;<br>{0,-45}&quot;, &quot;TimeSpan( 10, 20, 30, 40, 50 )&quot;);\n        ShowTimeSpanProperties(new TimeSpan(10, 20, 30, 40, 50));\n\n        // This TimeSpan has all fields overflowing.\n        Console.Write(&quot;<br>{0,-45}&quot;,\n                      &quot;TimeSpan( 1111, 2222, 3333, 4444, 5555 )&quot;);\n        ShowTimeSpanProperties(\n           new TimeSpan(1111, 2222, 3333, 4444, 5555));\n\n        // This TimeSpan is based on a number of days.\n        Console.Write(&quot;<br>{0,-45}&quot;, &quot;FromDays( 20.84745602 )&quot;);\n        ShowTimeSpanProperties(TimeSpan.FromDays( 20.84745602));\n    }\n\n    static void ShowTimeSpanProperties( TimeSpan interval )\n    {\n        Console.WriteLine(&quot;{0,21}&quot;, interval);\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Days&quot;,\n                          interval.Days, &quot;TotalDays&quot;, interval.TotalDays);\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Hours&quot;,\n                          interval.Hours, &quot;TotalHours&quot;, interval.TotalHours);\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Minutes&quot;,\n                          interval.Minutes, &quot;TotalMinutes&quot;, interval.TotalMinutes);\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Seconds&quot;,\n                          interval.Seconds, &quot;TotalSeconds&quot;, interval.TotalSeconds);\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N3}&quot;, &quot;Milliseconds&quot;,\n                          interval.Milliseconds, &quot;TotalMilliseconds&quot;,\n                          interval.TotalMilliseconds);\n        Console.WriteLine(&quot;{0,-12}{1,8}       {2,-18}{3,21:N0}&quot;, null, null,\n            &quot;Ticks&quot;, interval.Ticks);\n    } \n}\n// The example displays the following output if the current culture is en-US:\n//    TimeSpan( 1 )                                     00:00:00.0000001\n//    Days               0       TotalDays                         0.000\n//    Hours              0       TotalHours                        0.000\n//    Minutes            0       TotalMinutes                      0.000\n//    Seconds            0       TotalSeconds                      0.000\n//    Milliseconds       0       TotalMilliseconds                 0.000\n//                               Ticks                                 1\n//\n//    TimeSpan( 111222333444555 )                   128.17:30:33.3444555\n//    Days             128       TotalDays                       128.730\n//    Hours             17       TotalHours                    3,089.509\n//    Minutes           30       TotalMinutes                185,370.556\n//    Seconds           33       TotalSeconds             11,122,233.344\n//    Milliseconds     344       TotalMilliseconds    11,122,233,344.456\n//                               Ticks               111,222,333,444,555\n//\n//    TimeSpan( 10, 20, 30, 40, 50 )                 10.20:30:40.0500000\n//    Days              10       TotalDays                        10.855\n//    Hours             20       TotalHours                      260.511\n//    Minutes           30       TotalMinutes                 15,630.668\n//    Seconds           40       TotalSeconds                937,840.050\n//    Milliseconds      50       TotalMilliseconds       937,840,050.000\n//                               Ticks                 9,378,400,500,000\n//\n//    TimeSpan( 1111, 2222, 3333, 4444, 5555 )     1205.22:47:09.5550000\n//    Days            1205       TotalDays                     1,205.949\n//    Hours             22       TotalHours                   28,942.786\n//    Minutes           47       TotalMinutes              1,736,567.159\n//    Seconds            9       TotalSeconds            104,194,029.555\n//    Milliseconds     555       TotalMilliseconds   104,194,029,555.000\n//                               Ticks             1,041,940,295,550,000\n//\n//    FromDays( 20.84745602 )                        20.20:20:20.2000000\n//    Days              20       TotalDays                        20.847\n//    Hours             20       TotalHours                      500.339\n//    Minutes           20       TotalMinutes                 30,020.337\n//    Seconds           20       TotalSeconds              1,801,220.200\n//    Milliseconds     200       TotalMilliseconds     1,801,220,200.000\n//                               Ticks                18,012,202,000,000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_TotalDays\">\r\n    \r\n            <a id=\"System_TimeSpan_TotalDays_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TotalDays</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> structure expressed in whole and fractional days.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public double TotalDays { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The total number of days represented by this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property converts the value of this instance from ticks to days. This number might include whole and fractional days.  </p>\n<p> The TotalDays property represents whole and fractional days, whereas the <a class=\"xref\" href=\"system.timespan#System_TimeSpan_Days_\" data-linktype=\"relative-path\">Days</a> property represents whole days.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example instantiates a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object and displays the value of its TotalDays property. It also displays the value of each component (hours, minutes, seconds, milliseconds) that forms the fractional part of the value of its TotalDays property.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeSpan.TotalDays#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Define an interval of 3 days, 16+ hours.\n      TimeSpan interval = new TimeSpan(3, 16, 42, 45, 750); \n      Console.WriteLine(&quot;Value of TimeSpan: {0}&quot;, interval);\n      \n      Console.WriteLine(&quot;{0:N5} days, as follows:&quot;, interval.TotalDays);\n      Console.WriteLine(&quot;   Days:         {0,3}&quot;, interval.Days);\n      Console.WriteLine(&quot;   Hours:        {0,3}&quot;, interval.Hours);\n      Console.WriteLine(&quot;   Minutes:      {0,3}&quot;, interval.Minutes);\n      Console.WriteLine(&quot;   Seconds:      {0,3}&quot;, interval.Seconds);\n      Console.WriteLine(&quot;   Milliseconds: {0,3}&quot;, interval.Milliseconds);\n   }\n}\n// The example displays the following output:\n//       Value of TimeSpan: 3.16:42:45.7500000\n//       3.69636 days, as follows:\n//          Days:           3\n//          Hours:         16\n//          Minutes:       42\n//          Seconds:       45\n//          Milliseconds: 750\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.TotalDays#1\">Module Example\n   Public Sub Main()\n      &#39; Define an interval of 3 days, 16+ hours.\n      Dim interval As New TimeSpan(3, 16, 42, 45, 750) \n      Console.WriteLine(&quot;Value of TimeSpan: {0}&quot;, interval)\n      \n      Console.WriteLine(&quot;{0:N5} days, as follows:&quot;, interval.TotalDays)\n      Console.WriteLine(&quot;   Days:         {0,3}&quot;, interval.Days)\n      Console.WriteLine(&quot;   Hours:        {0,3}&quot;, interval.Hours)\n      Console.WriteLine(&quot;   Minutes:      {0,3}&quot;, interval.Minutes)\n      Console.WriteLine(&quot;   Seconds:      {0,3}&quot;, interval.Seconds)\n      Console.WriteLine(&quot;   Milliseconds: {0,3}&quot;, interval.Milliseconds)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Value of TimeSpan: 3.16:42:45.7500000\n&#39;       3.69636 days, as follows:\n&#39;          Days:           3\n&#39;          Hours:         16\n&#39;          Minutes:       42\n&#39;          Seconds:       45\n&#39;          Milliseconds: 750\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_TotalHours\">\r\n    \r\n            <a id=\"System_TimeSpan_TotalHours_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TotalHours</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> structure expressed in whole and fractional hours.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public double TotalHours { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The total number of hours represented by this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property converts the value of this instance from ticks to hours. This number might include whole and fractional hours.  </p>\n<p> The TotalHours property represents whole and fractional hours, whereas the <a class=\"xref\" href=\"system.timespan#System_TimeSpan_Hours_\" data-linktype=\"relative-path\">Hours</a> property represents whole hours.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example instantiates a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object and displays the value its TotalHours property. It also displays the value of each component (hours, minutes, seconds, and milliseconds) that forms the fractional part of the value of its TotalHours property.  </p>\n<pre><code class=\"lang-vb\" name=\"System.TimeSpan.TotalHours#1\">Module Example\n   Public Sub Main()\n      &#39; Define an interval of 1 day, 15+ hours.\n      Dim interval As New TimeSpan(1, 15, 42, 45, 750) \n      Console.WriteLine(&quot;Value of TimeSpan: {0}&quot;, interval)\n      \n      Console.WriteLine(&quot;{0:N5} hours, as follows:&quot;, interval.TotalHours)\n      Console.WriteLine(&quot;   Hours:        {0,3}&quot;, _\n                        interval.Days * 24 + interval.Hours)\n      Console.WriteLine(&quot;   Minutes:      {0,3}&quot;, interval.Minutes)\n      Console.WriteLine(&quot;   Seconds:      {0,3}&quot;, interval.Seconds)\n      Console.WriteLine(&quot;   Milliseconds: {0,3}&quot;, interval.Milliseconds)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Value of TimeSpan: 1.15:42:45.7500000\n&#39;       39.71271 hours, as follows:\n&#39;          Hours:         39\n&#39;          Minutes:       42\n&#39;          Seconds:       45\n&#39;          Milliseconds: 750\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.TotalHours#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Define an interval of 1 day, 15+ hours.\n      TimeSpan interval = new TimeSpan(1, 15, 42, 45, 750); \n      Console.WriteLine(&quot;Value of TimeSpan: {0}&quot;, interval);\n      \n      Console.WriteLine(&quot;{0:N5} hours, as follows:&quot;, interval.TotalHours);\n      Console.WriteLine(&quot;   Hours:        {0,3}&quot;, \n                        interval.Days * 24 + interval.Hours);\n      Console.WriteLine(&quot;   Minutes:      {0,3}&quot;, interval.Minutes);\n      Console.WriteLine(&quot;   Seconds:      {0,3}&quot;, interval.Seconds);\n      Console.WriteLine(&quot;   Milliseconds: {0,3}&quot;, interval.Milliseconds);\n   }\n}\n// The example displays the following output:\n//       Value of TimeSpan: 1.15:42:45.7500000\n//       39.71271 hours, as follows:\n//          Hours:         39\n//          Minutes:       42\n//          Seconds:       45\n//          Milliseconds: 750\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_TotalMilliseconds\">\r\n    \r\n            <a id=\"System_TimeSpan_TotalMilliseconds_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TotalMilliseconds</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> structure expressed in whole and fractional milliseconds.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public double TotalMilliseconds { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The total number of milliseconds represented by this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property converts the value of this instance from ticks to milliseconds. This number might include whole and fractional milliseconds.  </p>\n<p> The TotalMilliseconds property represents whole and fractional milliseconds, whereas the <a class=\"xref\" href=\"system.timespan#System_TimeSpan_Milliseconds_\" data-linktype=\"relative-path\">Milliseconds</a> property represents whole milliseconds.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example instantiates a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object and displays the value of its TotalMilliseconds property.  </p>\n<pre><code class=\"lang-vb\" name=\"System.TimeSpan.TotalMilliseconds#1\">Option Strict On\n\nModule Example\n   Public Sub Main()\n      &#39; Define an interval of 1 day, 15+ hours.\n      Dim interval As New TimeSpan(1, 15, 42, 45, 750) \n      Console.WriteLine(&quot;Value of TimeSpan: {0}&quot;, interval)\n      \n      Console.WriteLine(&quot;There are {0:N5} milliseconds, as follows:&quot;, interval.TotalMilliseconds)\n      Dim nMilliseconds As Long = interval.Days * 24 * 60 * 60 * 1000 + _\n                                     interval.Hours *60 * 60 * 1000 + _\n                                     interval.Minutes * 60 * 1000 + _\n                                     interval.Seconds * 1000 + _\n                                     interval.Milliseconds\n      Console.WriteLine(&quot;   Milliseconds:     {0,18:N0}&quot;, nMilliseconds)\n      Console.WriteLine(&quot;   Ticks:            {0,18:N0}&quot;, nMilliseconds * 10000 - interval.Ticks)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Value of TimeSpan: 1.15:42:45.7500000\n&#39;       There are 142,965,750.00000 milliseconds, as follows:\n&#39;          Milliseconds:            142,965,750\n&#39;          Ticks:                             0\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.TotalMilliseconds#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Define an interval of 1 day, 15+ hours.\n      TimeSpan interval = new TimeSpan(1, 15, 42, 45, 750); \n      Console.WriteLine(&quot;Value of TimeSpan: {0}&quot;, interval);\n      \n      Console.WriteLine(&quot;There are {0:N5} milliseconds, as follows:&quot;, interval.TotalMilliseconds);\n      long nMilliseconds = interval.Days * 24 * 60 * 60 * 1000 + \n                           interval.Hours *60 * 60 * 1000 + \n                           interval.Minutes * 60 * 1000 + \n                           interval.Seconds * 1000 + \n                           interval.Milliseconds;\n      Console.WriteLine(&quot;   Milliseconds:     {0,18:N0}&quot;, nMilliseconds);\n      Console.WriteLine(&quot;   Ticks:            {0,18:N0}&quot;, \n                        nMilliseconds * 10000 - interval.Ticks);\n   }\n}\n// The example displays the following output:\n//       Value of TimeSpan: 1.15:42:45.7500000\n//       There are 142,965,750.00000 milliseconds, as follows:\n//          Milliseconds:            142,965,750\n//          Ticks:                             0\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_TotalMinutes\">\r\n    \r\n            <a id=\"System_TimeSpan_TotalMinutes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TotalMinutes</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> structure expressed in whole and fractional minutes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public double TotalMinutes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The total number of minutes represented by this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property converts the value of this instance from ticks to minutes. This number might include whole and fractional minutes.  </p>\n<p> The TotalMinutes property represents whole and fractional minutes, whereas the <a class=\"xref\" href=\"system.timespan#System_TimeSpan_Minutes_\" data-linktype=\"relative-path\">Minutes</a> property represents whole minutes.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example instantiates a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object and displays the value of its TotalMinutes property. It also displays the value of each component (seconds, milliseconds) that forms the fractional part of the value of its TotalMinutes property.  </p>\n<pre><code class=\"lang-vb\" name=\"System.TimeSpan.TotalMinutes#1\">Module Example\n   Public Sub Main()\n      &#39; Define an interval of 1 day, 15+ hours.\n      Dim interval As New TimeSpan(1, 15, 42, 45, 750) \n      Console.WriteLine(&quot;Value of TimeSpan: {0}&quot;, interval)\n      \n      Console.WriteLine(&quot;{0:N5} minutes, as follows:&quot;, interval.TotalMinutes)\n      Console.WriteLine(&quot;   Minutes:      {0,5}&quot;, interval.Days * 24 * 60 + _ \n                                                  interval.Hours * 60 + _\n                                                  interval.Minutes)\n      Console.WriteLine(&quot;   Seconds:      {0,5}&quot;, interval.Seconds)\n      Console.WriteLine(&quot;   Milliseconds: {0,5}&quot;, interval.Milliseconds)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Value of TimeSpan: 1.15:42:45.7500000\n&#39;       2,382.76250 minutes, as follows:\n&#39;          Minutes:       2382\n&#39;          Seconds:         45\n&#39;          Milliseconds:   750\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.TotalMinutes#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Define an interval of 1 day, 15+ hours.\n      TimeSpan interval = new TimeSpan(1, 15, 42, 45, 750); \n      Console.WriteLine(&quot;Value of TimeSpan: {0}&quot;, interval);\n      \n      Console.WriteLine(&quot;{0:N5} minutes, as follows:&quot;, interval.TotalMinutes);\n      Console.WriteLine(&quot;   Minutes:      {0,5}&quot;, interval.Days * 24 * 60 +  \n                                                  interval.Hours * 60 + \n                                                  interval.Minutes);\n      Console.WriteLine(&quot;   Seconds:      {0,5}&quot;, interval.Seconds);\n      Console.WriteLine(&quot;   Milliseconds: {0,5}&quot;, interval.Milliseconds);\n   }\n}\n// The example displays the following output:\n//       Value of TimeSpan: 1.15:42:45.7500000\n//       2,382.76250 minutes, as follows:\n//          Minutes:       2382\n//          Seconds:         45\n//          Milliseconds:   750\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_TotalSeconds\">\r\n    \r\n            <a id=\"System_TimeSpan_TotalSeconds_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TotalSeconds</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> structure expressed in whole and fractional seconds.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public double TotalSeconds { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The total number of seconds represented by this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property converts the value of this instance from ticks to seconds. This number might include whole and fractional seconds.  </p>\n<p> The TotalSeconds property represents whole and fractional seconds, whereas the <a class=\"xref\" href=\"system.timespan#System_TimeSpan_Seconds_\" data-linktype=\"relative-path\">Seconds</a> property represents whole seconds.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example instantiates a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object and displays the value of its TotalSeconds property. It also displays the value of its milliseconds component, which forms the fractional part of the value of its TotalSeconds property.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeSpan.TotalSeconds#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Define an interval of 1 day, 15+ hours.\n      TimeSpan interval = new TimeSpan(1, 15, 42, 45, 750); \n      Console.WriteLine(&quot;Value of TimeSpan: {0}&quot;, interval);\n      \n      Console.WriteLine(&quot;{0:N5} seconds, as follows:&quot;, interval.TotalSeconds);\n      Console.WriteLine(&quot;   Seconds:      {0,8:N0}&quot;, interval.Days * 24 * 60 * 60 + \n                                                  interval.Hours *60 * 60 + \n                                                  interval.Minutes * 60 + \n                                                  interval.Seconds);\n      Console.WriteLine(&quot;   Milliseconds: {0,8}&quot;, interval.Milliseconds);\n   }\n}\n// The example displays the following output:\n//       Value of TimeSpan: 1.15:42:45.7500000\n//       142,965.75000 seconds, as follows:\n//          Seconds:       142,965\n//          Milliseconds:      750\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.TotalSeconds#1\">Module Example\n   Public Sub Main()\n      &#39; Define an interval of 1 day, 15+ hours.\n      Dim interval As New TimeSpan(1, 15, 42, 45, 750) \n      Console.WriteLine(&quot;Value of TimeSpan: {0}&quot;, interval)\n      \n      Console.WriteLine(&quot;{0:N5} seconds, as follows:&quot;, interval.TotalSeconds)\n      Console.WriteLine(&quot;   Seconds:      {0,8:N0}&quot;, interval.Days * 24 * 60 * 60 + _\n                                                  interval.Hours *60 * 60 + _\n                                                  interval.Minutes * 60 + _\n                                                  interval.Seconds)\n      Console.WriteLine(&quot;   Milliseconds: {0,8}&quot;, interval.Milliseconds)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Value of TimeSpan: 1.15:42:45.7500000\n&#39;       142,965.75000 seconds, as follows:\n&#39;          Seconds:       142,965\n&#39;          Milliseconds:      750\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_Add_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_TimeSpan_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Add(TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a new <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object whose value is the sum of the specified <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object and this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TimeSpan Add (TimeSpan ts);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ts</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The time interval to add.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </div>\r\n                  <p>A new object that represents the value of this instance plus the value of <code>ts</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The resulting <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> is less than <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> or greater than <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value must be between <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">System.TimeSpan</a> and <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">System.TimeSpan</a>; otherwise, an exception is thrown.  </p>\n<p> The return value is a new <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>; the original <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> is not modified.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls the Add method to add each element in an array of time intervals to a base <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeSpan.Add#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      TimeSpan baseTimeSpan = new TimeSpan(1, 12, 15, 16);\n      // Create an array of timespan intervals.\n      TimeSpan[] intervals = { TimeSpan.FromDays(1.5), \n                               TimeSpan.FromHours(1.5), \n                               TimeSpan.FromMinutes(45), \n                               TimeSpan.FromMilliseconds(505),\n                               new TimeSpan(1, 17, 32, 20), \n                               new TimeSpan(-8, 30, 0) };\n      // Calculate a new time interval by adding each element to the base interval.\n      foreach (var interval in intervals)\n         Console.WriteLine(@&quot;{0,-10:g} {3} {1,15:%d\\:hh\\:mm\\:ss\\.ffff} = {2:%d\\:hh\\:mm\\:ss\\.ffff}&quot;, \n                           baseTimeSpan, interval, baseTimeSpan.Add(interval), \n                           interval &lt; TimeSpan.Zero ? &quot;-&quot; : &quot;+&quot;);\n   }\n}\n// The example displays the following output:\n//       1:12:15:16 + 1:12:00:00.0000 = 3:00:15:16.0000\n//       1:12:15:16 + 0:01:30:00.0000 = 1:13:45:16.0000\n//       1:12:15:16 + 0:00:45:00.0000 = 1:13:00:16.0000\n//       1:12:15:16 + 0:00:00:00.5050 = 1:12:15:16.5050\n//       1:12:15:16 + 1:17:32:20.0000 = 3:05:47:36.0000\n//       1:12:15:16 - 0:07:30:00.0000 = 1:04:45:16.0000\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.Add#1\">Module Example\n   Public Sub Main()\n      Dim baseTimeSpan As New TimeSpan(1, 12, 15, 16)\n      &#39; Create an array of timespan intervals.\n      Dim intervals() As TimeSpan = { TimeSpan.FromDays(1.5), \n                                      TimeSpan.FromHours(1.5), \n                                      TimeSpan.FromMinutes(45), \n                                      TimeSpan.FromMilliseconds(505),\n                                      New TimeSpan(1, 17, 32, 20), \n                                      New TimeSpan(-8, 30, 0) }\n      &#39; Calculate a new time interval by adding each element to the base interval.\n      For Each interval In intervals\n         Console.WriteLine(&quot;{0,-10:g} {3} {1,15:%d\\:hh\\:mm\\:ss\\.ffff} = {2:%d\\:hh\\:mm\\:ss\\.ffff}&quot;, baseTimeSpan, interval,\n                           baseTimeSpan.Add(interval), If(interval &lt; TimeSpan.Zero, &quot;-&quot;, &quot;+&quot;))\n      Next                                      \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       1:12:15:16 + 1:12:00:00.0000 = 3:00:15:16.0000\n&#39;       1:12:15:16 + 0:01:30:00.0000 = 1:13:45:16.0000\n&#39;       1:12:15:16 + 0:00:45:00.0000 = 1:13:00:16.0000\n&#39;       1:12:15:16 + 0:00:00:00.5050 = 1:12:15:16.5050\n&#39;       1:12:15:16 + 1:17:32:20.0000 = 3:05:47:36.0000\n&#39;       1:12:15:16 - 0:07:30:00.0000 = 1:04:45:16.0000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_Compare_System_TimeSpan_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_TimeSpan_Compare_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Compare(TimeSpan,TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Compares two <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> values and returns an integer that indicates whether the first value is shorter than, equal to, or longer than the second value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Compare (TimeSpan t1, TimeSpan t2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>t1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first time interval to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>t2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second time interval to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>One of the following values.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Description<br>\n </th></tr></thead><tbody><tr><td> -1<br>\n </td><td><code>t1</code> is shorter than <code>t2</code>.<br>\n </td></tr><tr><td> 0<br>\n </td><td><code>t1</code> is equal to <code>t2</code>.<br>\n </td></tr><tr><td> 1<br>\n </td><td><code>t1</code> is longer than <code>t2</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the Compare method to compare several <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> objects with a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object whose value is a 2-hour time interval.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeSpan.Compare#1\">using System;\n\nclass Example\n{\n    static void Main()\n    {\n        // Define a time interval equal to two hours.\n        TimeSpan baseInterval = new TimeSpan( 2, 0, 0);\n\n        // Define an array of time intervals to compare with\n        // the base interval.\n        TimeSpan[] spans = { TimeSpan.FromSeconds(-2.5),\n                             TimeSpan.FromMinutes(20),\n                             TimeSpan.FromHours(1), \n                             TimeSpan.FromMinutes(90),\n                             baseInterval,  \n                             TimeSpan.FromDays(.5), \n                             TimeSpan.FromDays(1) };\n\n        // Compare the time intervals.\n        foreach (var span in spans) {\n           int result = TimeSpan.Compare(baseInterval, span);\n           Console.WriteLine(&quot;{0} {1} {2} (Compare returns {3})&quot;, \n                             baseInterval,\n                             result == 1 ? &quot;&gt;&quot; : result == 0 ? &quot;=&quot; : &quot;&lt;&quot;,\n                             span, result);     \n        }\n    } \n} \n// The example displays the following output:\n//       02:00:00 &gt; -00:00:02.5000000 (Compare return\n//       02:00:00 &gt; 00:20:00 (Compare returns 1\n//       02:00:00 &gt; 01:00:00 (Compare returns 1\n//       02:00:00 &gt; 01:30:00 (Compare returns 1\n//       02:00:00 = 02:00:00 (Compare returns 0\n//       02:00:00 &lt; 12:00:00 (Compare returns -1\n//       02:00:00 &lt; 1.00:00:00 (Compare returns -1\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.Compare#1\">Public Module Example\n    Public Sub Main()\n        &#39; Define a time interval equal to 2 hours.\n        Dim baseInterval As New TimeSpan( 2, 0, 0)\n\n        &#39; Define an array of time intervals to compare with  \n        &#39; the base interval.\n        Dim spans() As TimeSpan = { TimeSpan.FromSeconds(-2.5),\n                                    TimeSpan.FromMinutes(20),\n                                    TimeSpan.FromHours(1), \n                                    TimeSpan.FromMinutes(90),\n                                    baseInterval,  \n                                    TimeSpan.FromDays(.5), \n                                    TimeSpan.FromDays(1) }\n\n        &#39; Compare the time intervals.\n        For Each span In spans\n           Dim result As Integer = TimeSpan.Compare(baseInterval, span)\n           Console.WriteLine(&quot;{0} {1} {2} (Compare returns {3})&quot;, \n                             baseInterval,\n                             If(result = 1, &quot;&gt;&quot;, If(result = 0, &quot;=&quot;, &quot;&lt;&quot;)),\n                             span, result)\n        Next\n    End Sub \nEnd Module \n&#39; The example displays the following output:\n&#39;       02:00:00 &gt; -00:00:02.5000000 (Compare return\n&#39;       02:00:00 &gt; 00:20:00 (Compare returns 1\n&#39;       02:00:00 &gt; 01:00:00 (Compare returns 1\n&#39;       02:00:00 &gt; 01:30:00 (Compare returns 1\n&#39;       02:00:00 = 02:00:00 (Compare returns 0\n&#39;       02:00:00 &lt; 12:00:00 (Compare returns -1\n&#39;       02:00:00 &lt; 1.00:00:00 (Compare returns -1\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_CompareTo_System_Object_\">\r\n    \r\n            <a id=\"System_TimeSpan_CompareTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CompareTo(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Compares this instance to a specified object and returns an integer that indicates whether this instance is shorter than, equal to, or longer than the specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int CompareTo (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>One of the following values.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Description<br>\n </th></tr></thead><tbody><tr><td> -1<br>\n </td><td> This instance is shorter than <code>value</code>.<br>\n </td></tr><tr><td> 0<br>\n </td><td> This instance is equal to <code>value</code>.<br>\n </td></tr><tr><td> 1<br>\n </td><td> This instance is longer than <code>value</code>.<br>\n -or-<br>\n <code>value</code> is <code>null</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Any instance of <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>, regardless of its value, is considered greater than <code>null</code>.  </p>\n<p> The <code>value</code> parameter must be an instance of <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> or <code>null</code>; otherwise, an exception is thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example compares several <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> structures and other objects to a reference <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> structure using the CompareTo method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.TimeSpan.Compare_Equals#1\">&#39; Example of the TimeSpan.CompareTo( Object ) and \n&#39; TimeSpan.Equals( Object ) methods.\nImports System\nImports Microsoft.VisualBasic\n\nModule TSCompToEqualsObjDemo\n    \n    &#39; Compare the TimeSpan to the Object parameters, \n    &#39; and display the Object parameters with the results.\n    Sub CompTimeSpanToObject( Left as TimeSpan, Right as Object, _\n        RightText as String )\n\n        Console.WriteLine( &quot;{0,-33}{1}&quot;, &quot;Object: &quot; &amp; RightText, _\n            Right )\n        Console.WriteLine( &quot;{0,-33}{1}&quot;, &quot;Left.Equals( Object )&quot;, _\n            Left.Equals( Right ) )\n        Console.Write( &quot;{0,-33}&quot;, &quot;Left.CompareTo( Object )&quot; )\n\n        &#39; Catch the exception if CompareTo( ) throws one.\n        Try\n            Console.WriteLine( &quot;{0}&quot; &amp; vbCrLf, _\n                Left.CompareTo( Right ) )\n        Catch ex As Exception\n            Console.WriteLine( &quot;Error: {0}&quot; &amp; vbCrLf, ex.Message )\n        End Try\n    End Sub\n\n    Sub Main( )\n        Dim Left as new TimeSpan( 0, 5, 0 )\n\n        Console.WriteLine( _\n            &quot;This example of the TimeSpan.Equals( Object ) &quot; &amp; _\n            &quot;and &quot; &amp; vbCrLf &amp; &quot;TimeSpan.CompareTo( Object ) &quot; &amp; _\n            &quot;methods generates the &quot; &amp; vbCrLf &amp; _\n            &quot;following output by creating several &quot; &amp; _\n            &quot;different TimeSpan &quot; &amp; vbCrLf &amp; &quot;objects and &quot; &amp; _\n            &quot;comparing them with a 5-minute TimeSpan.&quot; &amp; vbCrLf )\n        Console.WriteLine( &quot;{0,-33}{1}&quot; &amp; vbCrLf, _\n            &quot;Left: TimeSpan( 0, 5, 0 )&quot;, Left )\n\n        &#39; Create objects to compare with a 5-minute TimeSpan.\n        CompTimeSpanToObject( Left, new TimeSpan( 0, 0, 300 ), _\n            &quot;TimeSpan( 0, 0, 300 )&quot; )\n        CompTimeSpanToObject( Left, new TimeSpan( 0, 5, 1 ), _\n            &quot;TimeSpan( 0, 5, 1 )&quot; )\n        CompTimeSpanToObject( Left, new TimeSpan( 0, 5, -1 ), _\n            &quot;TimeSpan( 0, 5, -1 )&quot; )\n        CompTimeSpanToObject( Left, new TimeSpan( 3000000000 ), _\n            &quot;TimeSpan( 3000000000 )&quot; )\n        CompTimeSpanToObject( Left, 3000000000L, &quot;Long 3000000000L&quot; )\n        CompTimeSpanToObject( Left, &quot;00:05:00&quot;, _\n            &quot;String &quot;&quot;00:05:00&quot;&quot;&quot; )\n    End Sub\nEnd Module \n\n&#39; This example of the TimeSpan.Equals( Object ) and\n&#39; TimeSpan.CompareTo( Object ) methods generates the\n&#39; following output by creating several different TimeSpan\n&#39; objects and comparing them with a 5-minute TimeSpan.\n&#39; \n&#39; Left: TimeSpan( 0, 5, 0 )        00:05:00\n&#39; \n&#39; Object: TimeSpan( 0, 0, 300 )    00:05:00\n&#39; Left.Equals( Object )            True\n&#39; Left.CompareTo( Object )         0\n&#39; \n&#39; Object: TimeSpan( 0, 5, 1 )      00:05:01\n&#39; Left.Equals( Object )            False\n&#39; Left.CompareTo( Object )         -1\n&#39; \n&#39; Object: TimeSpan( 0, 5, -1 )     00:04:59\n&#39; Left.Equals( Object )            False\n&#39; Left.CompareTo( Object )         1\n&#39; \n&#39; Object: TimeSpan( 3000000000 )   00:05:00\n&#39; Left.Equals( Object )            True\n&#39; Left.CompareTo( Object )         0\n&#39; \n&#39; Object: Long 3000000000L         3000000000\n&#39; Left.Equals( Object )            False\n&#39; Left.CompareTo( Object )         Error: Object must be of type TimeSpan.\n&#39; \n&#39; Object: String &quot;00:05:00&quot;        00:05:00\n&#39; Left.Equals( Object )            False\n&#39; Left.CompareTo( Object )         Error: Object must be of type TimeSpan.\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.TimeSpan.Compare_Equals#1\">// Example of the TimeSpan::CompareTo( Object* ) and \n// TimeSpan::Equals( Object* ) methods.\nusing namespace System;\n\n// Compare the TimeSpan to the Object parameters, \n// and display the Object parameters with the results.\nvoid CompTimeSpanToObject( TimeSpan Left, Object^ Right, String^ RightText )\n{\n   Console::WriteLine( &quot;{0,-33}{1}&quot;, String::Concat( &quot;Object: &quot;, RightText ), Right );\n   Console::WriteLine( &quot;{0,-33}{1}&quot;, &quot;Left.Equals( Object )&quot;, Left.Equals( Right ) );\n   Console::Write( &quot;{0,-33}&quot;, &quot;Left.CompareTo( Object )&quot; );\n   \n   // Catch the exception if CompareTo( ) throws one.\n   try\n   {\n      Console::WriteLine( &quot;{0}<br>&quot;, Left.CompareTo( Right ) );\n   }\n   catch ( Exception^ ex ) \n   {\n      Console::WriteLine( &quot;Error: {0}<br>&quot;, ex-&gt;Message );\n   }\n\n}\n\nint main()\n{\n   TimeSpan Left = TimeSpan(0,5,0);\n   Console::WriteLine( &quot;This example of the TimeSpan::Equals( Object* ) &quot;\n   &quot;and <br>TimeSpan::CompareTo( Object* ) methods generates &quot;\n   &quot;the <br>following output by creating several different &quot;\n   &quot;TimeSpan <br>objects and comparing them with a &quot;\n   &quot;5-minute TimeSpan.<br>&quot; );\n   Console::WriteLine( &quot;{0,-33}{1}<br>&quot;, &quot;Left: TimeSpan( 0, 5, 0 )&quot;, Left );\n   \n   // Create objects to compare with a 5-minute TimeSpan.\n   CompTimeSpanToObject( Left, TimeSpan(0,0,300), &quot;TimeSpan( 0, 0, 300 )&quot; );\n   CompTimeSpanToObject( Left, TimeSpan(0,5,1), &quot;TimeSpan( 0, 5, 1 )&quot; );\n   CompTimeSpanToObject( Left, TimeSpan(0,5,-1), &quot;TimeSpan( 0, 5, -1 )&quot; );\n   CompTimeSpanToObject( Left, TimeSpan(3000000000), &quot;TimeSpan( 3000000000 )&quot; );\n   CompTimeSpanToObject( Left, 3000000000L, &quot;__int64 3000000000L&quot; );\n   CompTimeSpanToObject( Left, &quot;00:05:00&quot;, &quot;String \\&quot;00:05:00\\&quot;&quot; );\n}\n\n/*\nThis example of the TimeSpan::Equals( Object* ) and\nTimeSpan::CompareTo( Object* ) methods generates the\nfollowing output by creating several different TimeSpan\nobjects and comparing them with a 5-minute TimeSpan.\n\nLeft: TimeSpan( 0, 5, 0 )        00:05:00\n\nObject: TimeSpan( 0, 0, 300 )    00:05:00\nLeft.Equals( Object )            True\nLeft.CompareTo( Object )         0\n\nObject: TimeSpan( 0, 5, 1 )      00:05:01\nLeft.Equals( Object )            False\nLeft.CompareTo( Object )         -1\n\nObject: TimeSpan( 0, 5, -1 )     00:04:59\nLeft.Equals( Object )            False\nLeft.CompareTo( Object )         1\n\nObject: TimeSpan( 3000000000 )   00:05:00\nLeft.Equals( Object )            True\nLeft.CompareTo( Object )         0\n\nObject: __int64 3000000000L      3000000000\nLeft.Equals( Object )            False\nLeft.CompareTo( Object )         Error: Object must be of type TimeSpan.\n\nObject: String &quot;00:05:00&quot;        00:05:00\nLeft.Equals( Object )            False\nLeft.CompareTo( Object )         Error: Object must be of type TimeSpan.\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.Compare_Equals#1\">// Example of the TimeSpan.CompareTo( Object ) and \n// TimeSpan.Equals( Object ) methods.\nusing System;\n\nclass TSCompToEqualsObjDemo\n{\n    // Compare the TimeSpan to the Object parameters, \n    // and display the Object parameters with the results.\n    static void CompTimeSpanToObject( TimeSpan Left, object Right, \n        string RightText )\n    {\n        Console.WriteLine( &quot;{0,-33}{1}&quot;, &quot;Object: &quot; + RightText, \n            Right );\n        Console.WriteLine( &quot;{0,-33}{1}&quot;, &quot;Left.Equals( Object )&quot;, \n            Left.Equals( Right ) );\n        Console.Write( &quot;{0,-33}&quot;, &quot;Left.CompareTo( Object )&quot; );\n\n        // Catch the exception if CompareTo( ) throws one.\n        try\n        {\n            Console.WriteLine( &quot;{0}<br>&quot;, Left.CompareTo( Right ) );\n        }\n        catch( Exception ex )\n        {\n            Console.WriteLine( &quot;Error: {0}<br>&quot;, ex.Message );\n        }\n    }\n\n    static void Main( )\n    {\n        TimeSpan Left = new TimeSpan( 0, 5, 0 );\n\n        Console.WriteLine(\n            &quot;This example of the TimeSpan.Equals( Object ) &quot; +\n            &quot;and <br>TimeSpan.CompareTo( Object ) methods generates &quot; +\n            &quot;the <br>following output by creating several different &quot; +\n            &quot;TimeSpan <br>objects and comparing them with a &quot; +\n            &quot;5-minute TimeSpan.<br>&quot; );\n        Console.WriteLine( &quot;{0,-33}{1}<br>&quot;, \n            &quot;Left: TimeSpan( 0, 5, 0 )&quot;, Left );\n\n        // Create objects to compare with a 5-minute TimeSpan.\n        CompTimeSpanToObject( Left, new TimeSpan( 0, 0, 300 ), \n            &quot;TimeSpan( 0, 0, 300 )&quot; );\n        CompTimeSpanToObject( Left, new TimeSpan( 0, 5, 1 ), \n            &quot;TimeSpan( 0, 5, 1 )&quot; );\n        CompTimeSpanToObject( Left, new TimeSpan( 0, 5, -1 ), \n            &quot;TimeSpan( 0, 5, -1 )&quot; );\n        CompTimeSpanToObject( Left, new TimeSpan( 3000000000 ), \n            &quot;TimeSpan( 3000000000 )&quot; );\n        CompTimeSpanToObject( Left, 3000000000L, \n            &quot;long 3000000000L&quot; );\n        CompTimeSpanToObject( Left, &quot;00:05:00&quot;, \n            &quot;string \\&quot;00:05:00\\&quot;&quot; );\n    } \n} \n\n/*\nThis example of the TimeSpan.Equals( Object ) and\nTimeSpan.CompareTo( Object ) methods generates the\nfollowing output by creating several different TimeSpan\nobjects and comparing them with a 5-minute TimeSpan.\n\nLeft: TimeSpan( 0, 5, 0 )        00:05:00\n\nObject: TimeSpan( 0, 0, 300 )    00:05:00\nLeft.Equals( Object )            True\nLeft.CompareTo( Object )         0\n\nObject: TimeSpan( 0, 5, 1 )      00:05:01\nLeft.Equals( Object )            False\nLeft.CompareTo( Object )         -1\n\nObject: TimeSpan( 0, 5, -1 )     00:04:59\nLeft.Equals( Object )            False\nLeft.CompareTo( Object )         1\n\nObject: TimeSpan( 3000000000 )   00:05:00\nLeft.Equals( Object )            True\nLeft.CompareTo( Object )         0\n\nObject: long 3000000000L         3000000000\nLeft.Equals( Object )            False\nLeft.CompareTo( Object )         Error: Object must be of type TimeSpan.\n\nObject: string &quot;00:05:00&quot;        00:05:00\nLeft.Equals( Object )            False\nLeft.CompareTo( Object )         Error: Object must be of type TimeSpan.\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_CompareTo_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_TimeSpan_CompareTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CompareTo(TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Compares this instance to a specified <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object and returns an integer that indicates whether this instance is shorter than, equal to, or longer than the <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int CompareTo (TimeSpan value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare to this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A signed number indicating the relative values of this instance and <code>value</code>.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Description<br>\n </th></tr></thead><tbody><tr><td> A negative integer<br>\n </td><td> This instance is shorter than <code>value</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> This instance is equal to <code>value</code>.<br>\n </td></tr><tr><td> A positive integer<br>\n </td><td> This instance is longer than <code>value</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method implements the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">System.IComparable&lt;T&gt;</a> interface and performs slightly better than the <a class=\"xref\" href=\"system.timespan#System_TimeSpan_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method because it does not have to convert the <code>value</code> parameter to an object.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates generic and nongeneric versions of the <a class=\"xref\" href=\"system.timespan#System_TimeSpan_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method for several value and reference types.  </p>\n<pre><code class=\"lang-vb\" name=\"T.CompareTo#1\">&#39; This example demonstrates the generic and non-generic versions of the \n&#39; CompareTo method for several base types.\n&#39; The non-generic version takes a parameter of type Object, while the generic\n&#39; version takes a type-specific parameter, such as Boolean, Int32, or Double.\n\nImports System\n\nClass Sample\n   Public Shared Sub Main()\n      Dim nl As String = Environment.NewLine\n      Dim msg As String = _\n          &quot;{0}The following is the result of using the generic and non-generic{0}&quot; &amp; _\n          &quot;versions of the CompareTo method for several base types:{0}&quot;\n      \n      Dim now As DateTime = DateTime.Now\n      &#39; Time span = 11 days, 22 hours, 33 minutes, 44 seconds\n      Dim tsX As New TimeSpan(11, 22, 33, 44)\n      &#39; Version = 1.2.333.4\n      Dim versX As New Version(&quot;1.2.333.4&quot;)\n      &#39; Guid = CA761232-ED42-11CE-BACD-00AA0057B223\n      Dim guidX As New Guid(&quot;{CA761232-ED42-11CE-BACD-00AA0057B223}&quot;)\n      \n      Dim a1 As [Boolean] = True,    a2 As [Boolean] = True\n      Dim b1 As [Byte] = 1,          b2 As [Byte] = 1\n      Dim c1 As Int16 = -2,          c2 As Int16 = 2\n      Dim d1 As Int32 = 3,           d2 As Int32 = 3\n      Dim e1 As Int64 = 4,           e2 As Int64 = -4\n      Dim f1 As [Decimal] = -5.5D,   f2 As [Decimal] = 5.5D\n      Dim g1 As [Single] = 6.6F,     g2 As [Single] = 6.6F\n      Dim h1 As [Double] = 7.7,      h2 As [Double] = -7.7\n      Dim i1 As [Char] = &quot;A&quot;c,       i2 As [Char] = &quot;A&quot;c\n      Dim j1 As String = &quot;abc&quot;,      j2 As String = &quot;abc&quot;\n      Dim k1 As DateTime = now,      k2 As DateTime = now\n      Dim l1 As TimeSpan = tsX,      l2 As TimeSpan = tsX\n      Dim m1 As Version = versX,     m2 As New Version(&quot;2.0&quot;)\n      Dim n1 As Guid = guidX,        n2 As Guid = guidX\n      \n      &#39; The following types are not CLS-compliant.\n      &#39; SByte, UInt16, UInt32, UInt64\n\n      Console.WriteLine(msg, nl)\n      Try\n         &#39; The second and third Show method call parameters are automatically boxed because\n         &#39; the second and third Show method declaration arguments expect type Object.\n\n         Show(&quot;Boolean:  &quot;, a1, a2, a1.CompareTo(a2), a1.CompareTo(CObj(a2)))\n         Show(&quot;Byte:     &quot;, b1, b2, b1.CompareTo(b2), b1.CompareTo(CObj(b2)))\n         Show(&quot;Int16:    &quot;, c1, c2, c1.CompareTo(c2), c1.CompareTo(CObj(c2)))\n         Show(&quot;Int32:    &quot;, d1, d2, d1.CompareTo(d2), d1.CompareTo(CObj(d2)))\n         Show(&quot;Int64:    &quot;, e1, e2, e1.CompareTo(e2), e1.CompareTo(CObj(e2)))\n         Show(&quot;Decimal:  &quot;, f1, f2, f1.CompareTo(f2), f1.CompareTo(CObj(f2)))\n         Show(&quot;Single:   &quot;, g1, g2, g1.CompareTo(g2), g1.CompareTo(CObj(g2)))\n         Show(&quot;Double:   &quot;, h1, h2, h1.CompareTo(h2), h1.CompareTo(CObj(h2)))\n         Show(&quot;Char:     &quot;, i1, i2, i1.CompareTo(i2), i1.CompareTo(CObj(i2)))\n         Show(&quot;String:   &quot;, j1, j2, j1.CompareTo(j2), j1.CompareTo(CObj(j2)))\n         Show(&quot;DateTime: &quot;, k1, k2, k1.CompareTo(k2), k1.CompareTo(CObj(k2)))\n         Show(&quot;TimeSpan: &quot;, l1, l2, l1.CompareTo(l2), l1.CompareTo(CObj(l2)))\n         Show(&quot;Version:  &quot;, m1, m2, m1.CompareTo(m2), m1.CompareTo(CObj(m2)))\n         Show(&quot;Guid:     &quot;, n1, n2, n1.CompareTo(n2), n1.CompareTo(CObj(n2)))\n         &#39;\n         Console.WriteLine(&quot;{0}The following types are not CLS-compliant:&quot;, nl)\n         Console.WriteLine(&quot;SByte, UInt16, UInt32, UInt64&quot;)\n\n      Catch e As Exception\n         Console.WriteLine(e)\n      End Try\n   End Sub &#39;Main\n   \n   Public Shared Sub Show(caption As String, var1 As [Object], var2 As [Object], _\n                          resultGeneric As Integer, resultNonGeneric As Integer)\n      Dim relation As String\n      \n      Console.Write(caption)\n      If resultGeneric = resultNonGeneric Then\n         If resultGeneric &lt; 0 Then\n            relation = &quot;less than&quot;\n         ElseIf resultGeneric &gt; 0 Then\n            relation = &quot;greater than&quot;\n         Else\n            relation = &quot;equal to&quot;\n         End If\n         Console.WriteLine(&quot;{0} is {1} {2}&quot;, var1, relation, var2)\n      \n      &#39; The following condition will never occur because the generic and non-generic\n      &#39; CompareTo methods are equivalent.\n\n      Else\n         Console.WriteLine(&quot;Generic CompareTo = {0}; non-generic CompareTo = {1}&quot;, _\n                            resultGeneric, resultNonGeneric)\n      End If\n   End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;The following is the result of using the generic and non-generic versions of the\n&#39;CompareTo method for several base types:\n&#39;\n&#39;Boolean:  True is equal to True\n&#39;Byte:     1 is equal to 1\n&#39;Int16:    -2 is less than 2\n&#39;Int32:    3 is equal to 3\n&#39;Int64:    4 is greater than -4\n&#39;Decimal:  -5.5 is less than 5.5\n&#39;Single:   6.6 is equal to 6.6\n&#39;Double:   7.7 is greater than -7.7\n&#39;Char:     A is equal to A\n&#39;String:   abc is equal to abc\n&#39;DateTime: 12/1/2003 5:37:46 PM is equal to 12/1/2003 5:37:46 PM\n&#39;TimeSpan: 11.22:33:44 is equal to 11.22:33:44\n&#39;Version:  1.2.333.4 is less than 2.0\n&#39;Guid:     ca761232-ed42-11ce-bacd-00aa0057b223 is equal to ca761232-ed42-11ce-bacd-00\n&#39;aa0057b223\n&#39;\n&#39;The following types are not CLS-compliant:\n&#39;SByte, UInt16, UInt32, UInt64\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"T.CompareTo#1\">// This example demonstrates the two versions of the \n// CompareTo method for several base types.\n// The general version takes a parameter of type Object, while the specific\n// version takes a type-specific parameter, such as Boolean, Int32, or Double.\nusing namespace System;\n\nvoid Show( String^ caption, Object^ var1, Object^ var2, int resultGeneric, int resultNonGeneric )\n{\n   String^ relation;\n   Console::Write( caption );\n   if ( resultGeneric == resultNonGeneric )\n   {\n      if ( resultGeneric &lt; 0 )\n            relation = &quot;less than&quot;;\n      else\n      if ( resultGeneric &gt; 0 )\n            relation = &quot;greater than&quot;;\n      else\n            relation = &quot;equal to&quot;;\n      Console::WriteLine( &quot;{0} is {1} {2}&quot;, var1, relation, var2 );\n   }\n   // The following condition will never occur because the generic and non-generic\n   // CompareTo methods are equivalent.\n   else\n   {\n      Console::WriteLine( &quot;Generic CompareTo = {0}; non-generic CompareTo = {1}&quot;, resultGeneric, resultNonGeneric );\n   }\n}\n\nint main()\n{\n   String^ nl = Environment::NewLine;\n   String^ msg = &quot;{0}The following is the result of using the generic and non-generic{0}&quot;\n   &quot;versions of the CompareTo method for several base types:{0}&quot;;\n   Object^ obj; // An Object used to insure CompareTo(Object) is called.\n\n   DateTime now = DateTime::Now;\n   \n   // Time span = 11 days, 22 hours, 33 minutes, 44 seconds\n   TimeSpan tsX = TimeSpan(11,22,33,44);\n   \n   // Version = 1.2.333.4\n   Version^ versX = gcnew Version(  &quot;1.2.333.4&quot; );\n   \n   // Guid = CA761232-ED42-11CE-BACD-00AA0057B223\n   Guid guidX = Guid( &quot;{CA761232-ED42-11CE-BACD-00AA0057B223}&quot;);\n   Boolean a1 = true,a2 = true;\n   Byte b1 = 1,b2 = 1;\n   Int16 c1 = -2,c2 = 2;\n   Int32 d1 = 3,d2 = 3;\n   Int64 e1 = 4,e2 = -4;\n   Decimal f1 = Decimal(-5.5), f2 = Decimal(5.5);\n   Single g1 = 6.6f,g2 = 6.6f;\n   Double h1 = 7.7,h2 = -7.7;\n   Char i1 = &#39;A&#39;,i2 = &#39;A&#39;;\n   String^ j1 = &quot;abc&quot;, ^j2 = &quot;abc&quot;;\n   DateTime k1 = now,k2 = now;\n   TimeSpan l1 = tsX,l2 = tsX;\n   Version^ m1 = versX, ^m2 = gcnew Version(  &quot;2.0&quot; );\n   Guid n1 = guidX,n2 = guidX;\n   \n   // The following types are not CLS-compliant.\n   SByte w1 = 8,w2 = 8;\n   UInt16 x1 = 9,x2 = 9;\n   UInt32 y1 = 10,y2 = 10;\n   UInt64 z1 = 11,z2 = 11;\n   \n   //\n   Console::WriteLine( msg, nl );\n   try\n   {\n      Show( &quot;Boolean: &quot;, a1, a2, a1.CompareTo( a2 ), a1.CompareTo( a2 ) );\n      Show( &quot;Byte:    &quot;, b1, b2, b1.CompareTo( b2 ), b1.CompareTo( b2 ) );\n      Show( &quot;Int16:   &quot;, c1, c2, c1.CompareTo( c2 ), c1.CompareTo( c2 ) );\n      Show( &quot;Int32:   &quot;, d1, d2, d1.CompareTo( d2 ), d1.CompareTo( d2 ) );\n      Show( &quot;Int64:   &quot;, e1, e2, e1.CompareTo( e2 ), e1.CompareTo( e2 ) );\n      Show( &quot;Decimal: &quot;, f1, f2, f1.CompareTo( f2 ), f1.CompareTo( f2 ) );\n      Show( &quot;Single:  &quot;, g1, g2, g1.CompareTo( g2 ), g1.CompareTo( g2 ) );\n      Show( &quot;Double:  &quot;, h1, h2, h1.CompareTo( h2 ), h1.CompareTo( h2 ) );\n      Show( &quot;Char:    &quot;, i1, i2, i1.CompareTo( i2 ), i1.CompareTo( i2 ) );\n      \n      // Use an anonymous object to hide the String object.\n      obj = j2;\n      Show( &quot;String:  &quot;, j1, j2, j1-&gt;CompareTo( j2 ), j1-&gt;CompareTo( obj ) );\n      Show( &quot;DateTime:&quot;, k1, k2, k1.CompareTo( k2 ), k1.CompareTo( k2 ) );\n      Show(  &quot;TimeSpan: &quot;, l1, l2, l1.CompareTo( l2 ), l1.CompareTo( l2 ) );\n      \n      // Use an anonymous object to hide the Version object.\n      obj = m2;\n      Show(  &quot;Version:  &quot;, m1, m2, m1-&gt;CompareTo( m2 ), m1-&gt;CompareTo( obj ) );\n      Show(  &quot;Guid:     &quot;, n1, n2, n1.CompareTo( n2 ), n1.CompareTo( n2 ) );\n      \n      //\n      Console::WriteLine( &quot;{0}The following types are not CLS-compliant:&quot;, nl );\n      Show( &quot;SByte:   &quot;, w1, w2, w1.CompareTo( w2 ), w1.CompareTo( w2 ) );\n      Show( &quot;UInt16:  &quot;, x1, x2, x1.CompareTo( x2 ), x1.CompareTo( x2 ) );\n      Show( &quot;UInt32:  &quot;, y1, y2, y1.CompareTo( y2 ), y1.CompareTo( y2 ) );\n      Show( &quot;UInt64:  &quot;, z1, z2, z1.CompareTo( z2 ), z1.CompareTo( z2 ) );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n}\n//     This example displays the following output:\n//     \n//     The following is the result of using the generic and non-generic versions of the\n//     CompareTo method for several base types:\n//     \n//     Boolean:  True is equal to True\n//     Byte:     1 is equal to 1\n//     Int16:    -2 is less than 2\n//     Int32:    3 is equal to 3\n//     Int64:    4 is greater than -4\n//     Decimal:  -5.5 is less than 5.5\n//     Single:   6.6 is equal to 6.6\n//     Double:   7.7 is greater than -7.7\n//     Char:     A is equal to A\n//     String:   abc is equal to abc\n//     DateTime: 12/1/2003 5:37:46 PM is equal to 12/1/2003 5:37:46 PM\n//     TimeSpan: 11.22:33:44 is equal to 11.22:33:44\n//     Version:  1.2.333.4 is less than 2.0\n//     Guid:     ca761232-ed42-11ce-bacd-00aa0057b223 is equal to ca761232-ed42-11ce-bacd-00\n//     aa0057b223\n//     \n//     The following types are not CLS-compliant:\n//     SByte:    8 is equal to 8\n//     UInt16:   9 is equal to 9\n//     UInt32:   10 is equal to 10\n//     UInt64:   11 is equal to 11\n</code></pre><pre><code class=\"lang-cs\" name=\"T.CompareTo#1\">// This example demonstrates the generic and non-generic versions of the \n// CompareTo method for several base types.\n// The non-generic version takes a parameter of type Object, while the generic\n// version takes a type-specific parameter, such as Boolean, Int32, or Double.\n\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    string    nl = Environment.NewLine;\n    string    msg = &quot;{0}The following is the result of using the generic and non-generic{0}&quot; +\n                    &quot;versions of the CompareTo method for several base types:{0}&quot;;\n\n    DateTime  now = DateTime.Now;\n// Time span = 11 days, 22 hours, 33 minutes, 44 seconds\n    TimeSpan  tsX = new TimeSpan(11, 22, 33, 44); \n// Version = 1.2.333.4\n    Version   versX = new Version(&quot;1.2.333.4&quot;);  \n// Guid = CA761232-ED42-11CE-BACD-00AA0057B223\n    Guid      guidX = new Guid(&quot;{CA761232-ED42-11CE-BACD-00AA0057B223}&quot;);\n\n    Boolean  a1 = true,  a2 = true;\n    Byte     b1 = 1,     b2 = 1;\n    Int16    c1 = -2,    c2 = 2;\n    Int32    d1 = 3,     d2 = 3;\n    Int64    e1 = 4,     e2 = -4;\n    Decimal  f1 = -5.5m, f2 = 5.5m;\n    Single   g1 = 6.6f,  g2 = 6.6f;\n    Double   h1 = 7.7d,  h2 = -7.7d;\n    Char     i1 = &#39;A&#39;,   i2 = &#39;A&#39;;\n    String   j1 = &quot;abc&quot;, j2 = &quot;abc&quot;;\n    DateTime k1 = now,   k2 = now;\n    TimeSpan l1 = tsX,   l2 = tsX;\n    Version  m1 = versX, m2 = new Version(&quot;2.0&quot;);\n    Guid     n1 = guidX, n2 = guidX;\n\n// The following types are not CLS-compliant.\n    SByte    w1 = 8,     w2 = 8;\n    UInt16   x1 = 9,     x2 = 9;\n    UInt32   y1 = 10,    y2 = 10;\n    UInt64   z1 = 11,    z2 = 11;\n//\n    Console.WriteLine(msg, nl);\n    try \n        {\n// The second and third Show method call parameters are automatically boxed because\n// the second and third Show method declaration arguments expect type Object.\n\n        Show(&quot;Boolean:  &quot;, a1, a2, a1.CompareTo(a2), a1.CompareTo((Object)a2));\n        Show(&quot;Byte:     &quot;, b1, b2, b1.CompareTo(b2), b1.CompareTo((Object)b2));\n        Show(&quot;Int16:    &quot;, c1, c2, c1.CompareTo(c2), c1.CompareTo((Object)c2));\n        Show(&quot;Int32:    &quot;, d1, d2, d1.CompareTo(d2), d1.CompareTo((Object)d2));\n        Show(&quot;Int64:    &quot;, e1, e2, e1.CompareTo(e2), e1.CompareTo((Object)e2));\n        Show(&quot;Decimal:  &quot;, f1, f2, f1.CompareTo(f2), f1.CompareTo((Object)f2));\n        Show(&quot;Single:   &quot;, g1, g2, g1.CompareTo(g2), g1.CompareTo((Object)g2));\n        Show(&quot;Double:   &quot;, h1, h2, h1.CompareTo(h2), h1.CompareTo((Object)h2));\n        Show(&quot;Char:     &quot;, i1, i2, i1.CompareTo(i2), i1.CompareTo((Object)i2));\n        Show(&quot;String:   &quot;, j1, j2, j1.CompareTo(j2), j1.CompareTo((Object)j2));\n        Show(&quot;DateTime: &quot;, k1, k2, k1.CompareTo(k2), k1.CompareTo((Object)k2));\n        Show(&quot;TimeSpan: &quot;, l1, l2, l1.CompareTo(l2), l1.CompareTo((Object)l2));\n        Show(&quot;Version:  &quot;, m1, m2, m1.CompareTo(m2), m1.CompareTo((Object)m2));\n        Show(&quot;Guid:     &quot;, n1, n2, n1.CompareTo(n2), n1.CompareTo((Object)n2));\n//\n        Console.WriteLine(&quot;{0}The following types are not CLS-compliant:&quot;, nl);\n        Show(&quot;SByte:    &quot;, w1, w2, w1.CompareTo(w2), w1.CompareTo((Object)w2));\n        Show(&quot;UInt16:   &quot;, x1, x2, x1.CompareTo(x2), x1.CompareTo((Object)x2));\n        Show(&quot;UInt32:   &quot;, y1, y2, y1.CompareTo(y2), y1.CompareTo((Object)y2));\n        Show(&quot;UInt64:   &quot;, z1, z2, z1.CompareTo(z2), z1.CompareTo((Object)z2));\n        }\n    catch (Exception e)\n        {\n        Console.WriteLine(e);\n        }\n    }\n\n    public static void Show(string caption, Object var1, Object var2, \n                            int resultGeneric, int resultNonGeneric)\n    {\n    string relation;\n\n    Console.Write(caption);\n    if (resultGeneric == resultNonGeneric) \n        {\n        if      (resultGeneric &lt; 0) relation = &quot;less than&quot;;\n        else if (resultGeneric &gt; 0) relation = &quot;greater than&quot;;\n        else                        relation = &quot;equal to&quot;;\n        Console.WriteLine(&quot;{0} is {1} {2}&quot;, var1, relation, var2);\n        }\n\n// The following condition will never occur because the generic and non-generic\n// CompareTo methods are equivalent.\n\n    else\n        {\n        Console.WriteLine(&quot;Generic CompareTo = {0}; non-generic CompareTo = {1}&quot;, \n                           resultGeneric, resultNonGeneric);\n        }\n   }\n}\n/*\nThis example produces the following results:\n\nThe following is the result of using the generic and non-generic versions of the\nCompareTo method for several base types:\n\nBoolean:  True is equal to True\nByte:     1 is equal to 1\nInt16:    -2 is less than 2\nInt32:    3 is equal to 3\nInt64:    4 is greater than -4\nDecimal:  -5.5 is less than 5.5\nSingle:   6.6 is equal to 6.6\nDouble:   7.7 is greater than -7.7\nChar:     A is equal to A\nString:   abc is equal to abc\nDateTime: 12/1/2003 5:37:46 PM is equal to 12/1/2003 5:37:46 PM\nTimeSpan: 11.22:33:44 is equal to 11.22:33:44\nVersion:  1.2.333.4 is less than 2.0\nGuid:     ca761232-ed42-11ce-bacd-00aa0057b223 is equal to ca761232-ed42-11ce-bacd-00\naa0057b223\n\nThe following types are not CLS-compliant:\nSByte:    8 is equal to 8\nUInt16:   9 is equal to 9\nUInt32:   10 is equal to 10\nUInt64:   11 is equal to 11\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_Duration\">\r\n    \r\n            <a id=\"System_TimeSpan_Duration_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Duration()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a new <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object whose value is the absolute value of the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TimeSpan Duration ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </div>\r\n                  <p>A new object whose value is the absolute value of the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The value of this instance is <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example applies the Duration method to several <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> objects.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.TimeSpan.Dura_Nega_Unary#1\">// Example of the TimeSpan::Duration( ) and TimeSpan::Negate( ) methods,\n// and the TimeSpan Unary Negation and Unary Plus operators.\nusing namespace System;\nconst __wchar_t * protoFmt = L&quot;{0,22}{1,22}{2,22}&quot;;\nvoid ShowDurationNegate( TimeSpan interval )\n{\n   \n   // Display the TimeSpan value and the results of the \n   // Duration and Negate methods.\n   Console::WriteLine( gcnew String( protoFmt ), interval, interval.Duration(), interval.Negate() );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of TimeSpan::Duration( ), &quot;\n   &quot;TimeSpan::Negate( ), <br>and the TimeSpan Unary &quot;\n   &quot;Negation and Unary Plus operators <br>&quot;\n   &quot;generates the following output.<br>&quot; );\n   Console::WriteLine( gcnew String( protoFmt ), &quot;TimeSpan&quot;, &quot;Duration( )&quot;, &quot;Negate( )&quot; );\n   Console::WriteLine( gcnew String( protoFmt ), &quot;--------&quot;, &quot;-----------&quot;, &quot;---------&quot; );\n   \n   // Create TimeSpan objects and apply the Unary Negation\n   // and Unary Plus operators to them.\n   ShowDurationNegate( TimeSpan(1) );\n   ShowDurationNegate( TimeSpan( -1234567) );\n   ShowDurationNegate(  +TimeSpan(0,0,10,-20,-30) );\n   ShowDurationNegate(  +TimeSpan(0,-10,20,-30,40) );\n   ShowDurationNegate(  -TimeSpan(1,10,20,40,160) );\n   ShowDurationNegate(  -TimeSpan( -10,-20,-30,-40,-50) );\n}\n\n/*\nThis example of TimeSpan::Duration( ), TimeSpan::Negate( ),\nand the TimeSpan Unary Negation and Unary Plus operators\ngenerates the following output.\n\n              TimeSpan           Duration( )             Negate( )\n              --------           -----------             ---------\n      00:00:00.0000001      00:00:00.0000001     -00:00:00.0000001\n     -00:00:00.1234567      00:00:00.1234567      00:00:00.1234567\n      00:09:39.9700000      00:09:39.9700000     -00:09:39.9700000\n     -09:40:29.9600000      09:40:29.9600000      09:40:29.9600000\n   -1.10:20:40.1600000    1.10:20:40.1600000    1.10:20:40.1600000\n   10.20:30:40.0500000   10.20:30:40.0500000  -10.20:30:40.0500000\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.Dura_Nega_Unary#1\">// Example of the TimeSpan.Duration( ) and TimeSpan.Negate( ) methods,\n// and the TimeSpan Unary Negation and Unary Plus operators.\nusing System;\n\nclass DuraNegaUnaryDemo\n{\n    const string dataFmt = &quot;{0,22}{1,22}{2,22}&quot; ;\n\n    static void ShowDurationNegate( TimeSpan interval )\n    {\n        // Display the TimeSpan value and the results of the \n        // Duration and Negate methods.\n        Console.WriteLine( dataFmt, \n            interval, interval.Duration( ), interval.Negate( ) );\n    }\n\n    static void Main()\n    {\n        Console.WriteLine(\n            &quot;This example of TimeSpan.Duration( ), &quot; +\n            &quot;TimeSpan.Negate( ), <br>and the TimeSpan Unary &quot; +\n            &quot;Negation and Unary Plus operators <br>&quot; +\n            &quot;generates the following output.<br>&quot; );\n        Console.WriteLine( dataFmt, \n            &quot;TimeSpan&quot;, &quot;Duration( )&quot;, &quot;Negate( )&quot; );\n        Console.WriteLine( dataFmt, \n            &quot;--------&quot;, &quot;-----------&quot;, &quot;---------&quot; );\n\n        // Create TimeSpan objects and apply the Unary Negation\n        // and Unary Plus operators to them.\n        ShowDurationNegate( new TimeSpan( 1 ) );\n        ShowDurationNegate( new TimeSpan( -1234567 ) );\n        ShowDurationNegate( \n            + new TimeSpan( 0, 0, 10, -20, -30 ) );\n        ShowDurationNegate( \n            + new TimeSpan( 0, -10, 20, -30, 40 ) );\n        ShowDurationNegate( \n            - new TimeSpan( 1, 10, 20, 40, 160 ) );\n        ShowDurationNegate( \n            - new TimeSpan( -10, -20, -30, -40, -50 ) );\n    } \n} \n\n/*\nThis example of TimeSpan.Duration( ), TimeSpan.Negate( ),\nand the TimeSpan Unary Negation and Unary Plus operators\ngenerates the following output.\n\n              TimeSpan           Duration( )             Negate( )\n              --------           -----------             ---------\n      00:00:00.0000001      00:00:00.0000001     -00:00:00.0000001\n     -00:00:00.1234567      00:00:00.1234567      00:00:00.1234567\n      00:09:39.9700000      00:09:39.9700000     -00:09:39.9700000\n     -09:40:29.9600000      09:40:29.9600000      09:40:29.9600000\n   -1.10:20:40.1600000    1.10:20:40.1600000    1.10:20:40.1600000\n   10.20:30:40.0500000   10.20:30:40.0500000  -10.20:30:40.0500000\n*/ \n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.Dura_Nega_Unary#1\">&#39; Example of the TimeSpan.Duration( ) and TimeSpan.Negate( ) methods,\n&#39; and the TimeSpan Unary Negation and Unary Plus operators.\nImports System\nImports Microsoft.VisualBasic\n\nModule DuraNegaUnaryDemo\n\n    Const dataFmt As String = &quot;{0,22}{1,22}{2,22}&quot;\n\n    Sub ShowDurationNegate( interval As TimeSpan )\n\n        &#39; Display the TimeSpan value and the results of the \n        &#39; Duration and Negate methods.\n        Console.WriteLine( dataFmt, _\n            interval, interval.Duration( ), interval.Negate( ) )\n    End Sub\n\n    Sub Main( )\n\n        Console.WriteLine( _\n            &quot;This example of TimeSpan.Duration( ), &quot; &amp; _\n            &quot;TimeSpan.Negate( ), &quot; &amp; vbCrLf &amp; _\n            &quot;and the TimeSpan Unary Negation and &quot; &amp; _\n            &quot;Unary Plus operators &quot; &amp; vbCrLf &amp; _\n            &quot;generates the following output.&quot; &amp; vbCrLf )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan&quot;, &quot;Duration( )&quot;, &quot;Negate( )&quot; )    \n        Console.WriteLine( dataFmt, _\n            &quot;--------&quot;, &quot;-----------&quot;, &quot;---------&quot; )    \n\n        &#39; Create TimeSpan objects and apply the Unary Negation\n        &#39; and Unary Plus operators to them.\n        ShowDurationNegate( new TimeSpan( 1 ) )\n        ShowDurationNegate( new TimeSpan( -1234567 ) )\n        ShowDurationNegate( TimeSpan.op_UnaryPlus( _\n            new TimeSpan( 0, 0, 10, -20, -30 ) ) )\n        ShowDurationNegate( TimeSpan.op_UnaryPlus( _\n            new TimeSpan( 0, -10, 20, -30, 40 ) ) )\n        ShowDurationNegate( TimeSpan.op_UnaryNegation( _\n            new TimeSpan( 1, 10, 20, 40, 160 ) ) )\n        ShowDurationNegate( TimeSpan.op_UnaryNegation( _\n            new TimeSpan( -10, -20, -30, -40, -50 ) ) )\n    End Sub \nEnd Module \n\n&#39; This example of TimeSpan.Duration( ), TimeSpan.Negate( ),\n&#39; and the TimeSpan Unary Negation and Unary Plus operators\n&#39; generates the following output.\n&#39; \n&#39;               TimeSpan           Duration( )             Negate( )\n&#39;               --------           -----------             ---------\n&#39;       00:00:00.0000001      00:00:00.0000001     -00:00:00.0000001\n&#39;      -00:00:00.1234567      00:00:00.1234567      00:00:00.1234567\n&#39;       00:09:39.9700000      00:09:39.9700000     -00:09:39.9700000\n&#39;      -09:40:29.9600000      09:40:29.9600000      09:40:29.9600000\n&#39;    -1.10:20:40.1600000    1.10:20:40.1600000    1.10:20:40.1600000\n&#39;    10.20:30:40.0500000   10.20:30:40.0500000  -10.20:30:40.0500000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_TimeSpan_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value indicating whether this instance is equal to a specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare with this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>value</code> is a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object that represents the same time interval as the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> structure; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example compares several <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> and other objects to a reference <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> using the Equals method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.TimeSpan.Compare_Equals#1\">&#39; Example of the TimeSpan.CompareTo( Object ) and \n&#39; TimeSpan.Equals( Object ) methods.\nImports System\nImports Microsoft.VisualBasic\n\nModule TSCompToEqualsObjDemo\n    \n    &#39; Compare the TimeSpan to the Object parameters, \n    &#39; and display the Object parameters with the results.\n    Sub CompTimeSpanToObject( Left as TimeSpan, Right as Object, _\n        RightText as String )\n\n        Console.WriteLine( &quot;{0,-33}{1}&quot;, &quot;Object: &quot; &amp; RightText, _\n            Right )\n        Console.WriteLine( &quot;{0,-33}{1}&quot;, &quot;Left.Equals( Object )&quot;, _\n            Left.Equals( Right ) )\n        Console.Write( &quot;{0,-33}&quot;, &quot;Left.CompareTo( Object )&quot; )\n\n        &#39; Catch the exception if CompareTo( ) throws one.\n        Try\n            Console.WriteLine( &quot;{0}&quot; &amp; vbCrLf, _\n                Left.CompareTo( Right ) )\n        Catch ex As Exception\n            Console.WriteLine( &quot;Error: {0}&quot; &amp; vbCrLf, ex.Message )\n        End Try\n    End Sub\n\n    Sub Main( )\n        Dim Left as new TimeSpan( 0, 5, 0 )\n\n        Console.WriteLine( _\n            &quot;This example of the TimeSpan.Equals( Object ) &quot; &amp; _\n            &quot;and &quot; &amp; vbCrLf &amp; &quot;TimeSpan.CompareTo( Object ) &quot; &amp; _\n            &quot;methods generates the &quot; &amp; vbCrLf &amp; _\n            &quot;following output by creating several &quot; &amp; _\n            &quot;different TimeSpan &quot; &amp; vbCrLf &amp; &quot;objects and &quot; &amp; _\n            &quot;comparing them with a 5-minute TimeSpan.&quot; &amp; vbCrLf )\n        Console.WriteLine( &quot;{0,-33}{1}&quot; &amp; vbCrLf, _\n            &quot;Left: TimeSpan( 0, 5, 0 )&quot;, Left )\n\n        &#39; Create objects to compare with a 5-minute TimeSpan.\n        CompTimeSpanToObject( Left, new TimeSpan( 0, 0, 300 ), _\n            &quot;TimeSpan( 0, 0, 300 )&quot; )\n        CompTimeSpanToObject( Left, new TimeSpan( 0, 5, 1 ), _\n            &quot;TimeSpan( 0, 5, 1 )&quot; )\n        CompTimeSpanToObject( Left, new TimeSpan( 0, 5, -1 ), _\n            &quot;TimeSpan( 0, 5, -1 )&quot; )\n        CompTimeSpanToObject( Left, new TimeSpan( 3000000000 ), _\n            &quot;TimeSpan( 3000000000 )&quot; )\n        CompTimeSpanToObject( Left, 3000000000L, &quot;Long 3000000000L&quot; )\n        CompTimeSpanToObject( Left, &quot;00:05:00&quot;, _\n            &quot;String &quot;&quot;00:05:00&quot;&quot;&quot; )\n    End Sub\nEnd Module \n\n&#39; This example of the TimeSpan.Equals( Object ) and\n&#39; TimeSpan.CompareTo( Object ) methods generates the\n&#39; following output by creating several different TimeSpan\n&#39; objects and comparing them with a 5-minute TimeSpan.\n&#39; \n&#39; Left: TimeSpan( 0, 5, 0 )        00:05:00\n&#39; \n&#39; Object: TimeSpan( 0, 0, 300 )    00:05:00\n&#39; Left.Equals( Object )            True\n&#39; Left.CompareTo( Object )         0\n&#39; \n&#39; Object: TimeSpan( 0, 5, 1 )      00:05:01\n&#39; Left.Equals( Object )            False\n&#39; Left.CompareTo( Object )         -1\n&#39; \n&#39; Object: TimeSpan( 0, 5, -1 )     00:04:59\n&#39; Left.Equals( Object )            False\n&#39; Left.CompareTo( Object )         1\n&#39; \n&#39; Object: TimeSpan( 3000000000 )   00:05:00\n&#39; Left.Equals( Object )            True\n&#39; Left.CompareTo( Object )         0\n&#39; \n&#39; Object: Long 3000000000L         3000000000\n&#39; Left.Equals( Object )            False\n&#39; Left.CompareTo( Object )         Error: Object must be of type TimeSpan.\n&#39; \n&#39; Object: String &quot;00:05:00&quot;        00:05:00\n&#39; Left.Equals( Object )            False\n&#39; Left.CompareTo( Object )         Error: Object must be of type TimeSpan.\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.TimeSpan.Compare_Equals#1\">// Example of the TimeSpan::CompareTo( Object* ) and \n// TimeSpan::Equals( Object* ) methods.\nusing namespace System;\n\n// Compare the TimeSpan to the Object parameters, \n// and display the Object parameters with the results.\nvoid CompTimeSpanToObject( TimeSpan Left, Object^ Right, String^ RightText )\n{\n   Console::WriteLine( &quot;{0,-33}{1}&quot;, String::Concat( &quot;Object: &quot;, RightText ), Right );\n   Console::WriteLine( &quot;{0,-33}{1}&quot;, &quot;Left.Equals( Object )&quot;, Left.Equals( Right ) );\n   Console::Write( &quot;{0,-33}&quot;, &quot;Left.CompareTo( Object )&quot; );\n   \n   // Catch the exception if CompareTo( ) throws one.\n   try\n   {\n      Console::WriteLine( &quot;{0}<br>&quot;, Left.CompareTo( Right ) );\n   }\n   catch ( Exception^ ex ) \n   {\n      Console::WriteLine( &quot;Error: {0}<br>&quot;, ex-&gt;Message );\n   }\n\n}\n\nint main()\n{\n   TimeSpan Left = TimeSpan(0,5,0);\n   Console::WriteLine( &quot;This example of the TimeSpan::Equals( Object* ) &quot;\n   &quot;and <br>TimeSpan::CompareTo( Object* ) methods generates &quot;\n   &quot;the <br>following output by creating several different &quot;\n   &quot;TimeSpan <br>objects and comparing them with a &quot;\n   &quot;5-minute TimeSpan.<br>&quot; );\n   Console::WriteLine( &quot;{0,-33}{1}<br>&quot;, &quot;Left: TimeSpan( 0, 5, 0 )&quot;, Left );\n   \n   // Create objects to compare with a 5-minute TimeSpan.\n   CompTimeSpanToObject( Left, TimeSpan(0,0,300), &quot;TimeSpan( 0, 0, 300 )&quot; );\n   CompTimeSpanToObject( Left, TimeSpan(0,5,1), &quot;TimeSpan( 0, 5, 1 )&quot; );\n   CompTimeSpanToObject( Left, TimeSpan(0,5,-1), &quot;TimeSpan( 0, 5, -1 )&quot; );\n   CompTimeSpanToObject( Left, TimeSpan(3000000000), &quot;TimeSpan( 3000000000 )&quot; );\n   CompTimeSpanToObject( Left, 3000000000L, &quot;__int64 3000000000L&quot; );\n   CompTimeSpanToObject( Left, &quot;00:05:00&quot;, &quot;String \\&quot;00:05:00\\&quot;&quot; );\n}\n\n/*\nThis example of the TimeSpan::Equals( Object* ) and\nTimeSpan::CompareTo( Object* ) methods generates the\nfollowing output by creating several different TimeSpan\nobjects and comparing them with a 5-minute TimeSpan.\n\nLeft: TimeSpan( 0, 5, 0 )        00:05:00\n\nObject: TimeSpan( 0, 0, 300 )    00:05:00\nLeft.Equals( Object )            True\nLeft.CompareTo( Object )         0\n\nObject: TimeSpan( 0, 5, 1 )      00:05:01\nLeft.Equals( Object )            False\nLeft.CompareTo( Object )         -1\n\nObject: TimeSpan( 0, 5, -1 )     00:04:59\nLeft.Equals( Object )            False\nLeft.CompareTo( Object )         1\n\nObject: TimeSpan( 3000000000 )   00:05:00\nLeft.Equals( Object )            True\nLeft.CompareTo( Object )         0\n\nObject: __int64 3000000000L      3000000000\nLeft.Equals( Object )            False\nLeft.CompareTo( Object )         Error: Object must be of type TimeSpan.\n\nObject: String &quot;00:05:00&quot;        00:05:00\nLeft.Equals( Object )            False\nLeft.CompareTo( Object )         Error: Object must be of type TimeSpan.\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.Compare_Equals#1\">// Example of the TimeSpan.CompareTo( Object ) and \n// TimeSpan.Equals( Object ) methods.\nusing System;\n\nclass TSCompToEqualsObjDemo\n{\n    // Compare the TimeSpan to the Object parameters, \n    // and display the Object parameters with the results.\n    static void CompTimeSpanToObject( TimeSpan Left, object Right, \n        string RightText )\n    {\n        Console.WriteLine( &quot;{0,-33}{1}&quot;, &quot;Object: &quot; + RightText, \n            Right );\n        Console.WriteLine( &quot;{0,-33}{1}&quot;, &quot;Left.Equals( Object )&quot;, \n            Left.Equals( Right ) );\n        Console.Write( &quot;{0,-33}&quot;, &quot;Left.CompareTo( Object )&quot; );\n\n        // Catch the exception if CompareTo( ) throws one.\n        try\n        {\n            Console.WriteLine( &quot;{0}<br>&quot;, Left.CompareTo( Right ) );\n        }\n        catch( Exception ex )\n        {\n            Console.WriteLine( &quot;Error: {0}<br>&quot;, ex.Message );\n        }\n    }\n\n    static void Main( )\n    {\n        TimeSpan Left = new TimeSpan( 0, 5, 0 );\n\n        Console.WriteLine(\n            &quot;This example of the TimeSpan.Equals( Object ) &quot; +\n            &quot;and <br>TimeSpan.CompareTo( Object ) methods generates &quot; +\n            &quot;the <br>following output by creating several different &quot; +\n            &quot;TimeSpan <br>objects and comparing them with a &quot; +\n            &quot;5-minute TimeSpan.<br>&quot; );\n        Console.WriteLine( &quot;{0,-33}{1}<br>&quot;, \n            &quot;Left: TimeSpan( 0, 5, 0 )&quot;, Left );\n\n        // Create objects to compare with a 5-minute TimeSpan.\n        CompTimeSpanToObject( Left, new TimeSpan( 0, 0, 300 ), \n            &quot;TimeSpan( 0, 0, 300 )&quot; );\n        CompTimeSpanToObject( Left, new TimeSpan( 0, 5, 1 ), \n            &quot;TimeSpan( 0, 5, 1 )&quot; );\n        CompTimeSpanToObject( Left, new TimeSpan( 0, 5, -1 ), \n            &quot;TimeSpan( 0, 5, -1 )&quot; );\n        CompTimeSpanToObject( Left, new TimeSpan( 3000000000 ), \n            &quot;TimeSpan( 3000000000 )&quot; );\n        CompTimeSpanToObject( Left, 3000000000L, \n            &quot;long 3000000000L&quot; );\n        CompTimeSpanToObject( Left, &quot;00:05:00&quot;, \n            &quot;string \\&quot;00:05:00\\&quot;&quot; );\n    } \n} \n\n/*\nThis example of the TimeSpan.Equals( Object ) and\nTimeSpan.CompareTo( Object ) methods generates the\nfollowing output by creating several different TimeSpan\nobjects and comparing them with a 5-minute TimeSpan.\n\nLeft: TimeSpan( 0, 5, 0 )        00:05:00\n\nObject: TimeSpan( 0, 0, 300 )    00:05:00\nLeft.Equals( Object )            True\nLeft.CompareTo( Object )         0\n\nObject: TimeSpan( 0, 5, 1 )      00:05:01\nLeft.Equals( Object )            False\nLeft.CompareTo( Object )         -1\n\nObject: TimeSpan( 0, 5, -1 )     00:04:59\nLeft.Equals( Object )            False\nLeft.CompareTo( Object )         1\n\nObject: TimeSpan( 3000000000 )   00:05:00\nLeft.Equals( Object )            True\nLeft.CompareTo( Object )         0\n\nObject: long 3000000000L         3000000000\nLeft.Equals( Object )            False\nLeft.CompareTo( Object )         Error: Object must be of type TimeSpan.\n\nObject: string &quot;00:05:00&quot;        00:05:00\nLeft.Equals( Object )            False\nLeft.CompareTo( Object )         Error: Object must be of type TimeSpan.\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_Equals_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_TimeSpan_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value indicating whether this instance is equal to a specified <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Equals (TimeSpan obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare with this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>obj</code> represents the same time interval as this instance; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method implements the <a class=\"xref\" href=\"system.iequatable-1\" data-linktype=\"relative-path\">System.IEquatable&lt;T&gt;</a> interface, and performs slightly better than <a class=\"xref\" href=\"system.timespan#System_TimeSpan_Equals_\" data-linktype=\"relative-path\">Equals</a> because it does not have to convert the <code>obj</code> parameter to an object.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates generic and nongeneric versions of the <a class=\"xref\" href=\"system.timespan#System_TimeSpan_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method for several value and reference types.  </p>\n<pre><code class=\"lang-vb\" name=\"T.CompareTo#1\">&#39; This example demonstrates the generic and non-generic versions of the \n&#39; CompareTo method for several base types.\n&#39; The non-generic version takes a parameter of type Object, while the generic\n&#39; version takes a type-specific parameter, such as Boolean, Int32, or Double.\n\nImports System\n\nClass Sample\n   Public Shared Sub Main()\n      Dim nl As String = Environment.NewLine\n      Dim msg As String = _\n          &quot;{0}The following is the result of using the generic and non-generic{0}&quot; &amp; _\n          &quot;versions of the CompareTo method for several base types:{0}&quot;\n      \n      Dim now As DateTime = DateTime.Now\n      &#39; Time span = 11 days, 22 hours, 33 minutes, 44 seconds\n      Dim tsX As New TimeSpan(11, 22, 33, 44)\n      &#39; Version = 1.2.333.4\n      Dim versX As New Version(&quot;1.2.333.4&quot;)\n      &#39; Guid = CA761232-ED42-11CE-BACD-00AA0057B223\n      Dim guidX As New Guid(&quot;{CA761232-ED42-11CE-BACD-00AA0057B223}&quot;)\n      \n      Dim a1 As [Boolean] = True,    a2 As [Boolean] = True\n      Dim b1 As [Byte] = 1,          b2 As [Byte] = 1\n      Dim c1 As Int16 = -2,          c2 As Int16 = 2\n      Dim d1 As Int32 = 3,           d2 As Int32 = 3\n      Dim e1 As Int64 = 4,           e2 As Int64 = -4\n      Dim f1 As [Decimal] = -5.5D,   f2 As [Decimal] = 5.5D\n      Dim g1 As [Single] = 6.6F,     g2 As [Single] = 6.6F\n      Dim h1 As [Double] = 7.7,      h2 As [Double] = -7.7\n      Dim i1 As [Char] = &quot;A&quot;c,       i2 As [Char] = &quot;A&quot;c\n      Dim j1 As String = &quot;abc&quot;,      j2 As String = &quot;abc&quot;\n      Dim k1 As DateTime = now,      k2 As DateTime = now\n      Dim l1 As TimeSpan = tsX,      l2 As TimeSpan = tsX\n      Dim m1 As Version = versX,     m2 As New Version(&quot;2.0&quot;)\n      Dim n1 As Guid = guidX,        n2 As Guid = guidX\n      \n      &#39; The following types are not CLS-compliant.\n      &#39; SByte, UInt16, UInt32, UInt64\n\n      Console.WriteLine(msg, nl)\n      Try\n         &#39; The second and third Show method call parameters are automatically boxed because\n         &#39; the second and third Show method declaration arguments expect type Object.\n\n         Show(&quot;Boolean:  &quot;, a1, a2, a1.CompareTo(a2), a1.CompareTo(CObj(a2)))\n         Show(&quot;Byte:     &quot;, b1, b2, b1.CompareTo(b2), b1.CompareTo(CObj(b2)))\n         Show(&quot;Int16:    &quot;, c1, c2, c1.CompareTo(c2), c1.CompareTo(CObj(c2)))\n         Show(&quot;Int32:    &quot;, d1, d2, d1.CompareTo(d2), d1.CompareTo(CObj(d2)))\n         Show(&quot;Int64:    &quot;, e1, e2, e1.CompareTo(e2), e1.CompareTo(CObj(e2)))\n         Show(&quot;Decimal:  &quot;, f1, f2, f1.CompareTo(f2), f1.CompareTo(CObj(f2)))\n         Show(&quot;Single:   &quot;, g1, g2, g1.CompareTo(g2), g1.CompareTo(CObj(g2)))\n         Show(&quot;Double:   &quot;, h1, h2, h1.CompareTo(h2), h1.CompareTo(CObj(h2)))\n         Show(&quot;Char:     &quot;, i1, i2, i1.CompareTo(i2), i1.CompareTo(CObj(i2)))\n         Show(&quot;String:   &quot;, j1, j2, j1.CompareTo(j2), j1.CompareTo(CObj(j2)))\n         Show(&quot;DateTime: &quot;, k1, k2, k1.CompareTo(k2), k1.CompareTo(CObj(k2)))\n         Show(&quot;TimeSpan: &quot;, l1, l2, l1.CompareTo(l2), l1.CompareTo(CObj(l2)))\n         Show(&quot;Version:  &quot;, m1, m2, m1.CompareTo(m2), m1.CompareTo(CObj(m2)))\n         Show(&quot;Guid:     &quot;, n1, n2, n1.CompareTo(n2), n1.CompareTo(CObj(n2)))\n         &#39;\n         Console.WriteLine(&quot;{0}The following types are not CLS-compliant:&quot;, nl)\n         Console.WriteLine(&quot;SByte, UInt16, UInt32, UInt64&quot;)\n\n      Catch e As Exception\n         Console.WriteLine(e)\n      End Try\n   End Sub &#39;Main\n   \n   Public Shared Sub Show(caption As String, var1 As [Object], var2 As [Object], _\n                          resultGeneric As Integer, resultNonGeneric As Integer)\n      Dim relation As String\n      \n      Console.Write(caption)\n      If resultGeneric = resultNonGeneric Then\n         If resultGeneric &lt; 0 Then\n            relation = &quot;less than&quot;\n         ElseIf resultGeneric &gt; 0 Then\n            relation = &quot;greater than&quot;\n         Else\n            relation = &quot;equal to&quot;\n         End If\n         Console.WriteLine(&quot;{0} is {1} {2}&quot;, var1, relation, var2)\n      \n      &#39; The following condition will never occur because the generic and non-generic\n      &#39; CompareTo methods are equivalent.\n\n      Else\n         Console.WriteLine(&quot;Generic CompareTo = {0}; non-generic CompareTo = {1}&quot;, _\n                            resultGeneric, resultNonGeneric)\n      End If\n   End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;The following is the result of using the generic and non-generic versions of the\n&#39;CompareTo method for several base types:\n&#39;\n&#39;Boolean:  True is equal to True\n&#39;Byte:     1 is equal to 1\n&#39;Int16:    -2 is less than 2\n&#39;Int32:    3 is equal to 3\n&#39;Int64:    4 is greater than -4\n&#39;Decimal:  -5.5 is less than 5.5\n&#39;Single:   6.6 is equal to 6.6\n&#39;Double:   7.7 is greater than -7.7\n&#39;Char:     A is equal to A\n&#39;String:   abc is equal to abc\n&#39;DateTime: 12/1/2003 5:37:46 PM is equal to 12/1/2003 5:37:46 PM\n&#39;TimeSpan: 11.22:33:44 is equal to 11.22:33:44\n&#39;Version:  1.2.333.4 is less than 2.0\n&#39;Guid:     ca761232-ed42-11ce-bacd-00aa0057b223 is equal to ca761232-ed42-11ce-bacd-00\n&#39;aa0057b223\n&#39;\n&#39;The following types are not CLS-compliant:\n&#39;SByte, UInt16, UInt32, UInt64\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"T.CompareTo#1\">// This example demonstrates the two versions of the \n// CompareTo method for several base types.\n// The general version takes a parameter of type Object, while the specific\n// version takes a type-specific parameter, such as Boolean, Int32, or Double.\nusing namespace System;\n\nvoid Show( String^ caption, Object^ var1, Object^ var2, int resultGeneric, int resultNonGeneric )\n{\n   String^ relation;\n   Console::Write( caption );\n   if ( resultGeneric == resultNonGeneric )\n   {\n      if ( resultGeneric &lt; 0 )\n            relation = &quot;less than&quot;;\n      else\n      if ( resultGeneric &gt; 0 )\n            relation = &quot;greater than&quot;;\n      else\n            relation = &quot;equal to&quot;;\n      Console::WriteLine( &quot;{0} is {1} {2}&quot;, var1, relation, var2 );\n   }\n   // The following condition will never occur because the generic and non-generic\n   // CompareTo methods are equivalent.\n   else\n   {\n      Console::WriteLine( &quot;Generic CompareTo = {0}; non-generic CompareTo = {1}&quot;, resultGeneric, resultNonGeneric );\n   }\n}\n\nint main()\n{\n   String^ nl = Environment::NewLine;\n   String^ msg = &quot;{0}The following is the result of using the generic and non-generic{0}&quot;\n   &quot;versions of the CompareTo method for several base types:{0}&quot;;\n   Object^ obj; // An Object used to insure CompareTo(Object) is called.\n\n   DateTime now = DateTime::Now;\n   \n   // Time span = 11 days, 22 hours, 33 minutes, 44 seconds\n   TimeSpan tsX = TimeSpan(11,22,33,44);\n   \n   // Version = 1.2.333.4\n   Version^ versX = gcnew Version(  &quot;1.2.333.4&quot; );\n   \n   // Guid = CA761232-ED42-11CE-BACD-00AA0057B223\n   Guid guidX = Guid( &quot;{CA761232-ED42-11CE-BACD-00AA0057B223}&quot;);\n   Boolean a1 = true,a2 = true;\n   Byte b1 = 1,b2 = 1;\n   Int16 c1 = -2,c2 = 2;\n   Int32 d1 = 3,d2 = 3;\n   Int64 e1 = 4,e2 = -4;\n   Decimal f1 = Decimal(-5.5), f2 = Decimal(5.5);\n   Single g1 = 6.6f,g2 = 6.6f;\n   Double h1 = 7.7,h2 = -7.7;\n   Char i1 = &#39;A&#39;,i2 = &#39;A&#39;;\n   String^ j1 = &quot;abc&quot;, ^j2 = &quot;abc&quot;;\n   DateTime k1 = now,k2 = now;\n   TimeSpan l1 = tsX,l2 = tsX;\n   Version^ m1 = versX, ^m2 = gcnew Version(  &quot;2.0&quot; );\n   Guid n1 = guidX,n2 = guidX;\n   \n   // The following types are not CLS-compliant.\n   SByte w1 = 8,w2 = 8;\n   UInt16 x1 = 9,x2 = 9;\n   UInt32 y1 = 10,y2 = 10;\n   UInt64 z1 = 11,z2 = 11;\n   \n   //\n   Console::WriteLine( msg, nl );\n   try\n   {\n      Show( &quot;Boolean: &quot;, a1, a2, a1.CompareTo( a2 ), a1.CompareTo( a2 ) );\n      Show( &quot;Byte:    &quot;, b1, b2, b1.CompareTo( b2 ), b1.CompareTo( b2 ) );\n      Show( &quot;Int16:   &quot;, c1, c2, c1.CompareTo( c2 ), c1.CompareTo( c2 ) );\n      Show( &quot;Int32:   &quot;, d1, d2, d1.CompareTo( d2 ), d1.CompareTo( d2 ) );\n      Show( &quot;Int64:   &quot;, e1, e2, e1.CompareTo( e2 ), e1.CompareTo( e2 ) );\n      Show( &quot;Decimal: &quot;, f1, f2, f1.CompareTo( f2 ), f1.CompareTo( f2 ) );\n      Show( &quot;Single:  &quot;, g1, g2, g1.CompareTo( g2 ), g1.CompareTo( g2 ) );\n      Show( &quot;Double:  &quot;, h1, h2, h1.CompareTo( h2 ), h1.CompareTo( h2 ) );\n      Show( &quot;Char:    &quot;, i1, i2, i1.CompareTo( i2 ), i1.CompareTo( i2 ) );\n      \n      // Use an anonymous object to hide the String object.\n      obj = j2;\n      Show( &quot;String:  &quot;, j1, j2, j1-&gt;CompareTo( j2 ), j1-&gt;CompareTo( obj ) );\n      Show( &quot;DateTime:&quot;, k1, k2, k1.CompareTo( k2 ), k1.CompareTo( k2 ) );\n      Show(  &quot;TimeSpan: &quot;, l1, l2, l1.CompareTo( l2 ), l1.CompareTo( l2 ) );\n      \n      // Use an anonymous object to hide the Version object.\n      obj = m2;\n      Show(  &quot;Version:  &quot;, m1, m2, m1-&gt;CompareTo( m2 ), m1-&gt;CompareTo( obj ) );\n      Show(  &quot;Guid:     &quot;, n1, n2, n1.CompareTo( n2 ), n1.CompareTo( n2 ) );\n      \n      //\n      Console::WriteLine( &quot;{0}The following types are not CLS-compliant:&quot;, nl );\n      Show( &quot;SByte:   &quot;, w1, w2, w1.CompareTo( w2 ), w1.CompareTo( w2 ) );\n      Show( &quot;UInt16:  &quot;, x1, x2, x1.CompareTo( x2 ), x1.CompareTo( x2 ) );\n      Show( &quot;UInt32:  &quot;, y1, y2, y1.CompareTo( y2 ), y1.CompareTo( y2 ) );\n      Show( &quot;UInt64:  &quot;, z1, z2, z1.CompareTo( z2 ), z1.CompareTo( z2 ) );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n}\n//     This example displays the following output:\n//     \n//     The following is the result of using the generic and non-generic versions of the\n//     CompareTo method for several base types:\n//     \n//     Boolean:  True is equal to True\n//     Byte:     1 is equal to 1\n//     Int16:    -2 is less than 2\n//     Int32:    3 is equal to 3\n//     Int64:    4 is greater than -4\n//     Decimal:  -5.5 is less than 5.5\n//     Single:   6.6 is equal to 6.6\n//     Double:   7.7 is greater than -7.7\n//     Char:     A is equal to A\n//     String:   abc is equal to abc\n//     DateTime: 12/1/2003 5:37:46 PM is equal to 12/1/2003 5:37:46 PM\n//     TimeSpan: 11.22:33:44 is equal to 11.22:33:44\n//     Version:  1.2.333.4 is less than 2.0\n//     Guid:     ca761232-ed42-11ce-bacd-00aa0057b223 is equal to ca761232-ed42-11ce-bacd-00\n//     aa0057b223\n//     \n//     The following types are not CLS-compliant:\n//     SByte:    8 is equal to 8\n//     UInt16:   9 is equal to 9\n//     UInt32:   10 is equal to 10\n//     UInt64:   11 is equal to 11\n</code></pre><pre><code class=\"lang-cs\" name=\"T.CompareTo#1\">// This example demonstrates the generic and non-generic versions of the \n// CompareTo method for several base types.\n// The non-generic version takes a parameter of type Object, while the generic\n// version takes a type-specific parameter, such as Boolean, Int32, or Double.\n\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    string    nl = Environment.NewLine;\n    string    msg = &quot;{0}The following is the result of using the generic and non-generic{0}&quot; +\n                    &quot;versions of the CompareTo method for several base types:{0}&quot;;\n\n    DateTime  now = DateTime.Now;\n// Time span = 11 days, 22 hours, 33 minutes, 44 seconds\n    TimeSpan  tsX = new TimeSpan(11, 22, 33, 44); \n// Version = 1.2.333.4\n    Version   versX = new Version(&quot;1.2.333.4&quot;);  \n// Guid = CA761232-ED42-11CE-BACD-00AA0057B223\n    Guid      guidX = new Guid(&quot;{CA761232-ED42-11CE-BACD-00AA0057B223}&quot;);\n\n    Boolean  a1 = true,  a2 = true;\n    Byte     b1 = 1,     b2 = 1;\n    Int16    c1 = -2,    c2 = 2;\n    Int32    d1 = 3,     d2 = 3;\n    Int64    e1 = 4,     e2 = -4;\n    Decimal  f1 = -5.5m, f2 = 5.5m;\n    Single   g1 = 6.6f,  g2 = 6.6f;\n    Double   h1 = 7.7d,  h2 = -7.7d;\n    Char     i1 = &#39;A&#39;,   i2 = &#39;A&#39;;\n    String   j1 = &quot;abc&quot;, j2 = &quot;abc&quot;;\n    DateTime k1 = now,   k2 = now;\n    TimeSpan l1 = tsX,   l2 = tsX;\n    Version  m1 = versX, m2 = new Version(&quot;2.0&quot;);\n    Guid     n1 = guidX, n2 = guidX;\n\n// The following types are not CLS-compliant.\n    SByte    w1 = 8,     w2 = 8;\n    UInt16   x1 = 9,     x2 = 9;\n    UInt32   y1 = 10,    y2 = 10;\n    UInt64   z1 = 11,    z2 = 11;\n//\n    Console.WriteLine(msg, nl);\n    try \n        {\n// The second and third Show method call parameters are automatically boxed because\n// the second and third Show method declaration arguments expect type Object.\n\n        Show(&quot;Boolean:  &quot;, a1, a2, a1.CompareTo(a2), a1.CompareTo((Object)a2));\n        Show(&quot;Byte:     &quot;, b1, b2, b1.CompareTo(b2), b1.CompareTo((Object)b2));\n        Show(&quot;Int16:    &quot;, c1, c2, c1.CompareTo(c2), c1.CompareTo((Object)c2));\n        Show(&quot;Int32:    &quot;, d1, d2, d1.CompareTo(d2), d1.CompareTo((Object)d2));\n        Show(&quot;Int64:    &quot;, e1, e2, e1.CompareTo(e2), e1.CompareTo((Object)e2));\n        Show(&quot;Decimal:  &quot;, f1, f2, f1.CompareTo(f2), f1.CompareTo((Object)f2));\n        Show(&quot;Single:   &quot;, g1, g2, g1.CompareTo(g2), g1.CompareTo((Object)g2));\n        Show(&quot;Double:   &quot;, h1, h2, h1.CompareTo(h2), h1.CompareTo((Object)h2));\n        Show(&quot;Char:     &quot;, i1, i2, i1.CompareTo(i2), i1.CompareTo((Object)i2));\n        Show(&quot;String:   &quot;, j1, j2, j1.CompareTo(j2), j1.CompareTo((Object)j2));\n        Show(&quot;DateTime: &quot;, k1, k2, k1.CompareTo(k2), k1.CompareTo((Object)k2));\n        Show(&quot;TimeSpan: &quot;, l1, l2, l1.CompareTo(l2), l1.CompareTo((Object)l2));\n        Show(&quot;Version:  &quot;, m1, m2, m1.CompareTo(m2), m1.CompareTo((Object)m2));\n        Show(&quot;Guid:     &quot;, n1, n2, n1.CompareTo(n2), n1.CompareTo((Object)n2));\n//\n        Console.WriteLine(&quot;{0}The following types are not CLS-compliant:&quot;, nl);\n        Show(&quot;SByte:    &quot;, w1, w2, w1.CompareTo(w2), w1.CompareTo((Object)w2));\n        Show(&quot;UInt16:   &quot;, x1, x2, x1.CompareTo(x2), x1.CompareTo((Object)x2));\n        Show(&quot;UInt32:   &quot;, y1, y2, y1.CompareTo(y2), y1.CompareTo((Object)y2));\n        Show(&quot;UInt64:   &quot;, z1, z2, z1.CompareTo(z2), z1.CompareTo((Object)z2));\n        }\n    catch (Exception e)\n        {\n        Console.WriteLine(e);\n        }\n    }\n\n    public static void Show(string caption, Object var1, Object var2, \n                            int resultGeneric, int resultNonGeneric)\n    {\n    string relation;\n\n    Console.Write(caption);\n    if (resultGeneric == resultNonGeneric) \n        {\n        if      (resultGeneric &lt; 0) relation = &quot;less than&quot;;\n        else if (resultGeneric &gt; 0) relation = &quot;greater than&quot;;\n        else                        relation = &quot;equal to&quot;;\n        Console.WriteLine(&quot;{0} is {1} {2}&quot;, var1, relation, var2);\n        }\n\n// The following condition will never occur because the generic and non-generic\n// CompareTo methods are equivalent.\n\n    else\n        {\n        Console.WriteLine(&quot;Generic CompareTo = {0}; non-generic CompareTo = {1}&quot;, \n                           resultGeneric, resultNonGeneric);\n        }\n   }\n}\n/*\nThis example produces the following results:\n\nThe following is the result of using the generic and non-generic versions of the\nCompareTo method for several base types:\n\nBoolean:  True is equal to True\nByte:     1 is equal to 1\nInt16:    -2 is less than 2\nInt32:    3 is equal to 3\nInt64:    4 is greater than -4\nDecimal:  -5.5 is less than 5.5\nSingle:   6.6 is equal to 6.6\nDouble:   7.7 is greater than -7.7\nChar:     A is equal to A\nString:   abc is equal to abc\nDateTime: 12/1/2003 5:37:46 PM is equal to 12/1/2003 5:37:46 PM\nTimeSpan: 11.22:33:44 is equal to 11.22:33:44\nVersion:  1.2.333.4 is less than 2.0\nGuid:     ca761232-ed42-11ce-bacd-00aa0057b223 is equal to ca761232-ed42-11ce-bacd-00\naa0057b223\n\nThe following types are not CLS-compliant:\nSByte:    8 is equal to 8\nUInt16:   9 is equal to 9\nUInt32:   10 is equal to 10\nUInt64:   11 is equal to 11\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_Equals_System_TimeSpan_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_TimeSpan_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(TimeSpan,TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether two specified instances of <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> are equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool Equals (TimeSpan t1, TimeSpan t2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>t1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first time interval to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>t2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second time interval to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the values of <code>t1</code> and <code>t2</code> are equal; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example compares several <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> objects to a reference <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object using the static Equals method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.TimeSpan.Compare_Equals#2\">// Example of the TimeSpan::Compare( TimeSpan, TimeSpan ) and \n// TimeSpan::Equals( TimeSpan, TimeSpan ) methods.\nusing namespace System;\nconst __wchar_t * protoFmt = L&quot;{0,-38}{1}&quot;;\n\n// Compare TimeSpan parameters, and display them with the results.\nvoid CompareTimeSpans( TimeSpan Left, TimeSpan Right, String^ RightText )\n{\n   String^ dataFmt = gcnew String( protoFmt );\n   Console::WriteLine();\n   Console::WriteLine( dataFmt, String::Concat( &quot;Right: &quot;, RightText ), Right );\n   Console::WriteLine( dataFmt, &quot;TimeSpan::Equals( Left, Right )&quot;, TimeSpan::Equals( Left, Right ) );\n   Console::WriteLine( dataFmt, &quot;TimeSpan::Compare( Left, Right )&quot;, TimeSpan::Compare( Left, Right ) );\n}\n\nint main()\n{\n   TimeSpan Left = TimeSpan(2,0,0);\n   Console::WriteLine( &quot;This example of the TimeSpan::Equals( TimeSpan, TimeSpan &quot;\n   &quot;) and <br>TimeSpan::Compare( TimeSpan, TimeSpan ) &quot;\n   &quot;methods generates the <br>following output by creating &quot;\n   &quot;several different TimeSpan <br>objects and comparing &quot;\n   &quot;them with a 2-hour TimeSpan.<br>&quot; );\n   Console::WriteLine( gcnew String( protoFmt ), &quot;Left: TimeSpan( 2, 0, 0 )&quot;, Left );\n   \n   // Create objects to compare with a 2-hour TimeSpan.\n   CompareTimeSpans( Left, TimeSpan(0,120,0), &quot;TimeSpan( 0, 120, 0 )&quot; );\n   CompareTimeSpans( Left, TimeSpan(2,0,1), &quot;TimeSpan( 2, 0, 1 )&quot; );\n   CompareTimeSpans( Left, TimeSpan(2,0,-1), &quot;TimeSpan( 2, 0, -1 )&quot; );\n   CompareTimeSpans( Left, TimeSpan(72000000000), &quot;TimeSpan( 72000000000 )&quot; );\n   CompareTimeSpans( Left, TimeSpan::FromDays( 1.0 / 12. ), &quot;TimeSpan::FromDays( 1 / 12 )&quot; );\n}\n\n/*\nThis example of the TimeSpan::Equals( TimeSpan, TimeSpan ) and\nTimeSpan::Compare( TimeSpan, TimeSpan ) methods generates the\nfollowing output by creating several different TimeSpan\nobjects and comparing them with a 2-hour TimeSpan.\n\nLeft: TimeSpan( 2, 0, 0 )             02:00:00\n\nRight: TimeSpan( 0, 120, 0 )          02:00:00\nTimeSpan::Equals( Left, Right )       True\nTimeSpan::Compare( Left, Right )      0\n\nRight: TimeSpan( 2, 0, 1 )            02:00:01\nTimeSpan::Equals( Left, Right )       False\nTimeSpan::Compare( Left, Right )      -1\n\nRight: TimeSpan( 2, 0, -1 )           01:59:59\nTimeSpan::Equals( Left, Right )       False\nTimeSpan::Compare( Left, Right )      1\n\nRight: TimeSpan( 72000000000 )        02:00:00\nTimeSpan::Equals( Left, Right )       True\nTimeSpan::Compare( Left, Right )      0\n\nRight: TimeSpan::FromDays( 1 / 12 )   02:00:00\nTimeSpan::Equals( Left, Right )       True\nTimeSpan::Compare( Left, Right )      0\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.Compare_Equals#2\">// Example of the TimeSpan.Compare( TimeSpan, TimeSpan ) and \n// TimeSpan.Equals( TimeSpan, TimeSpan ) methods.\nusing System;\n\nclass TSCompareEqualsDemo\n{\n    const string dataFmt = &quot;{0,-38}{1}&quot; ;\n\n    // Compare TimeSpan parameters, and display them with the results.\n    static void CompareTimeSpans( TimeSpan Left, TimeSpan Right, \n        string RightText )\n    {\n        Console.WriteLine( );\n        Console.WriteLine( dataFmt, &quot;Right: &quot; + RightText, Right );\n        Console.WriteLine( dataFmt, &quot;TimeSpan.Equals( Left, Right )&quot;, \n            TimeSpan.Equals( Left, Right ) );\n        Console.WriteLine( dataFmt, \n            &quot;TimeSpan.Compare( Left, Right )&quot;, \n            TimeSpan.Compare( Left, Right ) );\n    }\n\n    static void Main( )\n    {\n        TimeSpan Left = new TimeSpan( 2, 0, 0 );\n\n        Console.WriteLine(\n            &quot;This example of the TimeSpan.Equals( TimeSpan, Time&quot; +\n            &quot;Span ) and <br>TimeSpan.Compare( TimeSpan, TimeSpan ) &quot; +\n            &quot;methods generates the <br>following output by creating &quot; +\n            &quot;several different TimeSpan <br>objects and comparing &quot; +\n            &quot;them with a 2-hour TimeSpan.<br>&quot; );\n        Console.WriteLine( dataFmt, &quot;Left: TimeSpan( 2, 0, 0 )&quot;, \n            Left );\n\n        // Create objects to compare with a 2-hour TimeSpan.\n        CompareTimeSpans( Left, new TimeSpan( 0, 120, 0 ), \n            &quot;TimeSpan( 0, 120, 0 )&quot; );\n        CompareTimeSpans( Left, new TimeSpan( 2, 0, 1 ), \n            &quot;TimeSpan( 2, 0, 1 )&quot; );\n        CompareTimeSpans( Left, new TimeSpan( 2, 0, -1 ), \n            &quot;TimeSpan( 2, 0, -1 )&quot;);\n        CompareTimeSpans( Left, new TimeSpan( 72000000000 ), \n            &quot;TimeSpan( 72000000000 )&quot; );\n        CompareTimeSpans( Left, TimeSpan.FromDays( 1.0 / 12D ), \n            &quot;TimeSpan.FromDays( 1 / 12 )&quot; );\n    } \n} \n\n/*\nThis example of the TimeSpan.Equals( TimeSpan, TimeSpan ) and\nTimeSpan.Compare( TimeSpan, TimeSpan ) methods generates the\nfollowing output by creating several different TimeSpan\nobjects and comparing them with a 2-hour TimeSpan.\n\nLeft: TimeSpan( 2, 0, 0 )             02:00:00\n\nRight: TimeSpan( 0, 120, 0 )          02:00:00\nTimeSpan.Equals( Left, Right )        True\nTimeSpan.Compare( Left, Right )       0\n\nRight: TimeSpan( 2, 0, 1 )            02:00:01\nTimeSpan.Equals( Left, Right )        False\nTimeSpan.Compare( Left, Right )       -1\n\nRight: TimeSpan( 2, 0, -1 )           01:59:59\nTimeSpan.Equals( Left, Right )        False\nTimeSpan.Compare( Left, Right )       1\n\nRight: TimeSpan( 72000000000 )        02:00:00\nTimeSpan.Equals( Left, Right )        True\nTimeSpan.Compare( Left, Right )       0\n\nRight: TimeSpan.FromDays( 1 / 12 )    02:00:00\nTimeSpan.Equals( Left, Right )        True\nTimeSpan.Compare( Left, Right )       0\n*/ \n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.Compare_Equals#2\">&#39; Example of the TimeSpan.Compare( TimeSpan, TimeSpan ) and \n&#39; TimeSpan.Equals( TimeSpan, TimeSpan ) methods.\nImports System\nImports Microsoft.VisualBasic\n\nModule TSCompareEqualsDemo\n    \n    Const dataFmt As String = &quot;{0,-38}{1}&quot;\n\n    &#39; Compare TimeSpan parameters, and display them with the results.\n    Sub CompareTimeSpans( Left as TimeSpan, Right as TimeSpan, _\n        RightText as String )\n\n        Console.WriteLine( )\n        Console.WriteLine( dataFmt, &quot;Right: &quot; &amp; RightText, Right )\n        Console.WriteLine( dataFmt, &quot;TimeSpan.Equals( Left, Right )&quot;, _\n            TimeSpan.Equals( Left, Right ) )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan.Compare( Left, Right )&quot;, _\n            TimeSpan.Compare( Left, Right ) )\n    End Sub\n\n    Sub Main( )\n        Dim Left as new TimeSpan( 2, 0, 0 )\n\n        Console.WriteLine( _\n            &quot;This example of the TimeSpan.Equals( TimeSpan, &quot; &amp; _\n            &quot;TimeSpan ) and &quot; &amp; vbCrLf &amp; &quot;TimeSpan.Compare( &quot; &amp; _\n            &quot;TimeSpan, TimeSpan ) methods generates the &quot; &amp; vbCrLf &amp; _\n            &quot;following output by creating several &quot; &amp; _\n            &quot;different TimeSpan &quot; &amp; vbCrLf &amp; &quot;objects and &quot; &amp; _\n            &quot;comparing them with a 2-hour TimeSpan.&quot; &amp; vbCrLf )\n        Console.WriteLine( dataFmt, &quot;Left: TimeSpan( 2, 0, 0 )&quot;, Left )\n\n        &#39; Create objects to compare with a 2-hour TimeSpan.\n        CompareTimeSpans( Left, new TimeSpan( 0, 120, 0 ), _\n            &quot;TimeSpan( 0, 120, 0 )&quot; )\n        CompareTimeSpans( Left, new TimeSpan( 2, 0, 1 ), _\n            &quot;TimeSpan( 2, 0, 1 )&quot; )\n        CompareTimeSpans( Left, new TimeSpan( 2, 0, -1 ), _\n            &quot;TimeSpan( 2, 0, -1 )&quot; )\n        CompareTimeSpans( Left, new TimeSpan( 72000000000 ), _\n            &quot;TimeSpan( 72000000000 )&quot; )\n        CompareTimeSpans( Left, TimeSpan.FromDays( 1.0 / 12R ), _\n            &quot;TimeSpan.FromDays( 1 / 12 )&quot; )\n    End Sub \nEnd Module \n\n&#39; This example of the TimeSpan.Equals( TimeSpan, TimeSpan ) and\n&#39; TimeSpan.Compare( TimeSpan, TimeSpan ) methods generates the\n&#39; following output by creating several different TimeSpan\n&#39; objects and comparing them with a 2-hour TimeSpan.\n&#39; \n&#39; Left: TimeSpan( 2, 0, 0 )             02:00:00\n&#39; \n&#39; Right: TimeSpan( 0, 120, 0 )          02:00:00\n&#39; TimeSpan.Equals( Left, Right )        True\n&#39; TimeSpan.Compare( Left, Right )       0\n&#39; \n&#39; Right: TimeSpan( 2, 0, 1 )            02:00:01\n&#39; TimeSpan.Equals( Left, Right )        False\n&#39; TimeSpan.Compare( Left, Right )       -1\n&#39; \n&#39; Right: TimeSpan( 2, 0, -1 )           01:59:59\n&#39; TimeSpan.Equals( Left, Right )        False\n&#39; TimeSpan.Compare( Left, Right )       1\n&#39; \n&#39; Right: TimeSpan( 72000000000 )        02:00:00\n&#39; TimeSpan.Equals( Left, Right )        True\n&#39; TimeSpan.Compare( Left, Right )       0\n&#39; \n&#39; Right: TimeSpan.FromDays( 1 / 12 )    02:00:00\n&#39; TimeSpan.Equals( Left, Right )        True\n&#39; TimeSpan.Compare( Left, Right )       0\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_FromDays_System_Double_\">\r\n    \r\n            <a id=\"System_TimeSpan_FromDays_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FromDays(Double)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that represents a specified number of days, where the specification is accurate to the nearest millisecond.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TimeSpan FromDays (double value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A number of days, accurate to the nearest millisecond.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </div>\r\n                  <p>An object that represents <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> or greater than <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.  </p>\n<p> -or-  </p>\n<p> <code>value</code> is <a class=\"xref\" href=\"system.double#System_Double_PositiveInfinity\" data-linktype=\"relative-path\">PositiveInfinity</a>.  </p>\n<p> -or-  </p>\n<p> <code>value</code> is <a class=\"xref\" href=\"system.double#System_Double_NegativeInfinity\" data-linktype=\"relative-path\">NegativeInfinity</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is equal to <a class=\"xref\" href=\"system.double#System_Double_NaN\" data-linktype=\"relative-path\">NaN</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>value</code> parameter is converted to milliseconds, which is converted to ticks, and that number of ticks is used to initialize the new <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>. Therefore, <code>value</code> will only be considered accurate to the nearest millisecond. Note that, because of the loss of precision of the <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> data type, this conversion can cause an <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> for values that are near to but still in the range of either <a class=\"xref\" href=\"system.timespan#System_TimeSpan_MinValue\" data-linktype=\"relative-path\">MinValue</a> or <a class=\"xref\" href=\"system.timespan#System_TimeSpan_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>. For example, this causes an <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> in the following attempt to instantiate a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeSpan.FromMinutes#2\">      // The following throws an OverflowException at runtime\n      TimeSpan maxSpan = TimeSpan.FromDays(TimeSpan.MaxValue.TotalDays);\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.FromMinutes#2\">      &#39; The following throws an OverflowException at runtime\n      Dim maxSpan As TimeSpan = TimeSpan.FromDays(TimeSpan.MaxValue.TotalDays)\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates several <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> objects using the FromDays method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.TimeSpan.From#6\">// Example of the TimeSpan::FromDays( double ) method.\nusing namespace System;\nvoid GenTimeSpanFromDays( double days )\n{\n   \n   // Create a TimeSpan object and TimeSpan string from \n   // a number of days.\n   TimeSpan interval = TimeSpan::FromDays( days );\n   String^ timeInterval = interval.ToString();\n   \n   // Pad the end of the TimeSpan string with spaces if it \n   // does not contain milliseconds.\n   int pIndex = timeInterval-&gt;IndexOf( &#39;:&#39; );\n   pIndex = timeInterval-&gt;IndexOf( &#39;.&#39;, pIndex );\n   if ( pIndex &lt; 0 )\n      timeInterval = String::Concat( timeInterval, &quot;        &quot; );\n\n   Console::WriteLine( &quot;{0,21}{1,26}&quot;, days, timeInterval );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of TimeSpan::FromDays( double )<br>&quot;\n   &quot;generates the following output.<br>&quot; );\n   Console::WriteLine( &quot;{0,21}{1,18}&quot;, &quot;FromDays&quot;, &quot;TimeSpan&quot; );\n   Console::WriteLine( &quot;{0,21}{1,18}&quot;, &quot;--------&quot;, &quot;--------&quot; );\n   GenTimeSpanFromDays( 0.000000006 );\n   GenTimeSpanFromDays( 0.000000017 );\n   GenTimeSpanFromDays( 0.000123456 );\n   GenTimeSpanFromDays( 1.234567898 );\n   GenTimeSpanFromDays( 12345.678987654 );\n   GenTimeSpanFromDays( 0.000011574 );\n   GenTimeSpanFromDays( 0.000694444 );\n   GenTimeSpanFromDays( 0.041666666 );\n   GenTimeSpanFromDays( 1 );\n   GenTimeSpanFromDays( 20.84745602 );\n}\n\n/*\nThis example of TimeSpan::FromDays( double )\ngenerates the following output.\n\n             FromDays          TimeSpan\n             --------          --------\n                6E-09          00:00:00.0010000\n              1.7E-08          00:00:00.0010000\n          0.000123456          00:00:10.6670000\n          1.234567898        1.05:37:46.6660000\n      12345.678987654    12345.16:17:44.5330000\n           1.1574E-05          00:00:01\n          0.000694444          00:01:00\n          0.041666666          01:00:00\n                    1        1.00:00:00\n          20.84745602       20.20:20:20.2000000\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.From#6\">&#39; Example of the TimeSpan.FromDays( Double ) method.\nImports System\nImports Microsoft.VisualBasic\n\nModule FromDaysDemo\n\n    Sub GenTimeSpanFromDays( days As Double )\n\n        &#39; Create a TimeSpan object and TimeSpan string from \n        &#39; a number of days.\n        Dim interval As TimeSpan = _\n            TimeSpan.FromDays( days )\n        Dim timeInterval As String = interval.ToString( )\n\n        &#39; Pad the end of the TimeSpan string with spaces if it \n        &#39; does not contain milliseconds.\n        Dim pIndex As Integer = timeInterval.IndexOf( &quot;:&quot;c )\n        pIndex = timeInterval.IndexOf( &quot;.&quot;c, pIndex )\n        If pIndex &lt; 0 Then  timeInterval &amp;= &quot;        &quot;\n\n        Console.WriteLine( &quot;{0,21}{1,26}&quot;, days, timeInterval )\n    End Sub \n\n    Sub Main( )\n\n        Console.WriteLine( &quot;This example of &quot; &amp; _\n            &quot;TimeSpan.FromDays( Double )&quot; &amp; _\n            vbCrLf &amp; &quot;generates the following output.&quot; &amp; vbCrLf )\n        Console.WriteLine( &quot;{0,21}{1,18}&quot;, _\n            &quot;FromDays&quot;, &quot;TimeSpan&quot; )    \n        Console.WriteLine( &quot;{0,21}{1,18}&quot;, _\n            &quot;--------&quot;, &quot;--------&quot; )    \n\n        GenTimeSpanFromDays( 0.000000006 )\n        GenTimeSpanFromDays( 0.000000017 )\n        GenTimeSpanFromDays( 0.000123456 )\n        GenTimeSpanFromDays( 1.234567898 )\n        GenTimeSpanFromDays( 12345.678987654 )\n        GenTimeSpanFromDays( 0.000011574 )\n        GenTimeSpanFromDays( 0.000694444 )\n        GenTimeSpanFromDays( 0.041666666 )\n        GenTimeSpanFromDays( 1 )\n        GenTimeSpanFromDays( 20.84745602 )\n    End Sub \nEnd Module \n\n&#39; This example of TimeSpan.FromDays( Double )\n&#39; generates the following output.\n&#39; \n&#39;              FromDays          TimeSpan\n&#39;              --------          --------\n&#39;                 6E-09          00:00:00.0010000\n&#39;               1.7E-08          00:00:00.0010000\n&#39;           0.000123456          00:00:10.6670000\n&#39;           1.234567898        1.05:37:46.6660000\n&#39;       12345.678987654    12345.16:17:44.5330000\n&#39;            1.1574E-05          00:00:01\n&#39;           0.000694444          00:01:00\n&#39;           0.041666666          01:00:00\n&#39;                     1        1.00:00:00\n&#39;           20.84745602       20.20:20:20.2000000\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.From#6\">// Example of the TimeSpan.FromDays( double ) method.\nusing System;\n\nclass FromDaysDemo\n{\n    static void GenTimeSpanFromDays( double days )\n    {\n        // Create a TimeSpan object and TimeSpan string from \n        // a number of days.\n        TimeSpan interval = TimeSpan.FromDays( days );\n        string   timeInterval = interval.ToString( );\n\n        // Pad the end of the TimeSpan string with spaces if it \n        // does not contain milliseconds.\n        int pIndex = timeInterval.IndexOf( &#39;:&#39; );\n        pIndex = timeInterval.IndexOf( &#39;.&#39;, pIndex );\n        if( pIndex &lt; 0 )   timeInterval += &quot;        &quot;;\n\n        Console.WriteLine( &quot;{0,21}{1,26}&quot;, days, timeInterval );\n    } \n\n    static void Main( )\n    {\n        Console.WriteLine(\n            &quot;This example of TimeSpan.FromDays( double )<br>&quot; +\n            &quot;generates the following output.<br>&quot; );\n        Console.WriteLine( &quot;{0,21}{1,18}&quot;,\n            &quot;FromDays&quot;, &quot;TimeSpan&quot; );\n        Console.WriteLine( &quot;{0,21}{1,18}&quot;, \n            &quot;--------&quot;, &quot;--------&quot; );\n\n        GenTimeSpanFromDays( 0.000000006 );\n        GenTimeSpanFromDays( 0.000000017 );\n        GenTimeSpanFromDays( 0.000123456 );\n        GenTimeSpanFromDays( 1.234567898 );\n        GenTimeSpanFromDays( 12345.678987654 );\n        GenTimeSpanFromDays( 0.000011574 );\n        GenTimeSpanFromDays( 0.000694444 );\n        GenTimeSpanFromDays( 0.041666666 );\n        GenTimeSpanFromDays( 1 );\n        GenTimeSpanFromDays( 20.84745602 );\n    } \n} \n\n/*\nThis example of TimeSpan.FromDays( double )\ngenerates the following output.\n\n             FromDays          TimeSpan\n             --------          --------\n                6E-09          00:00:00.0010000\n              1.7E-08          00:00:00.0010000\n          0.000123456          00:00:10.6670000\n          1.234567898        1.05:37:46.6660000\n      12345.678987654    12345.16:17:44.5330000\n           1.1574E-05          00:00:01\n          0.000694444          00:01:00\n          0.041666666          01:00:00\n                    1        1.00:00:00\n          20.84745602       20.20:20:20.2000000\n*/ \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_FromHours_System_Double_\">\r\n    \r\n            <a id=\"System_TimeSpan_FromHours_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FromHours(Double)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that represents a specified number of hours, where the specification is accurate to the nearest millisecond.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TimeSpan FromHours (double value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A number of hours accurate to the nearest millisecond.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </div>\r\n                  <p>An object that represents <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> or greater than <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.  </p>\n<p> -or-  </p>\n<p> <code>value</code> is <a class=\"xref\" href=\"system.double#System_Double_PositiveInfinity\" data-linktype=\"relative-path\">PositiveInfinity</a>.  </p>\n<p> -or-  </p>\n<p> <code>value</code> is <a class=\"xref\" href=\"system.double#System_Double_NegativeInfinity\" data-linktype=\"relative-path\">NegativeInfinity</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is equal to <a class=\"xref\" href=\"system.double#System_Double_NaN\" data-linktype=\"relative-path\">NaN</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>value</code> parameter is converted to milliseconds, which is converted to ticks, and that number of ticks is used to initialize the new <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>. Therefore, <code>value</code> will only be considered accurate to the nearest millisecond. Note that, because of the loss of precision of the <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> data type, this conversion can generate an <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> for values that are near to but still in the range of either <a class=\"xref\" href=\"system.timespan#System_TimeSpan_MinValue\" data-linktype=\"relative-path\">MinValue</a> or <a class=\"xref\" href=\"system.timespan#System_TimeSpan_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>. For example, this causes an <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> in the following attempt to instantiate a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeSpan.FromMinutes#3\">      // The following throws an OverflowException at runtime\n      TimeSpan maxSpan = TimeSpan.FromHours(TimeSpan.MaxValue.TotalHours);\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.FromMinutes#3\">      &#39; The following throws an OverflowException at runtime\n      Dim maxSpan As TimeSpan = TimeSpan.FromHours(TimeSpan.MaxValue.TotalHours)\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates several <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> objects using the FromHours method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.TimeSpan.From#5\">// Example of the TimeSpan::FromHours( double ) method.\nusing namespace System;\nvoid GenTimeSpanFromHours( double hours )\n{\n   \n   // Create a TimeSpan object and TimeSpan string from \n   // a number of hours.\n   TimeSpan interval = TimeSpan::FromHours( hours );\n   String^ timeInterval = interval.ToString();\n   \n   // Pad the end of the TimeSpan string with spaces if it \n   // does not contain milliseconds.\n   int pIndex = timeInterval-&gt;IndexOf( &#39;:&#39; );\n   pIndex = timeInterval-&gt;IndexOf( &#39;.&#39;, pIndex );\n   if ( pIndex &lt; 0 )\n      timeInterval = String::Concat( timeInterval, &quot;        &quot; );\n\n   Console::WriteLine( &quot;{0,21}{1,26}&quot;, hours, timeInterval );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of TimeSpan::FromHours( double )<br>&quot;\n   &quot;generates the following output.<br>&quot; );\n   Console::WriteLine( &quot;{0,21}{1,18}&quot;, &quot;FromHours&quot;, &quot;TimeSpan&quot; );\n   Console::WriteLine( &quot;{0,21}{1,18}&quot;, &quot;---------&quot;, &quot;--------&quot; );\n   GenTimeSpanFromHours( 0.0000002 );\n   GenTimeSpanFromHours( 0.0000003 );\n   GenTimeSpanFromHours( 0.0012345 );\n   GenTimeSpanFromHours( 12.3456789 );\n   GenTimeSpanFromHours( 123456.7898765 );\n   GenTimeSpanFromHours( 0.0002777 );\n   GenTimeSpanFromHours( 0.0166666 );\n   GenTimeSpanFromHours( 1 );\n   GenTimeSpanFromHours( 24 );\n   GenTimeSpanFromHours( 500.3389445 );\n}\n\n/*\nThis example of TimeSpan::FromHours( double )\ngenerates the following output.\n\n            FromHours          TimeSpan\n            ---------          --------\n                2E-07          00:00:00.0010000\n                3E-07          00:00:00.0010000\n            0.0012345          00:00:04.4440000\n           12.3456789          12:20:44.4440000\n       123456.7898765     5144.00:47:23.5550000\n            0.0002777          00:00:01\n            0.0166666          00:01:00\n                    1          01:00:00\n                   24        1.00:00:00\n          500.3389445       20.20:20:20.2000000\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.From#5\">&#39; Example of the TimeSpan.FromHours( Double ) method.\nImports System\nImports Microsoft.VisualBasic\n\nModule FromHoursDemo\n\n    Sub GenTimeSpanFromHours( hours As Double )\n\n        &#39; Create a TimeSpan object and TimeSpan string from \n        &#39; a number of hours.\n        Dim interval As TimeSpan = _\n            TimeSpan.FromHours( hours )\n        Dim timeInterval As String = interval.ToString( )\n\n        &#39; Pad the end of the TimeSpan string with spaces if it \n        &#39; does not contain milliseconds.\n        Dim pIndex As Integer = timeInterval.IndexOf( &quot;:&quot;c )\n        pIndex = timeInterval.IndexOf( &quot;.&quot;c, pIndex )\n        If pIndex &lt; 0 Then  timeInterval &amp;= &quot;        &quot;\n\n        Console.WriteLine( &quot;{0,21}{1,26}&quot;, hours, timeInterval )\n    End Sub \n\n    Sub Main( )\n\n        Console.WriteLine( &quot;This example of &quot; &amp; _\n            &quot;TimeSpan.FromHours( Double )&quot; &amp; _\n            vbCrLf &amp; &quot;generates the following output.&quot; &amp; vbCrLf )\n        Console.WriteLine( &quot;{0,21}{1,18}&quot;, _\n            &quot;FromHours&quot;, &quot;TimeSpan&quot; )    \n        Console.WriteLine( &quot;{0,21}{1,18}&quot;, _\n            &quot;---------&quot;, &quot;--------&quot; )    \n\n        GenTimeSpanFromHours( 0.0000002 )\n        GenTimeSpanFromHours( 0.0000003 )\n        GenTimeSpanFromHours( 0.0012345 )\n        GenTimeSpanFromHours( 12.3456789 )\n        GenTimeSpanFromHours( 123456.7898765 )\n        GenTimeSpanFromHours( 0.0002777 )\n        GenTimeSpanFromHours( 0.0166666 )\n        GenTimeSpanFromHours( 1 )\n        GenTimeSpanFromHours( 24 )\n        GenTimeSpanFromHours( 500.3389445 )\n    End Sub \nEnd Module \n\n&#39; This example of TimeSpan.FromHours( Double )\n&#39; generates the following output.\n&#39; \n&#39;             FromHours          TimeSpan\n&#39;             ---------          --------\n&#39;                 2E-07          00:00:00.0010000\n&#39;                 3E-07          00:00:00.0010000\n&#39;             0.0012345          00:00:04.4440000\n&#39;            12.3456789          12:20:44.4440000\n&#39;        123456.7898765     5144.00:47:23.5550000\n&#39;             0.0002777          00:00:01\n&#39;             0.0166666          00:01:00\n&#39;                     1          01:00:00\n&#39;                    24        1.00:00:00\n&#39;           500.3389445       20.20:20:20.2000000\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.From#5\">// Example of the TimeSpan.FromHours( double ) method.\nusing System;\n\nclass FromHoursDemo\n{\n    static void GenTimeSpanFromHours( double hours )\n    {\n        // Create a TimeSpan object and TimeSpan string from \n        // a number of hours.\n        TimeSpan    interval = TimeSpan.FromHours( hours );\n        string      timeInterval = interval.ToString( );\n\n        // Pad the end of the TimeSpan string with spaces if it \n        // does not contain milliseconds.\n        int pIndex = timeInterval.IndexOf( &#39;:&#39; );\n        pIndex = timeInterval.IndexOf( &#39;.&#39;, pIndex );\n        if( pIndex &lt; 0 )   timeInterval += &quot;        &quot;;\n\n        Console.WriteLine( &quot;{0,21}{1,26}&quot;, hours, timeInterval );\n    } \n\n    static void Main( )\n    {\n        Console.WriteLine(\n            &quot;This example of TimeSpan.FromHours( double )<br>&quot; +\n            &quot;generates the following output.<br>&quot; );\n        Console.WriteLine( &quot;{0,21}{1,18}&quot;,\n            &quot;FromHours&quot;, &quot;TimeSpan&quot; );\n        Console.WriteLine( &quot;{0,21}{1,18}&quot;, \n            &quot;---------&quot;, &quot;--------&quot; );\n\n        GenTimeSpanFromHours( 0.0000002 );\n        GenTimeSpanFromHours( 0.0000003 );\n        GenTimeSpanFromHours( 0.0012345 );\n        GenTimeSpanFromHours( 12.3456789 );\n        GenTimeSpanFromHours( 123456.7898765 );\n        GenTimeSpanFromHours( 0.0002777 );\n        GenTimeSpanFromHours( 0.0166666 );\n        GenTimeSpanFromHours( 1 );\n        GenTimeSpanFromHours( 24 );\n        GenTimeSpanFromHours( 500.3389445 );\n    } \n} \n\n/*\nThis example of TimeSpan.FromHours( double )\ngenerates the following output.\n\n            FromHours          TimeSpan\n            ---------          --------\n                2E-07          00:00:00.0010000\n                3E-07          00:00:00.0010000\n            0.0012345          00:00:04.4440000\n           12.3456789          12:20:44.4440000\n       123456.7898765     5144.00:47:23.5550000\n            0.0002777          00:00:01\n            0.0166666          00:01:00\n                    1          01:00:00\n                   24        1.00:00:00\n          500.3389445       20.20:20:20.2000000\n*/ \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_FromMilliseconds_System_Double_\">\r\n    \r\n            <a id=\"System_TimeSpan_FromMilliseconds_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FromMilliseconds(Double)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that represents a specified number of milliseconds.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TimeSpan FromMilliseconds (double value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A number of milliseconds.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </div>\r\n                  <p>An object that represents <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> or greater than <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.  </p>\n<p> -or-  </p>\n<p> <code>value</code> is <a class=\"xref\" href=\"system.double#System_Double_PositiveInfinity\" data-linktype=\"relative-path\">PositiveInfinity</a>.  </p>\n<p> -or-  </p>\n<p> <code>value</code> is <a class=\"xref\" href=\"system.double#System_Double_NegativeInfinity\" data-linktype=\"relative-path\">NegativeInfinity</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is equal to <a class=\"xref\" href=\"system.double#System_Double_NaN\" data-linktype=\"relative-path\">NaN</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>value</code> parameter is converted to ticks, and that number of ticks is used to initialize the new <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>. Therefore, <code>value</code> will only be considered accurate to the nearest millisecond. Note that, because of the loss of precision of the <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> data type, this conversion can generate an <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> for values that are near to but still in the range of either <a class=\"xref\" href=\"system.timespan#System_TimeSpan_MinValue\" data-linktype=\"relative-path\">MinValue</a> or <a class=\"xref\" href=\"system.timespan#System_TimeSpan_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>. For example, this causes an <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> in the following attempt to instantiate a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeSpan.FromMinutes#4\">      // The following throws an OverflowException at runtime\n      TimeSpan maxSpan = TimeSpan.FromMilliseconds(TimeSpan.MaxValue.TotalMilliseconds);\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.FromMinutes#4\">      &#39; The following throws an OverflowException at runtime\n      Dim maxSpan As TimeSpan = TimeSpan.FromMilliseconds(TimeSpan.MaxValue.TotalMilliseconds)\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates several <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> objects by using the FromMilliseconds method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeSpan.From#2\">// Example of the TimeSpan.FromMilliseconds( double ) method.\nusing System;\n\nclass FromMillisecDemo\n{\n    static void GenTimeSpanFromMillisec( Double millisec )\n    {\n        // Create a TimeSpan object and TimeSpan string from \n        // a number of milliseconds.\n        TimeSpan    interval = TimeSpan.FromMilliseconds( millisec );\n        string      timeInterval = interval.ToString( );\n\n        // Pad the end of the TimeSpan string with spaces if it \n        // does not contain milliseconds.\n        int pIndex = timeInterval.IndexOf( &#39;:&#39; );\n        pIndex = timeInterval.IndexOf( &#39;.&#39;, pIndex );\n        if( pIndex &lt; 0 )   timeInterval += &quot;        &quot;;\n\n        Console.WriteLine( &quot;{0,21}{1,26}&quot;, millisec, timeInterval );\n    } \n\n    static void Main( )\n    {\n        Console.WriteLine(\n            &quot;This example of TimeSpan.FromMilliseconds( &quot; +\n            &quot;double )<br>generates the following output.<br>&quot; );\n        Console.WriteLine( &quot;{0,21}{1,18}&quot;, \n            &quot;FromMilliseconds&quot;, &quot;TimeSpan&quot; );\n        Console.WriteLine( &quot;{0,21}{1,18}&quot;, \n            &quot;----------------&quot;, &quot;--------&quot; );\n\n        GenTimeSpanFromMillisec( 1 );\n        GenTimeSpanFromMillisec( 1.5 );\n        GenTimeSpanFromMillisec( 12345.6 );\n        GenTimeSpanFromMillisec( 123456789.8 );\n        GenTimeSpanFromMillisec( 1234567898765.4 );\n        GenTimeSpanFromMillisec( 1000 );\n        GenTimeSpanFromMillisec( 60000 );\n        GenTimeSpanFromMillisec( 3600000 );\n        GenTimeSpanFromMillisec( 86400000 );\n        GenTimeSpanFromMillisec( 1801220200 );\n    } \n} \n\n/*\nThis example of TimeSpan.FromMilliseconds( double )\ngenerates the following output.\n\n     FromMilliseconds          TimeSpan\n     ----------------          --------\n                    1          00:00:00.0010000\n                  1.5          00:00:00.0020000\n              12345.6          00:00:12.3460000\n          123456789.8        1.10:17:36.7900000\n      1234567898765.4    14288.23:31:38.7650000\n                 1000          00:00:01\n                60000          00:01:00\n              3600000          01:00:00\n             86400000        1.00:00:00\n           1801220200       20.20:20:20.2000000\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.TimeSpan.From#2\">// Example of the TimeSpan::FromMilliseconds( double ) method.\nusing namespace System;\nvoid GenTimeSpanFromMillisec( Double millisec )\n{\n   \n   // Create a TimeSpan object and TimeSpan string from \n   // a number of milliseconds.\n   TimeSpan interval = TimeSpan::FromMilliseconds( millisec );\n   String^ timeInterval = interval.ToString();\n   \n   // Pad the end of the TimeSpan string with spaces if it \n   // does not contain milliseconds.\n   int pIndex = timeInterval-&gt;IndexOf( &#39;:&#39; );\n   pIndex = timeInterval-&gt;IndexOf( &#39;.&#39;, pIndex );\n   if ( pIndex &lt; 0 )\n      timeInterval = String::Concat( timeInterval, &quot;        &quot; );\n\n   Console::WriteLine( &quot;{0,21}{1,26}&quot;, millisec, timeInterval );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of TimeSpan::FromMilliseconds( double )<br>&quot;\n   &quot;generates the following output.<br>&quot; );\n   Console::WriteLine( &quot;{0,21}{1,18}&quot;, &quot;FromMilliseconds&quot;, &quot;TimeSpan&quot; );\n   Console::WriteLine( &quot;{0,21}{1,18}&quot;, &quot;----------------&quot;, &quot;--------&quot; );\n   GenTimeSpanFromMillisec( 1 );\n   GenTimeSpanFromMillisec( 1.5 );\n   GenTimeSpanFromMillisec( 12345.6 );\n   GenTimeSpanFromMillisec( 123456789.8 );\n   GenTimeSpanFromMillisec( 1234567898765.4 );\n   GenTimeSpanFromMillisec( 1000 );\n   GenTimeSpanFromMillisec( 60000 );\n   GenTimeSpanFromMillisec( 3600000 );\n   GenTimeSpanFromMillisec( 86400000 );\n   GenTimeSpanFromMillisec( 1801220200 );\n}\n\n/*\nThis example of TimeSpan::FromMilliseconds( double )\ngenerates the following output.\n\n     FromMilliseconds          TimeSpan\n     ----------------          --------\n                    1          00:00:00.0010000\n                  1.5          00:00:00.0020000\n              12345.6          00:00:12.3460000\n          123456789.8        1.10:17:36.7900000\n      1234567898765.4    14288.23:31:38.7650000\n                 1000          00:00:01\n                60000          00:01:00\n              3600000          01:00:00\n             86400000        1.00:00:00\n           1801220200       20.20:20:20.2000000\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.From#2\">&#39; Example of the TimeSpan.FromMilliseconds( Double ) method.\nImports System\nImports Microsoft.VisualBasic\n\nModule FromMillisecDemo\n\n    Sub GenTimeSpanFromMillisec( millisec As Double )\n\n        &#39; Create a TimeSpan object and TimeSpan string from \n        &#39; a number of milliseconds.\n        Dim interval As TimeSpan = _\n            TimeSpan.FromMilliseconds( millisec )\n        Dim timeInterval As String = interval.ToString( )\n\n        &#39; Pad the end of the TimeSpan string with spaces if it \n        &#39; does not contain milliseconds.\n        Dim pIndex As Integer = timeInterval.IndexOf( &quot;:&quot;c )\n        pIndex = timeInterval.IndexOf( &quot;.&quot;c, pIndex )\n        If pIndex &lt; 0 Then   timeInterval &amp;= &quot;        &quot;\n\n        Console.WriteLine( &quot;{0,21}{1,26}&quot;, millisec, timeInterval )\n    End Sub \n\n    Sub Main( )\n\n        Console.WriteLine( &quot;This example of &quot; &amp; _\n            &quot;TimeSpan.FromMilliseconds( Double )&quot; &amp; _\n            vbCrLf &amp; &quot;generates the following output.&quot; &amp; vbCrLf )\n        Console.WriteLine( &quot;{0,21}{1,18}&quot;, _\n            &quot;FromMilliseconds&quot;, &quot;TimeSpan&quot; )    \n        Console.WriteLine( &quot;{0,21}{1,18}&quot;, _\n            &quot;----------------&quot;, &quot;--------&quot; )    \n\n        GenTimeSpanFromMillisec( 1 )\n        GenTimeSpanFromMillisec( 1.5 )\n        GenTimeSpanFromMillisec( 12345.6 )\n        GenTimeSpanFromMillisec( 123456789.8 )\n        GenTimeSpanFromMillisec( 1234567898765.4 )\n        GenTimeSpanFromMillisec( 1000 )\n        GenTimeSpanFromMillisec( 60000 )\n        GenTimeSpanFromMillisec( 3600000 )\n        GenTimeSpanFromMillisec( 86400000 )\n        GenTimeSpanFromMillisec( 1801220200 )\n    End Sub \nEnd Module \n\n&#39; This example of TimeSpan.FromMilliseconds( Double )\n&#39; generates the following output.\n&#39; \n&#39;      FromMilliseconds          TimeSpan\n&#39;      ----------------          --------\n&#39;                     1          00:00:00.0010000\n&#39;                   1.5          00:00:00.0020000\n&#39;               12345.6          00:00:12.3460000\n&#39;           123456789.8        1.10:17:36.7900000\n&#39;       1234567898765.4    14288.23:31:38.7650000\n&#39;                  1000          00:00:01\n&#39;                 60000          00:01:00\n&#39;               3600000          01:00:00\n&#39;              86400000        1.00:00:00\n&#39;            1801220200       20.20:20:20.2000000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_FromMinutes_System_Double_\">\r\n    \r\n            <a id=\"System_TimeSpan_FromMinutes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FromMinutes(Double)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that represents a specified number of minutes, where the specification is accurate to the nearest millisecond.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TimeSpan FromMinutes (double value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A number of minutes, accurate to the nearest millisecond.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </div>\r\n                  <p>An object that represents <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> or greater than <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.  </p>\n<p> -or-  </p>\n<p> <code>value</code> is <a class=\"xref\" href=\"system.double#System_Double_PositiveInfinity\" data-linktype=\"relative-path\">PositiveInfinity</a>.  </p>\n<p> -or-  </p>\n<p> <code>value</code> is <a class=\"xref\" href=\"system.double#System_Double_NegativeInfinity\" data-linktype=\"relative-path\">NegativeInfinity</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is equal to <a class=\"xref\" href=\"system.double#System_Double_NaN\" data-linktype=\"relative-path\">NaN</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>value</code> parameter is converted to milliseconds, which is converted to ticks, and that number of ticks is used to initialize the new <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>. Therefore, <code>value</code> will only be considered accurate to the nearest millisecond. Note that, because of the loss of precision of the <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> data type, this conversion can generate an <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> for values that are near to but still in the range of either <a class=\"xref\" href=\"system.timespan#System_TimeSpan_MinValue\" data-linktype=\"relative-path\">MinValue</a> or <a class=\"xref\" href=\"system.timespan#System_TimeSpan_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>. For example, this causes an <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> in the following attempt to instantiate a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeSpan.FromMinutes#1\">      // The following throws an OverflowException at runtime\n      TimeSpan maxSpan = TimeSpan.FromMinutes(TimeSpan.MaxValue.TotalMinutes);\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.FromMinutes#1\">      &#39; The following throws an OverflowException at runtime\n      Dim maxSpan As TimeSpan = TimeSpan.FromMinutes(TimeSpan.MaxValue.TotalMinutes)\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates several <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> objects using the FromMinutes method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.TimeSpan.From#4\">&#39; Example of the TimeSpan.FromMinutes( Double ) method.\nImports System\nImports Microsoft.VisualBasic\n\nModule FromMinutesDemo\n\n    Sub GenTimeSpanFromMinutes( minutes As Double )\n\n        &#39; Create a TimeSpan object and TimeSpan string from \n        &#39; a number of minutes.\n        Dim interval As TimeSpan = _\n            TimeSpan.FromMinutes( minutes )\n        Dim timeInterval As String = interval.ToString( )\n\n        &#39; Pad the end of the TimeSpan string with spaces if it \n        &#39; does not contain milliseconds.\n        Dim pIndex As Integer = timeInterval.IndexOf( &quot;:&quot;c )\n        pIndex = timeInterval.IndexOf( &quot;.&quot;c, pIndex )\n        If pIndex &lt; 0 Then   timeInterval &amp;= &quot;        &quot;\n\n        Console.WriteLine( &quot;{0,21}{1,26}&quot;, minutes, timeInterval )\n    End Sub \n\n    Sub Main( )\n\n        Console.WriteLine( &quot;This example of &quot; &amp; _\n            &quot;TimeSpan.FromMinutes( Double )&quot; &amp; _\n            vbCrLf &amp; &quot;generates the following output.&quot; &amp; vbCrLf )\n        Console.WriteLine( &quot;{0,21}{1,18}&quot;, _\n            &quot;FromMinutes&quot;, &quot;TimeSpan&quot; )    \n        Console.WriteLine( &quot;{0,21}{1,18}&quot;, _\n            &quot;-----------&quot;, &quot;--------&quot; )    \n\n        GenTimeSpanFromMinutes( 0.00001 )\n        GenTimeSpanFromMinutes( 0.00002 )\n        GenTimeSpanFromMinutes( 0.12345 )\n        GenTimeSpanFromMinutes( 1234.56789 )\n        GenTimeSpanFromMinutes( 12345678.98765 )\n        GenTimeSpanFromMinutes( 0.01666 )\n        GenTimeSpanFromMinutes( 1 )\n        GenTimeSpanFromMinutes( 60 )\n        GenTimeSpanFromMinutes( 1440 )\n        GenTimeSpanFromMinutes( 30020.33667 )\n    End Sub \nEnd Module \n\n&#39; This example of TimeSpan.FromMinutes( Double )\n&#39; generates the following output.\n&#39; \n&#39;           FromMinutes          TimeSpan\n&#39;           -----------          --------\n&#39;                 1E-05          00:00:00.0010000\n&#39;                 2E-05          00:00:00.0010000\n&#39;               0.12345          00:00:07.4070000\n&#39;            1234.56789          20:34:34.0730000\n&#39;        12345678.98765     8573.09:18:59.2590000\n&#39;               0.01666          00:00:01\n&#39;                     1          00:01:00\n&#39;                    60          01:00:00\n&#39;                  1440        1.00:00:00\n&#39;           30020.33667       20.20:20:20.2000000\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.From#4\">// Example of the TimeSpan.FromMinutes( double ) method.\nusing System;\n\nclass FromMinutesDemo\n{\n    static void GenTimeSpanFromMinutes( double minutes )\n    {\n        // Create a TimeSpan object and TimeSpan string from \n        // a number of minutes.\n        TimeSpan    interval = TimeSpan.FromMinutes( minutes );\n        string      timeInterval = interval.ToString( );\n\n        // Pad the end of the TimeSpan string with spaces if it \n        // does not contain milliseconds.\n        int pIndex = timeInterval.IndexOf( &#39;:&#39; );\n        pIndex = timeInterval.IndexOf( &#39;.&#39;, pIndex );\n        if( pIndex &lt; 0 )   timeInterval += &quot;        &quot;;\n\n        Console.WriteLine( &quot;{0,21}{1,26}&quot;, minutes, timeInterval );\n    } \n\n    static void Main( )\n    {\n        Console.WriteLine(\n            &quot;This example of TimeSpan.FromMinutes( double )<br>&quot; +\n            &quot;generates the following output.<br>&quot; );\n        Console.WriteLine( &quot;{0,21}{1,18}&quot;,\n            &quot;FromMinutes&quot;, &quot;TimeSpan&quot; );\n        Console.WriteLine( &quot;{0,21}{1,18}&quot;, \n            &quot;-----------&quot;, &quot;--------&quot; );\n\n        GenTimeSpanFromMinutes( 0.00001 );\n        GenTimeSpanFromMinutes( 0.00002 );\n        GenTimeSpanFromMinutes( 0.12345 );\n        GenTimeSpanFromMinutes( 1234.56789 );\n        GenTimeSpanFromMinutes( 12345678.98765 );\n        GenTimeSpanFromMinutes( 0.01666 );\n        GenTimeSpanFromMinutes( 1 );\n        GenTimeSpanFromMinutes( 60 );\n        GenTimeSpanFromMinutes( 1440 );\n        GenTimeSpanFromMinutes( 30020.33667 );\n    } \n} \n\n/*\nThis example of TimeSpan.FromMinutes( double )\ngenerates the following output.\n\n          FromMinutes          TimeSpan\n          -----------          --------\n                1E-05          00:00:00.0010000\n                2E-05          00:00:00.0010000\n              0.12345          00:00:07.4070000\n           1234.56789          20:34:34.0730000\n       12345678.98765     8573.09:18:59.2590000\n              0.01666          00:00:01\n                    1          00:01:00\n                   60          01:00:00\n                 1440        1.00:00:00\n          30020.33667       20.20:20:20.2000000\n*/ \n</code></pre><pre><code class=\"lang-cpp\" name=\"System.TimeSpan.From#4\">// Example of the TimeSpan::FromMinutes( double ) method.\nusing namespace System;\nvoid GenTimeSpanFromMinutes( double minutes )\n{\n   \n   // Create a TimeSpan object and TimeSpan string from \n   // a number of minutes.\n   TimeSpan interval = TimeSpan::FromMinutes( minutes );\n   String^ timeInterval = interval.ToString();\n   \n   // Pad the end of the TimeSpan string with spaces if it \n   // does not contain milliseconds.\n   int pIndex = timeInterval-&gt;IndexOf( &#39;:&#39; );\n   pIndex = timeInterval-&gt;IndexOf( &#39;.&#39;, pIndex );\n   if ( pIndex &lt; 0 )\n      timeInterval = String::Concat( timeInterval, &quot;        &quot; );\n\n   Console::WriteLine( &quot;{0,21}{1,26}&quot;, minutes, timeInterval );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of TimeSpan::FromMinutes( double )<br>&quot;\n   &quot;generates the following output.<br>&quot; );\n   Console::WriteLine( &quot;{0,21}{1,18}&quot;, &quot;FromMinutes&quot;, &quot;TimeSpan&quot; );\n   Console::WriteLine( &quot;{0,21}{1,18}&quot;, &quot;-----------&quot;, &quot;--------&quot; );\n   GenTimeSpanFromMinutes( 0.00001 );\n   GenTimeSpanFromMinutes( 0.00002 );\n   GenTimeSpanFromMinutes( 0.12345 );\n   GenTimeSpanFromMinutes( 1234.56789 );\n   GenTimeSpanFromMinutes( 12345678.98765 );\n   GenTimeSpanFromMinutes( 0.01666 );\n   GenTimeSpanFromMinutes( 1 );\n   GenTimeSpanFromMinutes( 60 );\n   GenTimeSpanFromMinutes( 1440 );\n   GenTimeSpanFromMinutes( 30020.33667 );\n}\n\n/*\nThis example of TimeSpan::FromMinutes( double )\ngenerates the following output.\n\n          FromMinutes          TimeSpan\n          -----------          --------\n                1E-05          00:00:00.0010000\n                2E-05          00:00:00.0010000\n              0.12345          00:00:07.4070000\n           1234.56789          20:34:34.0730000\n       12345678.98765     8573.09:18:59.2590000\n              0.01666          00:00:01\n                    1          00:01:00\n                   60          01:00:00\n                 1440        1.00:00:00\n          30020.33667       20.20:20:20.2000000\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_FromSeconds_System_Double_\">\r\n    \r\n            <a id=\"System_TimeSpan_FromSeconds_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FromSeconds(Double)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that represents a specified number of seconds, where the specification is accurate to the nearest millisecond.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TimeSpan FromSeconds (double value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A number of seconds, accurate to the nearest millisecond.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </div>\r\n                  <p>An object that represents <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> or greater than <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.  </p>\n<p> -or-  </p>\n<p> <code>value</code> is <a class=\"xref\" href=\"system.double#System_Double_PositiveInfinity\" data-linktype=\"relative-path\">PositiveInfinity</a>.  </p>\n<p> -or-  </p>\n<p> <code>value</code> is <a class=\"xref\" href=\"system.double#System_Double_NegativeInfinity\" data-linktype=\"relative-path\">NegativeInfinity</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is equal to <a class=\"xref\" href=\"system.double#System_Double_NaN\" data-linktype=\"relative-path\">NaN</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>value</code> parameter is converted to milliseconds, which is converted to ticks, and that number of ticks is used to intialize the new <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>. Therefore, <code>value</code> will only be considered accurate to the nearest millisecond. Note that, because of the loss of precision of the <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> data type, this can generate an <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> for values that are near but still in the range of either  <a class=\"xref\" href=\"system.timespan#System_TimeSpan_MinValue\" data-linktype=\"relative-path\">MinValue</a> or <a class=\"xref\" href=\"system.timespan#System_TimeSpan_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>, This is the cause of an <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a>, for example, in the following attempt to instantiate a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeSpan.FromMinutes#5\">      // The following throws an OverflowException at runtime\n      TimeSpan maxSpan = TimeSpan.FromSeconds(TimeSpan.MaxValue.TotalSeconds);\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.FromMinutes#5\">      &#39; The following throws an OverflowException at runtime\n      Dim maxSpan As TimeSpan = TimeSpan.FromSeconds(TimeSpan.MaxValue.TotalSeconds)\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates several <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> objects using the FromSeconds method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.TimeSpan.From#3\">// Example of the TimeSpan::FromSeconds( double ) method.\nusing namespace System;\nvoid GenTimeSpanFromSeconds( double seconds )\n{\n   \n   // Create a TimeSpan object and TimeSpan string from \n   // a number of seconds.\n   TimeSpan interval = TimeSpan::FromSeconds( seconds );\n   String^ timeInterval = interval.ToString();\n   \n   // Pad the end of the TimeSpan string with spaces if it \n   // does not contain milliseconds.\n   int pIndex = timeInterval-&gt;IndexOf( &#39;:&#39; );\n   pIndex = timeInterval-&gt;IndexOf( &#39;.&#39;, pIndex );\n   if ( pIndex &lt; 0 )\n      timeInterval = String::Concat( timeInterval, &quot;        &quot; );\n\n   Console::WriteLine( &quot;{0,21}{1,26}&quot;, seconds, timeInterval );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of TimeSpan::FromSeconds( double )<br>&quot;\n   &quot;generates the following output.<br>&quot; );\n   Console::WriteLine( &quot;{0,21}{1,18}&quot;, &quot;FromSeconds&quot;, &quot;TimeSpan&quot; );\n   Console::WriteLine( &quot;{0,21}{1,18}&quot;, &quot;-----------&quot;, &quot;--------&quot; );\n   GenTimeSpanFromSeconds( 0.001 );\n   GenTimeSpanFromSeconds( 0.0015 );\n   GenTimeSpanFromSeconds( 12.3456 );\n   GenTimeSpanFromSeconds( 123456.7898 );\n   GenTimeSpanFromSeconds( 1234567898.7654 );\n   GenTimeSpanFromSeconds( 1 );\n   GenTimeSpanFromSeconds( 60 );\n   GenTimeSpanFromSeconds( 3600 );\n   GenTimeSpanFromSeconds( 86400 );\n   GenTimeSpanFromSeconds( 1801220.2 );\n}\n\n/*\nThis example of TimeSpan::FromSeconds( double )\ngenerates the following output.\n\n          FromSeconds          TimeSpan\n          -----------          --------\n                0.001          00:00:00.0010000\n               0.0015          00:00:00.0020000\n              12.3456          00:00:12.3460000\n          123456.7898        1.10:17:36.7900000\n      1234567898.7654    14288.23:31:38.7650000\n                    1          00:00:01\n                   60          00:01:00\n                 3600          01:00:00\n                86400        1.00:00:00\n            1801220.2       20.20:20:20.2000000\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.From#3\">&#39; Example of the TimeSpan.FromSeconds( Double ) method.\nImports System\nImports Microsoft.VisualBasic\n\nModule FromSecondsDemo\n\n    Sub GenTimeSpanFromSeconds( seconds As Double )\n\n        &#39; Create a TimeSpan object and TimeSpan string from \n        &#39; a number of seconds.\n        Dim interval As TimeSpan = _\n            TimeSpan.FromSeconds( seconds )\n        Dim timeInterval As String = interval.ToString( )\n\n        &#39; Pad the end of the TimeSpan string with spaces if it \n        &#39; does not contain milliseconds.\n        Dim pIndex As Integer = timeInterval.IndexOf( &quot;:&quot;c )\n        pIndex = timeInterval.IndexOf( &quot;.&quot;c, pIndex )\n        If pIndex &lt; 0 Then   timeInterval &amp;= &quot;        &quot;\n\n        Console.WriteLine( &quot;{0,21}{1,26}&quot;, seconds, timeInterval )\n    End Sub \n\n    Sub Main( )\n\n        Console.WriteLine( &quot;This example of &quot; &amp; _\n            &quot;TimeSpan.FromSeconds( Double )&quot; &amp; _\n            vbCrLf &amp; &quot;generates the following output.&quot; &amp; vbCrLf )\n        Console.WriteLine( &quot;{0,21}{1,18}&quot;, _\n            &quot;FromSeconds&quot;, &quot;TimeSpan&quot; )    \n        Console.WriteLine( &quot;{0,21}{1,18}&quot;, _\n            &quot;-----------&quot;, &quot;--------&quot; )    \n\n        GenTimeSpanFromSeconds( 0.001 )\n        GenTimeSpanFromSeconds( 0.0015 )\n        GenTimeSpanFromSeconds( 12.3456 )\n        GenTimeSpanFromSeconds( 123456.7898 )\n        GenTimeSpanFromSeconds( 1234567898.7654 )\n        GenTimeSpanFromSeconds( 1 )\n        GenTimeSpanFromSeconds( 60 )\n        GenTimeSpanFromSeconds( 3600 )\n        GenTimeSpanFromSeconds( 86400 )\n        GenTimeSpanFromSeconds( 1801220.2 )\n    End Sub\nEnd Module \n\n&#39; This example of TimeSpan.FromSeconds( Double )\n&#39; generates the following output.\n&#39; \n&#39;           FromSeconds          TimeSpan\n&#39;           -----------          --------\n&#39;                 0.001          00:00:00.0010000\n&#39;                0.0015          00:00:00.0020000\n&#39;               12.3456          00:00:12.3460000\n&#39;           123456.7898        1.10:17:36.7900000\n&#39;       1234567898.7654    14288.23:31:38.7650000\n&#39;                     1          00:00:01\n&#39;                    60          00:01:00\n&#39;                  3600          01:00:00\n&#39;                 86400        1.00:00:00\n&#39;             1801220.2       20.20:20:20.2000000\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.From#3\">// Example of the TimeSpan.FromSeconds( double ) method.\nusing System;\n\nclass FromSecondsDemo\n{\n    static void GenTimeSpanFromSeconds( double seconds )\n    {\n        // Create a TimeSpan object and TimeSpan string from \n        // a number of seconds.\n        TimeSpan    interval = TimeSpan.FromSeconds( seconds );\n        string      timeInterval = interval.ToString( );\n\n        // Pad the end of the TimeSpan string with spaces if it \n        // does not contain milliseconds.\n        int pIndex = timeInterval.IndexOf( &#39;:&#39; );\n        pIndex = timeInterval.IndexOf( &#39;.&#39;, pIndex );\n        if( pIndex &lt; 0 )   timeInterval += &quot;        &quot;;\n\n        Console.WriteLine( &quot;{0,21}{1,26}&quot;, seconds, timeInterval );\n    } \n\n    static void Main( )\n    {\n        Console.WriteLine(\n            &quot;This example of TimeSpan.FromSeconds( double )<br>&quot; +\n            &quot;generates the following output.<br>&quot; );\n        Console.WriteLine( &quot;{0,21}{1,18}&quot;,\n            &quot;FromSeconds&quot;, &quot;TimeSpan&quot; );\n        Console.WriteLine( &quot;{0,21}{1,18}&quot;, \n            &quot;-----------&quot;, &quot;--------&quot; );\n\n        GenTimeSpanFromSeconds( 0.001 );\n        GenTimeSpanFromSeconds( 0.0015 );\n        GenTimeSpanFromSeconds( 12.3456 );\n        GenTimeSpanFromSeconds( 123456.7898 );\n        GenTimeSpanFromSeconds( 1234567898.7654 );\n        GenTimeSpanFromSeconds( 1 );\n        GenTimeSpanFromSeconds( 60 );\n        GenTimeSpanFromSeconds( 3600 );\n        GenTimeSpanFromSeconds( 86400 );\n        GenTimeSpanFromSeconds( 1801220.2 );\n    } \n} \n\n/*\nThis example of TimeSpan.FromSeconds( double )\ngenerates the following output.\n\n          FromSeconds          TimeSpan\n          -----------          --------\n                0.001          00:00:00.0010000\n               0.0015          00:00:00.0020000\n              12.3456          00:00:12.3460000\n          123456.7898        1.10:17:36.7900000\n      1234567898.7654    14288.23:31:38.7650000\n                    1          00:00:01\n                   60          00:01:00\n                 3600          01:00:00\n                86400        1.00:00:00\n            1801220.2       20.20:20:20.2000000\n*/ \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_FromTicks_System_Int64_\">\r\n    \r\n            <a id=\"System_TimeSpan_FromTicks_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FromTicks(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that represents a specified time, where the specification is in units of ticks.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TimeSpan FromTicks (long value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A number of ticks that represent a time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </div>\r\n                  <p>An object that represents <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is a convenience method with the same behavior as the <a class=\"xref\" href=\"system.timespan#System_TimeSpan__ctor_System_Int64_\" data-linktype=\"relative-path\">System.TimeSpan.TimeSpan(Int64)</a> constructor. A single tick represents one hundred nanoseconds or one ten-millionth of a second. There are 10,000 ticks in a millisecond.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates several <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> objects using the FromTicks method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.TimeSpan.From#1\">&#39; Example of the TimeSpan.FromTicks( Long ) method.\nImports System\nImports Microsoft.VisualBasic\n\nModule FromTicksDemo\n\n    Sub GenTimeSpanFromTicks( ticks As Long )\n\n        &#39; Create a TimeSpan object and TimeSpan string from \n        &#39; a number of ticks.\n        Dim interval As TimeSpan = TimeSpan.FromTicks( ticks )\n        Dim timeInterval As String = interval.ToString( )\n\n        &#39; Pad the end of the TimeSpan string with spaces if it \n        &#39; does not contain milliseconds.\n        Dim pIndex As Integer = timeInterval.IndexOf( &quot;:&quot;c )\n        pIndex = timeInterval.IndexOf( &quot;.&quot;c, pIndex )\n        If pIndex &lt; 0 Then   timeInterval &amp;= &quot;        &quot;\n        \n        Console.WriteLine( &quot;{0,21}{1,26}&quot;, ticks, timeInterval )\n    End Sub \n\n    Sub Main( )\n\n        Console.WriteLine( _\n            &quot;This example of TimeSpan.FromTicks( Long )&quot; &amp; _\n            vbCrLf &amp; &quot;generates the following output.&quot; &amp; vbCrLf )\n        Console.WriteLine( &quot;{0,21}{1,18}&quot;, _\n            &quot;FromTicks&quot;, &quot;TimeSpan&quot; )    \n        Console.WriteLine( &quot;{0,21}{1,18}&quot;, _\n            &quot;---------&quot;, &quot;--------&quot; )    \n\n        GenTimeSpanFromTicks( 1 )\n        GenTimeSpanFromTicks( 12345 )\n        GenTimeSpanFromTicks( 123456789 )\n        GenTimeSpanFromTicks( 1234567898765 )\n        GenTimeSpanFromTicks( 12345678987654321 )\n        GenTimeSpanFromTicks( 10000000 )\n        GenTimeSpanFromTicks( 600000000 )\n        GenTimeSpanFromTicks( 36000000000 )\n        GenTimeSpanFromTicks( 864000000000 )\n        GenTimeSpanFromTicks( 18012202000000 )\n    End Sub \nEnd Module \n\n&#39; This example of TimeSpan.FromTicks( Long )\n&#39; generates the following output.\n&#39; \n&#39;             FromTicks          TimeSpan\n&#39;             ---------          --------\n&#39;                     1          00:00:00.0000001\n&#39;                 12345          00:00:00.0012345\n&#39;             123456789          00:00:12.3456789\n&#39;         1234567898765        1.10:17:36.7898765\n&#39;     12345678987654321    14288.23:31:38.7654321\n&#39;              10000000          00:00:01\n&#39;             600000000          00:01:00\n&#39;           36000000000          01:00:00\n&#39;          864000000000        1.00:00:00\n&#39;        18012202000000       20.20:20:20.2000000\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.From#1\">// Example of the TimeSpan.FromTicks( long ) method.\nusing System;\n\nclass FromTicksDemo\n{\n    static void GenTimeSpanFromTicks( long ticks )\n    {\n        // Create a TimeSpan object and TimeSpan string from \n        // a number of ticks.\n        TimeSpan    interval = TimeSpan.FromTicks( ticks );\n        string      timeInterval = interval.ToString( );\n\n        // Pad the end of the TimeSpan string with spaces if it \n        // does not contain milliseconds.\n        int pIndex = timeInterval.IndexOf( &#39;:&#39; );\n        pIndex = timeInterval.IndexOf( &#39;.&#39;, pIndex );\n        if( pIndex &lt; 0 )   timeInterval += &quot;        &quot;;\n\n        Console.WriteLine( &quot;{0,21}{1,26}&quot;, ticks, timeInterval );\n    } \n\n    static void Main( )\n    {\n        Console.WriteLine(\n            &quot;This example of TimeSpan.FromTicks( long )<br>&quot; +\n            &quot;generates the following output.<br>&quot; );\n        Console.WriteLine( &quot;{0,21}{1,18}&quot;, \n            &quot;FromTicks&quot;, &quot;TimeSpan&quot; );\n        Console.WriteLine( &quot;{0,21}{1,18}&quot;, \n            &quot;---------&quot;, &quot;--------&quot; );\n\n        GenTimeSpanFromTicks( 1 );\n        GenTimeSpanFromTicks( 12345 );\n        GenTimeSpanFromTicks( 123456789 );\n        GenTimeSpanFromTicks( 1234567898765 );\n        GenTimeSpanFromTicks( 12345678987654321 );\n        GenTimeSpanFromTicks( 10000000 );\n        GenTimeSpanFromTicks( 600000000 );\n        GenTimeSpanFromTicks( 36000000000 );\n        GenTimeSpanFromTicks( 864000000000 );\n        GenTimeSpanFromTicks( 18012202000000 );\n    } \n} \n\n/*\nThis example of TimeSpan.FromTicks( long )\ngenerates the following output.\n\n            FromTicks          TimeSpan\n            ---------          --------\n                    1          00:00:00.0000001\n                12345          00:00:00.0012345\n            123456789          00:00:12.3456789\n        1234567898765        1.10:17:36.7898765\n    12345678987654321    14288.23:31:38.7654321\n             10000000          00:00:01\n            600000000          00:01:00\n          36000000000          01:00:00\n         864000000000        1.00:00:00\n       18012202000000       20.20:20:20.2000000\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.TimeSpan.From#1\">// Example of the TimeSpan::FromTicks( __int64 ) method.\nusing namespace System;\nvoid GenTimeSpanFromTicks( __int64 ticks )\n{\n   \n   // Create a TimeSpan object and TimeSpan string from \n   // a number of ticks.\n   TimeSpan interval = TimeSpan::FromTicks( ticks );\n   String^ timeInterval = interval.ToString();\n   \n   // Pad the end of the TimeSpan string with spaces if it \n   // does not contain milliseconds.\n   int pIndex = timeInterval-&gt;IndexOf( &#39;:&#39; );\n   pIndex = timeInterval-&gt;IndexOf( &#39;.&#39;, pIndex );\n   if ( pIndex &lt; 0 )\n      timeInterval = String::Concat( timeInterval, &quot;        &quot; );\n\n   Console::WriteLine( &quot;{0,21}{1,26}&quot;, ticks, timeInterval );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of TimeSpan::FromTicks( __int64 )<br>&quot;\n   &quot;generates the following output.<br>&quot; );\n   Console::WriteLine( &quot;{0,21}{1,18}&quot;, &quot;FromTicks&quot;, &quot;TimeSpan&quot; );\n   Console::WriteLine( &quot;{0,21}{1,18}&quot;, &quot;---------&quot;, &quot;--------&quot; );\n   GenTimeSpanFromTicks( 1 );\n   GenTimeSpanFromTicks( 12345 );\n   GenTimeSpanFromTicks( 123456789 );\n   GenTimeSpanFromTicks( 1234567898765 );\n   GenTimeSpanFromTicks( 12345678987654321 );\n   GenTimeSpanFromTicks( 10000000 );\n   GenTimeSpanFromTicks( 600000000 );\n   GenTimeSpanFromTicks( 36000000000 );\n   GenTimeSpanFromTicks( 864000000000 );\n   GenTimeSpanFromTicks( 18012202000000 );\n}\n\n/*\nThis example of TimeSpan::FromTicks( __int64 )\ngenerates the following output.\n\n            FromTicks          TimeSpan\n            ---------          --------\n                    1          00:00:00.0000001\n                12345          00:00:00.0012345\n            123456789          00:00:12.3456789\n        1234567898765        1.10:17:36.7898765\n    12345678987654321    14288.23:31:38.7654321\n             10000000          00:00:01\n            600000000          00:01:00\n          36000000000          01:00:00\n         864000000000        1.00:00:00\n       18012202000000       20.20:20:20.2000000\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_GetHashCode\">\r\n    \r\n            <a id=\"System_TimeSpan_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a hash code for this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Two <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> objects might have the same hash code even though they represent different time values.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example generates the hash codes of several <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> objects using the GetHashCode method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.TimeSpan.GetHashCode#1\">// Example for the TimeSpan::GetHashCode( ) method.\nusing namespace System;\nvoid DisplayHashCode( TimeSpan interval )\n{\n   \n   // Create a hash code and a string representation of \n   // the TimeSpan parameter.\n   String^ timeInterval = interval.ToString();\n   int hashCode = interval.GetHashCode();\n   \n   // Pad the end of the TimeSpan string with spaces if it \n   // does not contain milliseconds.\n   int pIndex = timeInterval-&gt;IndexOf( &#39;:&#39; );\n   pIndex = timeInterval-&gt;IndexOf( &#39;.&#39;, pIndex );\n   if ( pIndex &lt; 0 )\n      timeInterval = String::Concat( timeInterval, &quot;        &quot; );\n\n   Console::WriteLine( &quot;{0,22}   0x{1:X8}, {1}&quot;, timeInterval, hashCode );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of TimeSpan::GetHashCode( ) generates &quot;\n   &quot;the following <br>output, which displays &quot;\n   &quot;the hash codes of representative TimeSpan <br>&quot;\n   &quot;objects in hexadecimal and decimal formats.<br>&quot; );\n   Console::WriteLine( &quot;{0,22}   {1,10}&quot;, &quot;TimeSpan        &quot;, &quot;Hash Code&quot; );\n   Console::WriteLine( &quot;{0,22}   {1,10}&quot;, &quot;--------        &quot;, &quot;---------&quot; );\n   DisplayHashCode( TimeSpan(0) );\n   DisplayHashCode( TimeSpan(1) );\n   DisplayHashCode( TimeSpan(0,0,0,0,1) );\n   DisplayHashCode( TimeSpan(0,0,1) );\n   DisplayHashCode( TimeSpan(0,1,0) );\n   DisplayHashCode( TimeSpan(1,0,0) );\n   DisplayHashCode( TimeSpan(36000000001) );\n   DisplayHashCode( TimeSpan(0,1,0,0,1) );\n   DisplayHashCode( TimeSpan(1,0,1) );\n   DisplayHashCode( TimeSpan(1,0,0,0) );\n   DisplayHashCode( TimeSpan(864000000001) );\n   DisplayHashCode( TimeSpan(1,0,0,0,1) );\n   DisplayHashCode( TimeSpan(1,0,0,1) );\n   DisplayHashCode( TimeSpan(100,0,0,0) );\n   DisplayHashCode( TimeSpan(100,0,0,0,1) );\n   DisplayHashCode( TimeSpan(100,0,0,1) );\n}\n\n/*\nThis example of TimeSpan::GetHashCode( ) generates the following\noutput, which displays the hash codes of representative TimeSpan\nobjects in hexadecimal and decimal formats.\n\n      TimeSpan            Hash Code\n      --------            ---------\n      00:00:00           0x00000000, 0\n      00:00:00.0000001   0x00000001, 1\n      00:00:00.0010000   0x00002710, 10000\n      00:00:01           0x00989680, 10000000\n      00:01:00           0x23C34600, 600000000\n      01:00:00           0x61C46808, 1640261640\n      01:00:00.0000001   0x61C46809, 1640261641\n      01:00:00.0010000   0x61C48F18, 1640271640\n      01:00:01           0x625CFE88, 1650261640\n    1.00:00:00           0x2A69C0C9, 711573705\n    1.00:00:00.0000001   0x2A69C0C8, 711573704\n    1.00:00:00.0010000   0x2A69E7D9, 711583705\n    1.00:00:01           0x2B025649, 721573449\n  100.00:00:00           0x914F4E94, -1857073516\n  100.00:00:00.0010000   0x914F6984, -1857066620\n  100.00:00:01           0x91E7D814, -1847076844\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.GetHashCode#1\">// Example for the TimeSpan.GetHashCode( ) method.\nusing System;\n\nclass GetHashCode\n{\n    static void DisplayHashCode( TimeSpan interval )\n    {\n        // Create a hash code and a string representation of \n        // the TimeSpan parameter.\n        string  timeInterval = interval.ToString( );\n        int     hashCode = interval.GetHashCode( );\n\n        // Pad the end of the TimeSpan string with spaces if it \n        // does not contain milliseconds.\n        int pIndex = timeInterval.IndexOf( &#39;:&#39; );\n        pIndex = timeInterval.IndexOf( &#39;.&#39;, pIndex );\n        if( pIndex &lt; 0 )   timeInterval += &quot;        &quot;;\n\n        Console.WriteLine( &quot;{0,22}   0x{1:X8}, {1}&quot;, \n            timeInterval, hashCode );\n    }\n\n    static void Main( )\n    {\n        Console.WriteLine(\n            &quot;This example of TimeSpan.GetHashCode( ) generates &quot; +\n            &quot;the following <br>output, which displays &quot; +\n            &quot;the hash codes of representative TimeSpan <br>&quot; +\n            &quot;objects in hexadecimal and decimal formats.<br>&quot; );\n        Console.WriteLine( &quot;{0,22}   {1,10}&quot;, \n            &quot;TimeSpan        &quot;, &quot;Hash Code&quot; );\n        Console.WriteLine( &quot;{0,22}   {1,10}&quot;, \n            &quot;--------        &quot;, &quot;---------&quot; );\n\n        DisplayHashCode( new TimeSpan( 0 ) );\n        DisplayHashCode( new TimeSpan( 1 ) );\n        DisplayHashCode( new TimeSpan( 0, 0, 0, 0, 1 ) );\n        DisplayHashCode( new TimeSpan( 0, 0, 1 ) );\n        DisplayHashCode( new TimeSpan( 0, 1, 0 ) );\n        DisplayHashCode( new TimeSpan( 1, 0, 0 ) );\n        DisplayHashCode( new TimeSpan( 36000000001 ) );\n        DisplayHashCode( new TimeSpan( 0, 1, 0, 0, 1 ) );\n        DisplayHashCode( new TimeSpan( 1, 0, 1 ) );\n        DisplayHashCode( new TimeSpan( 1, 0, 0, 0 ) );\n        DisplayHashCode( new TimeSpan( 864000000001 ) );\n        DisplayHashCode( new TimeSpan( 1, 0, 0, 0, 1 ) );\n        DisplayHashCode( new TimeSpan( 1, 0, 0, 1 ) );\n        DisplayHashCode( new TimeSpan( 100, 0, 0, 0 ) );\n        DisplayHashCode( new TimeSpan( 100, 0, 0, 0, 1 ) );\n        DisplayHashCode( new TimeSpan( 100, 0, 0, 1 ) );\n    } \n} \n\n/*\nThis example of TimeSpan.GetHashCode( ) generates the following\noutput, which displays the hash codes of representative TimeSpan\nobjects in hexadecimal and decimal formats.\n\n      TimeSpan            Hash Code\n      --------            ---------\n      00:00:00           0x00000000, 0\n      00:00:00.0000001   0x00000001, 1\n      00:00:00.0010000   0x00002710, 10000\n      00:00:01           0x00989680, 10000000\n      00:01:00           0x23C34600, 600000000\n      01:00:00           0x61C46808, 1640261640\n      01:00:00.0000001   0x61C46809, 1640261641\n      01:00:00.0010000   0x61C48F18, 1640271640\n      01:00:01           0x625CFE88, 1650261640\n    1.00:00:00           0x2A69C0C9, 711573705\n    1.00:00:00.0000001   0x2A69C0C8, 711573704\n    1.00:00:00.0010000   0x2A69E7D9, 711583705\n    1.00:00:01           0x2B025649, 721573449\n  100.00:00:00           0x914F4E94, -1857073516\n  100.00:00:00.0010000   0x914F6984, -1857066620\n  100.00:00:01           0x91E7D814, -1847076844\n*/ \n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.GetHashCode#1\">&#39; Example for the TimeSpan.GetHashCode( ) method.\nImports System\nImports Microsoft.VisualBasic\n\nModule GetHashCode\n    \n    Sub DisplayHashCode( interval As TimeSpan )\n\n        &#39; Create a hash code and a string representation of \n        &#39; the TimeSpan parameter.\n        Dim timeInterval As String = interval.ToString( )\n        Dim hashCode As Integer = interval.GetHashCode( )\n\n        &#39; Pad the end of the TimeSpan string with spaces if it \n        &#39; does not contain milliseconds.\n        Dim pIndex As Integer = timeInterval.IndexOf( &quot;:&quot;c )\n        pIndex = timeInterval.IndexOf( &quot;.&quot;c, pIndex )\n        If pIndex &lt; 0 Then timeInterval &amp;= &quot;        &quot;\n\n        Console.WriteLine( &quot;{0,22}   0x{1:X8}, {1}&quot;, _\n            timeInterval, hashCode )\n    End Sub \n\n    Sub Main( )\n        Console.WriteLine( _\n            &quot;This example of TimeSpan.GetHashCode( ) generates &quot; &amp; _\n            &quot;the following &quot; &amp; vbCrLf &amp; &quot;output, which displays &quot; &amp; _\n            &quot;the hash codes of representative TimeSpan &quot; &amp; vbCrLf &amp; _\n            &quot;objects in hexadecimal and decimal formats.&quot; &amp; vbCrLf )\n        Console.WriteLine( &quot;{0,22}   {1,10}&quot;, _\n            &quot;TimeSpan        &quot;, &quot;Hash Code&quot; )    \n        Console.WriteLine( &quot;{0,22}   {1,10}&quot;, _\n            &quot;--------        &quot;, &quot;---------&quot; )    \n\n        DisplayHashCode( new TimeSpan( 0 ) )\n        DisplayHashCode( new TimeSpan( 1 ) )\n        DisplayHashCode( new TimeSpan( 0, 0, 0, 0, 1 ) )\n        DisplayHashCode( new TimeSpan( 0, 0, 1 ) )\n        DisplayHashCode( new TimeSpan( 0, 1, 0 ) )\n        DisplayHashCode( new TimeSpan( 1, 0, 0 ) )\n        DisplayHashCode( new TimeSpan( 36000000001 ) )\n        DisplayHashCode( new TimeSpan( 0, 1, 0, 0, 1 ) )\n        DisplayHashCode( new TimeSpan( 1, 0, 1 ) )\n        DisplayHashCode( new TimeSpan( 1, 0, 0, 0 ) )\n        DisplayHashCode( new TimeSpan( 864000000001 ) )\n        DisplayHashCode( new TimeSpan( 1, 0, 0, 0, 1 ) )\n        DisplayHashCode( new TimeSpan( 1, 0, 0, 1 ) )\n        DisplayHashCode( new TimeSpan( 100, 0, 0, 0 ) )\n        DisplayHashCode( new TimeSpan( 100, 0, 0, 0, 1 ) )\n        DisplayHashCode( new TimeSpan( 100, 0, 0, 1 ) )\n    End Sub\nEnd Module \n\n&#39; This example of TimeSpan.GetHashCode( ) generates the following\n&#39; output, which displays the hash codes of representative TimeSpan\n&#39; objects in hexadecimal and decimal formats.\n&#39; \n&#39;       TimeSpan            Hash Code\n&#39;       --------            ---------\n&#39;       00:00:00           0x00000000, 0\n&#39;       00:00:00.0000001   0x00000001, 1\n&#39;       00:00:00.0010000   0x00002710, 10000\n&#39;       00:00:01           0x00989680, 10000000\n&#39;       00:01:00           0x23C34600, 600000000\n&#39;       01:00:00           0x61C46808, 1640261640\n&#39;       01:00:00.0000001   0x61C46809, 1640261641\n&#39;       01:00:00.0010000   0x61C48F18, 1640271640\n&#39;       01:00:01           0x625CFE88, 1650261640\n&#39;     1.00:00:00           0x2A69C0C9, 711573705\n&#39;     1.00:00:00.0000001   0x2A69C0C8, 711573704\n&#39;     1.00:00:00.0010000   0x2A69E7D9, 711583705\n&#39;     1.00:00:01           0x2B025649, 721573449\n&#39;   100.00:00:00           0x914F4E94, -1857073516\n&#39;   100.00:00:00.0010000   0x914F6984, -1857066620\n&#39;   100.00:00:01           0x91E7D814, -1847076844\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_Negate\">\r\n    \r\n            <a id=\"System_TimeSpan_Negate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Negate()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a new <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object whose value is the negated value of this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TimeSpan Negate ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </div>\r\n                  <p>A new object with the same numeric value as this instance, but with the opposite sign.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The negated value of this instance cannot be represented by a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>; that is, the value of this instance is <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example applies the Negate method to several <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> objects.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.TimeSpan.Dura_Nega_Unary#1\">// Example of the TimeSpan::Duration( ) and TimeSpan::Negate( ) methods,\n// and the TimeSpan Unary Negation and Unary Plus operators.\nusing namespace System;\nconst __wchar_t * protoFmt = L&quot;{0,22}{1,22}{2,22}&quot;;\nvoid ShowDurationNegate( TimeSpan interval )\n{\n   \n   // Display the TimeSpan value and the results of the \n   // Duration and Negate methods.\n   Console::WriteLine( gcnew String( protoFmt ), interval, interval.Duration(), interval.Negate() );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of TimeSpan::Duration( ), &quot;\n   &quot;TimeSpan::Negate( ), <br>and the TimeSpan Unary &quot;\n   &quot;Negation and Unary Plus operators <br>&quot;\n   &quot;generates the following output.<br>&quot; );\n   Console::WriteLine( gcnew String( protoFmt ), &quot;TimeSpan&quot;, &quot;Duration( )&quot;, &quot;Negate( )&quot; );\n   Console::WriteLine( gcnew String( protoFmt ), &quot;--------&quot;, &quot;-----------&quot;, &quot;---------&quot; );\n   \n   // Create TimeSpan objects and apply the Unary Negation\n   // and Unary Plus operators to them.\n   ShowDurationNegate( TimeSpan(1) );\n   ShowDurationNegate( TimeSpan( -1234567) );\n   ShowDurationNegate(  +TimeSpan(0,0,10,-20,-30) );\n   ShowDurationNegate(  +TimeSpan(0,-10,20,-30,40) );\n   ShowDurationNegate(  -TimeSpan(1,10,20,40,160) );\n   ShowDurationNegate(  -TimeSpan( -10,-20,-30,-40,-50) );\n}\n\n/*\nThis example of TimeSpan::Duration( ), TimeSpan::Negate( ),\nand the TimeSpan Unary Negation and Unary Plus operators\ngenerates the following output.\n\n              TimeSpan           Duration( )             Negate( )\n              --------           -----------             ---------\n      00:00:00.0000001      00:00:00.0000001     -00:00:00.0000001\n     -00:00:00.1234567      00:00:00.1234567      00:00:00.1234567\n      00:09:39.9700000      00:09:39.9700000     -00:09:39.9700000\n     -09:40:29.9600000      09:40:29.9600000      09:40:29.9600000\n   -1.10:20:40.1600000    1.10:20:40.1600000    1.10:20:40.1600000\n   10.20:30:40.0500000   10.20:30:40.0500000  -10.20:30:40.0500000\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.Dura_Nega_Unary#1\">// Example of the TimeSpan.Duration( ) and TimeSpan.Negate( ) methods,\n// and the TimeSpan Unary Negation and Unary Plus operators.\nusing System;\n\nclass DuraNegaUnaryDemo\n{\n    const string dataFmt = &quot;{0,22}{1,22}{2,22}&quot; ;\n\n    static void ShowDurationNegate( TimeSpan interval )\n    {\n        // Display the TimeSpan value and the results of the \n        // Duration and Negate methods.\n        Console.WriteLine( dataFmt, \n            interval, interval.Duration( ), interval.Negate( ) );\n    }\n\n    static void Main()\n    {\n        Console.WriteLine(\n            &quot;This example of TimeSpan.Duration( ), &quot; +\n            &quot;TimeSpan.Negate( ), <br>and the TimeSpan Unary &quot; +\n            &quot;Negation and Unary Plus operators <br>&quot; +\n            &quot;generates the following output.<br>&quot; );\n        Console.WriteLine( dataFmt, \n            &quot;TimeSpan&quot;, &quot;Duration( )&quot;, &quot;Negate( )&quot; );\n        Console.WriteLine( dataFmt, \n            &quot;--------&quot;, &quot;-----------&quot;, &quot;---------&quot; );\n\n        // Create TimeSpan objects and apply the Unary Negation\n        // and Unary Plus operators to them.\n        ShowDurationNegate( new TimeSpan( 1 ) );\n        ShowDurationNegate( new TimeSpan( -1234567 ) );\n        ShowDurationNegate( \n            + new TimeSpan( 0, 0, 10, -20, -30 ) );\n        ShowDurationNegate( \n            + new TimeSpan( 0, -10, 20, -30, 40 ) );\n        ShowDurationNegate( \n            - new TimeSpan( 1, 10, 20, 40, 160 ) );\n        ShowDurationNegate( \n            - new TimeSpan( -10, -20, -30, -40, -50 ) );\n    } \n} \n\n/*\nThis example of TimeSpan.Duration( ), TimeSpan.Negate( ),\nand the TimeSpan Unary Negation and Unary Plus operators\ngenerates the following output.\n\n              TimeSpan           Duration( )             Negate( )\n              --------           -----------             ---------\n      00:00:00.0000001      00:00:00.0000001     -00:00:00.0000001\n     -00:00:00.1234567      00:00:00.1234567      00:00:00.1234567\n      00:09:39.9700000      00:09:39.9700000     -00:09:39.9700000\n     -09:40:29.9600000      09:40:29.9600000      09:40:29.9600000\n   -1.10:20:40.1600000    1.10:20:40.1600000    1.10:20:40.1600000\n   10.20:30:40.0500000   10.20:30:40.0500000  -10.20:30:40.0500000\n*/ \n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.Dura_Nega_Unary#1\">&#39; Example of the TimeSpan.Duration( ) and TimeSpan.Negate( ) methods,\n&#39; and the TimeSpan Unary Negation and Unary Plus operators.\nImports System\nImports Microsoft.VisualBasic\n\nModule DuraNegaUnaryDemo\n\n    Const dataFmt As String = &quot;{0,22}{1,22}{2,22}&quot;\n\n    Sub ShowDurationNegate( interval As TimeSpan )\n\n        &#39; Display the TimeSpan value and the results of the \n        &#39; Duration and Negate methods.\n        Console.WriteLine( dataFmt, _\n            interval, interval.Duration( ), interval.Negate( ) )\n    End Sub\n\n    Sub Main( )\n\n        Console.WriteLine( _\n            &quot;This example of TimeSpan.Duration( ), &quot; &amp; _\n            &quot;TimeSpan.Negate( ), &quot; &amp; vbCrLf &amp; _\n            &quot;and the TimeSpan Unary Negation and &quot; &amp; _\n            &quot;Unary Plus operators &quot; &amp; vbCrLf &amp; _\n            &quot;generates the following output.&quot; &amp; vbCrLf )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan&quot;, &quot;Duration( )&quot;, &quot;Negate( )&quot; )    \n        Console.WriteLine( dataFmt, _\n            &quot;--------&quot;, &quot;-----------&quot;, &quot;---------&quot; )    \n\n        &#39; Create TimeSpan objects and apply the Unary Negation\n        &#39; and Unary Plus operators to them.\n        ShowDurationNegate( new TimeSpan( 1 ) )\n        ShowDurationNegate( new TimeSpan( -1234567 ) )\n        ShowDurationNegate( TimeSpan.op_UnaryPlus( _\n            new TimeSpan( 0, 0, 10, -20, -30 ) ) )\n        ShowDurationNegate( TimeSpan.op_UnaryPlus( _\n            new TimeSpan( 0, -10, 20, -30, 40 ) ) )\n        ShowDurationNegate( TimeSpan.op_UnaryNegation( _\n            new TimeSpan( 1, 10, 20, 40, 160 ) ) )\n        ShowDurationNegate( TimeSpan.op_UnaryNegation( _\n            new TimeSpan( -10, -20, -30, -40, -50 ) ) )\n    End Sub \nEnd Module \n\n&#39; This example of TimeSpan.Duration( ), TimeSpan.Negate( ),\n&#39; and the TimeSpan Unary Negation and Unary Plus operators\n&#39; generates the following output.\n&#39; \n&#39;               TimeSpan           Duration( )             Negate( )\n&#39;               --------           -----------             ---------\n&#39;       00:00:00.0000001      00:00:00.0000001     -00:00:00.0000001\n&#39;      -00:00:00.1234567      00:00:00.1234567      00:00:00.1234567\n&#39;       00:09:39.9700000      00:09:39.9700000     -00:09:39.9700000\n&#39;      -09:40:29.9600000      09:40:29.9600000      09:40:29.9600000\n&#39;    -1.10:20:40.1600000    1.10:20:40.1600000    1.10:20:40.1600000\n&#39;    10.20:30:40.0500000   10.20:30:40.0500000  -10.20:30:40.0500000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_Parse_System_String_\">\r\n    \r\n            <a id=\"System_TimeSpan_Parse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parse(String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a time interval to its <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> equivalent.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TimeSpan Parse (string s);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that specifies the time interval to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </div>\r\n                  <p>A time interval that corresponds to <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> has an invalid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> represents a number that is less than <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> or greater than <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.  </p>\n<p> -or-  </p>\n<p> At least one of the days, hours, minutes, or seconds components is outside its valid range.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>s</code> parameter contains a time interval specification in the form:  </p>\n<p> [<em>ws</em>][-]{ <em>d</em> &#124; [<em>d</em>.]<em>hh</em>:<em>mm</em>[:<em>ss</em>[.<em>ff</em>]] }[<em>ws</em>]  </p>\n<p> Elements in square brackets ([ and ]) are optional. One selection from the list of alternatives enclosed in braces ({ and }) and separated by vertical bars (&#124;) is required. The following table describes each element.  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>ws</em></td>\n<td>Optional white space.</td>\n</tr>\n<tr>\n<td>-</td>\n<td>An optional minus sign, which indicates a negative <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.</td>\n</tr>\n<tr>\n<td><em>d</em></td>\n<td>Days, ranging from 0 to 10675199.</td>\n</tr>\n<tr>\n<td>.</td>\n<td>A culture-sensitive symbol that separates days from hours. The invariant format uses a period (&quot;.&quot;) character.</td>\n</tr>\n<tr>\n<td><em>hh</em></td>\n<td>Hours, ranging from 0 to 23.</td>\n</tr>\n<tr>\n<td>:</td>\n<td>The culture-sensitive time separator symbol. The invariant format uses a colon (&quot;:&quot;) character.</td>\n</tr>\n<tr>\n<td><em>mm</em></td>\n<td>Minutes, ranging from 0 to 59.</td>\n</tr>\n<tr>\n<td><em>ss</em></td>\n<td>Optional seconds, ranging from 0 to 59.</td>\n</tr>\n<tr>\n<td><em>.</em></td>\n<td>A culture-sensitive symbol that separates seconds from fractions of a second. The invariant format uses a period (&quot;.&quot;) character.</td>\n</tr>\n<tr>\n<td><em>ff</em></td>\n<td>Optional fractional seconds, consisting of one to seven decimal digits.</td>\n</tr>\n</tbody>\n</table>\n<p> The components of <code>s</code> must collectively specify a time interval that is greater than or equal to <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">System.TimeSpan</a> and less than or equal to <a class=\"xref\" href=\"system.timespan#System_TimeSpan_MaxValue\" data-linktype=\"relative-path\">System.TimeSpan.MaxValue</a>.  </p>\n<p> The Parse method tries to parse <code>s</code> by using each of the culture-specific formats for the current culture.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the Parse method to convert each element in a string array to a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value. It changes the current system culture to Croatian - Croatia (&quot;hr-HR&quot;) and English - United States (&quot;en-US&quot;) to illustrate how the current system culture affects the parsing operation.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeSpan.Parse#1\">using System;\nusing System.Globalization;\nusing System.Threading;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] values = { &quot;6&quot;, &quot;6:12&quot;, &quot;6:12:14&quot;, &quot;6:12:14:45&quot;, \n                          &quot;6.12:14:45&quot;, &quot;6:12:14:45.3448&quot;, \n                          &quot;6:12:14:45,3448&quot;, &quot;6:34:14:45&quot; };\n      string[] cultureNames = { &quot;hr-HR&quot;, &quot;en-US&quot;};\n      \n      // Change the current culture.\n      foreach (string cultureName in cultureNames)\n      {\n         Thread.CurrentThread.CurrentCulture = new CultureInfo(cultureName);\n         Console.WriteLine(&quot;Current Culture: {0}&quot;, \n                           Thread.CurrentThread.CurrentCulture.Name);\n         foreach (string value in values)\n         {\n            try {\n               TimeSpan ts = TimeSpan.Parse(value);\n               Console.WriteLine(&quot;{0} --&gt; {1}&quot;, value, ts.ToString(&quot;c&quot;));\n            }\n            catch (FormatException) {\n               Console.WriteLine(&quot;{0}: Bad Format&quot;, value);\n            }   \n            catch (OverflowException) {\n               Console.WriteLine(&quot;{0}: Overflow&quot;, value);\n            }\n         } \n         Console.WriteLine();                                \n      }\n   }\n}\n// The example displays the following output:\n//    Current Culture: hr-HR\n//    6 --&gt; 6.00:00:00\n//    6:12 --&gt; 06:12:00\n//    6:12:14 --&gt; 06:12:14\n//    6:12:14:45 --&gt; 6.12:14:45\n//    6.12:14:45 --&gt; 6.12:14:45\n//    6:12:14:45.3448: Bad Format\n//    6:12:14:45,3448 --&gt; 6.12:14:45.3448000\n//    6:34:14:45: Overflow\n//    \n//    Current Culture: en-US\n//    6 --&gt; 6.00:00:00\n//    6:12 --&gt; 06:12:00\n//    6:12:14 --&gt; 06:12:14\n//    6:12:14:45 --&gt; 6.12:14:45\n//    6.12:14:45 --&gt; 6.12:14:45\n//    6:12:14:45.3448 --&gt; 6.12:14:45.3448000\n//    6:12:14:45,3448: Bad Format\n//    6:34:14:45: Overflow\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.Parse#1\">Imports System.Globalization\nImports System.Threading\n\nModule Example\n   Public Sub Main()\n      Dim values() As String = { &quot;6&quot;, &quot;6:12&quot;, &quot;6:12:14&quot;, &quot;6:12:14:45&quot;, \n                                 &quot;6.12:14:45&quot;, &quot;6:12:14:45.3448&quot;, \n                                 &quot;6:12:14:45,3448&quot;, &quot;6:34:14:45&quot; }\n      Dim cultureNames() As String = { &quot;hr-HR&quot;, &quot;en-US&quot;}\n      \n      &#39; Change the current culture.\n      For Each cultureName As String In cultureNames\n         Thread.CurrentThread.CurrentCulture = New CultureInfo(cultureName)\n         Console.WriteLine(&quot;Current Culture: {0}&quot;, \n                           Thread.CurrentThread.CurrentCulture.Name)\n         For Each value As String In values\n            Try\n               Dim ts As TimeSpan = TimeSpan.Parse(value)\n               Console.WriteLine(&quot;{0} --&gt; {1}&quot;, value, ts.ToString(&quot;c&quot;))\n            Catch e As FormatException\n               Console.WriteLine(&quot;{0}: Bad Format&quot;, value)\n            Catch e As OverflowException\n               Console.WriteLine(&quot;{0}: Overflow&quot;, value)\n            End Try      \n         Next \n         Console.WriteLine()                                \n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Current Culture: hr-HR\n&#39;       6 --&gt; 6.00:00:00\n&#39;       6:12 --&gt; 06:12:00\n&#39;       6:12:14 --&gt; 06:12:14\n&#39;       6:12:14:45 --&gt; 6.12:14:45\n&#39;       6.12:14:45 --&gt; 6.12:14:45\n&#39;       6:12:14:45.3448: Bad Format\n&#39;       6:12:14:45,3448 --&gt; 6.12:14:45.3448000\n&#39;       6:34:14:45: Overflow\n&#39;       \n&#39;       Current Culture: en-US\n&#39;       6 --&gt; 6.00:00:00\n&#39;       6:12 --&gt; 06:12:00\n&#39;       6:12:14 --&gt; 06:12:14\n&#39;       6:12:14:45 --&gt; 6.12:14:45\n&#39;       6.12:14:45 --&gt; 6.12:14:45\n&#39;       6:12:14:45.3448 --&gt; 6.12:14:45.3448000\n&#39;       6:12:14:45,3448: Bad Format\n&#39;       6:34:14:45: Overflow\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_Parse_System_String_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_TimeSpan_Parse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parse(String,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a time interval to its <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> equivalent by using the specified culture-specific format information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TimeSpan Parse (string input, IFormatProvider formatProvider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>input</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that specifies the time interval to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>formatProvider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </div>\r\n                  <p>A time interval that corresponds to <code>input</code>, as specified by <code>formatProvider</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>input</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>input</code> has an invalid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>input</code> represents a number that is less than <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> or greater than <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.  </p>\n<p> -or-  </p>\n<p> At least one of the days, hours, minutes, or seconds components in <code>input</code> is outside its valid range.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>input</code> parameter contains a time interval specification in the form:  </p>\n<p> [<em>ws</em>][-]{ <em>d</em> &#124; [<em>d</em>.]<em>hh</em>:<em>mm</em>[:<em>ss</em>[.<em>ff</em>]] }[<em>ws</em>]  </p>\n<p> Elements in square brackets ([ and ]) are optional; one selection from the list of alternatives enclosed in braces ({ and }) and separated by vertical bars (&#124;) is required. The following table describes each element.  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>ws</em></td>\n<td>Optional white space.</td>\n</tr>\n<tr>\n<td>-</td>\n<td>An optional minus sign, which indicates a negative <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.</td>\n</tr>\n<tr>\n<td><em>d</em></td>\n<td>Days, ranging from 0 to 10675199.</td>\n</tr>\n<tr>\n<td>.</td>\n<td>A culture-sensitive symbol that separates days from hours. The default value is a period (&quot;.&quot;) character.</td>\n</tr>\n<tr>\n<td><em>hh</em></td>\n<td>Hours, ranging from 0 to 23.</td>\n</tr>\n<tr>\n<td>:</td>\n<td>The culture-sensitive time separator symbol.</td>\n</tr>\n<tr>\n<td><em>mm</em></td>\n<td>Minutes, ranging from 0 to 59.</td>\n</tr>\n<tr>\n<td><em>ss</em></td>\n<td>Optional seconds, ranging from 0 to 59.</td>\n</tr>\n<tr>\n<td>.</td>\n<td>A culture-sensitive symbol that separates seconds from fractions of a second. The default value is a period (&quot;.&quot;) character.</td>\n</tr>\n<tr>\n<td><em>ff</em></td>\n<td>Optional fractional seconds, consisting of one to seven decimal digits.</td>\n</tr>\n</tbody>\n</table>\n<p> The components of <code>input</code> must collectively specify a time interval that is greater than or equal to <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">System.TimeSpan</a> and less than or equal to <a class=\"xref\" href=\"system.timespan#System_TimeSpan_MaxValue\" data-linktype=\"relative-path\">System.TimeSpan.MaxValue</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.timespan#System_TimeSpan_Parse_System_String_\" data-linktype=\"relative-path\">Parse(String)</a> method tries to parse <code>input</code> by using each of the culture-specific formats for the culture specified by <code>formatProvider</code>.  </p>\n<p> The <code>formatProvider</code> parameter is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation that provides culture-specific information about the format of the returned string. The <code>formatProvider</code> parameter can be any of the following:  </p>\n<ul>\n<li><p>A <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the culture whose formatting conventions are to be reflected in the returned string. The <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> property defines the formatting of the returned string.  </p>\n</li>\n<li><p>A <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that defines the formatting of the returned string.  </p>\n</li>\n<li><p>A custom object that implements the <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> interface. Its <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns a <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that provides formatting information.  </p>\n<p>If <code>formatProvider</code> is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that is associated with the current culture is used.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an array of <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> objects, and uses each object in calls to the Parse method to parse the elements in a string array. The example illustrates how the conventions of a specific culture influence the formatting operation.  </p>\n<pre><code class=\"lang-vb\" name=\"System.TimeSpan.Parse#2\">Imports System.Globalization\nImports System.Threading\n\nModule Example\n   Public Sub Main()\n      Dim values() As String = { &quot;6&quot;, &quot;6:12&quot;, &quot;6:12:14&quot;, &quot;6:12:14:45&quot;, \n                                 &quot;6.12:14:45&quot;, &quot;6:12:14:45.3448&quot;, \n                                 &quot;6:12:14:45,3448&quot;, &quot;6:34:14:45&quot; }\n      Dim cultures() As CultureInfo = { New CultureInfo(&quot;en-US&quot;), \n                                        New CultureInfo(&quot;ru-RU&quot;),\n                                        CultureInfo.InvariantCulture }\n      \n      Dim header As String = String.Format(&quot;{0,-17}&quot;, &quot;String&quot;)\n      For Each culture As CultureInfo In cultures\n         header += If(culture.Equals(CultureInfo.InvariantCulture), \n                      String.Format(&quot;{0,20}&quot;, &quot;Invariant&quot;),\n                      String.Format(&quot;{0,20}&quot;, culture.Name))\n      Next\n      Console.WriteLine(header)\n      Console.WriteLine()\n      \n      For Each value As String In values\n         Console.Write(&quot;{0,-17}&quot;, value)\n         For Each culture As CultureInfo In cultures\n            Try\n               Dim ts As TimeSpan = TimeSpan.Parse(value, culture)\n               Console.Write(&quot;{0,20}&quot;, ts.ToString(&quot;c&quot;))\n            Catch e As FormatException\n               Console.Write(&quot;{0,20}&quot;, &quot;Bad Format&quot;)\n            Catch e As OverflowException\n               Console.Write(&quot;{0,20}&quot;, &quot;Overflow&quot;)\n            End Try      \n         Next\n         Console.WriteLine()                                \n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    String                          en-US               ru-RU           Invariant\n&#39;    \n&#39;    6                          6.00:00:00          6.00:00:00          6.00:00:00\n&#39;    6:12                         06:12:00            06:12:00            06:12:00\n&#39;    6:12:14                      06:12:14            06:12:14            06:12:14\n&#39;    6:12:14:45                 6.12:14:45          6.12:14:45          6.12:14:45\n&#39;    6.12:14:45                 6.12:14:45          6.12:14:45          6.12:14:45\n&#39;    6:12:14:45.3448    6.12:14:45.3448000          Bad Format  6.12:14:45.3448000\n&#39;    6:12:14:45,3448            Bad Format  6.12:14:45.3448000          Bad Format\n&#39;    6:34:14:45                   Overflow            Overflow            Overflow\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.Parse#2\">using System;\nusing System.Globalization;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] values = { &quot;6&quot;, &quot;6:12&quot;, &quot;6:12:14&quot;, &quot;6:12:14:45&quot;, \n                          &quot;6.12:14:45&quot;, &quot;6:12:14:45.3448&quot;, \n                          &quot;6:12:14:45,3448&quot;, &quot;6:34:14:45&quot; };\n      CultureInfo[] cultures = { new CultureInfo(&quot;en-US&quot;), \n                                 new CultureInfo(&quot;ru-RU&quot;),\n                                 CultureInfo.InvariantCulture };\n      \n      string header = String.Format(&quot;{0,-17}&quot;, &quot;String&quot;);\n      foreach (CultureInfo culture in cultures)\n         header += culture.Equals(CultureInfo.InvariantCulture) ? \n                      String.Format(&quot;{0,20}&quot;, &quot;Invariant&quot;) :\n                      String.Format(&quot;{0,20}&quot;, culture.Name);\n      Console.WriteLine(header);\n      Console.WriteLine();\n      \n      foreach (string value in values)\n      {\n         Console.Write(&quot;{0,-17}&quot;, value);\n         foreach (CultureInfo culture in cultures)\n         {\n            try {\n               TimeSpan ts = TimeSpan.Parse(value, culture);\n               Console.Write(&quot;{0,20}&quot;, ts.ToString(&quot;c&quot;));\n            }\n            catch (FormatException) {\n               Console.Write(&quot;{0,20}&quot;, &quot;Bad Format&quot;);\n            }   \n            catch (OverflowException) {\n               Console.Write(&quot;{0,20}&quot;, &quot;Overflow&quot;);\n            }      \n         }\n         Console.WriteLine();                                \n      }\n   }\n}\n// The example displays the following output:\n//    String                          en-US               ru-RU           Invariant\n//    \n//    6                          6.00:00:00          6.00:00:00          6.00:00:00\n//    6:12                         06:12:00            06:12:00            06:12:00\n//    6:12:14                      06:12:14            06:12:14            06:12:14\n//    6:12:14:45                 6.12:14:45          6.12:14:45          6.12:14:45\n//    6.12:14:45                 6.12:14:45          6.12:14:45          6.12:14:45\n//    6:12:14:45.3448    6.12:14:45.3448000          Bad Format  6.12:14:45.3448000\n//    6:12:14:45,3448            Bad Format  6.12:14:45.3448000          Bad Format\n//    6:34:14:45                   Overflow            Overflow            Overflow\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_ParseExact_System_String_System_String_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_TimeSpan_ParseExact_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ParseExact(String,String,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a time interval to its <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> equivalent by using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TimeSpan ParseExact (string input, string format, IFormatProvider formatProvider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>input</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that specifies the time interval to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A standard or custom format string that defines the required format of <code>input</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>formatProvider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that provides culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </div>\r\n                  <p>A time interval that corresponds to <code>input</code>, as specified by <code>format</code> and <code>formatProvider</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>input</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>input</code> has an invalid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>input</code> represents a number that is less than <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> or greater than <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.  </p>\n<p> -or-  </p>\n<p> At least one of the days, hours, minutes, or seconds components in <code>input</code> is outside its valid range.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ParseExact method parses the string representation of a time interval, which must be in the format defined by the <code>format</code> parameter, except that leading and trailing white-space characters are ignored. Because <code>input</code> must conform to the format of <code>format</code> exactly, you should always use exception handling when converting a string input by the user to a time interval. If you prefer not to use exception handling, you can call the <a class=\"xref\" href=\"system.timespan#System_TimeSpan_TryParseExact_System_String_System_String_System_IFormatProvider_System_TimeSpan__\" data-linktype=\"relative-path\">TryParseExact(String,String,IFormatProvider,TimeSpan)</a> method instead.  </p>\n<p> The <code>format</code> parameter is a string that contains either a single standard format specifier, or one or more custom format specifiers that define the required format of <code>input</code>. For more information about valid format strings, see <a href=\"../Topic/Standard%20TimeSpan%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard TimeSpan Format Strings</a> and <a href=\"../Topic/Custom%20TimeSpan%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom TimeSpan Format Strings</a>.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> The ParseExact method uses the conventions of the culture specified by the <code>formatProvider</code> parameter only if <code>format</code> is a standard <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> format string whose value is either &quot;g&quot; or &quot;G&quot;. The &quot;c&quot;, &quot;t&quot;, and &quot;T&quot; standard format strings use the formatting conventions of the invariant culture. Custom format strings define the precise format of the input string and use literal characters to separate the components of a time interval.  </p>\n</div>\n<p> The <code>formatProvider</code> parameter is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation that provides culture-specific information about the format of the returned string if <code>format</code> is a standard format string. The <code>formatProvider</code> parameter can be any of the following:  </p>\n<ul>\n<li><p>A <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the culture whose formatting conventions are to be reflected in the returned string. The <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> property defines the formatting of the returned string.  </p>\n</li>\n<li><p>A <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that defines the formatting of the returned string.  </p>\n</li>\n<li><p>A custom object that implements the <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> interface. Its <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns a <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that provides formatting information.  </p>\n<p>If <code>formatProvider</code> is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that is associated with the current culture is used.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the ParseExact method to parse several string representations of time intervals using various format strings and cultures.  </p>\n<pre><code class=\"lang-vb\" name=\"System.TimeSpan.ParseExact#1\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim intervalString, format As String\n      Dim interval As TimeSpan\n      Dim culture As CultureInfo\n      \n      &#39; Parse hour:minute value with &quot;g&quot; specifier current culture.\n      intervalString = &quot;17:14&quot;\n      format = &quot;g&quot;\n      culture = CultureInfo.CurrentCulture\n      Try\n         interval = TimeSpan.ParseExact(intervalString, format, culture)\n         Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, intervalString, interval)\n      Catch e As FormatException\n         Console.WriteLine(&quot;&#39;{0}&#39;: Bad Format for &#39;{1}&#39;&quot;, intervalString, format)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;&#39;{0}&#39;: Overflow&quot;, intervalString)\n      End Try      \n      \n      &#39; Parse hour:minute:second value with &quot;G&quot; specifier.\n      intervalString = &quot;17:14:48&quot;\n      format = &quot;G&quot;\n      culture = CultureInfo.InvariantCulture\n      Try\n         interval = TimeSpan.ParseExact(intervalString, format, culture)\n         Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, intervalString, interval)\n      Catch e As FormatException\n         Console.WriteLine(&quot;&#39;{0}&#39;: Bad Format for &#39;{1}&#39;&quot;, intervalString, format)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;&#39;{0}&#39;: Overflow&quot;, intervalString)\n      End Try \n      \n      &#39; Parse hours:minute.second value with &quot;G&quot; specifier \n      &#39; and current (en-US) culture.     \n      intervalString = &quot;17:14:48.153&quot;\n      format = &quot;G&quot;\n      culture = CultureInfo.CurrentCulture\n      Try\n         interval = TimeSpan.ParseExact(intervalString, format, culture)\n         Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, intervalString, interval)\n      Catch e As FormatException\n         Console.WriteLine(&quot;&#39;{0}&#39;: Bad Format for &#39;{1}&#39;&quot;, intervalString, format)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;&#39;{0}&#39;: Overflow&quot;, intervalString)\n      End Try \n\n      &#39; Parse days:hours:minute.second value with &quot;G&quot; specifier \n      &#39; and current (en-US) culture.     \n      intervalString = &quot;3:17:14:48.153&quot;\n      format = &quot;G&quot;\n      culture = CultureInfo.CurrentCulture\n      Try\n         interval = TimeSpan.ParseExact(intervalString, format, culture)\n         Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, intervalString, interval)\n      Catch e As FormatException\n         Console.WriteLine(&quot;&#39;{0}&#39;: Bad Format for &#39;{1}&#39;&quot;, intervalString, format)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;&#39;{0}&#39;: Overflow&quot;, intervalString)\n      End Try \n            \n      &#39; Parse days:hours:minute.second value with &quot;G&quot; specifier \n      &#39; and fr-FR culture.     \n      intervalString = &quot;3:17:14:48.153&quot;\n      format = &quot;G&quot;\n      culture = New CultureInfo(&quot;fr-FR&quot;)\n      Try\n         interval = TimeSpan.ParseExact(intervalString, format, culture)\n         Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, intervalString, interval)\n      Catch e As FormatException\n         Console.WriteLine(&quot;&#39;{0}&#39;: Bad Format for &#39;{1}&#39;&quot;, intervalString, format)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;&#39;{0}&#39;: Overflow&quot;, intervalString)\n      End Try \n      \n      &#39; Parse days:hours:minute.second value with &quot;G&quot; specifier \n      &#39; and fr-FR culture.     \n      intervalString = &quot;3:17:14:48,153&quot;\n      format = &quot;G&quot;\n      culture = New CultureInfo(&quot;fr-FR&quot;)\n      Try\n         interval = TimeSpan.ParseExact(intervalString, format, culture)\n         Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, intervalString, interval)\n      Catch e As FormatException\n         Console.WriteLine(&quot;&#39;{0}&#39;: Bad Format for &#39;{1}&#39;&quot;, intervalString, format)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;&#39;{0}&#39;: Overflow&quot;, intervalString)\n      End Try \n\n      &#39; Parse a single number using the &quot;c&quot; standard format string. \n      intervalString = &quot;12&quot;\n      format = &quot;c&quot;\n      Try\n         interval = TimeSpan.ParseExact(intervalString, format, Nothing)\n         Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, intervalString, interval)\n      Catch e As FormatException\n         Console.WriteLine(&quot;&#39;{0}&#39;: Bad Format for &#39;{1}&#39;&quot;, intervalString, format)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;&#39;{0}&#39;: Overflow&quot;, intervalString)\n      End Try \n      \n      &#39; Parse a single number using the &quot;%h&quot; custom format string. \n      format = &quot;%h&quot;\n      Try\n         interval = TimeSpan.ParseExact(intervalString, format, Nothing)\n         Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, intervalString, interval)\n      Catch e As FormatException\n         Console.WriteLine(&quot;&#39;{0}&#39;: Bad Format for &#39;{1}&#39;&quot;, intervalString, format)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;&#39;{0}&#39;: Overflow&quot;, intervalString)\n      End Try \n      \n      &#39; Parse a single number using the &quot;%s&quot; custom format string. \n      format = &quot;%s&quot;\n      Try\n         interval = TimeSpan.ParseExact(intervalString, format, Nothing)\n         Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, intervalString, interval)\n      Catch e As FormatException\n         Console.WriteLine(&quot;&#39;{0}&#39;: Bad Format for &#39;{1}&#39;&quot;, intervalString, format)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;&#39;{0}&#39;: Overflow&quot;, intervalString)\n      End Try \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       &#39;17:14&#39; --&gt; 17:14:00\n&#39;       &#39;17:14:48&#39;: Bad Format for &#39;G&#39;\n&#39;       &#39;17:14:48.153&#39;: Bad Format for &#39;G&#39;\n&#39;       &#39;3:17:14:48.153&#39; --&gt; 3.17:14:48.1530000\n&#39;       &#39;3:17:14:48.153&#39;: Bad Format for &#39;G&#39;\n&#39;       &#39;3:17:14:48,153&#39; --&gt; 3.17:14:48.1530000\n&#39;       &#39;12&#39; --&gt; 12.00:00:00\n&#39;       &#39;12&#39; --&gt; 12:00:00\n&#39;       &#39;12&#39; --&gt; 00:00:12\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.ParseExact#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string intervalString, format;\n      TimeSpan interval;\n      CultureInfo culture;\n      \n      // Parse hour:minute value with &quot;g&quot; specifier current culture.\n      intervalString = &quot;17:14&quot;;\n      format = &quot;g&quot;;\n      culture = CultureInfo.CurrentCulture;\n      try {\n         interval = TimeSpan.ParseExact(intervalString, format, culture);\n         Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, intervalString, interval);\n      }\n      catch (FormatException) {\n         Console.WriteLine(&quot;&#39;{0}&#39;: Bad Format for &#39;{1}&#39;&quot;, \n                           intervalString, format);\n      }                     \n      catch (OverflowException) {\n         Console.WriteLine(&quot;&#39;{0}&#39;: Overflow&quot;, intervalString);\n      }      \n      \n      // Parse hour:minute:second value with &quot;G&quot; specifier.\n      intervalString = &quot;17:14:48&quot;;\n      format = &quot;G&quot;;\n      culture = CultureInfo.InvariantCulture;\n      try {\n         interval = TimeSpan.ParseExact(intervalString, format, culture);\n         Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, intervalString, interval);\n      }\n      catch (FormatException) {\n         Console.WriteLine(&quot;&#39;{0}&#39;: Bad Format for &#39;{1}&#39;&quot;, intervalString, format);\n      }   \n      catch (OverflowException) {\n         Console.WriteLine(&quot;&#39;{0}&#39;: Overflow&quot;, intervalString);\n      } \n      \n      // Parse hours:minute.second value with &quot;G&quot; specifier \n      // and current (en-US) culture.     \n      intervalString = &quot;17:14:48.153&quot;;\n      format = &quot;G&quot;;\n      culture = CultureInfo.CurrentCulture;\n      try {\n         interval = TimeSpan.ParseExact(intervalString, format, culture);\n         Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, intervalString, interval);\n      }   \n      catch (FormatException) {\n         Console.WriteLine(&quot;&#39;{0}&#39;: Bad Format for &#39;{1}&#39;&quot;, intervalString, format);\n      }\n      catch (OverflowException) {\n         Console.WriteLine(&quot;&#39;{0}&#39;: Overflow&quot;, intervalString);\n      } \n\n      // Parse days:hours:minute.second value with &quot;G&quot; specifier \n      // and current (en-US) culture.     \n      intervalString = &quot;3:17:14:48.153&quot;;\n      format = &quot;G&quot;;\n      culture = CultureInfo.CurrentCulture;\n      try {\n         interval = TimeSpan.ParseExact(intervalString, format, culture);\n         Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, intervalString, interval);\n      }   \n      catch (FormatException) {\n         Console.WriteLine(&quot;&#39;{0}&#39;: Bad Format for &#39;{1}&#39;&quot;, intervalString, format);\n      }   \n      catch (OverflowException) {\n         Console.WriteLine(&quot;&#39;{0}&#39;: Overflow&quot;, intervalString);\n      } \n            \n      // Parse days:hours:minute.second value with &quot;G&quot; specifier \n      // and fr-FR culture.     \n      intervalString = &quot;3:17:14:48.153&quot;;\n      format = &quot;G&quot;;\n      culture = new CultureInfo(&quot;fr-FR&quot;);\n      try {\n         interval = TimeSpan.ParseExact(intervalString, format, culture);\n         Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, intervalString, interval);\n      }\n      catch (FormatException) {\n         Console.WriteLine(&quot;&#39;{0}&#39;: Bad Format for &#39;{1}&#39;&quot;, intervalString, format);\n      }\n      catch (OverflowException) {\n         Console.WriteLine(&quot;&#39;{0}&#39;: Overflow&quot;, intervalString);\n      } \n      \n      // Parse days:hours:minute.second value with &quot;G&quot; specifier \n      // and fr-FR culture.     \n      intervalString = &quot;3:17:14:48,153&quot;;\n      format = &quot;G&quot;;\n      try {\n         interval = TimeSpan.ParseExact(intervalString, format, culture);\n         Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, intervalString, interval);\n      }   \n      catch (FormatException) {\n         Console.WriteLine(&quot;&#39;{0}&#39;: Bad Format for &#39;{1}&#39;&quot;, intervalString, format);\n      }\n      catch (OverflowException) {\n         Console.WriteLine(&quot;&#39;{0}&#39;: Overflow&quot;, intervalString);\n      } \n\n      // Parse a single number using the &quot;c&quot; standard format string. \n      intervalString = &quot;12&quot;;\n      format = &quot;c&quot;;\n      try {\n         interval = TimeSpan.ParseExact(intervalString, format, null);\n         Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, intervalString, interval);\n      }\n      catch (FormatException) {\n         Console.WriteLine(&quot;&#39;{0}&#39;: Bad Format for &#39;{1}&#39;&quot;, intervalString, format);\n      }\n      catch (OverflowException) {\n         Console.WriteLine(&quot;&#39;{0}&#39;: Overflow&quot;, intervalString);\n      } \n      \n      // Parse a single number using the &quot;%h&quot; custom format string. \n      format = &quot;%h&quot;;\n      try {\n         interval = TimeSpan.ParseExact(intervalString, format, null);\n         Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, intervalString, interval);\n      }\n      catch (FormatException) {\n         Console.WriteLine(&quot;&#39;{0}&#39;: Bad Format for &#39;{1}&#39;&quot;, intervalString, format);\n      }\n      catch (OverflowException) {\n         Console.WriteLine(&quot;&#39;{0}&#39;: Overflow&quot;, intervalString);\n      } \n      \n      // Parse a single number using the &quot;%s&quot; custom format string. \n      format = &quot;%s&quot;;\n      try {\n         interval = TimeSpan.ParseExact(intervalString, format, null);\n         Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, intervalString, interval);\n      }\n      catch (FormatException) {\n         Console.WriteLine(&quot;&#39;{0}&#39;: Bad Format for &#39;{1}&#39;&quot;, intervalString, format);\n      }\n      catch (OverflowException) {\n         Console.WriteLine(&quot;&#39;{0}&#39;: Overflow&quot;, intervalString);\n      }\n   }\n}\n// The example displays the following output:\n//       &#39;17:14&#39; --&gt; 17:14:00\n//       &#39;17:14:48&#39;: Bad Format for &#39;G&#39;\n//       &#39;17:14:48.153&#39;: Bad Format for &#39;G&#39;\n//       &#39;3:17:14:48.153&#39; --&gt; 3.17:14:48.1530000\n//       &#39;3:17:14:48.153&#39;: Bad Format for &#39;G&#39;\n//       &#39;3:17:14:48,153&#39; --&gt; 3.17:14:48.1530000\n//       &#39;12&#39; --&gt; 12.00:00:00\n//       &#39;12&#39; --&gt; 12:00:00\n//       &#39;12&#39; --&gt; 00:00:12\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_ParseExact_System_String_System_String___System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_TimeSpan_ParseExact_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ParseExact(String,String[],IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a time interval to its <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> equivalent by using the specified array of format strings and culture-specific format information. The format of the string representation must match one of the specified formats exactly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TimeSpan ParseExact (string input, string[] formats, IFormatProvider formatProvider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>input</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that specifies the time interval to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>formats</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A array of standard or custom format strings that defines the required format of <code>input</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>formatProvider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that provides culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </div>\r\n                  <p>A time interval that corresponds to <code>input</code>, as specified by <code>formats</code> and <code>formatProvider</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>input</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>input</code> has an invalid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>input</code> represents a number that is less than <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> or greater than <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.  </p>\n<p> -or-  </p>\n<p> At least one of the days, hours, minutes, or seconds components in <code>input</code> is outside its valid range.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.timespan#System_TimeSpan_ParseExact_System_String_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">ParseExact(String,String,IFormatProvider)</a> method parses the string representation of a time interval, which must be in one of the formats defined by the <code>formats</code> parameter, except that leading and trailing white-space characters are ignored. Because <code>input</code> must exactly conform to one of the formats specified in <code>formats</code>, you should always use exception handling when converting a string input by the user to a time interval. If you prefer not to use exception handling, you can call the [TryParseExact(String,â€‚String&lt;xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29&gt; method instead.  </p>\n<p> The <code>formats</code> parameter is a string array whose elements consist of either a single standard format specifier, or one or more custom format specifiers that define the required format of <code>input</code>. For more information about valid format strings, see <a href=\"../Topic/Standard%20TimeSpan%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard TimeSpan Format Strings</a> and <a href=\"../Topic/Custom%20TimeSpan%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom TimeSpan Format Strings</a>. <code>input</code> must correspond exactly to a member of <code>formats</code> for the parse operation to succeed. The parse operation attempts to match <code>input</code> to each element in <code>formats</code> starting with the first element in the array.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> The <a class=\"xref\" href=\"system.timespan#System_TimeSpan_ParseExact_\" data-linktype=\"relative-path\">ParseExact</a> method uses the conventions of the culture specified by the <code>formatProvider</code> parameter only if the format string used to parse <code>input</code> is a standard <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> format string whose value is either &quot;g&quot; or &quot;G&quot;. The &quot;c&quot;, &quot;t&quot;, and &quot;T&quot; standard format strings use the formatting conventions of the invariant culture. Custom format strings define the precise format of the input string and use literal characters to separate the components of a time interval.  </p>\n</div>\n<p> The <code>formatProvider</code> parameter is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation that provides culture-specific information about the format of the returned string if the format string used to parse <code>input</code> is a standard format string. The <code>formatProvider</code> parameter can be any of the following:  </p>\n<ul>\n<li><p>A <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the culture whose formatting conventions are to be reflected in the returned string. The <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> property defines the formatting of the returned string.  </p>\n</li>\n<li><p>A <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that defines the formatting of the returned string.  </p>\n</li>\n<li><p>A custom object that implements the <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> interface. Its <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns a <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that provides formatting information.  </p>\n<p>If <code>formatProvider</code> is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that is associated with the current culture is used.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls the ParseExact method to convert each element of a string array to a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value. The example interprets the strings using the formatting conventions of the French - France (&quot;fr-FR&quot;) culture. The strings can represent a time interval in either the general short format or the general long format.  </p>\n<p> In addition, the example changes the way in which the time interval parsing methods interpret a single digit. Ordinarily, a single digit is interpreted as the number of days in a time interval. Instead, the <code>%h</code> custom format string is used to interpret a single digit as the number of hours. For this change to be effective, note that the <code>%h</code> custom format string must precede the other format strings in the <code>formats</code> array.  </p>\n<pre><code class=\"lang-vb\" name=\"System.TimeSpan.ParseExact#3\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim inputs() As String = { &quot;3&quot;, &quot;16:42&quot;, &quot;1:6:52:35.0625&quot;, \n                                 &quot;1:6:52:35,0625&quot; } \n      Dim formats() As String = { &quot;%h&quot;, &quot;g&quot;, &quot;G&quot; }\n      Dim interval As TimeSpan\n      Dim culture As New CultureInfo(&quot;fr-FR&quot;)\n      \n      &#39; Parse each string in inputs using formats and the fr-FR culture.\n      For Each input As String In inputs\n         Try\n            interval = TimeSpan.ParseExact(input, formats, culture)\n            Console.WriteLine(&quot;{0} --&gt; {1:c}&quot;, input, interval)   \n         Catch e As FormatException\n            Console.WriteLine(&quot;{0} --&gt; Bad Format&quot;, input)   \n         Catch e As OverflowException\n            Console.WriteLine(&quot;{0} --&gt; Overflow&quot;, input)   \n         End Try            \n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       3 --&gt; 3.00:00:00\n&#39;       16:42 --&gt; 16:42:00\n&#39;       1:6:52:35.0625 --&gt; Bad Format\n&#39;       1:6:52:35,0625 --&gt; 1.06:52:35.0625000\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.ParseExact#3\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] inputs = { &quot;3&quot;, &quot;16:42&quot;, &quot;1:6:52:35.0625&quot;, \n                          &quot;1:6:52:35,0625&quot; }; \n      string[] formats = { &quot;g&quot;, &quot;G&quot;, &quot;%h&quot;};\n      TimeSpan interval;\n      CultureInfo culture = new CultureInfo(&quot;fr-FR&quot;);\n      \n      // Parse each string in inputs using formats and the fr-FR culture.\n      foreach (string input in inputs) {\n         try {\n            interval = TimeSpan.ParseExact(input, formats, culture);\n            Console.WriteLine(&quot;{0} --&gt; {1:c}&quot;, input, interval);\n         }\n         catch (FormatException) {\n            Console.WriteLine(&quot;{0} --&gt; Bad Format&quot;, input);\n         }      \n         catch (OverflowException) {\n            Console.WriteLine(&quot;{0} --&gt; Overflow&quot;, input);   \n         }            \n      }\n   }\n}\n// The example displays the following output:\n//       3 --&gt; 03:00:00\n//       16:42 --&gt; 16:42:00\n//       1:6:52:35.0625 --&gt; Bad Format\n//       1:6:52:35,0625 --&gt; 1.06:52:35.0625000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_ParseExact_System_String_System_String_System_IFormatProvider_System_Globalization_TimeSpanStyles_\">\r\n    \r\n            <a id=\"System_TimeSpan_ParseExact_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ParseExact(String,String,IFormatProvider,TimeSpanStyles)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a time interval to its <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> equivalent by using the specified format, culture-specific format information, and styles. The format of the string representation must match the specified format exactly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TimeSpan ParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>input</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that specifies the time interval to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A standard or custom format string that defines the required format of <code>input</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>formatProvider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that provides culture-specific formatting information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>styles</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.timespanstyles\" data-linktype=\"relative-path\">TimeSpanStyles</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of enumeration values that defines the style elements that may be present in <code>input</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </div>\r\n                  <p>A time interval that corresponds to <code>input</code>, as specified by <code>format</code>, <code>formatProvider</code>, and <code>styles</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>styles</code> is an invalid <a class=\"xref\" href=\"system.globalization.timespanstyles\" data-linktype=\"relative-path\">TimeSpanStyles</a> value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>input</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>input</code> has an invalid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>input</code> represents a number that is less than <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> or greater than <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.  </p>\n<p> -or-  </p>\n<p> At least one of the days, hours, minutes, or seconds components in <code>input</code> is outside its valid range.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ParseExact method parses the string representation of a time interval, which must be in the format defined by the <code>format</code> parameter, except that leading and trailing white-space characters are ignored. Because <code>input</code> must conform to the format of <code>format</code> exactly, you should always use exception handling when converting a string input by the user to a time interval. If you prefer not to use exception handling, you can call the <a class=\"xref\" href=\"system.timespan#System_TimeSpan_TryParseExact_System_String_System_String_System_IFormatProvider_System_Globalization_TimeSpanStyles_System_TimeSpan__\" data-linktype=\"relative-path\">TryParseExact(String,String,IFormatProvider,TimeSpanStyles,TimeSpan)</a> method instead.  </p>\n<p> The <code>format</code> parameter is a string that contains either a single standard format specifier, or one or more custom format specifiers that define the required format of <code>input</code>. For more information about valid format strings, see <a href=\"../Topic/Standard%20TimeSpan%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard TimeSpan Format Strings</a> and <a href=\"../Topic/Custom%20TimeSpan%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom TimeSpan Format Strings</a>.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> The <a class=\"xref\" href=\"system.timespan#System_TimeSpan_ParseExact_\" data-linktype=\"relative-path\">ParseExact</a> method uses the conventions of the culture specified by the <code>formatProvider</code> parameter only if <code>format</code> is a standard <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> format string whose value is either &quot;g&quot; or &quot;G&quot;. The &quot;c&quot;, &quot;t&quot;, and &quot;T&quot; standard format strings use the formatting conventions of the invariant culture. Custom format strings define the precise format of the input string and use literal characters to separate the components of a time interval.  </p>\n</div>\n<p> The <code>formatProvider</code> parameter is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation that provides culture-specific information about the format of the returned string if <code>format</code> is a standard format string. The <code>formatProvider</code> parameter can be any of the following:  </p>\n<ul>\n<li><p>A <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the culture whose formatting conventions are to be reflected in the returned string. The <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> property defines the formatting of the returned string.  </p>\n</li>\n<li><p>A <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that defines the formatting of the returned string.  </p>\n</li>\n<li><p>A custom object that implements the <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> interface. Its <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns a <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that provides formatting information.  </p>\n<p>If <code>formatProvider</code> is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that is associated with the current culture is used.  </p>\n<p>The <code>styles</code> parameter affects the interpretation of strings that are parsed using custom format strings. It determines whether <code>input</code> is interpreted as a negative time interval only if a negative sign is present (<a class=\"xref\" href=\"system.globalization.timespanstyles\" data-linktype=\"relative-path\">System.Globalization.TimeSpanStyles</a>), or whether it is always interpreted as a negative time interval (<a class=\"xref\" href=\"system.globalization.timespanstyles\" data-linktype=\"relative-path\">System.Globalization.TimeSpanStyles</a>). If <a class=\"xref\" href=\"system.globalization.timespanstyles\" data-linktype=\"relative-path\">System.Globalization.TimeSpanStyles</a> is not used, <code>format</code> must include a literal negative sign symbol (such as &quot;\\-&quot;) to successfully parse a negative time interval.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <a class=\"xref\" href=\"system.timespan#System_TimeSpan_ParseExact_System_String_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">ParseExact(String,String,IFormatProvider)</a> method to parse several string representations of time intervals using various format strings and cultures. It also uses the <a class=\"xref\" href=\"system.globalization.timespanstyles\" data-linktype=\"relative-path\">System.Globalization.TimeSpanStyles</a> value to interpret each string as a negative time interval. The output from the example illustrates that the <a class=\"xref\" href=\"system.globalization.timespanstyles\" data-linktype=\"relative-path\">System.Globalization.TimeSpanStyles</a> style affects the return value only when it is used with custom format strings.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeSpan.ParseExact#2\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string intervalString, format;\n      TimeSpan interval;\n      CultureInfo culture = null;\n      \n      // Parse hour:minute value with custom format specifier.\n      intervalString = &quot;17:14&quot;;\n      format = &quot;h\\\\:mm&quot;;\n      culture = CultureInfo.CurrentCulture;\n      try {\n         interval = TimeSpan.ParseExact(intervalString, format, \n                                        culture, TimeSpanStyles.AssumeNegative);\n         Console.WriteLine(&quot;&#39;{0}&#39; ({1}) --&gt; {2}&quot;, intervalString, format, interval);\n      }   \n      catch (FormatException) {\n         Console.WriteLine(&quot;&#39;{0}&#39;: Bad Format for &#39;{1}&#39;&quot;, intervalString, format);\n      }   \n      catch (OverflowException) {\n         Console.WriteLine(&quot;&#39;{0}&#39;: Overflow&quot;, intervalString);\n      }      \n      \n      // Parse hour:minute:second value with &quot;g&quot; specifier.\n      intervalString = &quot;17:14:48&quot;;\n      format = &quot;g&quot;;\n      culture = CultureInfo.InvariantCulture;\n      try {\n         interval = TimeSpan.ParseExact(intervalString, format, \n                                        culture, TimeSpanStyles.AssumeNegative);\n         Console.WriteLine(&quot;&#39;{0}&#39; ({1}) --&gt; {2}&quot;, intervalString, format, interval);\n      }\n      catch (FormatException) {\n         Console.WriteLine(&quot;&#39;{0}&#39;: Bad Format for &#39;{1}&#39;&quot;, intervalString, format);\n      }   \n      catch (OverflowException) {\n         Console.WriteLine(&quot;&#39;{0}&#39;: Overflow&quot;, intervalString);\n      } \n      \n      // Parse hours:minute.second value with custom format specifier.     \n      intervalString = &quot;17:14:48.153&quot;;\n      format = @&quot;h\\:mm\\:ss\\.fff&quot;;\n      culture = null;\n      try {\n         interval = TimeSpan.ParseExact(intervalString, format, \n                                        culture, TimeSpanStyles.AssumeNegative);\n         Console.WriteLine(&quot;&#39;{0}&#39; ({1}) --&gt; {2}&quot;, intervalString, format, interval);\n      }\n      catch (FormatException) {\n         Console.WriteLine(&quot;&#39;{0}&#39;: Bad Format for &#39;{1}&#39;&quot;, intervalString, format);\n      }   \n      catch (OverflowException) {\n         Console.WriteLine(&quot;&#39;{0}&#39;: Overflow&quot;, intervalString);\n      } \n\n      // Parse days:hours:minute.second value with &quot;G&quot; specifier \n      // and current (en-US) culture.     \n      intervalString = &quot;3:17:14:48.153&quot;;\n      format = &quot;G&quot;;\n      culture = CultureInfo.CurrentCulture;\n      try {\n         interval = TimeSpan.ParseExact(intervalString, format, \n                                        culture, TimeSpanStyles.AssumeNegative);\n         Console.WriteLine(&quot;&#39;{0}&#39; ({1}) --&gt; {2}&quot;, intervalString, format, interval);\n      }   \n      catch (FormatException) {\n         Console.WriteLine(&quot;&#39;{0}&#39;: Bad Format for &#39;{1}&#39;&quot;, intervalString, format);\n      }\n      catch (OverflowException) {\n         Console.WriteLine(&quot;&#39;{0}&#39;: Overflow&quot;, intervalString);\n      } \n            \n      // Parse days:hours:minute.second value with a custom format specifier.     \n      intervalString = &quot;3:17:14:48.153&quot;;\n      format = @&quot;d\\:hh\\:mm\\:ss\\.fff&quot;;\n      culture = null;\n      try {\n         interval = TimeSpan.ParseExact(intervalString, format, \n                                        culture, TimeSpanStyles.AssumeNegative);\n         Console.WriteLine(&quot;&#39;{0}&#39; ({1}) --&gt; {2}&quot;, intervalString, format, interval);\n      }   \n      catch (FormatException) {\n         Console.WriteLine(&quot;&#39;{0}&#39;: Bad Format for &#39;{1}&#39;&quot;, intervalString, format);\n      }   \n      catch (OverflowException) {\n         Console.WriteLine(&quot;&#39;{0}&#39;: Overflow&quot;, intervalString);\n      } \n      \n      // Parse days:hours:minute.second value with &quot;G&quot; specifier \n      // and fr-FR culture.     \n      intervalString = &quot;3:17:14:48,153&quot;;\n      format = &quot;G&quot;;\n      culture = new CultureInfo(&quot;fr-FR&quot;);\n      try {\n         interval = TimeSpan.ParseExact(intervalString, format, \n                                        culture, TimeSpanStyles.AssumeNegative);\n         Console.WriteLine(&quot;&#39;{0}&#39; ({1}) --&gt; {2}&quot;, intervalString, format, interval);\n      }   \n      catch (FormatException) {\n         Console.WriteLine(&quot;&#39;{0}&#39;: Bad Format for &#39;{1}&#39;&quot;, intervalString, format);\n      }   \n      catch (OverflowException) {\n         Console.WriteLine(&quot;&#39;{0}&#39;: Overflow&quot;, intervalString);\n      } \n\n      // Parse a single number using the &quot;c&quot; standard format string. \n      intervalString = &quot;12&quot;;\n      format = &quot;c&quot;;\n      try {\n         interval = TimeSpan.ParseExact(intervalString, format, \n                                        null, TimeSpanStyles.AssumeNegative);\n         Console.WriteLine(&quot;&#39;{0}&#39; ({1}) --&gt; {2}&quot;, intervalString, format, interval);\n      }   \n      catch (FormatException) {\n         Console.WriteLine(&quot;&#39;{0}&#39;: Bad Format for &#39;{1}&#39;&quot;, intervalString, format);\n      }   \n      catch (OverflowException) {\n         Console.WriteLine(&quot;&#39;{0}&#39;: Overflow&quot;, intervalString);\n      } \n      \n      // Parse a single number using the &quot;%h&quot; custom format string. \n      format = &quot;%h&quot;;\n      try {\n         interval = TimeSpan.ParseExact(intervalString, format, \n                                        null, TimeSpanStyles.AssumeNegative);\n         Console.WriteLine(&quot;&#39;{0}&#39; ({1}) --&gt; {2}&quot;, intervalString, format, interval);\n      }   \n      catch (FormatException) {\n         Console.WriteLine(&quot;&#39;{0}&#39;: Bad Format for &#39;{1}&#39;&quot;, intervalString, format);\n      }   \n      catch (OverflowException) {\n         Console.WriteLine(&quot;&#39;{0}&#39;: Overflow&quot;, intervalString);\n      } \n      \n      // Parse a single number using the &quot;%s&quot; custom format string. \n      format = &quot;%s&quot;;\n      try {\n         interval = TimeSpan.ParseExact(intervalString, format, \n                                        null, TimeSpanStyles.AssumeNegative);\n         Console.WriteLine(&quot;&#39;{0}&#39; ({1}) --&gt; {2}&quot;, intervalString, format, interval);\n      }   \n      catch (FormatException) {\n         Console.WriteLine(&quot;&#39;{0}&#39;: Bad Format for &#39;{1}&#39;&quot;, intervalString, format);\n      }   \n      catch (OverflowException) {\n         Console.WriteLine(&quot;&#39;{0}&#39;: Overflow&quot;, intervalString);\n      } \n   }\n}\n// The example displays the following output:\n//    &#39;17:14&#39; (h\\:mm) --&gt; -17:14:00\n//    &#39;17:14:48&#39; (g) --&gt; 17:14:48\n//    &#39;17:14:48.153&#39; (h\\:mm\\:ss\\.fff) --&gt; -17:14:48.1530000\n//    &#39;3:17:14:48.153&#39; (G) --&gt; 3.17:14:48.1530000\n//    &#39;3:17:14:48.153&#39; (d\\:hh\\:mm\\:ss\\.fff) --&gt; -3.17:14:48.1530000\n//    &#39;3:17:14:48,153&#39; (G) --&gt; 3.17:14:48.1530000\n//    &#39;12&#39; (c) --&gt; 12.00:00:00\n//    &#39;12&#39; (%h) --&gt; -12:00:00\n//    &#39;12&#39; (%s) --&gt; -00:00:12\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.ParseExact#2\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim intervalString, format As String\n      Dim interval As TimeSpan\n      Dim culture As CultureInfo = Nothing\n      \n      &#39; Parse hour:minute value with custom format specifier.\n      intervalString = &quot;17:14&quot;\n      format = &quot;h\\:mm&quot;\n      culture = CultureInfo.CurrentCulture\n      Try\n         interval = TimeSpan.ParseExact(intervalString, format, \n                                        culture, TimeSpanStyles.AssumeNegative)\n         Console.WriteLine(&quot;&#39;{0}&#39; ({1}) --&gt; {2}&quot;, intervalString, format, interval)\n      Catch e As FormatException\n         Console.WriteLine(&quot;&#39;{0}&#39;: Bad Format for &#39;{1}&#39;&quot;, intervalString, format)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;&#39;{0}&#39;: Overflow&quot;, intervalString)\n      End Try      \n      \n      &#39; Parse hour:minute:second value with &quot;g&quot; specifier.\n      intervalString = &quot;17:14:48&quot;\n      format = &quot;g&quot;\n      culture = CultureInfo.InvariantCulture\n      Try\n         interval = TimeSpan.ParseExact(intervalString, format, \n                                        culture, TimeSpanStyles.AssumeNegative)\n         Console.WriteLine(&quot;&#39;{0}&#39; ({1}) --&gt; {2}&quot;, intervalString, format, interval)\n      Catch e As FormatException\n         Console.WriteLine(&quot;&#39;{0}&#39;: Bad Format for &#39;{1}&#39;&quot;, intervalString, format)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;&#39;{0}&#39;: Overflow&quot;, intervalString)\n      End Try \n      \n      &#39; Parse hours:minute.second value with custom format specifier.     \n      intervalString = &quot;17:14:48.153&quot;\n      format = &quot;h\\:mm\\:ss\\.fff&quot;\n      culture = Nothing\n      Try\n         interval = TimeSpan.ParseExact(intervalString, format, \n                                        culture, TimeSpanStyles.AssumeNegative)\n         Console.WriteLine(&quot;&#39;{0}&#39; ({1}) --&gt; {2}&quot;, intervalString, format, interval)\n      Catch e As FormatException\n         Console.WriteLine(&quot;&#39;{0}&#39;: Bad Format for &#39;{1}&#39;&quot;, intervalString, format)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;&#39;{0}&#39;: Overflow&quot;, intervalString)\n      End Try \n\n      &#39; Parse days:hours:minute.second value with &quot;G&quot; specifier \n      &#39; and current (en-US) culture.     \n      intervalString = &quot;3:17:14:48.153&quot;\n      format = &quot;G&quot;\n      culture = CultureInfo.CurrentCulture\n      Try\n         interval = TimeSpan.ParseExact(intervalString, format, \n                                        culture, TimeSpanStyles.AssumeNegative)\n         Console.WriteLine(&quot;&#39;{0}&#39; ({1}) --&gt; {2}&quot;, intervalString, format, interval)\n      Catch e As FormatException\n         Console.WriteLine(&quot;&#39;{0}&#39;: Bad Format for &#39;{1}&#39;&quot;, intervalString, format)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;&#39;{0}&#39;: Overflow&quot;, intervalString)\n      End Try \n            \n      &#39; Parse days:hours:minute.second value with a custom format specifier.     \n      intervalString = &quot;3:17:14:48.153&quot;\n      format = &quot;d\\:hh\\:mm\\:ss\\.fff&quot;\n      culture = Nothing\n      Try\n         interval = TimeSpan.ParseExact(intervalString, format, \n                                        culture, TimeSpanStyles.AssumeNegative)\n         Console.WriteLine(&quot;&#39;{0}&#39; ({1}) --&gt; {2}&quot;, intervalString, format, interval)\n      Catch e As FormatException\n         Console.WriteLine(&quot;&#39;{0}&#39;: Bad Format for &#39;{1}&#39;&quot;, intervalString, format)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;&#39;{0}&#39;: Overflow&quot;, intervalString)\n      End Try \n      \n      &#39; Parse days:hours:minute.second value with &quot;G&quot; specifier \n      &#39; and fr-FR culture.     \n      intervalString = &quot;3:17:14:48,153&quot;\n      format = &quot;G&quot;\n      culture = New CultureInfo(&quot;fr-FR&quot;)\n      Try\n         interval = TimeSpan.ParseExact(intervalString, format, \n                                        culture, TimeSpanStyles.AssumeNegative)\n         Console.WriteLine(&quot;&#39;{0}&#39; ({1}) --&gt; {2}&quot;, intervalString, format, interval)\n      Catch e As FormatException\n         Console.WriteLine(&quot;&#39;{0}&#39;: Bad Format for &#39;{1}&#39;&quot;, intervalString, format)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;&#39;{0}&#39;: Overflow&quot;, intervalString)\n      End Try \n\n      &#39; Parse a single number using the &quot;c&quot; standard format string. \n      intervalString = &quot;12&quot;\n      format = &quot;c&quot;\n      Try\n         interval = TimeSpan.ParseExact(intervalString, format, \n                                        Nothing, TimeSpanStyles.AssumeNegative)\n         Console.WriteLine(&quot;&#39;{0}&#39; ({1}) --&gt; {2}&quot;, intervalString, format, interval)\n      Catch e As FormatException\n         Console.WriteLine(&quot;&#39;{0}&#39;: Bad Format for &#39;{1}&#39;&quot;, intervalString, format)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;&#39;{0}&#39;: Overflow&quot;, intervalString)\n      End Try \n      \n      &#39; Parse a single number using the &quot;%h&quot; custom format string. \n      format = &quot;%h&quot;\n      Try\n         interval = TimeSpan.ParseExact(intervalString, format, \n                                        Nothing, TimeSpanStyles.AssumeNegative)\n         Console.WriteLine(&quot;&#39;{0}&#39; ({1}) --&gt; {2}&quot;, intervalString, format, interval)\n      Catch e As FormatException\n         Console.WriteLine(&quot;&#39;{0}&#39;: Bad Format for &#39;{1}&#39;&quot;, intervalString, format)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;&#39;{0}&#39;: Overflow&quot;, intervalString)\n      End Try \n      \n      &#39; Parse a single number using the &quot;%s&quot; custom format string. \n      format = &quot;%s&quot;\n      Try\n         interval = TimeSpan.ParseExact(intervalString, format, \n                                        Nothing, TimeSpanStyles.AssumeNegative)\n         Console.WriteLine(&quot;&#39;{0}&#39; ({1}) --&gt; {2}&quot;, intervalString, format, interval)\n      Catch e As FormatException\n         Console.WriteLine(&quot;&#39;{0}&#39;: Bad Format for &#39;{1}&#39;&quot;, intervalString, format)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;&#39;{0}&#39;: Overflow&quot;, intervalString)\n      End Try \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    &#39;17:14&#39; (h\\:mm) --&gt; -17:14:00\n&#39;    &#39;17:14:48&#39; (g) --&gt; 17:14:48\n&#39;    &#39;17:14:48.153&#39; (h\\:mm\\:ss\\.fff) --&gt; -17:14:48.1530000\n&#39;    &#39;3:17:14:48.153&#39; (G) --&gt; 3.17:14:48.1530000\n&#39;    &#39;3:17:14:48.153&#39; (d\\:hh\\:mm\\:ss\\.fff) --&gt; -3.17:14:48.1530000\n&#39;    &#39;3:17:14:48,153&#39; (G) --&gt; 3.17:14:48.1530000\n&#39;    &#39;12&#39; (c) --&gt; 12.00:00:00\n&#39;    &#39;12&#39; (%h) --&gt; -12:00:00\n&#39;    &#39;12&#39; (%s) --&gt; -00:00:12\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_ParseExact_System_String_System_String___System_IFormatProvider_System_Globalization_TimeSpanStyles_\">\r\n    \r\n            <a id=\"System_TimeSpan_ParseExact_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ParseExact(String,String[],IFormatProvider,TimeSpanStyles)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a time interval to its <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> equivalent by using the specified formats, culture-specific format information, and styles. The format of the string representation must match one of the specified formats exactly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TimeSpan ParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>input</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that specifies the time interval to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>formats</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A array of standard or custom format strings that define the required format of <code>input</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>formatProvider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that provides culture-specific formatting information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>styles</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.timespanstyles\" data-linktype=\"relative-path\">TimeSpanStyles</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of enumeration values that defines the style elements that may be present in input.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </div>\r\n                  <p>A time interval that corresponds to <code>input</code>, as specified by <code>formats</code>, <code>formatProvider</code>, and <code>styles</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>styles</code> is an invalid <a class=\"xref\" href=\"system.globalization.timespanstyles\" data-linktype=\"relative-path\">TimeSpanStyles</a> value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>input</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>input</code> has an invalid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>input</code> represents a number that is less than <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> or greater than <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.  </p>\n<p> -or-  </p>\n<p> At least one of the days, hours, minutes, or seconds components in <code>input</code> is outside its valid range.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ParseExact method parses the string representation of a time interval, which must be in one of the formats defined by the <code>formats</code> parameter, except that leading and trailing white-space characters are ignored. Because <code>input</code> must exactly conform to one of the formats specified in <code>formats</code>, you should always use exception handling when converting a string input by the user to a time interval. If you prefer not to use exception handling, you can call the [TryParseExact(String,â€‚String&lt;xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%2CSystem.TimeSpan%40%29&gt; method instead.  </p>\n<p> The <code>formats</code> parameter is a string array whose elements consist of either a single standard format specifier, or one or more custom format specifiers that define the required format of <code>input</code>. For more information about valid format strings, see <a href=\"../Topic/Standard%20TimeSpan%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard TimeSpan Format Strings</a> and <a href=\"../Topic/Custom%20TimeSpan%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom TimeSpan Format Strings</a>. <code>input</code> must correspond exactly to a member of <code>formats</code> for the parse operation to succeed. The parse operation attempts to match <code>input</code> to each element in <code>formats</code> starting with the first element in the array.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> The <a class=\"xref\" href=\"system.timespan#System_TimeSpan_ParseExact_\" data-linktype=\"relative-path\">ParseExact</a> method uses the conventions of the culture specified by the <code>formatProvider</code> parameter only if the format string used to parse <code>input</code> is a standard <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> format string whose value is either &quot;g&quot; or &quot;G&quot;. The &quot;c&quot;, &quot;t&quot;, and &quot;T&quot; standard format strings use the formatting conventions of the invariant culture. Custom format strings define the precise format of the input string and use literal characters to separate the components of a time interval.  </p>\n</div>\n<p> The <code>formatProvider</code> parameter is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation that provides culture-specific information about the format of the returned string if the format string used to parse <code>input</code> is a standard format string. The <code>formatProvider</code> parameter can be any of the following:  </p>\n<ul>\n<li><p>A <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the culture whose formatting conventions are to be reflected in the returned string. The <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> property defines the formatting of the returned string.  </p>\n</li>\n<li><p>A <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that defines the formatting of the returned string.  </p>\n</li>\n<li><p>A custom object that implements the <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> interface. Its <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns a <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that provides formatting information.  </p>\n<p>If <code>formatProvider</code> is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that is associated with the current culture is used.  </p>\n<p>The <code>styles</code> parameter affects the interpretation of strings that are parsed using custom format strings. It determines whether <code>input</code> is interpreted as a negative time interval only if a negative sign is present (<a class=\"xref\" href=\"system.globalization.timespanstyles\" data-linktype=\"relative-path\">System.Globalization.TimeSpanStyles</a>), or whether it is always interpreted as a negative time interval (<a class=\"xref\" href=\"system.globalization.timespanstyles\" data-linktype=\"relative-path\">System.Globalization.TimeSpanStyles</a>). If <a class=\"xref\" href=\"system.globalization.timespanstyles\" data-linktype=\"relative-path\">System.Globalization.TimeSpanStyles</a> is not used, <code>format</code> must include a literal negative sign symbol (such as &quot;\\-&quot;) to successfully parse a negative time interval.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls the ParseExact method to convert each element of a string array to a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value. The strings can represent a time interval in either the general short format or the general long format.  </p>\n<p> In addition, the example changes the way in which the time interval parsing methods interpret a single digit. Ordinarily, a single digit is interpreted as the number of days in a time interval. Instead, the <code>%h</code> custom format string is used to interpret a single digit as the number of hours. For this change to be effective, note that the <code>%h</code> custom format string must precede the other format strings in the <code>formats</code> array. Also note from the output that the <a class=\"xref\" href=\"system.globalization.timespanstyles\" data-linktype=\"relative-path\">System.Globalization.TimeSpanStyles</a> flag specified in the method call is used only when parsing a string with this format specifier.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeSpan.ParseExact#4\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] inputs = { &quot;3&quot;, &quot;16:42&quot;, &quot;1:6:52:35.0625&quot;, \n                          &quot;1:6:52:35,0625&quot; }; \n      string[] formats = { &quot;%h&quot;, &quot;g&quot;, &quot;G&quot; };\n      TimeSpan interval;\n      CultureInfo culture = new CultureInfo(&quot;de-DE&quot;);\n      \n      // Parse each string in inputs using formats and the de-DE culture.\n      foreach (string input in inputs) {\n         try {\n            interval = TimeSpan.ParseExact(input, formats, culture,\n                                           TimeSpanStyles.AssumeNegative);\n            Console.WriteLine(&quot;{0} --&gt; {1:c}&quot;, input, interval);\n         }\n         catch (FormatException) {\n            Console.WriteLine(&quot;{0} --&gt; Bad Format&quot;, input);\n         }      \n         catch (OverflowException) {\n            Console.WriteLine(&quot;{0} --&gt; Overflow&quot;, input);   \n         }            \n      }\n   }\n}\n// The example displays the following output:\n//       3 --&gt; -03:00:00\n//       16:42 --&gt; 16:42:00\n//       1:6:52:35.0625 --&gt; Bad Format\n//       1:6:52:35,0625 --&gt; 1.06:52:35.0625000\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.ParseExact#4\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim inputs() As String = { &quot;3&quot;, &quot;16:42&quot;, &quot;1:6:52:35.0625&quot;, \n                                 &quot;1:6:52:35,0625&quot; } \n      Dim formats() As String = { &quot;%h&quot;, &quot;g&quot;, &quot;G&quot; }\n      Dim interval As TimeSpan\n      Dim culture As New CultureInfo(&quot;de-DE&quot;)\n      \n      &#39; Parse each string in inputs using formats and the de-DE culture.\n      For Each input As String In inputs\n         Try\n            interval = TimeSpan.ParseExact(input, formats, culture, \n                                           TimeSpanStyles.AssumeNegative)\n            Console.WriteLine(&quot;{0} --&gt; {1:c}&quot;, input, interval)   \n         Catch e As FormatException\n            Console.WriteLine(&quot;{0} --&gt; Bad Format&quot;, input)   \n         Catch e As OverflowException\n            Console.WriteLine(&quot;{0} --&gt; Overflow&quot;, input)   \n         End Try            \n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       3 --&gt; -03:00:00\n&#39;       16:42 --&gt; 16:42:00\n&#39;       1:6:52:35.0625 --&gt; Bad Format\n&#39;       1:6:52:35,0625 --&gt; 1.06:52:35.0625000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_Subtract_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_TimeSpan_Subtract_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Subtract(TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a new <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object whose value is the difference between the specified <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object and this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TimeSpan Subtract (TimeSpan ts);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ts</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The time interval to be subtracted.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </div>\r\n                  <p>A new time interval whose value is the result of the value of this instance minus the value of <code>ts</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The return value is less than <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> or greater than <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value must be between <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">System.TimeSpan</a> and <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">System.TimeSpan</a>; otherwise, an exception is thrown.  </p>\n<p> The return value is a new <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>; the original <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> is not modified.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the Subtract method to calculate the difference between a single <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value and each of the time intervals in an array. Note that, because <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> format strings do not include negative signs in the result string, the example uses conditional logic to include a negative sign with negative time intervals.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeSpan.Subtract#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      TimeSpan baseTimeSpan = new TimeSpan(1, 12, 15, 16);\n      // Create an array of timespan intervals.\n      TimeSpan[] intervals = { TimeSpan.FromDays(1.5), \n                               TimeSpan.FromHours(1.5), \n                               TimeSpan.FromMinutes(45), \n                               TimeSpan.FromMilliseconds(505),\n                               new TimeSpan(1, 17, 32, 20), \n                               new TimeSpan(-8, 30, 0) };\n      // Calculate a new time interval by adding each element to the base interval.\n      foreach (var interval in intervals)\n         Console.WriteLine(@&quot;{0,-10:g} - {3}{1,15:%d\\:hh\\:mm\\:ss\\.ffff} = {4}{2:%d\\:hh\\:mm\\:ss\\.ffff}&quot;,\n                           baseTimeSpan, interval, baseTimeSpan.Subtract(interval),\n                           interval &lt; TimeSpan.Zero ? &quot;-&quot; : &quot;&quot;,\n                           baseTimeSpan &lt; interval.Duration() ? &quot;-&quot; : &quot;&quot;);\n   }\n}\n// The example displays the following output:\n//       1:12:15:16 - 1:12:00:00.0000 = 0:00:15:16.0000\n//       1:12:15:16 - 0:01:30:00.0000 = 1:10:45:16.0000\n//       1:12:15:16 - 0:00:45:00.0000 = 1:11:30:16.0000\n//       1:12:15:16 - 0:00:00:00.5050 = 1:12:15:15.4950\n//       1:12:15:16 - 1:17:32:20.0000 = -0:05:17:04.0000\n//       1:12:15:16 - -0:07:30:00.0000 = 1:19:45:16.0000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_ToString\">\r\n    \r\n            <a id=\"System_TimeSpan_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object to its equivalent string representation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned string is formatted with the &quot;c&quot; format specifier and has the following format:  </p>\n<p> [-][<em>d</em>.]<em>hh</em>:<em>mm</em>:<em>ss</em>[.<em>fffffff</em>]  </p>\n<p> Elements in square brackets ([ and ]) may not be included in the returned string. Colons and periods (: and.) are literal characters. The non-literal elements are listed in the following table. Note that the string returned by the ToString method is not culture-sensitive.  </p>\n<table>\n<thead>\n<tr>\n<th>Item</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&quot;-&quot;</td>\n<td>A minus sign, which indicates a negative time interval. No sign is included for a positive time span.</td>\n</tr>\n<tr>\n<td>&quot;<em>d</em>&quot;</td>\n<td>The number of days in the time interval. This element is omitted if the time interval is less than one day.</td>\n</tr>\n<tr>\n<td>&quot;<em>hh</em>&quot;</td>\n<td>The number of hours in the time interval, ranging from 0 to 23.</td>\n</tr>\n<tr>\n<td>&quot;<em>mm</em>&quot;</td>\n<td>The number of minutes in the time interval, ranging from 0 to 59.</td>\n</tr>\n<tr>\n<td>&quot;<em>ss</em>&quot;</td>\n<td>The number of seconds in the time interval, ranging from 0 to 59.</td>\n</tr>\n<tr>\n<td>&quot;<em>fffffff</em>&quot;</td>\n<td>Fractional seconds in the time interval. This element is omitted if the time interval does not include fractional seconds. If present, fractional seconds are always expressed using seven decimal digits.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"NOTE\"><h5>Note</h5><p> For more information about comparing the string representation of <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> and Oracle data types, see Knowledge Base article <a href=\"http://go.microsoft.com/fwlink/?LinkId=161146\" data-linktype=\"external\">324577: System.TimeSpan Does Not Match Oracle 9i INTERVAL DAY TO SECOND Data Type</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the strings returned by calling the ToString method with a number of <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> values. Note that although the example does not call the ToString method directly, it is called by the <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method when it attempts to convert a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value to its string representation.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeSpan.ToString#1\">using System;\n\npublic class ToString\n{\n   public static void Main()\n   {\n      TimeSpan span;\n      \n      // Initialize a time span to zero.\n      span = TimeSpan.Zero;\n      Console.WriteLine(span);\n\n      // Initialize a time span to 14 days.\n      span = new TimeSpan(-14, 0, 0, 0, 0);\n      Console.WriteLine(span);\n     \n      // Initialize a time span to 1:02:03.\n      span = new TimeSpan(1, 2, 3);\n      Console.WriteLine(span);\n      \n      \n      // Initialize a time span to 250 milliseconds.\n      span = new TimeSpan(0, 0, 0, 0, 250);\n      Console.WriteLine(span);\n      \n      // Initalize a time span to 99 days, 23 hours, 59 minutes, and 59.999 seconds.\n      span = new TimeSpan(99, 23, 59, 59, 999);\n      Console.WriteLine(span);\n      \n      // Initalize a time span to 3 hours.\n      span = new TimeSpan(3, 0, 0);\n      Console.WriteLine(span);\n      \n      // Initalize a timespan to 25 milliseconds.\n      span = new TimeSpan(0, 0, 0, 0, 25);\n      Console.WriteLine(span);\n   }\n}\n// The example displays the following output:\n//       00:00:00\n//       -14.00:00:00\n//       01:02:03\n//       00:00:00.2500000\n//       99.23:59:59.9990000\n//       03:00:00\n//       00:00:00.0250000\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.ToString#1\">Module ToString\n   Public Sub Main()\n      Dim span As TimeSpan\n      \n      &#39; Initialize a time span to zero.\n      span = TimeSpan.Zero\n      Console.WriteLine(span)\n      \n      &#39; Initialize a time span to 14 days.\n      span = New TimeSpan(-14, 0, 0, 0, 0)\n      Console.WriteLine(span)\n     \n      &#39; Initialize a time span to 1:02:03.\n      span = New TimeSpan(1, 2, 3)\n      Console.WriteLine(span)\n      \n      \n      &#39; Initialize a time span to 250 milliseconds.\n      span = New TimeSpan(0, 0, 0, 0, 250)\n      Console.WriteLine(span)\n      \n      &#39; Initalize a time span to 99 days, 23 hours, 59 minutes, and 59.9999999 seconds.\n      span = New TimeSpan(99, 23, 59, 59, 999)\n      Console.WriteLine(span)\n      \n      &#39; Initalize a time span to 3 hours.\n      span = New TimeSpan(3, 0, 0)\n      Console.WriteLine(span)\n      \n      &#39; Initalize a timespan to 25 milliseconds.\n      span = New TimeSpan(0, 0, 0, 0, 25)\n      Console.WriteLine(span)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       00:00:00\n&#39;       -14.00:00:00\n&#39;       01:02:03\n&#39;       00:00:00.2500000\n&#39;       99.23:59:59.9990000\n&#39;       03:00:00\n&#39;       00:00:00.0250000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_ToString_System_String_\">\r\n    \r\n            <a id=\"System_TimeSpan_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object to its equivalent string representation by using the specified format.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToString (string format);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A standard or custom <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> format string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value in the format specified by the <code>format</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The <code>format</code> parameter is not recognized or is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>format</code> parameter can be any valid standard or custom format specifier for <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> values. If <code>format</code> is equal to <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a> or is <code>null</code>, the return value of the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object is formatted with the common format specifier (&quot;c&quot;). If <code>format</code> is any other value, the method throws a <a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a>.  </p>\n<p> If <code>format</code> is a standard format string, the format of the returned string is defined by the formatting conventions of the current culture.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> The custom format strings for <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> values do not include a date or time separator. If you want to include these elements in your format string, you must treat them as character literals. See the example for an illustration, and see the <a href=\"../Topic/Custom%20TimeSpan%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom TimeSpan Format Strings</a> topic for more information.  </p>\n</div>\n<p> The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  </p>\n<ul>\n<li><p>For more information about format strings for <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> values, see <a href=\"../Topic/Standard%20TimeSpan%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard TimeSpan Format Strings</a> and <a href=\"../Topic/Custom%20TimeSpan%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom TimeSpan Format Strings</a>.  </p>\n</li>\n<li><p>For more information about support for formatting in the .NET Framework, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses standard and custom <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> format strings to display the string representation of each element in an array of <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> values  </p>\n<pre><code class=\"lang-vb\" name=\"System.TimeSpan.ToString#3\">Module Example\n   Public Sub Main()\n      Dim spans() As TimeSpan = { TimeSpan.Zero, New TimeSpan(-14, 0, 0, 0, 0), \n                                  New TimeSpan(1, 2, 3), \n                                  New TimeSpan(0, 0, 0, 0, 250), \n                                  New TimeSpan(99, 23, 59, 59, 999),\n                                  New TimeSpan(3, 0, 0), \n                                  New TimeSpan(0, 0, 0, 0, 25) }\n      Dim fmts() As String = { &quot;c&quot;, &quot;g&quot;, &quot;G&quot;, &quot;hh\\:mm\\:ss&quot;, &quot;%m&#39; min.&#39;&quot; }\n      For Each span As TimeSpan In spans\n         For Each fmt As String In fmts\n            Console.WriteLine(&quot;{0}: {1}&quot;, fmt, span.ToString(fmt))\n         Next\n         Console.WriteLine()         \n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       c: 00:00:00\n&#39;       g: 0:00:00\n&#39;       G: 0:00:00:00.0000000\n&#39;       hh\\:mm\\:ss: 00:00:00\n&#39;       %m&#39; min.&#39;: 0 min.\n&#39;       \n&#39;       c: -14.00:00:00\n&#39;       g: -14:0:00:00\n&#39;       G: -14:00:00:00.0000000\n&#39;       hh\\:mm\\:ss: 00:00:00\n&#39;       %m&#39; min.&#39;: 0 min.\n&#39;       \n&#39;       c: 01:02:03\n&#39;       g: 1:02:03\n&#39;       G: 0:01:02:03.0000000\n&#39;       hh\\:mm\\:ss: 01:02:03\n&#39;       %m&#39; min.&#39;: 2 min.\n&#39;       \n&#39;       c: 00:00:00.2500000\n&#39;       g: 0:00:00.25\n&#39;       G: 0:00:00:00.2500000\n&#39;       hh\\:mm\\:ss: 00:00:00\n&#39;       %m&#39; min.&#39;: 0 min.\n&#39;       \n&#39;       c: 99.23:59:59.9990000\n&#39;       g: 99:23:59:59.999\n&#39;       G: 99:23:59:59.9990000\n&#39;       hh\\:mm\\:ss: 23:59:59\n&#39;       %m&#39; min.&#39;: 59 min.\n&#39;       \n&#39;       c: 03:00:00\n&#39;       g: 3:00:00\n&#39;       G: 0:03:00:00.0000000\n&#39;       hh\\:mm\\:ss: 03:00:00\n&#39;       %m&#39; min.&#39;: 0 min.\n&#39;       \n&#39;       c: 00:00:00.0250000\n&#39;       g: 0:00:00.025\n&#39;       G: 0:00:00:00.0250000\n&#39;       hh\\:mm\\:ss: 00:00:00\n&#39;       %m&#39; min.&#39;: 0 min.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.ToString#3\">using System;\n\npublic class Class1\n{\n   public static void Main()\n   {\n      TimeSpan[] spans = { TimeSpan.Zero, new TimeSpan(-14, 0, 0, 0, 0), \n                           new TimeSpan(1, 2, 3), \n                           new TimeSpan(0, 0, 0, 0, 250), \n                           new TimeSpan(99, 23, 59, 59, 999),\n                           new TimeSpan(3, 0, 0), \n                           new TimeSpan(0, 0, 0, 0, 25) };\n      string[] fmts = { &quot;c&quot;, &quot;g&quot;, &quot;G&quot;, @&quot;hh\\:mm\\:ss&quot;, &quot;%m&#39; min.&#39;&quot; };\n      foreach (TimeSpan span in spans)\n      {\n         foreach (string fmt in fmts)\n            Console.WriteLine(&quot;{0}: {1}&quot;, fmt, span.ToString(fmt));\n\n         Console.WriteLine();\n      }\n   }\n}\n// The example displays the following output:\n//       c: 00:00:00\n//       g: 0:00:00\n//       G: 0:00:00:00.0000000\n//       hh\\:mm\\:ss: 00:00:00\n//       %m&#39; min.&#39;: 0 min.\n//       \n//       c: -14.00:00:00\n//       g: -14:0:00:00\n//       G: -14:00:00:00.0000000\n//       hh\\:mm\\:ss: 00:00:00\n//       %m&#39; min.&#39;: 0 min.\n//       \n//       c: 01:02:03\n//       g: 1:02:03\n//       G: 0:01:02:03.0000000\n//       hh\\:mm\\:ss: 01:02:03\n//       %m&#39; min.&#39;: 2 min.\n//       \n//       c: 00:00:00.2500000\n//       g: 0:00:00.25\n//       G: 0:00:00:00.2500000\n//       hh\\:mm\\:ss: 00:00:00\n//       %m&#39; min.&#39;: 0 min.\n//       \n//       c: 99.23:59:59.9990000\n//       g: 99:23:59:59.999\n//       G: 99:23:59:59.9990000\n//       hh\\:mm\\:ss: 23:59:59\n//       %m&#39; min.&#39;: 59 min.\n//       \n//       c: 03:00:00\n//       g: 3:00:00\n//       G: 0:03:00:00.0000000\n//       hh\\:mm\\:ss: 03:00:00\n//       %m&#39; min.&#39;: 0 min.\n//       \n//       c: 00:00:00.0250000\n//       g: 0:00:00.025\n//       G: 0:00:00:00.0250000\n//       hh\\:mm\\:ss: 00:00:00\n//       %m&#39; min.&#39;: 0 min.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_ToString_System_String_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_TimeSpan_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(String,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object to its equivalent string representation by using the specified format and culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToString (string format, IFormatProvider formatProvider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A standard or custom <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> format string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>formatProvider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value, as specified by <code>format</code> and <code>formatProvider</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The <code>format</code> parameter is not recognized or is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>format</code> parameter can be any valid standard or custom format specifier for <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> values. If <code>format</code> is equal to <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a> or is <code>null</code>, the return value of the current <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object is formatted with the common format specifier (&quot;c&quot;). If format is any other value, the method throws a <a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a>.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> The custom format strings for <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> values do not include a date or time separator. If you want to include these elements in your format string, you must treat them as character literals. See the example for an illustration, and see the <a href=\"../Topic/Custom%20TimeSpan%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom TimeSpan Format Strings</a> topic for more information.  </p>\n</div>\n<p> The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  </p>\n<ul>\n<li><p>For more information about format strings for <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> values, see <a href=\"../Topic/Standard%20TimeSpan%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard TimeSpan Format Strings</a> and <a href=\"../Topic/Custom%20TimeSpan%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom TimeSpan Format Strings</a>.  </p>\n</li>\n<li><p>For more information about support for formatting in the .NET Framework, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>.  </p>\n<p>The <code>formatProvider</code> parameter is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation that provides culture-specific information about the format of the returned string. The <code>formatProvider</code> parameter can be any of the following:  </p>\n</li>\n<li><p>A <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the culture whose formatting conventions are to be reflected in the returned string. The <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object retuned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> property defines the formatting of the returned string.  </p>\n</li>\n<li><p>A <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that defines the formatting of the returned string.  </p>\n</li>\n<li><p>A custom object that implements the <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> interface. Its <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns a <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that provides formatting information.  </p>\n<p>If <code>formatProvider</code> is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that is associated with the current culture is used. If <code>format</code> is a custom format string, the <code>formatProvider</code> parameter is ignored.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls the ToString method to format two time intervals. The example calls the method twice for each format string, first to display it using the conventions of the en-US culture and then to display it using the conventions of the fr-FR culture.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeSpan.ToString#4\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      TimeSpan[] intervals = { new TimeSpan(38, 30, 15), \n                               new TimeSpan(16, 14, 30) }; \n      CultureInfo[] cultures = { new CultureInfo(&quot;en-US&quot;), \n                                 new CultureInfo(&quot;fr-FR&quot;) };\n      string[] formats = {&quot;c&quot;, &quot;g&quot;, &quot;G&quot;, @&quot;hh\\:mm\\:ss&quot; };\n      Console.WriteLine(&quot;{0,12}      Format  {1,22}  {2,22}<br>&quot;, \n                        &quot;Interval&quot;, cultures[0].Name, cultures[1].Name);\n\n      foreach (var interval in intervals) {\n         foreach (var fmt in formats)\n            Console.WriteLine(&quot;{0,12}  {1,10}  {2,22}  {3,22}&quot;, \n                              interval, fmt, \n                              interval.ToString(fmt, cultures[0]), \n                              interval.ToString(fmt, cultures[1]));\n         Console.WriteLine();\n      }  \n   }\n}\n// The example displays the following output:\n//        Interval      Format                   en-US                   fr-FR\n//    \n//      1.14:30:15           c              1.14:30:15              1.14:30:15\n//      1.14:30:15           g              1:14:30:15              1:14:30:15\n//      1.14:30:15           G      1:14:30:15.0000000      1:14:30:15,0000000\n//      1.14:30:15  hh\\:mm\\:ss                14:30:15                14:30:15\n//    \n//        16:14:30           c                16:14:30                16:14:30\n//        16:14:30           g                16:14:30                16:14:30\n//        16:14:30           G      0:16:14:30.0000000      0:16:14:30,0000000\n//        16:14:30  hh\\:mm\\:ss                16:14:30                16:14:30\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.ToString#4\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim intervals() As TimeSpan = { New TimeSpan(38, 30, 15), \n                                      New TimeSpan(16, 14, 30) } \n      Dim cultures() As CultureInfo = { New CultureInfo(&quot;en-US&quot;), \n                                        New CultureInfo(&quot;fr-FR&quot;) }\n      Dim formats() As String = {&quot;c&quot;, &quot;g&quot;, &quot;G&quot;, &quot;hh\\:mm\\:ss&quot; }\n      Console.WriteLine(&quot;{0,12}      Format  {1,22}  {2,22}&quot;, \n                        &quot;Interval&quot;, cultures(0).Name, cultures(1).Name)\n      Console.WriteLine()\n      For Each interval In intervals\n         For Each fmt In formats\n            Console.WriteLine(&quot;{0,12}  {1,10}  {2,22}  {3,22}&quot;, \n                              interval, fmt, \n                              interval.ToString(fmt, cultures(0)), \n                              interval.ToString(fmt, cultures(1)))\n         Next\n         Console.WriteLine()\n      Next                                                                                                                                            \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;        Interval      Format                   en-US                   fr-FR\n&#39;    \n&#39;      1.14:30:15           c              1.14:30:15              1.14:30:15\n&#39;      1.14:30:15           g              1:14:30:15              1:14:30:15\n&#39;      1.14:30:15           G      1:14:30:15.0000000      1:14:30:15,0000000\n&#39;      1.14:30:15  hh\\:mm\\:ss                14:30:15                14:30:15\n&#39;    \n&#39;        16:14:30           c                16:14:30                16:14:30\n&#39;        16:14:30           g                16:14:30                16:14:30\n&#39;        16:14:30           G      0:16:14:30.0000000      0:16:14:30,0000000\n&#39;        16:14:30  hh\\:mm\\:ss                16:14:30                16:14:30\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_TryParse_System_String_System_TimeSpan__\">\r\n    \r\n            <a id=\"System_TimeSpan_TryParse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryParse(String,TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a time interval to its <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> equivalent and returns a value that indicates whether the conversion succeeded.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool TryParse (string s, out TimeSpan result);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that specifies the time interval to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>result</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains an object that represents the time interval specified by <code>s</code>, or <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> if the conversion failed. This parameter is passed uninitialized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>s</code> was converted successfully; otherwise, <code>false</code>. This operation returns <code>false</code> if the <code>s</code> parameter is <code>null</code> or <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>, has an invalid format, represents a time interval that is less than <a class=\"xref\" href=\"system.timespan#System_TimeSpan_MinValue\" data-linktype=\"relative-path\">MinValue</a> or greater than <a class=\"xref\" href=\"system.timespan#System_TimeSpan_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>, or has at least one days, hours, minutes, or seconds component outside its valid range.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The TryParse method is like the <a class=\"xref\" href=\"system.timespan#System_TimeSpan_Parse_System_String_\" data-linktype=\"relative-path\">System.TimeSpan.Parse(String)</a> method, except that it does not throw an exception if the conversion fails.  </p>\n<p> The <code>s</code> parameter contains a time interval specification in the form:  </p>\n<p> [<em>ws</em>][-]{ <em>d</em> &#124; <em>d</em>.<em>hh</em>:<em>mm</em>[:<em>ss</em>[.<em>ff</em>]] &#124; <em>hh</em>:<em>mm</em>[:<em>ss</em>[.<em>ff</em>]] }[<em>ws</em>]  </p>\n<p> Elements in square brackets ([ and ]) are optional. One selection from the list of alternatives enclosed in braces ({ and }) and separated by vertical bars (&#124;) is required. The following table describes each element.  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>ws</em></td>\n<td>Optional white space.</td>\n</tr>\n<tr>\n<td>-</td>\n<td>An optional minus sign, which indicates a negative <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.</td>\n</tr>\n<tr>\n<td><em>d</em></td>\n<td>Days, ranging from 0 to 10675199.</td>\n</tr>\n<tr>\n<td>.</td>\n<td>A culture-sensitive symbol that separates days from hours. The invariant format uses a period (&quot;.&quot;) character.</td>\n</tr>\n<tr>\n<td><em>hh</em></td>\n<td>Hours, ranging from 0 to 23.</td>\n</tr>\n<tr>\n<td>:</td>\n<td>The culture-sensitive time separator symbol. The invariant format uses a colon (&quot;:&quot;) character.</td>\n</tr>\n<tr>\n<td><em>mm</em></td>\n<td>Minutes, ranging from 0 to 59.</td>\n</tr>\n<tr>\n<td><em>ss</em></td>\n<td>Optional seconds, ranging from 0 to 59.</td>\n</tr>\n<tr>\n<td>.</td>\n<td>A culture-sensitive symbol that separates seconds from fractions of a second. The invariant format uses a period (&quot;.&quot;) character.</td>\n</tr>\n<tr>\n<td><em>ff</em></td>\n<td>Optional fractional seconds, consisting of one to seven decimal digits.</td>\n</tr>\n</tbody>\n</table>\n<p> The components of <code>s</code> must collectively specify a time interval that is greater than or equal to <a class=\"xref\" href=\"system.timespan#System_TimeSpan_MinValue\" data-linktype=\"relative-path\">System.TimeSpan.MinValue</a> and less than or equal to <a class=\"xref\" href=\"system.timespan#System_TimeSpan_MaxValue\" data-linktype=\"relative-path\">System.TimeSpan.MaxValue</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.timespan#System_TimeSpan_Parse_System_String_\" data-linktype=\"relative-path\">Parse(String)</a> method tries to parse <code>s</code> by using each of the culture-specific formats for the current culture.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the TryParse method to create <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> objects from valid <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> strings and to indicate when the parse operation has failed because the time span string is invalid.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeSpan.TryParse#1\">using System;\n\npublic class TryParse\n{\n   private static void ParseTimeSpan(string intervalStr)\n   {\n      // Write the first part of the output line.\n      Console.Write( &quot;{0,20}   &quot;, intervalStr );\n\n      // Parse the parameter, and then convert it back to a string.\n      TimeSpan intervalVal; \n      if (TimeSpan.TryParse(intervalStr, out intervalVal)) \n      {\n         string intervalToStr = intervalVal.ToString();\n  \n         // Pad the end of the TimeSpan string with spaces if it \n         // does not contain milliseconds.\n         int pIndex = intervalToStr.IndexOf(&#39;:&#39;);\n         pIndex = intervalToStr.IndexOf(&#39;.&#39;, pIndex);\n         if (pIndex &lt; 0)\n            intervalToStr += &quot;        &quot;;\n   \n         Console.WriteLine(&quot;{0,21}&quot;, intervalToStr);\n         // Handle failure of TryParse method.\n      }\n      else\n      {\n         Console.WriteLine(&quot;Parse operation failed.&quot;);\n      }\n   } \n   \n   public static void Main()\n   {\n        Console.WriteLine( &quot;{0,20}   {1,21}&quot;, \n            &quot;String to Parse&quot;, &quot;TimeSpan&quot; );    \n        Console.WriteLine( &quot;{0,20}   {1,21}&quot;, \n            &quot;---------------&quot;, &quot;---------------------&quot; );    \n\n        ParseTimeSpan(&quot;0&quot;);\n        ParseTimeSpan(&quot;14&quot;);\n        ParseTimeSpan(&quot;1:2:3&quot;);\n        ParseTimeSpan(&quot;0:0:0.250&quot;);\n        ParseTimeSpan(&quot;10.20:30:40.50&quot;);\n        ParseTimeSpan(&quot;99.23:59:59.9999999&quot;);\n        ParseTimeSpan(&quot;0023:0059:0059.0099&quot;);\n        ParseTimeSpan(&quot;23:0:0&quot;);\n        ParseTimeSpan(&quot;24:0:0&quot;);\n        ParseTimeSpan(&quot;0:59:0&quot;);\n        ParseTimeSpan(&quot;0:60:0&quot;);\n        ParseTimeSpan(&quot;0:0:59&quot;);\n        ParseTimeSpan(&quot;0:0:60&quot;);\n        ParseTimeSpan(&quot;10:&quot;);\n        ParseTimeSpan(&quot;10:0&quot;);\n        ParseTimeSpan(&quot;:10&quot;);\n        ParseTimeSpan(&quot;0:10&quot;);\n        ParseTimeSpan(&quot;10:20:&quot;);\n        ParseTimeSpan(&quot;10:20:0&quot;);\n        ParseTimeSpan(&quot;.123&quot;);\n        ParseTimeSpan(&quot;0.12:00&quot;);\n        ParseTimeSpan(&quot;10.&quot;);\n        ParseTimeSpan(&quot;10.12&quot;);\n        ParseTimeSpan(&quot;10.12:00&quot;);\n   }\n}\n//            String to Parse                TimeSpan\n//            ---------------   ---------------------\n//                          0        00:00:00\n//                         14     14.00:00:00\n//                      1:2:3        01:02:03\n//                  0:0:0.250        00:00:00.2500000\n//             10.20:30:40.50     10.20:30:40.5000000\n//        99.23:59:59.9999999     99.23:59:59.9999999\n//        0023:0059:0059.0099        23:59:59.0099000\n//                     23:0:0        23:00:00\n//                     24:0:0   Parse operation failed.\n//                     0:59:0        00:59:00\n//                     0:60:0   Parse operation failed.\n//                     0:0:59        00:00:59\n//                     0:0:60   Parse operation failed.\n//                        10:   Parse operation failed.\n//                       10:0        10:00:00\n//                        :10   Parse operation failed.\n//                       0:10        00:10:00\n//                     10:20:   Parse operation failed.\n//                    10:20:0        10:20:00\n//                       .123   Parse operation failed.\n//                    0.12:00        12:00:00\n//                        10.   Parse operation failed.\n//                      10.12   Parse operation failed.\n//                   10.12:00     10.12:00:00\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.TryParse#1\">Module TryParse\n    Sub ParseTimeSpan( intervalStr As String )\n        &#39; Write the first part of the output line.\n        Console.Write( &quot;{0,20}   &quot;, intervalStr )\n\n        &#39; Parse the parameter, and then convert it back to a string.\n         Dim intervalVal As TimeSpan \n         If TimeSpan.TryParse( intervalStr, intervalVal ) Then\n            Dim intervalToStr As String = intervalVal.ToString( )\n   \n            &#39; Pad the end of the TimeSpan string with spaces if it \n            &#39; does not contain milliseconds.\n            Dim pIndex As Integer = intervalToStr.IndexOf( &quot;:&quot;c )\n            pIndex = intervalToStr.IndexOf( &quot;.&quot;c, pIndex )\n            If pIndex &lt; 0 Then   intervalToStr &amp;= &quot;        &quot;\n   \n            Console.WriteLine( &quot;{0,21}&quot;, intervalToStr )\n         &#39; Handle failure of TryParse method.\n         Else\n            Console.WriteLine(&quot;Parse operation failed.&quot;)\n        End If\n    End Sub \n\n    Public Sub Main( )\n        Console.WriteLine( &quot;{0,20}   {1,21}&quot;, _\n            &quot;String to Parse&quot;, &quot;TimeSpan&quot; )    \n        Console.WriteLine( &quot;{0,20}   {1,21}&quot;, _\n            &quot;---------------&quot;, &quot;---------------------&quot; )    \n\n        ParseTimeSpan(&quot;0&quot;)\n        ParseTimeSpan(&quot;14&quot;)\n        ParseTimeSpan(&quot;1:2:3&quot;)\n        ParseTimeSpan(&quot;0:0:0.250&quot;)\n        ParseTimeSpan(&quot;10.20:30:40.50&quot;)\n        ParseTimeSpan(&quot;99.23:59:59.9999999&quot;)\n        ParseTimeSpan(&quot;0023:0059:0059.0099&quot;)\n        ParseTimeSpan(&quot;23:0:0&quot;)\n        ParseTimeSpan(&quot;24:0:0&quot;)\n        ParseTimespan(&quot;0:59:0&quot;)\n        ParseTimeSpan(&quot;0:60:0&quot;)\n        ParseTimespan(&quot;0:0:59&quot;)\n        ParseTimeSpan(&quot;0:0:60&quot;)\n        ParseTimeSpan(&quot;10:&quot;)\n        ParsetimeSpan(&quot;10:0&quot;)\n        ParseTimeSpan(&quot;:10&quot;)\n        ParseTimeSpan(&quot;0:10&quot;)\n        ParseTimeSpan(&quot;10:20:&quot;)\n        ParseTimeSpan(&quot;10:20:0&quot;)\n        ParseTimeSpan(&quot;.123&quot;)\n        ParseTimeSpan(&quot;0.12:00&quot;)\n        ParseTimeSpan(&quot;10.&quot;)\n        ParseTimeSpan(&quot;10.12&quot;)\n        ParseTimeSpan(&quot;10.12:00&quot;)\n    End Sub \nEnd Module \n&#39; This example generates the following output:\n&#39;            String to Parse                TimeSpan\n&#39;            ---------------   ---------------------\n&#39;                          0        00:00:00\n&#39;                         14     14.00:00:00\n&#39;                      1:2:3        01:02:03\n&#39;                  0:0:0.250        00:00:00.2500000\n&#39;             10.20:30:40.50     10.20:30:40.5000000\n&#39;        99.23:59:59.9999999     99.23:59:59.9999999\n&#39;        0023:0059:0059.0099        23:59:59.0099000\n&#39;                     23:0:0        23:00:00\n&#39;                     24:0:0   Parse operation failed.\n&#39;                     0:59:0        00:59:00\n&#39;                     0:60:0   Parse operation failed.\n&#39;                     0:0:59        00:00:59\n&#39;                     0:0:60   Parse operation failed.\n&#39;                        10:   Parse operation failed.\n&#39;                       10:0        10:00:00\n&#39;                        :10   Parse operation failed.\n&#39;                       0:10        00:10:00\n&#39;                     10:20:   Parse operation failed.\n&#39;                    10:20:0        10:20:00\n&#39;                       .123   Parse operation failed.\n&#39;                    0.12:00        12:00:00\n&#39;                        10.   Parse operation failed.\n&#39;                      10.12   Parse operation failed.\n&#39;                   10.12:00     10.12:00:00\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_TryParse_System_String_System_IFormatProvider_System_TimeSpan__\">\r\n    \r\n            <a id=\"System_TimeSpan_TryParse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryParse(String,IFormatProvider,TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a time interval to its <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> equivalent by using the specified culture-specific formatting information, and returns a value that indicates whether the conversion succeeded.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool TryParse (string input, IFormatProvider formatProvider, out TimeSpan result);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>input</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that specifies the time interval to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>formatProvider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>result</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains an object that represents the time interval specified by <code>input</code>, or <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> if the conversion failed. This parameter is passed uninitialized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>input</code> was converted successfully; otherwise, <code>false</code>. This operation returns <code>false</code> if the <code>input</code> parameter is <code>null</code> or <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>, has an invalid format, represents a time interval that is less than <a class=\"xref\" href=\"system.timespan#System_TimeSpan_MinValue\" data-linktype=\"relative-path\">MinValue</a> or greater than <a class=\"xref\" href=\"system.timespan#System_TimeSpan_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>, or has at least one days, hours, minutes, or seconds component outside its valid range.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The TryParse method is like the <a class=\"xref\" href=\"system.timespan#System_TimeSpan_Parse_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">Parse(String,IFormatProvider)</a> method, except that it does not throw an exception if the conversion fails.  </p>\n<p> The <code>input</code> parameter contains a time interval specification in the form:  </p>\n<p> [<em>ws</em>][-]{ <em>d</em> &#124; <em>d</em>.<em>hh</em>:<em>mm</em>[:<em>ss</em>[.<em>ff</em>]] &#124; <em>hh</em>:<em>mm</em>[:<em>ss</em>[.<em>ff</em>]] }[<em>ws</em>]  </p>\n<p> Elements in square brackets ([ and ]) are optional. One selection from the list of alternatives enclosed in braces ({ and }) and separated by vertical bars (&#124;) is required. The following table describes each element.  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>ws</em></td>\n<td>Optional white space.</td>\n</tr>\n<tr>\n<td>-</td>\n<td>An optional minus sign, which indicates a negative <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.</td>\n</tr>\n<tr>\n<td><em>d</em></td>\n<td>Days, ranging from 0 to 10675199.</td>\n</tr>\n<tr>\n<td>.</td>\n<td>A culture-sensitive symbol that separates days from hours. The invariant format uses a period (&quot;.&quot;) character.</td>\n</tr>\n<tr>\n<td><em>hh</em></td>\n<td>Hours, ranging from 0 to 23.</td>\n</tr>\n<tr>\n<td>:</td>\n<td>The culture-sensitive time separator symbol. The invariant format uses a colon (&quot;:&quot;) character.</td>\n</tr>\n<tr>\n<td><em>mm</em></td>\n<td>Minutes, ranging from 0 to 59.</td>\n</tr>\n<tr>\n<td><em>ss</em></td>\n<td>Optional seconds, ranging from 0 to 59.</td>\n</tr>\n<tr>\n<td>.</td>\n<td>A culture-sensitive symbol that separates seconds from fractions of a second. The invariant format uses a period (&quot;.&quot;) character.</td>\n</tr>\n<tr>\n<td><em>ff</em></td>\n<td>Optional fractional seconds, consisting of one to seven decimal digits.</td>\n</tr>\n</tbody>\n</table>\n<p> The components of <code>input</code> must collectively specify a time interval that is greater than or equal to <a class=\"xref\" href=\"system.timespan#System_TimeSpan_MinValue\" data-linktype=\"relative-path\">System.TimeSpan.MinValue</a> and less than or equal to <a class=\"xref\" href=\"system.timespan#System_TimeSpan_MaxValue\" data-linktype=\"relative-path\">System.TimeSpan.MaxValue</a>.  </p>\n<p> The TryParse method tries to parse <code>input</code> by using each of the culture-specific formats for the culture specified by <code>formatProvider</code>.  </p>\n<p> The <code>formatProvider</code> parameter is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation that provides culture-specific information about the format of the returned string. The <code>formatProvider</code> parameter can be any of the following:  </p>\n<ul>\n<li><p>A <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the culture whose formatting conventions are to be reflected in the returned string. The <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> property defines the formatting of the returned string.  </p>\n</li>\n<li><p>A <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that defines the formatting of the returned string.  </p>\n</li>\n<li><p>A custom object that implements the <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> interface. Its <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns a <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that provides formatting information.  </p>\n<p>If <code>formatProvider</code> is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that is associated with the current culture is used.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an array of <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> objects, and uses each object in calls to the TryParse method to parse the elements in a string array. The example illustrates how the conventions of a specific culture influence the formatting operation.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeSpan.TryParse#2\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] values = { &quot;6&quot;, &quot;6:12&quot;, &quot;6:12:14&quot;, &quot;6:12:14:45&quot;, \n                          &quot;6.12:14:45&quot;, &quot;6:12:14:45.3448&quot;, \n                          &quot;6:12:14:45,3448&quot;, &quot;6:34:14:45&quot; };\n      CultureInfo[] cultures = { new CultureInfo(&quot;en-US&quot;), \n                                 new CultureInfo(&quot;ru-RU&quot;),\n                                 CultureInfo.InvariantCulture };\n      \n      string header = String.Format(&quot;{0,-17}&quot;, &quot;String&quot;);\n      foreach (CultureInfo culture in cultures)\n         header += culture.Equals(CultureInfo.InvariantCulture) ? \n                      String.Format(&quot;{0,20}&quot;, &quot;Invariant&quot;) :\n                      String.Format(&quot;{0,20}&quot;, culture.Name);\n\n      Console.WriteLine(header);\n      Console.WriteLine();\n      \n      foreach (string value in values)\n      {\n         Console.Write(&quot;{0,-17}&quot;, value);\n         foreach (CultureInfo culture in cultures)\n         {\n            TimeSpan interval = new TimeSpan();\n            if (TimeSpan.TryParse(value, culture, out interval))\n               Console.Write(&quot;{0,20}&quot;, interval.ToString(&quot;c&quot;));\n            else\n               Console.Write(&quot;{0,20}&quot;, &quot;Unable to Parse&quot;);\n         }\n         Console.WriteLine();                                \n      }\n   }\n}\n// The example displays the following output:\n//    String                          en-US               ru-RU           Invariant\n//    \n//    6                          6.00:00:00          6.00:00:00          6.00:00:00\n//    6:12                         06:12:00            06:12:00            06:12:00\n//    6:12:14                      06:12:14            06:12:14            06:12:14\n//    6:12:14:45                 6.12:14:45          6.12:14:45          6.12:14:45\n//    6.12:14:45                 6.12:14:45          6.12:14:45          6.12:14:45\n//    6:12:14:45.3448    6.12:14:45.3448000     Unable to Parse  6.12:14:45.3448000\n//    6:12:14:45,3448       Unable to Parse  6.12:14:45.3448000     Unable to Parse\n//    6:34:14:45            Unable to Parse     Unable to Parse     Unable to Parse\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.TryParse#2\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim values() As String = { &quot;6&quot;, &quot;6:12&quot;, &quot;6:12:14&quot;, &quot;6:12:14:45&quot;, \n                                 &quot;6.12:14:45&quot;, &quot;6:12:14:45.3448&quot;, \n                                 &quot;6:12:14:45,3448&quot;, &quot;6:34:14:45&quot; }\n      Dim cultures() As CultureInfo = { New CultureInfo(&quot;en-US&quot;), \n                                        New CultureInfo(&quot;ru-RU&quot;),\n                                        CultureInfo.InvariantCulture }\n      \n      Dim header As String = String.Format(&quot;{0,-17}&quot;, &quot;String&quot;)\n      For Each culture As CultureInfo In cultures\n         header += If(culture.Equals(CultureInfo.InvariantCulture), \n                      String.Format(&quot;{0,20}&quot;, &quot;Invariant&quot;),\n                      String.Format(&quot;{0,20}&quot;, culture.Name))\n      Next\n      Console.WriteLine(header)\n      Console.WriteLine()\n      \n      For Each value As String In values\n         Console.Write(&quot;{0,-17}&quot;, value)\n         For Each culture As CultureInfo In cultures\n            Dim interval As New TimeSpan()\n            If TimeSpan.TryParse(value, culture, interval) Then\n               Console.Write(&quot;{0,20}&quot;, interval.ToString(&quot;c&quot;))\n            Else\n               Console.Write(&quot;{0,20}&quot;, &quot;Unable to Parse&quot;)\n            End If     \n         Next\n         Console.WriteLine()                                \n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    String                          en-US               ru-RU           Invariant\n&#39;    \n&#39;    6                          6.00:00:00          6.00:00:00          6.00:00:00\n&#39;    6:12                         06:12:00            06:12:00            06:12:00\n&#39;    6:12:14                      06:12:14            06:12:14            06:12:14\n&#39;    6:12:14:45                 6.12:14:45          6.12:14:45          6.12:14:45\n&#39;    6.12:14:45                 6.12:14:45          6.12:14:45          6.12:14:45\n&#39;    6:12:14:45.3448    6.12:14:45.3448000     Unable to Parse  6.12:14:45.3448000\n&#39;    6:12:14:45,3448       Unable to Parse  6.12:14:45.3448000     Unable to Parse\n&#39;    6:34:14:45            Unable to Parse     Unable to Parse     Unable to Parse\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_TryParseExact_System_String_System_String_System_IFormatProvider_System_TimeSpan__\">\r\n    \r\n            <a id=\"System_TimeSpan_TryParseExact_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryParseExact(String,String,IFormatProvider,TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a time interval to its <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> equivalent by using the specified format and culture-specific format information, and returns a value that indicates whether the conversion succeeded. The format of the string representation must match the specified format exactly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool TryParseExact (string input, string format, IFormatProvider formatProvider, out TimeSpan result);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>input</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that specifies the time interval to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A standard or custom format string that defines the required format of <code>input</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>formatProvider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>result</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains an object that represents the time interval specified by <code>input</code>, or <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> if the conversion failed. This parameter is passed uninitialized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>input</code> was converted successfully; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The TryParseExact method parses the string representation of a time interval, which must be in the format defined by the <code>format</code> parameter, except that leading and trailing white-space characters are ignored. This method is similar to the <a class=\"xref\" href=\"system.timespan#System_TimeSpan_ParseExact_System_String_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">ParseExact(String,String,IFormatProvider)</a> method, except that it does not throw an exception if the conversion fails.  </p>\n<p> The <code>format</code> parameter is a string that contains either a single standard format specifier, or one or more custom format specifiers that define the required format of <code>input</code>. For more information about valid format strings, see <a href=\"../Topic/Standard%20TimeSpan%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard TimeSpan Format Strings</a> and <a href=\"../Topic/Custom%20TimeSpan%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom TimeSpan Format Strings</a>.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> The TryParseExact method uses the conventions of the culture specified by the <code>formatProvider</code> parameter only if <code>format</code> is a standard <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> format string whose value is either &quot;g&quot; or &quot;G&quot;. The &quot;c&quot;, &quot;t&quot;, and &quot;T&quot; standard format strings use the formatting conventions of the invariant culture. Custom format strings define the precise format of the input string and use literal characters to separate the components of a time interval.  </p>\n</div>\n<p> The <code>formatProvider</code> parameter is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation that provides culture-specific information about the format of the returned string if <code>format</code> is a standard format string. The <code>formatProvider</code> parameter can be any of the following:  </p>\n<ul>\n<li><p>A <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the culture whose formatting conventions are to be reflected in the returned string. The <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> property defines the formatting of the returned string.  </p>\n</li>\n<li><p>A <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that defines the formatting of the returned string.  </p>\n</li>\n<li><p>A custom object that implements the <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> interface. Its <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns a <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that provides formatting information.  </p>\n<p>If <code>formatProvider</code> is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that is associated with the current culture is used.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <a class=\"xref\" href=\"system.timespan#System_TimeSpan_TryParseExact_System_String_System_String_System_IFormatProvider_System_Globalization_TimeSpanStyles_System_TimeSpan__\" data-linktype=\"relative-path\">TryParseExact(String,String,IFormatProvider,TimeSpanStyles,TimeSpan)</a> method to parse several string representations of time intervals using various format strings and cultures.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeSpan.TryParseExact#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string intervalString, format;\n      TimeSpan interval;\n      CultureInfo culture;\n      \n      // Parse hour:minute value with &quot;g&quot; specifier current culture.\n      intervalString = &quot;17:14&quot;;\n      format = &quot;g&quot;;\n      culture = CultureInfo.CurrentCulture;\n      if (TimeSpan.TryParseExact(intervalString, format, culture, out interval))\n         Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, intervalString, interval);\n      else\n         Console.WriteLine(&quot;Unable to parse {0}&quot;, intervalString);\n      \n      // Parse hour:minute:second value with &quot;G&quot; specifier.\n      intervalString = &quot;17:14:48&quot;;\n      format = &quot;G&quot;;\n      culture = CultureInfo.InvariantCulture;\n      if (TimeSpan.TryParseExact(intervalString, format, culture, out interval))\n         Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, intervalString, interval);\n      else\n         Console.WriteLine(&quot;Unable to parse {0}&quot;, intervalString);\n      \n      // Parse hours:minute.second value with &quot;G&quot; specifier \n      // and current (en-US) culture.     \n      intervalString = &quot;17:14:48.153&quot;;\n      format = &quot;G&quot;;\n      culture = CultureInfo.CurrentCulture;\n      if (TimeSpan.TryParseExact(intervalString, format, culture, out interval))\n         Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, intervalString, interval);\n      else\n         Console.WriteLine(&quot;Unable to parse {0}&quot;, intervalString);\n\n      // Parse days:hours:minute.second value with &quot;G&quot; specifier \n      // and current (en-US) culture.     \n      intervalString = &quot;3:17:14:48.153&quot;;\n      format = &quot;G&quot;;\n      culture = CultureInfo.CurrentCulture;\n      if (TimeSpan.TryParseExact(intervalString, format, culture, out interval))\n         Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, intervalString, interval);\n      else\n         Console.WriteLine(&quot;Unable to parse {0}&quot;, intervalString);\n            \n      // Parse days:hours:minute.second value with &quot;G&quot; specifier \n      // and fr-FR culture.     \n      intervalString = &quot;3:17:14:48.153&quot;;\n      format = &quot;G&quot;;\n      culture = new CultureInfo(&quot;fr-FR&quot;);\n      if (TimeSpan.TryParseExact(intervalString, format, culture, out interval))\n         Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, intervalString, interval);\n      else\n         Console.WriteLine(&quot;Unable to parse {0}&quot;, intervalString);\n      \n      // Parse days:hours:minute.second value with &quot;G&quot; specifier \n      // and fr-FR culture.     \n      intervalString = &quot;3:17:14:48,153&quot;;\n      format = &quot;G&quot;;\n      if (TimeSpan.TryParseExact(intervalString, format, culture, out interval))\n         Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, intervalString, interval);\n      else\n         Console.WriteLine(&quot;Unable to parse {0}&quot;, intervalString);\n\n      // Parse a single number using the &quot;c&quot; standard format string. \n      intervalString = &quot;12&quot;;\n      format = &quot;c&quot;;\n      if (TimeSpan.TryParseExact(intervalString, format, null, out interval))\n         Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, intervalString, interval);\n      else\n         Console.WriteLine(&quot;Unable to parse {0}&quot;, intervalString);\n      \n      // Parse a single number using the &quot;%h&quot; custom format string. \n      format = &quot;%h&quot;;\n      if (TimeSpan.TryParseExact(intervalString, format, null, out interval))\n         Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, intervalString, interval);\n      else\n         Console.WriteLine(&quot;Unable to parse {0}&quot;, intervalString);\n      \n      // Parse a single number using the &quot;%s&quot; custom format string. \n      format = &quot;%s&quot;;\n      if (TimeSpan.TryParseExact(intervalString, format, null, out interval))\n         Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, intervalString, interval);\n      else\n         Console.WriteLine(&quot;Unable to parse {0}&quot;, intervalString);\n   }\n}\n// The example displays the following output:\n//       &#39;17:14&#39; --&gt; 17:14:00\n//       Unable to parse 17:14:48\n//       Unable to parse 17:14:48.153\n//       &#39;3:17:14:48.153&#39; --&gt; 3.17:14:48.1530000\n//       Unable to parse 3:17:14:48.153\n//       &#39;3:17:14:48,153&#39; --&gt; 3.17:14:48.1530000\n//       &#39;12&#39; --&gt; 12.00:00:00\n//       &#39;12&#39; --&gt; 12:00:00\n//       &#39;12&#39; --&gt; 00:00:12\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.TryParseExact#1\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim intervalString, format As String\n      Dim interval As TimeSpan\n      Dim culture As CultureInfo\n      \n      &#39; Parse hour:minute value with &quot;g&quot; specifier current culture.\n      intervalString = &quot;17:14&quot;\n      format = &quot;g&quot;\n      culture = CultureInfo.CurrentCulture\n      If TimeSpan.TryParseExact(intervalString, format, culture, interval) Then\n         Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, intervalString, interval)\n      Else\n         Console.WriteLine(&quot;Unable to parse {0}&quot;, intervalString)\n      End If\n      \n      &#39; Parse hour:minute:second value with &quot;G&quot; specifier.\n      intervalString = &quot;17:14:48&quot;\n      format = &quot;G&quot;\n      culture = CultureInfo.InvariantCulture\n      If TimeSpan.TryParseExact(intervalString, format, culture, interval) Then\n         Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, intervalString, interval)\n      Else\n         Console.WriteLine(&quot;Unable to parse {0}&quot;, intervalString)\n      End If\n\n      &#39; Parse hours:minute.second value with &quot;G&quot; specifier \n      &#39; and current (en-US) culture.     \n      intervalString = &quot;17:14:48.153&quot;\n      format = &quot;G&quot;\n      culture = CultureInfo.CurrentCulture\n      If TimeSpan.TryParseExact(intervalString, format, culture, interval) Then\n         Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, intervalString, interval)\n      Else\n         Console.WriteLine(&quot;Unable to parse {0}&quot;, intervalString)\n      End If\n\n      &#39; Parse days:hours:minute.second value with &quot;G&quot; specifier \n      &#39; and current (en-US) culture.     \n      intervalString = &quot;3:17:14:48.153&quot;\n      format = &quot;G&quot;\n      culture = CultureInfo.CurrentCulture\n      If TimeSpan.TryParseExact(intervalString, format, culture, interval) Then\n         Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, intervalString, interval)\n      Else\n         Console.WriteLine(&quot;Unable to parse {0}&quot;, intervalString)\n      End If\n            \n      &#39; Parse days:hours:minute.second value with &quot;G&quot; specifier \n      &#39; and fr-FR culture.     \n      intervalString = &quot;3:17:14:48.153&quot;\n      format = &quot;G&quot;\n      culture = New CultureInfo(&quot;fr-FR&quot;)\n      If TimeSpan.TryParseExact(intervalString, format, culture, interval) Then\n         Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, intervalString, interval)\n      Else\n         Console.WriteLine(&quot;Unable to parse {0}&quot;, intervalString)\n      End If\n      \n      &#39; Parse days:hours:minute.second value with &quot;G&quot; specifier \n      &#39; and fr-FR culture.     \n      intervalString = &quot;3:17:14:48,153&quot;\n      format = &quot;G&quot;\n      culture = New CultureInfo(&quot;fr-FR&quot;)\n      If TimeSpan.TryParseExact(intervalString, format, culture, interval) Then\n         Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, intervalString, interval)\n      Else\n         Console.WriteLine(&quot;Unable to parse {0}&quot;, intervalString)\n      End If\n\n      &#39; Parse a single number using the &quot;c&quot; standard format string. \n      intervalString = &quot;12&quot;\n      format = &quot;c&quot;\n      If TimeSpan.TryParseExact(intervalString, format, Nothing, interval)\n         Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, intervalString, interval)\n      Else\n         Console.WriteLine(&quot;Unable to parse {0}&quot;, intervalString)\n      End If\n      \n      &#39; Parse a single number using the &quot;%h&quot; custom format string. \n      format = &quot;%h&quot;\n      If TimeSpan.TryParseExact(intervalString, format, Nothing, interval)\n         Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, intervalString, interval)\n      Else\n         Console.WriteLine(&quot;Unable to parse {0}&quot;, intervalString)\n      End If\n      \n      &#39; Parse a single number using the &quot;%s&quot; custom format string. \n      format = &quot;%s&quot;\n      If TimeSpan.TryParseExact(intervalString, format, Nothing, interval) Then\n         Console.WriteLine(&quot;&#39;{0}&#39; --&gt; {1}&quot;, intervalString, interval)\n      Else\n         Console.WriteLine(&quot;Unable to parse {0}&quot;, intervalString)\n      End If\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       &#39;17:14&#39; --&gt; 17:14:00\n&#39;       Unable to parse 17:14:48\n&#39;       Unable to parse 17:14:48.153\n&#39;       &#39;3:17:14:48.153&#39; --&gt; 3.17:14:48.1530000\n&#39;       Unable to parse 3:17:14:48.153\n&#39;       &#39;3:17:14:48,153&#39; --&gt; 3.17:14:48.1530000\n&#39;       &#39;12&#39; --&gt; 12.00:00:00\n&#39;       &#39;12&#39; --&gt; 12:00:00\n&#39;       &#39;12&#39; --&gt; 00:00:12\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_TryParseExact_System_String_System_String___System_IFormatProvider_System_TimeSpan__\">\r\n    \r\n            <a id=\"System_TimeSpan_TryParseExact_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryParseExact(String,String[],IFormatProvider,TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified string representation of a time interval to its <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> equivalent by using the specified formats and culture-specific format information, and returns a value that indicates whether the conversion succeeded. The format of the string representation must match one of the specified formats exactly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool TryParseExact (string input, string[] formats, IFormatProvider formatProvider, out TimeSpan result);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>input</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that specifies the time interval to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>formats</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A array of standard or custom format strings that define the acceptable formats of <code>input</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>formatProvider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that provides culture-specific formatting information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>result</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains an object that represents the time interval specified by <code>input</code>, or <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> if the conversion failed. This parameter is passed uninitialized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>input</code> was converted successfully; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The TryParseExact method parses the string representation of a time interval, which must be in the format defined by one of the format strings specified by the <code>formats</code> parameter, except that leading and trailing white-space characters are ignored. This method is similar to the [ParseExact(String,â€‚String&lt;xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%29&gt; method, except that it does not throw an exception if the conversion fails.  </p>\n<p> The <code>formats</code> parameter is a string array whose elements consist of either a single standard format specifier, or one or more custom format specifiers that define the required format of <code>input</code>. For more information about valid format strings, see <a href=\"../Topic/Standard%20TimeSpan%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard TimeSpan Format Strings</a> and <a href=\"../Topic/Custom%20TimeSpan%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom TimeSpan Format Strings</a>. <code>input</code> must correspond exactly to a member of <code>formats</code> for the parse operation to succeed. The parse operation attempts to match <code>input</code> to each element in <code>formats</code> starting with the first element in the array.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> The TryParseExact method uses the conventions of the culture specified by the <code>formatProvider</code> parameter only if the format string used to parse <code>input</code> is a standard <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> format string whose value is either &quot;g&quot; or &quot;G&quot;. The &quot;c&quot;, &quot;t&quot;, and &quot;T&quot; standard format strings use the formatting conventions of the invariant culture. Custom format strings define the precise format of the input string and use literal characters to separate the components of a time interval.  </p>\n</div>\n<p> The <code>formatProvider</code> parameter is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation that provides culture-specific information about the format of the returned string if the format string used to parse <code>input</code> is a standard format string. The <code>formatProvider</code> parameter can be any of the following:  </p>\n<ul>\n<li><p>A <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the culture whose formatting conventions are to be reflected in the returned string. The <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> property defines the formatting of the returned string.  </p>\n</li>\n<li><p>A <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that defines the formatting of the returned string.  </p>\n</li>\n<li><p>A custom object that implements the <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> interface. Its <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns a <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that provides formatting information.  </p>\n<p>If <code>formatProvider</code> is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that is associated with the current culture is used.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls the TryParseExact method to convert each element of a string array to a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value. The example interprets the strings by using the formatting conventions of the French - France (&quot;fr-FR&quot;) culture. The strings can represent a time interval in either the general short format or the general long format.  </p>\n<p> In addition, the example changes the way in which the time interval parsing methods interpret a single digit. Ordinarily, a single digit is interpreted as the number of days in a time interval. Instead, the <code>%h</code> custom format string is used to interpret a single digit as the number of hours. For this change to be effective, note that the <code>%h</code> custom format string must precede the other format strings in the <code>formats</code> array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeSpan.TryParseExact#3\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] inputs = { &quot;3&quot;, &quot;16:42&quot;, &quot;1:6:52:35.0625&quot;, \n                          &quot;1:6:52:35,0625&quot; }; \n      string[] formats = { &quot;g&quot;, &quot;G&quot;, &quot;%h&quot;};\n      TimeSpan interval;\n      CultureInfo culture = new CultureInfo(&quot;fr-FR&quot;);\n      \n      // Parse each string in inputs using formats and the fr-FR culture.\n      foreach (string input in inputs) {\n         if(TimeSpan.TryParseExact(input, formats, culture, out interval))\n            Console.WriteLine(&quot;{0} --&gt; {1:c}&quot;, input, interval);\n         else\n            Console.WriteLine(&quot;Unable to parse {0}&quot;, input);   \n      }\n   }\n}\n// The example displays the following output:\n//       3 --&gt; 03:00:00\n//       16:42 --&gt; 16:42:00\n//       Unable to parse 1:6:52:35.0625\n//       1:6:52:35,0625 --&gt; 1.06:52:35.0625000\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.TryParseExact#3\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim inputs() As String = { &quot;3&quot;, &quot;16:42&quot;, &quot;1:6:52:35.0625&quot;, \n                                 &quot;1:6:52:35,0625&quot; } \n      Dim formats() As String = { &quot;%h&quot;, &quot;g&quot;, &quot;G&quot; }\n      Dim interval As TimeSpan\n      Dim culture As New CultureInfo(&quot;fr-FR&quot;)\n      \n      &#39; Parse each string in inputs using formats and the fr-FR culture.\n      For Each input As String In inputs\n         If TimeSpan.TryParseExact(input, formats, culture, interval) Then\n            Console.WriteLine(&quot;{0} --&gt; {1:c}&quot;, input, interval)   \n         Else\n            Console.WriteLine(&quot;Unable to parse {0}&quot;, input)   \n         End If            \n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       3 --&gt; 03:00:00\n&#39;       16:42 --&gt; 16:42:00\n&#39;       Unable to parse 1:6:52:35.0625\n&#39;       1:6:52:35,0625 --&gt; 1.06:52:35.0625000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_TryParseExact_System_String_System_String_System_IFormatProvider_System_Globalization_TimeSpanStyles_System_TimeSpan__\">\r\n    \r\n            <a id=\"System_TimeSpan_TryParseExact_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryParseExact(String,String,IFormatProvider,TimeSpanStyles,TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a time interval to its <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> equivalent by using the specified format, culture-specific format information, and styles, and returns a value that indicates whether the conversion succeeded. The format of the string representation must match the specified format exactly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool TryParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles, out TimeSpan result);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>input</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that specifies the time interval to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A standard or custom format string that defines the required format of <code>input</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>formatProvider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that provides culture-specific formatting information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>styles</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.timespanstyles\" data-linktype=\"relative-path\">TimeSpanStyles</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One or more enumeration values that indicate the style of <code>input</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>result</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains an object that represents the time interval specified by <code>input</code>, or <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> if the conversion failed. This parameter is passed uninitialized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>input</code> was converted successfully; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The TryParseExact method parses the string representation of a time interval, which must be in the format defined by the <code>format</code> parameter, except that leading and trailing white-space characters are ignored. This method is similar to the <a class=\"xref\" href=\"system.timespan#System_TimeSpan_ParseExact_System_String_System_String_System_IFormatProvider_System_Globalization_TimeSpanStyles_\" data-linktype=\"relative-path\">ParseExact(String,String,IFormatProvider,TimeSpanStyles)</a> method, except that it does not throw an exception if the conversion fails.  </p>\n<p> The <code>format</code> parameter is a string that contains either a single standard format specifier, or one or more custom format specifiers that define the required format of <code>input</code>. For more information about valid format strings, see <a href=\"../Topic/Standard%20TimeSpan%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard TimeSpan Format Strings</a> and <a href=\"../Topic/Custom%20TimeSpan%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom TimeSpan Format Strings</a>.  </p>\n<p> The <code>formatProvider</code> parameter is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation that provides culture-specific information about the format of the returned string if <code>format</code> is a standard format string. The <code>formatProvider</code> parameter can be any of the following:  </p>\n<ul>\n<li><p>A <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the culture whose formatting conventions are to be reflected in the returned string. The <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> property defines the formatting of the returned string.  </p>\n</li>\n<li><p>A <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that defines the formatting of the returned string.  </p>\n</li>\n<li><p>A custom object that implements the <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> interface. Its <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns a <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that provides formatting information.  </p>\n<p>If <code>formatProvider</code> is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that is associated with the current culture is used.  </p>\n<p>The <code>styles</code> parameter affects the interpretation of strings parsed using custom format strings. It determines whether <code>input</code> is interpreted as a negative time interval only if a negative sign is present (<a class=\"xref\" href=\"system.globalization.timespanstyles\" data-linktype=\"relative-path\">System.Globalization.TimeSpanStyles</a>), or whether it is always interpreted as a negative time interval (<a class=\"xref\" href=\"system.globalization.timespanstyles\" data-linktype=\"relative-path\">System.Globalization.TimeSpanStyles</a>). If <a class=\"xref\" href=\"system.globalization.timespanstyles\" data-linktype=\"relative-path\">System.Globalization.TimeSpanStyles</a> is not used, <code>format</code> must include a literal negative sign symbol (such as &quot;\\-&quot;) to successfully parse a negative time interval.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <a class=\"xref\" href=\"system.timespan#System_TimeSpan_ParseExact_System_String_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">ParseExact(String,String,IFormatProvider)</a> method to parse several string representations of time intervals using various format strings and cultures. It also uses the <a class=\"xref\" href=\"system.globalization.timespanstyles\" data-linktype=\"relative-path\">System.Globalization.TimeSpanStyles</a> value to interpret each string as a negative time interval. The output from the example illustrates that the <a class=\"xref\" href=\"system.globalization.timespanstyles\" data-linktype=\"relative-path\">System.Globalization.TimeSpanStyles</a> style affects the return value only when it is used with custom format strings.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeSpan.TryParseExact#2\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string intervalString, format;\n      TimeSpan interval;\n      CultureInfo culture = null;\n      \n      // Parse hour:minute value with custom format specifier.\n      intervalString = &quot;17:14&quot;;\n      format = &quot;h\\\\:mm&quot;;\n      culture = CultureInfo.CurrentCulture;\n      if (TimeSpan.TryParseExact(intervalString, format, \n                                 culture, TimeSpanStyles.AssumeNegative, out interval))\n         Console.WriteLine(&quot;&#39;{0}&#39; ({1}) --&gt; {2}&quot;, intervalString, format, interval);\n      else   \n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39; using format {1}&quot;,\n                           intervalString, format);\n      \n      // Parse hour:minute:second value with &quot;g&quot; specifier.\n      intervalString = &quot;17:14:48&quot;;\n      format = &quot;g&quot;;\n      culture = CultureInfo.InvariantCulture;\n      if (TimeSpan.TryParseExact(intervalString, format, \n                                 culture, TimeSpanStyles.AssumeNegative, out interval))\n         Console.WriteLine(&quot;&#39;{0}&#39; ({1}) --&gt; {2}&quot;, intervalString, format, interval);\n      else\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39; using format {1}&quot;,\n                           intervalString, format);\n      \n      // Parse hours:minute.second value with custom format specifier.     \n      intervalString = &quot;17:14:48.153&quot;;\n      format = @&quot;h\\:mm\\:ss\\.fff&quot;;\n      culture = null;\n      if (TimeSpan.TryParseExact(intervalString, format, \n                                 culture, TimeSpanStyles.AssumeNegative, out interval))\n         Console.WriteLine(&quot;&#39;{0}&#39; ({1}) --&gt; {2}&quot;, intervalString, format, interval);\n      else\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39; using format {1}&quot;,\n                           intervalString, format);   \n\n      // Parse days:hours:minute.second value with &quot;G&quot; specifier \n      // and current (en-US) culture.     \n      intervalString = &quot;3:17:14:48.153&quot;;\n      format = &quot;G&quot;;\n      culture = CultureInfo.CurrentCulture;\n      if (TimeSpan.TryParseExact(intervalString, format, \n                                 culture, TimeSpanStyles.AssumeNegative, out interval))\n         Console.WriteLine(&quot;&#39;{0}&#39; ({1}) --&gt; {2}&quot;, intervalString, format, interval);\n      else   \n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39; using format {1}&quot;,\n                           intervalString, format);   \n            \n      // Parse days:hours:minute.second value with a custom format specifier.     \n      intervalString = &quot;3:17:14:48.153&quot;;\n      format = @&quot;d\\:hh\\:mm\\:ss\\.fff&quot;;\n      culture = null;\n      if (TimeSpan.TryParseExact(intervalString, format, \n                                 culture, TimeSpanStyles.AssumeNegative, out interval))\n         Console.WriteLine(&quot;&#39;{0}&#39; ({1}) --&gt; {2}&quot;, intervalString, format, interval);\n      else   \n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39; using format {1}&quot;,\n                           intervalString, format);\n      \n      // Parse days:hours:minute.second value with &quot;G&quot; specifier \n      // and fr-FR culture.     \n      intervalString = &quot;3:17:14:48,153&quot;;\n      format = &quot;G&quot;;\n      culture = new CultureInfo(&quot;fr-FR&quot;);\n      if (TimeSpan.TryParseExact(intervalString, format, \n                                 culture, TimeSpanStyles.AssumeNegative, out interval))\n         Console.WriteLine(&quot;&#39;{0}&#39; ({1}) --&gt; {2}&quot;, intervalString, format, interval);\n      else   \n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39; using format {1}&quot;,\n                           intervalString, format);\n\n      // Parse a single number using the &quot;c&quot; standard format string. \n      intervalString = &quot;12&quot;;\n      format = &quot;c&quot;;\n      if (TimeSpan.TryParseExact(intervalString, format, \n                                 null, TimeSpanStyles.AssumeNegative, out interval))\n         Console.WriteLine(&quot;&#39;{0}&#39; ({1}) --&gt; {2}&quot;, intervalString, format, interval);\n      else   \n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39; using format {1}&quot;,\n                           intervalString, format);\n      \n      // Parse a single number using the &quot;%h&quot; custom format string. \n      format = &quot;%h&quot;;\n      if (TimeSpan.TryParseExact(intervalString, format, \n                                 null, TimeSpanStyles.AssumeNegative, out interval))\n         Console.WriteLine(&quot;&#39;{0}&#39; ({1}) --&gt; {2}&quot;, intervalString, format, interval);\n      else   \n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39; using format {1}&quot;,\n                           intervalString, format);\n      \n      // Parse a single number using the &quot;%s&quot; custom format string. \n      format = &quot;%s&quot;;\n      if (TimeSpan.TryParseExact(intervalString, format, \n                                 null, TimeSpanStyles.AssumeNegative, out interval))\n         Console.WriteLine(&quot;&#39;{0}&#39; ({1}) --&gt; {2}&quot;, intervalString, format, interval);\n      else   \n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39; using format {1}&quot;,\n                           intervalString, format);\n   }\n}\n// The example displays the following output:\n//    &#39;17:14&#39; (h\\:mm) --&gt; -17:14:00\n//    &#39;17:14:48&#39; (g) --&gt; 17:14:48\n//    &#39;17:14:48.153&#39; (h\\:mm\\:ss\\.fff) --&gt; -17:14:48.1530000\n//    &#39;3:17:14:48.153&#39; (G) --&gt; 3.17:14:48.1530000\n//    &#39;3:17:14:48.153&#39; (d\\:hh\\:mm\\:ss\\.fff) --&gt; -3.17:14:48.1530000\n//    &#39;3:17:14:48,153&#39; (G) --&gt; 3.17:14:48.1530000\n//    &#39;12&#39; (c) --&gt; 12.00:00:00\n//    &#39;12&#39; (%h) --&gt; -12:00:00\n//    &#39;12&#39; (%s) --&gt; -00:00:12\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.TryParseExact#2\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim intervalString, format As String\n      Dim interval As TimeSpan\n      Dim culture As CultureInfo = Nothing\n      \n      &#39; Parse hour:minute value with custom format specifier.\n      intervalString = &quot;17:14&quot;\n      format = &quot;h\\:mm&quot;\n      culture = CultureInfo.CurrentCulture\n      If TimeSpan.TryParseExact(intervalString, format, \n                                culture, TimeSpanStyles.AssumeNegative, interval) Then\n         Console.WriteLine(&quot;&#39;{0}&#39; ({1}) --&gt; {2}&quot;, intervalString, format, interval)\n      Else\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39; using format {1}&quot;,\n                           intervalString, format)   \n      End If\n      \n      &#39; Parse hour:minute:second value with &quot;g&quot; specifier.\n      intervalString = &quot;17:14:48&quot;\n      format = &quot;g&quot;\n      culture = CultureInfo.InvariantCulture\n      If TimeSpan.TryParseExact(intervalString, format, \n                                culture, TimeSpanStyles.AssumeNegative, interval) Then\n         Console.WriteLine(&quot;&#39;{0}&#39; ({1}) --&gt; {2}&quot;, intervalString, format, interval)\n      Else\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39; using format {1}&quot;,\n                           intervalString, format)   \n      End If\n      \n      &#39; Parse hours:minute.second value with custom format specifier.     \n      intervalString = &quot;17:14:48.153&quot;\n      format = &quot;h\\:mm\\:ss\\.fff&quot;\n      culture = Nothing\n      If TimeSpan.TryParseExact(intervalString, format, \n                                culture, TimeSpanStyles.AssumeNegative, interval) Then\n         Console.WriteLine(&quot;&#39;{0}&#39; ({1}) --&gt; {2}&quot;, intervalString, format, interval)\n      Else\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39; using format {1}&quot;,\n                           intervalString, format)   \n      End If \n\n      &#39; Parse days:hours:minute.second value with &quot;G&quot; specifier \n      &#39; and current (en-US) culture.     \n      intervalString = &quot;3:17:14:48.153&quot;\n      format = &quot;G&quot;\n      culture = CultureInfo.CurrentCulture\n      If TimeSpan.TryParseExact(intervalString, format, \n                                culture, TimeSpanStyles.AssumeNegative, interval) Then\n         Console.WriteLine(&quot;&#39;{0}&#39; ({1}) --&gt; {2}&quot;, intervalString, format, interval)\n      Else\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39; using format {1}&quot;,\n                           intervalString, format)   \n      End If \n            \n      &#39; Parse days:hours:minute.second value with a custom format specifier.     \n      intervalString = &quot;3:17:14:48.153&quot;\n      format = &quot;d\\:hh\\:mm\\:ss\\.fff&quot;\n      culture = Nothing\n      If TimeSpan.TryParseExact(intervalString, format, \n                                culture, TimeSpanStyles.AssumeNegative, interval) Then\n         Console.WriteLine(&quot;&#39;{0}&#39; ({1}) --&gt; {2}&quot;, intervalString, format, interval)\n      Else\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39; using format {1}&quot;,\n                           intervalString, format)   \n      End If \n      \n      &#39; Parse days:hours:minute.second value with &quot;G&quot; specifier \n      &#39; and fr-FR culture.     \n      intervalString = &quot;3:17:14:48,153&quot;\n      format = &quot;G&quot;\n      culture = New CultureInfo(&quot;fr-FR&quot;)\n      If TimeSpan.TryParseExact(intervalString, format, \n                                culture, TimeSpanStyles.AssumeNegative, interval) Then\n         Console.WriteLine(&quot;&#39;{0}&#39; ({1}) --&gt; {2}&quot;, intervalString, format, interval)\n      Else\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39; using format {1}&quot;,\n                           intervalString, format)\n      End If \n\n      &#39; Parse a single number using the &quot;c&quot; standard format string. \n      intervalString = &quot;12&quot;\n      format = &quot;c&quot;\n      If TimeSpan.TryParseExact(intervalString, format, \n                                Nothing, TimeSpanStyles.AssumeNegative, interval) Then\n         Console.WriteLine(&quot;&#39;{0}&#39; ({1}) --&gt; {2}&quot;, intervalString, format, interval)\n      Else\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39; using format {1}&quot;,\n                           intervalString, format)   \n      End If \n      \n      &#39; Parse a single number using the &quot;%h&quot; custom format string. \n      format = &quot;%h&quot;\n      If TimeSpan.TryParseExact(intervalString, format, \n                                Nothing, TimeSpanStyles.AssumeNegative, interval) Then\n         Console.WriteLine(&quot;&#39;{0}&#39; ({1}) --&gt; {2}&quot;, intervalString, format, interval)\n      Else\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39; using format {1}&quot;,\n                           intervalString, format)   \n      End If \n      \n      &#39; Parse a single number using the &quot;%s&quot; custom format string. \n      format = &quot;%s&quot;\n      If TimeSpan.TryParseExact(intervalString, format, \n                                Nothing, TimeSpanStyles.AssumeNegative, interval) Then\n         Console.WriteLine(&quot;&#39;{0}&#39; ({1}) --&gt; {2}&quot;, intervalString, format, interval)\n      Else\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39; using format {1}&quot;,\n                           intervalString, format)   \n      End If \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    &#39;17:14&#39; (h\\:mm) --&gt; -17:14:00\n&#39;    &#39;17:14:48&#39; (g) --&gt; 17:14:48\n&#39;    &#39;17:14:48.153&#39; (h\\:mm\\:ss\\.fff) --&gt; -17:14:48.1530000\n&#39;    &#39;3:17:14:48.153&#39; (G) --&gt; 3.17:14:48.1530000\n&#39;    &#39;3:17:14:48.153&#39; (d\\:hh\\:mm\\:ss\\.fff) --&gt; -3.17:14:48.1530000\n&#39;    &#39;3:17:14:48,153&#39; (G) --&gt; 3.17:14:48.1530000\n&#39;    &#39;12&#39; (c) --&gt; 12.00:00:00\n&#39;    &#39;12&#39; (%h) --&gt; -12:00:00\n&#39;    &#39;12&#39; (%s) --&gt; -00:00:12\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_TryParseExact_System_String_System_String___System_IFormatProvider_System_Globalization_TimeSpanStyles_System_TimeSpan__\">\r\n    \r\n            <a id=\"System_TimeSpan_TryParseExact_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryParseExact(String,String[],IFormatProvider,TimeSpanStyles,TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified string representation of a time interval to its <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> equivalent by using the specified formats, culture-specific format information, and styles, and returns a value that indicates whether the conversion succeeded. The format of the string representation must match one of the specified formats exactly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool TryParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles, out TimeSpan result);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>input</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that specifies the time interval to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>formats</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A array of standard or custom format strings that define the acceptable formats of <code>input</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>formatProvider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>styles</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.timespanstyles\" data-linktype=\"relative-path\">TimeSpanStyles</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One or more enumeration values that indicate the style of <code>input</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>result</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains an object that represents the time interval specified by <code>input</code>, or <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> if the conversion failed. This parameter is passed uninitialized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>input</code> was converted successfully; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The TryParseExact method parses the string representation of a time interval, which must be in the format defined by one of the format strings specified by the <code>formats</code> parameter, except that leading and trailing white-space characters are ignored. This method is similar to the [ParseExact(String,â€‚String&lt;xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%29&gt; method, except that it does not throw an exception if the conversion fails.  </p>\n<p> The <code>formats</code> parameter is a string array whose elements consist of either a single standard format specifier, or one or more custom format specifiers that define the required format of <code>input</code>. For more information about valid format strings, see <a href=\"../Topic/Standard%20TimeSpan%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard TimeSpan Format Strings</a> and <a href=\"../Topic/Custom%20TimeSpan%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom TimeSpan Format Strings</a>. <code>input</code> must correspond exactly to a member of <code>formats</code> for the parse operation to succeed. The parse operation attempts to match <code>input</code> to each element in <code>formats</code> starting with the first element in the array.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> The <a class=\"xref\" href=\"system.timespan#System_TimeSpan_ParseExact_\" data-linktype=\"relative-path\">ParseExact</a> method uses the conventions of the culture specified by the <code>formatProvider</code> parameter only if the format string used to parse <code>input</code> is a standard <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> format string whose value is either &quot;g&quot; or &quot;G&quot;. The &quot;c&quot;, &quot;t&quot;, and &quot;T&quot; standard format strings use the formatting conventions of the invariant culture. Custom format strings define the precise format of the input string and use literal characters to separate the components of a time interval.  </p>\n</div>\n<p> The <code>formatProvider</code> parameter is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation that provides culture-specific information about the format of the returned string if the format string used to parse <code>input</code> is a standard format string. The <code>formatProvider</code> parameter can be any of the following:  </p>\n<ul>\n<li><p>A <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents the culture whose formatting conventions are to be reflected in the returned string. The <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a> property defines the formatting of the returned string.  </p>\n</li>\n<li><p>A <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that defines the formatting of the returned string.  </p>\n</li>\n<li><p>A custom object that implements the <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> interface. Its <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns a <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that provides formatting information.  </p>\n<p>If <code>formatProvider</code> is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that is associated with the current culture is used.  </p>\n<p>The <code>styles</code> parameter affects the interpretation of strings that are parsed using custom format strings. It determines whether <code>input</code> is interpreted as a negative time interval only if a negative sign is present (<a class=\"xref\" href=\"system.globalization.timespanstyles\" data-linktype=\"relative-path\">System.Globalization.TimeSpanStyles</a>), or whether it is always interpreted as a negative time interval (<a class=\"xref\" href=\"system.globalization.timespanstyles\" data-linktype=\"relative-path\">System.Globalization.TimeSpanStyles</a>). If <a class=\"xref\" href=\"system.globalization.timespanstyles\" data-linktype=\"relative-path\">System.Globalization.TimeSpanStyles</a> is not used, <code>format</code> must include a literal negative sign symbol (such as &quot;\\-&quot;) to successfully parse a negative time interval.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls the TryParseExact method to convert each element of a string array to a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value. The strings can represent a time interval in either the general short format or the general long format.  </p>\n<p> In addition, the example changes the way in which the time interval parsing methods interpret a single digit. Ordinarily, a single digit is interpreted as the number of days in a time interval. Instead, the <code>%h</code> custom format string is used to interpret a single digit as the number of hours. For this change to be effective, note that the <code>%h</code> custom format string must precede the other format strings in the <code>formats</code> array. Also note from the output that the <a class=\"xref\" href=\"system.globalization.timespanstyles\" data-linktype=\"relative-path\">System.Globalization.TimeSpanStyles</a> flag specified in the method call is used only when parsing a string with this format specifier.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeSpan.TryParseExact#4\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] inputs = { &quot;3&quot;, &quot;16:42&quot;, &quot;1:6:52:35.0625&quot;, \n                          &quot;1:6:52:35,0625&quot; }; \n      string[] formats = { &quot;%h&quot;, &quot;g&quot;, &quot;G&quot; };\n      TimeSpan interval;\n      CultureInfo culture = new CultureInfo(&quot;fr-FR&quot;);\n      \n      // Parse each string in inputs using formats and the fr-FR culture.\n      foreach (string input in inputs) {\n         if(TimeSpan.TryParseExact(input, formats, culture, \n                                   TimeSpanStyles.AssumeNegative, out interval))\n            Console.WriteLine(&quot;{0} --&gt; {1:c}&quot;, input, interval);\n         else\n            Console.WriteLine(&quot;Unable to parse {0}&quot;, input);   \n      }\n   }\n}\n// The example displays the following output:\n//       3 --&gt; -03:00:00\n//       16:42 --&gt; 16:42:00\n//       Unable to parse 1:6:52:35.0625\n//       1:6:52:35,0625 --&gt; 1.06:52:35.0625000\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.TryParseExact#4\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim inputs() As String = { &quot;3&quot;, &quot;16:42&quot;, &quot;1:6:52:35.0625&quot;, \n                                 &quot;1:6:52:35,0625&quot; } \n      Dim formats() As String = { &quot;%h&quot;, &quot;g&quot;, &quot;G&quot; }\n      Dim interval As TimeSpan\n      Dim culture As New CultureInfo(&quot;de-DE&quot;)\n      \n      &#39; Parse each string in inputs using formats and the fr-FR culture.\n      For Each input As String In inputs\n         If TimeSpan.TryParseExact(input, formats, culture, \n                                   TimeSpanStyles.AssumeNegative, interval) Then\n            Console.WriteLine(&quot;{0} --&gt; {1:c}&quot;, input, interval)   \n         Else\n            Console.WriteLine(&quot;Unable to parse {0}&quot;, input)   \n         End If            \n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       3 --&gt; -03:00:00\n&#39;       16:42 --&gt; 16:42:00\n&#39;       Unable to parse 1:6:52:35.0625\n&#39;       1:6:52:35,0625 --&gt; 1.06:52:35.0625000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"operators\">\r\n        <h2>Operators\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_op_Addition_System_TimeSpan_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_TimeSpan_op_Addition_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Addition(TimeSpan,TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Adds two specified <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> instances.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TimeSpan op_Addition (TimeSpan t1, TimeSpan t2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>t1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first time interval to add.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>t2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second time interval to add.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </div>\r\n                  <p>An object whose value is the sum of the values of <code>t1</code> and <code>t2</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The resulting <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> is less than <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> or greater than <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Addition method defines the addition operator for <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeSpan.Operators#1\">      TimeSpan time1 = new TimeSpan(1, 0, 0, 0);   // TimeSpan equivalent to 1 day.\n      TimeSpan time2 = new TimeSpan(12, 0, 0);     // TimeSpan equivalent to 1/2 day.\n      TimeSpan time3 = time1 + time2;              // Add the two time spans.\n      \n      Console.WriteLine(&quot;  {0,12}\\n +  {1,10}\\n   {3}\\n    {2,10}&quot;, \n                        time1, time2, time3, new String(&#39;_&#39;, 10));\n      // The example displays the following output:\n      //           1.00:00:00\n      //        +    12:00:00\n      //          __________\n      //           1.12:00:00\n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.Operators#1\">      Dim time1 As New TimeSpan(1, 0, 0, 0)   &#39; TimeSpan equivalent to 1 day.\n      Dim time2 As New TimeSpan(12, 0, 0)     &#39; TimeSpan equivalent to 1/2 day.\n      Dim time3 As TimeSpan = time1 + time2   &#39; Add the two time spans.\n      \n      Console.WriteLine(&quot;  {0,12}{3} +  {1,10}{3}   {4}{3}    {2,10}&quot;, _\n                        time1, time2, time3, vbCrLf, New String(&quot;_&quot;c, 10))\n      &#39; The example displays the following output:\n      &#39;           1.00:00:00\n      &#39;        +    12:00:00\n      &#39;          __________\n      &#39;           1.12:00:00\n</code></pre><p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.timespan#System_TimeSpan_Add_\" data-linktype=\"relative-path\">Add</a> method instead.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_op_Equality_System_TimeSpan_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_TimeSpan_op_Equality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Equality(TimeSpan,TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether two <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> instances are equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Equality (TimeSpan t1, TimeSpan t2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>t1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first time interval to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>t2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second time interval to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the values of <code>t1</code> and <code>t2</code> are equal; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example compares several <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> objects to a reference <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> using the Equality operator.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeSpan.RelationalOps#1\">// Example of the TimeSpan relational operators.\nusing System;\n\nclass TSRelationalOpsDemo\n{\n    const string dataFmt = &quot;{0,34}    {1}&quot; ;\n\n    // Compare TimeSpan parameters, and display them with the results.\n    static void CompareTimeSpans( TimeSpan Left, TimeSpan Right, \n        string RightText )\n    {\n        Console.WriteLine( );\n        Console.WriteLine( dataFmt, &quot;Right: &quot; + RightText, Right );\n        Console.WriteLine( dataFmt, &quot;Left == Right&quot;, Left == Right );\n        Console.WriteLine( dataFmt, &quot;Left &gt;  Right&quot;, Left &gt; Right );\n        Console.WriteLine( dataFmt, &quot;Left &gt;= Right&quot;, Left &gt;= Right );\n        Console.WriteLine( dataFmt, &quot;Left != Right&quot;, Left != Right );\n        Console.WriteLine( dataFmt, &quot;Left &lt;  Right&quot;, Left &lt; Right );\n        Console.WriteLine( dataFmt, &quot;Left &lt;= Right&quot;, Left &lt;= Right );\n    }\n\n    static void Main( )\n    {\n        TimeSpan Left = new TimeSpan( 2, 0, 0 );\n\n        Console.WriteLine(\n            &quot;This example of the TimeSpan relational operators &quot; +\n            &quot;generates <br>the following output. It creates several &quot; +\n            &quot;different TimeSpan <br>objects and compares them with &quot; +\n            &quot;a 2-hour TimeSpan.<br>&quot; );\n        Console.WriteLine( dataFmt, \n            &quot;Left: TimeSpan( 2, 0, 0 )&quot;, Left );\n\n        // Create objects to compare with a 2-hour TimeSpan.\n        CompareTimeSpans( Left, new TimeSpan( 0, 120, 0 ), \n            &quot;TimeSpan( 0, 120, 0 )&quot; );\n        CompareTimeSpans( Left, new TimeSpan( 2, 0, 1 ), \n            &quot;TimeSpan( 2, 0, 1 )&quot; );\n        CompareTimeSpans( Left, new TimeSpan( 2, 0, -1 ), \n            &quot;TimeSpan( 2, 0, -1 )&quot; );\n        CompareTimeSpans( Left, TimeSpan.FromDays( 1.0 / 12D ), \n            &quot;TimeSpan.FromDays( 1 / 12 )&quot; );\n    } \n} \n\n/*\nThis example of the TimeSpan relational operators generates\nthe following output. It creates several different TimeSpan\nobjects and compares them with a 2-hour TimeSpan.\n\n         Left: TimeSpan( 2, 0, 0 )    02:00:00\n\n      Right: TimeSpan( 0, 120, 0 )    02:00:00\n                     Left == Right    True\n                     Left &gt;  Right    False\n                     Left &gt;= Right    True\n                     Left != Right    False\n                     Left &lt;  Right    False\n                     Left &lt;= Right    True\n\n        Right: TimeSpan( 2, 0, 1 )    02:00:01\n                     Left == Right    False\n                     Left &gt;  Right    False\n                     Left &gt;= Right    False\n                     Left != Right    True\n                     Left &lt;  Right    True\n                     Left &lt;= Right    True\n\n       Right: TimeSpan( 2, 0, -1 )    01:59:59\n                     Left == Right    False\n                     Left &gt;  Right    True\n                     Left &gt;= Right    True\n                     Left != Right    True\n                     Left &lt;  Right    False\n                     Left &lt;= Right    False\n\nRight: TimeSpan.FromDays( 1 / 12 )    02:00:00\n                     Left == Right    True\n                     Left &gt;  Right    False\n                     Left &gt;= Right    True\n                     Left != Right    False\n                     Left &lt;  Right    False\n                     Left &lt;= Right    True\n*/ \n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.RelationalOps#1\">&#39; Example of the TimeSpan relational operators.\nImports System\nImports Microsoft.VisualBasic\n\nModule TSRelationalOpsDemo\n    \n    Const dataFmt As String = &quot;{0,-47}{1}&quot;\n\n    &#39; Compare TimeSpan parameters, and display them with the results.\n    Sub CompareTimeSpans( Left As TimeSpan, Right As TimeSpan, _\n        RightText As String )\n\n        Console.WriteLine( )\n        Console.WriteLine( dataFmt, &quot;Right: &quot; &amp; RightText, Right )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan.op_Equality( Left, Right )&quot;, _\n            TimeSpan.op_Equality( Left, Right ) )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan.op_GreaterThan( Left, Right )&quot;, _\n            TimeSpan.op_GreaterThan( Left, Right ) )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan.op_GreaterThanOrEqual( Left, Right )&quot;, _\n            TimeSpan.op_GreaterThanOrEqual( Left, Right ) )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan.op_Inequality( Left, Right )&quot;, _\n            TimeSpan.op_Inequality( Left, Right ) )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan.op_LessThan( Left, Right )&quot;, _\n            TimeSpan.op_LessThan( Left, Right ) )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan.op_LessThanOrEqual( Left, Right )&quot;, _\n            TimeSpan.op_LessThanOrEqual( Left, Right ) )\n    End Sub \n        \n    Sub Main( )\n        Dim Left As New TimeSpan( 2, 0, 0 )\n            \n        Console.WriteLine( _\n            &quot;This example of the TimeSpan relational operators &quot; &amp; _\n            &quot;generates &quot; &amp; vbCrLf &amp; &quot;the following output. It &quot; &amp; _\n            &quot;creates several different TimeSpan &quot; &amp; vbCrLf &amp; _\n            &quot;objects and compares them with a 2-hour &quot; &amp; _\n            &quot;TimeSpan.&quot; &amp; vbCrLf )\n        Console.WriteLine( dataFmt, &quot;Left: TimeSpan( 2, 0, 0 )&quot;, Left )\n            \n        &#39; Create objects to compare with a 2-hour TimeSpan.\n        CompareTimeSpans( Left, New TimeSpan( 0, 120, 0 ), _\n            &quot;TimeSpan( 0, 120, 0 )&quot; )\n        CompareTimeSpans( Left, New TimeSpan( 2, 0, 1 ), _\n            &quot;TimeSpan( 2, 0, 1 )&quot; )\n        CompareTimeSpans( Left, New TimeSpan( 2, 0, - 1 ), _\n            &quot;TimeSpan( 2, 0, -1 )&quot; )\n        CompareTimeSpans( Left, TimeSpan.FromDays( 1.0 / 12.0 ), _\n            &quot;TimeSpan.FromDays( 1 / 12 )&quot; )\n    End Sub \nEnd Module \n\n&#39; This example of the TimeSpan relational operators generates\n&#39; the following output. It creates several different TimeSpan\n&#39; objects and compares them with a 2-hour TimeSpan.\n&#39; \n&#39; Left: TimeSpan( 2, 0, 0 )                      02:00:00\n&#39; \n&#39; Right: TimeSpan( 0, 120, 0 )                   02:00:00\n&#39; TimeSpan.op_Equality( Left, Right )            True\n&#39; TimeSpan.op_GreaterThan( Left, Right )         False\n&#39; TimeSpan.op_GreaterThanOrEqual( Left, Right )  True\n&#39; TimeSpan.op_Inequality( Left, Right )          False\n&#39; TimeSpan.op_LessThan( Left, Right )            False\n&#39; TimeSpan.op_LessThanOrEqual( Left, Right )     True\n&#39; \n&#39; Right: TimeSpan( 2, 0, 1 )                     02:00:01\n&#39; TimeSpan.op_Equality( Left, Right )            False\n&#39; TimeSpan.op_GreaterThan( Left, Right )         False\n&#39; TimeSpan.op_GreaterThanOrEqual( Left, Right )  False\n&#39; TimeSpan.op_Inequality( Left, Right )          True\n&#39; TimeSpan.op_LessThan( Left, Right )            True\n&#39; TimeSpan.op_LessThanOrEqual( Left, Right )     True\n&#39; \n&#39; Right: TimeSpan( 2, 0, -1 )                    01:59:59\n&#39; TimeSpan.op_Equality( Left, Right )            False\n&#39; TimeSpan.op_GreaterThan( Left, Right )         True\n&#39; TimeSpan.op_GreaterThanOrEqual( Left, Right )  True\n&#39; TimeSpan.op_Inequality( Left, Right )          True\n&#39; TimeSpan.op_LessThan( Left, Right )            False\n&#39; TimeSpan.op_LessThanOrEqual( Left, Right )     False\n&#39; \n&#39; Right: TimeSpan.FromDays( 1 / 12 )             02:00:00\n&#39; TimeSpan.op_Equality( Left, Right )            True\n&#39; TimeSpan.op_GreaterThan( Left, Right )         False\n&#39; TimeSpan.op_GreaterThanOrEqual( Left, Right )  True\n&#39; TimeSpan.op_Inequality( Left, Right )          False\n&#39; TimeSpan.op_LessThan( Left, Right )            False\n&#39; TimeSpan.op_LessThanOrEqual( Left, Right )     True\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.TimeSpan.RelationalOps#1\">// Example of the TimeSpan relational operators.\nusing namespace System;\nconst __wchar_t * protoFmt = L&quot;{0,35}    {1}&quot;;\n\n// Compare TimeSpan parameters, and display them with the results.\nvoid CompareTimeSpans( TimeSpan Left, TimeSpan Right, String^ RightText )\n{\n   String^ dataFmt = gcnew String( protoFmt );\n   Console::WriteLine();\n   Console::WriteLine( dataFmt, String::Concat( &quot;Right: &quot;, RightText ), Right );\n   Console::WriteLine( dataFmt, &quot;Left == Right&quot;, Left == Right );\n   Console::WriteLine( dataFmt, &quot;Left &gt;  Right&quot;, Left &gt; Right );\n   Console::WriteLine( dataFmt, &quot;Left &gt;= Right&quot;, Left &gt;= Right );\n   Console::WriteLine( dataFmt, &quot;Left != Right&quot;, Left != Right );\n   Console::WriteLine( dataFmt, &quot;Left &lt;  Right&quot;, Left &lt; Right );\n   Console::WriteLine( dataFmt, &quot;Left &lt;= Right&quot;, Left &lt;= Right );\n}\n\nint main()\n{\n   TimeSpan Left = TimeSpan(2,0,0);\n   Console::WriteLine( &quot;This example of the TimeSpan relational operators &quot;\n   &quot;generates <br>the following output. It creates several &quot;\n   &quot;different TimeSpan <br>objects and compares them with &quot;\n   &quot;a 2-hour TimeSpan.<br>&quot; );\n   Console::WriteLine( gcnew String( protoFmt ), &quot;Left: TimeSpan( 2, 0, 0 )&quot;, Left );\n   \n   // Create objects to compare with a 2-hour TimeSpan.\n   CompareTimeSpans( Left, TimeSpan(0,120,0), &quot;TimeSpan( 0, 120, 0 )&quot; );\n   CompareTimeSpans( Left, TimeSpan(2,0,1), &quot;TimeSpan( 2, 0, 1 )&quot; );\n   CompareTimeSpans( Left, TimeSpan(2,0,-1), &quot;TimeSpan( 2, 0, -1 )&quot; );\n   CompareTimeSpans( Left, TimeSpan::FromDays( 1.0 / 12. ), &quot;TimeSpan::FromDays( 1 / 12 )&quot; );\n}\n\n/*\nThis example of the TimeSpan relational operators generates\nthe following output. It creates several different TimeSpan\nobjects and compares them with a 2-hour TimeSpan.\n\n          Left: TimeSpan( 2, 0, 0 )    02:00:00\n\n       Right: TimeSpan( 0, 120, 0 )    02:00:00\n                      Left == Right    True\n                      Left &gt;  Right    False\n                      Left &gt;= Right    True\n                      Left != Right    False\n                      Left &lt;  Right    False\n                      Left &lt;= Right    True\n\n         Right: TimeSpan( 2, 0, 1 )    02:00:01\n                      Left == Right    False\n                      Left &gt;  Right    False\n                      Left &gt;= Right    False\n                      Left != Right    True\n                      Left &lt;  Right    True\n                      Left &lt;= Right    True\n\n        Right: TimeSpan( 2, 0, -1 )    01:59:59\n                      Left == Right    False\n                      Left &gt;  Right    True\n                      Left &gt;= Right    True\n                      Left != Right    True\n                      Left &lt;  Right    False\n                      Left &lt;= Right    False\n\nRight: TimeSpan::FromDays( 1 / 12 )    02:00:00\n                      Left == Right    True\n                      Left &gt;  Right    False\n                      Left &gt;= Right    True\n                      Left != Right    False\n                      Left &lt;  Right    False\n                      Left &lt;= Right    True\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_op_GreaterThan_System_TimeSpan_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_TimeSpan_op_GreaterThan_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_GreaterThan(TimeSpan,TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether a specified <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> is greater than another specified <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_GreaterThan (TimeSpan t1, TimeSpan t2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>t1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first time interval to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>t2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second time interval to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the value of <code>t1</code> is greater than the value of <code>t2</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example compares several <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> objects to a reference <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> using the GreaterThan operator.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeSpan.RelationalOps#1\">// Example of the TimeSpan relational operators.\nusing System;\n\nclass TSRelationalOpsDemo\n{\n    const string dataFmt = &quot;{0,34}    {1}&quot; ;\n\n    // Compare TimeSpan parameters, and display them with the results.\n    static void CompareTimeSpans( TimeSpan Left, TimeSpan Right, \n        string RightText )\n    {\n        Console.WriteLine( );\n        Console.WriteLine( dataFmt, &quot;Right: &quot; + RightText, Right );\n        Console.WriteLine( dataFmt, &quot;Left == Right&quot;, Left == Right );\n        Console.WriteLine( dataFmt, &quot;Left &gt;  Right&quot;, Left &gt; Right );\n        Console.WriteLine( dataFmt, &quot;Left &gt;= Right&quot;, Left &gt;= Right );\n        Console.WriteLine( dataFmt, &quot;Left != Right&quot;, Left != Right );\n        Console.WriteLine( dataFmt, &quot;Left &lt;  Right&quot;, Left &lt; Right );\n        Console.WriteLine( dataFmt, &quot;Left &lt;= Right&quot;, Left &lt;= Right );\n    }\n\n    static void Main( )\n    {\n        TimeSpan Left = new TimeSpan( 2, 0, 0 );\n\n        Console.WriteLine(\n            &quot;This example of the TimeSpan relational operators &quot; +\n            &quot;generates <br>the following output. It creates several &quot; +\n            &quot;different TimeSpan <br>objects and compares them with &quot; +\n            &quot;a 2-hour TimeSpan.<br>&quot; );\n        Console.WriteLine( dataFmt, \n            &quot;Left: TimeSpan( 2, 0, 0 )&quot;, Left );\n\n        // Create objects to compare with a 2-hour TimeSpan.\n        CompareTimeSpans( Left, new TimeSpan( 0, 120, 0 ), \n            &quot;TimeSpan( 0, 120, 0 )&quot; );\n        CompareTimeSpans( Left, new TimeSpan( 2, 0, 1 ), \n            &quot;TimeSpan( 2, 0, 1 )&quot; );\n        CompareTimeSpans( Left, new TimeSpan( 2, 0, -1 ), \n            &quot;TimeSpan( 2, 0, -1 )&quot; );\n        CompareTimeSpans( Left, TimeSpan.FromDays( 1.0 / 12D ), \n            &quot;TimeSpan.FromDays( 1 / 12 )&quot; );\n    } \n} \n\n/*\nThis example of the TimeSpan relational operators generates\nthe following output. It creates several different TimeSpan\nobjects and compares them with a 2-hour TimeSpan.\n\n         Left: TimeSpan( 2, 0, 0 )    02:00:00\n\n      Right: TimeSpan( 0, 120, 0 )    02:00:00\n                     Left == Right    True\n                     Left &gt;  Right    False\n                     Left &gt;= Right    True\n                     Left != Right    False\n                     Left &lt;  Right    False\n                     Left &lt;= Right    True\n\n        Right: TimeSpan( 2, 0, 1 )    02:00:01\n                     Left == Right    False\n                     Left &gt;  Right    False\n                     Left &gt;= Right    False\n                     Left != Right    True\n                     Left &lt;  Right    True\n                     Left &lt;= Right    True\n\n       Right: TimeSpan( 2, 0, -1 )    01:59:59\n                     Left == Right    False\n                     Left &gt;  Right    True\n                     Left &gt;= Right    True\n                     Left != Right    True\n                     Left &lt;  Right    False\n                     Left &lt;= Right    False\n\nRight: TimeSpan.FromDays( 1 / 12 )    02:00:00\n                     Left == Right    True\n                     Left &gt;  Right    False\n                     Left &gt;= Right    True\n                     Left != Right    False\n                     Left &lt;  Right    False\n                     Left &lt;= Right    True\n*/ \n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.RelationalOps#1\">&#39; Example of the TimeSpan relational operators.\nImports System\nImports Microsoft.VisualBasic\n\nModule TSRelationalOpsDemo\n    \n    Const dataFmt As String = &quot;{0,-47}{1}&quot;\n\n    &#39; Compare TimeSpan parameters, and display them with the results.\n    Sub CompareTimeSpans( Left As TimeSpan, Right As TimeSpan, _\n        RightText As String )\n\n        Console.WriteLine( )\n        Console.WriteLine( dataFmt, &quot;Right: &quot; &amp; RightText, Right )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan.op_Equality( Left, Right )&quot;, _\n            TimeSpan.op_Equality( Left, Right ) )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan.op_GreaterThan( Left, Right )&quot;, _\n            TimeSpan.op_GreaterThan( Left, Right ) )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan.op_GreaterThanOrEqual( Left, Right )&quot;, _\n            TimeSpan.op_GreaterThanOrEqual( Left, Right ) )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan.op_Inequality( Left, Right )&quot;, _\n            TimeSpan.op_Inequality( Left, Right ) )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan.op_LessThan( Left, Right )&quot;, _\n            TimeSpan.op_LessThan( Left, Right ) )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan.op_LessThanOrEqual( Left, Right )&quot;, _\n            TimeSpan.op_LessThanOrEqual( Left, Right ) )\n    End Sub \n        \n    Sub Main( )\n        Dim Left As New TimeSpan( 2, 0, 0 )\n            \n        Console.WriteLine( _\n            &quot;This example of the TimeSpan relational operators &quot; &amp; _\n            &quot;generates &quot; &amp; vbCrLf &amp; &quot;the following output. It &quot; &amp; _\n            &quot;creates several different TimeSpan &quot; &amp; vbCrLf &amp; _\n            &quot;objects and compares them with a 2-hour &quot; &amp; _\n            &quot;TimeSpan.&quot; &amp; vbCrLf )\n        Console.WriteLine( dataFmt, &quot;Left: TimeSpan( 2, 0, 0 )&quot;, Left )\n            \n        &#39; Create objects to compare with a 2-hour TimeSpan.\n        CompareTimeSpans( Left, New TimeSpan( 0, 120, 0 ), _\n            &quot;TimeSpan( 0, 120, 0 )&quot; )\n        CompareTimeSpans( Left, New TimeSpan( 2, 0, 1 ), _\n            &quot;TimeSpan( 2, 0, 1 )&quot; )\n        CompareTimeSpans( Left, New TimeSpan( 2, 0, - 1 ), _\n            &quot;TimeSpan( 2, 0, -1 )&quot; )\n        CompareTimeSpans( Left, TimeSpan.FromDays( 1.0 / 12.0 ), _\n            &quot;TimeSpan.FromDays( 1 / 12 )&quot; )\n    End Sub \nEnd Module \n\n&#39; This example of the TimeSpan relational operators generates\n&#39; the following output. It creates several different TimeSpan\n&#39; objects and compares them with a 2-hour TimeSpan.\n&#39; \n&#39; Left: TimeSpan( 2, 0, 0 )                      02:00:00\n&#39; \n&#39; Right: TimeSpan( 0, 120, 0 )                   02:00:00\n&#39; TimeSpan.op_Equality( Left, Right )            True\n&#39; TimeSpan.op_GreaterThan( Left, Right )         False\n&#39; TimeSpan.op_GreaterThanOrEqual( Left, Right )  True\n&#39; TimeSpan.op_Inequality( Left, Right )          False\n&#39; TimeSpan.op_LessThan( Left, Right )            False\n&#39; TimeSpan.op_LessThanOrEqual( Left, Right )     True\n&#39; \n&#39; Right: TimeSpan( 2, 0, 1 )                     02:00:01\n&#39; TimeSpan.op_Equality( Left, Right )            False\n&#39; TimeSpan.op_GreaterThan( Left, Right )         False\n&#39; TimeSpan.op_GreaterThanOrEqual( Left, Right )  False\n&#39; TimeSpan.op_Inequality( Left, Right )          True\n&#39; TimeSpan.op_LessThan( Left, Right )            True\n&#39; TimeSpan.op_LessThanOrEqual( Left, Right )     True\n&#39; \n&#39; Right: TimeSpan( 2, 0, -1 )                    01:59:59\n&#39; TimeSpan.op_Equality( Left, Right )            False\n&#39; TimeSpan.op_GreaterThan( Left, Right )         True\n&#39; TimeSpan.op_GreaterThanOrEqual( Left, Right )  True\n&#39; TimeSpan.op_Inequality( Left, Right )          True\n&#39; TimeSpan.op_LessThan( Left, Right )            False\n&#39; TimeSpan.op_LessThanOrEqual( Left, Right )     False\n&#39; \n&#39; Right: TimeSpan.FromDays( 1 / 12 )             02:00:00\n&#39; TimeSpan.op_Equality( Left, Right )            True\n&#39; TimeSpan.op_GreaterThan( Left, Right )         False\n&#39; TimeSpan.op_GreaterThanOrEqual( Left, Right )  True\n&#39; TimeSpan.op_Inequality( Left, Right )          False\n&#39; TimeSpan.op_LessThan( Left, Right )            False\n&#39; TimeSpan.op_LessThanOrEqual( Left, Right )     True\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.TimeSpan.RelationalOps#1\">// Example of the TimeSpan relational operators.\nusing namespace System;\nconst __wchar_t * protoFmt = L&quot;{0,35}    {1}&quot;;\n\n// Compare TimeSpan parameters, and display them with the results.\nvoid CompareTimeSpans( TimeSpan Left, TimeSpan Right, String^ RightText )\n{\n   String^ dataFmt = gcnew String( protoFmt );\n   Console::WriteLine();\n   Console::WriteLine( dataFmt, String::Concat( &quot;Right: &quot;, RightText ), Right );\n   Console::WriteLine( dataFmt, &quot;Left == Right&quot;, Left == Right );\n   Console::WriteLine( dataFmt, &quot;Left &gt;  Right&quot;, Left &gt; Right );\n   Console::WriteLine( dataFmt, &quot;Left &gt;= Right&quot;, Left &gt;= Right );\n   Console::WriteLine( dataFmt, &quot;Left != Right&quot;, Left != Right );\n   Console::WriteLine( dataFmt, &quot;Left &lt;  Right&quot;, Left &lt; Right );\n   Console::WriteLine( dataFmt, &quot;Left &lt;= Right&quot;, Left &lt;= Right );\n}\n\nint main()\n{\n   TimeSpan Left = TimeSpan(2,0,0);\n   Console::WriteLine( &quot;This example of the TimeSpan relational operators &quot;\n   &quot;generates <br>the following output. It creates several &quot;\n   &quot;different TimeSpan <br>objects and compares them with &quot;\n   &quot;a 2-hour TimeSpan.<br>&quot; );\n   Console::WriteLine( gcnew String( protoFmt ), &quot;Left: TimeSpan( 2, 0, 0 )&quot;, Left );\n   \n   // Create objects to compare with a 2-hour TimeSpan.\n   CompareTimeSpans( Left, TimeSpan(0,120,0), &quot;TimeSpan( 0, 120, 0 )&quot; );\n   CompareTimeSpans( Left, TimeSpan(2,0,1), &quot;TimeSpan( 2, 0, 1 )&quot; );\n   CompareTimeSpans( Left, TimeSpan(2,0,-1), &quot;TimeSpan( 2, 0, -1 )&quot; );\n   CompareTimeSpans( Left, TimeSpan::FromDays( 1.0 / 12. ), &quot;TimeSpan::FromDays( 1 / 12 )&quot; );\n}\n\n/*\nThis example of the TimeSpan relational operators generates\nthe following output. It creates several different TimeSpan\nobjects and compares them with a 2-hour TimeSpan.\n\n          Left: TimeSpan( 2, 0, 0 )    02:00:00\n\n       Right: TimeSpan( 0, 120, 0 )    02:00:00\n                      Left == Right    True\n                      Left &gt;  Right    False\n                      Left &gt;= Right    True\n                      Left != Right    False\n                      Left &lt;  Right    False\n                      Left &lt;= Right    True\n\n         Right: TimeSpan( 2, 0, 1 )    02:00:01\n                      Left == Right    False\n                      Left &gt;  Right    False\n                      Left &gt;= Right    False\n                      Left != Right    True\n                      Left &lt;  Right    True\n                      Left &lt;= Right    True\n\n        Right: TimeSpan( 2, 0, -1 )    01:59:59\n                      Left == Right    False\n                      Left &gt;  Right    True\n                      Left &gt;= Right    True\n                      Left != Right    True\n                      Left &lt;  Right    False\n                      Left &lt;= Right    False\n\nRight: TimeSpan::FromDays( 1 / 12 )    02:00:00\n                      Left == Right    True\n                      Left &gt;  Right    False\n                      Left &gt;= Right    True\n                      Left != Right    False\n                      Left &lt;  Right    False\n                      Left &lt;= Right    True\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_op_GreaterThanOrEqual_System_TimeSpan_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_TimeSpan_op_GreaterThanOrEqual_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_GreaterThanOrEqual(TimeSpan,TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether a specified <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> is greater than or equal to another specified <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_GreaterThanOrEqual (TimeSpan t1, TimeSpan t2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>t1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first time interval to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>t2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second time interval to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the value of <code>t1</code> is greater than or equal to the value of <code>t2</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example compares several <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> objects to a reference <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> using the GreaterThanOrEqual operator.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeSpan.RelationalOps#1\">// Example of the TimeSpan relational operators.\nusing System;\n\nclass TSRelationalOpsDemo\n{\n    const string dataFmt = &quot;{0,34}    {1}&quot; ;\n\n    // Compare TimeSpan parameters, and display them with the results.\n    static void CompareTimeSpans( TimeSpan Left, TimeSpan Right, \n        string RightText )\n    {\n        Console.WriteLine( );\n        Console.WriteLine( dataFmt, &quot;Right: &quot; + RightText, Right );\n        Console.WriteLine( dataFmt, &quot;Left == Right&quot;, Left == Right );\n        Console.WriteLine( dataFmt, &quot;Left &gt;  Right&quot;, Left &gt; Right );\n        Console.WriteLine( dataFmt, &quot;Left &gt;= Right&quot;, Left &gt;= Right );\n        Console.WriteLine( dataFmt, &quot;Left != Right&quot;, Left != Right );\n        Console.WriteLine( dataFmt, &quot;Left &lt;  Right&quot;, Left &lt; Right );\n        Console.WriteLine( dataFmt, &quot;Left &lt;= Right&quot;, Left &lt;= Right );\n    }\n\n    static void Main( )\n    {\n        TimeSpan Left = new TimeSpan( 2, 0, 0 );\n\n        Console.WriteLine(\n            &quot;This example of the TimeSpan relational operators &quot; +\n            &quot;generates <br>the following output. It creates several &quot; +\n            &quot;different TimeSpan <br>objects and compares them with &quot; +\n            &quot;a 2-hour TimeSpan.<br>&quot; );\n        Console.WriteLine( dataFmt, \n            &quot;Left: TimeSpan( 2, 0, 0 )&quot;, Left );\n\n        // Create objects to compare with a 2-hour TimeSpan.\n        CompareTimeSpans( Left, new TimeSpan( 0, 120, 0 ), \n            &quot;TimeSpan( 0, 120, 0 )&quot; );\n        CompareTimeSpans( Left, new TimeSpan( 2, 0, 1 ), \n            &quot;TimeSpan( 2, 0, 1 )&quot; );\n        CompareTimeSpans( Left, new TimeSpan( 2, 0, -1 ), \n            &quot;TimeSpan( 2, 0, -1 )&quot; );\n        CompareTimeSpans( Left, TimeSpan.FromDays( 1.0 / 12D ), \n            &quot;TimeSpan.FromDays( 1 / 12 )&quot; );\n    } \n} \n\n/*\nThis example of the TimeSpan relational operators generates\nthe following output. It creates several different TimeSpan\nobjects and compares them with a 2-hour TimeSpan.\n\n         Left: TimeSpan( 2, 0, 0 )    02:00:00\n\n      Right: TimeSpan( 0, 120, 0 )    02:00:00\n                     Left == Right    True\n                     Left &gt;  Right    False\n                     Left &gt;= Right    True\n                     Left != Right    False\n                     Left &lt;  Right    False\n                     Left &lt;= Right    True\n\n        Right: TimeSpan( 2, 0, 1 )    02:00:01\n                     Left == Right    False\n                     Left &gt;  Right    False\n                     Left &gt;= Right    False\n                     Left != Right    True\n                     Left &lt;  Right    True\n                     Left &lt;= Right    True\n\n       Right: TimeSpan( 2, 0, -1 )    01:59:59\n                     Left == Right    False\n                     Left &gt;  Right    True\n                     Left &gt;= Right    True\n                     Left != Right    True\n                     Left &lt;  Right    False\n                     Left &lt;= Right    False\n\nRight: TimeSpan.FromDays( 1 / 12 )    02:00:00\n                     Left == Right    True\n                     Left &gt;  Right    False\n                     Left &gt;= Right    True\n                     Left != Right    False\n                     Left &lt;  Right    False\n                     Left &lt;= Right    True\n*/ \n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.RelationalOps#1\">&#39; Example of the TimeSpan relational operators.\nImports System\nImports Microsoft.VisualBasic\n\nModule TSRelationalOpsDemo\n    \n    Const dataFmt As String = &quot;{0,-47}{1}&quot;\n\n    &#39; Compare TimeSpan parameters, and display them with the results.\n    Sub CompareTimeSpans( Left As TimeSpan, Right As TimeSpan, _\n        RightText As String )\n\n        Console.WriteLine( )\n        Console.WriteLine( dataFmt, &quot;Right: &quot; &amp; RightText, Right )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan.op_Equality( Left, Right )&quot;, _\n            TimeSpan.op_Equality( Left, Right ) )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan.op_GreaterThan( Left, Right )&quot;, _\n            TimeSpan.op_GreaterThan( Left, Right ) )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan.op_GreaterThanOrEqual( Left, Right )&quot;, _\n            TimeSpan.op_GreaterThanOrEqual( Left, Right ) )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan.op_Inequality( Left, Right )&quot;, _\n            TimeSpan.op_Inequality( Left, Right ) )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan.op_LessThan( Left, Right )&quot;, _\n            TimeSpan.op_LessThan( Left, Right ) )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan.op_LessThanOrEqual( Left, Right )&quot;, _\n            TimeSpan.op_LessThanOrEqual( Left, Right ) )\n    End Sub \n        \n    Sub Main( )\n        Dim Left As New TimeSpan( 2, 0, 0 )\n            \n        Console.WriteLine( _\n            &quot;This example of the TimeSpan relational operators &quot; &amp; _\n            &quot;generates &quot; &amp; vbCrLf &amp; &quot;the following output. It &quot; &amp; _\n            &quot;creates several different TimeSpan &quot; &amp; vbCrLf &amp; _\n            &quot;objects and compares them with a 2-hour &quot; &amp; _\n            &quot;TimeSpan.&quot; &amp; vbCrLf )\n        Console.WriteLine( dataFmt, &quot;Left: TimeSpan( 2, 0, 0 )&quot;, Left )\n            \n        &#39; Create objects to compare with a 2-hour TimeSpan.\n        CompareTimeSpans( Left, New TimeSpan( 0, 120, 0 ), _\n            &quot;TimeSpan( 0, 120, 0 )&quot; )\n        CompareTimeSpans( Left, New TimeSpan( 2, 0, 1 ), _\n            &quot;TimeSpan( 2, 0, 1 )&quot; )\n        CompareTimeSpans( Left, New TimeSpan( 2, 0, - 1 ), _\n            &quot;TimeSpan( 2, 0, -1 )&quot; )\n        CompareTimeSpans( Left, TimeSpan.FromDays( 1.0 / 12.0 ), _\n            &quot;TimeSpan.FromDays( 1 / 12 )&quot; )\n    End Sub \nEnd Module \n\n&#39; This example of the TimeSpan relational operators generates\n&#39; the following output. It creates several different TimeSpan\n&#39; objects and compares them with a 2-hour TimeSpan.\n&#39; \n&#39; Left: TimeSpan( 2, 0, 0 )                      02:00:00\n&#39; \n&#39; Right: TimeSpan( 0, 120, 0 )                   02:00:00\n&#39; TimeSpan.op_Equality( Left, Right )            True\n&#39; TimeSpan.op_GreaterThan( Left, Right )         False\n&#39; TimeSpan.op_GreaterThanOrEqual( Left, Right )  True\n&#39; TimeSpan.op_Inequality( Left, Right )          False\n&#39; TimeSpan.op_LessThan( Left, Right )            False\n&#39; TimeSpan.op_LessThanOrEqual( Left, Right )     True\n&#39; \n&#39; Right: TimeSpan( 2, 0, 1 )                     02:00:01\n&#39; TimeSpan.op_Equality( Left, Right )            False\n&#39; TimeSpan.op_GreaterThan( Left, Right )         False\n&#39; TimeSpan.op_GreaterThanOrEqual( Left, Right )  False\n&#39; TimeSpan.op_Inequality( Left, Right )          True\n&#39; TimeSpan.op_LessThan( Left, Right )            True\n&#39; TimeSpan.op_LessThanOrEqual( Left, Right )     True\n&#39; \n&#39; Right: TimeSpan( 2, 0, -1 )                    01:59:59\n&#39; TimeSpan.op_Equality( Left, Right )            False\n&#39; TimeSpan.op_GreaterThan( Left, Right )         True\n&#39; TimeSpan.op_GreaterThanOrEqual( Left, Right )  True\n&#39; TimeSpan.op_Inequality( Left, Right )          True\n&#39; TimeSpan.op_LessThan( Left, Right )            False\n&#39; TimeSpan.op_LessThanOrEqual( Left, Right )     False\n&#39; \n&#39; Right: TimeSpan.FromDays( 1 / 12 )             02:00:00\n&#39; TimeSpan.op_Equality( Left, Right )            True\n&#39; TimeSpan.op_GreaterThan( Left, Right )         False\n&#39; TimeSpan.op_GreaterThanOrEqual( Left, Right )  True\n&#39; TimeSpan.op_Inequality( Left, Right )          False\n&#39; TimeSpan.op_LessThan( Left, Right )            False\n&#39; TimeSpan.op_LessThanOrEqual( Left, Right )     True\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.TimeSpan.RelationalOps#1\">// Example of the TimeSpan relational operators.\nusing namespace System;\nconst __wchar_t * protoFmt = L&quot;{0,35}    {1}&quot;;\n\n// Compare TimeSpan parameters, and display them with the results.\nvoid CompareTimeSpans( TimeSpan Left, TimeSpan Right, String^ RightText )\n{\n   String^ dataFmt = gcnew String( protoFmt );\n   Console::WriteLine();\n   Console::WriteLine( dataFmt, String::Concat( &quot;Right: &quot;, RightText ), Right );\n   Console::WriteLine( dataFmt, &quot;Left == Right&quot;, Left == Right );\n   Console::WriteLine( dataFmt, &quot;Left &gt;  Right&quot;, Left &gt; Right );\n   Console::WriteLine( dataFmt, &quot;Left &gt;= Right&quot;, Left &gt;= Right );\n   Console::WriteLine( dataFmt, &quot;Left != Right&quot;, Left != Right );\n   Console::WriteLine( dataFmt, &quot;Left &lt;  Right&quot;, Left &lt; Right );\n   Console::WriteLine( dataFmt, &quot;Left &lt;= Right&quot;, Left &lt;= Right );\n}\n\nint main()\n{\n   TimeSpan Left = TimeSpan(2,0,0);\n   Console::WriteLine( &quot;This example of the TimeSpan relational operators &quot;\n   &quot;generates <br>the following output. It creates several &quot;\n   &quot;different TimeSpan <br>objects and compares them with &quot;\n   &quot;a 2-hour TimeSpan.<br>&quot; );\n   Console::WriteLine( gcnew String( protoFmt ), &quot;Left: TimeSpan( 2, 0, 0 )&quot;, Left );\n   \n   // Create objects to compare with a 2-hour TimeSpan.\n   CompareTimeSpans( Left, TimeSpan(0,120,0), &quot;TimeSpan( 0, 120, 0 )&quot; );\n   CompareTimeSpans( Left, TimeSpan(2,0,1), &quot;TimeSpan( 2, 0, 1 )&quot; );\n   CompareTimeSpans( Left, TimeSpan(2,0,-1), &quot;TimeSpan( 2, 0, -1 )&quot; );\n   CompareTimeSpans( Left, TimeSpan::FromDays( 1.0 / 12. ), &quot;TimeSpan::FromDays( 1 / 12 )&quot; );\n}\n\n/*\nThis example of the TimeSpan relational operators generates\nthe following output. It creates several different TimeSpan\nobjects and compares them with a 2-hour TimeSpan.\n\n          Left: TimeSpan( 2, 0, 0 )    02:00:00\n\n       Right: TimeSpan( 0, 120, 0 )    02:00:00\n                      Left == Right    True\n                      Left &gt;  Right    False\n                      Left &gt;= Right    True\n                      Left != Right    False\n                      Left &lt;  Right    False\n                      Left &lt;= Right    True\n\n         Right: TimeSpan( 2, 0, 1 )    02:00:01\n                      Left == Right    False\n                      Left &gt;  Right    False\n                      Left &gt;= Right    False\n                      Left != Right    True\n                      Left &lt;  Right    True\n                      Left &lt;= Right    True\n\n        Right: TimeSpan( 2, 0, -1 )    01:59:59\n                      Left == Right    False\n                      Left &gt;  Right    True\n                      Left &gt;= Right    True\n                      Left != Right    True\n                      Left &lt;  Right    False\n                      Left &lt;= Right    False\n\nRight: TimeSpan::FromDays( 1 / 12 )    02:00:00\n                      Left == Right    True\n                      Left &gt;  Right    False\n                      Left &gt;= Right    True\n                      Left != Right    False\n                      Left &lt;  Right    False\n                      Left &lt;= Right    True\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_op_Inequality_System_TimeSpan_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_TimeSpan_op_Inequality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Inequality(TimeSpan,TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether two <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> instances are not equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Inequality (TimeSpan t1, TimeSpan t2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>t1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first time interval to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>t2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second time interval to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the values of <code>t1</code> and <code>t2</code> are not equal; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example compares several <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> objects to a reference <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> using the Inequality operator.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeSpan.RelationalOps#1\">// Example of the TimeSpan relational operators.\nusing System;\n\nclass TSRelationalOpsDemo\n{\n    const string dataFmt = &quot;{0,34}    {1}&quot; ;\n\n    // Compare TimeSpan parameters, and display them with the results.\n    static void CompareTimeSpans( TimeSpan Left, TimeSpan Right, \n        string RightText )\n    {\n        Console.WriteLine( );\n        Console.WriteLine( dataFmt, &quot;Right: &quot; + RightText, Right );\n        Console.WriteLine( dataFmt, &quot;Left == Right&quot;, Left == Right );\n        Console.WriteLine( dataFmt, &quot;Left &gt;  Right&quot;, Left &gt; Right );\n        Console.WriteLine( dataFmt, &quot;Left &gt;= Right&quot;, Left &gt;= Right );\n        Console.WriteLine( dataFmt, &quot;Left != Right&quot;, Left != Right );\n        Console.WriteLine( dataFmt, &quot;Left &lt;  Right&quot;, Left &lt; Right );\n        Console.WriteLine( dataFmt, &quot;Left &lt;= Right&quot;, Left &lt;= Right );\n    }\n\n    static void Main( )\n    {\n        TimeSpan Left = new TimeSpan( 2, 0, 0 );\n\n        Console.WriteLine(\n            &quot;This example of the TimeSpan relational operators &quot; +\n            &quot;generates <br>the following output. It creates several &quot; +\n            &quot;different TimeSpan <br>objects and compares them with &quot; +\n            &quot;a 2-hour TimeSpan.<br>&quot; );\n        Console.WriteLine( dataFmt, \n            &quot;Left: TimeSpan( 2, 0, 0 )&quot;, Left );\n\n        // Create objects to compare with a 2-hour TimeSpan.\n        CompareTimeSpans( Left, new TimeSpan( 0, 120, 0 ), \n            &quot;TimeSpan( 0, 120, 0 )&quot; );\n        CompareTimeSpans( Left, new TimeSpan( 2, 0, 1 ), \n            &quot;TimeSpan( 2, 0, 1 )&quot; );\n        CompareTimeSpans( Left, new TimeSpan( 2, 0, -1 ), \n            &quot;TimeSpan( 2, 0, -1 )&quot; );\n        CompareTimeSpans( Left, TimeSpan.FromDays( 1.0 / 12D ), \n            &quot;TimeSpan.FromDays( 1 / 12 )&quot; );\n    } \n} \n\n/*\nThis example of the TimeSpan relational operators generates\nthe following output. It creates several different TimeSpan\nobjects and compares them with a 2-hour TimeSpan.\n\n         Left: TimeSpan( 2, 0, 0 )    02:00:00\n\n      Right: TimeSpan( 0, 120, 0 )    02:00:00\n                     Left == Right    True\n                     Left &gt;  Right    False\n                     Left &gt;= Right    True\n                     Left != Right    False\n                     Left &lt;  Right    False\n                     Left &lt;= Right    True\n\n        Right: TimeSpan( 2, 0, 1 )    02:00:01\n                     Left == Right    False\n                     Left &gt;  Right    False\n                     Left &gt;= Right    False\n                     Left != Right    True\n                     Left &lt;  Right    True\n                     Left &lt;= Right    True\n\n       Right: TimeSpan( 2, 0, -1 )    01:59:59\n                     Left == Right    False\n                     Left &gt;  Right    True\n                     Left &gt;= Right    True\n                     Left != Right    True\n                     Left &lt;  Right    False\n                     Left &lt;= Right    False\n\nRight: TimeSpan.FromDays( 1 / 12 )    02:00:00\n                     Left == Right    True\n                     Left &gt;  Right    False\n                     Left &gt;= Right    True\n                     Left != Right    False\n                     Left &lt;  Right    False\n                     Left &lt;= Right    True\n*/ \n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.RelationalOps#1\">&#39; Example of the TimeSpan relational operators.\nImports System\nImports Microsoft.VisualBasic\n\nModule TSRelationalOpsDemo\n    \n    Const dataFmt As String = &quot;{0,-47}{1}&quot;\n\n    &#39; Compare TimeSpan parameters, and display them with the results.\n    Sub CompareTimeSpans( Left As TimeSpan, Right As TimeSpan, _\n        RightText As String )\n\n        Console.WriteLine( )\n        Console.WriteLine( dataFmt, &quot;Right: &quot; &amp; RightText, Right )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan.op_Equality( Left, Right )&quot;, _\n            TimeSpan.op_Equality( Left, Right ) )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan.op_GreaterThan( Left, Right )&quot;, _\n            TimeSpan.op_GreaterThan( Left, Right ) )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan.op_GreaterThanOrEqual( Left, Right )&quot;, _\n            TimeSpan.op_GreaterThanOrEqual( Left, Right ) )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan.op_Inequality( Left, Right )&quot;, _\n            TimeSpan.op_Inequality( Left, Right ) )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan.op_LessThan( Left, Right )&quot;, _\n            TimeSpan.op_LessThan( Left, Right ) )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan.op_LessThanOrEqual( Left, Right )&quot;, _\n            TimeSpan.op_LessThanOrEqual( Left, Right ) )\n    End Sub \n        \n    Sub Main( )\n        Dim Left As New TimeSpan( 2, 0, 0 )\n            \n        Console.WriteLine( _\n            &quot;This example of the TimeSpan relational operators &quot; &amp; _\n            &quot;generates &quot; &amp; vbCrLf &amp; &quot;the following output. It &quot; &amp; _\n            &quot;creates several different TimeSpan &quot; &amp; vbCrLf &amp; _\n            &quot;objects and compares them with a 2-hour &quot; &amp; _\n            &quot;TimeSpan.&quot; &amp; vbCrLf )\n        Console.WriteLine( dataFmt, &quot;Left: TimeSpan( 2, 0, 0 )&quot;, Left )\n            \n        &#39; Create objects to compare with a 2-hour TimeSpan.\n        CompareTimeSpans( Left, New TimeSpan( 0, 120, 0 ), _\n            &quot;TimeSpan( 0, 120, 0 )&quot; )\n        CompareTimeSpans( Left, New TimeSpan( 2, 0, 1 ), _\n            &quot;TimeSpan( 2, 0, 1 )&quot; )\n        CompareTimeSpans( Left, New TimeSpan( 2, 0, - 1 ), _\n            &quot;TimeSpan( 2, 0, -1 )&quot; )\n        CompareTimeSpans( Left, TimeSpan.FromDays( 1.0 / 12.0 ), _\n            &quot;TimeSpan.FromDays( 1 / 12 )&quot; )\n    End Sub \nEnd Module \n\n&#39; This example of the TimeSpan relational operators generates\n&#39; the following output. It creates several different TimeSpan\n&#39; objects and compares them with a 2-hour TimeSpan.\n&#39; \n&#39; Left: TimeSpan( 2, 0, 0 )                      02:00:00\n&#39; \n&#39; Right: TimeSpan( 0, 120, 0 )                   02:00:00\n&#39; TimeSpan.op_Equality( Left, Right )            True\n&#39; TimeSpan.op_GreaterThan( Left, Right )         False\n&#39; TimeSpan.op_GreaterThanOrEqual( Left, Right )  True\n&#39; TimeSpan.op_Inequality( Left, Right )          False\n&#39; TimeSpan.op_LessThan( Left, Right )            False\n&#39; TimeSpan.op_LessThanOrEqual( Left, Right )     True\n&#39; \n&#39; Right: TimeSpan( 2, 0, 1 )                     02:00:01\n&#39; TimeSpan.op_Equality( Left, Right )            False\n&#39; TimeSpan.op_GreaterThan( Left, Right )         False\n&#39; TimeSpan.op_GreaterThanOrEqual( Left, Right )  False\n&#39; TimeSpan.op_Inequality( Left, Right )          True\n&#39; TimeSpan.op_LessThan( Left, Right )            True\n&#39; TimeSpan.op_LessThanOrEqual( Left, Right )     True\n&#39; \n&#39; Right: TimeSpan( 2, 0, -1 )                    01:59:59\n&#39; TimeSpan.op_Equality( Left, Right )            False\n&#39; TimeSpan.op_GreaterThan( Left, Right )         True\n&#39; TimeSpan.op_GreaterThanOrEqual( Left, Right )  True\n&#39; TimeSpan.op_Inequality( Left, Right )          True\n&#39; TimeSpan.op_LessThan( Left, Right )            False\n&#39; TimeSpan.op_LessThanOrEqual( Left, Right )     False\n&#39; \n&#39; Right: TimeSpan.FromDays( 1 / 12 )             02:00:00\n&#39; TimeSpan.op_Equality( Left, Right )            True\n&#39; TimeSpan.op_GreaterThan( Left, Right )         False\n&#39; TimeSpan.op_GreaterThanOrEqual( Left, Right )  True\n&#39; TimeSpan.op_Inequality( Left, Right )          False\n&#39; TimeSpan.op_LessThan( Left, Right )            False\n&#39; TimeSpan.op_LessThanOrEqual( Left, Right )     True\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.TimeSpan.RelationalOps#1\">// Example of the TimeSpan relational operators.\nusing namespace System;\nconst __wchar_t * protoFmt = L&quot;{0,35}    {1}&quot;;\n\n// Compare TimeSpan parameters, and display them with the results.\nvoid CompareTimeSpans( TimeSpan Left, TimeSpan Right, String^ RightText )\n{\n   String^ dataFmt = gcnew String( protoFmt );\n   Console::WriteLine();\n   Console::WriteLine( dataFmt, String::Concat( &quot;Right: &quot;, RightText ), Right );\n   Console::WriteLine( dataFmt, &quot;Left == Right&quot;, Left == Right );\n   Console::WriteLine( dataFmt, &quot;Left &gt;  Right&quot;, Left &gt; Right );\n   Console::WriteLine( dataFmt, &quot;Left &gt;= Right&quot;, Left &gt;= Right );\n   Console::WriteLine( dataFmt, &quot;Left != Right&quot;, Left != Right );\n   Console::WriteLine( dataFmt, &quot;Left &lt;  Right&quot;, Left &lt; Right );\n   Console::WriteLine( dataFmt, &quot;Left &lt;= Right&quot;, Left &lt;= Right );\n}\n\nint main()\n{\n   TimeSpan Left = TimeSpan(2,0,0);\n   Console::WriteLine( &quot;This example of the TimeSpan relational operators &quot;\n   &quot;generates <br>the following output. It creates several &quot;\n   &quot;different TimeSpan <br>objects and compares them with &quot;\n   &quot;a 2-hour TimeSpan.<br>&quot; );\n   Console::WriteLine( gcnew String( protoFmt ), &quot;Left: TimeSpan( 2, 0, 0 )&quot;, Left );\n   \n   // Create objects to compare with a 2-hour TimeSpan.\n   CompareTimeSpans( Left, TimeSpan(0,120,0), &quot;TimeSpan( 0, 120, 0 )&quot; );\n   CompareTimeSpans( Left, TimeSpan(2,0,1), &quot;TimeSpan( 2, 0, 1 )&quot; );\n   CompareTimeSpans( Left, TimeSpan(2,0,-1), &quot;TimeSpan( 2, 0, -1 )&quot; );\n   CompareTimeSpans( Left, TimeSpan::FromDays( 1.0 / 12. ), &quot;TimeSpan::FromDays( 1 / 12 )&quot; );\n}\n\n/*\nThis example of the TimeSpan relational operators generates\nthe following output. It creates several different TimeSpan\nobjects and compares them with a 2-hour TimeSpan.\n\n          Left: TimeSpan( 2, 0, 0 )    02:00:00\n\n       Right: TimeSpan( 0, 120, 0 )    02:00:00\n                      Left == Right    True\n                      Left &gt;  Right    False\n                      Left &gt;= Right    True\n                      Left != Right    False\n                      Left &lt;  Right    False\n                      Left &lt;= Right    True\n\n         Right: TimeSpan( 2, 0, 1 )    02:00:01\n                      Left == Right    False\n                      Left &gt;  Right    False\n                      Left &gt;= Right    False\n                      Left != Right    True\n                      Left &lt;  Right    True\n                      Left &lt;= Right    True\n\n        Right: TimeSpan( 2, 0, -1 )    01:59:59\n                      Left == Right    False\n                      Left &gt;  Right    True\n                      Left &gt;= Right    True\n                      Left != Right    True\n                      Left &lt;  Right    False\n                      Left &lt;= Right    False\n\nRight: TimeSpan::FromDays( 1 / 12 )    02:00:00\n                      Left == Right    True\n                      Left &gt;  Right    False\n                      Left &gt;= Right    True\n                      Left != Right    False\n                      Left &lt;  Right    False\n                      Left &lt;= Right    True\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_op_LessThan_System_TimeSpan_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_TimeSpan_op_LessThan_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_LessThan(TimeSpan,TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether a specified <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> is less than another specified <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_LessThan (TimeSpan t1, TimeSpan t2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>t1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first time interval to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>t2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second time interval to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the value of <code>t1</code> is less than the value of <code>t2</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example compares several <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> objects to a reference <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> using the LessThan operator.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeSpan.RelationalOps#1\">// Example of the TimeSpan relational operators.\nusing System;\n\nclass TSRelationalOpsDemo\n{\n    const string dataFmt = &quot;{0,34}    {1}&quot; ;\n\n    // Compare TimeSpan parameters, and display them with the results.\n    static void CompareTimeSpans( TimeSpan Left, TimeSpan Right, \n        string RightText )\n    {\n        Console.WriteLine( );\n        Console.WriteLine( dataFmt, &quot;Right: &quot; + RightText, Right );\n        Console.WriteLine( dataFmt, &quot;Left == Right&quot;, Left == Right );\n        Console.WriteLine( dataFmt, &quot;Left &gt;  Right&quot;, Left &gt; Right );\n        Console.WriteLine( dataFmt, &quot;Left &gt;= Right&quot;, Left &gt;= Right );\n        Console.WriteLine( dataFmt, &quot;Left != Right&quot;, Left != Right );\n        Console.WriteLine( dataFmt, &quot;Left &lt;  Right&quot;, Left &lt; Right );\n        Console.WriteLine( dataFmt, &quot;Left &lt;= Right&quot;, Left &lt;= Right );\n    }\n\n    static void Main( )\n    {\n        TimeSpan Left = new TimeSpan( 2, 0, 0 );\n\n        Console.WriteLine(\n            &quot;This example of the TimeSpan relational operators &quot; +\n            &quot;generates <br>the following output. It creates several &quot; +\n            &quot;different TimeSpan <br>objects and compares them with &quot; +\n            &quot;a 2-hour TimeSpan.<br>&quot; );\n        Console.WriteLine( dataFmt, \n            &quot;Left: TimeSpan( 2, 0, 0 )&quot;, Left );\n\n        // Create objects to compare with a 2-hour TimeSpan.\n        CompareTimeSpans( Left, new TimeSpan( 0, 120, 0 ), \n            &quot;TimeSpan( 0, 120, 0 )&quot; );\n        CompareTimeSpans( Left, new TimeSpan( 2, 0, 1 ), \n            &quot;TimeSpan( 2, 0, 1 )&quot; );\n        CompareTimeSpans( Left, new TimeSpan( 2, 0, -1 ), \n            &quot;TimeSpan( 2, 0, -1 )&quot; );\n        CompareTimeSpans( Left, TimeSpan.FromDays( 1.0 / 12D ), \n            &quot;TimeSpan.FromDays( 1 / 12 )&quot; );\n    } \n} \n\n/*\nThis example of the TimeSpan relational operators generates\nthe following output. It creates several different TimeSpan\nobjects and compares them with a 2-hour TimeSpan.\n\n         Left: TimeSpan( 2, 0, 0 )    02:00:00\n\n      Right: TimeSpan( 0, 120, 0 )    02:00:00\n                     Left == Right    True\n                     Left &gt;  Right    False\n                     Left &gt;= Right    True\n                     Left != Right    False\n                     Left &lt;  Right    False\n                     Left &lt;= Right    True\n\n        Right: TimeSpan( 2, 0, 1 )    02:00:01\n                     Left == Right    False\n                     Left &gt;  Right    False\n                     Left &gt;= Right    False\n                     Left != Right    True\n                     Left &lt;  Right    True\n                     Left &lt;= Right    True\n\n       Right: TimeSpan( 2, 0, -1 )    01:59:59\n                     Left == Right    False\n                     Left &gt;  Right    True\n                     Left &gt;= Right    True\n                     Left != Right    True\n                     Left &lt;  Right    False\n                     Left &lt;= Right    False\n\nRight: TimeSpan.FromDays( 1 / 12 )    02:00:00\n                     Left == Right    True\n                     Left &gt;  Right    False\n                     Left &gt;= Right    True\n                     Left != Right    False\n                     Left &lt;  Right    False\n                     Left &lt;= Right    True\n*/ \n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.RelationalOps#1\">&#39; Example of the TimeSpan relational operators.\nImports System\nImports Microsoft.VisualBasic\n\nModule TSRelationalOpsDemo\n    \n    Const dataFmt As String = &quot;{0,-47}{1}&quot;\n\n    &#39; Compare TimeSpan parameters, and display them with the results.\n    Sub CompareTimeSpans( Left As TimeSpan, Right As TimeSpan, _\n        RightText As String )\n\n        Console.WriteLine( )\n        Console.WriteLine( dataFmt, &quot;Right: &quot; &amp; RightText, Right )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan.op_Equality( Left, Right )&quot;, _\n            TimeSpan.op_Equality( Left, Right ) )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan.op_GreaterThan( Left, Right )&quot;, _\n            TimeSpan.op_GreaterThan( Left, Right ) )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan.op_GreaterThanOrEqual( Left, Right )&quot;, _\n            TimeSpan.op_GreaterThanOrEqual( Left, Right ) )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan.op_Inequality( Left, Right )&quot;, _\n            TimeSpan.op_Inequality( Left, Right ) )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan.op_LessThan( Left, Right )&quot;, _\n            TimeSpan.op_LessThan( Left, Right ) )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan.op_LessThanOrEqual( Left, Right )&quot;, _\n            TimeSpan.op_LessThanOrEqual( Left, Right ) )\n    End Sub \n        \n    Sub Main( )\n        Dim Left As New TimeSpan( 2, 0, 0 )\n            \n        Console.WriteLine( _\n            &quot;This example of the TimeSpan relational operators &quot; &amp; _\n            &quot;generates &quot; &amp; vbCrLf &amp; &quot;the following output. It &quot; &amp; _\n            &quot;creates several different TimeSpan &quot; &amp; vbCrLf &amp; _\n            &quot;objects and compares them with a 2-hour &quot; &amp; _\n            &quot;TimeSpan.&quot; &amp; vbCrLf )\n        Console.WriteLine( dataFmt, &quot;Left: TimeSpan( 2, 0, 0 )&quot;, Left )\n            \n        &#39; Create objects to compare with a 2-hour TimeSpan.\n        CompareTimeSpans( Left, New TimeSpan( 0, 120, 0 ), _\n            &quot;TimeSpan( 0, 120, 0 )&quot; )\n        CompareTimeSpans( Left, New TimeSpan( 2, 0, 1 ), _\n            &quot;TimeSpan( 2, 0, 1 )&quot; )\n        CompareTimeSpans( Left, New TimeSpan( 2, 0, - 1 ), _\n            &quot;TimeSpan( 2, 0, -1 )&quot; )\n        CompareTimeSpans( Left, TimeSpan.FromDays( 1.0 / 12.0 ), _\n            &quot;TimeSpan.FromDays( 1 / 12 )&quot; )\n    End Sub \nEnd Module \n\n&#39; This example of the TimeSpan relational operators generates\n&#39; the following output. It creates several different TimeSpan\n&#39; objects and compares them with a 2-hour TimeSpan.\n&#39; \n&#39; Left: TimeSpan( 2, 0, 0 )                      02:00:00\n&#39; \n&#39; Right: TimeSpan( 0, 120, 0 )                   02:00:00\n&#39; TimeSpan.op_Equality( Left, Right )            True\n&#39; TimeSpan.op_GreaterThan( Left, Right )         False\n&#39; TimeSpan.op_GreaterThanOrEqual( Left, Right )  True\n&#39; TimeSpan.op_Inequality( Left, Right )          False\n&#39; TimeSpan.op_LessThan( Left, Right )            False\n&#39; TimeSpan.op_LessThanOrEqual( Left, Right )     True\n&#39; \n&#39; Right: TimeSpan( 2, 0, 1 )                     02:00:01\n&#39; TimeSpan.op_Equality( Left, Right )            False\n&#39; TimeSpan.op_GreaterThan( Left, Right )         False\n&#39; TimeSpan.op_GreaterThanOrEqual( Left, Right )  False\n&#39; TimeSpan.op_Inequality( Left, Right )          True\n&#39; TimeSpan.op_LessThan( Left, Right )            True\n&#39; TimeSpan.op_LessThanOrEqual( Left, Right )     True\n&#39; \n&#39; Right: TimeSpan( 2, 0, -1 )                    01:59:59\n&#39; TimeSpan.op_Equality( Left, Right )            False\n&#39; TimeSpan.op_GreaterThan( Left, Right )         True\n&#39; TimeSpan.op_GreaterThanOrEqual( Left, Right )  True\n&#39; TimeSpan.op_Inequality( Left, Right )          True\n&#39; TimeSpan.op_LessThan( Left, Right )            False\n&#39; TimeSpan.op_LessThanOrEqual( Left, Right )     False\n&#39; \n&#39; Right: TimeSpan.FromDays( 1 / 12 )             02:00:00\n&#39; TimeSpan.op_Equality( Left, Right )            True\n&#39; TimeSpan.op_GreaterThan( Left, Right )         False\n&#39; TimeSpan.op_GreaterThanOrEqual( Left, Right )  True\n&#39; TimeSpan.op_Inequality( Left, Right )          False\n&#39; TimeSpan.op_LessThan( Left, Right )            False\n&#39; TimeSpan.op_LessThanOrEqual( Left, Right )     True\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.TimeSpan.RelationalOps#1\">// Example of the TimeSpan relational operators.\nusing namespace System;\nconst __wchar_t * protoFmt = L&quot;{0,35}    {1}&quot;;\n\n// Compare TimeSpan parameters, and display them with the results.\nvoid CompareTimeSpans( TimeSpan Left, TimeSpan Right, String^ RightText )\n{\n   String^ dataFmt = gcnew String( protoFmt );\n   Console::WriteLine();\n   Console::WriteLine( dataFmt, String::Concat( &quot;Right: &quot;, RightText ), Right );\n   Console::WriteLine( dataFmt, &quot;Left == Right&quot;, Left == Right );\n   Console::WriteLine( dataFmt, &quot;Left &gt;  Right&quot;, Left &gt; Right );\n   Console::WriteLine( dataFmt, &quot;Left &gt;= Right&quot;, Left &gt;= Right );\n   Console::WriteLine( dataFmt, &quot;Left != Right&quot;, Left != Right );\n   Console::WriteLine( dataFmt, &quot;Left &lt;  Right&quot;, Left &lt; Right );\n   Console::WriteLine( dataFmt, &quot;Left &lt;= Right&quot;, Left &lt;= Right );\n}\n\nint main()\n{\n   TimeSpan Left = TimeSpan(2,0,0);\n   Console::WriteLine( &quot;This example of the TimeSpan relational operators &quot;\n   &quot;generates <br>the following output. It creates several &quot;\n   &quot;different TimeSpan <br>objects and compares them with &quot;\n   &quot;a 2-hour TimeSpan.<br>&quot; );\n   Console::WriteLine( gcnew String( protoFmt ), &quot;Left: TimeSpan( 2, 0, 0 )&quot;, Left );\n   \n   // Create objects to compare with a 2-hour TimeSpan.\n   CompareTimeSpans( Left, TimeSpan(0,120,0), &quot;TimeSpan( 0, 120, 0 )&quot; );\n   CompareTimeSpans( Left, TimeSpan(2,0,1), &quot;TimeSpan( 2, 0, 1 )&quot; );\n   CompareTimeSpans( Left, TimeSpan(2,0,-1), &quot;TimeSpan( 2, 0, -1 )&quot; );\n   CompareTimeSpans( Left, TimeSpan::FromDays( 1.0 / 12. ), &quot;TimeSpan::FromDays( 1 / 12 )&quot; );\n}\n\n/*\nThis example of the TimeSpan relational operators generates\nthe following output. It creates several different TimeSpan\nobjects and compares them with a 2-hour TimeSpan.\n\n          Left: TimeSpan( 2, 0, 0 )    02:00:00\n\n       Right: TimeSpan( 0, 120, 0 )    02:00:00\n                      Left == Right    True\n                      Left &gt;  Right    False\n                      Left &gt;= Right    True\n                      Left != Right    False\n                      Left &lt;  Right    False\n                      Left &lt;= Right    True\n\n         Right: TimeSpan( 2, 0, 1 )    02:00:01\n                      Left == Right    False\n                      Left &gt;  Right    False\n                      Left &gt;= Right    False\n                      Left != Right    True\n                      Left &lt;  Right    True\n                      Left &lt;= Right    True\n\n        Right: TimeSpan( 2, 0, -1 )    01:59:59\n                      Left == Right    False\n                      Left &gt;  Right    True\n                      Left &gt;= Right    True\n                      Left != Right    True\n                      Left &lt;  Right    False\n                      Left &lt;= Right    False\n\nRight: TimeSpan::FromDays( 1 / 12 )    02:00:00\n                      Left == Right    True\n                      Left &gt;  Right    False\n                      Left &gt;= Right    True\n                      Left != Right    False\n                      Left &lt;  Right    False\n                      Left &lt;= Right    True\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_op_LessThanOrEqual_System_TimeSpan_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_TimeSpan_op_LessThanOrEqual_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_LessThanOrEqual(TimeSpan,TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether a specified <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> is less than or equal to another specified <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_LessThanOrEqual (TimeSpan t1, TimeSpan t2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>t1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first time interval to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>t2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second time interval to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the value of <code>t1</code> is less than or equal to the value of <code>t2</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example compares several <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> objects to a reference <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> using the LessThanOrEqual operator.  </p>\n<pre><code class=\"lang-cs\" name=\"System.TimeSpan.RelationalOps#1\">// Example of the TimeSpan relational operators.\nusing System;\n\nclass TSRelationalOpsDemo\n{\n    const string dataFmt = &quot;{0,34}    {1}&quot; ;\n\n    // Compare TimeSpan parameters, and display them with the results.\n    static void CompareTimeSpans( TimeSpan Left, TimeSpan Right, \n        string RightText )\n    {\n        Console.WriteLine( );\n        Console.WriteLine( dataFmt, &quot;Right: &quot; + RightText, Right );\n        Console.WriteLine( dataFmt, &quot;Left == Right&quot;, Left == Right );\n        Console.WriteLine( dataFmt, &quot;Left &gt;  Right&quot;, Left &gt; Right );\n        Console.WriteLine( dataFmt, &quot;Left &gt;= Right&quot;, Left &gt;= Right );\n        Console.WriteLine( dataFmt, &quot;Left != Right&quot;, Left != Right );\n        Console.WriteLine( dataFmt, &quot;Left &lt;  Right&quot;, Left &lt; Right );\n        Console.WriteLine( dataFmt, &quot;Left &lt;= Right&quot;, Left &lt;= Right );\n    }\n\n    static void Main( )\n    {\n        TimeSpan Left = new TimeSpan( 2, 0, 0 );\n\n        Console.WriteLine(\n            &quot;This example of the TimeSpan relational operators &quot; +\n            &quot;generates <br>the following output. It creates several &quot; +\n            &quot;different TimeSpan <br>objects and compares them with &quot; +\n            &quot;a 2-hour TimeSpan.<br>&quot; );\n        Console.WriteLine( dataFmt, \n            &quot;Left: TimeSpan( 2, 0, 0 )&quot;, Left );\n\n        // Create objects to compare with a 2-hour TimeSpan.\n        CompareTimeSpans( Left, new TimeSpan( 0, 120, 0 ), \n            &quot;TimeSpan( 0, 120, 0 )&quot; );\n        CompareTimeSpans( Left, new TimeSpan( 2, 0, 1 ), \n            &quot;TimeSpan( 2, 0, 1 )&quot; );\n        CompareTimeSpans( Left, new TimeSpan( 2, 0, -1 ), \n            &quot;TimeSpan( 2, 0, -1 )&quot; );\n        CompareTimeSpans( Left, TimeSpan.FromDays( 1.0 / 12D ), \n            &quot;TimeSpan.FromDays( 1 / 12 )&quot; );\n    } \n} \n\n/*\nThis example of the TimeSpan relational operators generates\nthe following output. It creates several different TimeSpan\nobjects and compares them with a 2-hour TimeSpan.\n\n         Left: TimeSpan( 2, 0, 0 )    02:00:00\n\n      Right: TimeSpan( 0, 120, 0 )    02:00:00\n                     Left == Right    True\n                     Left &gt;  Right    False\n                     Left &gt;= Right    True\n                     Left != Right    False\n                     Left &lt;  Right    False\n                     Left &lt;= Right    True\n\n        Right: TimeSpan( 2, 0, 1 )    02:00:01\n                     Left == Right    False\n                     Left &gt;  Right    False\n                     Left &gt;= Right    False\n                     Left != Right    True\n                     Left &lt;  Right    True\n                     Left &lt;= Right    True\n\n       Right: TimeSpan( 2, 0, -1 )    01:59:59\n                     Left == Right    False\n                     Left &gt;  Right    True\n                     Left &gt;= Right    True\n                     Left != Right    True\n                     Left &lt;  Right    False\n                     Left &lt;= Right    False\n\nRight: TimeSpan.FromDays( 1 / 12 )    02:00:00\n                     Left == Right    True\n                     Left &gt;  Right    False\n                     Left &gt;= Right    True\n                     Left != Right    False\n                     Left &lt;  Right    False\n                     Left &lt;= Right    True\n*/ \n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.RelationalOps#1\">&#39; Example of the TimeSpan relational operators.\nImports System\nImports Microsoft.VisualBasic\n\nModule TSRelationalOpsDemo\n    \n    Const dataFmt As String = &quot;{0,-47}{1}&quot;\n\n    &#39; Compare TimeSpan parameters, and display them with the results.\n    Sub CompareTimeSpans( Left As TimeSpan, Right As TimeSpan, _\n        RightText As String )\n\n        Console.WriteLine( )\n        Console.WriteLine( dataFmt, &quot;Right: &quot; &amp; RightText, Right )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan.op_Equality( Left, Right )&quot;, _\n            TimeSpan.op_Equality( Left, Right ) )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan.op_GreaterThan( Left, Right )&quot;, _\n            TimeSpan.op_GreaterThan( Left, Right ) )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan.op_GreaterThanOrEqual( Left, Right )&quot;, _\n            TimeSpan.op_GreaterThanOrEqual( Left, Right ) )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan.op_Inequality( Left, Right )&quot;, _\n            TimeSpan.op_Inequality( Left, Right ) )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan.op_LessThan( Left, Right )&quot;, _\n            TimeSpan.op_LessThan( Left, Right ) )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan.op_LessThanOrEqual( Left, Right )&quot;, _\n            TimeSpan.op_LessThanOrEqual( Left, Right ) )\n    End Sub \n        \n    Sub Main( )\n        Dim Left As New TimeSpan( 2, 0, 0 )\n            \n        Console.WriteLine( _\n            &quot;This example of the TimeSpan relational operators &quot; &amp; _\n            &quot;generates &quot; &amp; vbCrLf &amp; &quot;the following output. It &quot; &amp; _\n            &quot;creates several different TimeSpan &quot; &amp; vbCrLf &amp; _\n            &quot;objects and compares them with a 2-hour &quot; &amp; _\n            &quot;TimeSpan.&quot; &amp; vbCrLf )\n        Console.WriteLine( dataFmt, &quot;Left: TimeSpan( 2, 0, 0 )&quot;, Left )\n            \n        &#39; Create objects to compare with a 2-hour TimeSpan.\n        CompareTimeSpans( Left, New TimeSpan( 0, 120, 0 ), _\n            &quot;TimeSpan( 0, 120, 0 )&quot; )\n        CompareTimeSpans( Left, New TimeSpan( 2, 0, 1 ), _\n            &quot;TimeSpan( 2, 0, 1 )&quot; )\n        CompareTimeSpans( Left, New TimeSpan( 2, 0, - 1 ), _\n            &quot;TimeSpan( 2, 0, -1 )&quot; )\n        CompareTimeSpans( Left, TimeSpan.FromDays( 1.0 / 12.0 ), _\n            &quot;TimeSpan.FromDays( 1 / 12 )&quot; )\n    End Sub \nEnd Module \n\n&#39; This example of the TimeSpan relational operators generates\n&#39; the following output. It creates several different TimeSpan\n&#39; objects and compares them with a 2-hour TimeSpan.\n&#39; \n&#39; Left: TimeSpan( 2, 0, 0 )                      02:00:00\n&#39; \n&#39; Right: TimeSpan( 0, 120, 0 )                   02:00:00\n&#39; TimeSpan.op_Equality( Left, Right )            True\n&#39; TimeSpan.op_GreaterThan( Left, Right )         False\n&#39; TimeSpan.op_GreaterThanOrEqual( Left, Right )  True\n&#39; TimeSpan.op_Inequality( Left, Right )          False\n&#39; TimeSpan.op_LessThan( Left, Right )            False\n&#39; TimeSpan.op_LessThanOrEqual( Left, Right )     True\n&#39; \n&#39; Right: TimeSpan( 2, 0, 1 )                     02:00:01\n&#39; TimeSpan.op_Equality( Left, Right )            False\n&#39; TimeSpan.op_GreaterThan( Left, Right )         False\n&#39; TimeSpan.op_GreaterThanOrEqual( Left, Right )  False\n&#39; TimeSpan.op_Inequality( Left, Right )          True\n&#39; TimeSpan.op_LessThan( Left, Right )            True\n&#39; TimeSpan.op_LessThanOrEqual( Left, Right )     True\n&#39; \n&#39; Right: TimeSpan( 2, 0, -1 )                    01:59:59\n&#39; TimeSpan.op_Equality( Left, Right )            False\n&#39; TimeSpan.op_GreaterThan( Left, Right )         True\n&#39; TimeSpan.op_GreaterThanOrEqual( Left, Right )  True\n&#39; TimeSpan.op_Inequality( Left, Right )          True\n&#39; TimeSpan.op_LessThan( Left, Right )            False\n&#39; TimeSpan.op_LessThanOrEqual( Left, Right )     False\n&#39; \n&#39; Right: TimeSpan.FromDays( 1 / 12 )             02:00:00\n&#39; TimeSpan.op_Equality( Left, Right )            True\n&#39; TimeSpan.op_GreaterThan( Left, Right )         False\n&#39; TimeSpan.op_GreaterThanOrEqual( Left, Right )  True\n&#39; TimeSpan.op_Inequality( Left, Right )          False\n&#39; TimeSpan.op_LessThan( Left, Right )            False\n&#39; TimeSpan.op_LessThanOrEqual( Left, Right )     True\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.TimeSpan.RelationalOps#1\">// Example of the TimeSpan relational operators.\nusing namespace System;\nconst __wchar_t * protoFmt = L&quot;{0,35}    {1}&quot;;\n\n// Compare TimeSpan parameters, and display them with the results.\nvoid CompareTimeSpans( TimeSpan Left, TimeSpan Right, String^ RightText )\n{\n   String^ dataFmt = gcnew String( protoFmt );\n   Console::WriteLine();\n   Console::WriteLine( dataFmt, String::Concat( &quot;Right: &quot;, RightText ), Right );\n   Console::WriteLine( dataFmt, &quot;Left == Right&quot;, Left == Right );\n   Console::WriteLine( dataFmt, &quot;Left &gt;  Right&quot;, Left &gt; Right );\n   Console::WriteLine( dataFmt, &quot;Left &gt;= Right&quot;, Left &gt;= Right );\n   Console::WriteLine( dataFmt, &quot;Left != Right&quot;, Left != Right );\n   Console::WriteLine( dataFmt, &quot;Left &lt;  Right&quot;, Left &lt; Right );\n   Console::WriteLine( dataFmt, &quot;Left &lt;= Right&quot;, Left &lt;= Right );\n}\n\nint main()\n{\n   TimeSpan Left = TimeSpan(2,0,0);\n   Console::WriteLine( &quot;This example of the TimeSpan relational operators &quot;\n   &quot;generates <br>the following output. It creates several &quot;\n   &quot;different TimeSpan <br>objects and compares them with &quot;\n   &quot;a 2-hour TimeSpan.<br>&quot; );\n   Console::WriteLine( gcnew String( protoFmt ), &quot;Left: TimeSpan( 2, 0, 0 )&quot;, Left );\n   \n   // Create objects to compare with a 2-hour TimeSpan.\n   CompareTimeSpans( Left, TimeSpan(0,120,0), &quot;TimeSpan( 0, 120, 0 )&quot; );\n   CompareTimeSpans( Left, TimeSpan(2,0,1), &quot;TimeSpan( 2, 0, 1 )&quot; );\n   CompareTimeSpans( Left, TimeSpan(2,0,-1), &quot;TimeSpan( 2, 0, -1 )&quot; );\n   CompareTimeSpans( Left, TimeSpan::FromDays( 1.0 / 12. ), &quot;TimeSpan::FromDays( 1 / 12 )&quot; );\n}\n\n/*\nThis example of the TimeSpan relational operators generates\nthe following output. It creates several different TimeSpan\nobjects and compares them with a 2-hour TimeSpan.\n\n          Left: TimeSpan( 2, 0, 0 )    02:00:00\n\n       Right: TimeSpan( 0, 120, 0 )    02:00:00\n                      Left == Right    True\n                      Left &gt;  Right    False\n                      Left &gt;= Right    True\n                      Left != Right    False\n                      Left &lt;  Right    False\n                      Left &lt;= Right    True\n\n         Right: TimeSpan( 2, 0, 1 )    02:00:01\n                      Left == Right    False\n                      Left &gt;  Right    False\n                      Left &gt;= Right    False\n                      Left != Right    True\n                      Left &lt;  Right    True\n                      Left &lt;= Right    True\n\n        Right: TimeSpan( 2, 0, -1 )    01:59:59\n                      Left == Right    False\n                      Left &gt;  Right    True\n                      Left &gt;= Right    True\n                      Left != Right    True\n                      Left &lt;  Right    False\n                      Left &lt;= Right    False\n\nRight: TimeSpan::FromDays( 1 / 12 )    02:00:00\n                      Left == Right    True\n                      Left &gt;  Right    False\n                      Left &gt;= Right    True\n                      Left != Right    False\n                      Left &lt;  Right    False\n                      Left &lt;= Right    True\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_op_Subtraction_System_TimeSpan_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_TimeSpan_op_Subtraction_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Subtraction(TimeSpan,TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Subtracts a specified <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> from another specified <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TimeSpan op_Subtraction (TimeSpan t1, TimeSpan t2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>t1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The minuend.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>t2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The subtrahend.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </div>\r\n                  <p>An object whose value is the result of the value of <code>t1</code> minus the value of <code>t2</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The return value is less than <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> or greater than <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> subtraction operator to calculate the total length of the weekly work day. It also uses the <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> addition operator to compute the total time of the daily breaks before using it in a subtraction operation to compute the total actual daily working time.  </p>\n<pre><code class=\"lang-vb\" name=\"System.TimeSpan.Operators#2\">Module Example\n   Public Sub Main()\n      Dim startWork As New TimeSpan(08,00,00)\n      Dim endWork As New TimeSpan(18,30,00)\n      Dim lunchBreak As New TimeSpan(1, 0, 0)\n      Dim breaks As New TimeSpan(0, 30, 0)\n      \n      Console.WriteLine(&quot;Length of work day: {0}&quot;, \n                        endWork - startWork)\n      Console.WriteLine(&quot;Actual time worked: {0}&quot;,\n                        endwork - startwork - (lun\\chBreak + breaks))                  \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;     Length of work day: 10:30:00\n&#39;     Actual time worked: 09:00:00\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.Operators#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var startWork = new TimeSpan(08,00,00);\n      var endWork = new TimeSpan(18,30,00);\n      var lunchBreak = new TimeSpan(1, 0, 0);\n      var breaks = new TimeSpan(0, 30, 0);\n      \n      Console.WriteLine(&quot;Length of work day: {0}&quot;, \n                        endWork - startWork);\n      Console.WriteLine(&quot;Actual time worked: {0}&quot;,\n                        endWork - startWork - (lunchBreak + breaks));                  \n   }\n}\n// The example displays the following output:\n//     Length of work day: 10:30:00\n//     Actual time worked: 09:00:00\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_op_UnaryNegation_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_TimeSpan_op_UnaryNegation_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_UnaryNegation(TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> whose value is the negated value of the specified instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TimeSpan op_UnaryNegation (TimeSpan t);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>t</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The time interval to be negated.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </div>\r\n                  <p>An object that has the same numeric value as this instance, but the opposite sign.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The negated value of this instance cannot be represented by a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>; that is, the value of this instance is <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example applies the UnaryNegation operator to several <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> objects.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.TimeSpan.Dura_Nega_Unary#1\">// Example of the TimeSpan::Duration( ) and TimeSpan::Negate( ) methods,\n// and the TimeSpan Unary Negation and Unary Plus operators.\nusing namespace System;\nconst __wchar_t * protoFmt = L&quot;{0,22}{1,22}{2,22}&quot;;\nvoid ShowDurationNegate( TimeSpan interval )\n{\n   \n   // Display the TimeSpan value and the results of the \n   // Duration and Negate methods.\n   Console::WriteLine( gcnew String( protoFmt ), interval, interval.Duration(), interval.Negate() );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of TimeSpan::Duration( ), &quot;\n   &quot;TimeSpan::Negate( ), <br>and the TimeSpan Unary &quot;\n   &quot;Negation and Unary Plus operators <br>&quot;\n   &quot;generates the following output.<br>&quot; );\n   Console::WriteLine( gcnew String( protoFmt ), &quot;TimeSpan&quot;, &quot;Duration( )&quot;, &quot;Negate( )&quot; );\n   Console::WriteLine( gcnew String( protoFmt ), &quot;--------&quot;, &quot;-----------&quot;, &quot;---------&quot; );\n   \n   // Create TimeSpan objects and apply the Unary Negation\n   // and Unary Plus operators to them.\n   ShowDurationNegate( TimeSpan(1) );\n   ShowDurationNegate( TimeSpan( -1234567) );\n   ShowDurationNegate(  +TimeSpan(0,0,10,-20,-30) );\n   ShowDurationNegate(  +TimeSpan(0,-10,20,-30,40) );\n   ShowDurationNegate(  -TimeSpan(1,10,20,40,160) );\n   ShowDurationNegate(  -TimeSpan( -10,-20,-30,-40,-50) );\n}\n\n/*\nThis example of TimeSpan::Duration( ), TimeSpan::Negate( ),\nand the TimeSpan Unary Negation and Unary Plus operators\ngenerates the following output.\n\n              TimeSpan           Duration( )             Negate( )\n              --------           -----------             ---------\n      00:00:00.0000001      00:00:00.0000001     -00:00:00.0000001\n     -00:00:00.1234567      00:00:00.1234567      00:00:00.1234567\n      00:09:39.9700000      00:09:39.9700000     -00:09:39.9700000\n     -09:40:29.9600000      09:40:29.9600000      09:40:29.9600000\n   -1.10:20:40.1600000    1.10:20:40.1600000    1.10:20:40.1600000\n   10.20:30:40.0500000   10.20:30:40.0500000  -10.20:30:40.0500000\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.Dura_Nega_Unary#1\">// Example of the TimeSpan.Duration( ) and TimeSpan.Negate( ) methods,\n// and the TimeSpan Unary Negation and Unary Plus operators.\nusing System;\n\nclass DuraNegaUnaryDemo\n{\n    const string dataFmt = &quot;{0,22}{1,22}{2,22}&quot; ;\n\n    static void ShowDurationNegate( TimeSpan interval )\n    {\n        // Display the TimeSpan value and the results of the \n        // Duration and Negate methods.\n        Console.WriteLine( dataFmt, \n            interval, interval.Duration( ), interval.Negate( ) );\n    }\n\n    static void Main()\n    {\n        Console.WriteLine(\n            &quot;This example of TimeSpan.Duration( ), &quot; +\n            &quot;TimeSpan.Negate( ), <br>and the TimeSpan Unary &quot; +\n            &quot;Negation and Unary Plus operators <br>&quot; +\n            &quot;generates the following output.<br>&quot; );\n        Console.WriteLine( dataFmt, \n            &quot;TimeSpan&quot;, &quot;Duration( )&quot;, &quot;Negate( )&quot; );\n        Console.WriteLine( dataFmt, \n            &quot;--------&quot;, &quot;-----------&quot;, &quot;---------&quot; );\n\n        // Create TimeSpan objects and apply the Unary Negation\n        // and Unary Plus operators to them.\n        ShowDurationNegate( new TimeSpan( 1 ) );\n        ShowDurationNegate( new TimeSpan( -1234567 ) );\n        ShowDurationNegate( \n            + new TimeSpan( 0, 0, 10, -20, -30 ) );\n        ShowDurationNegate( \n            + new TimeSpan( 0, -10, 20, -30, 40 ) );\n        ShowDurationNegate( \n            - new TimeSpan( 1, 10, 20, 40, 160 ) );\n        ShowDurationNegate( \n            - new TimeSpan( -10, -20, -30, -40, -50 ) );\n    } \n} \n\n/*\nThis example of TimeSpan.Duration( ), TimeSpan.Negate( ),\nand the TimeSpan Unary Negation and Unary Plus operators\ngenerates the following output.\n\n              TimeSpan           Duration( )             Negate( )\n              --------           -----------             ---------\n      00:00:00.0000001      00:00:00.0000001     -00:00:00.0000001\n     -00:00:00.1234567      00:00:00.1234567      00:00:00.1234567\n      00:09:39.9700000      00:09:39.9700000     -00:09:39.9700000\n     -09:40:29.9600000      09:40:29.9600000      09:40:29.9600000\n   -1.10:20:40.1600000    1.10:20:40.1600000    1.10:20:40.1600000\n   10.20:30:40.0500000   10.20:30:40.0500000  -10.20:30:40.0500000\n*/ \n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.Dura_Nega_Unary#1\">&#39; Example of the TimeSpan.Duration( ) and TimeSpan.Negate( ) methods,\n&#39; and the TimeSpan Unary Negation and Unary Plus operators.\nImports System\nImports Microsoft.VisualBasic\n\nModule DuraNegaUnaryDemo\n\n    Const dataFmt As String = &quot;{0,22}{1,22}{2,22}&quot;\n\n    Sub ShowDurationNegate( interval As TimeSpan )\n\n        &#39; Display the TimeSpan value and the results of the \n        &#39; Duration and Negate methods.\n        Console.WriteLine( dataFmt, _\n            interval, interval.Duration( ), interval.Negate( ) )\n    End Sub\n\n    Sub Main( )\n\n        Console.WriteLine( _\n            &quot;This example of TimeSpan.Duration( ), &quot; &amp; _\n            &quot;TimeSpan.Negate( ), &quot; &amp; vbCrLf &amp; _\n            &quot;and the TimeSpan Unary Negation and &quot; &amp; _\n            &quot;Unary Plus operators &quot; &amp; vbCrLf &amp; _\n            &quot;generates the following output.&quot; &amp; vbCrLf )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan&quot;, &quot;Duration( )&quot;, &quot;Negate( )&quot; )    \n        Console.WriteLine( dataFmt, _\n            &quot;--------&quot;, &quot;-----------&quot;, &quot;---------&quot; )    \n\n        &#39; Create TimeSpan objects and apply the Unary Negation\n        &#39; and Unary Plus operators to them.\n        ShowDurationNegate( new TimeSpan( 1 ) )\n        ShowDurationNegate( new TimeSpan( -1234567 ) )\n        ShowDurationNegate( TimeSpan.op_UnaryPlus( _\n            new TimeSpan( 0, 0, 10, -20, -30 ) ) )\n        ShowDurationNegate( TimeSpan.op_UnaryPlus( _\n            new TimeSpan( 0, -10, 20, -30, 40 ) ) )\n        ShowDurationNegate( TimeSpan.op_UnaryNegation( _\n            new TimeSpan( 1, 10, 20, 40, 160 ) ) )\n        ShowDurationNegate( TimeSpan.op_UnaryNegation( _\n            new TimeSpan( -10, -20, -30, -40, -50 ) ) )\n    End Sub \nEnd Module \n\n&#39; This example of TimeSpan.Duration( ), TimeSpan.Negate( ),\n&#39; and the TimeSpan Unary Negation and Unary Plus operators\n&#39; generates the following output.\n&#39; \n&#39;               TimeSpan           Duration( )             Negate( )\n&#39;               --------           -----------             ---------\n&#39;       00:00:00.0000001      00:00:00.0000001     -00:00:00.0000001\n&#39;      -00:00:00.1234567      00:00:00.1234567      00:00:00.1234567\n&#39;       00:09:39.9700000      00:09:39.9700000     -00:09:39.9700000\n&#39;      -09:40:29.9600000      09:40:29.9600000      09:40:29.9600000\n&#39;    -1.10:20:40.1600000    1.10:20:40.1600000    1.10:20:40.1600000\n&#39;    10.20:30:40.0500000   10.20:30:40.0500000  -10.20:30:40.0500000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TimeSpan_op_UnaryPlus_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_TimeSpan_op_UnaryPlus_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_UnaryPlus(TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the specified instance of <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TimeSpan op_UnaryPlus (TimeSpan t);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>t</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The time interval to return.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </div>\r\n                  <p>The time interval specified by <code>t</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example applies the UnaryPlus operator to several <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> objects.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.TimeSpan.Dura_Nega_Unary#1\">// Example of the TimeSpan::Duration( ) and TimeSpan::Negate( ) methods,\n// and the TimeSpan Unary Negation and Unary Plus operators.\nusing namespace System;\nconst __wchar_t * protoFmt = L&quot;{0,22}{1,22}{2,22}&quot;;\nvoid ShowDurationNegate( TimeSpan interval )\n{\n   \n   // Display the TimeSpan value and the results of the \n   // Duration and Negate methods.\n   Console::WriteLine( gcnew String( protoFmt ), interval, interval.Duration(), interval.Negate() );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of TimeSpan::Duration( ), &quot;\n   &quot;TimeSpan::Negate( ), <br>and the TimeSpan Unary &quot;\n   &quot;Negation and Unary Plus operators <br>&quot;\n   &quot;generates the following output.<br>&quot; );\n   Console::WriteLine( gcnew String( protoFmt ), &quot;TimeSpan&quot;, &quot;Duration( )&quot;, &quot;Negate( )&quot; );\n   Console::WriteLine( gcnew String( protoFmt ), &quot;--------&quot;, &quot;-----------&quot;, &quot;---------&quot; );\n   \n   // Create TimeSpan objects and apply the Unary Negation\n   // and Unary Plus operators to them.\n   ShowDurationNegate( TimeSpan(1) );\n   ShowDurationNegate( TimeSpan( -1234567) );\n   ShowDurationNegate(  +TimeSpan(0,0,10,-20,-30) );\n   ShowDurationNegate(  +TimeSpan(0,-10,20,-30,40) );\n   ShowDurationNegate(  -TimeSpan(1,10,20,40,160) );\n   ShowDurationNegate(  -TimeSpan( -10,-20,-30,-40,-50) );\n}\n\n/*\nThis example of TimeSpan::Duration( ), TimeSpan::Negate( ),\nand the TimeSpan Unary Negation and Unary Plus operators\ngenerates the following output.\n\n              TimeSpan           Duration( )             Negate( )\n              --------           -----------             ---------\n      00:00:00.0000001      00:00:00.0000001     -00:00:00.0000001\n     -00:00:00.1234567      00:00:00.1234567      00:00:00.1234567\n      00:09:39.9700000      00:09:39.9700000     -00:09:39.9700000\n     -09:40:29.9600000      09:40:29.9600000      09:40:29.9600000\n   -1.10:20:40.1600000    1.10:20:40.1600000    1.10:20:40.1600000\n   10.20:30:40.0500000   10.20:30:40.0500000  -10.20:30:40.0500000\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.TimeSpan.Dura_Nega_Unary#1\">// Example of the TimeSpan.Duration( ) and TimeSpan.Negate( ) methods,\n// and the TimeSpan Unary Negation and Unary Plus operators.\nusing System;\n\nclass DuraNegaUnaryDemo\n{\n    const string dataFmt = &quot;{0,22}{1,22}{2,22}&quot; ;\n\n    static void ShowDurationNegate( TimeSpan interval )\n    {\n        // Display the TimeSpan value and the results of the \n        // Duration and Negate methods.\n        Console.WriteLine( dataFmt, \n            interval, interval.Duration( ), interval.Negate( ) );\n    }\n\n    static void Main()\n    {\n        Console.WriteLine(\n            &quot;This example of TimeSpan.Duration( ), &quot; +\n            &quot;TimeSpan.Negate( ), <br>and the TimeSpan Unary &quot; +\n            &quot;Negation and Unary Plus operators <br>&quot; +\n            &quot;generates the following output.<br>&quot; );\n        Console.WriteLine( dataFmt, \n            &quot;TimeSpan&quot;, &quot;Duration( )&quot;, &quot;Negate( )&quot; );\n        Console.WriteLine( dataFmt, \n            &quot;--------&quot;, &quot;-----------&quot;, &quot;---------&quot; );\n\n        // Create TimeSpan objects and apply the Unary Negation\n        // and Unary Plus operators to them.\n        ShowDurationNegate( new TimeSpan( 1 ) );\n        ShowDurationNegate( new TimeSpan( -1234567 ) );\n        ShowDurationNegate( \n            + new TimeSpan( 0, 0, 10, -20, -30 ) );\n        ShowDurationNegate( \n            + new TimeSpan( 0, -10, 20, -30, 40 ) );\n        ShowDurationNegate( \n            - new TimeSpan( 1, 10, 20, 40, 160 ) );\n        ShowDurationNegate( \n            - new TimeSpan( -10, -20, -30, -40, -50 ) );\n    } \n} \n\n/*\nThis example of TimeSpan.Duration( ), TimeSpan.Negate( ),\nand the TimeSpan Unary Negation and Unary Plus operators\ngenerates the following output.\n\n              TimeSpan           Duration( )             Negate( )\n              --------           -----------             ---------\n      00:00:00.0000001      00:00:00.0000001     -00:00:00.0000001\n     -00:00:00.1234567      00:00:00.1234567      00:00:00.1234567\n      00:09:39.9700000      00:09:39.9700000     -00:09:39.9700000\n     -09:40:29.9600000      09:40:29.9600000      09:40:29.9600000\n   -1.10:20:40.1600000    1.10:20:40.1600000    1.10:20:40.1600000\n   10.20:30:40.0500000   10.20:30:40.0500000  -10.20:30:40.0500000\n*/ \n</code></pre><pre><code class=\"lang-vb\" name=\"System.TimeSpan.Dura_Nega_Unary#1\">&#39; Example of the TimeSpan.Duration( ) and TimeSpan.Negate( ) methods,\n&#39; and the TimeSpan Unary Negation and Unary Plus operators.\nImports System\nImports Microsoft.VisualBasic\n\nModule DuraNegaUnaryDemo\n\n    Const dataFmt As String = &quot;{0,22}{1,22}{2,22}&quot;\n\n    Sub ShowDurationNegate( interval As TimeSpan )\n\n        &#39; Display the TimeSpan value and the results of the \n        &#39; Duration and Negate methods.\n        Console.WriteLine( dataFmt, _\n            interval, interval.Duration( ), interval.Negate( ) )\n    End Sub\n\n    Sub Main( )\n\n        Console.WriteLine( _\n            &quot;This example of TimeSpan.Duration( ), &quot; &amp; _\n            &quot;TimeSpan.Negate( ), &quot; &amp; vbCrLf &amp; _\n            &quot;and the TimeSpan Unary Negation and &quot; &amp; _\n            &quot;Unary Plus operators &quot; &amp; vbCrLf &amp; _\n            &quot;generates the following output.&quot; &amp; vbCrLf )\n        Console.WriteLine( dataFmt, _\n            &quot;TimeSpan&quot;, &quot;Duration( )&quot;, &quot;Negate( )&quot; )    \n        Console.WriteLine( dataFmt, _\n            &quot;--------&quot;, &quot;-----------&quot;, &quot;---------&quot; )    \n\n        &#39; Create TimeSpan objects and apply the Unary Negation\n        &#39; and Unary Plus operators to them.\n        ShowDurationNegate( new TimeSpan( 1 ) )\n        ShowDurationNegate( new TimeSpan( -1234567 ) )\n        ShowDurationNegate( TimeSpan.op_UnaryPlus( _\n            new TimeSpan( 0, 0, 10, -20, -30 ) ) )\n        ShowDurationNegate( TimeSpan.op_UnaryPlus( _\n            new TimeSpan( 0, -10, 20, -30, 40 ) ) )\n        ShowDurationNegate( TimeSpan.op_UnaryNegation( _\n            new TimeSpan( 1, 10, 20, 40, 160 ) ) )\n        ShowDurationNegate( TimeSpan.op_UnaryNegation( _\n            new TimeSpan( -10, -20, -30, -40, -50 ) ) )\n    End Sub \nEnd Module \n\n&#39; This example of TimeSpan.Duration( ), TimeSpan.Negate( ),\n&#39; and the TimeSpan Unary Negation and Unary Plus operators\n&#39; generates the following output.\n&#39; \n&#39;               TimeSpan           Duration( )             Negate( )\n&#39;               --------           -----------             ---------\n&#39;       00:00:00.0000001      00:00:00.0000001     -00:00:00.0000001\n&#39;      -00:00:00.1234567      00:00:00.1234567      00:00:00.1234567\n&#39;       00:09:39.9700000      00:09:39.9700000     -00:09:39.9700000\n&#39;      -09:40:29.9600000      09:40:29.9600000      09:40:29.9600000\n&#39;    -1.10:20:40.1600000    1.10:20:40.1600000    1.10:20:40.1600000\n&#39;    10.20:30:40.0500000   10.20:30:40.0500000  -10.20:30:40.0500000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.TimeSpan.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.TimeSpan.yml\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan..ctor\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.Add\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.Compare\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.CompareTo\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.Days\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.Duration\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.Equals\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.FromDays\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.FromHours\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.FromMilliseconds\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.FromMinutes\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.FromSeconds\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.FromTicks\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.Hours\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.MaxValue\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.Milliseconds\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.Minutes\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.MinValue\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.Negate\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.op_Addition\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.op_op_Addition\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.op_Equality\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.op_op_Equality\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.op_GreaterThan\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.op_op_GreaterThan\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.op_GreaterThanOrEqual\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.op_op_GreaterThanOrEqual\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.op_op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.op_LessThan\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.op_op_LessThan\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.op_LessThanOrEqual\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.op_op_LessThanOrEqual\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.op_Subtraction\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.op_op_Subtraction\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.op_UnaryNegation\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.op_op_UnaryNegation\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.op_UnaryPlus\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.op_op_UnaryPlus\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.Parse\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.ParseExact\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.Seconds\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.Subtract\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.Ticks\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.TicksPerDay\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.TicksPerHour\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.TicksPerMillisecond\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.TicksPerMinute\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.TicksPerSecond\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.ToString\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.TotalDays\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.TotalHours\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.TotalMilliseconds\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.TotalMinutes\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.TotalSeconds\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.TryParse\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.TryParseExact\">\r\n<meta name=\"APIName\" content=\"System.TimeSpan.Zero\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"c9f368cc-ebcd-4507-5c5b-04dbd171dcc9\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System\\TimeSpan.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a time interval.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.TimeSpan\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.TimeSpan.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.TimeSpan.yml","open_to_public_contributors":true,"api_name":["System.TimeSpan","System.TimeSpan..ctor","System.TimeSpan.Add","System.TimeSpan.Compare","System.TimeSpan.CompareTo","System.TimeSpan.Days","System.TimeSpan.Duration","System.TimeSpan.Equals","System.TimeSpan.FromDays","System.TimeSpan.FromHours","System.TimeSpan.FromMilliseconds","System.TimeSpan.FromMinutes","System.TimeSpan.FromSeconds","System.TimeSpan.FromTicks","System.TimeSpan.GetHashCode","System.TimeSpan.Hours","System.TimeSpan.MaxValue","System.TimeSpan.Milliseconds","System.TimeSpan.Minutes","System.TimeSpan.MinValue","System.TimeSpan.Negate","System.TimeSpan.op_Addition","System.TimeSpan.op_op_Addition","System.TimeSpan.op_Equality","System.TimeSpan.op_op_Equality","System.TimeSpan.op_GreaterThan","System.TimeSpan.op_op_GreaterThan","System.TimeSpan.op_GreaterThanOrEqual","System.TimeSpan.op_op_GreaterThanOrEqual","System.TimeSpan.op_Inequality","System.TimeSpan.op_op_Inequality","System.TimeSpan.op_LessThan","System.TimeSpan.op_op_LessThan","System.TimeSpan.op_LessThanOrEqual","System.TimeSpan.op_op_LessThanOrEqual","System.TimeSpan.op_Subtraction","System.TimeSpan.op_op_Subtraction","System.TimeSpan.op_UnaryNegation","System.TimeSpan.op_op_UnaryNegation","System.TimeSpan.op_UnaryPlus","System.TimeSpan.op_op_UnaryPlus","System.TimeSpan.Parse","System.TimeSpan.ParseExact","System.TimeSpan.Seconds","System.TimeSpan.Subtract","System.TimeSpan.Ticks","System.TimeSpan.TicksPerDay","System.TimeSpan.TicksPerHour","System.TimeSpan.TicksPerMillisecond","System.TimeSpan.TicksPerMinute","System.TimeSpan.TicksPerSecond","System.TimeSpan.ToString","System.TimeSpan.TotalDays","System.TimeSpan.TotalHours","System.TimeSpan.TotalMilliseconds","System.TimeSpan.TotalMinutes","System.TimeSpan.TotalSeconds","System.TimeSpan.TryParse","System.TimeSpan.TryParseExact","System.TimeSpan.Zero"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.TimeSpan","System::TimeSpan","System.TimeSpan.#ctor","System::TimeSpan::#ctor","System.TimeSpan.Add","System::TimeSpan::Add","System.TimeSpan.Compare","System::TimeSpan::Compare","System.TimeSpan.CompareTo","System::TimeSpan::CompareTo","System.TimeSpan.Days","System::TimeSpan::Days","System.TimeSpan.Duration","System::TimeSpan::Duration","System.TimeSpan.Equals","System::TimeSpan::Equals","System.TimeSpan.FromDays","System::TimeSpan::FromDays","System.TimeSpan.FromHours","System::TimeSpan::FromHours","System.TimeSpan.FromMilliseconds","System::TimeSpan::FromMilliseconds","System.TimeSpan.FromMinutes","System::TimeSpan::FromMinutes","System.TimeSpan.FromSeconds","System::TimeSpan::FromSeconds","System.TimeSpan.FromTicks","System::TimeSpan::FromTicks","System.TimeSpan.GetHashCode","System::TimeSpan::GetHashCode","System.TimeSpan.Hours","System::TimeSpan::Hours","System.TimeSpan.MaxValue","System::TimeSpan::MaxValue","System.TimeSpan.Milliseconds","System::TimeSpan::Milliseconds","System.TimeSpan.Minutes","System::TimeSpan::Minutes","System.TimeSpan.MinValue","System::TimeSpan::MinValue","System.TimeSpan.Negate","System::TimeSpan::Negate","System.TimeSpan.op_Addition","System::TimeSpan::op_Addition","System.TimeSpan.op_Equality","System::TimeSpan::op_Equality","System.TimeSpan.op_GreaterThan","System::TimeSpan::op_GreaterThan","System.TimeSpan.op_GreaterThanOrEqual","System::TimeSpan::op_GreaterThanOrEqual","System.TimeSpan.op_Inequality","System::TimeSpan::op_Inequality","System.TimeSpan.op_LessThan","System::TimeSpan::op_LessThan","System.TimeSpan.op_LessThanOrEqual","System::TimeSpan::op_LessThanOrEqual","System.TimeSpan.op_Subtraction","System::TimeSpan::op_Subtraction","System.TimeSpan.op_UnaryNegation","System::TimeSpan::op_UnaryNegation","System.TimeSpan.op_UnaryPlus","System::TimeSpan::op_UnaryPlus","System.TimeSpan.Parse","System::TimeSpan::Parse","System.TimeSpan.ParseExact","System::TimeSpan::ParseExact","System.TimeSpan.Seconds","System::TimeSpan::Seconds","System.TimeSpan.Subtract","System::TimeSpan::Subtract","System.TimeSpan.Ticks","System::TimeSpan::Ticks","System.TimeSpan.TicksPerDay","System::TimeSpan::TicksPerDay","System.TimeSpan.TicksPerHour","System::TimeSpan::TicksPerHour","System.TimeSpan.TicksPerMillisecond","System::TimeSpan::TicksPerMillisecond","System.TimeSpan.TicksPerMinute","System::TimeSpan::TicksPerMinute","System.TimeSpan.TicksPerSecond","System::TimeSpan::TicksPerSecond","System.TimeSpan.ToString","System::TimeSpan::ToString","System.TimeSpan.TotalDays","System::TimeSpan::TotalDays","System.TimeSpan.TotalHours","System::TimeSpan::TotalHours","System.TimeSpan.TotalMilliseconds","System::TimeSpan::TotalMilliseconds","System.TimeSpan.TotalMinutes","System::TimeSpan::TotalMinutes","System.TimeSpan.TotalSeconds","System::TimeSpan::TotalSeconds","System.TimeSpan.TryParse","System::TimeSpan::TryParse","System.TimeSpan.TryParseExact","System::TimeSpan::TryParseExact","System.TimeSpan.Zero","System::TimeSpan::Zero"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"c9f368cc-ebcd-4507-5c5b-04dbd171dcc9","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System\\TimeSpan.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/TimeSpan.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"TimeSpan struct | Microsoft Docs","_op_ogTitle":"TimeSpan struct","description":"Represents a time interval.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.TimeSpan","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.timespan","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.timespan","fileRelativePath":"System.TimeSpan.html"},"themesRelativePathToOutputRoot":"_themes/"}