{"content":"    \r\n    <h1 id=\"System_Security_AccessControl_SemaphoreSecurity\">\r\n      <span class=\"lang-csharp\">SemaphoreSecurity</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents the Windows access control security for a named semaphore. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(false)]\npublic sealed class SemaphoreSecurity : System.Security.AccessControl.NativeObjectSecurity</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity\" data-linktype=\"relative-path\">ObjectSecurity</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.commonobjectsecurity\" data-linktype=\"relative-path\">CommonObjectSecurity</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l3\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.nativeobjectsecurity\" data-linktype=\"relative-path\">System.Security.AccessControl.NativeObjectSecurity</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l4\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">SemaphoreSecurity</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.commonobjectsecurity#System_Security_AccessControl_CommonObjectSecurity_AddAccessRule_System_Security_AccessControl_AccessRule_\" data-linktype=\"relative-path\">AddAccessRule(AccessRule)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.commonobjectsecurity#System_Security_AccessControl_CommonObjectSecurity_AddAuditRule_System_Security_AccessControl_AuditRule_\" data-linktype=\"relative-path\">AddAuditRule(AuditRule)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.commonobjectsecurity#System_Security_AccessControl_CommonObjectSecurity_GetAccessRules_System_Boolean_System_Boolean_System_Type_\" data-linktype=\"relative-path\">GetAccessRules(Boolean,Boolean,Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.commonobjectsecurity#System_Security_AccessControl_CommonObjectSecurity_GetAuditRules_System_Boolean_System_Boolean_System_Type_\" data-linktype=\"relative-path\">GetAuditRules(Boolean,Boolean,Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.commonobjectsecurity#System_Security_AccessControl_CommonObjectSecurity_ModifyAccess_System_Security_AccessControl_AccessControlModification_System_Security_AccessControl_AccessRule_System_Boolean__\" data-linktype=\"relative-path\">ModifyAccess(AccessControlModification,AccessRule,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.commonobjectsecurity#System_Security_AccessControl_CommonObjectSecurity_ModifyAudit_System_Security_AccessControl_AccessControlModification_System_Security_AccessControl_AuditRule_System_Boolean__\" data-linktype=\"relative-path\">ModifyAudit(AccessControlModification,AuditRule,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.commonobjectsecurity#System_Security_AccessControl_CommonObjectSecurity_RemoveAccessRule_System_Security_AccessControl_AccessRule_\" data-linktype=\"relative-path\">RemoveAccessRule(AccessRule)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.commonobjectsecurity#System_Security_AccessControl_CommonObjectSecurity_RemoveAccessRuleAll_System_Security_AccessControl_AccessRule_\" data-linktype=\"relative-path\">RemoveAccessRuleAll(AccessRule)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.commonobjectsecurity#System_Security_AccessControl_CommonObjectSecurity_RemoveAccessRuleSpecific_System_Security_AccessControl_AccessRule_\" data-linktype=\"relative-path\">RemoveAccessRuleSpecific(AccessRule)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.commonobjectsecurity#System_Security_AccessControl_CommonObjectSecurity_RemoveAuditRule_System_Security_AccessControl_AuditRule_\" data-linktype=\"relative-path\">RemoveAuditRule(AuditRule)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.commonobjectsecurity#System_Security_AccessControl_CommonObjectSecurity_RemoveAuditRuleAll_System_Security_AccessControl_AuditRule_\" data-linktype=\"relative-path\">RemoveAuditRuleAll(AuditRule)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.commonobjectsecurity#System_Security_AccessControl_CommonObjectSecurity_RemoveAuditRuleSpecific_System_Security_AccessControl_AuditRule_\" data-linktype=\"relative-path\">RemoveAuditRuleSpecific(AuditRule)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.commonobjectsecurity#System_Security_AccessControl_CommonObjectSecurity_ResetAccessRule_System_Security_AccessControl_AccessRule_\" data-linktype=\"relative-path\">ResetAccessRule(AccessRule)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.commonobjectsecurity#System_Security_AccessControl_CommonObjectSecurity_SetAccessRule_System_Security_AccessControl_AccessRule_\" data-linktype=\"relative-path\">SetAccessRule(AccessRule)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.commonobjectsecurity#System_Security_AccessControl_CommonObjectSecurity_SetAuditRule_System_Security_AccessControl_AuditRule_\" data-linktype=\"relative-path\">SetAuditRule(AuditRule)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.nativeobjectsecurity#System_Security_AccessControl_NativeObjectSecurity_Persist_System_Runtime_InteropServices_SafeHandle_System_Security_AccessControl_AccessControlSections_\" data-linktype=\"relative-path\">Persist(SafeHandle,AccessControlSections)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.nativeobjectsecurity#System_Security_AccessControl_NativeObjectSecurity_Persist_System_Runtime_InteropServices_SafeHandle_System_Security_AccessControl_AccessControlSections_System_Object_\" data-linktype=\"relative-path\">Persist(SafeHandle,AccessControlSections,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.nativeobjectsecurity#System_Security_AccessControl_NativeObjectSecurity_Persist_System_String_System_Security_AccessControl_AccessControlSections_\" data-linktype=\"relative-path\">Persist(String,AccessControlSections)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.nativeobjectsecurity#System_Security_AccessControl_NativeObjectSecurity_Persist_System_String_System_Security_AccessControl_AccessControlSections_System_Object_\" data-linktype=\"relative-path\">Persist(String,AccessControlSections,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_AccessRulesModified\" data-linktype=\"relative-path\">AccessRulesModified</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_AreAccessRulesCanonical\" data-linktype=\"relative-path\">AreAccessRulesCanonical</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_AreAccessRulesProtected\" data-linktype=\"relative-path\">AreAccessRulesProtected</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_AreAuditRulesCanonical\" data-linktype=\"relative-path\">AreAuditRulesCanonical</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_AreAuditRulesProtected\" data-linktype=\"relative-path\">AreAuditRulesProtected</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_AuditRulesModified\" data-linktype=\"relative-path\">AuditRulesModified</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_GetGroup_System_Type_\" data-linktype=\"relative-path\">GetGroup(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_GetOwner_System_Type_\" data-linktype=\"relative-path\">GetOwner(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_GetSecurityDescriptorBinaryForm\" data-linktype=\"relative-path\">GetSecurityDescriptorBinaryForm()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_GetSecurityDescriptorSddlForm_System_Security_AccessControl_AccessControlSections_\" data-linktype=\"relative-path\">GetSecurityDescriptorSddlForm(AccessControlSections)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_GroupModified\" data-linktype=\"relative-path\">GroupModified</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_IsContainer\" data-linktype=\"relative-path\">IsContainer</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_IsDS\" data-linktype=\"relative-path\">IsDS</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_IsSddlConversionSupported\" data-linktype=\"relative-path\">IsSddlConversionSupported()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_ModifyAccessRule_System_Security_AccessControl_AccessControlModification_System_Security_AccessControl_AccessRule_System_Boolean__\" data-linktype=\"relative-path\">ModifyAccessRule(AccessControlModification,AccessRule,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_ModifyAuditRule_System_Security_AccessControl_AccessControlModification_System_Security_AccessControl_AuditRule_System_Boolean__\" data-linktype=\"relative-path\">ModifyAuditRule(AccessControlModification,AuditRule,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_OwnerModified\" data-linktype=\"relative-path\">OwnerModified</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_Persist_System_Boolean_System_String_System_Security_AccessControl_AccessControlSections_\" data-linktype=\"relative-path\">Persist(Boolean,String,AccessControlSections)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_PurgeAccessRules_System_Security_Principal_IdentityReference_\" data-linktype=\"relative-path\">PurgeAccessRules(IdentityReference)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_PurgeAuditRules_System_Security_Principal_IdentityReference_\" data-linktype=\"relative-path\">PurgeAuditRules(IdentityReference)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_ReadLock\" data-linktype=\"relative-path\">ReadLock()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_ReadUnlock\" data-linktype=\"relative-path\">ReadUnlock()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_SetAccessRuleProtection_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">SetAccessRuleProtection(Boolean,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_SetAuditRuleProtection_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">SetAuditRuleProtection(Boolean,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_SetGroup_System_Security_Principal_IdentityReference_\" data-linktype=\"relative-path\">SetGroup(IdentityReference)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_SetOwner_System_Security_Principal_IdentityReference_\" data-linktype=\"relative-path\">SetOwner(IdentityReference)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_SetSecurityDescriptorBinaryForm_System_Byte___\" data-linktype=\"relative-path\">SetSecurityDescriptorBinaryForm(Byte[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_SetSecurityDescriptorBinaryForm_System_Byte___System_Security_AccessControl_AccessControlSections_\" data-linktype=\"relative-path\">SetSecurityDescriptorBinaryForm(Byte[],AccessControlSections)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_SetSecurityDescriptorSddlForm_System_String_\" data-linktype=\"relative-path\">SetSecurityDescriptorSddlForm(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_SetSecurityDescriptorSddlForm_System_String_System_Security_AccessControl_AccessControlSections_\" data-linktype=\"relative-path\">SetSecurityDescriptorSddlForm(String,AccessControlSections)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_WriteLock\" data-linktype=\"relative-path\">WriteLock()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_WriteUnlock\" data-linktype=\"relative-path\">WriteUnlock()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>A SemaphoreSecurity object specifies access rights for a named system semaphore, and also specifies how access attempts are audited. Access rights to the semaphore are expressed as rules, with each access rule represented by a <a class=\"xref\" href=\"system.security.accesscontrol.semaphoreaccessrule\" data-linktype=\"relative-path\">SemaphoreAccessRule</a> object. Each auditing rule is represented by a <a class=\"xref\" href=\"system.security.accesscontrol.semaphoreauditrule\" data-linktype=\"relative-path\">SemaphoreAuditRule</a> object.  </p>\n<p> This mirrors the underlying Windows security system, in which each securable object has at most one discretionary access control list (DACL) that controls access to the secured object, and at most one system access control list (SACL) that specifies which access attempts are audited. The DACL and SACL are ordered lists of access control entries (ACE) that specify access and auditing for users and groups. A <a class=\"xref\" href=\"system.security.accesscontrol.semaphoreaccessrule\" data-linktype=\"relative-path\">SemaphoreAccessRule</a> or <a class=\"xref\" href=\"system.security.accesscontrol.semaphoreauditrule\" data-linktype=\"relative-path\">SemaphoreAuditRule</a> object might represent more than one ACE.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> A <a class=\"xref\" href=\"system.threading.semaphore\" data-linktype=\"relative-path\">Semaphore</a> object can represent a local semaphore or a named system semaphore. Windows access control security is meaningful only for named system semaphores.  </p>\n</div>\n<p> The SemaphoreSecurity, <a class=\"xref\" href=\"system.security.accesscontrol.semaphoreaccessrule\" data-linktype=\"relative-path\">SemaphoreAccessRule</a>, and <a class=\"xref\" href=\"system.security.accesscontrol.semaphoreauditrule\" data-linktype=\"relative-path\">SemaphoreAuditRule</a> classes hide the implementation details of ACLs and ACEs. They allow you to ignore the seventeen different ACE types and the complexity of correctly maintaining inheritance and propagation of access rights. These objects are also designed to prevent the following common access control errors:  </p>\n<ul>\n<li><p>Creating a security descriptor with a null DACL. A null reference to a DACL allows any user to add access rules to an object, potentially creating a denial-of-service attack. A new SemaphoreSecurity object always starts with an empty DACL, which denies all access for all users.  </p>\n</li>\n<li><p>Violating the canonical ordering of ACEs. If the ACE list in the DACL is not kept in the canonical order, users might inadvertently be given access to the secured object. For example, denied access rights must always appear before allowed access rights. SemaphoreSecurity objects maintain the correct order internally.  </p>\n</li>\n<li><p>Manipulating security descriptor flags, which should be under resource manager control only.  </p>\n</li>\n<li><p>Creating invalid combinations of ACE flags.  </p>\n</li>\n<li><p>Manipulating inherited ACEs. Inheritance and propagation are handled by the resource manager, in response to changes you make to access and audit rules.  </p>\n</li>\n<li><p>Inserting meaningless ACEs into ACLs.  </p>\n<p>The only capabilities not supported by the .NET security objects are dangerous activities that should be avoided by the majority of application developers, such as the following:  </p>\n</li>\n<li><p>Low-level tasks that are normally performed by the resource manager.  </p>\n</li>\n<li><p>Adding or removing access control entries in ways that do not maintain the canonical ordering.  </p>\n<p>To modify Windows access control security for a named semaphore, use the <a class=\"xref\" href=\"system.threading.semaphore#System_Threading_Semaphore_GetAccessControl_\" data-linktype=\"relative-path\">GetAccessControl</a> method to get the SemaphoreSecurity object. Modify the security object by adding and removing rules, and then use the <a class=\"xref\" href=\"system.threading.semaphore#System_Threading_Semaphore_SetAccessControl_\" data-linktype=\"relative-path\">SetAccessControl</a> method to reattach it.  </p>\n</li>\n</ul>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Changes you make to a SemaphoreSecurity object do not affect the access levels of the named semaphore until you call the <a class=\"xref\" href=\"system.threading.semaphore#System_Threading_Semaphore_SetAccessControl_\" data-linktype=\"relative-path\">SetAccessControl</a> method to assign the altered security object to the named semaphore.  </p>\n</div>\n<p> To copy access control security from one semaphore to another, use the <a class=\"xref\" href=\"system.threading.semaphore#System_Threading_Semaphore_GetAccessControl_\" data-linktype=\"relative-path\">GetAccessControl</a> method to get a SemaphoreSecurity object representing the access and audit rules for the first semaphore, then use the <a class=\"xref\" href=\"system.threading.semaphore#System_Threading_Semaphore_SetAccessControl_\" data-linktype=\"relative-path\">SetAccessControl</a> method, or a constructor that accepts a SemaphoreSecurity object, to assign those rules to the second semaphore.  </p>\n<p> Users with an investment in the security descriptor definition language (SDDL) can use the <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_SetSecurityDescriptorSddlForm_\" data-linktype=\"relative-path\">SetSecurityDescriptorSddlForm</a> method to set access rules for a named semaphore, and the <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_GetSecurityDescriptorSddlForm_\" data-linktype=\"relative-path\">GetSecurityDescriptorSddlForm</a> method to obtain a string that represents the access rules in SDDL format. This is not recommended for new development.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Security on synchronization objects is not supported for Windows 98 or Windows Millennium Edition.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_AccessControl_SemaphoreSecurity__ctor\" data-linktype=\"self-bookmark\">SemaphoreSecurity()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.accesscontrol.semaphoresecurity\" data-linktype=\"relative-path\">SemaphoreSecurity</a> class with default values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_AccessControl_SemaphoreSecurity__ctor_System_String_System_Security_AccessControl_AccessControlSections_\" data-linktype=\"self-bookmark\">SemaphoreSecurity(String,AccessControlSections)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.accesscontrol.semaphoresecurity\" data-linktype=\"relative-path\">SemaphoreSecurity</a> class with the specified sections of the access control security rules from the system semaphore with the specified name.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_AccessControl_SemaphoreSecurity_AccessRightType\" data-linktype=\"self-bookmark\">AccessRightType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the enumeration that the <a class=\"xref\" href=\"system.security.accesscontrol.semaphoresecurity\" data-linktype=\"relative-path\">SemaphoreSecurity</a> class uses to represent access rights.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_AccessControl_SemaphoreSecurity_AccessRuleType\" data-linktype=\"self-bookmark\">AccessRuleType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the type that the <a class=\"xref\" href=\"system.security.accesscontrol.semaphoresecurity\" data-linktype=\"relative-path\">SemaphoreSecurity</a> class uses to represent access rules.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_AccessControl_SemaphoreSecurity_AuditRuleType\" data-linktype=\"self-bookmark\">AuditRuleType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the type that the <a class=\"xref\" href=\"system.security.accesscontrol.semaphoresecurity\" data-linktype=\"relative-path\">SemaphoreSecurity</a> class uses to represent audit rules.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_AccessControl_SemaphoreSecurity_AccessRuleFactory_System_Security_Principal_IdentityReference_System_Int32_System_Boolean_System_Security_AccessControl_InheritanceFlags_System_Security_AccessControl_PropagationFlags_System_Security_AccessControl_AccessControlType_\" data-linktype=\"self-bookmark\">AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new access control rule for the specified user, with the specified access rights, access control, and flags.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_AccessControl_SemaphoreSecurity_AddAccessRule_System_Security_AccessControl_SemaphoreAccessRule_\" data-linktype=\"self-bookmark\">AddAccessRule(SemaphoreAccessRule)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for a matching rule with which the new rule can be merged. If none are found, adds the new rule.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_AccessControl_SemaphoreSecurity_AddAuditRule_System_Security_AccessControl_SemaphoreAuditRule_\" data-linktype=\"self-bookmark\">AddAuditRule(SemaphoreAuditRule)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for an audit rule with which the new rule can be merged. If none are found, adds the new rule.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_AccessControl_SemaphoreSecurity_AuditRuleFactory_System_Security_Principal_IdentityReference_System_Int32_System_Boolean_System_Security_AccessControl_InheritanceFlags_System_Security_AccessControl_PropagationFlags_System_Security_AccessControl_AuditFlags_\" data-linktype=\"self-bookmark\">AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new audit rule, specifying the user the rule applies to, the access rights to audit, and the outcome that triggers the audit rule.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_AccessControl_SemaphoreSecurity_RemoveAccessRule_System_Security_AccessControl_SemaphoreAccessRule_\" data-linktype=\"self-bookmark\">RemoveAccessRule(SemaphoreAccessRule)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for an access control rule with the same user and <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> (allow or deny) as the specified rule, and with compatible inheritance and propagation flags; if such a rule is found, the rights contained in the specified access rule are removed from it.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_AccessControl_SemaphoreSecurity_RemoveAccessRuleAll_System_Security_AccessControl_SemaphoreAccessRule_\" data-linktype=\"self-bookmark\">RemoveAccessRuleAll(SemaphoreAccessRule)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for all access control rules with the same user and <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> (allow or deny) as the specified rule and, if found, removes them.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_AccessControl_SemaphoreSecurity_RemoveAccessRuleSpecific_System_Security_AccessControl_SemaphoreAccessRule_\" data-linktype=\"self-bookmark\">RemoveAccessRuleSpecific(SemaphoreAccessRule)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for an access control rule that exactly matches the specified rule and, if found, removes it.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_AccessControl_SemaphoreSecurity_RemoveAuditRule_System_Security_AccessControl_SemaphoreAuditRule_\" data-linktype=\"self-bookmark\">RemoveAuditRule(SemaphoreAuditRule)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for an audit control rule with the same user as the specified rule, and with compatible inheritance and propagation flags; if a compatible rule is found, the rights contained in the specified rule are removed from it.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_AccessControl_SemaphoreSecurity_RemoveAuditRuleAll_System_Security_AccessControl_SemaphoreAuditRule_\" data-linktype=\"self-bookmark\">RemoveAuditRuleAll(SemaphoreAuditRule)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for all audit rules with the same user as the specified rule and, if found, removes them.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_AccessControl_SemaphoreSecurity_RemoveAuditRuleSpecific_System_Security_AccessControl_SemaphoreAuditRule_\" data-linktype=\"self-bookmark\">RemoveAuditRuleSpecific(SemaphoreAuditRule)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for an audit rule that exactly matches the specified rule and, if found, removes it.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_AccessControl_SemaphoreSecurity_ResetAccessRule_System_Security_AccessControl_SemaphoreAccessRule_\" data-linktype=\"self-bookmark\">ResetAccessRule(SemaphoreAccessRule)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes all access control rules with the same user as the specified rule, regardless of <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a>, and then adds the specified rule.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_AccessControl_SemaphoreSecurity_SetAccessRule_System_Security_AccessControl_SemaphoreAccessRule_\" data-linktype=\"self-bookmark\">SetAccessRule(SemaphoreAccessRule)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes all access control rules with the same user and <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> (allow or deny) as the specified rule, and then adds the specified rule.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_AccessControl_SemaphoreSecurity_SetAuditRule_System_Security_AccessControl_SemaphoreAuditRule_\" data-linktype=\"self-bookmark\">SetAuditRule(SemaphoreAuditRule)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes all audit rules with the same user as the specified rule, regardless of the <a class=\"xref\" href=\"system.security.accesscontrol.auditflags\" data-linktype=\"relative-path\">AuditFlags</a> value, and then adds the specified rule.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_AccessControl_SemaphoreSecurity__ctor\">\r\n    \r\n            <a id=\"System_Security_AccessControl_SemaphoreSecurity__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SemaphoreSecurity()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.accesscontrol.semaphoresecurity\" data-linktype=\"relative-path\">SemaphoreSecurity</a> class with default values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SemaphoreSecurity ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This class is not supported on Windows 98 or Windows Millennium Edition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A new <a class=\"xref\" href=\"system.security.accesscontrol.semaphoresecurity\" data-linktype=\"relative-path\">SemaphoreSecurity</a> object always starts with an empty discretionary access list (DACL), which denies all access for all users.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_AccessControl_SemaphoreSecurity__ctor_System_String_System_Security_AccessControl_AccessControlSections_\">\r\n    \r\n            <a id=\"System_Security_AccessControl_SemaphoreSecurity__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SemaphoreSecurity(String,AccessControlSections)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.accesscontrol.semaphoresecurity\" data-linktype=\"relative-path\">SemaphoreSecurity</a> class with the specified sections of the access control security rules from the system semaphore with the specified name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SemaphoreSecurity (string name, System.Security.AccessControl.AccessControlSections includeSections);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the system semaphore whose access control security rules are to be retrieved.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>includeSections</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.accesscontrolsections\" data-linktype=\"relative-path\">AccessControlSections</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A combination of <a class=\"xref\" href=\"system.security.accesscontrol.accesscontrolsections\" data-linktype=\"relative-path\">AccessControlSections</a> flags specifying the sections to retrieve.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This class is not supported on Windows 98 or Windows Millennium Edition.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor allows you to obtain the access control security for a named system semaphore without first creating a <a class=\"xref\" href=\"system.threading.semaphore\" data-linktype=\"relative-path\">Semaphore</a> object.  </p>\n<p> Caution must be exercised when working with named system objects. If there is a system object named <code>name</code> that is not a semaphore, its control access security might be retrieved.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_AccessControl_SemaphoreSecurity_AccessRightType\">\r\n    \r\n            <a id=\"System_Security_AccessControl_SemaphoreSecurity_AccessRightType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AccessRightType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the enumeration that the <a class=\"xref\" href=\"system.security.accesscontrol.semaphoresecurity\" data-linktype=\"relative-path\">SemaphoreSecurity</a> class uses to represent access rights.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type AccessRightType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object representing the <a class=\"xref\" href=\"system.security.accesscontrol.semaphorerights\" data-linktype=\"relative-path\">SemaphoreRights</a> enumeration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Classes that derive from the <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity\" data-linktype=\"relative-path\">ObjectSecurity</a> class override the <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_AccessRightType_\" data-linktype=\"relative-path\">AccessRightType</a> property and return the type they use to represent access rights. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct enumeration type to use with each security object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_AccessControl_SemaphoreSecurity_AccessRuleType\">\r\n    \r\n            <a id=\"System_Security_AccessControl_SemaphoreSecurity_AccessRuleType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AccessRuleType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the type that the <a class=\"xref\" href=\"system.security.accesscontrol.semaphoresecurity\" data-linktype=\"relative-path\">SemaphoreSecurity</a> class uses to represent access rules.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type AccessRuleType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object representing the <a class=\"xref\" href=\"system.security.accesscontrol.semaphoreaccessrule\" data-linktype=\"relative-path\">SemaphoreAccessRule</a> class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Classes that derive from the <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity\" data-linktype=\"relative-path\">ObjectSecurity</a> class override the <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_AccessRuleType_\" data-linktype=\"relative-path\">AccessRuleType</a> property and return the type they use to represent access rules. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct access rule type to use with each security object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_AccessControl_SemaphoreSecurity_AuditRuleType\">\r\n    \r\n            <a id=\"System_Security_AccessControl_SemaphoreSecurity_AuditRuleType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AuditRuleType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the type that the <a class=\"xref\" href=\"system.security.accesscontrol.semaphoresecurity\" data-linktype=\"relative-path\">SemaphoreSecurity</a> class uses to represent audit rules.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type AuditRuleType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object representing the <a class=\"xref\" href=\"system.security.accesscontrol.semaphoreauditrule\" data-linktype=\"relative-path\">SemaphoreAuditRule</a> class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Classes that derive from the <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity\" data-linktype=\"relative-path\">ObjectSecurity</a> class override the <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_AuditRuleType_\" data-linktype=\"relative-path\">AuditRuleType</a> property and return the type they use to represent audit rights. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct audit rule type to use with each security object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_AccessControl_SemaphoreSecurity_AccessRuleFactory_System_Security_Principal_IdentityReference_System_Int32_System_Boolean_System_Security_AccessControl_InheritanceFlags_System_Security_AccessControl_PropagationFlags_System_Security_AccessControl_AccessControlType_\">\r\n    \r\n            <a id=\"System_Security_AccessControl_SemaphoreSecurity_AccessRuleFactory_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new access control rule for the specified user, with the specified access rights, access control, and flags.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>identityReference</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.principal.identityreference\" data-linktype=\"relative-path\">IdentityReference</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.security.principal.identityreference\" data-linktype=\"relative-path\">IdentityReference</a> that identifies the user or group the rule applies to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>accessMask</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of <a class=\"xref\" href=\"system.security.accesscontrol.semaphorerights\" data-linktype=\"relative-path\">SemaphoreRights</a> values specifying the access rights to allow or deny, cast to an integer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>isInherited</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Meaningless for named semaphores, because they have no hierarchy.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inheritanceFlags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.inheritanceflags\" data-linktype=\"relative-path\">InheritanceFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Meaningless for named semaphores, because they have no hierarchy.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>propagationFlags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.propagationflags\" data-linktype=\"relative-path\">PropagationFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Meaningless for named semaphores, because they have no hierarchy.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> values specifying whether the rights are allowed or denied.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.accessrule\" data-linktype=\"relative-path\">AccessRule</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.security.accesscontrol.semaphoreaccessrule\" data-linktype=\"relative-path\">SemaphoreAccessRule</a> object representing the specified rights for the specified user.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>accessMask</code>, <code>inheritanceFlags</code>, <code>propagationFlags</code>, or <code>type</code> specifies an invalid value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>identityReference</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>accessMask</code> is zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>identityReference</code> is neither of type <a class=\"xref\" href=\"system.security.principal.securityidentifier\" data-linktype=\"relative-path\">SecurityIdentifier</a>, nor of a type such as <a class=\"xref\" href=\"system.security.principal.ntaccount\" data-linktype=\"relative-path\">NTAccount</a> that can be converted to type <a class=\"xref\" href=\"system.security.principal.securityidentifier\" data-linktype=\"relative-path\">SecurityIdentifier</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The recommended way to create access control rules is to use the constructors of the <a class=\"xref\" href=\"system.security.accesscontrol.semaphoreaccessrule\" data-linktype=\"relative-path\">SemaphoreAccessRule</a> class.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Although inheritance and propagation flags are meaningless for named semaphores, it is still possible to specify them This is not recommended, because it needlessly complicates the maintenance of rules, for example by interfering with the combination of rules that would otherwise be compatible.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_AccessControl_SemaphoreSecurity_AddAccessRule_System_Security_AccessControl_SemaphoreAccessRule_\">\r\n    \r\n            <a id=\"System_Security_AccessControl_SemaphoreSecurity_AddAccessRule_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddAccessRule(SemaphoreAccessRule)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for a matching rule with which the new rule can be merged. If none are found, adds the new rule.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AddAccessRule (System.Security.AccessControl.SemaphoreAccessRule rule);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rule</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.semaphoreaccessrule\" data-linktype=\"relative-path\">SemaphoreAccessRule</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The access control rule to add.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>rule</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The AddAccessRule method searches for rules with the same user or group and the same <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> as <code>rule</code>. If none are found, <code>rule</code> is added. If a matching rule is found, the rights in <code>rule</code> are merged with the existing rule.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the separation between <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> rules and <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> rules, and shows the combination of rights in compatible rules. The example creates a <a class=\"xref\" href=\"system.security.accesscontrol.semaphoresecurity\" data-linktype=\"relative-path\">SemaphoreSecurity</a> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> rule.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This example does not attach the security object to a <a class=\"xref\" href=\"system.threading.semaphore\" data-linktype=\"relative-path\">Semaphore</a> object. Examples that attach security objects can be found in <a class=\"xref\" href=\"system.threading.semaphore#System_Threading_Semaphore_GetAccessControl_\" data-linktype=\"relative-path\">GetAccessControl</a> and <a class=\"xref\" href=\"system.threading.semaphore#System_Threading_Semaphore_SetAccessControl_\" data-linktype=\"relative-path\">SetAccessControl</a>.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1\">using System;\nusing System.Threading;\nusing System.Security.AccessControl;\nusing System.Security.Principal;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Create a string representing the current user.\n        string user = Environment.UserDomainName + &quot;\\\\&quot; + \n            Environment.UserName;\n\n        // Create a security object that grants no access.\n        SemaphoreSecurity mSec = new SemaphoreSecurity();\n\n        // Add a rule that grants the current user the \n        // right to enter or release the semaphore.\n        SemaphoreAccessRule rule = new SemaphoreAccessRule(user, \n            SemaphoreRights.Synchronize | SemaphoreRights.Modify, \n            AccessControlType.Allow);\n        mSec.AddAccessRule(rule);\n\n        // Add a rule that denies the current user the \n        // right to change permissions on the semaphore.\n        rule = new SemaphoreAccessRule(user, \n            SemaphoreRights.ChangePermissions, \n            AccessControlType.Deny);\n        mSec.AddAccessRule(rule);\n\n        // Display the rules in the security object.\n        ShowSecurity(mSec);\n\n        // Add a rule that allows the current user the \n        // right to read permissions on the semaphore. This rule\n        // is merged with the existing Allow rule.\n        rule = new SemaphoreAccessRule(user, \n            SemaphoreRights.ReadPermissions, \n            AccessControlType.Allow);\n        mSec.AddAccessRule(rule);\n\n        ShowSecurity(mSec);\n    }\n\n    private static void ShowSecurity(SemaphoreSecurity security)\n    {\n        Console.WriteLine(&quot;\\r<br>Current access rules:\\r<br>&quot;);\n\n        foreach(SemaphoreAccessRule ar in \n            security.GetAccessRules(true, true, typeof(NTAccount)))\n        {\n            Console.WriteLine(&quot;        User: {0}&quot;, ar.IdentityReference);\n            Console.WriteLine(&quot;        Type: {0}&quot;, ar.AccessControlType);\n            Console.WriteLine(&quot;      Rights: {0}&quot;, ar.SemaphoreRights);\n            Console.WriteLine();\n        }\n    }\n}\n\n/*This code example produces output similar to following:\n\nCurrent access rules:\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Deny\n      Rights: ChangePermissions\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Allow\n      Rights: Modify, Synchronize\n\n\nCurrent access rules:\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Deny\n      Rights: ChangePermissions\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Allow\n      Rights: Modify, ReadPermissions, Synchronize\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1\">Imports System\nImports System.Threading\nImports System.Security.AccessControl\nImports System.Security.Principal\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        &#39; Create a string representing the current user.\n        Dim user As String = Environment.UserDomainName _ \n            &amp; &quot;\\&quot; &amp; Environment.UserName\n\n        &#39; Create a security object that grants no access.\n        Dim mSec As New SemaphoreSecurity()\n\n        &#39; Add a rule that grants the current user the \n        &#39; right to enter or release the semaphore.\n        Dim rule As New SemaphoreAccessRule(user, _\n            SemaphoreRights.Synchronize _\n            Or SemaphoreRights.Modify, _\n            AccessControlType.Allow)\n        mSec.AddAccessRule(rule)\n\n        &#39; Add a rule that denies the current user the \n        &#39; right to change permissions on the semaphore.\n        rule = New SemaphoreAccessRule(user, _\n            SemaphoreRights.ChangePermissions, _\n            AccessControlType.Deny)\n        mSec.AddAccessRule(rule)\n\n        &#39; Display the rules in the security object.\n        ShowSecurity(mSec)\n\n        &#39; Add a rule that allows the current user the \n        &#39; right to read permissions on the semaphore. This \n        &#39; rule is merged with the existing Allow rule.\n        rule = New SemaphoreAccessRule(user, _\n            SemaphoreRights.ReadPermissions, _\n            AccessControlType.Allow)\n        mSec.AddAccessRule(rule)\n\n        ShowSecurity(mSec)\n\n    End Sub \n\n    Private Shared Sub ShowSecurity(ByVal security As SemaphoreSecurity)\n        Console.WriteLine(vbCrLf &amp; &quot;Current access rules:&quot; &amp; vbCrLf)\n\n        For Each ar As SemaphoreAccessRule In _\n            security.GetAccessRules(True, True, GetType(NTAccount))\n\n            Console.WriteLine(&quot;        User: {0}&quot;, ar.IdentityReference)\n            Console.WriteLine(&quot;        Type: {0}&quot;, ar.AccessControlType)\n            Console.WriteLine(&quot;      Rights: {0}&quot;, ar.SemaphoreRights)\n            Console.WriteLine()\n        Next\n\n    End Sub\nEnd Class \n\n&#39;This code example produces output similar to following:\n&#39;\n&#39;Current access rules:\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Deny\n&#39;      Rights: ChangePermissions\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Allow\n&#39;      Rights: Modify, Synchronize\n&#39;\n&#39;\n&#39;Current access rules:\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Deny\n&#39;      Rights: ChangePermissions\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Allow\n&#39;      Rights: Modify, ReadPermissions, Synchronize\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_AccessControl_SemaphoreSecurity_AddAuditRule_System_Security_AccessControl_SemaphoreAuditRule_\">\r\n    \r\n            <a id=\"System_Security_AccessControl_SemaphoreSecurity_AddAuditRule_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddAuditRule(SemaphoreAuditRule)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for an audit rule with which the new rule can be merged. If none are found, adds the new rule.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AddAuditRule (System.Security.AccessControl.SemaphoreAuditRule rule);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rule</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.semaphoreauditrule\" data-linktype=\"relative-path\">SemaphoreAuditRule</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The audit rule to add. The user specified by this rule determines the search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The AddAuditRule method searches for rules with the same user or group as <code>rule</code>. If none are found, <code>rule</code> is added. If a matching rule is found, the flags in <code>rule</code> are merged into the existing rule.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_AccessControl_SemaphoreSecurity_AuditRuleFactory_System_Security_Principal_IdentityReference_System_Int32_System_Boolean_System_Security_AccessControl_InheritanceFlags_System_Security_AccessControl_PropagationFlags_System_Security_AccessControl_AuditFlags_\">\r\n    \r\n            <a id=\"System_Security_AccessControl_SemaphoreSecurity_AuditRuleFactory_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new audit rule, specifying the user the rule applies to, the access rights to audit, and the outcome that triggers the audit rule.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>identityReference</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.principal.identityreference\" data-linktype=\"relative-path\">IdentityReference</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.security.principal.identityreference\" data-linktype=\"relative-path\">IdentityReference</a> that identifies the user or group the rule applies to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>accessMask</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of <a class=\"xref\" href=\"system.security.accesscontrol.semaphorerights\" data-linktype=\"relative-path\">SemaphoreRights</a> values specifying the access rights to audit, cast to an integer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>isInherited</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Meaningless for named wait handles, because they have no hierarchy.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inheritanceFlags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.inheritanceflags\" data-linktype=\"relative-path\">InheritanceFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Meaningless for named wait handles, because they have no hierarchy.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>propagationFlags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.propagationflags\" data-linktype=\"relative-path\">PropagationFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Meaningless for named wait handles, because they have no hierarchy.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>flags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.auditflags\" data-linktype=\"relative-path\">AuditFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of <a class=\"xref\" href=\"system.security.accesscontrol.auditflags\" data-linktype=\"relative-path\">AuditFlags</a> values that specify whether to audit successful access, failed access, or both.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.auditrule\" data-linktype=\"relative-path\">AuditRule</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.security.accesscontrol.semaphoreauditrule\" data-linktype=\"relative-path\">SemaphoreAuditRule</a> object representing the specified audit rule for the specified user. The return type of the method is the base class, <a class=\"xref\" href=\"system.security.accesscontrol.auditrule\" data-linktype=\"relative-path\">AuditRule</a>, but the return value can be cast safely to the derived class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>accessMask</code>, <code>inheritanceFlags</code>, <code>propagationFlags</code>, or <code>flags</code> specifies an invalid value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>identityReference</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>accessMask</code> is zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>identityReference</code> is neither of type <a class=\"xref\" href=\"system.security.principal.securityidentifier\" data-linktype=\"relative-path\">SecurityIdentifier</a>, nor of a type such as <a class=\"xref\" href=\"system.security.principal.ntaccount\" data-linktype=\"relative-path\">NTAccount</a> that can be converted to type <a class=\"xref\" href=\"system.security.principal.securityidentifier\" data-linktype=\"relative-path\">SecurityIdentifier</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The recommended way to create audit rules is to use the constructors of the <a class=\"xref\" href=\"system.security.accesscontrol.semaphoreauditrule\" data-linktype=\"relative-path\">SemaphoreAuditRule</a> class.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Although inheritance and propagation flags are meaningless for named semaphores, it is still possible to specify them. This is not recommended, because it needlessly complicates the maintenance of rules, for example by interfering with the combination of rules that would otherwise be compatible.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_AccessControl_SemaphoreSecurity_RemoveAccessRule_System_Security_AccessControl_SemaphoreAccessRule_\">\r\n    \r\n            <a id=\"System_Security_AccessControl_SemaphoreSecurity_RemoveAccessRule_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveAccessRule(SemaphoreAccessRule)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for an access control rule with the same user and <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> (allow or deny) as the specified rule, and with compatible inheritance and propagation flags; if such a rule is found, the rights contained in the specified access rule are removed from it.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool RemoveAccessRule (System.Security.AccessControl.SemaphoreAccessRule rule);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rule</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.semaphoreaccessrule\" data-linktype=\"relative-path\">SemaphoreAccessRule</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.security.accesscontrol.semaphoreaccessrule\" data-linktype=\"relative-path\">SemaphoreAccessRule</a> that specifies the user and <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with. Specifies the rights to remove from the compatible rule, if found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a compatible rule is found; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>rule</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The current <a class=\"xref\" href=\"system.security.accesscontrol.semaphoresecurity\" data-linktype=\"relative-path\">SemaphoreSecurity</a> is searched for a rule that has the same user and the same <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> value as <code>rule</code>. If no such rule is found, no action is taken, and the method returns <code>false</code>. If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in <code>rule</code>. If no compatible rule is found, no action is taken, and the method returns <code>false</code>. If a rule with compatible flags is found, the rights specified in <code>rule</code> are removed from the compatible rule, and the method returns <code>true</code>. If <code>rule</code> specifies rights not contained in the compatible rule, no action is taken with respect to those rights. If all rights are removed from the compatible rule, the entire rule is removed from the current <a class=\"xref\" href=\"system.security.accesscontrol.semaphoresecurity\" data-linktype=\"relative-path\">SemaphoreSecurity</a> object.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Although you can specify inheritance and propagation flags for semaphore access rules, by creating them with the <a class=\"xref\" href=\"system.security.accesscontrol.semaphoresecurity#System_Security_AccessControl_SemaphoreSecurity_AccessRuleFactory_\" data-linktype=\"relative-path\">AccessRuleFactory</a> method, this is not recommended. Inheritance and propagation have no meaning for named semaphores, and they make the maintenance of access rules more complicated.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the RemoveAccessRule method to remove rights from an <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> rule in a <a class=\"xref\" href=\"system.security.accesscontrol.semaphoresecurity\" data-linktype=\"relative-path\">SemaphoreSecurity</a> object. It also shows that other rights in <code>rule</code> are ignored.  </p>\n<p> The example creates a <a class=\"xref\" href=\"system.security.accesscontrol.semaphoresecurity\" data-linktype=\"relative-path\">SemaphoreSecurity</a> object and adds rules that allow and deny various rights for the current user. The rights allowed include <a class=\"xref\" href=\"system.security.accesscontrol.semaphorerights\" data-linktype=\"relative-path\">SemaphoreRights</a>, <a class=\"xref\" href=\"system.security.accesscontrol.semaphorerights\" data-linktype=\"relative-path\">SemaphoreRights</a>, and <a class=\"xref\" href=\"system.security.accesscontrol.semaphorerights\" data-linktype=\"relative-path\">SemaphoreRights</a>. The example then creates a new rule for the current user, including <a class=\"xref\" href=\"system.security.accesscontrol.semaphorerights\" data-linktype=\"relative-path\">SemaphoreRights</a> and <a class=\"xref\" href=\"system.security.accesscontrol.semaphorerights\" data-linktype=\"relative-path\">SemaphoreRights</a> rights, and uses that rule with the RemoveAccessRule method to remove <a class=\"xref\" href=\"system.security.accesscontrol.semaphorerights\" data-linktype=\"relative-path\">SemaphoreRights</a> from the <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> rule in the <a class=\"xref\" href=\"system.security.accesscontrol.semaphoresecurity\" data-linktype=\"relative-path\">SemaphoreSecurity</a> object. The extraneous <a class=\"xref\" href=\"system.security.accesscontrol.semaphorerights\" data-linktype=\"relative-path\">SemaphoreRights</a> right in <code>rule</code> is ignored.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This example does not attach the security object to a <a class=\"xref\" href=\"system.threading.semaphore\" data-linktype=\"relative-path\">Semaphore</a> object. Examples that attach security objects can be found in <a class=\"xref\" href=\"system.threading.semaphore#System_Threading_Semaphore_GetAccessControl_\" data-linktype=\"relative-path\">GetAccessControl</a> and <a class=\"xref\" href=\"system.threading.semaphore#System_Threading_Semaphore_SetAccessControl_\" data-linktype=\"relative-path\">SetAccessControl</a>.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule#1\">using System;\nusing System.Threading;\nusing System.Security.AccessControl;\nusing System.Security.Principal;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Create a string representing the current user.\n        string user = Environment.UserDomainName + &quot;\\\\&quot; + \n            Environment.UserName;\n\n        // Create a security object that grants no access.\n        SemaphoreSecurity mSec = new SemaphoreSecurity();\n\n        // Add a rule that grants the current user the \n        // right to enter or release the semaphore and read the\n        // permissions on the semaphore.\n        SemaphoreAccessRule rule = new SemaphoreAccessRule(user, \n            SemaphoreRights.Synchronize | SemaphoreRights.Modify\n                | SemaphoreRights.ReadPermissions, \n            AccessControlType.Allow);\n        mSec.AddAccessRule(rule);\n\n        // Add a rule that denies the current user the \n        // right to change permissions on the semaphore.\n        rule = new SemaphoreAccessRule(user, \n            SemaphoreRights.ChangePermissions, \n            AccessControlType.Deny);\n        mSec.AddAccessRule(rule);\n\n        // Display the rules in the security object.\n        ShowSecurity(mSec);\n\n        // Create a rule that grants the current user \n        // the right to read permissions on the semaphore, and\n        // take ownership of the semaphore. Use this rule to \n        // remove the right to read permissions from the \n        // Allow rule for the current user. The inclusion \n        // of the right to take ownership has no effect.\n        rule = new SemaphoreAccessRule(user, \n            SemaphoreRights.TakeOwnership | \n                SemaphoreRights.ReadPermissions, \n            AccessControlType.Allow);\n        mSec.RemoveAccessRule(rule);\n\n        ShowSecurity(mSec);\n    }\n\n    private static void ShowSecurity(SemaphoreSecurity security)\n    {\n        Console.WriteLine(&quot;\\r<br>Current access rules:\\r<br>&quot;);\n\n        foreach(SemaphoreAccessRule ar in \n            security.GetAccessRules(true, true, typeof(NTAccount)))\n        {\n            Console.WriteLine(&quot;        User: {0}&quot;, ar.IdentityReference);\n            Console.WriteLine(&quot;        Type: {0}&quot;, ar.AccessControlType);\n            Console.WriteLine(&quot;      Rights: {0}&quot;, ar.SemaphoreRights);\n            Console.WriteLine();\n        }\n    }\n}\n\n/*This code example produces output similar to following:\n\nCurrent access rules:\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Deny\n      Rights: ChangePermissions\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Allow\n      Rights: Modify, ReadPermissions, Synchronize\n\n\nCurrent access rules:\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Deny\n      Rights: ChangePermissions\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Allow\n      Rights: Modify, Synchronize\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule#1\">Imports System\nImports System.Threading\nImports System.Security.AccessControl\nImports System.Security.Principal\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        &#39; Create a string representing the current user.\n        Dim user As String = Environment.UserDomainName _ \n            &amp; &quot;\\&quot; &amp; Environment.UserName\n\n        &#39; Create a security object that grants no access.\n        Dim mSec As New SemaphoreSecurity()\n\n        &#39; Add a rule that grants the current user the \n        &#39; right to enter or release the semaphore, and to \n        &#39; read its permissions.\n        Dim rule As New SemaphoreAccessRule(user, _\n            SemaphoreRights.Synchronize _\n            Or SemaphoreRights.Modify _\n            Or SemaphoreRights.ReadPermissions, _\n            AccessControlType.Allow)\n        mSec.AddAccessRule(rule)\n\n        &#39; Add a rule that denies the current user the \n        &#39; right to change permissions on the semaphore.\n        rule = New SemaphoreAccessRule(user, _\n            SemaphoreRights.ChangePermissions, _\n            AccessControlType.Deny)\n        mSec.AddAccessRule(rule)\n\n        &#39; Display the rules in the security object.\n        ShowSecurity(mSec)\n\n        &#39; Create a rule that grants the current user \n        &#39; the right to read permissions on the semaphore, and\n        &#39; take ownership of the semaphore. Use this rule to \n        &#39; remove the right to read permissions from the \n        &#39; Allow rule for the current user. The inclusion \n        &#39; of the right to take ownership has no effect.\n        rule = New SemaphoreAccessRule(user, _\n            SemaphoreRights.TakeOwnership _\n            Or SemaphoreRights.ReadPermissions, _\n            AccessControlType.Allow)\n        mSec.RemoveAccessRule(rule)\n\n        ShowSecurity(mSec)\n        \n    End Sub \n\n    Private Shared Sub ShowSecurity(ByVal security As SemaphoreSecurity)\n        Console.WriteLine(vbCrLf &amp; &quot;Current access rules:&quot; &amp; vbCrLf)\n\n        For Each ar As SemaphoreAccessRule In _\n            security.GetAccessRules(True, True, GetType(NTAccount))\n\n            Console.WriteLine(&quot;        User: {0}&quot;, ar.IdentityReference)\n            Console.WriteLine(&quot;        Type: {0}&quot;, ar.AccessControlType)\n            Console.WriteLine(&quot;      Rights: {0}&quot;, ar.SemaphoreRights)\n            Console.WriteLine()\n        Next\n\n    End Sub\nEnd Class \n\n&#39;This code example produces output similar to following:\n&#39;\n&#39;Current access rules:\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Deny\n&#39;      Rights: ChangePermissions\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Allow\n&#39;      Rights: Modify, ReadPermissions, Synchronize\n&#39;\n&#39;\n&#39;Current access rules:\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Deny\n&#39;      Rights: ChangePermissions\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Allow\n&#39;      Rights: Modify, Synchronize\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_AccessControl_SemaphoreSecurity_RemoveAccessRuleAll_System_Security_AccessControl_SemaphoreAccessRule_\">\r\n    \r\n            <a id=\"System_Security_AccessControl_SemaphoreSecurity_RemoveAccessRuleAll_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveAccessRuleAll(SemaphoreAccessRule)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for all access control rules with the same user and <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> (allow or deny) as the specified rule and, if found, removes them.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RemoveAccessRuleAll (System.Security.AccessControl.SemaphoreAccessRule rule);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rule</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.semaphoreaccessrule\" data-linktype=\"relative-path\">SemaphoreAccessRule</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.security.accesscontrol.semaphoreaccessrule\" data-linktype=\"relative-path\">SemaphoreAccessRule</a> that specifies the user and <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> to search for. Any rights specified by this rule are ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>rule</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The current <a class=\"xref\" href=\"system.security.accesscontrol.semaphoresecurity\" data-linktype=\"relative-path\">SemaphoreSecurity</a> object is searched for rules that have the same user and the same <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> value as <code>rule</code>. Any rights specified by <code>rule</code> are ignored when performing this search. If no matching rules are found, no action is taken.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows that the RemoveAccessRuleAll method removes all rules that match user and <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a>, ignoring rights.  </p>\n<p> The example creates a <a class=\"xref\" href=\"system.security.accesscontrol.semaphoresecurity\" data-linktype=\"relative-path\">SemaphoreSecurity</a> object, adds rules that allow and deny various rights for the current user, and then merges additional rights into the <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> rule. The example then creates a new rule that allows the current user to take ownership, and uses that rule to remove the <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> rule from the <a class=\"xref\" href=\"system.security.accesscontrol.semaphoresecurity\" data-linktype=\"relative-path\">SemaphoreSecurity</a> object.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This example does not attach the security object to a <a class=\"xref\" href=\"system.threading.semaphore\" data-linktype=\"relative-path\">Semaphore</a> object. Examples that attach security objects can be found in <a class=\"xref\" href=\"system.threading.semaphore#System_Threading_Semaphore_GetAccessControl_\" data-linktype=\"relative-path\">GetAccessControl</a> and <a class=\"xref\" href=\"system.threading.semaphore#System_Threading_Semaphore_SetAccessControl_\" data-linktype=\"relative-path\">SetAccessControl</a>.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll#1\">Imports System\nImports System.Threading\nImports System.Security.AccessControl\nImports System.Security.Principal\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        &#39; Create a string representing the current user.\n        Dim user As String = Environment.UserDomainName _ \n            &amp; &quot;\\&quot; &amp; Environment.UserName\n\n        &#39; Create a security object that grants no access.\n        Dim mSec As New SemaphoreSecurity()\n\n        &#39; Add a rule that grants the current user the \n        &#39; right to enter or release the semaphore.\n        Dim rule As New SemaphoreAccessRule(user, _\n            SemaphoreRights.Synchronize _\n            Or SemaphoreRights.Modify, _\n            AccessControlType.Allow)\n        mSec.AddAccessRule(rule)\n\n        &#39; Add a rule that denies the current user the \n        &#39; right to change permissions on the semaphore.\n        rule = New SemaphoreAccessRule(user, _\n            SemaphoreRights.ChangePermissions, _\n            AccessControlType.Deny)\n        mSec.AddAccessRule(rule)\n\n        &#39; Display the rules in the security object.\n        ShowSecurity(mSec)\n\n        &#39; Add a rule that allows the current user the \n        &#39; right to read permissions on the semaphore. This rule\n        &#39; is merged with the existing Allow rule.\n        rule = New SemaphoreAccessRule(user, _\n            SemaphoreRights.ReadPermissions, _\n            AccessControlType.Allow)\n        mSec.AddAccessRule(rule)\n\n        ShowSecurity(mSec)\n\n        &#39; Create a rule that allows the current user to\n        &#39; change the owner of the semaphore, and use that rule \n        &#39; to remove the existing allow access rule from \n        &#39; the SemaphoreSecurity object, showing that the user\n        &#39; and access type must match, while the rights are\n        &#39; ignored.\n        Console.WriteLine(&quot;Use RemoveAccessRuleAll to remove the Allow rule.&quot;)\n        rule = New SemaphoreAccessRule(user, _\n            SemaphoreRights.TakeOwnership, _\n            AccessControlType.Allow)\n        mSec.RemoveAccessRuleAll(rule)\n\n        ShowSecurity(mSec)\n        \n    End Sub \n\n    Private Shared Sub ShowSecurity(ByVal security As SemaphoreSecurity)\n        Console.WriteLine(vbCrLf &amp; &quot;Current access rules:&quot; &amp; vbCrLf)\n\n        For Each ar As SemaphoreAccessRule In _\n            security.GetAccessRules(True, True, GetType(NTAccount))\n\n            Console.WriteLine(&quot;        User: {0}&quot;, ar.IdentityReference)\n            Console.WriteLine(&quot;        Type: {0}&quot;, ar.AccessControlType)\n            Console.WriteLine(&quot;      Rights: {0}&quot;, ar.SemaphoreRights)\n            Console.WriteLine()\n        Next\n\n    End Sub\nEnd Class \n\n&#39;This code example produces output similar to following:\n&#39;\n&#39;Current access rules:\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Deny\n&#39;      Rights: ChangePermissions\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Allow\n&#39;      Rights: Modify, Synchronize\n&#39;\n&#39;\n&#39;Current access rules:\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Deny\n&#39;      Rights: ChangePermissions\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Allow\n&#39;      Rights: Modify, ReadPermissions, Synchronize\n&#39;\n&#39;Use RemoveAccessRuleAll to remove the Allow rule.\n&#39;\n&#39;Current access rules:\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Deny\n&#39;      Rights: ChangePermissions\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll#1\">using System;\nusing System.Threading;\nusing System.Security.AccessControl;\nusing System.Security.Principal;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Create a string representing the current user.\n        string user = Environment.UserDomainName + &quot;\\\\&quot; + \n            Environment.UserName;\n\n        // Create a security object that grants no access.\n        SemaphoreSecurity mSec = new SemaphoreSecurity();\n\n        // Add a rule that grants the current user the \n        // right to enter or release the semaphore.\n        SemaphoreAccessRule rule = new SemaphoreAccessRule(user, \n            SemaphoreRights.Synchronize | SemaphoreRights.Modify, \n            AccessControlType.Allow);\n        mSec.AddAccessRule(rule);\n\n        // Add a rule that denies the current user the \n        // right to change permissions on the semaphore.\n        rule = new SemaphoreAccessRule(user, \n            SemaphoreRights.ChangePermissions, \n            AccessControlType.Deny);\n        mSec.AddAccessRule(rule);\n\n        // Display the rules in the security object.\n        ShowSecurity(mSec);\n\n        // Add a rule that allows the current user the \n        // right to read permissions on the semaphore. This rule\n        // is merged with the existing Allow rule.\n        rule = new SemaphoreAccessRule(user, \n            SemaphoreRights.ReadPermissions, \n            AccessControlType.Allow);\n        mSec.AddAccessRule(rule);\n\n        ShowSecurity(mSec);\n\n        // Create a rule that allows the current user to\n        // change the owner of the semaphore, and use that rule \n        // to remove the existing allow access rule from \n        // the SemaphoreSecurity object, showing that the user\n        // and access type must match, while the rights are\n        // ignored.\n        Console.WriteLine(&quot;Use RemoveAccessRuleAll to remove the Allow rule.&quot;);\n        rule = new SemaphoreAccessRule(user, \n            SemaphoreRights.TakeOwnership, \n            AccessControlType.Allow);\n        mSec.RemoveAccessRuleAll(rule);\n\n        ShowSecurity(mSec);\n    }\n\n    private static void ShowSecurity(SemaphoreSecurity security)\n    {\n        Console.WriteLine(&quot;\\r<br>Current access rules:\\r<br>&quot;);\n\n        foreach(SemaphoreAccessRule ar in \n            security.GetAccessRules(true, true, typeof(NTAccount)))\n        {\n            Console.WriteLine(&quot;        User: {0}&quot;, ar.IdentityReference);\n            Console.WriteLine(&quot;        Type: {0}&quot;, ar.AccessControlType);\n            Console.WriteLine(&quot;      Rights: {0}&quot;, ar.SemaphoreRights);\n            Console.WriteLine();\n        }\n    }\n}\n\n/*This code example produces output similar to following:\n\nCurrent access rules:\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Deny\n      Rights: ChangePermissions\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Allow\n      Rights: Modify, Synchronize\n\n\nCurrent access rules:\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Deny\n      Rights: ChangePermissions\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Allow\n      Rights: Modify, ReadPermissions, Synchronize\n\nUse RemoveAccessRuleAll to remove the Allow rule.\n\nCurrent access rules:\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Deny\n      Rights: ChangePermissions\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_AccessControl_SemaphoreSecurity_RemoveAccessRuleSpecific_System_Security_AccessControl_SemaphoreAccessRule_\">\r\n    \r\n            <a id=\"System_Security_AccessControl_SemaphoreSecurity_RemoveAccessRuleSpecific_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveAccessRuleSpecific(SemaphoreAccessRule)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for an access control rule that exactly matches the specified rule and, if found, removes it.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RemoveAccessRuleSpecific (System.Security.AccessControl.SemaphoreAccessRule rule);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rule</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.semaphoreaccessrule\" data-linktype=\"relative-path\">SemaphoreAccessRule</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.security.accesscontrol.semaphoreaccessrule\" data-linktype=\"relative-path\">SemaphoreAccessRule</a> to remove.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>rule</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The rule is removed only if it exactly matches <code>rule</code> in all details, including flags. Other rules with the same user and <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> are not affected.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the access security rules for a user. Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the RemoveAccessRuleSpecific method cannot remove it.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows that the RemoveAccessRuleSpecific method requires an exact match in order to remove a rule, and that rules to allow and deny rights are independent of each other.  </p>\n<p> The example creates a <a class=\"xref\" href=\"system.security.accesscontrol.semaphoresecurity\" data-linktype=\"relative-path\">SemaphoreSecurity</a> object, adds rules that allow and deny various rights for the current user, and then merges additional rights into the <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> access rule. The example then passes the original <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> rule to the RemoveAccessRuleSpecific method, and displays the results, showing that nothing is deleted. The example then constructs a rule that matches the <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> rule in the <a class=\"xref\" href=\"system.security.accesscontrol.semaphoresecurity\" data-linktype=\"relative-path\">SemaphoreSecurity</a> object, and successfully uses the RemoveAccessRuleSpecific method to remove the rule.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This example does not attach the security object to a <a class=\"xref\" href=\"system.threading.semaphore\" data-linktype=\"relative-path\">Semaphore</a> object. Examples that attach security objects can be found in <a class=\"xref\" href=\"system.threading.semaphore#System_Threading_Semaphore_GetAccessControl_\" data-linktype=\"relative-path\">GetAccessControl</a> and <a class=\"xref\" href=\"system.threading.semaphore#System_Threading_Semaphore_SetAccessControl_\" data-linktype=\"relative-path\">SetAccessControl</a>.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific#1\">Imports System\nImports System.Threading\nImports System.Security.AccessControl\nImports System.Security.Principal\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        &#39; Create a string representing the current user.\n        Dim user As String = Environment.UserDomainName _ \n            &amp; &quot;\\&quot; &amp; Environment.UserName\n\n        &#39; Create a security object that grants no access.\n        Dim mSec As New SemaphoreSecurity()\n\n        &#39; Add a rule that grants the current user the \n        &#39; right to enter or release the semaphore.\n        Dim ruleA As New SemaphoreAccessRule(user, _\n            SemaphoreRights.Synchronize _\n            Or SemaphoreRights.Modify, _\n            AccessControlType.Allow)\n        mSec.AddAccessRule(ruleA)\n\n        &#39; Add a rule that denies the current user the \n        &#39; right to change permissions on the semaphore.\n        Dim rule As New SemaphoreAccessRule(user, _\n            SemaphoreRights.ChangePermissions, _\n            AccessControlType.Deny)\n        mSec.AddAccessRule(rule)\n\n        &#39; Display the rules in the security object.\n        ShowSecurity(mSec)\n\n        &#39; Add a rule that allows the current user the \n        &#39; right to read permissions on the semaphore. This rule\n        &#39; is merged with the existing Allow rule.\n        rule = New SemaphoreAccessRule(user, _\n            SemaphoreRights.ReadPermissions, _\n            AccessControlType.Allow)\n        mSec.AddAccessRule(rule)\n\n        ShowSecurity(mSec)\n\n        &#39; Attempt to remove the original rule (granting\n        &#39; the right to enter or release the semaphore) with \n        &#39; RemoveAccessRuleSpecific. The removal fails,\n        &#39; because the right to read the permissions on the \n        &#39; semaphore has been added to the rule, so that it no \n        &#39; longer matches the original rule.\n        Console.WriteLine(&quot;Attempt to use RemoveAccessRuleSpecific on the original rule.&quot;)\n        mSec.RemoveAccessRuleSpecific(ruleA)\n\n        ShowSecurity(mSec)\n\n        &#39; Create a rule that grants the current user \n        &#39; the right to enter or release the semaphore, and\n        &#39; to read permissions. Use this rule to remove\n        &#39; the Allow rule for the current user.\n        Console.WriteLine(&quot;Use RemoveAccessRuleSpecific with the correct rights.&quot;)\n        rule = New SemaphoreAccessRule(user, _\n            SemaphoreRights.Synchronize _\n            Or SemaphoreRights.Modify _\n            Or SemaphoreRights.ReadPermissions, _\n            AccessControlType.Allow)\n        mSec.RemoveAccessRuleSpecific(rule)\n\n        ShowSecurity(mSec)\n        \n    End Sub \n\n    Private Shared Sub ShowSecurity(ByVal security As SemaphoreSecurity)\n        Console.WriteLine(vbCrLf &amp; &quot;Current access rules:&quot; &amp; vbCrLf)\n\n        For Each ar As SemaphoreAccessRule In _\n            security.GetAccessRules(True, True, GetType(NTAccount))\n\n            Console.WriteLine(&quot;        User: {0}&quot;, ar.IdentityReference)\n            Console.WriteLine(&quot;        Type: {0}&quot;, ar.AccessControlType)\n            Console.WriteLine(&quot;      Rights: {0}&quot;, ar.SemaphoreRights)\n            Console.WriteLine()\n        Next\n\n    End Sub\nEnd Class \n\n&#39;This code example produces output similar to following:\n&#39;\n&#39;Current access rules:\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Deny\n&#39;      Rights: ChangePermissions\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Allow\n&#39;      Rights: Modify, Synchronize\n&#39;\n&#39;\n&#39;Current access rules:\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Deny\n&#39;      Rights: ChangePermissions\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Allow\n&#39;      Rights: Modify, ReadPermissions, Synchronize\n&#39;\n&#39;Attempt to use RemoveAccessRuleSpecific on the original rule.\n&#39;\n&#39;Current access rules:\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Deny\n&#39;      Rights: ChangePermissions\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Allow\n&#39;      Rights: Modify, ReadPermissions, Synchronize\n&#39;\n&#39;Use RemoveAccessRuleSpecific with the correct rights.\n&#39;\n&#39;Current access rules:\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Deny\n&#39;      Rights: ChangePermissions\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific#1\">using System;\nusing System.Threading;\nusing System.Security.AccessControl;\nusing System.Security.Principal;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Create a string representing the current user.\n        string user = Environment.UserDomainName + &quot;\\\\&quot; + \n            Environment.UserName;\n\n        // Create a security object that grants no access.\n        SemaphoreSecurity mSec = new SemaphoreSecurity();\n\n        // Add a rule that grants the current user the \n        // right to enter or release the semaphore.\n        SemaphoreAccessRule ruleA = new SemaphoreAccessRule(user, \n            SemaphoreRights.Synchronize | SemaphoreRights.Modify, \n            AccessControlType.Allow);\n        mSec.AddAccessRule(ruleA);\n\n        // Add a rule that denies the current user the \n        // right to change permissions on the semaphore.\n        SemaphoreAccessRule rule = new SemaphoreAccessRule(user, \n            SemaphoreRights.ChangePermissions, \n            AccessControlType.Deny);\n        mSec.AddAccessRule(rule);\n\n        // Display the rules in the security object.\n        ShowSecurity(mSec);\n\n        // Add a rule that allows the current user the \n        // right to read permissions on the semaphore. This rule\n        // is merged with the existing Allow rule.\n        rule = new SemaphoreAccessRule(user, \n            SemaphoreRights.ReadPermissions, \n            AccessControlType.Allow);\n        mSec.AddAccessRule(rule);\n\n        ShowSecurity(mSec);\n\n        // Attempt to remove the original rule (granting\n        // the right to enter or release the semaphore) with \n        // RemoveAccessRuleSpecific. The removal fails,\n        // because the right to read the permissions on the \n        // semaphore has been added to the rule, so that it no \n        // longer matches the original rule.\n        Console.WriteLine(&quot;Attempt to use RemoveAccessRuleSpecific on the original rule.&quot;);\n        mSec.RemoveAccessRuleSpecific(ruleA);\n\n        ShowSecurity(mSec);\n\n        // Create a rule that grants the current user \n        // the right to enter or release the semaphore, and\n        // to read permissions. Use this rule to remove\n        // the Allow rule for the current user.\n        Console.WriteLine(&quot;Use RemoveAccessRuleSpecific with the correct rights.&quot;);\n        rule = new SemaphoreAccessRule(user, \n            SemaphoreRights.Synchronize | SemaphoreRights.Modify | \n                SemaphoreRights.ReadPermissions, \n            AccessControlType.Allow);\n        mSec.RemoveAccessRuleSpecific(rule);\n\n        ShowSecurity(mSec);\n    }\n\n    private static void ShowSecurity(SemaphoreSecurity security)\n    {\n        Console.WriteLine(&quot;\\r<br>Current access rules:\\r<br>&quot;);\n\n        foreach(SemaphoreAccessRule ar in \n            security.GetAccessRules(true, true, typeof(NTAccount)))\n        {\n            Console.WriteLine(&quot;        User: {0}&quot;, ar.IdentityReference);\n            Console.WriteLine(&quot;        Type: {0}&quot;, ar.AccessControlType);\n            Console.WriteLine(&quot;      Rights: {0}&quot;, ar.SemaphoreRights);\n            Console.WriteLine();\n        }\n    }\n}\n\n/*This code example produces output similar to following:\n\nCurrent access rules:\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Deny\n      Rights: ChangePermissions\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Allow\n      Rights: Modify, Synchronize\n\n\nCurrent access rules:\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Deny\n      Rights: ChangePermissions\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Allow\n      Rights: Modify, ReadPermissions, Synchronize\n\nAttempt to use RemoveAccessRuleSpecific on the original rule.\n\nCurrent access rules:\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Deny\n      Rights: ChangePermissions\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Allow\n      Rights: Modify, ReadPermissions, Synchronize\n\nUse RemoveAccessRuleSpecific with the correct rights.\n\nCurrent access rules:\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Deny\n      Rights: ChangePermissions\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_AccessControl_SemaphoreSecurity_RemoveAuditRule_System_Security_AccessControl_SemaphoreAuditRule_\">\r\n    \r\n            <a id=\"System_Security_AccessControl_SemaphoreSecurity_RemoveAuditRule_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveAuditRule(SemaphoreAuditRule)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for an audit control rule with the same user as the specified rule, and with compatible inheritance and propagation flags; if a compatible rule is found, the rights contained in the specified rule are removed from it.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool RemoveAuditRule (System.Security.AccessControl.SemaphoreAuditRule rule);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rule</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.semaphoreauditrule\" data-linktype=\"relative-path\">SemaphoreAuditRule</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.security.accesscontrol.semaphoreauditrule\" data-linktype=\"relative-path\">SemaphoreAuditRule</a> that specifies the user to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with. Specifies the rights to remove from the compatible rule, if found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a compatible rule is found; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>rule</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The current <a class=\"xref\" href=\"system.security.accesscontrol.semaphoresecurity\" data-linktype=\"relative-path\">SemaphoreSecurity</a> is searched for an audit rule that has the same user as <code>rule</code>. If no such rule is found, no action is taken, and the method returns <code>false</code>. If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in <code>rule</code>. If no compatible rule is found, no action is taken, and the method returns <code>false</code>. If a rule with compatible flags is found, the rights specified in <code>rule</code> are removed from the compatible rule, and the method returns <code>true</code>. If <code>rule</code> specifies rights not contained in the compatible rule, no action is taken with respect to those rights. If all rights are removed from the compatible rule, the entire rule is removed from the current <a class=\"xref\" href=\"system.security.accesscontrol.semaphoresecurity\" data-linktype=\"relative-path\">SemaphoreSecurity</a> object.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Although you can specify inheritance and propagation flags for semaphore audit rules, by creating them with the <a class=\"xref\" href=\"system.security.accesscontrol.semaphoresecurity#System_Security_AccessControl_SemaphoreSecurity_AuditRuleFactory_\" data-linktype=\"relative-path\">AuditRuleFactory</a> method, this is not recommended. Inheritance and propagation have no meaning for named semaphores, and they make the maintenance of audit rules more complicated.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_AccessControl_SemaphoreSecurity_RemoveAuditRuleAll_System_Security_AccessControl_SemaphoreAuditRule_\">\r\n    \r\n            <a id=\"System_Security_AccessControl_SemaphoreSecurity_RemoveAuditRuleAll_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveAuditRuleAll(SemaphoreAuditRule)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for all audit rules with the same user as the specified rule and, if found, removes them.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RemoveAuditRuleAll (System.Security.AccessControl.SemaphoreAuditRule rule);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rule</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.semaphoreauditrule\" data-linktype=\"relative-path\">SemaphoreAuditRule</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.security.accesscontrol.semaphoreauditrule\" data-linktype=\"relative-path\">SemaphoreAuditRule</a> that specifies the user to search for. Any rights specified by this rule are ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>rule</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The current <a class=\"xref\" href=\"system.security.accesscontrol.semaphoresecurity\" data-linktype=\"relative-path\">SemaphoreSecurity</a> is searched for audit rules that have the same user as <code>rule</code>. Any rights specified by <code>rule</code> are ignored when performing this search. All matching rules are removed. If no matching rules are found, no action is taken.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_AccessControl_SemaphoreSecurity_RemoveAuditRuleSpecific_System_Security_AccessControl_SemaphoreAuditRule_\">\r\n    \r\n            <a id=\"System_Security_AccessControl_SemaphoreSecurity_RemoveAuditRuleSpecific_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveAuditRuleSpecific(SemaphoreAuditRule)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for an audit rule that exactly matches the specified rule and, if found, removes it.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RemoveAuditRuleSpecific (System.Security.AccessControl.SemaphoreAuditRule rule);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rule</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.semaphoreauditrule\" data-linktype=\"relative-path\">SemaphoreAuditRule</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.security.accesscontrol.semaphoreauditrule\" data-linktype=\"relative-path\">SemaphoreAuditRule</a> to remove.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>rule</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The rule is removed only if it exactly matches <code>rule</code> in all details, including flags. Other audit rules for the same user are not affected.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the audit security rules for a user. Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the RemoveAuditRuleSpecific method cannot remove it.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_AccessControl_SemaphoreSecurity_ResetAccessRule_System_Security_AccessControl_SemaphoreAccessRule_\">\r\n    \r\n            <a id=\"System_Security_AccessControl_SemaphoreSecurity_ResetAccessRule_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResetAccessRule(SemaphoreAccessRule)</div>        \r\n          </div>\r\n    \r\n            <p>Removes all access control rules with the same user as the specified rule, regardless of <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a>, and then adds the specified rule.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ResetAccessRule (System.Security.AccessControl.SemaphoreAccessRule rule);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rule</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.semaphoreaccessrule\" data-linktype=\"relative-path\">SemaphoreAccessRule</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.security.accesscontrol.semaphoreaccessrule\" data-linktype=\"relative-path\">SemaphoreAccessRule</a> to add. The user specified by this rule determines the rules to remove before this rule is added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>rule</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If there are no access rules whose user matches the specified rule, <code>rule</code> is added.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how the ResetAccessRule method replaces all rules for the matching user with the rule specified for the match.  </p>\n<p> The example creates a <a class=\"xref\" href=\"system.security.accesscontrol.semaphoresecurity\" data-linktype=\"relative-path\">SemaphoreSecurity</a> object and adds rules that allow and deny various rights for the current user. The example then creates a new rule that allows the current user full control, and uses the ResetAccessRule method to replace both of the existing rules with the new rule.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This example does not attach the security object to a <a class=\"xref\" href=\"system.threading.semaphore\" data-linktype=\"relative-path\">Semaphore</a> object. Examples that attach security objects can be found in <a class=\"xref\" href=\"system.threading.semaphore#System_Threading_Semaphore_GetAccessControl_\" data-linktype=\"relative-path\">GetAccessControl</a> and <a class=\"xref\" href=\"system.threading.semaphore#System_Threading_Semaphore_SetAccessControl_\" data-linktype=\"relative-path\">SetAccessControl</a>.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule#1\">using System;\nusing System.Threading;\nusing System.Security.AccessControl;\nusing System.Security.Principal;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Create a string representing the current user.\n        string user = Environment.UserDomainName + &quot;\\\\&quot; + \n            Environment.UserName;\n\n        // Create a security object that grants no access.\n        SemaphoreSecurity mSec = new SemaphoreSecurity();\n\n        // Add a rule that grants the current user the \n        // right to enter or release the semaphore and read the\n        // permissions on the semaphore.\n        SemaphoreAccessRule rule = new SemaphoreAccessRule(user, \n            SemaphoreRights.Synchronize | SemaphoreRights.Modify\n                | SemaphoreRights.ReadPermissions, \n            AccessControlType.Allow);\n        mSec.AddAccessRule(rule);\n\n        // Add a rule that denies the current user the \n        // right to change permissions on the semaphore.\n        rule = new SemaphoreAccessRule(user, \n            SemaphoreRights.ChangePermissions, \n            AccessControlType.Deny);\n        mSec.AddAccessRule(rule);\n\n        // Display the rules in the security object.\n        ShowSecurity(mSec);\n\n        // Create a rule that grants the current user \n        // the full control over the semaphore. Use the\n        // ResetAccessRule method to replace both of \n        // the existing rules with the new rule. \n        rule = new SemaphoreAccessRule(user,\n            SemaphoreRights.FullControl,\n            AccessControlType.Allow);\n        mSec.ResetAccessRule(rule);\n\n        ShowSecurity(mSec);\n    }\n\n    private static void ShowSecurity(SemaphoreSecurity security)\n    {\n        Console.WriteLine(&quot;\\r<br>Current access rules:\\r<br>&quot;);\n\n        foreach(SemaphoreAccessRule ar in \n            security.GetAccessRules(true, true, typeof(NTAccount)))\n        {\n            Console.WriteLine(&quot;        User: {0}&quot;, ar.IdentityReference);\n            Console.WriteLine(&quot;        Type: {0}&quot;, ar.AccessControlType);\n            Console.WriteLine(&quot;      Rights: {0}&quot;, ar.SemaphoreRights);\n            Console.WriteLine();\n        }\n    }\n}\n\n/*This code example produces output similar to following:\n\nCurrent access rules:\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Deny\n      Rights: ChangePermissions\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Allow\n      Rights: Modify, ReadPermissions, Synchronize\n\n\nCurrent access rules:\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Allow\n      Rights: FullControl\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule#1\">Imports System\nImports System.Threading\nImports System.Security.AccessControl\nImports System.Security.Principal\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        &#39; Create a string representing the current user.\n        Dim user As String = Environment.UserDomainName _ \n            &amp; &quot;\\&quot; &amp; Environment.UserName\n\n        &#39; Create a security object that grants no access.\n        Dim mSec As New SemaphoreSecurity()\n\n        &#39; Add a rule that grants the current user the \n        &#39; right to enter or release the semaphore, and to \n        &#39; read its permissions.\n        Dim rule As New SemaphoreAccessRule(user, _\n            SemaphoreRights.Synchronize _\n            Or SemaphoreRights.Modify _\n            Or SemaphoreRights.ReadPermissions, _\n            AccessControlType.Allow)\n        mSec.AddAccessRule(rule)\n\n        &#39; Add a rule that denies the current user the \n        &#39; right to change permissions on the semaphore.\n        rule = New SemaphoreAccessRule(user, _\n            SemaphoreRights.ChangePermissions, _\n            AccessControlType.Deny)\n        mSec.AddAccessRule(rule)\n\n        &#39; Display the rules in the security object.\n        ShowSecurity(mSec)\n\n        &#39; Create a rule that grants the current user \n        &#39; the full control over the semaphore. Use the\n        &#39; ResetAccessRule method to replace both of \n        &#39; the existing rules with the new rule. \n        rule = New SemaphoreAccessRule(user, _\n            SemaphoreRights.FullControl, _\n            AccessControlType.Allow)\n        mSec.ResetAccessRule(rule)\n\n        ShowSecurity(mSec)\n        \n    End Sub \n\n    Private Shared Sub ShowSecurity(ByVal security As SemaphoreSecurity)\n        Console.WriteLine(vbCrLf &amp; &quot;Current access rules:&quot; &amp; vbCrLf)\n\n        For Each ar As SemaphoreAccessRule In _\n            security.GetAccessRules(True, True, GetType(NTAccount))\n\n            Console.WriteLine(&quot;        User: {0}&quot;, ar.IdentityReference)\n            Console.WriteLine(&quot;        Type: {0}&quot;, ar.AccessControlType)\n            Console.WriteLine(&quot;      Rights: {0}&quot;, ar.SemaphoreRights)\n            Console.WriteLine()\n        Next\n\n    End Sub\nEnd Class \n\n&#39;This code example produces output similar to following:\n&#39;\n&#39;Current access rules:\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Deny\n&#39;      Rights: ChangePermissions\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Allow\n&#39;      Rights: Modify, ReadPermissions, Synchronize\n&#39;\n&#39;\n&#39;Current access rules:\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Allow\n&#39;      Rights: FullControl\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_AccessControl_SemaphoreSecurity_SetAccessRule_System_Security_AccessControl_SemaphoreAccessRule_\">\r\n    \r\n            <a id=\"System_Security_AccessControl_SemaphoreSecurity_SetAccessRule_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetAccessRule(SemaphoreAccessRule)</div>        \r\n          </div>\r\n    \r\n            <p>Removes all access control rules with the same user and <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> (allow or deny) as the specified rule, and then adds the specified rule.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetAccessRule (System.Security.AccessControl.SemaphoreAccessRule rule);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rule</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.semaphoreaccessrule\" data-linktype=\"relative-path\">SemaphoreAccessRule</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.security.accesscontrol.semaphoreaccessrule\" data-linktype=\"relative-path\">SemaphoreAccessRule</a> to add. The user and <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> of this rule determine the rules to remove before this rule is added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>rule</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the specified rule has <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a>, the effect of this method is to remove all <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> rules for the specified user, replacing them with the specified rule. If the specified rule has <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a>, all <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> rules for the specified user are replaced with the specified rule.  </p>\n<p> If there are no rules whose user and <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> match the specified rule, <code>rule</code> is added.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how the SetAccessRule method removes all rules that match both the user and the <a class=\"xref\" href=\"system.security.accesscontrol.accesscontroltype\" data-linktype=\"relative-path\">AccessControlType</a> of <code>rule</code>, replacing them with <code>rule</code>.  </p>\n<p> The example creates a <a class=\"xref\" href=\"system.security.accesscontrol.semaphoresecurity\" data-linktype=\"relative-path\">SemaphoreSecurity</a> object and adds rules that allow and deny various rights for the current user. The example then creates a new rule that allows the current user full control, and uses the SetAccessRule method to replace the existing Allow rule with the new rule. The rule that denies access is not affected.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This example does not attach the security object to a <a class=\"xref\" href=\"system.threading.semaphore\" data-linktype=\"relative-path\">Semaphore</a> object. Examples that attach security objects can be found in <a class=\"xref\" href=\"system.threading.semaphore#System_Threading_Semaphore_GetAccessControl_\" data-linktype=\"relative-path\">GetAccessControl</a> and <a class=\"xref\" href=\"system.threading.semaphore#System_Threading_Semaphore_SetAccessControl_\" data-linktype=\"relative-path\">SetAccessControl</a>.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"System.Security.AccessControl.SemaphoreSecurity.SetAccessRule#1\">Imports System\nImports System.Threading\nImports System.Security.AccessControl\nImports System.Security.Principal\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        &#39; Create a string representing the current user.\n        Dim user As String = Environment.UserDomainName _ \n            &amp; &quot;\\&quot; &amp; Environment.UserName\n\n        &#39; Create a security object that grants no access.\n        Dim mSec As New SemaphoreSecurity()\n\n        &#39; Add a rule that grants the current user the \n        &#39; right to enter or release the semaphore, and to \n        &#39; read its permissions.\n        Dim rule As New SemaphoreAccessRule(user, _\n            SemaphoreRights.Synchronize _\n            Or SemaphoreRights.Modify _\n            Or SemaphoreRights.ReadPermissions, _\n            AccessControlType.Allow)\n        mSec.AddAccessRule(rule)\n\n        &#39; Add a rule that denies the current user the \n        &#39; right to change permissions on the semaphore.\n        rule = New SemaphoreAccessRule(user, _\n            SemaphoreRights.ChangePermissions, _\n            AccessControlType.Deny)\n        mSec.AddAccessRule(rule)\n\n        &#39; Display the rules in the security object.\n        ShowSecurity(mSec)\n\n        &#39; Create a rule that grants the current user \n        &#39; the full control over the semaphore. Use the\n        &#39; SetAccessRule method to replace the \n        &#39; the existing Allow rule with the new rule. \n        rule = New SemaphoreAccessRule(user, _\n            SemaphoreRights.FullControl, _\n            AccessControlType.Allow)\n        mSec.SetAccessRule(rule)\n\n        ShowSecurity(mSec)\n        \n    End Sub \n\n    Private Shared Sub ShowSecurity(ByVal security As SemaphoreSecurity)\n        Console.WriteLine(vbCrLf &amp; &quot;Current access rules:&quot; &amp; vbCrLf)\n\n        For Each ar As SemaphoreAccessRule In _\n            security.GetAccessRules(True, True, GetType(NTAccount))\n\n            Console.WriteLine(&quot;        User: {0}&quot;, ar.IdentityReference)\n            Console.WriteLine(&quot;        Type: {0}&quot;, ar.AccessControlType)\n            Console.WriteLine(&quot;      Rights: {0}&quot;, ar.SemaphoreRights)\n            Console.WriteLine()\n        Next\n\n    End Sub\nEnd Class \n\n&#39;This code example produces output similar to following:\n&#39;\n&#39;Current access rules:\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Deny\n&#39;      Rights: ChangePermissions\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Allow\n&#39;      Rights: Modify, ReadPermissions, Synchronize\n&#39;\n&#39;\n&#39;Current access rules:\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Deny\n&#39;      Rights: ChangePermissions\n&#39;\n&#39;        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n&#39;        Type: Allow\n&#39;      Rights: FullControl\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.AccessControl.SemaphoreSecurity.SetAccessRule#1\">using System;\nusing System.Threading;\nusing System.Security.AccessControl;\nusing System.Security.Principal;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Create a string representing the current user.\n        string user = Environment.UserDomainName + &quot;\\\\&quot; + \n            Environment.UserName;\n\n        // Create a security object that grants no access.\n        SemaphoreSecurity mSec = new SemaphoreSecurity();\n\n        // Add a rule that grants the current user the \n        // right to enter or release the semaphore and read the\n        // permissions on the semaphore.\n        SemaphoreAccessRule rule = new SemaphoreAccessRule(user, \n            SemaphoreRights.Synchronize | SemaphoreRights.Modify\n                | SemaphoreRights.ReadPermissions, \n            AccessControlType.Allow);\n        mSec.AddAccessRule(rule);\n\n        // Add a rule that denies the current user the \n        // right to change permissions on the semaphore.\n        rule = new SemaphoreAccessRule(user, \n            SemaphoreRights.ChangePermissions, \n            AccessControlType.Deny);\n        mSec.AddAccessRule(rule);\n\n        // Display the rules in the security object.\n        ShowSecurity(mSec);\n\n        // Create a rule that grants the current user \n        // the full control over the semaphore. Use the\n        // SetAccessRule method to replace the \n        // existing Allow rule with the new rule. \n        rule = new SemaphoreAccessRule(user,\n            SemaphoreRights.FullControl,\n            AccessControlType.Allow);\n        mSec.SetAccessRule(rule);\n\n        ShowSecurity(mSec);\n    }\n\n    private static void ShowSecurity(SemaphoreSecurity security)\n    {\n        Console.WriteLine(&quot;\\r<br>Current access rules:\\r<br>&quot;);\n\n        foreach(SemaphoreAccessRule ar in \n            security.GetAccessRules(true, true, typeof(NTAccount)))\n        {\n            Console.WriteLine(&quot;        User: {0}&quot;, ar.IdentityReference);\n            Console.WriteLine(&quot;        Type: {0}&quot;, ar.AccessControlType);\n            Console.WriteLine(&quot;      Rights: {0}&quot;, ar.SemaphoreRights);\n            Console.WriteLine();\n        }\n    }\n}\n\n/*This code example produces output similar to following:\n\nCurrent access rules:\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Deny\n      Rights: ChangePermissions\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Allow\n      Rights: Modify, ReadPermissions, Synchronize\n\n\nCurrent access rules:\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Deny\n      Rights: ChangePermissions\n\n        User: TestDomain&nbsp;&nbsp;&nbsp;&nbsp;estUser\n        Type: Allow\n      Rights: FullControl\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_AccessControl_SemaphoreSecurity_SetAuditRule_System_Security_AccessControl_SemaphoreAuditRule_\">\r\n    \r\n            <a id=\"System_Security_AccessControl_SemaphoreSecurity_SetAuditRule_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetAuditRule(SemaphoreAuditRule)</div>        \r\n          </div>\r\n    \r\n            <p>Removes all audit rules with the same user as the specified rule, regardless of the <a class=\"xref\" href=\"system.security.accesscontrol.auditflags\" data-linktype=\"relative-path\">AuditFlags</a> value, and then adds the specified rule.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetAuditRule (System.Security.AccessControl.SemaphoreAuditRule rule);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rule</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.semaphoreauditrule\" data-linktype=\"relative-path\">SemaphoreAuditRule</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.security.accesscontrol.semaphoreauditrule\" data-linktype=\"relative-path\">SemaphoreAuditRule</a> to add. The user specified by this rule determines the rules to remove before this rule is added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>rule</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If there are no audit rules whose user matches the specified rule, <code>rule</code> is added.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.AccessControl.SemaphoreSecurity.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.AccessControl.SemaphoreSecurity.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.SemaphoreSecurity\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.SemaphoreSecurity..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.SemaphoreSecurity.AccessRightType\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.SemaphoreSecurity.AccessRuleFactory\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.SemaphoreSecurity.AccessRuleType\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.SemaphoreSecurity.AddAccessRule\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.SemaphoreSecurity.AddAuditRule\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.SemaphoreSecurity.AuditRuleFactory\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.SemaphoreSecurity.AuditRuleType\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRule\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleAll\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleSpecific\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.SemaphoreSecurity.SetAccessRule\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.SemaphoreSecurity.SetAuditRule\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"dacdae37-3376-2bd4-4093-46150c4f01d6\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the Windows access control security for a named semaphore. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Security.AccessControl/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.AccessControl.SemaphoreSecurity\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.AccessControl.SemaphoreSecurity.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.AccessControl.SemaphoreSecurity.yml","open_to_public_contributors":true,"api_name":["System.Security.AccessControl.SemaphoreSecurity","System.Security.AccessControl.SemaphoreSecurity..ctor","System.Security.AccessControl.SemaphoreSecurity.AccessRightType","System.Security.AccessControl.SemaphoreSecurity.AccessRuleFactory","System.Security.AccessControl.SemaphoreSecurity.AccessRuleType","System.Security.AccessControl.SemaphoreSecurity.AddAccessRule","System.Security.AccessControl.SemaphoreSecurity.AddAuditRule","System.Security.AccessControl.SemaphoreSecurity.AuditRuleFactory","System.Security.AccessControl.SemaphoreSecurity.AuditRuleType","System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule","System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll","System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific","System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRule","System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleAll","System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleSpecific","System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule","System.Security.AccessControl.SemaphoreSecurity.SetAccessRule","System.Security.AccessControl.SemaphoreSecurity.SetAuditRule"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.AccessControl.SemaphoreSecurity","System::Security::AccessControl::SemaphoreSecurity","System.Security.AccessControl.SemaphoreSecurity.#ctor","System::Security::AccessControl::SemaphoreSecurity::#ctor","System.Security.AccessControl.SemaphoreSecurity.AccessRightType","System::Security::AccessControl::SemaphoreSecurity::AccessRightType","System.Security.AccessControl.SemaphoreSecurity.AccessRuleFactory","System::Security::AccessControl::SemaphoreSecurity::AccessRuleFactory","System.Security.AccessControl.SemaphoreSecurity.AccessRuleType","System::Security::AccessControl::SemaphoreSecurity::AccessRuleType","System.Security.AccessControl.SemaphoreSecurity.AddAccessRule","System::Security::AccessControl::SemaphoreSecurity::AddAccessRule","System.Security.AccessControl.SemaphoreSecurity.AddAuditRule","System::Security::AccessControl::SemaphoreSecurity::AddAuditRule","System.Security.AccessControl.SemaphoreSecurity.AuditRuleFactory","System::Security::AccessControl::SemaphoreSecurity::AuditRuleFactory","System.Security.AccessControl.SemaphoreSecurity.AuditRuleType","System::Security::AccessControl::SemaphoreSecurity::AuditRuleType","System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule","System::Security::AccessControl::SemaphoreSecurity::RemoveAccessRule","System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll","System::Security::AccessControl::SemaphoreSecurity::RemoveAccessRuleAll","System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific","System::Security::AccessControl::SemaphoreSecurity::RemoveAccessRuleSpecific","System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRule","System::Security::AccessControl::SemaphoreSecurity::RemoveAuditRule","System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleAll","System::Security::AccessControl::SemaphoreSecurity::RemoveAuditRuleAll","System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleSpecific","System::Security::AccessControl::SemaphoreSecurity::RemoveAuditRuleSpecific","System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule","System::Security::AccessControl::SemaphoreSecurity::ResetAccessRule","System.Security.AccessControl.SemaphoreSecurity.SetAccessRule","System::Security::AccessControl::SemaphoreSecurity::SetAccessRule","System.Security.AccessControl.SemaphoreSecurity.SetAuditRule","System::Security::AccessControl::SemaphoreSecurity::SetAuditRule"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"dacdae37-3376-2bd4-4093-46150c4f01d6","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Security.AccessControl/SemaphoreSecurity.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"SemaphoreSecurity class | Microsoft Docs","_op_ogTitle":"SemaphoreSecurity class","description":"Represents the Windows access control security for a named semaphore. This class cannot be inherited.\n","toc_asset_id":"_splitted/System.Security.AccessControl/toc.json","toc_rel":"_splitted/System.Security.AccessControl/toc.json","source_url":"","ms.assetid":"System.Security.AccessControl.SemaphoreSecurity","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.accesscontrol.semaphoresecurity","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.accesscontrol.semaphoresecurity","fileRelativePath":"System.Security.AccessControl.SemaphoreSecurity.html"},"themesRelativePathToOutputRoot":"_themes/"}