{"content":"    \r\n    <h1 id=\"System_Web_UI_WebControls_DataList\">\r\n      <span class=\"lang-csharp\">DataList</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>A data bound list control that displays items using templates.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.ComponentModel.Designer(&quot;System.Web.UI.Design.WebControls.DataListDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;)]\n[System.ComponentModel.Editor(&quot;System.Web.UI.Design.WebControls.DataListComponentEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;, typeof(System.ComponentModel.ComponentEditor))]\n[System.Web.UI.ControlValueProperty(&quot;SelectedValue&quot;)]\npublic class DataList : System.Web.UI.WebControls.BaseDataList, System.Web.UI.INamingContainer, System.Web.UI.WebControls.IRepeatInfoUser</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol\" data-linktype=\"relative-path\">WebControl</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l3\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist\" data-linktype=\"relative-path\">System.Web.UI.WebControls.BaseDataList</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l4\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">DataList</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_Adapter\" data-linktype=\"relative-path\">Adapter</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_AddedControl_System_Web_UI_Control_System_Int32_\" data-linktype=\"relative-path\">AddedControl(Control,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ApplyStyleSheetSkin_System_Web_UI_Page_\" data-linktype=\"relative-path\">ApplyStyleSheetSkin(Page)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_AppRelativeTemplateSourceDirectory\" data-linktype=\"relative-path\">AppRelativeTemplateSourceDirectory</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_BeginRenderTracing_System_IO_TextWriter_System_Object_\" data-linktype=\"relative-path\">BeginRenderTracing(TextWriter,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_BindingContainer\" data-linktype=\"relative-path\">BindingContainer</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_BuildProfileTree_System_String_System_Boolean_\" data-linktype=\"relative-path\">BuildProfileTree(String,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ChildControlsCreated\" data-linktype=\"relative-path\">ChildControlsCreated</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ClearCachedClientID\" data-linktype=\"relative-path\">ClearCachedClientID()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ClearChildControlState\" data-linktype=\"relative-path\">ClearChildControlState()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ClearChildState\" data-linktype=\"relative-path\">ClearChildState()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ClearChildViewState\" data-linktype=\"relative-path\">ClearChildViewState()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ClearEffectiveClientIDMode\" data-linktype=\"relative-path\">ClearEffectiveClientIDMode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ClientID\" data-linktype=\"relative-path\">ClientID</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ClientIDMode\" data-linktype=\"relative-path\">ClientIDMode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ClientIDSeparator\" data-linktype=\"relative-path\">ClientIDSeparator</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_Context\" data-linktype=\"relative-path\">Context</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_CreateControlCollection\" data-linktype=\"relative-path\">CreateControlCollection()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_DataBind_System_Boolean_\" data-linktype=\"relative-path\">DataBind(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_DataBindChildren\" data-linktype=\"relative-path\">DataBindChildren()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_DataBinding\" data-linktype=\"relative-path\">DataBinding</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_DataItemContainer\" data-linktype=\"relative-path\">DataItemContainer</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_DataKeysContainer\" data-linktype=\"relative-path\">DataKeysContainer</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_DesignMode\" data-linktype=\"relative-path\">DesignMode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_Disposed\" data-linktype=\"relative-path\">Disposed</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_EnableViewState\" data-linktype=\"relative-path\">EnableViewState</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_EndRenderTracing_System_IO_TextWriter_System_Object_\" data-linktype=\"relative-path\">EndRenderTracing(TextWriter,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_EnsureChildControls\" data-linktype=\"relative-path\">EnsureChildControls()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_EnsureID\" data-linktype=\"relative-path\">EnsureID()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_Events\" data-linktype=\"relative-path\">Events</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_FindControl_System_String_\" data-linktype=\"relative-path\">FindControl(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_FindControl_System_String_System_Int32_\" data-linktype=\"relative-path\">FindControl(String,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_Focus\" data-linktype=\"relative-path\">Focus()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_GetDesignModeState\" data-linktype=\"relative-path\">GetDesignModeState()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_GetRouteUrl_System_Object_\" data-linktype=\"relative-path\">GetRouteUrl(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_GetRouteUrl_System_String_System_Object_\" data-linktype=\"relative-path\">GetRouteUrl(String,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_GetRouteUrl_System_String_System_Web_Routing_RouteValueDictionary_\" data-linktype=\"relative-path\">GetRouteUrl(String,RouteValueDictionary)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_GetRouteUrl_System_Web_Routing_RouteValueDictionary_\" data-linktype=\"relative-path\">GetRouteUrl(RouteValueDictionary)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_GetUniqueIDRelativeTo_System_Web_UI_Control_\" data-linktype=\"relative-path\">GetUniqueIDRelativeTo(Control)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_HasChildViewState\" data-linktype=\"relative-path\">HasChildViewState</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_HasControls\" data-linktype=\"relative-path\">HasControls()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_HasEvents\" data-linktype=\"relative-path\">HasEvents()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ID\" data-linktype=\"relative-path\">ID</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_IdSeparator\" data-linktype=\"relative-path\">IdSeparator</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_Init\" data-linktype=\"relative-path\">Init</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_IsChildControlStateCleared\" data-linktype=\"relative-path\">IsChildControlStateCleared</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_IsLiteralContent\" data-linktype=\"relative-path\">IsLiteralContent()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_IsTrackingViewState\" data-linktype=\"relative-path\">IsTrackingViewState</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_IsViewStateEnabled\" data-linktype=\"relative-path\">IsViewStateEnabled</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_Load\" data-linktype=\"relative-path\">Load</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_LoadControlState_System_Object_\" data-linktype=\"relative-path\">LoadControlState(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_LoadViewStateByID\" data-linktype=\"relative-path\">LoadViewStateByID</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_MapPathSecure_System_String_\" data-linktype=\"relative-path\">MapPathSecure(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_NamingContainer\" data-linktype=\"relative-path\">NamingContainer</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_OnUnload_System_EventArgs_\" data-linktype=\"relative-path\">OnUnload(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_OpenFile_System_String_\" data-linktype=\"relative-path\">OpenFile(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_Page\" data-linktype=\"relative-path\">Page</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_Parent\" data-linktype=\"relative-path\">Parent</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_PreRender\" data-linktype=\"relative-path\">PreRender</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_RaiseBubbleEvent_System_Object_System_EventArgs_\" data-linktype=\"relative-path\">RaiseBubbleEvent(Object,EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_RemovedControl_System_Web_UI_Control_\" data-linktype=\"relative-path\">RemovedControl(Control)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_RenderChildren_System_Web_UI_HtmlTextWriter_\" data-linktype=\"relative-path\">RenderChildren(HtmlTextWriter)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_RenderControl_System_Web_UI_HtmlTextWriter_\" data-linktype=\"relative-path\">RenderControl(HtmlTextWriter)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_RenderControl_System_Web_UI_HtmlTextWriter_System_Web_UI_Adapters_ControlAdapter_\" data-linktype=\"relative-path\">RenderControl(HtmlTextWriter,ControlAdapter)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_RenderingCompatibility\" data-linktype=\"relative-path\">RenderingCompatibility</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ResolveAdapter\" data-linktype=\"relative-path\">ResolveAdapter()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ResolveClientUrl_System_String_\" data-linktype=\"relative-path\">ResolveClientUrl(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ResolveUrl_System_String_\" data-linktype=\"relative-path\">ResolveUrl(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_SaveControlState\" data-linktype=\"relative-path\">SaveControlState()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_SetDesignModeState_System_Collections_IDictionary_\" data-linktype=\"relative-path\">SetDesignModeState(IDictionary)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_SetRenderMethodDelegate_System_Web_UI_RenderMethod_\" data-linktype=\"relative-path\">SetRenderMethodDelegate(RenderMethod)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_SetTraceData_System_Object_System_Object_\" data-linktype=\"relative-path\">SetTraceData(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_SetTraceData_System_Object_System_Object_System_Object_\" data-linktype=\"relative-path\">SetTraceData(Object,Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_Site\" data-linktype=\"relative-path\">Site</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_System_Web_UI_IControlBuilderAccessor_ControlBuilder\" data-linktype=\"relative-path\">IControlBuilderAccessor.ControlBuilder</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_System_Web_UI_IControlDesignerAccessor_GetDesignModeState\" data-linktype=\"relative-path\">IControlDesignerAccessor.GetDesignModeState()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_System_Web_UI_IControlDesignerAccessor_SetDesignModeState_System_Collections_IDictionary_\" data-linktype=\"relative-path\">IControlDesignerAccessor.SetDesignModeState(IDictionary)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_System_Web_UI_IControlDesignerAccessor_SetOwnerControl_System_Web_UI_Control_\" data-linktype=\"relative-path\">IControlDesignerAccessor.SetOwnerControl(Control)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_System_Web_UI_IControlDesignerAccessor_UserData\" data-linktype=\"relative-path\">IControlDesignerAccessor.UserData</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_System_Web_UI_IDataBindingsAccessor_DataBindings\" data-linktype=\"relative-path\">IDataBindingsAccessor.DataBindings</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_System_Web_UI_IDataBindingsAccessor_HasDataBindings\" data-linktype=\"relative-path\">IDataBindingsAccessor.HasDataBindings</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_System_Web_UI_IExpressionsAccessor_Expressions\" data-linktype=\"relative-path\">IExpressionsAccessor.Expressions</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_System_Web_UI_IExpressionsAccessor_HasExpressions\" data-linktype=\"relative-path\">IExpressionsAccessor.HasExpressions</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_System_Web_UI_IParserAccessor_AddParsedSubObject_System_Object_\" data-linktype=\"relative-path\">IParserAccessor.AddParsedSubObject(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_TemplateControl\" data-linktype=\"relative-path\">TemplateControl</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_TemplateSourceDirectory\" data-linktype=\"relative-path\">TemplateSourceDirectory</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_UniqueID\" data-linktype=\"relative-path\">UniqueID</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_Unload\" data-linktype=\"relative-path\">Unload</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ValidateRequestMode\" data-linktype=\"relative-path\">ValidateRequestMode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ViewState\" data-linktype=\"relative-path\">ViewState</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ViewStateIgnoresCase\" data-linktype=\"relative-path\">ViewStateIgnoresCase</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ViewStateMode\" data-linktype=\"relative-path\">ViewStateMode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_Visible\" data-linktype=\"relative-path\">Visible</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_AddParsedSubObject_System_Object_\" data-linktype=\"relative-path\">AddParsedSubObject(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_Caption\" data-linktype=\"relative-path\">Caption</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_CaptionAlign\" data-linktype=\"relative-path\">CaptionAlign</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_CellPadding\" data-linktype=\"relative-path\">CellPadding</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_CellSpacing\" data-linktype=\"relative-path\">CellSpacing</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_Controls\" data-linktype=\"relative-path\">Controls</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_CreateChildControls\" data-linktype=\"relative-path\">CreateChildControls()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_CreateDataSourceSelectArguments\" data-linktype=\"relative-path\">CreateDataSourceSelectArguments()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_DataBind\" data-linktype=\"relative-path\">DataBind()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_DataKeyField\" data-linktype=\"relative-path\">DataKeyField</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_DataKeys\" data-linktype=\"relative-path\">DataKeys</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_DataKeysArray\" data-linktype=\"relative-path\">DataKeysArray</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_DataMember\" data-linktype=\"relative-path\">DataMember</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_DataSource\" data-linktype=\"relative-path\">DataSource</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_DataSourceID\" data-linktype=\"relative-path\">DataSourceID</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_EnsureDataBound\" data-linktype=\"relative-path\">EnsureDataBound()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_GetData\" data-linktype=\"relative-path\">GetData()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_HorizontalAlign\" data-linktype=\"relative-path\">HorizontalAlign</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_Initialized\" data-linktype=\"relative-path\">Initialized</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_IsBindableType_System_Type_\" data-linktype=\"relative-path\">IsBindableType(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_IsBoundUsingDataSourceID\" data-linktype=\"relative-path\">IsBoundUsingDataSourceID</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_OnDataBinding_System_EventArgs_\" data-linktype=\"relative-path\">OnDataBinding(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_OnDataPropertyChanged\" data-linktype=\"relative-path\">OnDataPropertyChanged()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_OnDataSourceViewChanged_System_Object_System_EventArgs_\" data-linktype=\"relative-path\">OnDataSourceViewChanged(Object,EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_OnLoad_System_EventArgs_\" data-linktype=\"relative-path\">OnLoad(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_OnPreRender_System_EventArgs_\" data-linktype=\"relative-path\">OnPreRender(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_OnSelectedIndexChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnSelectedIndexChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_Render_System_Web_UI_HtmlTextWriter_\" data-linktype=\"relative-path\">Render(HtmlTextWriter)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_RequiresDataBinding\" data-linktype=\"relative-path\">RequiresDataBinding</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_SelectArguments\" data-linktype=\"relative-path\">SelectArguments</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_SelectedIndexChanged\" data-linktype=\"relative-path\">SelectedIndexChanged</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_SupportsDisabledAttribute\" data-linktype=\"relative-path\">SupportsDisabledAttribute</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_UseAccessibleHeader\" data-linktype=\"relative-path\">UseAccessibleHeader</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_AccessKey\" data-linktype=\"relative-path\">AccessKey</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_AddAttributesToRender_System_Web_UI_HtmlTextWriter_\" data-linktype=\"relative-path\">AddAttributesToRender(HtmlTextWriter)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_ApplyStyle_System_Web_UI_WebControls_Style_\" data-linktype=\"relative-path\">ApplyStyle(Style)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_Attributes\" data-linktype=\"relative-path\">Attributes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_BackColor\" data-linktype=\"relative-path\">BackColor</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_BorderColor\" data-linktype=\"relative-path\">BorderColor</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_BorderStyle\" data-linktype=\"relative-path\">BorderStyle</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_BorderWidth\" data-linktype=\"relative-path\">BorderWidth</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_ControlStyle\" data-linktype=\"relative-path\">ControlStyle</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_ControlStyleCreated\" data-linktype=\"relative-path\">ControlStyleCreated</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_CopyBaseAttributes_System_Web_UI_WebControls_WebControl_\" data-linktype=\"relative-path\">CopyBaseAttributes(WebControl)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_CssClass\" data-linktype=\"relative-path\">CssClass</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_DisabledCssClass\" data-linktype=\"relative-path\">DisabledCssClass</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_Enabled\" data-linktype=\"relative-path\">Enabled</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_EnableTheming\" data-linktype=\"relative-path\">EnableTheming</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_Font\" data-linktype=\"relative-path\">Font</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_ForeColor\" data-linktype=\"relative-path\">ForeColor</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_HasAttributes\" data-linktype=\"relative-path\">HasAttributes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_Height\" data-linktype=\"relative-path\">Height</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_IsEnabled\" data-linktype=\"relative-path\">IsEnabled</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_MergeStyle_System_Web_UI_WebControls_Style_\" data-linktype=\"relative-path\">MergeStyle(Style)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_RenderBeginTag_System_Web_UI_HtmlTextWriter_\" data-linktype=\"relative-path\">RenderBeginTag(HtmlTextWriter)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_RenderEndTag_System_Web_UI_HtmlTextWriter_\" data-linktype=\"relative-path\">RenderEndTag(HtmlTextWriter)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_SkinID\" data-linktype=\"relative-path\">SkinID</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_Style\" data-linktype=\"relative-path\">Style</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_System_Web_UI_IAttributeAccessor_GetAttribute_System_String_\" data-linktype=\"relative-path\">IAttributeAccessor.GetAttribute(String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_System_Web_UI_IAttributeAccessor_SetAttribute_System_String_System_String_\" data-linktype=\"relative-path\">IAttributeAccessor.SetAttribute(String,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_TabIndex\" data-linktype=\"relative-path\">TabIndex</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_TagName\" data-linktype=\"relative-path\">TagName</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_ToolTip\" data-linktype=\"relative-path\">ToolTip</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_Width\" data-linktype=\"relative-path\">Width</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>In this topic:  </p>\n<ul>\n<li><p><a href=\"#introduction\" data-linktype=\"self-bookmark\">Introduction</a>  </p>\n</li>\n<li><p><a href=\"#templates\" data-linktype=\"self-bookmark\">Templates</a>  </p>\n</li>\n<li><p><a href=\"#customizing_the_appearance_of_the_datalist_control\" data-linktype=\"self-bookmark\">Customizing the Appearance of the DataList Control</a>  </p>\n</li>\n<li><p><a href=\"#display_direction_and_layout\" data-linktype=\"self-bookmark\">Display Direction and Layout</a>  </p>\n</li>\n<li><p><a href=\"#security\" data-linktype=\"self-bookmark\">Security</a>  </p>\n</li>\n<li><p><a href=\"#declarative_syntax\" data-linktype=\"self-bookmark\">Declarative Syntax</a>  </p>\n</li>\n</ul>\n<p><a name=\"introduction\"></a>   </p>\n<h2 id=\"introduction\">Introduction</h2>\n<p> Use the DataList control to display a template-defined data bound list. The DataList control supports selecting and editing.  </p>\n<p><a name=\"templates\"></a>   </p>\n<h2 id=\"templates\">Templates</h2>\n<p> The contents of the DataList control can be manipulated by using templates. The following table lists the supported templates.  </p>\n<table>\n<thead>\n<tr>\n<th>Template Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_AlternatingItemTemplate_\" data-linktype=\"relative-path\">AlternatingItemTemplate</a></td>\n<td>If defined, provides the content and layout for alternating items in the DataList. If not defined, <code>ItemTemplate</code> is used.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_EditItemTemplate_\" data-linktype=\"relative-path\">EditItemTemplate</a></td>\n<td>If defined, provides the content and layout for the item currently being edited in the DataList. If not defined, <code>ItemTemplate</code> is used.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_FooterTemplate_\" data-linktype=\"relative-path\">FooterTemplate</a></td>\n<td>If defined, provides the content and layout for the footer section of the DataList. If not defined, a footer section will not be displayed.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_HeaderTemplate_\" data-linktype=\"relative-path\">HeaderTemplate</a></td>\n<td>If defined, provides the content and layout for the header section of the DataList. If not defined, a header section will not be displayed.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_ItemTemplate_\" data-linktype=\"relative-path\">ItemTemplate</a></td>\n<td>Required template that provides the content and layout for items in the DataList.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_SelectedItemTemplate_\" data-linktype=\"relative-path\">SelectedItemTemplate</a></td>\n<td>If defined, provides the content and layout for the currently selected item in the DataList. If not defined, <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_ItemTemplate_\" data-linktype=\"relative-path\">ItemTemplate</a> is used.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_SeparatorTemplate_\" data-linktype=\"relative-path\">SeparatorTemplate</a></td>\n<td>If defined, provides the content and layout for the separator between items in the DataList. If not defined, a separator will not be displayed.</td>\n</tr>\n</tbody>\n</table>\n<p> At the very minimum, the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_ItemTemplate_\" data-linktype=\"relative-path\">ItemTemplate</a> needs to be defined to display the items in the DataList control. Additional templates can be used to provide a custom look to the DataList control.  </p>\n<p><a name=\"customizing_the_appearance_of_the_datalist_control\"></a>   </p>\n<h2 id=\"customizing-the-appearance-of-the-datalist-control\">Customizing the Appearance of the DataList Control</h2>\n<p> The appearance of the DataList control may be customized by setting the style properties for the different parts of the control. The following table lists the different style properties.  </p>\n<table>\n<thead>\n<tr>\n<th>Style Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_AlternatingItemStyle_\" data-linktype=\"relative-path\">AlternatingItemStyle</a></td>\n<td>Specifies the style for alternating items in the DataList control.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_EditItemStyle_\" data-linktype=\"relative-path\">EditItemStyle</a></td>\n<td>Specifies the style for the item being edited in the DataList control.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_FooterStyle_\" data-linktype=\"relative-path\">FooterStyle</a></td>\n<td>Specifies the style for the footer in the DataList control.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_HeaderStyle_\" data-linktype=\"relative-path\">HeaderStyle</a></td>\n<td>Specifies the style for the header in the DataList control.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_ItemStyle_\" data-linktype=\"relative-path\">ItemStyle</a></td>\n<td>Specifies the style for the items in the DataList control.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_SelectedItemStyle_\" data-linktype=\"relative-path\">SelectedItemStyle</a></td>\n<td>Specifies the style for the selected item in the DataList control.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_SeparatorStyle_\" data-linktype=\"relative-path\">SeparatorStyle</a></td>\n<td>Specifies the style for the separator between the items in the DataList control.</td>\n</tr>\n</tbody>\n</table>\n<p> You can also show or hide different parts of the control. The following table lists the properties that control which parts are shown or hidden.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_ShowFooter_\" data-linktype=\"relative-path\">ShowFooter</a></td>\n<td>Shows or hides the footer section of the DataList control.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_ShowHeader_\" data-linktype=\"relative-path\">ShowHeader</a></td>\n<td>Shows or hides the header section of the DataList control.</td>\n</tr>\n</tbody>\n</table>\n<p><a name=\"display_direction_and_layout\"></a>   </p>\n<h2 id=\"display-direction-and-layout\">Display Direction and Layout</h2>\n<p> The display direction of a DataList control can be vertical or horizontal. Set the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_RepeatDirection_\" data-linktype=\"relative-path\">RepeatDirection</a> property to specify the display direction.  </p>\n<p> The layout of the DataList control is controlled with the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_RepeatLayout_\" data-linktype=\"relative-path\">RepeatLayout</a> property. Setting this property to <code>RepeatLayout.Table</code> will display the DataList in a table format, while <code>RepeatLayout.Flow</code> displays the DataList without a table structure.  </p>\n<p><a name=\"security\"></a>   </p>\n<h2 id=\"security\">Security</h2>\n<p> The <code>DataList</code> control can contain controls that enable users to enter information.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input.  </p>\n</div>\n<p> For more information about security, see <a href=\"../Topic/Securing%20Standard%20Controls.md\" data-linktype=\"relative-path\">Securing Standard Controls</a>, <a href=\"../Topic/How%20to:%20Protect%20Against%20Script%20Exploits%20in%20a%20Web%20Application%20by%20Applying%20HTML%20Encoding%20to%20Strings.md\" data-linktype=\"relative-path\">How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings</a>, and <a href=\"../Topic/Validating%20User%20Input%20in%20ASP.NET%20Web%20Pages.md\" data-linktype=\"relative-path\">Validating User Input in ASP.NET Web Pages</a>.  </p>\n<p><a name=\"declarative_syntax\"></a>   </p>\n<h2 id=\"declarative-syntax\">Declarative Syntax</h2>\n<pre><code>&lt;asp:DataList  \n    AccessKey=&quot;string&quot;  \n    BackColor=&quot;color name|#dddddd&quot;  \n    BorderColor=&quot;color name|#dddddd&quot;  \n    BorderStyle=&quot;NotSet|None|Dotted|Dashed|Solid|Double|Groove|Ridge|  \n        Inset|Outset&quot;  \n    BorderWidth=&quot;size&quot;  \n    Caption=&quot;string&quot;  \n    CaptionAlign=&quot;NotSet|Top|Bottom|Left|Right&quot;  \n    CellPadding=&quot;integer&quot;  \n    CellSpacing=&quot;integer&quot;  \n    CssClass=&quot;string&quot;  \n    DataKeyField=&quot;string&quot;  \n    DataMember=&quot;string&quot;  \n    DataSource=&quot;string&quot;  \n    DataSourceID=&quot;string&quot;  \n    EditItemIndex=&quot;integer&quot;  \n    Enabled=&quot;True|False&quot;  \n    EnableTheming=&quot;True|False&quot;  \n    EnableViewState=&quot;True|False&quot;  \n    ExtractTemplateRows=&quot;True|False&quot;  \n    Font-Bold=&quot;True|False&quot;  \n    Font-Italic=&quot;True|False&quot;  \n    Font-Names=&quot;string&quot;  \n    Font-Overline=&quot;True|False&quot;  \n    Font-Size=&quot;string|Smaller|Larger|XX-Small|X-Small|Small|Medium|  \n        Large|X-Large|XX-Large&quot;  \n    Font-Strikeout=&quot;True|False&quot;  \n    Font-Underline=&quot;True|False&quot;  \n    ForeColor=&quot;color name|#dddddd&quot;  \n    GridLines=&quot;None|Horizontal|Vertical|Both&quot;  \n    Height=&quot;size&quot;  \n    HorizontalAlign=&quot;NotSet|Left|Center|Right|Justify&quot;  \n    ID=&quot;string&quot;  \n    OnCancelCommand=&quot;CancelCommand event handler&quot;  \n    OnDataBinding=&quot;DataBinding event handler&quot;  \n    OnDeleteCommand=&quot;DeleteCommand event handler&quot;  \n    OnDisposed=&quot;Disposed event handler&quot;  \n    OnEditCommand=&quot;EditCommand event handler&quot;  \n    OnInit=&quot;Init event handler&quot;  \n    OnItemCommand=&quot;ItemCommand event handler&quot;  \n    OnItemCreated=&quot;ItemCreated event handler&quot;  \n    OnItemDataBound=&quot;ItemDataBound event handler&quot;  \n    OnLoad=&quot;Load event handler&quot;  \n    OnPreRender=&quot;PreRender event handler&quot;  \n    OnSelectedIndexChanged=&quot;SelectedIndexChanged event handler&quot;  \n    OnUnload=&quot;Unload event handler&quot;  \n    OnUpdateCommand=&quot;UpdateCommand event handler&quot;  \n    RepeatColumns=&quot;integer&quot;  \n    RepeatDirection=&quot;Horizontal|Vertical&quot;  \n    RepeatLayout=&quot;Table|Flow&quot;  \n    runat=&quot;server&quot;  \n    SelectedIndex=&quot;integer&quot;  \n    ShowFooter=&quot;True|False&quot;  \n    ShowHeader=&quot;True|False&quot;  \n    SkinID=&quot;string&quot;  \n    Style=&quot;string&quot;  \n    TabIndex=&quot;integer&quot;  \n    ToolTip=&quot;string&quot;  \n    UseAccessibleHeader=&quot;True|False&quot;  \n    Visible=&quot;True|False&quot;  \n    Width=&quot;size&quot;  \n&gt;  \n        &lt;AlternatingItemStyle /&gt;  \n        &lt;AlternatingItemTemplate&gt;  \n            &lt;!-- child controls --&gt;  \n        &lt;/AlternatingItemTemplate&gt;  \n        &lt;EditItemStyle /&gt;  \n        &lt;EditItemTemplate&gt;  \n            &lt;!-- child controls --&gt;  \n        &lt;/EditItemTemplate&gt;  \n        &lt;FooterStyle /&gt;  \n        &lt;FooterTemplate&gt;  \n            &lt;!-- child controls --&gt;  \n        &lt;/FooterTemplate&gt;  \n        &lt;HeaderStyle /&gt;  \n        &lt;HeaderTemplate&gt;  \n            &lt;!-- child controls --&gt;  \n        &lt;/HeaderTemplate&gt;  \n        &lt;ItemStyle /&gt;  \n        &lt;ItemTemplate&gt;  \n            &lt;!-- child controls --&gt;  \n        &lt;/ItemTemplate&gt;  \n        &lt;SelectedItemStyle /&gt;  \n        &lt;SelectedItemTemplate&gt;  \n            &lt;!-- child controls --&gt;  \n        &lt;/SelectedItemTemplate&gt;  \n        &lt;SeparatorStyle /&gt;  \n        &lt;SeparatorTemplate&gt;  \n            &lt;!-- child controls --&gt;  \n        &lt;/SeparatorTemplate&gt;  \n&lt;/asp:DataList&gt;  \n</code></pre>\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList__ctor\" data-linktype=\"self-bookmark\">DataList()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_CancelCommandName\" data-linktype=\"self-bookmark\">CancelCommandName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the <code>Cancel</code> command name. This field is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_DeleteCommandName\" data-linktype=\"self-bookmark\">DeleteCommandName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the <code>Delete</code> command name. This field is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_EditCommandName\" data-linktype=\"self-bookmark\">EditCommandName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the <code>Edit</code> command name. This field is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_SelectCommandName\" data-linktype=\"self-bookmark\">SelectCommandName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the <code>Select</code> command name. This field is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_UpdateCommandName\" data-linktype=\"self-bookmark\">UpdateCommandName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the <code>Update</code> command name. This field is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_AlternatingItemStyle\" data-linktype=\"self-bookmark\">AlternatingItemStyle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the style properties for alternating items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_AlternatingItemTemplate\" data-linktype=\"self-bookmark\">AlternatingItemTemplate</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the template for alternating items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_EditItemIndex\" data-linktype=\"self-bookmark\">EditItemIndex</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the index number of the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control to edit.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_EditItemStyle\" data-linktype=\"self-bookmark\">EditItemStyle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the style properties for the item selected for editing in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_EditItemTemplate\" data-linktype=\"self-bookmark\">EditItemTemplate</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the template for the item selected for editing in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_ExtractTemplateRows\" data-linktype=\"self-bookmark\">ExtractTemplateRows</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether the rows of a <a class=\"xref\" href=\"system.web.ui.webcontrols.table\" data-linktype=\"relative-path\">Table</a> control, defined in each template of a <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control, are extracted and displayed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_FooterStyle\" data-linktype=\"self-bookmark\">FooterStyle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the style properties for the footer section of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_FooterTemplate\" data-linktype=\"self-bookmark\">FooterTemplate</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the template for the footer section of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_GridLines\" data-linktype=\"self-bookmark\">GridLines</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the grid line style for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control when the <span class=\"xref\">stem.Web.UI.WebControls.DataList.RepeatLayout*</span> property is set to <code>RepeatLayout.Table</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_HeaderStyle\" data-linktype=\"self-bookmark\">HeaderStyle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the style properties for the heading section of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_HeaderTemplate\" data-linktype=\"self-bookmark\">HeaderTemplate</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the template for the heading section of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_Items\" data-linktype=\"self-bookmark\">Items</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a collection of <a class=\"xref\" href=\"system.web.ui.webcontrols.datalistitem\" data-linktype=\"relative-path\">DataListItem</a> objects representing the individual items within the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_ItemStyle\" data-linktype=\"self-bookmark\">ItemStyle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the style properties for the items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_ItemTemplate\" data-linktype=\"self-bookmark\">ItemTemplate</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the template for the items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_RepeatColumns\" data-linktype=\"self-bookmark\">RepeatColumns</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the number of columns to display in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_RepeatDirection\" data-linktype=\"self-bookmark\">RepeatDirection</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets whether the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control displays vertically or horizontally.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_RepeatLayout\" data-linktype=\"self-bookmark\">RepeatLayout</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets whether the control is displayed in a table or flow layout.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_SelectedIndex\" data-linktype=\"self-bookmark\">SelectedIndex</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the index of the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_SelectedItem\" data-linktype=\"self-bookmark\">SelectedItem</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_SelectedItemStyle\" data-linktype=\"self-bookmark\">SelectedItemStyle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the style properties for the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_SelectedItemTemplate\" data-linktype=\"self-bookmark\">SelectedItemTemplate</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the template for the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_SelectedValue\" data-linktype=\"self-bookmark\">SelectedValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the key field for the selected data list item.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_SeparatorStyle\" data-linktype=\"self-bookmark\">SeparatorStyle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the style properties of the separator between each item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_SeparatorTemplate\" data-linktype=\"self-bookmark\">SeparatorTemplate</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the template for the separator between the items of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_ShowFooter\" data-linktype=\"self-bookmark\">ShowFooter</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the footer section is displayed in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_ShowHeader\" data-linktype=\"self-bookmark\">ShowHeader</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the header section is displayed in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_TagKey\" data-linktype=\"self-bookmark\">TagKey</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the HTML tag that is used to render the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_CreateControlHierarchy_System_Boolean_\" data-linktype=\"self-bookmark\">CreateControlHierarchy(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates the control hierarchy that is used to render the data list control, with or without the specified data source.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_CreateControlStyle\" data-linktype=\"self-bookmark\">CreateControlStyle()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates the default style object that is used internally by the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control to implement all style related properties.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_CreateItem_System_Int32_System_Web_UI_WebControls_ListItemType_\" data-linktype=\"self-bookmark\">CreateItem(Int32,ListItemType)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.web.ui.webcontrols.datalistitem\" data-linktype=\"relative-path\">DataListItem</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_InitializeItem_System_Web_UI_WebControls_DataListItem_\" data-linktype=\"self-bookmark\">InitializeItem(DataListItem)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a <a class=\"xref\" href=\"system.web.ui.webcontrols.datalistitem\" data-linktype=\"relative-path\">DataListItem</a> object based on the specified templates and styles for the list-item type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_LoadViewState_System_Object_\" data-linktype=\"self-bookmark\">LoadViewState(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the previously saved view state of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_OnBubbleEvent_System_Object_System_EventArgs_\" data-linktype=\"self-bookmark\">OnBubbleEvent(Object,EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the event for the server control is passed up the page&#39;s UI server control hierarchy.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_OnCancelCommand_System_Web_UI_WebControls_DataListCommandEventArgs_\" data-linktype=\"self-bookmark\">OnCancelCommand(DataListCommandEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_CancelCommand\" data-linktype=\"relative-path\">CancelCommand</a> event. This allows you to provide a custom handler for the event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_OnDeleteCommand_System_Web_UI_WebControls_DataListCommandEventArgs_\" data-linktype=\"self-bookmark\">OnDeleteCommand(DataListCommandEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_DeleteCommand\" data-linktype=\"relative-path\">DeleteCommand</a> event. This allows you to provide a custom handler for the event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_OnEditCommand_System_Web_UI_WebControls_DataListCommandEventArgs_\" data-linktype=\"self-bookmark\">OnEditCommand(DataListCommandEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_EditCommand\" data-linktype=\"relative-path\">EditCommand</a> event. This allows you to provide a custom handler for the event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_OnInit_System_EventArgs_\" data-linktype=\"self-bookmark\">OnInit(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_Init\" data-linktype=\"relative-path\">Init</a> event for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_OnItemCommand_System_Web_UI_WebControls_DataListCommandEventArgs_\" data-linktype=\"self-bookmark\">OnItemCommand(DataListCommandEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_ItemCommand\" data-linktype=\"relative-path\">ItemCommand</a> event. This allows you to provide a custom handler for the event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_OnItemCreated_System_Web_UI_WebControls_DataListItemEventArgs_\" data-linktype=\"self-bookmark\">OnItemCreated(DataListItemEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_ItemCreated\" data-linktype=\"relative-path\">ItemCreated</a> event. This allows you to provide a custom handler for the event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_OnItemDataBound_System_Web_UI_WebControls_DataListItemEventArgs_\" data-linktype=\"self-bookmark\">OnItemDataBound(DataListItemEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_ItemDataBound\" data-linktype=\"relative-path\">ItemDataBound</a> event. This allows you to provide a custom handler for the event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_OnUpdateCommand_System_Web_UI_WebControls_DataListCommandEventArgs_\" data-linktype=\"self-bookmark\">OnUpdateCommand(DataListCommandEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_UpdateCommand\" data-linktype=\"relative-path\">UpdateCommand</a> event. This allows you to provide a custom handler for the event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_PrepareControlHierarchy\" data-linktype=\"self-bookmark\">PrepareControlHierarchy()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Prepares the control hierarchy for rendering in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_RenderContents_System_Web_UI_HtmlTextWriter_\" data-linktype=\"self-bookmark\">RenderContents(HtmlTextWriter)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Renders the list items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_SaveViewState\" data-linktype=\"self-bookmark\">SaveViewState()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Saves the changes to the control view state since the time the page was posted back to the server.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_TrackViewState\" data-linktype=\"self-bookmark\">TrackViewState()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Tracks view-state changes to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control so they can be stored in the control&#39;s <span class=\"xref\">stem.Web.UI.Control.ViewState*</span> property.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Events\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_CancelCommand\" data-linktype=\"self-bookmark\">CancelCommand</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the <code>Cancel</code> button is clicked for an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_DeleteCommand\" data-linktype=\"self-bookmark\">DeleteCommand</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the <code>Delete</code> button is clicked for an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_EditCommand\" data-linktype=\"self-bookmark\">EditCommand</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the <code>Edit</code> button is clicked for an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_ItemCommand\" data-linktype=\"self-bookmark\">ItemCommand</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when any button is clicked in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_ItemCreated\" data-linktype=\"self-bookmark\">ItemCreated</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs on the server when an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control is created.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_ItemDataBound\" data-linktype=\"self-bookmark\">ItemDataBound</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when an item is data bound to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_UpdateCommand\" data-linktype=\"self-bookmark\">UpdateCommand</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the <code>Update</code> button is clicked for an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_System_Web_UI_WebControls_IRepeatInfoUser_GetItemStyle_System_Web_UI_WebControls_ListItemType_System_Int32_\" data-linktype=\"self-bookmark\">IRepeatInfoUser.GetItemStyle(ListItemType,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.Web.UI.WebControls.IRepeatInfoUser.GetItemStyle*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_System_Web_UI_WebControls_IRepeatInfoUser_HasFooter\" data-linktype=\"self-bookmark\">IRepeatInfoUser.HasFooter</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.Web.UI.WebControls.IRepeatInfoUser.HasFooter*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_System_Web_UI_WebControls_IRepeatInfoUser_HasHeader\" data-linktype=\"self-bookmark\">IRepeatInfoUser.HasHeader</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.Web.UI.WebControls.IRepeatInfoUser.HasHeader*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_System_Web_UI_WebControls_IRepeatInfoUser_HasSeparators\" data-linktype=\"self-bookmark\">IRepeatInfoUser.HasSeparators</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.Web.UI.WebControls.IRepeatInfoUser.HasSeparators*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_System_Web_UI_WebControls_IRepeatInfoUser_RenderItem_System_Web_UI_WebControls_ListItemType_System_Int32_System_Web_UI_WebControls_RepeatInfo_System_Web_UI_HtmlTextWriter_\" data-linktype=\"self-bookmark\">IRepeatInfoUser.RenderItem(ListItemType,Int32,RepeatInfo,HtmlTextWriter)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.Web.UI.WebControls.IRepeatInfoUser.RenderItem*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_DataList_System_Web_UI_WebControls_IRepeatInfoUser_RepeatedItemCount\" data-linktype=\"self-bookmark\">IRepeatInfoUser.RepeatedItemCount</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.Web.UI.WebControls.IRepeatInfoUser.RepeatedItemCount*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList__ctor\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DataList()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DataList ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this constructor to create and initialize a new instance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to create and initialize a new instance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic DataList.DataList Example#1\">void Page_Load(Object sender, EventArgs e) \n{\n   DataList MyList = new DataList();\n}\n   \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic DataList.DataList Example#1\">    Sub Page_Load(sender As Object, e As EventArgs)\n        Dim MyList As New DataList()\n    End Sub &#39;Page_Load\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_CancelCommandName\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CancelCommandName</div>        \r\n          </div>\r\n    \r\n            <p>Represents the <code>Cancel</code> command name. This field is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string CancelCommandName;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the CancelCommandName field to represent the <code>Cancel</code> command name.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_DeleteCommandName\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeleteCommandName</div>        \r\n          </div>\r\n    \r\n            <p>Represents the <code>Delete</code> command name. This field is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string DeleteCommandName;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the DeleteCommandName field to represent the <code>Delete</code> command name.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_EditCommandName\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EditCommandName</div>        \r\n          </div>\r\n    \r\n            <p>Represents the <code>Edit</code> command name. This field is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string EditCommandName;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the EditCommandName field to represent the <code>Edit</code> command name.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_SelectCommandName\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectCommandName</div>        \r\n          </div>\r\n    \r\n            <p>Represents the <code>Select</code> command name. This field is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string SelectCommandName;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the SelectCommandName field to represent the <code>Select</code> command name.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_UpdateCommandName\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UpdateCommandName</div>        \r\n          </div>\r\n    \r\n            <p>Represents the <code>Update</code> command name. This field is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string UpdateCommandName;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the UpdateCommandName field to represent the <code>Update</code> command name.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_AlternatingItemStyle\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_AlternatingItemStyle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AlternatingItemStyle</div>        \r\n          </div>\r\n    \r\n            <p>Gets the style properties for alternating items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Web.UI.WebControls.TableItemStyle AlternatingItemStyle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a> object that represents the style properties for alternating items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. The default value is an empty <a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the AlternatingItemStyle property to provide a custom style for the alternating items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. Common style attributes that can be adjusted include foreground color, background color, font, and content alignment within the cell. Providing a different style enhances the appearance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<p> Item style properties in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control are inherited from one item style property to another through a hierarchy. Item style properties set lower in the hierarchy are inherited by item style properties higher in the hierarchy. For example, if you specify a red font for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_ItemStyle_\" data-linktype=\"relative-path\">ItemStyle</a> property, all other item style properties in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control will also have a red font. This allows you to provide a common appearance for the control by setting a single item style property. You can override the inherited style settings for an item style property that is higher in the hierarchy by setting its style properties. For example, you can specify a blue font for the AlternatingItemStyle property, overriding the red font specified in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_ItemStyle_\" data-linktype=\"relative-path\">ItemStyle</a> property. The following table lists the hierarchy order from highest to lowest.  </p>\n<table>\n<thead>\n<tr>\n<th>Precedence</th>\n<th>Style property</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_EditItemStyle_\" data-linktype=\"relative-path\">EditItemStyle</a></td>\n</tr>\n<tr>\n<td>2</td>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_SelectedItemStyle_\" data-linktype=\"relative-path\">SelectedItemStyle</a></td>\n</tr>\n<tr>\n<td>3</td>\n<td>AlternatingItemStyle</td>\n</tr>\n<tr>\n<td>4</td>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_ItemStyle_\" data-linktype=\"relative-path\">ItemStyle</a></td>\n</tr>\n<tr>\n<td>5</td>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_ControlStyle_\" data-linktype=\"relative-path\">ControlStyle</a></td>\n</tr>\n</tbody>\n</table>\n<p> To specify a custom style for the alternating items, place the <code>&lt;AlternatingItemStyle&gt;</code> tags between the opening and closing tags of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. You can then list the style attributes within the opening <code>&lt;AlternatingItemStyle&gt;</code> tag.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the AlternatingItemStyle property to specify a different background color for alternating items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"DataListItemStyle#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataList control.\n         Dim dt As DataTable = New DataTable()\n         dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n         dt.Columns.Add(New DataColumn(&quot;ImageValue&quot;, GetType(String)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 To 8 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Description for item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n            dr(3) = &quot;Image&quot; &amp; i.ToString() &amp; &quot;.jpg&quot;\n \n            dt.Rows.Add(dr)\n\n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n\n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n\n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then \n     \n            ItemsList.DataSource = CreateDataSource()\n            ItemsList.DataBind()\n         \n         End If\n\n      End Sub\n\n      Sub Selection_Change(sender As Object, e As EventArgs)\n\n         &#39; Set the background color for the heading and footer sections\n         &#39; of the DataList control.\n         ItemsList.ItemStyle.BackColor = _\n             System.Drawing.Color.FromName(ItemList.SelectedItem.Value)\n         ItemsList.AlternatingItemStyle.BackColor = _\n             System.Drawing.Color.FromName(AltItemList.SelectedItem.Value)\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList ItemStyle and AlternatingItemStyle Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList ItemStyle and AlternatingItemStyle Example&lt;/h3&gt;\n\n      Select background colors for the items and alternating items.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;3&quot;\n           ShowFooter=&quot;True&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;ItemStyle BackColor=&quot;White&quot;&gt;\n         &lt;/ItemStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;White&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: &lt;%# DataBinder.Eval(Container.DataItem, &quot;CurrencyValue&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:Image id=&quot;ProductImage&quot;\n                 AlternatingText=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;&#39;\n                 ImageUrl=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;ImageValue&quot;) %&gt;&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n\n      &lt;hr /&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               Item BackColor:\n \n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               Alternating item BackColor:\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;ItemList&quot;\n                    AutoPostBack=&quot;True&quot;\n                    OnSelectedIndexChanged=&quot;Selection_Change&quot;\n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot; Value=&quot;White&quot;&gt; White &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Silver&quot;&gt; Silver &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkGray&quot;&gt; Dark Gray &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Khaki&quot;&gt; Khaki &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkKhaki&quot;&gt; Dark Khaki &lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n \n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;AltItemList&quot;\n                    AutoPostBack=&quot;True&quot;\n                    OnSelectedIndexChanged=&quot;Selection_Change&quot;\n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot; Value=&quot;White&quot;&gt; White &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Silver&quot;&gt; Silver &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkGray&quot;&gt; Dark Gray &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Khaki&quot;&gt; Khaki &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkKhaki&quot;&gt; Dark Khaki &lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataListItemStyle#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataList control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n         dt.Columns.Add(new DataColumn(&quot;ImageValue&quot;, typeof(String)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Description for item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n            dr[3] = &quot;Image&quot; + i.ToString() + &quot;.jpg&quot;;\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n      }\n  \n      void Page_Load(Object sender, EventArgs e) \n      {\n\n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsList.DataSource = CreateDataSource();\n            ItemsList.DataBind();\n         }\n\n      }\n\n      void Selection_Change(Object sender, EventArgs e)\n      {\n\n         // Set the background color for the heading and footer sections\n         // of the DataList control.\n         ItemsList.ItemStyle.BackColor = \n             System.Drawing.Color.FromName(ItemList.SelectedItem.Value);\n         ItemsList.AlternatingItemStyle.BackColor = \n             System.Drawing.Color.FromName(AltItemList.SelectedItem.Value);\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList ItemStyle and AlternatingItemStyle Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList ItemStyle and AlternatingItemStyle Example&lt;/h3&gt;\n\n      Select background colors for the items and alternating items.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;3&quot;\n           ShowFooter=&quot;True&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;ItemStyle BackColor=&quot;White&quot;&gt;\n         &lt;/ItemStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;White&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: &lt;%# DataBinder.Eval(Container.DataItem, &quot;CurrencyValue&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:Image id=&quot;ProductImage&quot;\n                 AlternatingText=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;&#39;\n                 ImageUrl=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;ImageValue&quot;) %&gt;&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n\n         &lt;AlternatingItemTemplate&gt;\n\n            &lt;asp:Image id=&quot;ProductImage&quot;\n                 AlternatingText=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;&#39;\n                 ImageUrl=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;ImageValue&quot;) %&gt;&#39;\n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: &lt;%# DataBinder.Eval(Container.DataItem, &quot;CurrencyValue&quot;, &quot;{0:c}&quot;) %&gt;       \n\n         &lt;/AlternatingItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n\n      &lt;hr /&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               Item BackColor:\n \n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               Alternating item BackColor:\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;ItemList&quot;\n                    AutoPostBack=&quot;True&quot;\n                    OnSelectedIndexChanged=&quot;Selection_Change&quot;\n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot; Value=&quot;White&quot;&gt; White &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Silver&quot;&gt; Silver &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkGray&quot;&gt; Dark Gray &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Khaki&quot;&gt; Khaki &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkKhaki&quot;&gt; Dark Khaki &lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n \n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;AltItemList&quot;\n                    AutoPostBack=&quot;True&quot;\n                    OnSelectedIndexChanged=&quot;Selection_Change&quot;\n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot; Value=&quot;White&quot;&gt; White &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Silver&quot;&gt; Silver &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkGray&quot;&gt; Dark Gray &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Khaki&quot;&gt; Khaki &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkKhaki&quot;&gt; Dark Khaki &lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_AlternatingItemTemplate\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_AlternatingItemTemplate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AlternatingItemTemplate</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the template for alternating items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Web.UI.ITemplate AlternatingItemTemplate { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.itemplate\" data-linktype=\"relative-path\">ITemplate</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.itemplate\" data-linktype=\"relative-path\">ITemplate</a> object that contains the template for alternating items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. The default value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the AlternatingItemTemplate property to control the contents of alternating items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. The appearance of alternating items is controlled by the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_AlternatingItemStyle_\" data-linktype=\"relative-path\">AlternatingItemStyle</a> property.  </p>\n<p> To specify a template for the alternating items, place the <code>&lt;AlternatingItemTemplate&gt;</code> tags between the opening and closing tags of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. You can then list the contents of the template between the opening and closing <code>&lt;AlternatingItemTemplate&gt;</code> tags.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see <a href=\"../Topic/Securing%20Standard%20Controls.md\" data-linktype=\"relative-path\">Securing Standard Controls</a>, <a href=\"../Topic/How%20to:%20Protect%20Against%20Script%20Exploits%20in%20a%20Web%20Application%20by%20Applying%20HTML%20Encoding%20to%20Strings.md\" data-linktype=\"relative-path\">How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings</a>, and <a href=\"../Topic/Validating%20User%20Input%20in%20ASP.NET%20Web%20Pages.md\" data-linktype=\"relative-path\">Validating User Input in ASP.NET Web Pages</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the AlternatingItemTemplate property to control the contents of alternating items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"DataListAlternatingItemTemplate#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataList control.\n         Dim dt As DataTable = New DataTable()\n         dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n         dt.Columns.Add(New DataColumn(&quot;ImageValue&quot;, GetType(String)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 To 8 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Description for item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n            dr(3) = &quot;Image&quot; &amp; i.ToString() &amp; &quot;.jpg&quot;\n \n            dt.Rows.Add(dr)\n\n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n\n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n\n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then \n     \n            ItemsList.DataSource = CreateDataSource()\n            ItemsList.DataBind()\n         \n         End If\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList AlternatingItemTemplate Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList AlternatingItemTemplate Example&lt;/h3&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;3&quot;\n           ShowFooter=&quot;True&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;ItemStyle BackColor=&quot;Silver&quot;&gt;\n         &lt;/ItemStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;DarkGray&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: &lt;%# DataBinder.Eval(Container.DataItem, &quot;CurrencyValue&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:Image id=&quot;ProductImage&quot;\n                 AlternateText=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;&#39; \n                 ImageUrl=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;ImageValue&quot;) %&gt;&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n\n         &lt;AlternatingItemTemplate&gt;\n\n            &lt;asp:Image id=&quot;ProductImage&quot; \n                 AlternateText=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;&#39; \n                 ImageUrl=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;ImageValue&quot;) %&gt;&#39;\n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: &lt;%# DataBinder.Eval(Container.DataItem, &quot;CurrencyValue&quot;, &quot;{0:c}&quot;) %&gt;       \n\n         &lt;/AlternatingItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataListAlternatingItemTemplate#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataList control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n         dt.Columns.Add(new DataColumn(&quot;ImageValue&quot;, typeof(String)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Description for item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n            dr[3] = &quot;Image&quot; + i.ToString() + &quot;.jpg&quot;;\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n      }\n  \n      void Page_Load(Object sender, EventArgs e) \n      {\n\n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsList.DataSource = CreateDataSource();\n            ItemsList.DataBind();\n         }\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList AlternatingItemTemplate Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList AlternatingItemTemplate Example&lt;/h3&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;3&quot;\n           ShowFooter=&quot;True&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;ItemStyle BackColor=&quot;Silver&quot;&gt;\n         &lt;/ItemStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;DarkGray&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: &lt;%# DataBinder.Eval(Container.DataItem, &quot;CurrencyValue&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:Image id=&quot;ProductImage&quot; \n                 AlternateText=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;&#39; \n                 ImageUrl=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;ImageValue&quot;) %&gt;&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n\n         &lt;AlternatingItemTemplate&gt;\n\n            &lt;asp:Image id=&quot;ProductImage&quot; \n                 AlternateText=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;&#39; \n                 ImageUrl=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;ImageValue&quot;) %&gt;&#39;\n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: &lt;%# DataBinder.Eval(Container.DataItem, &quot;CurrencyValue&quot;, &quot;{0:c}&quot;) %&gt;       \n\n         &lt;/AlternatingItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_EditItemIndex\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_EditItemIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EditItemIndex</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the index number of the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control to edit.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int EditItemIndex { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index number of the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control to edit.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The selected value is less than <code>0</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the EditItemIndex property to programmatically specify the item to edit. You can also use this property to determine the index of the item selected for editing.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The EditItemIndex property is zero based.  </p>\n</div>\n<p> To unselect an item, set the EditItemIndex property to <code>-1</code>.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see <a href=\"../Topic/Securing%20Standard%20Controls.md\" data-linktype=\"relative-path\">Securing Standard Controls</a>, <a href=\"../Topic/How%20to:%20Protect%20Against%20Script%20Exploits%20in%20a%20Web%20Application%20by%20Applying%20HTML%20Encoding%20to%20Strings.md\" data-linktype=\"relative-path\">How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings</a>, and <a href=\"../Topic/Validating%20User%20Input%20in%20ASP.NET%20Web%20Pages.md\" data-linktype=\"relative-path\">Validating User Input in ASP.NET Web Pages</a>.  </p>\n</div>\n<p> The EditItemIndex property is stored in control state.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the EditItemIndex property to specify the item selected by the user for editing.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"DataListEdit#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      // The Cart and CartView objects temporarily store the data source\n      // for the DataList control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. \n         // Because the data source in this example is an in-memory\n         // DataTable, retrieve the data from session state if it exists;\n         // otherwise, create the data source.\n         GetSource();\n\n         // The DataList control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the\n         // page is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindList();\n\n         }\n                   \n      }\n\n      void BindList() \n      {\n\n         // Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView;\n         ItemsList.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that \n         // is stored in session state. If the data source does not exist,\n         // create it; otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void Edit_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked\n         // in the DataList control to enable editing for that item. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex;\n         BindList();\n\n      }\n\n      void Cancel_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Delete_Command(Object sender, DataListCommandEventArgs e) \n      { \n\n         // Retrieve the name of the item to remove.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Update_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Retrieve the updated values from the selected item.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n         String qty = ((TextBox)e.Item.FindControl(&quot;QtyTextBox&quot;)).Text;\n         String price = ((TextBox)e.Item.FindControl(&quot;PriceTextBox&quot;)).Text;\n\n         // With a database, use an update command to update the data.\n         // Because the data source in this example is an in-memory \n         // DataTable, delete the old row and replace it with a new one.\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // ***************************************************************\n         // Insert data validation code here. Make sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add a new entry to replace the previous item.\n         DataRow dr = Cart.NewRow();\n         dr[0] = qty;\n         dr[1] = item;\n         // If necessary, remove the &#39;$&#39; character from the price before\n         // converting the price to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n         Cart.Rows.Add(dr);\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DataList to the data source to refresh\n         // the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           OnEditCommand=&quot;Edit_Command&quot;\n           OnUpdateCommand=&quot;Update_Command&quot;\n           OnDeleteCommand=&quot;Delete_Command&quot;\n           OnCancelCommand=&quot;Cancel_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataListEdit#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataList control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView\n \n      Sub Page_Load(sende As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data.\n         &#39; Because the data source in this example is an in-memory\n         &#39; DataTable, retrieve the data from session state if it exists;\n         &#39; otherwise, create the data source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the\n         &#39; page is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindList()\n\n         End If\n                   \n      End Sub\n\n      Sub BindList() \n\n         &#39; Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView\n         ItemsList.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that\n         &#39; is stored in session state. If the data source does not exist,\n         &#39; create it; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values\n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub Edit_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked\n         &#39; in the DataList control to enable editing for that item. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex\n         BindList()\n\n      End Sub\n\n      Sub Cancel_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Delete_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the name of the item to remove.\n         Dim item As String = (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n\n         &#39; Filter the CartView for the selected item and remove it from\n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure \n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Update_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the updated values from the selected item.\n         Dim item As String = _\n             (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n         Dim qty As String = _\n             (CType(e.Item.FindControl(&quot;QtyTextBox&quot;), TextBox)).Text\n         Dim price As String = _\n             (CType(e.Item.FindControl(&quot;PriceTextBox&quot;), TextBox)).Text\n\n         &#39; With a database, use an update command to update the data.\n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n\n         &#39; Filter the CartView for the selected item and remove it from \n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Make sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add a new entry to replace the previous item.\n         Dim dr As DataRow = Cart.NewRow()\n         dr(0) = qty\n         dr(1) = item\n         &#39; If necessary, remove the &#39;$&#39; character from the price before \n         &#39; converting the price to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n\n            dr(2) = Convert.ToDouble(price.Substring(1))\n\n         Else\n\n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DataList to the data source to refresh \n         &#39; the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           OnEditCommand=&quot;Edit_Command&quot;\n           OnUpdateCommand=&quot;Update_Command&quot;\n           OnDeleteCommand=&quot;Delete_Command&quot;\n           OnCancelCommand=&quot;Cancel_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_EditItemStyle\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_EditItemStyle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EditItemStyle</div>        \r\n          </div>\r\n    \r\n            <p>Gets the style properties for the item selected for editing in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Web.UI.WebControls.TableItemStyle EditItemStyle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a> object that contains the style properties for the item selected for editing in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. The default value is an empty <a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the EditItemStyle property to provide a custom style for the item selected for editing in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. Common style attributes that can be adjusted include foreground color, background color, font, and content alignment within the cell. Providing a different style enhances the appearance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<p> Item style properties in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control are inherited from one item style property to another through a hierarchy. Item style properties set lower in the hierarchy are inherited by item style properties higher in the hierarchy. For example, if you specify a red font for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_ItemStyle_\" data-linktype=\"relative-path\">ItemStyle</a> property, all other item style properties in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control will also have a red font. This allows you to provide a common appearance for the control by setting a single item style property. You can override the inherited style settings for an item style property that is higher in the hierarchy by setting its style properties. For example, you can specify a blue font for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_AlternatingItemStyle_\" data-linktype=\"relative-path\">AlternatingItemStyle</a> property, overriding the red font specified in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_ItemStyle_\" data-linktype=\"relative-path\">ItemStyle</a> property. The following table lists the hierarchy order from highest to lowest.  </p>\n<table>\n<thead>\n<tr>\n<th>Precedence</th>\n<th>Style Property</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>EditItemStyle</td>\n</tr>\n<tr>\n<td>2</td>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_SelectedItemStyle_\" data-linktype=\"relative-path\">SelectedItemStyle</a></td>\n</tr>\n<tr>\n<td>3</td>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_AlternatingItemStyle_\" data-linktype=\"relative-path\">AlternatingItemStyle</a></td>\n</tr>\n<tr>\n<td>4</td>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_ItemStyle_\" data-linktype=\"relative-path\">ItemStyle</a></td>\n</tr>\n<tr>\n<td>5</td>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_ControlStyle_\" data-linktype=\"relative-path\">ControlStyle</a></td>\n</tr>\n</tbody>\n</table>\n<p> To specify a custom style for the item selected for editing, place the <code>&lt;EditItemStyle&gt;</code> tags between the opening and closing tags of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. You can then list the style attributes within the opening <code>&lt;EditItemStyle&gt;</code> tag.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the EditItemStyle property to specify a different appearance for the item selected by the user for editing.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"DataListEdit#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      // The Cart and CartView objects temporarily store the data source\n      // for the DataList control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. \n         // Because the data source in this example is an in-memory\n         // DataTable, retrieve the data from session state if it exists;\n         // otherwise, create the data source.\n         GetSource();\n\n         // The DataList control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the\n         // page is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindList();\n\n         }\n                   \n      }\n\n      void BindList() \n      {\n\n         // Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView;\n         ItemsList.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that \n         // is stored in session state. If the data source does not exist,\n         // create it; otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void Edit_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked\n         // in the DataList control to enable editing for that item. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex;\n         BindList();\n\n      }\n\n      void Cancel_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Delete_Command(Object sender, DataListCommandEventArgs e) \n      { \n\n         // Retrieve the name of the item to remove.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Update_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Retrieve the updated values from the selected item.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n         String qty = ((TextBox)e.Item.FindControl(&quot;QtyTextBox&quot;)).Text;\n         String price = ((TextBox)e.Item.FindControl(&quot;PriceTextBox&quot;)).Text;\n\n         // With a database, use an update command to update the data.\n         // Because the data source in this example is an in-memory \n         // DataTable, delete the old row and replace it with a new one.\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // ***************************************************************\n         // Insert data validation code here. Make sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add a new entry to replace the previous item.\n         DataRow dr = Cart.NewRow();\n         dr[0] = qty;\n         dr[1] = item;\n         // If necessary, remove the &#39;$&#39; character from the price before\n         // converting the price to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n         Cart.Rows.Add(dr);\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DataList to the data source to refresh\n         // the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           OnEditCommand=&quot;Edit_Command&quot;\n           OnUpdateCommand=&quot;Update_Command&quot;\n           OnDeleteCommand=&quot;Delete_Command&quot;\n           OnCancelCommand=&quot;Cancel_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataListEdit#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataList control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView\n \n      Sub Page_Load(sende As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data.\n         &#39; Because the data source in this example is an in-memory\n         &#39; DataTable, retrieve the data from session state if it exists;\n         &#39; otherwise, create the data source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the\n         &#39; page is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindList()\n\n         End If\n                   \n      End Sub\n\n      Sub BindList() \n\n         &#39; Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView\n         ItemsList.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that\n         &#39; is stored in session state. If the data source does not exist,\n         &#39; create it; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values\n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub Edit_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked\n         &#39; in the DataList control to enable editing for that item. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex\n         BindList()\n\n      End Sub\n\n      Sub Cancel_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Delete_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the name of the item to remove.\n         Dim item As String = (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n\n         &#39; Filter the CartView for the selected item and remove it from\n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure \n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Update_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the updated values from the selected item.\n         Dim item As String = _\n             (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n         Dim qty As String = _\n             (CType(e.Item.FindControl(&quot;QtyTextBox&quot;), TextBox)).Text\n         Dim price As String = _\n             (CType(e.Item.FindControl(&quot;PriceTextBox&quot;), TextBox)).Text\n\n         &#39; With a database, use an update command to update the data.\n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n\n         &#39; Filter the CartView for the selected item and remove it from \n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Make sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add a new entry to replace the previous item.\n         Dim dr As DataRow = Cart.NewRow()\n         dr(0) = qty\n         dr(1) = item\n         &#39; If necessary, remove the &#39;$&#39; character from the price before \n         &#39; converting the price to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n\n            dr(2) = Convert.ToDouble(price.Substring(1))\n\n         Else\n\n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DataList to the data source to refresh \n         &#39; the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           OnEditCommand=&quot;Edit_Command&quot;\n           OnUpdateCommand=&quot;Update_Command&quot;\n           OnDeleteCommand=&quot;Delete_Command&quot;\n           OnCancelCommand=&quot;Cancel_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_EditItemTemplate\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_EditItemTemplate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EditItemTemplate</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the template for the item selected for editing in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Web.UI.ITemplate EditItemTemplate { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.itemplate\" data-linktype=\"relative-path\">ITemplate</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.itemplate\" data-linktype=\"relative-path\">ITemplate</a> object that contains the template for the item selected for editing in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. The default value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the EditItemTemplate property to control the contents of the item selected for editing in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. The appearance of the item selected for editing is controlled by the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_EditItemStyle_\" data-linktype=\"relative-path\">EditItemStyle</a> property.  </p>\n<p> To specify a template for the item selected for editing, place the <code>&lt;EditItemTemplate&gt;</code> tags between the opening and closing tags of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. You can then list the contents of the template between the opening and closing <code>&lt;EditItemTemplate&gt;</code> tags.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see <a href=\"../Topic/Securing%20Standard%20Controls.md\" data-linktype=\"relative-path\">Securing Standard Controls</a>, <a href=\"../Topic/How%20to:%20Protect%20Against%20Script%20Exploits%20in%20a%20Web%20Application%20by%20Applying%20HTML%20Encoding%20to%20Strings.md\" data-linktype=\"relative-path\">How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings</a>, and <a href=\"../Topic/Validating%20User%20Input%20in%20ASP.NET%20Web%20Pages.md\" data-linktype=\"relative-path\">Validating User Input in ASP.NET Web Pages</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the EditItemTemplate property to control the contents of the item selected by the user for editing.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"DataListEdit#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      // The Cart and CartView objects temporarily store the data source\n      // for the DataList control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. \n         // Because the data source in this example is an in-memory\n         // DataTable, retrieve the data from session state if it exists;\n         // otherwise, create the data source.\n         GetSource();\n\n         // The DataList control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the\n         // page is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindList();\n\n         }\n                   \n      }\n\n      void BindList() \n      {\n\n         // Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView;\n         ItemsList.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that \n         // is stored in session state. If the data source does not exist,\n         // create it; otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void Edit_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked\n         // in the DataList control to enable editing for that item. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex;\n         BindList();\n\n      }\n\n      void Cancel_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Delete_Command(Object sender, DataListCommandEventArgs e) \n      { \n\n         // Retrieve the name of the item to remove.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Update_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Retrieve the updated values from the selected item.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n         String qty = ((TextBox)e.Item.FindControl(&quot;QtyTextBox&quot;)).Text;\n         String price = ((TextBox)e.Item.FindControl(&quot;PriceTextBox&quot;)).Text;\n\n         // With a database, use an update command to update the data.\n         // Because the data source in this example is an in-memory \n         // DataTable, delete the old row and replace it with a new one.\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // ***************************************************************\n         // Insert data validation code here. Make sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add a new entry to replace the previous item.\n         DataRow dr = Cart.NewRow();\n         dr[0] = qty;\n         dr[1] = item;\n         // If necessary, remove the &#39;$&#39; character from the price before\n         // converting the price to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n         Cart.Rows.Add(dr);\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DataList to the data source to refresh\n         // the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           OnEditCommand=&quot;Edit_Command&quot;\n           OnUpdateCommand=&quot;Update_Command&quot;\n           OnDeleteCommand=&quot;Delete_Command&quot;\n           OnCancelCommand=&quot;Cancel_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataListEdit#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataList control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView\n \n      Sub Page_Load(sende As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data.\n         &#39; Because the data source in this example is an in-memory\n         &#39; DataTable, retrieve the data from session state if it exists;\n         &#39; otherwise, create the data source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the\n         &#39; page is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindList()\n\n         End If\n                   \n      End Sub\n\n      Sub BindList() \n\n         &#39; Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView\n         ItemsList.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that\n         &#39; is stored in session state. If the data source does not exist,\n         &#39; create it; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values\n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub Edit_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked\n         &#39; in the DataList control to enable editing for that item. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex\n         BindList()\n\n      End Sub\n\n      Sub Cancel_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Delete_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the name of the item to remove.\n         Dim item As String = (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n\n         &#39; Filter the CartView for the selected item and remove it from\n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure \n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Update_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the updated values from the selected item.\n         Dim item As String = _\n             (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n         Dim qty As String = _\n             (CType(e.Item.FindControl(&quot;QtyTextBox&quot;), TextBox)).Text\n         Dim price As String = _\n             (CType(e.Item.FindControl(&quot;PriceTextBox&quot;), TextBox)).Text\n\n         &#39; With a database, use an update command to update the data.\n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n\n         &#39; Filter the CartView for the selected item and remove it from \n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Make sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add a new entry to replace the previous item.\n         Dim dr As DataRow = Cart.NewRow()\n         dr(0) = qty\n         dr(1) = item\n         &#39; If necessary, remove the &#39;$&#39; character from the price before \n         &#39; converting the price to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n\n            dr(2) = Convert.ToDouble(price.Substring(1))\n\n         Else\n\n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DataList to the data source to refresh \n         &#39; the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           OnEditCommand=&quot;Edit_Command&quot;\n           OnUpdateCommand=&quot;Update_Command&quot;\n           OnDeleteCommand=&quot;Delete_Command&quot;\n           OnCancelCommand=&quot;Cancel_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_ExtractTemplateRows\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_ExtractTemplateRows_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExtractTemplateRows</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether the rows of a <a class=\"xref\" href=\"system.web.ui.webcontrols.table\" data-linktype=\"relative-path\">Table</a> control, defined in each template of a <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control, are extracted and displayed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool ExtractTemplateRows { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the rows of a <a class=\"xref\" href=\"system.web.ui.webcontrols.table\" data-linktype=\"relative-path\">Table</a> control, defined in each template of a <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control, are extracted and displayed; otherwise, <code>false</code>. The default value is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The contents of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control are specified by using templates. Normally, you list controls that you want to display in the templates. You can also place a <a class=\"xref\" href=\"system.web.ui.webcontrols.table\" data-linktype=\"relative-path\">Table</a> control in a template and display the rows of the table.  </p>\n<p> Use the ExtractTemplateRows property to specify whether the rows of a <a class=\"xref\" href=\"system.web.ui.webcontrols.table\" data-linktype=\"relative-path\">Table</a> control defined in each template of a <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control are extracted and displayed. All rows extracted from the templates of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control are displayed in a single table. This allows you to create a single table from other smaller tables and still maintain the features of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When this property is set to <code>true</code>, you must provide a well-formed <a class=\"xref\" href=\"system.web.ui.webcontrols.table\" data-linktype=\"relative-path\">Table</a> control for each template you want to include in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. Only the rows of the tables will be displayed. All other content in the template will be ignored. You must use a <a class=\"xref\" href=\"system.web.ui.webcontrols.table\" data-linktype=\"relative-path\">Table</a> control for this feature to work properly. The <a class=\"xref\" href=\"system.web.ui.htmlcontrols.htmltable\" data-linktype=\"relative-path\">System.Web.UI.HtmlControls.HtmlTable</a> control is not compatible with this property.  </p>\n</div>\n<p> When you create a cell for a <a class=\"xref\" href=\"system.web.ui.webcontrols.table\" data-linktype=\"relative-path\">Table</a> control in a template, you can use the <a class=\"xref\" href=\"system.web.ui.webcontrols.tablecell#System_Web_UI_WebControls_TableCell_ColumnSpan_\" data-linktype=\"relative-path\">ColumnSpan</a> property of the <a class=\"xref\" href=\"system.web.ui.webcontrols.tablecell\" data-linktype=\"relative-path\">TableCell</a> object to control the number of columns the cell spans. You can also use the <a class=\"xref\" href=\"system.web.ui.webcontrols.tablecell#System_Web_UI_WebControls_TableCell_RowSpan_\" data-linktype=\"relative-path\">RowSpan</a> property to control the number of rows the cell spans.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_RepeatColumns_\" data-linktype=\"relative-path\">RepeatColumns</a>, <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_RepeatDirection_\" data-linktype=\"relative-path\">RepeatDirection</a>, and <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_RepeatLayout_\" data-linktype=\"relative-path\">RepeatLayout</a> properties do not affect the appearance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control when this property is set to <code>true</code>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrate how to use the ExtractTemplateRows property to extract and display the rows of <a class=\"xref\" href=\"system.web.ui.webcontrols.table\" data-linktype=\"relative-path\">Table</a> controls defined in the templates of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"Classic DataList.ExtractTemplateRows Example#1\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; \n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n    &lt;script runat=&quot;server&quot;&gt;\n        Private Function CreateDataSource() As ICollection\n            Dim dt As New DataTable()\n            Dim dr As DataRow\n\n            dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, _\n                GetType(String)))\n            dt.Columns.Add(New DataColumn(&quot;PriceValue&quot;, _\n                GetType(String)))\n            dt.Columns.Add(New DataColumn(&quot;DescriptionValue&quot;, _\n                GetType(String)))\n\n            Dim i As Integer\n            For i = 1 To 10\n                dr = dt.NewRow()\n                dr(0) = &quot;Item &quot; + i.ToString()\n                dr(1) = String.Format(&quot;{0:C}&quot;, (1.23 * (i + 1)))\n                dr(2) = &quot;Description for Item &quot; + i.ToString()\n                dt.Rows.Add(dr)\n            Next\n\n            Dim dv As New DataView(dt)\n            Return dv\n        End Function\n\n        Private Sub Page_Load(ByVal sender As Object, _\n            ByVal e As EventArgs)\n\n            If Not IsPostBack Then\n                DataList1.DataSource = CreateDataSource()\n                DataList1.DataBind()\n            End If\n        End Sub\n    &lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;\n        ExtractTemplateRows Example\n    &lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n    &lt;h3&gt;DataList ExtractTemplateRows Example&lt;/h3&gt;\n\n    &lt;asp:DataList id=&quot;DataList1&quot; runat=&quot;server&quot;\n        BorderColor=&quot;black&quot;\n        CellPadding=&quot;3&quot;\n        Font-Names=&quot;Arial, Helvetica&quot;\n        Font-Size=&quot;9pt&quot;\n        ExtractTemplateRows=&quot;true&quot;\n        GridLines=&quot;Both&quot;&gt;\n\n        &lt;HeaderStyle BackColor=&quot;#aaaadd&quot; /&gt;\n        &lt;AlternatingItemStyle BackColor=&quot;#efefef&quot; /&gt;\n\n        &lt;HeaderTemplate&gt;\n        &lt;asp:Table id=&quot;Table1&quot; runat=&quot;server&quot;&gt;\n            &lt;asp:TableRow&gt;\n                &lt;asp:TableHeaderCell\n                    ColumnSpan=&quot;2&quot;&gt;\n                    Items List\n                &lt;/asp:TableHeaderCell&gt;\n            &lt;/asp:TableRow&gt;\n        &lt;/asp:Table&gt;\n        &lt;/HeaderTemplate&gt;\n\n        &lt;ItemTemplate&gt;\n            &lt;asp:Table id=&quot;Table2&quot; runat=&quot;server&quot;&gt;\n                &lt;asp:TableRow&gt;\n                    &lt;asp:TableCell \n                        Text=&#39;&lt;%# Eval(&quot;StringValue&quot;) %&gt;&#39;&gt;\n                    &lt;/asp:TableCell&gt;\n                    &lt;asp:TableCell \n                        HorizontalAlign=&quot;Right&quot;\n                        Text=&#39;&lt;%# Eval(&quot;PriceValue&quot;) %&gt;&#39;&gt;\n                    &lt;/asp:TableCell&gt;\n                &lt;/asp:TableRow&gt;\n                &lt;asp:TableRow&gt;\n                    &lt;asp:TableCell\n                        ColumnSpan=&quot;2&quot; \n                        Text=&#39;&lt;%# Eval(&quot;DescriptionValue&quot;) %&gt;&#39;&gt;\n                    &lt;/asp:TableCell&gt;\n                &lt;/asp:TableRow&gt;\n            &lt;/asp:Table&gt;\n        &lt;/ItemTemplate&gt; \n    &lt;/asp:DataList&gt;\n \n   &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic DataList.ExtractTemplateRows Example#1\">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; \n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n    &lt;script runat=&quot;server&quot;&gt;\n\n        private ICollection CreateDataSource()\n        {\n            DataTable dt = new DataTable();\n            DataRow dr;\n\n            dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, \n                typeof(string)));\n            dt.Columns.Add(new DataColumn(&quot;PriceValue&quot;, \n                typeof(string)));\n            dt.Columns.Add(new DataColumn(&quot;DescriptionValue&quot;, \n                typeof(string)));\n\n            for (int i = 1; i &lt; 11; i++)\n            {\n                dr = dt.NewRow();\n                dr[0] = &quot;Item &quot; + i.ToString();\n                dr[1] = String.Format(&quot;{0:C}&quot;, (1.23 * (i + 1)));\n                dr[2] = &quot;Description for Item &quot; + i.ToString();\n                dt.Rows.Add(dr);\n            }\n\n            DataView dv = new DataView(dt);\n            return dv;\n        }\n\n        private void Page_Load(Object sender, EventArgs e)\n        {\n            if (!IsPostBack)\n            {\n                DataList1.DataSource = CreateDataSource();\n                DataList1.DataBind();\n            }\n        }\n    &lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;\n        ExtractTemplateRows Example\n    &lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n    &lt;h3&gt;DataList ExtractTemplateRows Example&lt;/h3&gt;\n\n    &lt;asp:DataList id=&quot;DataList1&quot; runat=&quot;server&quot;\n        BorderColor=&quot;black&quot;\n        CellPadding=&quot;3&quot;\n        Font-Names=&quot;Arial, Helvetica&quot;\n        Font-Size=&quot;9pt&quot;\n        ExtractTemplateRows=&quot;true&quot;\n        GridLines=&quot;Both&quot;&gt;\n\n        &lt;HeaderStyle BackColor=&quot;LightBlue&quot; /&gt;\n        &lt;AlternatingItemStyle BackColor=&quot;#efefef&quot; /&gt;\n\n        &lt;HeaderTemplate&gt;\n        &lt;asp:Table id=&quot;Table1&quot; runat=&quot;server&quot;&gt;\n            &lt;asp:TableRow&gt;\n                &lt;asp:TableHeaderCell\n                    ColumnSpan=&quot;2&quot;&gt;\n                    Items List\n                &lt;/asp:TableHeaderCell&gt;\n            &lt;/asp:TableRow&gt;\n        &lt;/asp:Table&gt;\n        &lt;/HeaderTemplate&gt;\n\n        &lt;ItemTemplate&gt;\n            &lt;asp:Table id=&quot;Table2&quot; runat=&quot;server&quot;&gt;\n                &lt;asp:TableRow&gt;\n                    &lt;asp:TableCell \n                        Text=&#39;&lt;%# Eval(&quot;StringValue&quot;) %&gt;&#39;&gt;\n                    &lt;/asp:TableCell&gt;\n                    &lt;asp:TableCell \n                        HorizontalAlign=&quot;Right&quot;\n                        Text=&#39;&lt;%# Eval(&quot;PriceValue&quot;) %&gt;&#39;&gt;\n                    &lt;/asp:TableCell&gt;\n                &lt;/asp:TableRow&gt;\n                &lt;asp:TableRow&gt;\n                    &lt;asp:TableCell\n                        ColumnSpan=&quot;2&quot; \n                        Text=&#39;&lt;%# Eval(&quot;DescriptionValue&quot;) %&gt;&#39;&gt;\n                    &lt;/asp:TableCell&gt;\n                &lt;/asp:TableRow&gt;\n            &lt;/asp:Table&gt;\n        &lt;/ItemTemplate&gt; \n    &lt;/asp:DataList&gt;\n \n   &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_FooterStyle\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_FooterStyle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FooterStyle</div>        \r\n          </div>\r\n    \r\n            <p>Gets the style properties for the footer section of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Web.UI.WebControls.TableItemStyle FooterStyle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a> object that contains the style properties for the footer section of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. The default value is an empty <a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this property to provide a custom style for the footer section of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. Common style attributes that can be adjusted include foreground color, background color, font, and content alignment within the cell. Providing a different style enhances the appearance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<p> The FooterStyle property of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control inherits the style settings of the <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_ControlStyle_\" data-linktype=\"relative-path\">ControlStyle</a> property. For example, if you specify a red font for the <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_ControlStyle_\" data-linktype=\"relative-path\">ControlStyle</a> property, the FooterStyle property will also have a red font. This allows you to provide a common appearance for the control by setting a single style property. You can override the inherited style settings by setting the FooterStyle property. For example, you can specify a blue font for the FooterStyle property, overriding the red font specified in the <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_ControlStyle_\" data-linktype=\"relative-path\">ControlStyle</a> property.  </p>\n<p> To specify a custom style for the footer section, place the <code>&lt;FooterStyle&gt;</code> tags between the opening and closing tags of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. You can then list the style attributes within the opening <code>&lt;FooterStyle&gt;</code> tag.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_ShowFooter_\" data-linktype=\"relative-path\">ShowFooter</a> property must be set to <code>true</code> for this property to be visible.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the FooterStyle property to specify a custom background color for the footer section of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"DataListHeaderStyle#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataList control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n         dt.Columns.Add(new DataColumn(&quot;ImageValue&quot;, typeof(String)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Description for item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n            dr[3] = &quot;Image&quot; + i.ToString() + &quot;.jpg&quot;;\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n      }\n  \n      void Page_Load(Object sender, EventArgs e) \n      {\n\n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsList.DataSource = CreateDataSource();\n            ItemsList.DataBind();\n         }\n\n      }\n\n      void Selection_Change(Object sender, EventArgs e)\n      {\n\n         // Set the background color for the heading and footer sections\n         // of the DataList control.\n         ItemsList.HeaderStyle.BackColor = \n             System.Drawing.Color.FromName(List.SelectedItem.Value);\n         ItemsList.FooterStyle.BackColor = \n             System.Drawing.Color.FromName(List.SelectedItem.Value);\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList HeaderStyle and FooterStyle Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList HeaderStyle and FooterStyle Example&lt;/h3&gt;\n\n      Select a background color for the header and footer sections.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;3&quot;\n           ShowFooter=&quot;True&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;White&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;White&quot;&gt;\n         &lt;/FooterStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n\n         &lt;FooterTemplate&gt;\n\n            &lt;asp:Image id=&quot;FooterImage&quot;\n                 GenerateEmptyAlternateText=&#39;true&#39; \n                 ImageUrl=&#39;FooterImage.jpg&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/FooterTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: &lt;%# DataBinder.Eval(Container.DataItem, &quot;CurrencyValue&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:Image id=&quot;ProductImage&quot;\n                 AlternatingText=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;&#39; \n                 ImageUrl=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;ImageValue&quot;) %&gt;&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n\n      &lt;hr /&gt;\n\n      Header and footer BackColor: &lt;br /&gt; \n\n      &lt;asp:DropDownList id=&quot;List&quot;\n           AutoPostBack=&quot;True&quot;\n           OnSelectedIndexChanged=&quot;Selection_Change&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;asp:ListItem Selected=&quot;True&quot; Value=&quot;White&quot;&gt; White &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;Silver&quot;&gt; Silver &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;DarkGray&quot;&gt; Dark Gray &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;Khaki&quot;&gt; Khaki &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;DarkKhaki&quot;&gt; Dark Khaki &lt;/asp:ListItem&gt;\n\n      &lt;/asp:DropDownList&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataListHeaderStyle#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataList control.\n         Dim dt As DataTable = New DataTable()\n         dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n         dt.Columns.Add(New DataColumn(&quot;ImageValue&quot;, GetType(String)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 To 8 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Description for item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n            dr(3) = &quot;Image&quot; &amp; i.ToString() &amp; &quot;.jpg&quot;\n \n            dt.Rows.Add(dr)\n\n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n\n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n\n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then \n     \n            ItemsList.DataSource = CreateDataSource()\n            ItemsList.DataBind()\n         \n         End If\n\n      End Sub\n\n      Sub Selection_Change(sender As Object, e As EventArgs)\n\n         &#39; Set the background color for the heading and footer sections\n         &#39; of the DataList control.\n         ItemsList.HeaderStyle.BackColor = _\n             System.Drawing.Color.FromName(List.SelectedItem.Value)\n         ItemsList.FooterStyle.BackColor = _\n             System.Drawing.Color.FromName(List.SelectedItem.Value)\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList HeaderStyle and FooterStyle Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList HeaderStyle and FooterStyle Example&lt;/h3&gt;\n\n      Select a background color for the header and footer sections.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;3&quot;\n           ShowFooter=&quot;True&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;White&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;White&quot;&gt;\n         &lt;/FooterStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n\n         &lt;FooterTemplate&gt;\n\n            &lt;asp:Image id=&quot;FooterImage&quot;\n                 ImageUrl=&#39;FooterImage.jpg&#39;\n                 GenerateEmptyAlternateText=&#39;true&#39; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/FooterTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: &lt;%# DataBinder.Eval(Container.DataItem, &quot;CurrencyValue&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:Image id=&quot;ProductImage&quot;\n                 AlternatingText=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;&#39; \n                 ImageUrl=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;ImageValue&quot;) %&gt;&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n\n      &lt;hr /&gt;\n\n      Header and footer BackColor: &lt;br /&gt; \n\n      &lt;asp:DropDownList id=&quot;List&quot;\n           AutoPostBack=&quot;True&quot;\n           OnSelectedIndexChanged=&quot;Selection_Change&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;asp:ListItem Selected=&quot;True&quot; Value=&quot;White&quot;&gt; White &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;Silver&quot;&gt; Silver &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;DarkGray&quot;&gt; Dark Gray &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;Khaki&quot;&gt; Khaki &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;DarkKhaki&quot;&gt; Dark Khaki &lt;/asp:ListItem&gt;\n\n      &lt;/asp:DropDownList&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_FooterTemplate\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_FooterTemplate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FooterTemplate</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the template for the footer section of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Web.UI.ITemplate FooterTemplate { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.itemplate\" data-linktype=\"relative-path\">ITemplate</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.itemplate\" data-linktype=\"relative-path\">ITemplate</a> object that contains the template for the footer section of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. The default value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the FooterTemplate property to control the contents of the footer section. The appearance of the footer section is controlled by the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_FooterStyle_\" data-linktype=\"relative-path\">FooterStyle</a> property.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_ShowFooter_\" data-linktype=\"relative-path\">ShowFooter</a> property must be set to <code>true</code> for this property to be visible.  </p>\n</div>\n<p> The <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_HeaderStyle_\" data-linktype=\"relative-path\">HeaderStyle</a> property of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control inherits the style settings of the <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_ControlStyle_\" data-linktype=\"relative-path\">ControlStyle</a> property. For example, if you specify a red font for the <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_ControlStyle_\" data-linktype=\"relative-path\">ControlStyle</a> property, the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_HeaderStyle_\" data-linktype=\"relative-path\">HeaderStyle</a> property will also have a red font. This allows you to provide a common appearance for the control by setting a single style property. You can override the inherited style settings by setting the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_HeaderStyle_\" data-linktype=\"relative-path\">HeaderStyle</a> property. For example, you can specify a blue font for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_HeaderStyle_\" data-linktype=\"relative-path\">HeaderStyle</a> property, overriding the red font specified in the <a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_ControlStyle_\" data-linktype=\"relative-path\">ControlStyle</a> property.  </p>\n<p> To specify a template for the footer section, place the <code>&lt;FooterTemplate&gt;</code> tags between the opening and closing tags of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. You can then list the contents of the template between the opening and closing <code>&lt;FooterTemplate&gt;</code> tags.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see <a href=\"../Topic/Securing%20Standard%20Controls.md\" data-linktype=\"relative-path\">Securing Standard Controls</a>, <a href=\"../Topic/How%20to:%20Protect%20Against%20Script%20Exploits%20in%20a%20Web%20Application%20by%20Applying%20HTML%20Encoding%20to%20Strings.md\" data-linktype=\"relative-path\">How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings</a>, and <a href=\"../Topic/Validating%20User%20Input%20in%20ASP.NET%20Web%20Pages.md\" data-linktype=\"relative-path\">Validating User Input in ASP.NET Web Pages</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the FooterTemplate property to control the contents of the footer section of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"DataListHeaderStyle#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataList control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n         dt.Columns.Add(new DataColumn(&quot;ImageValue&quot;, typeof(String)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Description for item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n            dr[3] = &quot;Image&quot; + i.ToString() + &quot;.jpg&quot;;\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n      }\n  \n      void Page_Load(Object sender, EventArgs e) \n      {\n\n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsList.DataSource = CreateDataSource();\n            ItemsList.DataBind();\n         }\n\n      }\n\n      void Selection_Change(Object sender, EventArgs e)\n      {\n\n         // Set the background color for the heading and footer sections\n         // of the DataList control.\n         ItemsList.HeaderStyle.BackColor = \n             System.Drawing.Color.FromName(List.SelectedItem.Value);\n         ItemsList.FooterStyle.BackColor = \n             System.Drawing.Color.FromName(List.SelectedItem.Value);\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList HeaderStyle and FooterStyle Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList HeaderStyle and FooterStyle Example&lt;/h3&gt;\n\n      Select a background color for the header and footer sections.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;3&quot;\n           ShowFooter=&quot;True&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;White&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;White&quot;&gt;\n         &lt;/FooterStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n\n         &lt;FooterTemplate&gt;\n\n            &lt;asp:Image id=&quot;FooterImage&quot;\n                 GenerateEmptyAlternateText=&#39;true&#39; \n                 ImageUrl=&#39;FooterImage.jpg&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/FooterTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: &lt;%# DataBinder.Eval(Container.DataItem, &quot;CurrencyValue&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:Image id=&quot;ProductImage&quot;\n                 AlternatingText=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;&#39; \n                 ImageUrl=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;ImageValue&quot;) %&gt;&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n\n      &lt;hr /&gt;\n\n      Header and footer BackColor: &lt;br /&gt; \n\n      &lt;asp:DropDownList id=&quot;List&quot;\n           AutoPostBack=&quot;True&quot;\n           OnSelectedIndexChanged=&quot;Selection_Change&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;asp:ListItem Selected=&quot;True&quot; Value=&quot;White&quot;&gt; White &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;Silver&quot;&gt; Silver &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;DarkGray&quot;&gt; Dark Gray &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;Khaki&quot;&gt; Khaki &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;DarkKhaki&quot;&gt; Dark Khaki &lt;/asp:ListItem&gt;\n\n      &lt;/asp:DropDownList&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataListHeaderStyle#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataList control.\n         Dim dt As DataTable = New DataTable()\n         dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n         dt.Columns.Add(New DataColumn(&quot;ImageValue&quot;, GetType(String)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 To 8 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Description for item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n            dr(3) = &quot;Image&quot; &amp; i.ToString() &amp; &quot;.jpg&quot;\n \n            dt.Rows.Add(dr)\n\n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n\n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n\n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then \n     \n            ItemsList.DataSource = CreateDataSource()\n            ItemsList.DataBind()\n         \n         End If\n\n      End Sub\n\n      Sub Selection_Change(sender As Object, e As EventArgs)\n\n         &#39; Set the background color for the heading and footer sections\n         &#39; of the DataList control.\n         ItemsList.HeaderStyle.BackColor = _\n             System.Drawing.Color.FromName(List.SelectedItem.Value)\n         ItemsList.FooterStyle.BackColor = _\n             System.Drawing.Color.FromName(List.SelectedItem.Value)\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList HeaderStyle and FooterStyle Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList HeaderStyle and FooterStyle Example&lt;/h3&gt;\n\n      Select a background color for the header and footer sections.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;3&quot;\n           ShowFooter=&quot;True&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;White&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;White&quot;&gt;\n         &lt;/FooterStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n\n         &lt;FooterTemplate&gt;\n\n            &lt;asp:Image id=&quot;FooterImage&quot;\n                 ImageUrl=&#39;FooterImage.jpg&#39;\n                 GenerateEmptyAlternateText=&#39;true&#39; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/FooterTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: &lt;%# DataBinder.Eval(Container.DataItem, &quot;CurrencyValue&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:Image id=&quot;ProductImage&quot;\n                 AlternatingText=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;&#39; \n                 ImageUrl=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;ImageValue&quot;) %&gt;&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n\n      &lt;hr /&gt;\n\n      Header and footer BackColor: &lt;br /&gt; \n\n      &lt;asp:DropDownList id=&quot;List&quot;\n           AutoPostBack=&quot;True&quot;\n           OnSelectedIndexChanged=&quot;Selection_Change&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;asp:ListItem Selected=&quot;True&quot; Value=&quot;White&quot;&gt; White &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;Silver&quot;&gt; Silver &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;DarkGray&quot;&gt; Dark Gray &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;Khaki&quot;&gt; Khaki &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;DarkKhaki&quot;&gt; Dark Khaki &lt;/asp:ListItem&gt;\n\n      &lt;/asp:DropDownList&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_GridLines\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_GridLines_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GridLines</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the grid line style for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control when the <span class=\"xref\">stem.Web.UI.WebControls.DataList.RepeatLayout*</span> property is set to <code>RepeatLayout.Table</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Web.UI.WebControls.GridLines GridLines { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.gridlines\" data-linktype=\"relative-path\">GridLines</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.web.ui.webcontrols.gridlines\" data-linktype=\"relative-path\">GridLines</a> enumeration values. The default value is <code>None</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the GridLines property to specify the grid line style for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. The following table lists the possible styles.  </p>\n<table>\n<thead>\n<tr>\n<th>Style</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.gridlines\" data-linktype=\"relative-path\">GridLines</a></td>\n<td>No grid lines.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.gridlines\" data-linktype=\"relative-path\">GridLines</a></td>\n<td>Displays the horizontal grid lines.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.gridlines\" data-linktype=\"relative-path\">GridLines</a></td>\n<td>Displays the vertical grid line.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.gridlines\" data-linktype=\"relative-path\">GridLines</a></td>\n<td>Displays both the horizontal and vertical grid lines.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"NOTE\"><h5>Note</h5><p> This property only applies if the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_RepeatLayout_\" data-linktype=\"relative-path\">RepeatLayout</a> property is set to <code>RepeatLayout.Table</code>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the GridLines property to display the vertical and horizontal grid lines of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"DataListLayout#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataList control.\n         Dim dt As DataTable = New DataTable()\n         dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n         dt.Columns.Add(New DataColumn(&quot;ImageValue&quot;, GetType(String)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 To 8 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Description for item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n            dr(3) = &quot;Image&quot; &amp; i.ToString() &amp; &quot;.jpg&quot;\n \n            dt.Rows.Add(dr)\n\n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n\n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n\n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then \n     \n            ItemsList.DataSource = CreateDataSource()\n            ItemsList.DataBind()\n         \n         End If\n\n      End Sub\n \n      Sub Button_Click(sender As Object, e As EventArgs) \n \n         &#39; Set the repeat direction based on the selected value of the\n         &#39; DirectionList DropDownList control.\n         ItemsList.RepeatDirection = _\n             CType(DirectionList.SelectedIndex, RepeatDirection)\n\n         &#39; Set the repeat layout based on the selected value of the\n         &#39; LayoutList DropDownList control.\n         ItemsList.RepeatLayout = CType(LayoutList.SelectedIndex, RepeatLayout)\n\n         &#39; Set the number of columns to display based on the selected\n         &#39; value of the ColumnsList DropDownList control.\n         ItemsList.RepeatColumns = ColumnsList.SelectedIndex\n\n         &#39; Show or hide the gridlines based on the value of the\n         &#39; ShowBorderCheckBox. Note that gridlines are displayed\n         &#39; only if the RepeatLayout property is set to Table.\n         If ShowBorderCheckBox.Checked _\n             And ItemsList.RepeatLayout = RepeatLayout.Table Then \n\n            ItemsList.BorderWidth = Unit.Pixel(1)\n            ItemsList.GridLines = GridLines.Both\n         \n         Else  \n    \n            ItemsList.BorderWidth = Unit.Pixel(0)\n            ItemsList.GridLines = GridLines.None\n         \n         End If\n    \n      End Sub    \n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Example&lt;/h3&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;0&quot;\n           BorderWidth=&quot;0&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: &lt;%# DataBinder.Eval(Container.DataItem, &quot;CurrencyValue&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:Image id=&quot;ProductImage&quot;\n                 AlternatingText=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;&#39;\n                 ImageUrl=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;ImageValue&quot;) %&gt;&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n \n      &lt;hr /&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;th&gt;\n\n               Repeat direction:\n\n            &lt;/th&gt;\n\n            &lt;th&gt;\n\n               Repeat layout:\n\n            &lt;/th&gt;\n\n            &lt;th&gt;\n\n               Repeat columns:\n\n            &lt;/th&gt;\n\n            &lt;th&gt;\n\n               &lt;asp:CheckBox id=&quot;ShowBorderCheckBox&quot;\n                    Text=&quot;Show border&quot;\n                    Checked=&quot;False&quot; \n                    runat=&quot;server&quot; /&gt;\n\n            &lt;/th&gt;\n\n         &lt;/tr&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;DirectionList&quot; \n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem&gt;Horizontal&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt;Vertical&lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;LayoutList&quot; \n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt;Table&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;Flow&lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;ColumnsList&quot; \n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt;0&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;1&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;2&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;3&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;4&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;5&lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &amp;nbsp;\n\n            &lt;/td&gt;\n\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;     \n         \n      &lt;asp:LinkButton id=&quot;RefreshButton&quot; \n           Text=&quot;Refresh DataList&quot; \n           OnClick=&quot;Button_Click&quot; \n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataListLayout#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataList control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n         dt.Columns.Add(new DataColumn(&quot;ImageValue&quot;, typeof(String)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Description for item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n            dr[3] = &quot;Image&quot; + i.ToString() + &quot;.jpg&quot;;\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n      }\n \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n\n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsList.DataSource = CreateDataSource();\n            ItemsList.DataBind();\n         }\n\n      }\n \n      void Button_Click(Object sender, EventArgs e) \n      {\n \n         // Set the repeat direction based on the selected value of the\n         // DirectionList DropDownList control.\n         ItemsList.RepeatDirection = \n             (RepeatDirection)DirectionList.SelectedIndex;\n\n         // Set the repeat layout based on the selected value of the\n         // LayoutList DropDownList control.\n         ItemsList.RepeatLayout = (RepeatLayout)LayoutList.SelectedIndex;\n\n         // Set the number of columns to display based on the selected\n         // value of the ColumnsList DropDownList control.\n         ItemsList.RepeatColumns = ColumnsList.SelectedIndex;\n\n         // Show or hide the gridlines based on the value of the\n         // ShowBorderCheckBox property. Note that gridlines are displayed\n         // only if the RepeatLayout property is set to Table.\n         if ((ShowBorderCheckBox.Checked) \n             &amp;&amp; (ItemsList.RepeatLayout == RepeatLayout.Table)) \n         {\n            ItemsList.BorderWidth = Unit.Pixel(1);\n            ItemsList.GridLines = GridLines.Both;\n         }    \n         else  \n         {\n            ItemsList.BorderWidth = Unit.Pixel(0);\n            ItemsList.GridLines = GridLines.None;\n         }\n    \n      }    \n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Example&lt;/h3&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;0&quot;\n           BorderWidth=&quot;0&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: &lt;%# DataBinder.Eval(Container.DataItem, &quot;CurrencyValue&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:Image id=&quot;ProductImage&quot;\n                 AlternatingText=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;&#39;\n                 ImageUrl=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;ImageValue&quot;) %&gt;&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n \n      &lt;hr /&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;th&gt;\n\n               Repeat direction:\n\n            &lt;/th&gt;\n\n            &lt;th&gt;\n\n               Repeat layout:\n\n            &lt;/th&gt;\n\n            &lt;th&gt;\n\n               Repeat columns:\n\n            &lt;/th&gt;\n\n            &lt;th&gt;\n\n               &lt;asp:CheckBox id=&quot;ShowBorderCheckBox&quot;\n                    Text=&quot;Show border&quot;\n                    Checked=&quot;False&quot; \n                    runat=&quot;server&quot; /&gt;\n\n            &lt;/th&gt;\n\n         &lt;/tr&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;DirectionList&quot; \n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem&gt;Horizontal&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt;Vertical&lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;LayoutList&quot; \n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt;Table&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;Flow&lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;ColumnsList&quot; \n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt;0&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;1&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;2&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;3&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;4&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;5&lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &amp;nbsp;\n\n            &lt;/td&gt;\n\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;     \n         \n      &lt;asp:LinkButton id=&quot;RefreshButton&quot; \n           Text=&quot;Refresh DataList&quot; \n           OnClick=&quot;Button_Click&quot; \n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_HeaderStyle\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_HeaderStyle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HeaderStyle</div>        \r\n          </div>\r\n    \r\n            <p>Gets the style properties for the heading section of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Web.UI.WebControls.TableItemStyle HeaderStyle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a> object that contains the style properties for the heading section of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. The default value is an empty <a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this property to provide a custom style for the heading of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. Common style attributes that can be adjusted include foreground color, background color, font, and content alignment within the cell. Providing a different style enhances the appearance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<p> To specify a custom style for the heading section, place the <code>&lt;HeaderStyle&gt;</code> tags between the opening and closing tags of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. You can then list the style attributes within the opening <code>&lt;HeaderStyle&gt;</code> tag.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_ShowHeader_\" data-linktype=\"relative-path\">ShowHeader</a> property must be set to <code>true</code> for this property to be visible.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the HeaderStyle property to specify a custom background color for the heading section of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"DataListHeaderStyle#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataList control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n         dt.Columns.Add(new DataColumn(&quot;ImageValue&quot;, typeof(String)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Description for item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n            dr[3] = &quot;Image&quot; + i.ToString() + &quot;.jpg&quot;;\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n      }\n  \n      void Page_Load(Object sender, EventArgs e) \n      {\n\n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsList.DataSource = CreateDataSource();\n            ItemsList.DataBind();\n         }\n\n      }\n\n      void Selection_Change(Object sender, EventArgs e)\n      {\n\n         // Set the background color for the heading and footer sections\n         // of the DataList control.\n         ItemsList.HeaderStyle.BackColor = \n             System.Drawing.Color.FromName(List.SelectedItem.Value);\n         ItemsList.FooterStyle.BackColor = \n             System.Drawing.Color.FromName(List.SelectedItem.Value);\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList HeaderStyle and FooterStyle Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList HeaderStyle and FooterStyle Example&lt;/h3&gt;\n\n      Select a background color for the header and footer sections.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;3&quot;\n           ShowFooter=&quot;True&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;White&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;White&quot;&gt;\n         &lt;/FooterStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n\n         &lt;FooterTemplate&gt;\n\n            &lt;asp:Image id=&quot;FooterImage&quot;\n                 GenerateEmptyAlternateText=&#39;true&#39; \n                 ImageUrl=&#39;FooterImage.jpg&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/FooterTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: &lt;%# DataBinder.Eval(Container.DataItem, &quot;CurrencyValue&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:Image id=&quot;ProductImage&quot;\n                 AlternatingText=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;&#39; \n                 ImageUrl=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;ImageValue&quot;) %&gt;&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n\n      &lt;hr /&gt;\n\n      Header and footer BackColor: &lt;br /&gt; \n\n      &lt;asp:DropDownList id=&quot;List&quot;\n           AutoPostBack=&quot;True&quot;\n           OnSelectedIndexChanged=&quot;Selection_Change&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;asp:ListItem Selected=&quot;True&quot; Value=&quot;White&quot;&gt; White &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;Silver&quot;&gt; Silver &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;DarkGray&quot;&gt; Dark Gray &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;Khaki&quot;&gt; Khaki &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;DarkKhaki&quot;&gt; Dark Khaki &lt;/asp:ListItem&gt;\n\n      &lt;/asp:DropDownList&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataListHeaderStyle#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataList control.\n         Dim dt As DataTable = New DataTable()\n         dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n         dt.Columns.Add(New DataColumn(&quot;ImageValue&quot;, GetType(String)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 To 8 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Description for item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n            dr(3) = &quot;Image&quot; &amp; i.ToString() &amp; &quot;.jpg&quot;\n \n            dt.Rows.Add(dr)\n\n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n\n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n\n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then \n     \n            ItemsList.DataSource = CreateDataSource()\n            ItemsList.DataBind()\n         \n         End If\n\n      End Sub\n\n      Sub Selection_Change(sender As Object, e As EventArgs)\n\n         &#39; Set the background color for the heading and footer sections\n         &#39; of the DataList control.\n         ItemsList.HeaderStyle.BackColor = _\n             System.Drawing.Color.FromName(List.SelectedItem.Value)\n         ItemsList.FooterStyle.BackColor = _\n             System.Drawing.Color.FromName(List.SelectedItem.Value)\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList HeaderStyle and FooterStyle Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList HeaderStyle and FooterStyle Example&lt;/h3&gt;\n\n      Select a background color for the header and footer sections.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;3&quot;\n           ShowFooter=&quot;True&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;White&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;White&quot;&gt;\n         &lt;/FooterStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n\n         &lt;FooterTemplate&gt;\n\n            &lt;asp:Image id=&quot;FooterImage&quot;\n                 ImageUrl=&#39;FooterImage.jpg&#39;\n                 GenerateEmptyAlternateText=&#39;true&#39; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/FooterTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: &lt;%# DataBinder.Eval(Container.DataItem, &quot;CurrencyValue&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:Image id=&quot;ProductImage&quot;\n                 AlternatingText=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;&#39; \n                 ImageUrl=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;ImageValue&quot;) %&gt;&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n\n      &lt;hr /&gt;\n\n      Header and footer BackColor: &lt;br /&gt; \n\n      &lt;asp:DropDownList id=&quot;List&quot;\n           AutoPostBack=&quot;True&quot;\n           OnSelectedIndexChanged=&quot;Selection_Change&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;asp:ListItem Selected=&quot;True&quot; Value=&quot;White&quot;&gt; White &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;Silver&quot;&gt; Silver &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;DarkGray&quot;&gt; Dark Gray &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;Khaki&quot;&gt; Khaki &lt;/asp:ListItem&gt;\n         &lt;asp:ListItem Value=&quot;DarkKhaki&quot;&gt; Dark Khaki &lt;/asp:ListItem&gt;\n\n      &lt;/asp:DropDownList&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_HeaderTemplate\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_HeaderTemplate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HeaderTemplate</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the template for the heading section of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Web.UI.ITemplate HeaderTemplate { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.itemplate\" data-linktype=\"relative-path\">ITemplate</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.itemplate\" data-linktype=\"relative-path\">ITemplate</a> that contains the template for the heading section of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. The default value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the HeaderTemplate property to control the contents of the heading section. The appearance of the header section is controlled by the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_HeaderStyle_\" data-linktype=\"relative-path\">HeaderStyle</a> property.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_ShowHeader_\" data-linktype=\"relative-path\">ShowHeader</a> property must be set to <code>true</code> for this property to be visible.  </p>\n</div>\n<p> To specify a template for the heading section, place the <code>&lt;HeaderTemplate&gt;</code> tags between the opening and closing tags of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. You can then list the contents of the template between the opening and closing <code>&lt;HeaderTemplate&gt;</code> tags.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see <a href=\"../Topic/Securing%20Standard%20Controls.md\" data-linktype=\"relative-path\">Securing Standard Controls</a>, <a href=\"../Topic/How%20to:%20Protect%20Against%20Script%20Exploits%20in%20a%20Web%20Application%20by%20Applying%20HTML%20Encoding%20to%20Strings.md\" data-linktype=\"relative-path\">How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings</a>, and <a href=\"../Topic/Validating%20User%20Input%20in%20ASP.NET%20Web%20Pages.md\" data-linktype=\"relative-path\">Validating User Input in ASP.NET Web Pages</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the HeaderTemplate property to control the contents of the heading section of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"DataListLayout#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataList control.\n         Dim dt As DataTable = New DataTable()\n         dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n         dt.Columns.Add(New DataColumn(&quot;ImageValue&quot;, GetType(String)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 To 8 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Description for item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n            dr(3) = &quot;Image&quot; &amp; i.ToString() &amp; &quot;.jpg&quot;\n \n            dt.Rows.Add(dr)\n\n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n\n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n\n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then \n     \n            ItemsList.DataSource = CreateDataSource()\n            ItemsList.DataBind()\n         \n         End If\n\n      End Sub\n \n      Sub Button_Click(sender As Object, e As EventArgs) \n \n         &#39; Set the repeat direction based on the selected value of the\n         &#39; DirectionList DropDownList control.\n         ItemsList.RepeatDirection = _\n             CType(DirectionList.SelectedIndex, RepeatDirection)\n\n         &#39; Set the repeat layout based on the selected value of the\n         &#39; LayoutList DropDownList control.\n         ItemsList.RepeatLayout = CType(LayoutList.SelectedIndex, RepeatLayout)\n\n         &#39; Set the number of columns to display based on the selected\n         &#39; value of the ColumnsList DropDownList control.\n         ItemsList.RepeatColumns = ColumnsList.SelectedIndex\n\n         &#39; Show or hide the gridlines based on the value of the\n         &#39; ShowBorderCheckBox. Note that gridlines are displayed\n         &#39; only if the RepeatLayout property is set to Table.\n         If ShowBorderCheckBox.Checked _\n             And ItemsList.RepeatLayout = RepeatLayout.Table Then \n\n            ItemsList.BorderWidth = Unit.Pixel(1)\n            ItemsList.GridLines = GridLines.Both\n         \n         Else  \n    \n            ItemsList.BorderWidth = Unit.Pixel(0)\n            ItemsList.GridLines = GridLines.None\n         \n         End If\n    \n      End Sub    \n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Example&lt;/h3&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;0&quot;\n           BorderWidth=&quot;0&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: &lt;%# DataBinder.Eval(Container.DataItem, &quot;CurrencyValue&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:Image id=&quot;ProductImage&quot;\n                 AlternatingText=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;&#39;\n                 ImageUrl=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;ImageValue&quot;) %&gt;&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n \n      &lt;hr /&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;th&gt;\n\n               Repeat direction:\n\n            &lt;/th&gt;\n\n            &lt;th&gt;\n\n               Repeat layout:\n\n            &lt;/th&gt;\n\n            &lt;th&gt;\n\n               Repeat columns:\n\n            &lt;/th&gt;\n\n            &lt;th&gt;\n\n               &lt;asp:CheckBox id=&quot;ShowBorderCheckBox&quot;\n                    Text=&quot;Show border&quot;\n                    Checked=&quot;False&quot; \n                    runat=&quot;server&quot; /&gt;\n\n            &lt;/th&gt;\n\n         &lt;/tr&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;DirectionList&quot; \n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem&gt;Horizontal&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt;Vertical&lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;LayoutList&quot; \n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt;Table&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;Flow&lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;ColumnsList&quot; \n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt;0&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;1&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;2&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;3&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;4&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;5&lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &amp;nbsp;\n\n            &lt;/td&gt;\n\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;     \n         \n      &lt;asp:LinkButton id=&quot;RefreshButton&quot; \n           Text=&quot;Refresh DataList&quot; \n           OnClick=&quot;Button_Click&quot; \n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataListLayout#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataList control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n         dt.Columns.Add(new DataColumn(&quot;ImageValue&quot;, typeof(String)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Description for item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n            dr[3] = &quot;Image&quot; + i.ToString() + &quot;.jpg&quot;;\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n      }\n \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n\n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsList.DataSource = CreateDataSource();\n            ItemsList.DataBind();\n         }\n\n      }\n \n      void Button_Click(Object sender, EventArgs e) \n      {\n \n         // Set the repeat direction based on the selected value of the\n         // DirectionList DropDownList control.\n         ItemsList.RepeatDirection = \n             (RepeatDirection)DirectionList.SelectedIndex;\n\n         // Set the repeat layout based on the selected value of the\n         // LayoutList DropDownList control.\n         ItemsList.RepeatLayout = (RepeatLayout)LayoutList.SelectedIndex;\n\n         // Set the number of columns to display based on the selected\n         // value of the ColumnsList DropDownList control.\n         ItemsList.RepeatColumns = ColumnsList.SelectedIndex;\n\n         // Show or hide the gridlines based on the value of the\n         // ShowBorderCheckBox property. Note that gridlines are displayed\n         // only if the RepeatLayout property is set to Table.\n         if ((ShowBorderCheckBox.Checked) \n             &amp;&amp; (ItemsList.RepeatLayout == RepeatLayout.Table)) \n         {\n            ItemsList.BorderWidth = Unit.Pixel(1);\n            ItemsList.GridLines = GridLines.Both;\n         }    \n         else  \n         {\n            ItemsList.BorderWidth = Unit.Pixel(0);\n            ItemsList.GridLines = GridLines.None;\n         }\n    \n      }    \n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Example&lt;/h3&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;0&quot;\n           BorderWidth=&quot;0&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: &lt;%# DataBinder.Eval(Container.DataItem, &quot;CurrencyValue&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:Image id=&quot;ProductImage&quot;\n                 AlternatingText=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;&#39;\n                 ImageUrl=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;ImageValue&quot;) %&gt;&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n \n      &lt;hr /&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;th&gt;\n\n               Repeat direction:\n\n            &lt;/th&gt;\n\n            &lt;th&gt;\n\n               Repeat layout:\n\n            &lt;/th&gt;\n\n            &lt;th&gt;\n\n               Repeat columns:\n\n            &lt;/th&gt;\n\n            &lt;th&gt;\n\n               &lt;asp:CheckBox id=&quot;ShowBorderCheckBox&quot;\n                    Text=&quot;Show border&quot;\n                    Checked=&quot;False&quot; \n                    runat=&quot;server&quot; /&gt;\n\n            &lt;/th&gt;\n\n         &lt;/tr&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;DirectionList&quot; \n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem&gt;Horizontal&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt;Vertical&lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;LayoutList&quot; \n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt;Table&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;Flow&lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;ColumnsList&quot; \n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt;0&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;1&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;2&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;3&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;4&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;5&lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &amp;nbsp;\n\n            &lt;/td&gt;\n\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;     \n         \n      &lt;asp:LinkButton id=&quot;RefreshButton&quot; \n           Text=&quot;Refresh DataList&quot; \n           OnClick=&quot;Button_Click&quot; \n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_Items\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_Items_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Items</div>        \r\n          </div>\r\n    \r\n            <p>Gets a collection of <a class=\"xref\" href=\"system.web.ui.webcontrols.datalistitem\" data-linktype=\"relative-path\">DataListItem</a> objects representing the individual items within the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Web.UI.WebControls.DataListItemCollection Items { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.datalistitemcollection\" data-linktype=\"relative-path\">DataListItemCollection</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.datalistitemcollection\" data-linktype=\"relative-path\">DataListItemCollection</a> that contains a collection of <a class=\"xref\" href=\"system.web.ui.webcontrols.datalistitem\" data-linktype=\"relative-path\">DataListItem</a> objects representing the individual items within the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the Items collection to programmatically control the items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. The Items collection does not provide any methods to add or remove items to the collection. However, you can control the contents of an item by providing a handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_ItemCreated\" data-linktype=\"relative-path\">ItemCreated</a> event.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Only items bound to the data source are contained in the Items collection. The header, footer, and separator are not included in the collection.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the Items collection to display the items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"Classic DataList.Items Example#1\">&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script language = &quot;VB&quot; runat=&quot;server&quot;&gt;\n    Function CreateDataSource() As ICollection\n        Dim dt As New DataTable()\n        Dim dr As DataRow\n        \n        dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n        \n        Dim i As Integer\n        For i = 0 To 9\n            dr = dt.NewRow()\n            dr(0) = &quot;Item &quot; &amp; i.ToString()\n            dt.Rows.Add(dr)\n        Next i\n        \n        Dim dv As New DataView(dt)\n        Return dv\n    End Function &#39;CreateDataSource\n\n\n    Sub Page_Load(sender As Object, e As EventArgs)\n        If Not IsPostBack Then\n            DataList1.DataSource = CreateDataSource()\n            DataList1.DataBind()\n        End If\n    End Sub &#39;Page_Load\n\n\n    Sub Button_Click(sender As Object, e As EventArgs)\n        If DataList1.Items.Count &gt; 0 Then\n            Label1.Text = &quot;The Items collection contains: &lt;br /&gt;&quot;\n            \n            Dim item As DataListItem\n            For Each item In  DataList1.Items\n                \n                Label1.Text += CType(item.Controls(0), DataBoundLiteralControl).Text &amp; &quot;&lt;br /&gt;&quot;\n            Next item\n        End If\n    End Sub &#39;Button_Click\n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList Items Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Items Example&lt;/h3&gt;\n \n      &lt;asp:DataList id=&quot;DataList1&quot; runat=&quot;server&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;3&quot;\n           Font-Names=&quot;Verdana&quot;\n           Font-Size=&quot;8pt&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n\n        &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Button id=&quot;Button1&quot;\n           Text=&quot;Display Contents of Items Collection&quot;\n           OnClick=&quot;Button_Click&quot;\n           runat=&quot;server&quot;/&gt;\n \n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Label id=&quot;Label1&quot;\n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n   \n</code></pre><pre><code class=\"lang-cs\" name=\"Classic DataList.Items Example#1\">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script language = &quot;C#&quot; runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource() \n      {\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(string)));\n  \n         for (int i = 0; i &lt; 10; i++) \n         {\n            dr = dt.NewRow();\n            dr[0] = &quot;Item &quot; + i.ToString();\n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n      }\n \n      void Page_Load(Object sender, EventArgs e) \n      {\n         if (!IsPostBack) \n         {\n            DataList1.DataSource = CreateDataSource();\n            DataList1.DataBind();\n         }\n      }\n \n      void Button_Click(Object sender, EventArgs e)\n      { \n         if (DataList1.Items.Count &gt; 0)\n         {\n            Label1.Text = &quot;The Items collection contains: &lt;br /&gt;&quot;;\n\n            foreach(DataListItem item in DataList1.Items)\n            {\n        \n               Label1.Text += ((DataBoundLiteralControl)item.Controls[0]).Text +\n                              &quot;&lt;br /&gt;&quot;;\n            }\n         }\n      } \n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList Items Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Items Example&lt;/h3&gt;\n \n      &lt;asp:DataList id=&quot;DataList1&quot; runat=&quot;server&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;3&quot;\n           Font-Names=&quot;Verdana&quot;\n           Font-Size=&quot;8pt&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n\n        &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Button id=&quot;Button1&quot;\n           Text=&quot;Display Contents of Items Collection&quot;\n           OnClick=&quot;Button_Click&quot;\n           runat=&quot;server&quot;/&gt;\n \n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Label id=&quot;Label1&quot;\n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n   \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_ItemStyle\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_ItemStyle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ItemStyle</div>        \r\n          </div>\r\n    \r\n            <p>Gets the style properties for the items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Web.UI.WebControls.TableItemStyle ItemStyle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a> object that contains the style properties for the items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. The default value is an empty <a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this property to provide a custom style for the items of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. Common style attributes that can be adjusted include foreground color, background color, font, and content alignment within the cell. Providing a different style enhances the appearance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<p> Item style properties in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control are inherited from one item style property to another through a hierarchy. Item style properties set lower in the hierarchy are inherited by item style properties higher in the hierarchy. For example, if you specify a red font for the ItemStyle property, all other item style properties in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control will also have a red font. This allows you to provide a common appearance for the control by setting a single item style property. You can override the inherited style settings for an item style property that is higher in the hierarchy by setting its style properties. For example, you can specify a blue font for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_AlternatingItemStyle_\" data-linktype=\"relative-path\">AlternatingItemStyle</a> property, overriding the red font specified in the ItemStyle property. The following table lists the hierarchy order from highest to lowest.  </p>\n<table>\n<thead>\n<tr>\n<th>Precedence</th>\n<th>Style Property</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_EditItemStyle_\" data-linktype=\"relative-path\">EditItemStyle</a></td>\n</tr>\n<tr>\n<td>2</td>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_SelectedItemStyle_\" data-linktype=\"relative-path\">SelectedItemStyle</a></td>\n</tr>\n<tr>\n<td>3</td>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_AlternatingItemStyle_\" data-linktype=\"relative-path\">AlternatingItemStyle</a></td>\n</tr>\n<tr>\n<td>4</td>\n<td>ItemStyle</td>\n</tr>\n<tr>\n<td>5</td>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_ControlStyle_\" data-linktype=\"relative-path\">ControlStyle</a></td>\n</tr>\n</tbody>\n</table>\n<p> To specify a custom style for the items of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control, place the <code>&lt;ItemStyle&gt;</code> tags between the opening and closing tags of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. You can then list the style attributes within the opening <code>&lt;ItemStyle&gt;</code> tag.  </p>\n<p> You can also use the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_AlternatingItemStyle_\" data-linktype=\"relative-path\">AlternatingItemStyle</a> property to provide a different appearance for the alternating items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the ItemStyle property to specify a different background color for the items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"DataListItemStyle#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataList control.\n         Dim dt As DataTable = New DataTable()\n         dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n         dt.Columns.Add(New DataColumn(&quot;ImageValue&quot;, GetType(String)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 To 8 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Description for item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n            dr(3) = &quot;Image&quot; &amp; i.ToString() &amp; &quot;.jpg&quot;\n \n            dt.Rows.Add(dr)\n\n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n\n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n\n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then \n     \n            ItemsList.DataSource = CreateDataSource()\n            ItemsList.DataBind()\n         \n         End If\n\n      End Sub\n\n      Sub Selection_Change(sender As Object, e As EventArgs)\n\n         &#39; Set the background color for the heading and footer sections\n         &#39; of the DataList control.\n         ItemsList.ItemStyle.BackColor = _\n             System.Drawing.Color.FromName(ItemList.SelectedItem.Value)\n         ItemsList.AlternatingItemStyle.BackColor = _\n             System.Drawing.Color.FromName(AltItemList.SelectedItem.Value)\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList ItemStyle and AlternatingItemStyle Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList ItemStyle and AlternatingItemStyle Example&lt;/h3&gt;\n\n      Select background colors for the items and alternating items.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;3&quot;\n           ShowFooter=&quot;True&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;ItemStyle BackColor=&quot;White&quot;&gt;\n         &lt;/ItemStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;White&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: &lt;%# DataBinder.Eval(Container.DataItem, &quot;CurrencyValue&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:Image id=&quot;ProductImage&quot;\n                 AlternatingText=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;&#39;\n                 ImageUrl=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;ImageValue&quot;) %&gt;&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n\n      &lt;hr /&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               Item BackColor:\n \n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               Alternating item BackColor:\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;ItemList&quot;\n                    AutoPostBack=&quot;True&quot;\n                    OnSelectedIndexChanged=&quot;Selection_Change&quot;\n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot; Value=&quot;White&quot;&gt; White &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Silver&quot;&gt; Silver &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkGray&quot;&gt; Dark Gray &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Khaki&quot;&gt; Khaki &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkKhaki&quot;&gt; Dark Khaki &lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n \n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;AltItemList&quot;\n                    AutoPostBack=&quot;True&quot;\n                    OnSelectedIndexChanged=&quot;Selection_Change&quot;\n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot; Value=&quot;White&quot;&gt; White &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Silver&quot;&gt; Silver &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkGray&quot;&gt; Dark Gray &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Khaki&quot;&gt; Khaki &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkKhaki&quot;&gt; Dark Khaki &lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataListItemStyle#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataList control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n         dt.Columns.Add(new DataColumn(&quot;ImageValue&quot;, typeof(String)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Description for item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n            dr[3] = &quot;Image&quot; + i.ToString() + &quot;.jpg&quot;;\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n      }\n  \n      void Page_Load(Object sender, EventArgs e) \n      {\n\n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsList.DataSource = CreateDataSource();\n            ItemsList.DataBind();\n         }\n\n      }\n\n      void Selection_Change(Object sender, EventArgs e)\n      {\n\n         // Set the background color for the heading and footer sections\n         // of the DataList control.\n         ItemsList.ItemStyle.BackColor = \n             System.Drawing.Color.FromName(ItemList.SelectedItem.Value);\n         ItemsList.AlternatingItemStyle.BackColor = \n             System.Drawing.Color.FromName(AltItemList.SelectedItem.Value);\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList ItemStyle and AlternatingItemStyle Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList ItemStyle and AlternatingItemStyle Example&lt;/h3&gt;\n\n      Select background colors for the items and alternating items.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;3&quot;\n           ShowFooter=&quot;True&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;ItemStyle BackColor=&quot;White&quot;&gt;\n         &lt;/ItemStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;White&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: &lt;%# DataBinder.Eval(Container.DataItem, &quot;CurrencyValue&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:Image id=&quot;ProductImage&quot;\n                 AlternatingText=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;&#39;\n                 ImageUrl=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;ImageValue&quot;) %&gt;&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n\n         &lt;AlternatingItemTemplate&gt;\n\n            &lt;asp:Image id=&quot;ProductImage&quot;\n                 AlternatingText=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;&#39;\n                 ImageUrl=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;ImageValue&quot;) %&gt;&#39;\n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: &lt;%# DataBinder.Eval(Container.DataItem, &quot;CurrencyValue&quot;, &quot;{0:c}&quot;) %&gt;       \n\n         &lt;/AlternatingItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n\n      &lt;hr /&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               Item BackColor:\n \n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               Alternating item BackColor:\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;ItemList&quot;\n                    AutoPostBack=&quot;True&quot;\n                    OnSelectedIndexChanged=&quot;Selection_Change&quot;\n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot; Value=&quot;White&quot;&gt; White &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Silver&quot;&gt; Silver &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkGray&quot;&gt; Dark Gray &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Khaki&quot;&gt; Khaki &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkKhaki&quot;&gt; Dark Khaki &lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n \n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;AltItemList&quot;\n                    AutoPostBack=&quot;True&quot;\n                    OnSelectedIndexChanged=&quot;Selection_Change&quot;\n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot; Value=&quot;White&quot;&gt; White &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Silver&quot;&gt; Silver &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkGray&quot;&gt; Dark Gray &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Khaki&quot;&gt; Khaki &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkKhaki&quot;&gt; Dark Khaki &lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_ItemTemplate\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_ItemTemplate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ItemTemplate</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the template for the items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Web.UI.ITemplate ItemTemplate { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.itemplate\" data-linktype=\"relative-path\">ITemplate</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.itemplate\" data-linktype=\"relative-path\">ITemplate</a> that contains the template for the items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. The default value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the ItemTemplate property to control the contents of the items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. The appearance of the items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control is controlled by the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_ItemStyle_\" data-linktype=\"relative-path\">ItemStyle</a> property.  </p>\n<p> To specify a template for the items of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control, place the <code>&lt;ItemTemplate&gt;</code> tags between the opening and closing tags of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. You can then list the contents of the template between the opening and closing <code>&lt;ItemTemplate&gt;</code> tags.  </p>\n<p> You can optionally use the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_AlternatingItemTemplate_\" data-linktype=\"relative-path\">AlternatingItemTemplate</a> property to provide a different appearance for the alternating items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see <a href=\"../Topic/Securing%20Standard%20Controls.md\" data-linktype=\"relative-path\">Securing Standard Controls</a>, <a href=\"../Topic/How%20to:%20Protect%20Against%20Script%20Exploits%20in%20a%20Web%20Application%20by%20Applying%20HTML%20Encoding%20to%20Strings.md\" data-linktype=\"relative-path\">How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings</a>, and <a href=\"../Topic/Validating%20User%20Input%20in%20ASP.NET%20Web%20Pages.md\" data-linktype=\"relative-path\">Validating User Input in ASP.NET Web Pages</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the ItemTemplate property to control the contents of the items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"DataListLayout#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataList control.\n         Dim dt As DataTable = New DataTable()\n         dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n         dt.Columns.Add(New DataColumn(&quot;ImageValue&quot;, GetType(String)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 To 8 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Description for item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n            dr(3) = &quot;Image&quot; &amp; i.ToString() &amp; &quot;.jpg&quot;\n \n            dt.Rows.Add(dr)\n\n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n\n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n\n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then \n     \n            ItemsList.DataSource = CreateDataSource()\n            ItemsList.DataBind()\n         \n         End If\n\n      End Sub\n \n      Sub Button_Click(sender As Object, e As EventArgs) \n \n         &#39; Set the repeat direction based on the selected value of the\n         &#39; DirectionList DropDownList control.\n         ItemsList.RepeatDirection = _\n             CType(DirectionList.SelectedIndex, RepeatDirection)\n\n         &#39; Set the repeat layout based on the selected value of the\n         &#39; LayoutList DropDownList control.\n         ItemsList.RepeatLayout = CType(LayoutList.SelectedIndex, RepeatLayout)\n\n         &#39; Set the number of columns to display based on the selected\n         &#39; value of the ColumnsList DropDownList control.\n         ItemsList.RepeatColumns = ColumnsList.SelectedIndex\n\n         &#39; Show or hide the gridlines based on the value of the\n         &#39; ShowBorderCheckBox. Note that gridlines are displayed\n         &#39; only if the RepeatLayout property is set to Table.\n         If ShowBorderCheckBox.Checked _\n             And ItemsList.RepeatLayout = RepeatLayout.Table Then \n\n            ItemsList.BorderWidth = Unit.Pixel(1)\n            ItemsList.GridLines = GridLines.Both\n         \n         Else  \n    \n            ItemsList.BorderWidth = Unit.Pixel(0)\n            ItemsList.GridLines = GridLines.None\n         \n         End If\n    \n      End Sub    \n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Example&lt;/h3&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;0&quot;\n           BorderWidth=&quot;0&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: &lt;%# DataBinder.Eval(Container.DataItem, &quot;CurrencyValue&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:Image id=&quot;ProductImage&quot;\n                 AlternatingText=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;&#39;\n                 ImageUrl=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;ImageValue&quot;) %&gt;&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n \n      &lt;hr /&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;th&gt;\n\n               Repeat direction:\n\n            &lt;/th&gt;\n\n            &lt;th&gt;\n\n               Repeat layout:\n\n            &lt;/th&gt;\n\n            &lt;th&gt;\n\n               Repeat columns:\n\n            &lt;/th&gt;\n\n            &lt;th&gt;\n\n               &lt;asp:CheckBox id=&quot;ShowBorderCheckBox&quot;\n                    Text=&quot;Show border&quot;\n                    Checked=&quot;False&quot; \n                    runat=&quot;server&quot; /&gt;\n\n            &lt;/th&gt;\n\n         &lt;/tr&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;DirectionList&quot; \n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem&gt;Horizontal&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt;Vertical&lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;LayoutList&quot; \n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt;Table&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;Flow&lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;ColumnsList&quot; \n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt;0&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;1&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;2&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;3&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;4&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;5&lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &amp;nbsp;\n\n            &lt;/td&gt;\n\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;     \n         \n      &lt;asp:LinkButton id=&quot;RefreshButton&quot; \n           Text=&quot;Refresh DataList&quot; \n           OnClick=&quot;Button_Click&quot; \n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataListLayout#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataList control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n         dt.Columns.Add(new DataColumn(&quot;ImageValue&quot;, typeof(String)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Description for item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n            dr[3] = &quot;Image&quot; + i.ToString() + &quot;.jpg&quot;;\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n      }\n \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n\n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsList.DataSource = CreateDataSource();\n            ItemsList.DataBind();\n         }\n\n      }\n \n      void Button_Click(Object sender, EventArgs e) \n      {\n \n         // Set the repeat direction based on the selected value of the\n         // DirectionList DropDownList control.\n         ItemsList.RepeatDirection = \n             (RepeatDirection)DirectionList.SelectedIndex;\n\n         // Set the repeat layout based on the selected value of the\n         // LayoutList DropDownList control.\n         ItemsList.RepeatLayout = (RepeatLayout)LayoutList.SelectedIndex;\n\n         // Set the number of columns to display based on the selected\n         // value of the ColumnsList DropDownList control.\n         ItemsList.RepeatColumns = ColumnsList.SelectedIndex;\n\n         // Show or hide the gridlines based on the value of the\n         // ShowBorderCheckBox property. Note that gridlines are displayed\n         // only if the RepeatLayout property is set to Table.\n         if ((ShowBorderCheckBox.Checked) \n             &amp;&amp; (ItemsList.RepeatLayout == RepeatLayout.Table)) \n         {\n            ItemsList.BorderWidth = Unit.Pixel(1);\n            ItemsList.GridLines = GridLines.Both;\n         }    \n         else  \n         {\n            ItemsList.BorderWidth = Unit.Pixel(0);\n            ItemsList.GridLines = GridLines.None;\n         }\n    \n      }    \n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Example&lt;/h3&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;0&quot;\n           BorderWidth=&quot;0&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: &lt;%# DataBinder.Eval(Container.DataItem, &quot;CurrencyValue&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:Image id=&quot;ProductImage&quot;\n                 AlternatingText=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;&#39;\n                 ImageUrl=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;ImageValue&quot;) %&gt;&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n \n      &lt;hr /&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;th&gt;\n\n               Repeat direction:\n\n            &lt;/th&gt;\n\n            &lt;th&gt;\n\n               Repeat layout:\n\n            &lt;/th&gt;\n\n            &lt;th&gt;\n\n               Repeat columns:\n\n            &lt;/th&gt;\n\n            &lt;th&gt;\n\n               &lt;asp:CheckBox id=&quot;ShowBorderCheckBox&quot;\n                    Text=&quot;Show border&quot;\n                    Checked=&quot;False&quot; \n                    runat=&quot;server&quot; /&gt;\n\n            &lt;/th&gt;\n\n         &lt;/tr&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;DirectionList&quot; \n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem&gt;Horizontal&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt;Vertical&lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;LayoutList&quot; \n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt;Table&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;Flow&lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;ColumnsList&quot; \n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt;0&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;1&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;2&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;3&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;4&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;5&lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &amp;nbsp;\n\n            &lt;/td&gt;\n\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;     \n         \n      &lt;asp:LinkButton id=&quot;RefreshButton&quot; \n           Text=&quot;Refresh DataList&quot; \n           OnClick=&quot;Button_Click&quot; \n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_RepeatColumns\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_RepeatColumns_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RepeatColumns</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the number of columns to display in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int RepeatColumns { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of columns to display in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. The default value is <code>0</code>, which indicates that the items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control are displayed in a single row or column, based on the value of the <span class=\"xref\">stem.Web.UI.WebControls.DataList.RepeatDirection*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The specified number of columns is a negative value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this property to specify the number of columns that display items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. For example, if you set this property to <code>5</code>, the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control displays its items in five columns.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If this property is set to <code>0</code>, the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control displays its items in a single row or column, based on the value of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_RepeatDirection_\" data-linktype=\"relative-path\">RepeatDirection</a> property. If the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_RepeatDirection_\" data-linktype=\"relative-path\">RepeatDirection</a> property is set to <code>RepeatDirection.Horizontal</code>, the items are displayed in a single row. If the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_RepeatDirection_\" data-linktype=\"relative-path\">RepeatDirection</a> property is set to <code>RepeatDirection.Vertical</code>, the items are displayed in a single column.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the RepeatColumns property to specify the number of columns to display in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"DataListLayout#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataList control.\n         Dim dt As DataTable = New DataTable()\n         dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n         dt.Columns.Add(New DataColumn(&quot;ImageValue&quot;, GetType(String)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 To 8 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Description for item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n            dr(3) = &quot;Image&quot; &amp; i.ToString() &amp; &quot;.jpg&quot;\n \n            dt.Rows.Add(dr)\n\n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n\n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n\n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then \n     \n            ItemsList.DataSource = CreateDataSource()\n            ItemsList.DataBind()\n         \n         End If\n\n      End Sub\n \n      Sub Button_Click(sender As Object, e As EventArgs) \n \n         &#39; Set the repeat direction based on the selected value of the\n         &#39; DirectionList DropDownList control.\n         ItemsList.RepeatDirection = _\n             CType(DirectionList.SelectedIndex, RepeatDirection)\n\n         &#39; Set the repeat layout based on the selected value of the\n         &#39; LayoutList DropDownList control.\n         ItemsList.RepeatLayout = CType(LayoutList.SelectedIndex, RepeatLayout)\n\n         &#39; Set the number of columns to display based on the selected\n         &#39; value of the ColumnsList DropDownList control.\n         ItemsList.RepeatColumns = ColumnsList.SelectedIndex\n\n         &#39; Show or hide the gridlines based on the value of the\n         &#39; ShowBorderCheckBox. Note that gridlines are displayed\n         &#39; only if the RepeatLayout property is set to Table.\n         If ShowBorderCheckBox.Checked _\n             And ItemsList.RepeatLayout = RepeatLayout.Table Then \n\n            ItemsList.BorderWidth = Unit.Pixel(1)\n            ItemsList.GridLines = GridLines.Both\n         \n         Else  \n    \n            ItemsList.BorderWidth = Unit.Pixel(0)\n            ItemsList.GridLines = GridLines.None\n         \n         End If\n    \n      End Sub    \n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Example&lt;/h3&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;0&quot;\n           BorderWidth=&quot;0&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: &lt;%# DataBinder.Eval(Container.DataItem, &quot;CurrencyValue&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:Image id=&quot;ProductImage&quot;\n                 AlternatingText=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;&#39;\n                 ImageUrl=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;ImageValue&quot;) %&gt;&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n \n      &lt;hr /&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;th&gt;\n\n               Repeat direction:\n\n            &lt;/th&gt;\n\n            &lt;th&gt;\n\n               Repeat layout:\n\n            &lt;/th&gt;\n\n            &lt;th&gt;\n\n               Repeat columns:\n\n            &lt;/th&gt;\n\n            &lt;th&gt;\n\n               &lt;asp:CheckBox id=&quot;ShowBorderCheckBox&quot;\n                    Text=&quot;Show border&quot;\n                    Checked=&quot;False&quot; \n                    runat=&quot;server&quot; /&gt;\n\n            &lt;/th&gt;\n\n         &lt;/tr&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;DirectionList&quot; \n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem&gt;Horizontal&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt;Vertical&lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;LayoutList&quot; \n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt;Table&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;Flow&lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;ColumnsList&quot; \n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt;0&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;1&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;2&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;3&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;4&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;5&lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &amp;nbsp;\n\n            &lt;/td&gt;\n\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;     \n         \n      &lt;asp:LinkButton id=&quot;RefreshButton&quot; \n           Text=&quot;Refresh DataList&quot; \n           OnClick=&quot;Button_Click&quot; \n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataListLayout#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataList control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n         dt.Columns.Add(new DataColumn(&quot;ImageValue&quot;, typeof(String)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Description for item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n            dr[3] = &quot;Image&quot; + i.ToString() + &quot;.jpg&quot;;\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n      }\n \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n\n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsList.DataSource = CreateDataSource();\n            ItemsList.DataBind();\n         }\n\n      }\n \n      void Button_Click(Object sender, EventArgs e) \n      {\n \n         // Set the repeat direction based on the selected value of the\n         // DirectionList DropDownList control.\n         ItemsList.RepeatDirection = \n             (RepeatDirection)DirectionList.SelectedIndex;\n\n         // Set the repeat layout based on the selected value of the\n         // LayoutList DropDownList control.\n         ItemsList.RepeatLayout = (RepeatLayout)LayoutList.SelectedIndex;\n\n         // Set the number of columns to display based on the selected\n         // value of the ColumnsList DropDownList control.\n         ItemsList.RepeatColumns = ColumnsList.SelectedIndex;\n\n         // Show or hide the gridlines based on the value of the\n         // ShowBorderCheckBox property. Note that gridlines are displayed\n         // only if the RepeatLayout property is set to Table.\n         if ((ShowBorderCheckBox.Checked) \n             &amp;&amp; (ItemsList.RepeatLayout == RepeatLayout.Table)) \n         {\n            ItemsList.BorderWidth = Unit.Pixel(1);\n            ItemsList.GridLines = GridLines.Both;\n         }    \n         else  \n         {\n            ItemsList.BorderWidth = Unit.Pixel(0);\n            ItemsList.GridLines = GridLines.None;\n         }\n    \n      }    \n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Example&lt;/h3&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;0&quot;\n           BorderWidth=&quot;0&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: &lt;%# DataBinder.Eval(Container.DataItem, &quot;CurrencyValue&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:Image id=&quot;ProductImage&quot;\n                 AlternatingText=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;&#39;\n                 ImageUrl=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;ImageValue&quot;) %&gt;&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n \n      &lt;hr /&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;th&gt;\n\n               Repeat direction:\n\n            &lt;/th&gt;\n\n            &lt;th&gt;\n\n               Repeat layout:\n\n            &lt;/th&gt;\n\n            &lt;th&gt;\n\n               Repeat columns:\n\n            &lt;/th&gt;\n\n            &lt;th&gt;\n\n               &lt;asp:CheckBox id=&quot;ShowBorderCheckBox&quot;\n                    Text=&quot;Show border&quot;\n                    Checked=&quot;False&quot; \n                    runat=&quot;server&quot; /&gt;\n\n            &lt;/th&gt;\n\n         &lt;/tr&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;DirectionList&quot; \n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem&gt;Horizontal&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt;Vertical&lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;LayoutList&quot; \n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt;Table&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;Flow&lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;ColumnsList&quot; \n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt;0&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;1&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;2&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;3&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;4&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;5&lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &amp;nbsp;\n\n            &lt;/td&gt;\n\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;     \n         \n      &lt;asp:LinkButton id=&quot;RefreshButton&quot; \n           Text=&quot;Refresh DataList&quot; \n           OnClick=&quot;Button_Click&quot; \n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_RepeatDirection\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_RepeatDirection_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RepeatDirection</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets whether the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control displays vertically or horizontally.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Web.UI.WebControls.RepeatDirection RepeatDirection { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.repeatdirection\" data-linktype=\"relative-path\">RepeatDirection</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.web.ui.webcontrols.repeatdirection\" data-linktype=\"relative-path\">RepeatDirection</a> values. The default is <code>Vertical</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The specified value is not one of the <a class=\"xref\" href=\"system.web.ui.webcontrols.repeatdirection\" data-linktype=\"relative-path\">RepeatDirection</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the RepeatDirection property to specify the display direction of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The number of columns displayed is always determined by the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_RepeatColumns_\" data-linktype=\"relative-path\">RepeatColumns</a> property.  </p>\n</div>\n<p> If this property is set to <code>RepeatDirection.Vertical</code>, the items in the list are displayed in columns loaded from top to bottom, then left to right, until all items are rendered. For example, if the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_RepeatColumns_\" data-linktype=\"relative-path\">RepeatColumns</a> property is set to <code>3</code>, the items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control are displayed in three columns, as in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>4</td>\n<td>7</td>\n</tr>\n<tr>\n<td>2</td>\n<td>5</td>\n<td>8</td>\n</tr>\n<tr>\n<td>3</td>\n<td>6</td>\n<td>9</td>\n</tr>\n</tbody>\n</table>\n<p> If this property is set to <code>RepeatDirection.Horizontal</code>, the items in the list are displayed in rows loaded from left to right, then top to bottom, until all items are rendered. For example, if the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_RepeatColumns_\" data-linktype=\"relative-path\">RepeatColumns</a> property is set to <code>3</code>, the items of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control are displayed in rows of three items each, as in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n</tr>\n<tr>\n<td>4</td>\n<td>5</td>\n<td>6</td>\n</tr>\n<tr>\n<td>7</td>\n<td>8</td>\n<td>9</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the RepeatDirection property to specify the direction in which the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control is displayed.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"DataListLayout#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataList control.\n         Dim dt As DataTable = New DataTable()\n         dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n         dt.Columns.Add(New DataColumn(&quot;ImageValue&quot;, GetType(String)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 To 8 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Description for item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n            dr(3) = &quot;Image&quot; &amp; i.ToString() &amp; &quot;.jpg&quot;\n \n            dt.Rows.Add(dr)\n\n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n\n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n\n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then \n     \n            ItemsList.DataSource = CreateDataSource()\n            ItemsList.DataBind()\n         \n         End If\n\n      End Sub\n \n      Sub Button_Click(sender As Object, e As EventArgs) \n \n         &#39; Set the repeat direction based on the selected value of the\n         &#39; DirectionList DropDownList control.\n         ItemsList.RepeatDirection = _\n             CType(DirectionList.SelectedIndex, RepeatDirection)\n\n         &#39; Set the repeat layout based on the selected value of the\n         &#39; LayoutList DropDownList control.\n         ItemsList.RepeatLayout = CType(LayoutList.SelectedIndex, RepeatLayout)\n\n         &#39; Set the number of columns to display based on the selected\n         &#39; value of the ColumnsList DropDownList control.\n         ItemsList.RepeatColumns = ColumnsList.SelectedIndex\n\n         &#39; Show or hide the gridlines based on the value of the\n         &#39; ShowBorderCheckBox. Note that gridlines are displayed\n         &#39; only if the RepeatLayout property is set to Table.\n         If ShowBorderCheckBox.Checked _\n             And ItemsList.RepeatLayout = RepeatLayout.Table Then \n\n            ItemsList.BorderWidth = Unit.Pixel(1)\n            ItemsList.GridLines = GridLines.Both\n         \n         Else  \n    \n            ItemsList.BorderWidth = Unit.Pixel(0)\n            ItemsList.GridLines = GridLines.None\n         \n         End If\n    \n      End Sub    \n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Example&lt;/h3&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;0&quot;\n           BorderWidth=&quot;0&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: &lt;%# DataBinder.Eval(Container.DataItem, &quot;CurrencyValue&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:Image id=&quot;ProductImage&quot;\n                 AlternatingText=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;&#39;\n                 ImageUrl=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;ImageValue&quot;) %&gt;&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n \n      &lt;hr /&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;th&gt;\n\n               Repeat direction:\n\n            &lt;/th&gt;\n\n            &lt;th&gt;\n\n               Repeat layout:\n\n            &lt;/th&gt;\n\n            &lt;th&gt;\n\n               Repeat columns:\n\n            &lt;/th&gt;\n\n            &lt;th&gt;\n\n               &lt;asp:CheckBox id=&quot;ShowBorderCheckBox&quot;\n                    Text=&quot;Show border&quot;\n                    Checked=&quot;False&quot; \n                    runat=&quot;server&quot; /&gt;\n\n            &lt;/th&gt;\n\n         &lt;/tr&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;DirectionList&quot; \n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem&gt;Horizontal&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt;Vertical&lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;LayoutList&quot; \n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt;Table&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;Flow&lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;ColumnsList&quot; \n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt;0&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;1&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;2&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;3&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;4&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;5&lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &amp;nbsp;\n\n            &lt;/td&gt;\n\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;     \n         \n      &lt;asp:LinkButton id=&quot;RefreshButton&quot; \n           Text=&quot;Refresh DataList&quot; \n           OnClick=&quot;Button_Click&quot; \n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataListLayout#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataList control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n         dt.Columns.Add(new DataColumn(&quot;ImageValue&quot;, typeof(String)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Description for item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n            dr[3] = &quot;Image&quot; + i.ToString() + &quot;.jpg&quot;;\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n      }\n \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n\n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsList.DataSource = CreateDataSource();\n            ItemsList.DataBind();\n         }\n\n      }\n \n      void Button_Click(Object sender, EventArgs e) \n      {\n \n         // Set the repeat direction based on the selected value of the\n         // DirectionList DropDownList control.\n         ItemsList.RepeatDirection = \n             (RepeatDirection)DirectionList.SelectedIndex;\n\n         // Set the repeat layout based on the selected value of the\n         // LayoutList DropDownList control.\n         ItemsList.RepeatLayout = (RepeatLayout)LayoutList.SelectedIndex;\n\n         // Set the number of columns to display based on the selected\n         // value of the ColumnsList DropDownList control.\n         ItemsList.RepeatColumns = ColumnsList.SelectedIndex;\n\n         // Show or hide the gridlines based on the value of the\n         // ShowBorderCheckBox property. Note that gridlines are displayed\n         // only if the RepeatLayout property is set to Table.\n         if ((ShowBorderCheckBox.Checked) \n             &amp;&amp; (ItemsList.RepeatLayout == RepeatLayout.Table)) \n         {\n            ItemsList.BorderWidth = Unit.Pixel(1);\n            ItemsList.GridLines = GridLines.Both;\n         }    \n         else  \n         {\n            ItemsList.BorderWidth = Unit.Pixel(0);\n            ItemsList.GridLines = GridLines.None;\n         }\n    \n      }    \n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Example&lt;/h3&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;0&quot;\n           BorderWidth=&quot;0&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: &lt;%# DataBinder.Eval(Container.DataItem, &quot;CurrencyValue&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:Image id=&quot;ProductImage&quot;\n                 AlternatingText=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;&#39;\n                 ImageUrl=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;ImageValue&quot;) %&gt;&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n \n      &lt;hr /&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;th&gt;\n\n               Repeat direction:\n\n            &lt;/th&gt;\n\n            &lt;th&gt;\n\n               Repeat layout:\n\n            &lt;/th&gt;\n\n            &lt;th&gt;\n\n               Repeat columns:\n\n            &lt;/th&gt;\n\n            &lt;th&gt;\n\n               &lt;asp:CheckBox id=&quot;ShowBorderCheckBox&quot;\n                    Text=&quot;Show border&quot;\n                    Checked=&quot;False&quot; \n                    runat=&quot;server&quot; /&gt;\n\n            &lt;/th&gt;\n\n         &lt;/tr&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;DirectionList&quot; \n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem&gt;Horizontal&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt;Vertical&lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;LayoutList&quot; \n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt;Table&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;Flow&lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;ColumnsList&quot; \n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt;0&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;1&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;2&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;3&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;4&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;5&lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &amp;nbsp;\n\n            &lt;/td&gt;\n\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;     \n         \n      &lt;asp:LinkButton id=&quot;RefreshButton&quot; \n           Text=&quot;Refresh DataList&quot; \n           OnClick=&quot;Button_Click&quot; \n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_RepeatLayout\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_RepeatLayout_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RepeatLayout</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets whether the control is displayed in a table or flow layout.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Web.UI.WebControls.RepeatLayout RepeatLayout { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.repeatlayout\" data-linktype=\"relative-path\">RepeatLayout</a></div>\r\n                  </div>\r\n                  <p>A value that specifies whether the control is displayed in a table or in flow layout.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The specified value is not one of the supported <a class=\"xref\" href=\"system.web.ui.webcontrols.repeatlayout\" data-linktype=\"relative-path\">RepeatLayout</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the RepeatLayout property to specify whether the items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control are displayed in a table. The only <a class=\"xref\" href=\"system.web.ui.webcontrols.repeatlayout\" data-linktype=\"relative-path\">RepeatLayout</a> values that are supported by the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control are <a class=\"xref\" href=\"system.web.ui.webcontrols.repeatlayout\" data-linktype=\"relative-path\">RepeatLayout</a> and <a class=\"xref\" href=\"system.web.ui.webcontrols.repeatlayout\" data-linktype=\"relative-path\">RepeatLayout</a>.  </p>\n<p> If this property is set to <code>RepeatLayout.Table</code>, the items in the list are displayed in a table. If this property is set to <code>RepeatLayout.Flow</code>, the items in the list are displayed without a table structure.  </p>\n<p> When the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control is displayed in a table, you can use the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_GridLines_\" data-linktype=\"relative-path\">GridLines</a> property to specify a grid line style.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the RepeatLayout property to specify the layout style of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"DataListLayout#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataList control.\n         Dim dt As DataTable = New DataTable()\n         dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n         dt.Columns.Add(New DataColumn(&quot;ImageValue&quot;, GetType(String)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 To 8 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Description for item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n            dr(3) = &quot;Image&quot; &amp; i.ToString() &amp; &quot;.jpg&quot;\n \n            dt.Rows.Add(dr)\n\n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n\n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n\n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then \n     \n            ItemsList.DataSource = CreateDataSource()\n            ItemsList.DataBind()\n         \n         End If\n\n      End Sub\n \n      Sub Button_Click(sender As Object, e As EventArgs) \n \n         &#39; Set the repeat direction based on the selected value of the\n         &#39; DirectionList DropDownList control.\n         ItemsList.RepeatDirection = _\n             CType(DirectionList.SelectedIndex, RepeatDirection)\n\n         &#39; Set the repeat layout based on the selected value of the\n         &#39; LayoutList DropDownList control.\n         ItemsList.RepeatLayout = CType(LayoutList.SelectedIndex, RepeatLayout)\n\n         &#39; Set the number of columns to display based on the selected\n         &#39; value of the ColumnsList DropDownList control.\n         ItemsList.RepeatColumns = ColumnsList.SelectedIndex\n\n         &#39; Show or hide the gridlines based on the value of the\n         &#39; ShowBorderCheckBox. Note that gridlines are displayed\n         &#39; only if the RepeatLayout property is set to Table.\n         If ShowBorderCheckBox.Checked _\n             And ItemsList.RepeatLayout = RepeatLayout.Table Then \n\n            ItemsList.BorderWidth = Unit.Pixel(1)\n            ItemsList.GridLines = GridLines.Both\n         \n         Else  \n    \n            ItemsList.BorderWidth = Unit.Pixel(0)\n            ItemsList.GridLines = GridLines.None\n         \n         End If\n    \n      End Sub    \n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Example&lt;/h3&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;0&quot;\n           BorderWidth=&quot;0&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: &lt;%# DataBinder.Eval(Container.DataItem, &quot;CurrencyValue&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:Image id=&quot;ProductImage&quot;\n                 AlternatingText=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;&#39;\n                 ImageUrl=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;ImageValue&quot;) %&gt;&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n \n      &lt;hr /&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;th&gt;\n\n               Repeat direction:\n\n            &lt;/th&gt;\n\n            &lt;th&gt;\n\n               Repeat layout:\n\n            &lt;/th&gt;\n\n            &lt;th&gt;\n\n               Repeat columns:\n\n            &lt;/th&gt;\n\n            &lt;th&gt;\n\n               &lt;asp:CheckBox id=&quot;ShowBorderCheckBox&quot;\n                    Text=&quot;Show border&quot;\n                    Checked=&quot;False&quot; \n                    runat=&quot;server&quot; /&gt;\n\n            &lt;/th&gt;\n\n         &lt;/tr&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;DirectionList&quot; \n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem&gt;Horizontal&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt;Vertical&lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;LayoutList&quot; \n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt;Table&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;Flow&lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;ColumnsList&quot; \n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt;0&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;1&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;2&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;3&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;4&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;5&lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &amp;nbsp;\n\n            &lt;/td&gt;\n\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;     \n         \n      &lt;asp:LinkButton id=&quot;RefreshButton&quot; \n           Text=&quot;Refresh DataList&quot; \n           OnClick=&quot;Button_Click&quot; \n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataListLayout#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataList control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n         dt.Columns.Add(new DataColumn(&quot;ImageValue&quot;, typeof(String)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Description for item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n            dr[3] = &quot;Image&quot; + i.ToString() + &quot;.jpg&quot;;\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n      }\n \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n\n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsList.DataSource = CreateDataSource();\n            ItemsList.DataBind();\n         }\n\n      }\n \n      void Button_Click(Object sender, EventArgs e) \n      {\n \n         // Set the repeat direction based on the selected value of the\n         // DirectionList DropDownList control.\n         ItemsList.RepeatDirection = \n             (RepeatDirection)DirectionList.SelectedIndex;\n\n         // Set the repeat layout based on the selected value of the\n         // LayoutList DropDownList control.\n         ItemsList.RepeatLayout = (RepeatLayout)LayoutList.SelectedIndex;\n\n         // Set the number of columns to display based on the selected\n         // value of the ColumnsList DropDownList control.\n         ItemsList.RepeatColumns = ColumnsList.SelectedIndex;\n\n         // Show or hide the gridlines based on the value of the\n         // ShowBorderCheckBox property. Note that gridlines are displayed\n         // only if the RepeatLayout property is set to Table.\n         if ((ShowBorderCheckBox.Checked) \n             &amp;&amp; (ItemsList.RepeatLayout == RepeatLayout.Table)) \n         {\n            ItemsList.BorderWidth = Unit.Pixel(1);\n            ItemsList.GridLines = GridLines.Both;\n         }    \n         else  \n         {\n            ItemsList.BorderWidth = Unit.Pixel(0);\n            ItemsList.GridLines = GridLines.None;\n         }\n    \n      }    \n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Example&lt;/h3&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;0&quot;\n           BorderWidth=&quot;0&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: &lt;%# DataBinder.Eval(Container.DataItem, &quot;CurrencyValue&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:Image id=&quot;ProductImage&quot;\n                 AlternatingText=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;&#39;\n                 ImageUrl=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;ImageValue&quot;) %&gt;&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n \n      &lt;hr /&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;th&gt;\n\n               Repeat direction:\n\n            &lt;/th&gt;\n\n            &lt;th&gt;\n\n               Repeat layout:\n\n            &lt;/th&gt;\n\n            &lt;th&gt;\n\n               Repeat columns:\n\n            &lt;/th&gt;\n\n            &lt;th&gt;\n\n               &lt;asp:CheckBox id=&quot;ShowBorderCheckBox&quot;\n                    Text=&quot;Show border&quot;\n                    Checked=&quot;False&quot; \n                    runat=&quot;server&quot; /&gt;\n\n            &lt;/th&gt;\n\n         &lt;/tr&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;DirectionList&quot; \n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem&gt;Horizontal&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt;Vertical&lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;LayoutList&quot; \n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt;Table&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;Flow&lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;ColumnsList&quot; \n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot;&gt;0&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;1&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;2&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;3&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;4&lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem&gt;5&lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n\n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &amp;nbsp;\n\n            &lt;/td&gt;\n\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;     \n         \n      &lt;asp:LinkButton id=&quot;RefreshButton&quot; \n           Text=&quot;Refresh DataList&quot; \n           OnClick=&quot;Button_Click&quot; \n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_SelectedIndex\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_SelectedIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectedIndex</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the index of the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int SelectedIndex { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index of the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The specified value is less than <code>-1</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the SelectedIndex property to programmatically specify the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. You can also use this property to determine the index of the selected item.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The SelectedIndex property is zero based.  </p>\n</div>\n<p> To deselect an item, set the SelectedIndex property to <code>-1</code>.  </p>\n<p> The SelectedIndex property is stored in control state.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the SelectedIndex property to specify the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"DataListItemCommand#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Select Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataList control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;Item&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;Qty&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;Price&quot;, GetType(Double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 To 8 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = i * 2\n            dr(2) = 1.23 * (i + 1)\n \n            dt.Rows.Add(dr)\n         \n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n      \n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n\n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then \n         \n            ItemsList.DataSource = CreateDataSource()\n            ItemsList.DataBind()\n         \n         End If\n\n      End Sub\n\n      Sub Item_Command(sender As Object, e As DataListCommandEventArgs) \n        \n         &#39; Set the SelectedIndex property to select an item in the DataList.\n         ItemsList.SelectedIndex = e.Item.ItemIndex\n\n         &#39; Rebind the data source to the DataList to refresh the control.\n         ItemsList.DataSource = CreateDataSource()\n         ItemsList.DataBind()\n\n      End Sub\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Select Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Select&lt;/b&gt; to select an item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;           \n           OnItemCommand=&quot;Item_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;SelectedItemStyle BackColor=&quot;Yellow&quot;&gt;\n         &lt;/SelectedItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            &lt;asp:LinkButton id=&quot;SelectButton&quot; \n                 Text=&quot;Select&quot; \n                 CommandName=&quot;Select&quot;\n                 runat=&quot;server&quot;/&gt;\n\n            Item &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;SelectedItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:Label id=&quot;QtyLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:Label id=&quot;PriceLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/SelectedItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataListItemCommand#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Select Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataList control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(double)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = i * 2;\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n\n      }\n \n      void Page_Load(Object sender, EventArgs e) \n      {\n\n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsList.DataSource = CreateDataSource();\n            ItemsList.DataBind();\n         }\n\n      }\n\n      void Item_Command(Object sender, DataListCommandEventArgs e) \n      {\n        \n         // Set the SelectedIndex property to select an item in the DataList.\n         ItemsList.SelectedIndex = e.Item.ItemIndex;\n\n         // Rebind the data source to the DataList to refresh the control.\n         ItemsList.DataSource = CreateDataSource();\n         ItemsList.DataBind();\n\n      }\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Select Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Select&lt;/b&gt; to select an item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;           \n           OnItemCommand=&quot;Item_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;SelectedItemStyle BackColor=&quot;Yellow&quot;&gt;\n         &lt;/SelectedItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            &lt;asp:LinkButton id=&quot;SelectButton&quot; \n                 Text=&quot;Select&quot; \n                 CommandName=&quot;Select&quot;\n                 runat=&quot;server&quot;/&gt;\n\n            Item &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;SelectedItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:Label id=&quot;QtyLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:Label id=&quot;PriceLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/SelectedItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_SelectedItem\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_SelectedItem_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectedItem</div>        \r\n          </div>\r\n    \r\n            <p>Gets the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Web.UI.WebControls.DataListItem SelectedItem { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.datalistitem\" data-linktype=\"relative-path\">DataListItem</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.datalistitem\" data-linktype=\"relative-path\">DataListItem</a> that represents the item selected in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the SelectedItem property to get a <a class=\"xref\" href=\"system.web.ui.webcontrols.datalistitem\" data-linktype=\"relative-path\">DataListItem</a> object that represents the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. This object can then be used to access the properties of the selected item.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the SelectedItem property to display the contents of the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"Classic DataList.SelectedItem Example#1\">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList SelectedItem Example&lt;/title&gt;\n&lt;script language=&quot;C#&quot; runat=&quot;server&quot;&gt;\n\n      public DataTable Cart;\n      public DataView CartView;\n\n      void Page_Load(Object sender, EventArgs e) \n      {\n         if (Session[&quot;DL3_ShoppingCart&quot;] == null) \n         {\n            Cart = new DataTable();\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(string)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(string)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(string)));\n            Session[&quot;DL3_ShoppingCart&quot;] = Cart;\n\n            // First Load - Create some data.\n            for (int i=1; i&lt;=9; i++) \n            {\n               DataRow dr = Cart.NewRow();\n               dr[0] = ((i%2)+1).ToString();\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i+1)).ToString();\n               Cart.Rows.Add(dr);\n            }\n         }\n         else\n            Cart = (DataTable)Session[&quot;DL3_ShoppingCart&quot;];\n\n         CartView = new DataView(Cart);\n         CartView.Sort = &quot;Item&quot;;\n         if (!IsPostBack)\n            BindList();\n      }\n\n      void BindList() \n      {\n         DataList1.DataSource= CartView;\n         DataList1.DataBind();\n      }\n\n      void DataList_ItemCommand(Object sender, DataListCommandEventArgs e) \n      {\n         DataList1.SelectedIndex = e.Item.ItemIndex;\n         BindList();\n         Label4.Text = &quot;You selected: &quot;  + \n                       ((Label)DataList1.SelectedItem.FindControl(&quot;Label1&quot;)).Text;\n      }\n\n      void Button_Click(Object sender, EventArgs e)\n      { \n         if (DataList1.SelectedItem != null)\n         {\n            DataList1.SelectedItem.ForeColor = System.Drawing.Color.Red;\n         }\n      }\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList SelectedItem Example&lt;/h3&gt;\n      &lt;p&gt;&lt;/p&gt;\n       \n      &lt;asp:DataList id=&quot;DataList1&quot; runat=&quot;server&quot;\n           GridLines=&quot;Both&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;           \n           OnItemCommand=&quot;DataList_ItemCommand&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;SelectedItemStyle BackColor=&quot;lightgreen&quot;&gt;\n         &lt;/SelectedItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            &lt;asp:LinkButton id=&quot;button1&quot; \n                 Text=&quot;Select&quot; \n                 CommandName=&quot;select&quot;\n                 runat=&quot;server&quot;/&gt;\n            &lt;%# ((DataRowView)Container.DataItem)[&quot;Item&quot;]  %&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;SelectedItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;Label1&quot; \n                 Text=&#39;&lt;%# ((DataRowView)Container.DataItem)[&quot;Item&quot;] %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:Label id=&quot;Label2&quot; \n                 Text=&#39;&lt;%# ((DataRowView)Container.DataItem)[&quot;Qty&quot;] %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:Label id=&quot;Label3&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/SelectedItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Label id=&quot;Label4&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Button id=&quot;Button2&quot;\n           Text=&quot;Change Text to Red&quot; \n           OnClick=&quot;Button_Click&quot;\n           runat=&quot;server&quot;/&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic DataList.SelectedItem Example#1\">&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList SelectedItem Example&lt;/title&gt;\n&lt;script language=&quot;VB&quot; runat=&quot;server&quot;&gt;\n \n    Dim Cart As DataTable\n    Dim CartView As DataView\n\n    Sub Page_Load(sender As Object, e As EventArgs)\n        If Session(&quot;DL3_ShoppingCart&quot;) Is Nothing Then\n            Cart = New DataTable()\n            Cart.Columns.Add(New DataColumn(&quot;Qty&quot;, GetType(String)))\n            Cart.Columns.Add(New DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(New DataColumn(&quot;Price&quot;, GetType(String)))\n            Session(&quot;DL3_ShoppingCart&quot;) = Cart\n            \n            &#39; First Load - Create some data.\n            Dim i As Integer\n            For i = 1 To 9\n                Dim dr As DataRow = Cart.NewRow()\n                dr(0) =(i Mod 2 + 1).ToString()\n                dr(1) = &quot;Item &quot; &amp; i.ToString()\n                dr(2) =(1.23 *(i + 1)).ToString()\n                Cart.Rows.Add(dr)\n            Next i\n        Else\n            Cart = CType(Session(&quot;DL3_ShoppingCart&quot;), DataTable)\n        End If \n        CartView = New DataView(Cart)\n        CartView.Sort = &quot;Item&quot;\n        If Not IsPostBack Then\n            BindList()\n        End If\n    End Sub &#39;Page_Load\n     \n    Sub BindList()\n        DataList1.DataSource = CartView\n        DataList1.DataBind()\n    End Sub &#39;BindList\n\n    Sub DataList_ItemCommand(sender As Object, e As DataListCommandEventArgs)\n        DataList1.SelectedIndex = e.Item.ItemIndex\n        BindList()\n        Label4.Text = &quot;You selected: &quot; &amp; CType(DataList1.SelectedItem.FindControl(&quot;Label1&quot;), Label).Text\n    End Sub &#39;DataList_ItemCommand\n\n    Sub Button_Click(sender As Object, e As EventArgs)\n        If Not (DataList1.SelectedItem Is Nothing) Then\n            DataList1.SelectedItem.ForeColor = System.Drawing.Color.Red\n        End If\n    End Sub &#39;Button_Click\n\n&lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList SelectedItem Example&lt;/h3&gt;\n      &lt;p&gt;&lt;/p&gt;\n       \n      &lt;asp:DataList id=&quot;DataList1&quot; runat=&quot;server&quot;\n           GridLines=&quot;Both&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;           \n           OnItemCommand=&quot;DataList_ItemCommand&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;SelectedItemStyle BackColor=&quot;lightgreen&quot;&gt;\n         &lt;/SelectedItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            &lt;asp:LinkButton id=&quot;button1&quot; \n                 Text=&quot;Select&quot; \n                 CommandName=&quot;select&quot;\n                 runat=&quot;server&quot;/&gt;\n            &lt;%# (CType(Container.DataItem, DataRowView))(&quot;Item&quot;)%&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;SelectedItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;Label1&quot; \n                 Text=&#39;&lt;%# (CType(Container.DataItem, DataRowView))(&quot;Item&quot;)%&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:Label id=&quot;Label2&quot; \n                 Text=&#39;&lt;%# (CType(Container.DataItem, DataRowView))(&quot;Qty&quot;)%&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:Label id=&quot;Label3&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;)%&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/SelectedItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Label id=&quot;Label4&quot;\n           runat=&quot;server&quot;/&gt;\n\n      &lt;br /&gt;&lt;br /&gt;\n\n      &lt;asp:Button id=&quot;Button2&quot;\n           Text=&quot;Change Text to Red&quot; \n           OnClick=&quot;Button_Click&quot;\n           runat=&quot;server&quot;/&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_SelectedItemStyle\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_SelectedItemStyle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectedItemStyle</div>        \r\n          </div>\r\n    \r\n            <p>Gets the style properties for the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Web.UI.WebControls.TableItemStyle SelectedItemStyle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a> object that contains the style properties for the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. The default value is an empty <a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this property to provide a custom style for the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. Common style attributes that can be adjusted include foreground color, background color, font, and content alignment within the cell. Providing a different style enhances the appearance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<p> Item style properties in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control are inherited from one item style property to another through a hierarchy. Item style properties set lower in the hierarchy are inherited by item style properties higher in the hierarchy. For example, if you specify a red font for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_ItemStyle_\" data-linktype=\"relative-path\">ItemStyle</a> property, all other item style properties in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control will also have a red font. This allows you to provide a common appearance for the control by setting a single item style property. You can override the inherited style settings for an item style property that is higher in the hierarchy by setting its style properties. For example, you can specify a blue font for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_AlternatingItemStyle_\" data-linktype=\"relative-path\">AlternatingItemStyle</a> property, overriding the red font specified in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_ItemStyle_\" data-linktype=\"relative-path\">ItemStyle</a> property. The following table lists the hierarchy order from highest to lowest.  </p>\n<table>\n<thead>\n<tr>\n<th>Precedence</th>\n<th>Style Property</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_EditItemStyle_\" data-linktype=\"relative-path\">EditItemStyle</a></td>\n</tr>\n<tr>\n<td>2</td>\n<td>SelectedItemStyle</td>\n</tr>\n<tr>\n<td>3</td>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_AlternatingItemStyle_\" data-linktype=\"relative-path\">AlternatingItemStyle</a></td>\n</tr>\n<tr>\n<td>4</td>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_ItemStyle_\" data-linktype=\"relative-path\">ItemStyle</a></td>\n</tr>\n<tr>\n<td>5</td>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.webcontrol#System_Web_UI_WebControls_WebControl_ControlStyle_\" data-linktype=\"relative-path\">ControlStyle</a></td>\n</tr>\n</tbody>\n</table>\n<p> To specify a custom style for the selected item, place the <code>&lt;SelectedItemStyle&gt;</code> tags between the opening and closing tags of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. You can then list the style attributes within the opening <code>&lt;SelectedItemStyle&gt;</code> tag.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the SelectedItemStyle property to specify a custom background color for the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"DataListItemCommand#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Select Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataList control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;Item&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;Qty&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;Price&quot;, GetType(Double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 To 8 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = i * 2\n            dr(2) = 1.23 * (i + 1)\n \n            dt.Rows.Add(dr)\n         \n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n      \n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n\n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then \n         \n            ItemsList.DataSource = CreateDataSource()\n            ItemsList.DataBind()\n         \n         End If\n\n      End Sub\n\n      Sub Item_Command(sender As Object, e As DataListCommandEventArgs) \n        \n         &#39; Set the SelectedIndex property to select an item in the DataList.\n         ItemsList.SelectedIndex = e.Item.ItemIndex\n\n         &#39; Rebind the data source to the DataList to refresh the control.\n         ItemsList.DataSource = CreateDataSource()\n         ItemsList.DataBind()\n\n      End Sub\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Select Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Select&lt;/b&gt; to select an item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;           \n           OnItemCommand=&quot;Item_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;SelectedItemStyle BackColor=&quot;Yellow&quot;&gt;\n         &lt;/SelectedItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            &lt;asp:LinkButton id=&quot;SelectButton&quot; \n                 Text=&quot;Select&quot; \n                 CommandName=&quot;Select&quot;\n                 runat=&quot;server&quot;/&gt;\n\n            Item &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;SelectedItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:Label id=&quot;QtyLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:Label id=&quot;PriceLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/SelectedItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataListItemCommand#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Select Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataList control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(double)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = i * 2;\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n\n      }\n \n      void Page_Load(Object sender, EventArgs e) \n      {\n\n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsList.DataSource = CreateDataSource();\n            ItemsList.DataBind();\n         }\n\n      }\n\n      void Item_Command(Object sender, DataListCommandEventArgs e) \n      {\n        \n         // Set the SelectedIndex property to select an item in the DataList.\n         ItemsList.SelectedIndex = e.Item.ItemIndex;\n\n         // Rebind the data source to the DataList to refresh the control.\n         ItemsList.DataSource = CreateDataSource();\n         ItemsList.DataBind();\n\n      }\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Select Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Select&lt;/b&gt; to select an item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;           \n           OnItemCommand=&quot;Item_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;SelectedItemStyle BackColor=&quot;Yellow&quot;&gt;\n         &lt;/SelectedItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            &lt;asp:LinkButton id=&quot;SelectButton&quot; \n                 Text=&quot;Select&quot; \n                 CommandName=&quot;Select&quot;\n                 runat=&quot;server&quot;/&gt;\n\n            Item &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;SelectedItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:Label id=&quot;QtyLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:Label id=&quot;PriceLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/SelectedItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_SelectedItemTemplate\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_SelectedItemTemplate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectedItemTemplate</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the template for the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Web.UI.ITemplate SelectedItemTemplate { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.itemplate\" data-linktype=\"relative-path\">ITemplate</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.itemplate\" data-linktype=\"relative-path\">ITemplate</a> that contains the template for the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. The default value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the SelectedItemTemplate property to control the contents of the selected item. The appearance of the selected item is controlled by the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_SelectedItemStyle_\" data-linktype=\"relative-path\">SelectedItemStyle</a> property.  </p>\n<p> To specify a template for the selected item, place the <code>&lt;SelectedItemTemplate&gt;</code> tags between the opening and closing tags of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. You can then list the contents of the template between the opening and closing <code>&lt;SelectedItemTemplate&gt;</code> tags.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see <a href=\"../Topic/Securing%20Standard%20Controls.md\" data-linktype=\"relative-path\">Securing Standard Controls</a>, <a href=\"../Topic/How%20to:%20Protect%20Against%20Script%20Exploits%20in%20a%20Web%20Application%20by%20Applying%20HTML%20Encoding%20to%20Strings.md\" data-linktype=\"relative-path\">How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings</a>, and <a href=\"../Topic/Validating%20User%20Input%20in%20ASP.NET%20Web%20Pages.md\" data-linktype=\"relative-path\">Validating User Input in ASP.NET Web Pages</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the SelectedItemTemplate property to control the contents of the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"DataListItemCommand#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Select Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataList control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;Item&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;Qty&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;Price&quot;, GetType(Double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 To 8 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = i * 2\n            dr(2) = 1.23 * (i + 1)\n \n            dt.Rows.Add(dr)\n         \n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n      \n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n\n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then \n         \n            ItemsList.DataSource = CreateDataSource()\n            ItemsList.DataBind()\n         \n         End If\n\n      End Sub\n\n      Sub Item_Command(sender As Object, e As DataListCommandEventArgs) \n        \n         &#39; Set the SelectedIndex property to select an item in the DataList.\n         ItemsList.SelectedIndex = e.Item.ItemIndex\n\n         &#39; Rebind the data source to the DataList to refresh the control.\n         ItemsList.DataSource = CreateDataSource()\n         ItemsList.DataBind()\n\n      End Sub\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Select Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Select&lt;/b&gt; to select an item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;           \n           OnItemCommand=&quot;Item_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;SelectedItemStyle BackColor=&quot;Yellow&quot;&gt;\n         &lt;/SelectedItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            &lt;asp:LinkButton id=&quot;SelectButton&quot; \n                 Text=&quot;Select&quot; \n                 CommandName=&quot;Select&quot;\n                 runat=&quot;server&quot;/&gt;\n\n            Item &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;SelectedItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:Label id=&quot;QtyLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:Label id=&quot;PriceLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/SelectedItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataListItemCommand#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Select Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataList control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(double)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = i * 2;\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n\n      }\n \n      void Page_Load(Object sender, EventArgs e) \n      {\n\n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsList.DataSource = CreateDataSource();\n            ItemsList.DataBind();\n         }\n\n      }\n\n      void Item_Command(Object sender, DataListCommandEventArgs e) \n      {\n        \n         // Set the SelectedIndex property to select an item in the DataList.\n         ItemsList.SelectedIndex = e.Item.ItemIndex;\n\n         // Rebind the data source to the DataList to refresh the control.\n         ItemsList.DataSource = CreateDataSource();\n         ItemsList.DataBind();\n\n      }\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Select Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Select&lt;/b&gt; to select an item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;           \n           OnItemCommand=&quot;Item_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;SelectedItemStyle BackColor=&quot;Yellow&quot;&gt;\n         &lt;/SelectedItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            &lt;asp:LinkButton id=&quot;SelectButton&quot; \n                 Text=&quot;Select&quot; \n                 CommandName=&quot;Select&quot;\n                 runat=&quot;server&quot;/&gt;\n\n            Item &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;SelectedItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:Label id=&quot;QtyLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:Label id=&quot;PriceLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/SelectedItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_SelectedValue\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_SelectedValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectedValue</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the key field for the selected data list item.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object SelectedValue { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The key field value for the selected data list item. The default is <code>null</code>, which indicates that no data list item is currently selected.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Web.UI.WebControls.BaseDataList.DataKeyField*</span> property has not been set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_SeparatorStyle\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_SeparatorStyle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SeparatorStyle</div>        \r\n          </div>\r\n    \r\n            <p>Gets the style properties of the separator between each item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Web.UI.WebControls.TableItemStyle SeparatorStyle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a> object that contains the style properties of the separator between each item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. The default value is an empty <a class=\"xref\" href=\"system.web.ui.webcontrols.tableitemstyle\" data-linktype=\"relative-path\">TableItemStyle</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the SeparatorStyle property to provide a custom style for the separator between each item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. The separator allows you to place an element with custom content between each item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. Common style attributes that can be adjusted include foreground color, background color, font, and content alignment within the cell. Providing a different style enhances the appearance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<p> To specify a custom style for the separator, place the <code>&lt;SeparatorStyle&gt;</code> tags between the opening and closing tags of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. You can then list the style attributes within the opening <code>&lt;SeparatorStyle&gt;</code> tag.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the SeparatorStyle property to specify a custom background color for the separator between each item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"DataListSeparatorStyle#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataList control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n         dt.Columns.Add(new DataColumn(&quot;ImageValue&quot;, typeof(String)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Description for item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n            dr[3] = &quot;Image&quot; + i.ToString() + &quot;.jpg&quot;;\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n      }\n  \n      void Page_Load(Object sender, EventArgs e) \n      {\n\n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsList.DataSource = CreateDataSource();\n            ItemsList.DataBind();\n         }\n\n      }\n\n      void Selection_Change(Object sender, EventArgs e)\n      {\n\n         // Set the background color for the separator section of\n         // the DataList control.\n         ItemsList.SeparatorStyle.BackColor = \n             System.Drawing.Color.FromName(ItemList.SelectedItem.Value);\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList SeparatorTemplate and SeparatorStyle Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList SeparatorTemplate and SeparatorStyle Example&lt;/h3&gt;\n\n      Select a background color for the separator between \n      items in the DataList.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;3&quot;\n           ShowFooter=&quot;True&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;ItemStyle BackColor=&quot;Silver&quot;&gt;\n         &lt;/ItemStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;DarkGray&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;SeparatorStyle BackColor=&quot;White&quot;&gt;\n         &lt;/SeparatorStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: &lt;%# DataBinder.Eval(Container.DataItem, &quot;CurrencyValue&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:Image id=&quot;ProductImage&quot;\n                 AlternatingText=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;&#39;\n                 ImageUrl=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;ImageValue&quot;) %&gt;&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n\n         &lt;SeparatorTemplate&gt;\n\n            &lt;asp:Image id=&quot;SeparatorImage&quot;\n                 GenerateEmptyAlternateText=&#39;true&#39; \n                 ImageUrl=&quot;SeparatorImage.jpg&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/SeparatorTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n\n      &lt;hr /&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               Separator BackColor:\n \n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;ItemList&quot;\n                    AutoPostBack=&quot;True&quot;\n                    OnSelectedIndexChanged=&quot;Selection_Change&quot;\n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot; Value=&quot;White&quot;&gt; White &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Silver&quot;&gt; Silver &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkGray&quot;&gt; Dark Gray &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Khaki&quot;&gt; Khaki &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkKhaki&quot;&gt; Dark Khaki &lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n \n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataListSeparatorStyle#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataList control.\n         Dim dt As DataTable = New DataTable()\n         dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n         dt.Columns.Add(New DataColumn(&quot;ImageValue&quot;, GetType(String)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 To 8 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Description for item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n            dr(3) = &quot;Image&quot; &amp; i.ToString() &amp; &quot;.jpg&quot;\n \n            dt.Rows.Add(dr)\n\n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n\n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n\n         &#39; Load sample data only once when, the page is first loaded.\n         If Not IsPostBack Then \n     \n            ItemsList.DataSource = CreateDataSource()\n            ItemsList.DataBind()\n         \n         End If\n\n      End Sub\n\n      Sub Selection_Change(sender As Object, e As EventArgs)\n\n         &#39; Set the background color for the separator section of\n         &#39; the DataList control.\n         ItemsList.SeparatorStyle.BackColor = _\n             System.Drawing.Color.FromName(ItemList.SelectedItem.Value)\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList SeparatorTemplate and SeparatorStyle Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList SeparatorTemplate and SeparatorStyle Example&lt;/h3&gt;\n\n      Select a background color for the separator between \n      items in the DataList.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;3&quot;\n           ShowFooter=&quot;True&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;ItemStyle BackColor=&quot;Silver&quot;&gt;\n         &lt;/ItemStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;DarkGray&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;SeparatorStyle BackColor=&quot;White&quot;&gt;\n         &lt;/SeparatorStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: &lt;%# DataBinder.Eval(Container.DataItem, &quot;CurrencyValue&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:Image id=&quot;ProductImage&quot;\n                 AlternatingText=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;&#39;\n                 ImageUrl=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;ImageValue&quot;) %&gt;&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n\n         &lt;SeparatorTemplate&gt;\n\n            &lt;asp:Image id=&quot;SeparatorImage&quot;\n                 GenerateEmptyAlternateText=&#39;true&#39; \n                 ImageUrl=&quot;SeparatorImage.jpg&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/SeparatorTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n\n      &lt;hr /&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               Separator BackColor:\n \n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;ItemList&quot;\n                    AutoPostBack=&quot;True&quot;\n                    OnSelectedIndexChanged=&quot;Selection_Change&quot;\n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot; Value=&quot;White&quot;&gt; White &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Silver&quot;&gt; Silver &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkGray&quot;&gt; Dark Gray &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Khaki&quot;&gt; Khaki &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkKhaki&quot;&gt; Dark Khaki &lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n \n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_SeparatorTemplate\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_SeparatorTemplate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SeparatorTemplate</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the template for the separator between the items of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Web.UI.ITemplate SeparatorTemplate { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.itemplate\" data-linktype=\"relative-path\">ITemplate</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.itemplate\" data-linktype=\"relative-path\">ITemplate</a> that contains the template for the separator between items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. The default value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the SeparatorTemplate property to control the contents of the separator between the items of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. The separator allows you to place an element with custom content between each item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. The appearance of the separator between the items of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control is controlled by the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_SeparatorStyle_\" data-linktype=\"relative-path\">SeparatorStyle</a> property.  </p>\n<p> To specify a template for the separator, place the <code>&lt;SeparatorTemplate&gt;</code> tags between the opening and closing tags of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. You can then list the contents of the template between the opening and closing <code>&lt;SeparatorTemplate&gt;</code> tags.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see <a href=\"../Topic/Securing%20Standard%20Controls.md\" data-linktype=\"relative-path\">Securing Standard Controls</a>, <a href=\"../Topic/How%20to:%20Protect%20Against%20Script%20Exploits%20in%20a%20Web%20Application%20by%20Applying%20HTML%20Encoding%20to%20Strings.md\" data-linktype=\"relative-path\">How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings</a>, and <a href=\"../Topic/Validating%20User%20Input%20in%20ASP.NET%20Web%20Pages.md\" data-linktype=\"relative-path\">Validating User Input in ASP.NET Web Pages</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the SeparatorTemplate property to control the contents of the separator between each item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"DataListSeparatorStyle#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataList control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n         dt.Columns.Add(new DataColumn(&quot;ImageValue&quot;, typeof(String)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Description for item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n            dr[3] = &quot;Image&quot; + i.ToString() + &quot;.jpg&quot;;\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n      }\n  \n      void Page_Load(Object sender, EventArgs e) \n      {\n\n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsList.DataSource = CreateDataSource();\n            ItemsList.DataBind();\n         }\n\n      }\n\n      void Selection_Change(Object sender, EventArgs e)\n      {\n\n         // Set the background color for the separator section of\n         // the DataList control.\n         ItemsList.SeparatorStyle.BackColor = \n             System.Drawing.Color.FromName(ItemList.SelectedItem.Value);\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList SeparatorTemplate and SeparatorStyle Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList SeparatorTemplate and SeparatorStyle Example&lt;/h3&gt;\n\n      Select a background color for the separator between \n      items in the DataList.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;3&quot;\n           ShowFooter=&quot;True&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;ItemStyle BackColor=&quot;Silver&quot;&gt;\n         &lt;/ItemStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;DarkGray&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;SeparatorStyle BackColor=&quot;White&quot;&gt;\n         &lt;/SeparatorStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: &lt;%# DataBinder.Eval(Container.DataItem, &quot;CurrencyValue&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:Image id=&quot;ProductImage&quot;\n                 AlternatingText=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;&#39;\n                 ImageUrl=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;ImageValue&quot;) %&gt;&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n\n         &lt;SeparatorTemplate&gt;\n\n            &lt;asp:Image id=&quot;SeparatorImage&quot;\n                 GenerateEmptyAlternateText=&#39;true&#39; \n                 ImageUrl=&quot;SeparatorImage.jpg&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/SeparatorTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n\n      &lt;hr /&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               Separator BackColor:\n \n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;ItemList&quot;\n                    AutoPostBack=&quot;True&quot;\n                    OnSelectedIndexChanged=&quot;Selection_Change&quot;\n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot; Value=&quot;White&quot;&gt; White &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Silver&quot;&gt; Silver &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkGray&quot;&gt; Dark Gray &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Khaki&quot;&gt; Khaki &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkKhaki&quot;&gt; Dark Khaki &lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n \n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataListSeparatorStyle#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataList control.\n         Dim dt As DataTable = New DataTable()\n         dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n         dt.Columns.Add(New DataColumn(&quot;ImageValue&quot;, GetType(String)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 To 8 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Description for item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n            dr(3) = &quot;Image&quot; &amp; i.ToString() &amp; &quot;.jpg&quot;\n \n            dt.Rows.Add(dr)\n\n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n\n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n\n         &#39; Load sample data only once when, the page is first loaded.\n         If Not IsPostBack Then \n     \n            ItemsList.DataSource = CreateDataSource()\n            ItemsList.DataBind()\n         \n         End If\n\n      End Sub\n\n      Sub Selection_Change(sender As Object, e As EventArgs)\n\n         &#39; Set the background color for the separator section of\n         &#39; the DataList control.\n         ItemsList.SeparatorStyle.BackColor = _\n             System.Drawing.Color.FromName(ItemList.SelectedItem.Value)\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList SeparatorTemplate and SeparatorStyle Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList SeparatorTemplate and SeparatorStyle Example&lt;/h3&gt;\n\n      Select a background color for the separator between \n      items in the DataList.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;3&quot;\n           ShowFooter=&quot;True&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;ItemStyle BackColor=&quot;Silver&quot;&gt;\n         &lt;/ItemStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;DarkGray&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;SeparatorStyle BackColor=&quot;White&quot;&gt;\n         &lt;/SeparatorStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: &lt;%# DataBinder.Eval(Container.DataItem, &quot;CurrencyValue&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:Image id=&quot;ProductImage&quot;\n                 AlternatingText=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;&#39;\n                 ImageUrl=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;ImageValue&quot;) %&gt;&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n\n         &lt;SeparatorTemplate&gt;\n\n            &lt;asp:Image id=&quot;SeparatorImage&quot;\n                 GenerateEmptyAlternateText=&#39;true&#39; \n                 ImageUrl=&quot;SeparatorImage.jpg&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/SeparatorTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n\n      &lt;hr /&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               Separator BackColor:\n \n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:DropDownList id=&quot;ItemList&quot;\n                    AutoPostBack=&quot;True&quot;\n                    OnSelectedIndexChanged=&quot;Selection_Change&quot;\n                    runat=&quot;server&quot;&gt;\n\n                  &lt;asp:ListItem Selected=&quot;True&quot; Value=&quot;White&quot;&gt; White &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Silver&quot;&gt; Silver &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkGray&quot;&gt; Dark Gray &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;Khaki&quot;&gt; Khaki &lt;/asp:ListItem&gt;\n                  &lt;asp:ListItem Value=&quot;DarkKhaki&quot;&gt; Dark Khaki &lt;/asp:ListItem&gt;\n\n               &lt;/asp:DropDownList&gt;\n \n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_ShowFooter\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_ShowFooter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ShowFooter</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the footer section is displayed in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool ShowFooter { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the footer section is displayed; otherwise, <code>false</code>. The default value is <code>true</code>, however this property is only examined when the <span class=\"xref\">stem.Web.UI.WebControls.DataList.FooterTemplate*</span> property is not <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the ShowFooter property to specify whether the footer section is displayed in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<p> You can control the appearance of the footer section by setting the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_FooterStyle_\" data-linktype=\"relative-path\">FooterStyle</a> property. The contents of the footer section are controlled by the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_FooterTemplate_\" data-linktype=\"relative-path\">FooterTemplate</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the ShowFooter property to display the footer section in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"DataListShowHeader#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataList control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n         dt.Columns.Add(new DataColumn(&quot;ImageValue&quot;, typeof(String)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Description for item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n            dr[3] = &quot;Image&quot; + i.ToString() + &quot;.jpg&quot;;\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n      }\n  \n      void Page_Load(Object sender, EventArgs e) \n      {\n\n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsList.DataSource = CreateDataSource();\n            ItemsList.DataBind();\n         }\n\n      }\n\n      void Selection_Change(Object sender, EventArgs e)\n      {\n\n         // Set whether to display the header and footer sections\n         // of the DataList control.\n         ItemsList.ShowHeader = ShowHeaderCheckBox.Checked;\n         ItemsList.ShowFooter = ShowFooterCheckBox.Checked;\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList ShowHeader and ShowFooter Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList ShowHeader and ShowFooter Example&lt;/h3&gt;\n\n      Select whether to show or hide the header and footer sections.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;3&quot;\n           ShowHeader=&quot;True&quot;\n           ShowFooter=&quot;True&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/FooterStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n\n         &lt;FooterTemplate&gt;\n\n            &lt;asp:Image id=&quot;FooterImage&quot;\n                 GenerateEmptyAlternateText=&#39;true&#39;\n                 ImageUrl=&#39;FooterImage.jpg&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/FooterTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: &lt;%# DataBinder.Eval(Container.DataItem, &quot;CurrencyValue&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:Image id=&quot;ProductImage&quot;\n                 AlternateText=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;&#39;\n                 ImageUrl=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;ImageValue&quot;) %&gt;&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n\n&lt;hr /&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:CheckBox id=&quot;ShowHeaderCheckBox&quot;\n                    Text=&quot;Show header section&quot;\n                    Checked=&quot;True&quot;\n                    AutoPostBack=&quot;True&quot;\n                    OnCheckedChanged=&quot;Selection_Change&quot;\n                    runat=&quot;server&quot;/&gt;\n \n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:CheckBox id=&quot;ShowFooterCheckBox&quot;\n                    Text=&quot;Show footer section&quot;\n                    Checked=&quot;True&quot;\n                    AutoPostBack=&quot;True&quot;\n                    OnCheckedChanged=&quot;Selection_Change&quot;\n                    runat=&quot;server&quot;/&gt;\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataListShowHeader#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataList control.\n         Dim dt As DataTable = New DataTable()\n         dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n         dt.Columns.Add(New DataColumn(&quot;ImageValue&quot;, GetType(String)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 To 8 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Description for item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n            dr(3) = &quot;Image&quot; &amp; i.ToString() &amp; &quot;.jpg&quot;\n \n            dt.Rows.Add(dr)\n\n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n\n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n\n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then \n     \n            ItemsList.DataSource = CreateDataSource()\n            ItemsList.DataBind()\n         \n         End If\n\n      End Sub\n\n      Sub Selection_Change(sender As Object, e As EventArgs)\n\n         &#39; Set whether to display the header and footer sections\n         &#39; of the DataList control.\n         ItemsList.ShowHeader = ShowHeaderCheckBox.Checked\n         ItemsList.ShowFooter = ShowFooterCheckBox.Checked\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList ShowHeader and ShowFooter Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList ShowHeader and ShowFooter Example&lt;/h3&gt;\n\n      Select whether to show or hide the header and footer sections.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;3&quot;\n           ShowHeader=&quot;True&quot;\n           ShowFooter=&quot;True&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/FooterStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n\n         &lt;FooterTemplate&gt;\n\n            &lt;asp:Image id=&quot;FooterImage&quot;\n                 GenerateEmptyAlternateText=&#39;true&#39;\n                 ImageUrl=&#39;FooterImage.jpg&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/FooterTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: &lt;%# DataBinder.Eval(Container.DataItem, &quot;CurrencyValue&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:Image id=&quot;ProductImage&quot;\n                 AlternateText=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;&#39;\n                 ImageUrl=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;ImageValue&quot;) %&gt;&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n\n&lt;hr /&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:CheckBox id=&quot;ShowHeaderCheckBox&quot;\n                    Text=&quot;Show header section&quot;\n                    Checked=&quot;True&quot;\n                    AutoPostBack=&quot;True&quot;\n                    OnCheckedChanged=&quot;Selection_Change&quot;\n                    runat=&quot;server&quot;/&gt;\n \n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:CheckBox id=&quot;ShowFooterCheckBox&quot;\n                    Text=&quot;Show footer section&quot;\n                    Checked=&quot;True&quot;\n                    AutoPostBack=&quot;True&quot;\n                    OnCheckedChanged=&quot;Selection_Change&quot;\n                    runat=&quot;server&quot;/&gt;\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_ShowHeader\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_ShowHeader_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ShowHeader</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the header section is displayed in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool ShowHeader { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the header is displayed; otherwise, <code>false</code>. The default value is <code>true</code>, however this property is only examined when the <span class=\"xref\">stem.Web.UI.WebControls.DataList.HeaderTemplate*</span> property is not <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the ShowHeader property to specify whether the header section is displayed in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<p> You can control appearance of the header section by setting the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_HeaderStyle_\" data-linktype=\"relative-path\">HeaderStyle</a> property. The contents of the header section are controlled by the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_HeaderTemplate_\" data-linktype=\"relative-path\">HeaderTemplate</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the ShowHeader property to display the header section in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"DataListShowHeader#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataList control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n         dt.Columns.Add(new DataColumn(&quot;ImageValue&quot;, typeof(String)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Description for item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n            dr[3] = &quot;Image&quot; + i.ToString() + &quot;.jpg&quot;;\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n      }\n  \n      void Page_Load(Object sender, EventArgs e) \n      {\n\n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsList.DataSource = CreateDataSource();\n            ItemsList.DataBind();\n         }\n\n      }\n\n      void Selection_Change(Object sender, EventArgs e)\n      {\n\n         // Set whether to display the header and footer sections\n         // of the DataList control.\n         ItemsList.ShowHeader = ShowHeaderCheckBox.Checked;\n         ItemsList.ShowFooter = ShowFooterCheckBox.Checked;\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList ShowHeader and ShowFooter Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList ShowHeader and ShowFooter Example&lt;/h3&gt;\n\n      Select whether to show or hide the header and footer sections.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;3&quot;\n           ShowHeader=&quot;True&quot;\n           ShowFooter=&quot;True&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/FooterStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n\n         &lt;FooterTemplate&gt;\n\n            &lt;asp:Image id=&quot;FooterImage&quot;\n                 GenerateEmptyAlternateText=&#39;true&#39;\n                 ImageUrl=&#39;FooterImage.jpg&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/FooterTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: &lt;%# DataBinder.Eval(Container.DataItem, &quot;CurrencyValue&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:Image id=&quot;ProductImage&quot;\n                 AlternateText=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;&#39;\n                 ImageUrl=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;ImageValue&quot;) %&gt;&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n\n&lt;hr /&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:CheckBox id=&quot;ShowHeaderCheckBox&quot;\n                    Text=&quot;Show header section&quot;\n                    Checked=&quot;True&quot;\n                    AutoPostBack=&quot;True&quot;\n                    OnCheckedChanged=&quot;Selection_Change&quot;\n                    runat=&quot;server&quot;/&gt;\n \n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:CheckBox id=&quot;ShowFooterCheckBox&quot;\n                    Text=&quot;Show footer section&quot;\n                    Checked=&quot;True&quot;\n                    AutoPostBack=&quot;True&quot;\n                    OnCheckedChanged=&quot;Selection_Change&quot;\n                    runat=&quot;server&quot;/&gt;\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataListShowHeader#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataList control.\n         Dim dt As DataTable = New DataTable()\n         dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n         dt.Columns.Add(New DataColumn(&quot;ImageValue&quot;, GetType(String)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 To 8 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Description for item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n            dr(3) = &quot;Image&quot; &amp; i.ToString() &amp; &quot;.jpg&quot;\n \n            dt.Rows.Add(dr)\n\n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n\n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n\n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then \n     \n            ItemsList.DataSource = CreateDataSource()\n            ItemsList.DataBind()\n         \n         End If\n\n      End Sub\n\n      Sub Selection_Change(sender As Object, e As EventArgs)\n\n         &#39; Set whether to display the header and footer sections\n         &#39; of the DataList control.\n         ItemsList.ShowHeader = ShowHeaderCheckBox.Checked\n         ItemsList.ShowFooter = ShowFooterCheckBox.Checked\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList ShowHeader and ShowFooter Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList ShowHeader and ShowFooter Example&lt;/h3&gt;\n\n      Select whether to show or hide the header and footer sections.\n\n      &lt;br /&gt;&lt;br /&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;3&quot;\n           ShowHeader=&quot;True&quot;\n           ShowFooter=&quot;True&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;FooterStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/FooterStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n\n         &lt;FooterTemplate&gt;\n\n            &lt;asp:Image id=&quot;FooterImage&quot;\n                 GenerateEmptyAlternateText=&#39;true&#39;\n                 ImageUrl=&#39;FooterImage.jpg&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/FooterTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: &lt;%# DataBinder.Eval(Container.DataItem, &quot;CurrencyValue&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:Image id=&quot;ProductImage&quot;\n                 AlternateText=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;&#39;\n                 ImageUrl=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;ImageValue&quot;) %&gt;&#39;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n\n&lt;hr /&gt;\n\n      &lt;table cellpadding=&quot;5&quot;&gt;\n\n         &lt;tr&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:CheckBox id=&quot;ShowHeaderCheckBox&quot;\n                    Text=&quot;Show header section&quot;\n                    Checked=&quot;True&quot;\n                    AutoPostBack=&quot;True&quot;\n                    OnCheckedChanged=&quot;Selection_Change&quot;\n                    runat=&quot;server&quot;/&gt;\n \n            &lt;/td&gt;\n\n            &lt;td&gt;\n\n               &lt;asp:CheckBox id=&quot;ShowFooterCheckBox&quot;\n                    Text=&quot;Show footer section&quot;\n                    Checked=&quot;True&quot;\n                    AutoPostBack=&quot;True&quot;\n                    OnCheckedChanged=&quot;Selection_Change&quot;\n                    runat=&quot;server&quot;/&gt;\n\n            &lt;/td&gt;\n\n         &lt;/tr&gt;\n\n      &lt;/table&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_TagKey\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_TagKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TagKey</div>        \r\n          </div>\r\n    \r\n            <p>Gets the HTML tag that is used to render the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override System.Web.UI.HtmlTextWriterTag TagKey { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.htmltextwritertag\" data-linktype=\"relative-path\">HtmlTextWriterTag</a></div>\r\n                  </div>\r\n                  <p>Returns the <a class=\"xref\" href=\"system.web.ui.htmltextwritertag\" data-linktype=\"relative-path\">HtmlTextWriterTag</a> tag if the <span class=\"xref\">stem.Web.UI.WebControls.DataList.RepeatLayout*</span> is set to <a class=\"xref\" href=\"system.web.ui.webcontrols.repeatlayout\" data-linktype=\"relative-path\">RepeatLayout</a>; otherwise, returns the <a class=\"xref\" href=\"system.web.ui.htmltextwritertag\" data-linktype=\"relative-path\">HtmlTextWriterTag</a> tag. The default is <a class=\"xref\" href=\"system.web.ui.webcontrols.repeatlayout\" data-linktype=\"relative-path\">RepeatLayout</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the TagKey property to determine the <a class=\"xref\" href=\"system.web.ui.htmltextwritertag\" data-linktype=\"relative-path\">HtmlTextWriterTag</a> value that is associated with a <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. The TagKey property is used primarily by control developers.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_CreateControlHierarchy_System_Boolean_\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_CreateControlHierarchy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateControlHierarchy(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Creates the control hierarchy that is used to render the data list control, with or without the specified data source.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void CreateControlHierarchy (bool useDataSource);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>useDataSource</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to use the control&#39;s data source; <code>false</code> to indicate that the control is being recreated from view state and should not be data-bound.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The CreateControlHierarchy method is used primarily by control developers when deriving a custom implementation from the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<p> The CreateControlHierarchy method uses the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_CreateItem_\" data-linktype=\"relative-path\">CreateItem</a> and <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_InitializeItem_\" data-linktype=\"relative-path\">InitializeItem</a> methods to create <a class=\"xref\" href=\"system.web.ui.webcontrols.datalistitem\" data-linktype=\"relative-path\">DataListItem</a> controls that represent the header, footer, separator, and data-bound items contained in the data list. You can access the data-bound items for the data list through the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_Items_\" data-linktype=\"relative-path\">Items</a> collection. You can access all item types, including the header, footer, and separator items, through the <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_Controls_\" data-linktype=\"relative-path\">Controls</a> collection.  </p>\n<p> Override the CreateControlHierarchy method to customize how <a class=\"xref\" href=\"system.web.ui.webcontrols.datalistitem\" data-linktype=\"relative-path\">DataListItem</a> controls are created or added to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. Override the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_InitializeItem_\" data-linktype=\"relative-path\">InitializeItem</a> method to customize templates for a <a class=\"xref\" href=\"system.web.ui.webcontrols.datalistitem\" data-linktype=\"relative-path\">DataListItem</a> control.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_CreateControlStyle\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_CreateControlStyle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateControlStyle()</div>        \r\n          </div>\r\n    \r\n            <p>Creates the default style object that is used internally by the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control to implement all style related properties.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override System.Web.UI.WebControls.Style CreateControlStyle ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.style\" data-linktype=\"relative-path\">Style</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.tablestyle\" data-linktype=\"relative-path\">TableStyle</a> that contains the default style properties for the control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The CreateControlStyle method is used primarily by control developers in deriving a custom implementation from the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to override the CreateControlStyle method in a custom server control so that it always displays horizontal grid lines with no cell spacing in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<pre><code class=\"lang-vb\" name=\"CustomDataListCreateControlStyle#1\">&lt;%@ Register TagPrefix=&quot;aspSample&quot; Namespace=&quot;Samples.AspNet.VB.Controls&quot; Assembly=&quot;Samples.AspNet.VB&quot; %&gt;\n&lt;%@ Page language=&quot;vb&quot; %&gt;\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head&gt;\n    &lt;title&gt;Custom DataList - CreateControlStyle - VB Example&lt;/title&gt;\n    &lt;script runat=&quot;server&quot;&gt;\n      Private Sub Page_Load(sender As Object, e As EventArgs)\n\n        &#39; Create sample data for the DataList control.\n        Dim dt As System.Data.DataTable = New System.Data.DataTable()\n        Dim dr As System.Data.DataRow\n\n        &#39; Create a new column named Column1, of type String.\n        Dim col As New System.Data.DataColumn(&quot;Column1&quot;, GetType(String))\n        &#39; Add the column to the DataTable.\n        dt.Columns.Add(col)\n\n        dr = dt.NewRow()\n        dr(0) = &quot;Hello&quot;\n        dt.Rows.Add(dr)\n\n        dr = dt.NewRow()\n        dr(0) = &quot;DataList&quot;\n        dt.Rows.Add(dr)\n\n        dr = dt.NewRow()\n        dr(0) = &quot;World&quot;\n        dt.Rows.Add(dr)\n\n        &#39; Show the DataTable values in the DataList.\n        DataList1.DataSource = dt\n        DataList1.DataBind()\n\n      End Sub &#39; Page_Load\n    &lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;form id=&quot;Form1&quot; method=&quot;post&quot; runat=&quot;server&quot;&gt;\n      &lt;h3&gt;Custom DataList - CreateControlStyle - VB Example&lt;/h3&gt;\n\n      &lt;aspSample:CustomDataListCreateControlStyle id=&quot;DataList1&quot; runat=&quot;server&quot; BorderColor=&quot;#999999&quot; BorderStyle=&quot;None&quot; BackColor=&quot;White&quot; CellPadding=&quot;3&quot; GridLines=&quot;Vertical&quot; BorderWidth=&quot;1px&quot; Width=&quot;100px&quot;&gt;\n\n        &lt;HeaderStyle Font-Bold=&quot;True&quot; ForeColor=&quot;White&quot; BackColor=&quot;#000084&quot; /&gt;\n        &lt;HeaderTemplate&gt;\n          &lt;asp:Label id=&quot;Label1&quot; runat=&quot;server&quot;&gt;Column1&lt;/asp:Label&gt;\n        &lt;/HeaderTemplate&gt;\n\n        &lt;ItemStyle ForeColor=&quot;Black&quot; BackColor=&quot;#EEEEEE&quot; /&gt;\n        &lt;ItemTemplate&gt;\n          &lt;asp:Label id=&quot;Label2&quot; runat=&quot;server&quot;&gt;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Column1&quot;) %&gt;&lt;/asp:Label&gt;\n        &lt;/ItemTemplate&gt;\n\n        &lt;AlternatingItemStyle BackColor=&quot;#DCDCDC&quot; /&gt;\n        &lt;AlternatingItemTemplate&gt;\n          &lt;asp:Label id=&quot;Label3&quot; runat=&quot;server&quot;&gt;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Column1&quot;) %&gt;&lt;/asp:Label&gt;\n        &lt;/AlternatingItemTemplate&gt;\n\n      &lt;/aspSample:CustomDataListCreateControlStyle&gt;\n\n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"CustomDataListCreateControlStyle#1\">&lt;%@ Register TagPrefix=&quot;aspSample&quot; Namespace=&quot;Samples.AspNet.CS.Controls&quot; Assembly=&quot;Samples.AspNet.CS&quot; %&gt;\n&lt;%@ Page language=&quot;c#&quot; %&gt;\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head&gt;\n    &lt;title&gt;Custom DataList - CreateControlStyle - C# Example&lt;/title&gt;\n    &lt;script runat=&quot;server&quot;&gt;\n      private void Page_Load(object sender, System.EventArgs e)\n      {\n        // Create sample data for the DataList control.\n        System.Data.DataTable dt = new System.Data.DataTable();\n        System.Data.DataRow dr;\n        dt.Columns.Add(new System.Data.DataColumn(&quot;Column1&quot;, typeof(String)));\n\n        dr = dt.NewRow();\n        dr[0] = &quot;Hello&quot;;\n        dt.Rows.Add(dr);\n\n        dr = dt.NewRow();\n        dr[0] = &quot;DataList&quot;;\n        dt.Rows.Add(dr);\n\n        dr = dt.NewRow();\n        dr[0] = &quot;World&quot;;\n        dt.Rows.Add(dr);\n\n        // Show the DataTable values in the DataList.\n        DataList1.DataSource = dt;\n        DataList1.DataBind();\n    }\n    &lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;form id=&quot;Form1&quot; method=&quot;post&quot; runat=&quot;server&quot;&gt;\n      &lt;h3&gt;Custom DataList - CreateControlStyle - C# Example&lt;/h3&gt;\n\n      &lt;aspSample:CustomDataListCreateControlStyle id=&quot;DataList1&quot; runat=&quot;server&quot; BorderColor=&quot;#999999&quot; BorderStyle=&quot;None&quot; BackColor=&quot;White&quot; CellPadding=&quot;3&quot; GridLines=&quot;Vertical&quot; BorderWidth=&quot;1px&quot; Width=&quot;100px&quot;&gt;\n\n        &lt;HeaderStyle Font-Bold=&quot;True&quot; ForeColor=&quot;White&quot; BackColor=&quot;#000084&quot; /&gt;\n        &lt;HeaderTemplate&gt;\n          &lt;asp:Label id=&quot;Label1&quot; runat=&quot;server&quot;&gt;Column1&lt;/asp:Label&gt;\n        &lt;/HeaderTemplate&gt;\n\n        &lt;ItemStyle ForeColor=&quot;Black&quot; BackColor=&quot;#EEEEEE&quot; /&gt;\n        &lt;ItemTemplate&gt;\n          &lt;asp:Label id=&quot;Label2&quot; runat=&quot;server&quot;&gt;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Column1&quot;) %&gt;&lt;/asp:Label&gt;\n        &lt;/ItemTemplate&gt;\n\n        &lt;AlternatingItemStyle BackColor=&quot;#DCDCDC&quot; /&gt;\n        &lt;AlternatingItemTemplate&gt;\n          &lt;asp:Label id=&quot;Label3&quot; runat=&quot;server&quot;&gt;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Column1&quot;) %&gt;&lt;/asp:Label&gt;\n        &lt;/AlternatingItemTemplate&gt;\n\n      &lt;/aspSample:CustomDataListCreateControlStyle&gt;\n\n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"CustomDataListCreateControlStyle#2\">Imports System.Web\nImports System.Security.Permissions\n\nNamespace Samples.AspNet.VB.Controls\n    &lt;AspNetHostingPermission(SecurityAction.Demand, Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n    Public NotInheritable Class CustomDataListCreateControlStyle\n        Inherits System.Web.UI.WebControls.DataList\n\n        Protected Overrides Function CreateControlStyle() As System.Web.UI.WebControls.Style\n\n            &#39; Create a new TableStyle instance based on ViewState values.\n            Dim style As New System.Web.UI.WebControls.TableStyle(ViewState)\n\n            &#39; Show the GridLines horizontal with no CellSpacing.\n            style.GridLines = System.Web.UI.WebControls.GridLines.Horizontal\n            style.CellSpacing = 0\n\n            &#39; Return the Style\n            Return style\n        End Function\n    End Class\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"CustomDataListCreateControlStyle#2\">using System.Web;\nusing System.Security.Permissions;\n\nnamespace Samples.AspNet.CS.Controls\n{\n    [AspNetHostingPermission(SecurityAction.Demand, Level = AspNetHostingPermissionLevel.Minimal)]\n    public sealed class CustomDataListCreateControlStyle : System.Web.UI.WebControls.DataList\n    {\n        protected override System.Web.UI.WebControls.Style CreateControlStyle()\n        {\n            // Create a new TableStyle instance based on ViewState values.\n            System.Web.UI.WebControls.TableStyle style = new System.Web.UI.WebControls.TableStyle(ViewState);\n            \n            // Show the GridLines horizontal with no CellSpacing.\n            style.GridLines = System.Web.UI.WebControls.GridLines.Horizontal;\n            style.CellSpacing = 0;\n\n            // Return the Style\n            return style;\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_CreateItem_System_Int32_System_Web_UI_WebControls_ListItemType_\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_CreateItem_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateItem(Int32,ListItemType)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.web.ui.webcontrols.datalistitem\" data-linktype=\"relative-path\">DataListItem</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual System.Web.UI.WebControls.DataListItem CreateItem (int itemIndex, System.Web.UI.WebControls.ListItemType itemType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>itemIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The specified location within the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> to place the created item.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>itemType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.listitemtype\" data-linktype=\"relative-path\">ListItemType</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.listitemtype\" data-linktype=\"relative-path\">ListItemType</a> that represents the specified type of the item to create.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.datalistitem\" data-linktype=\"relative-path\">DataListItem</a></div>\r\n                  </div>\r\n                  <p>A new <a class=\"xref\" href=\"system.web.ui.webcontrols.datalistitem\" data-linktype=\"relative-path\">DataListItem</a> created with the specified list-item type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The CreateItem method is used primarily by control developers in creating a custom implementation of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. The CreateItem method is functionally equivalent to calling the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalistitem#System_Web_UI_WebControls_DataListItem__ctor_\" data-linktype=\"relative-path\">DataListItem</a> constructor for a <a class=\"xref\" href=\"system.web.ui.webcontrols.datalistitem\" data-linktype=\"relative-path\">DataListItem</a>. The <a class=\"xref\" href=\"system.web.ui.webcontrols.datalistitem#System_Web_UI_WebControls_DataListItem_ItemIndex_\" data-linktype=\"relative-path\">ItemIndex</a> and <a class=\"xref\" href=\"system.web.ui.webcontrols.datalistitem#System_Web_UI_WebControls_DataListItem_ItemType_\" data-linktype=\"relative-path\">ItemType</a> properties are initialized for the new <a class=\"xref\" href=\"system.web.ui.webcontrols.datalistitem\" data-linktype=\"relative-path\">DataListItem</a> using the specified values, but the item is not inserted into the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_CreateControlHierarchy_\" data-linktype=\"relative-path\">CreateControlHierarchy</a> method uses the CreateItem and <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_InitializeItem_\" data-linktype=\"relative-path\">InitializeItem</a> methods to create <a class=\"xref\" href=\"system.web.ui.webcontrols.datalistitem\" data-linktype=\"relative-path\">DataListItem</a> controls that represent the header, footer, separator, and data-bound items contained in the data list. You can access the data-bound items for the data list through the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_Items_\" data-linktype=\"relative-path\">Items</a> collection. You can access all item types, including the header, footer, and separator items, through the <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_Controls_\" data-linktype=\"relative-path\">Controls</a> collection.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_InitializeItem_System_Web_UI_WebControls_DataListItem_\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_InitializeItem_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InitializeItem(DataListItem)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a <a class=\"xref\" href=\"system.web.ui.webcontrols.datalistitem\" data-linktype=\"relative-path\">DataListItem</a> object based on the specified templates and styles for the list-item type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void InitializeItem (System.Web.UI.WebControls.DataListItem item);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.datalistitem\" data-linktype=\"relative-path\">DataListItem</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.web.ui.webcontrols.datalistitem\" data-linktype=\"relative-path\">DataListItem</a> to initialize.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The InitializeItem method is used primarily by control developers to extend the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<p> The <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_CreateControlHierarchy_\" data-linktype=\"relative-path\">CreateControlHierarchy</a> method uses the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_CreateItem_\" data-linktype=\"relative-path\">CreateItem</a> and InitializeItem methods to create <a class=\"xref\" href=\"system.web.ui.webcontrols.datalistitem\" data-linktype=\"relative-path\">DataListItem</a> controls that represent the header, footer, separator, and data-bound items contained in the data list. You can access the data-bound items for the data list through the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_Items_\" data-linktype=\"relative-path\">Items</a> collection. You can access all item types, including the header, footer, and separator items, through the <a class=\"xref\" href=\"system.web.ui.webcontrols.basedatalist#System_Web_UI_WebControls_BaseDataList_Controls_\" data-linktype=\"relative-path\">Controls</a> collection.  </p>\n<p> Override the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_CreateControlHierarchy_\" data-linktype=\"relative-path\">CreateControlHierarchy</a> method to customize how <a class=\"xref\" href=\"system.web.ui.webcontrols.datalistitem\" data-linktype=\"relative-path\">DataListItem</a> controls are created or added to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. Override the InitializeItem method to customize templates for a <a class=\"xref\" href=\"system.web.ui.webcontrols.datalistitem\" data-linktype=\"relative-path\">DataListItem</a> control.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_LoadViewState_System_Object_\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_LoadViewState_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LoadViewState(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Loads the previously saved view state of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void LoadViewState (object savedState);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>savedState</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that represents the state of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is used primarily by the .NET Framework infrastructure and is not intended to be used directly from your code.  However, control developers can override this method to specify how a custom server control restores its view state. For more information, see <a href=\"../Topic/ASP.NET%20State%20Management%20Overview.md\" data-linktype=\"relative-path\">ASP.NET State Management Overview</a>.  </p>\n<p> The LoadViewState method restores view-state information for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control from a previous page request that was saved by the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_SaveViewState_\" data-linktype=\"relative-path\">SaveViewState</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_OnBubbleEvent_System_Object_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_OnBubbleEvent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnBubbleEvent(Object,EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the event for the server control is passed up the page&#39;s UI server control hierarchy.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override bool OnBubbleEvent (object source, EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The source of the event.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the event has been canceled; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_OnCancelCommand_System_Web_UI_WebControls_DataListCommandEventArgs_\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_OnCancelCommand_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnCancelCommand(DataListCommandEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_CancelCommand\" data-linktype=\"relative-path\">CancelCommand</a> event. This allows you to provide a custom handler for the event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnCancelCommand (System.Web.UI.WebControls.DataListCommandEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.datalistcommandeventargs\" data-linktype=\"relative-path\">DataListCommandEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.datalistcommandeventargs\" data-linktype=\"relative-path\">DataListCommandEventArgs</a> that contains event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the OnCancelCommand method to provide a custom handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_CancelCommand\" data-linktype=\"relative-path\">CancelCommand</a> event.  </p>\n<p> The <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_CancelCommand\" data-linktype=\"relative-path\">CancelCommand</a> event is raised when the <code>Cancel</code> button is clicked for an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<p> A typical handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_CancelCommand\" data-linktype=\"relative-path\">CancelCommand</a> event sets the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_EditItemIndex_\" data-linktype=\"relative-path\">EditItemIndex</a> property to <code>-1</code> (to deselect the item) and then rebinds the data to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see <a href=\"../Topic/Securing%20Standard%20Controls.md\" data-linktype=\"relative-path\">Securing Standard Controls</a>, <a href=\"../Topic/How%20to:%20Protect%20Against%20Script%20Exploits%20in%20a%20Web%20Application%20by%20Applying%20HTML%20Encoding%20to%20Strings.md\" data-linktype=\"relative-path\">How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings</a>, and <a href=\"../Topic/Validating%20User%20Input%20in%20ASP.NET%20Web%20Pages.md\" data-linktype=\"relative-path\">Validating User Input in ASP.NET Web Pages</a>.  </p>\n</div>\n<p> Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/How%20to:%20Consume%20Events%20in%20a%20Web%20Forms%20Application.md\" data-linktype=\"relative-path\">How to: Consume Events in a Web Forms Application</a>.  </p>\n<p> The OnCancelCommand method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to specify and code a handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_CancelCommand\" data-linktype=\"relative-path\">CancelCommand</a> event. It cancels any edits made to an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control when the <code>Cancel</code> button is clicked.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"DataListEdit#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      // The Cart and CartView objects temporarily store the data source\n      // for the DataList control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. \n         // Because the data source in this example is an in-memory\n         // DataTable, retrieve the data from session state if it exists;\n         // otherwise, create the data source.\n         GetSource();\n\n         // The DataList control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the\n         // page is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindList();\n\n         }\n                   \n      }\n\n      void BindList() \n      {\n\n         // Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView;\n         ItemsList.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that \n         // is stored in session state. If the data source does not exist,\n         // create it; otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void Edit_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked\n         // in the DataList control to enable editing for that item. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex;\n         BindList();\n\n      }\n\n      void Cancel_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Delete_Command(Object sender, DataListCommandEventArgs e) \n      { \n\n         // Retrieve the name of the item to remove.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Update_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Retrieve the updated values from the selected item.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n         String qty = ((TextBox)e.Item.FindControl(&quot;QtyTextBox&quot;)).Text;\n         String price = ((TextBox)e.Item.FindControl(&quot;PriceTextBox&quot;)).Text;\n\n         // With a database, use an update command to update the data.\n         // Because the data source in this example is an in-memory \n         // DataTable, delete the old row and replace it with a new one.\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // ***************************************************************\n         // Insert data validation code here. Make sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add a new entry to replace the previous item.\n         DataRow dr = Cart.NewRow();\n         dr[0] = qty;\n         dr[1] = item;\n         // If necessary, remove the &#39;$&#39; character from the price before\n         // converting the price to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n         Cart.Rows.Add(dr);\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DataList to the data source to refresh\n         // the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           OnEditCommand=&quot;Edit_Command&quot;\n           OnUpdateCommand=&quot;Update_Command&quot;\n           OnDeleteCommand=&quot;Delete_Command&quot;\n           OnCancelCommand=&quot;Cancel_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataListEdit#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataList control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView\n \n      Sub Page_Load(sende As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data.\n         &#39; Because the data source in this example is an in-memory\n         &#39; DataTable, retrieve the data from session state if it exists;\n         &#39; otherwise, create the data source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the\n         &#39; page is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindList()\n\n         End If\n                   \n      End Sub\n\n      Sub BindList() \n\n         &#39; Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView\n         ItemsList.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that\n         &#39; is stored in session state. If the data source does not exist,\n         &#39; create it; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values\n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub Edit_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked\n         &#39; in the DataList control to enable editing for that item. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex\n         BindList()\n\n      End Sub\n\n      Sub Cancel_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Delete_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the name of the item to remove.\n         Dim item As String = (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n\n         &#39; Filter the CartView for the selected item and remove it from\n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure \n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Update_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the updated values from the selected item.\n         Dim item As String = _\n             (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n         Dim qty As String = _\n             (CType(e.Item.FindControl(&quot;QtyTextBox&quot;), TextBox)).Text\n         Dim price As String = _\n             (CType(e.Item.FindControl(&quot;PriceTextBox&quot;), TextBox)).Text\n\n         &#39; With a database, use an update command to update the data.\n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n\n         &#39; Filter the CartView for the selected item and remove it from \n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Make sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add a new entry to replace the previous item.\n         Dim dr As DataRow = Cart.NewRow()\n         dr(0) = qty\n         dr(1) = item\n         &#39; If necessary, remove the &#39;$&#39; character from the price before \n         &#39; converting the price to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n\n            dr(2) = Convert.ToDouble(price.Substring(1))\n\n         Else\n\n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DataList to the data source to refresh \n         &#39; the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           OnEditCommand=&quot;Edit_Command&quot;\n           OnUpdateCommand=&quot;Update_Command&quot;\n           OnDeleteCommand=&quot;Delete_Command&quot;\n           OnCancelCommand=&quot;Cancel_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataListEdit2#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataList control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView\n \n      Sub Page_Load(sende As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data.\n         &#39; Because the data source in this example is an in-memory\n         &#39; DataTable, retrieve the data from session state if it exists;\n         &#39; otherwise, create the data source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the\n         &#39; page is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindList()\n\n         End If\n\n         &#39; Manually register the event-handling methods.\n         AddHandler ItemsList.EditCommand, AddressOf Edit_Command\n         AddHandler ItemsList.UpdateCommand, AddressOf Update_Command\n         AddHandler ItemsList.DeleteCommand, AddressOf Delete_Command\n         AddHandler ItemsList.CancelCommand, AddressOf Cancel_Command\n                   \n      End Sub\n\n      Sub BindList() \n\n         &#39; Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView\n         ItemsList.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that\n         &#39; is stored in session state. If the data source does not exist,\n         &#39; create it; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values\n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub Edit_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked\n         &#39; in the DataList control to enable editing for that item. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex\n         BindList()\n\n      End Sub\n\n      Sub Cancel_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Delete_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the name of the item to remove.\n         Dim item As String = (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n\n         &#39; Filter the CartView for the selected item and remove it from \n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure \n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Update_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the updated values from the selected item.\n         Dim item As String = _\n             (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n         Dim qty As String = _\n             (CType(e.Item.FindControl(&quot;QtyTextBox&quot;), TextBox)).Text\n         Dim price As String = _\n             (CType(e.Item.FindControl(&quot;PriceTextBox&quot;), TextBox)).Text\n\n         &#39; With a database, use an update command to update the data.\n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n\n         &#39; Filter the CartView for the selected item and remove it from \n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Make sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add a new entry to replace the previous item.\n         Dim dr As DataRow = Cart.NewRow()\n         dr(0) = qty\n         dr(1) = item\n         &#39; If necessary, remove the &#39;$&#39; character from the price before \n         &#39; converting the price to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n\n            dr(2) = Convert.ToDouble(price.Substring(1))\n\n         Else\n\n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DataList to the data source to refresh \n         &#39; the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           OnEditCommand=&quot;Edit_Command&quot;\n           OnUpdateCommand=&quot;Update_Command&quot;\n           OnDeleteCommand=&quot;Delete_Command&quot;\n           OnCancelCommand=&quot;Cancel_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataListEdit2#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      // The Cart and CartView objects temporarily store the data source\n      // for the DataList control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. \n         // Because the data source in this example is an in-memory\n         // DataTable, retrieve the data from session state if it exists;\n         // otherwise, create the data source.\n         GetSource();\n\n         // The DataList control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the\n         // page is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindList();\n\n         }\n\n         // Manually register the event-handling methods.\n         ItemsList.EditCommand += \n             new DataListCommandEventHandler(this.Edit_Command);\n         ItemsList.UpdateCommand += \n             new DataListCommandEventHandler(this.Update_Command);\n         ItemsList.DeleteCommand += \n             new DataListCommandEventHandler(this.Delete_Command);\n         ItemsList.CancelCommand += \n             new DataListCommandEventHandler(this.Cancel_Command);\n                   \n      }\n\n      void BindList() \n      {\n\n         // Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView;\n         ItemsList.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that \n         // is stored in session state. If the data source does not exist,\n         // create it; otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values\n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void Edit_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked\n         // in the DataList control to enable editing for that item. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex;\n         BindList();\n\n      }\n\n      void Cancel_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Delete_Command(Object sender, DataListCommandEventArgs e) \n      { \n\n         // Retrieve the name of the item to remove.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Update_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Retrieve the updated values from the selected item.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n         String qty = ((TextBox)e.Item.FindControl(&quot;QtyTextBox&quot;)).Text;\n         String price = ((TextBox)e.Item.FindControl(&quot;PriceTextBox&quot;)).Text;\n\n         // With a database, use an update command to update the data.\n         // Because the data source in this example is an in-memory \n         // DataTable, delete the old row and replace it with a new one.\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // ***************************************************************\n         // Insert data validation code here. Make sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add a new entry to replace the previous item.\n         DataRow dr = Cart.NewRow();\n         dr[0] = qty;\n         dr[1] = item;\n         // If necessary, remove the &#39;$&#39; character from the price before\n         // converting the price to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n         Cart.Rows.Add(dr);\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DataList to the data source to refresh\n         // the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_OnDeleteCommand_System_Web_UI_WebControls_DataListCommandEventArgs_\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_OnDeleteCommand_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnDeleteCommand(DataListCommandEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_DeleteCommand\" data-linktype=\"relative-path\">DeleteCommand</a> event. This allows you to provide a custom handler for the event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnDeleteCommand (System.Web.UI.WebControls.DataListCommandEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.datalistcommandeventargs\" data-linktype=\"relative-path\">DataListCommandEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.datalistcommandeventargs\" data-linktype=\"relative-path\">DataListCommandEventArgs</a> that contains event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the OnDeleteCommand method to provide a custom handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_DeleteCommand\" data-linktype=\"relative-path\">DeleteCommand</a> event.  </p>\n<p> The <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_DeleteCommand\" data-linktype=\"relative-path\">DeleteCommand</a> event is raised when the <code>Delete</code> button is clicked for an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<p> A typical handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_DeleteCommand\" data-linktype=\"relative-path\">DeleteCommand</a> event removes the selected item from the data source and then rebinds the data to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<p> Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/How%20to:%20Consume%20Events%20in%20a%20Web%20Forms%20Application.md\" data-linktype=\"relative-path\">How to: Consume Events in a Web Forms Application</a>.  </p>\n<p> The OnDeleteCommand method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to specify and code a handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_DeleteCommand\" data-linktype=\"relative-path\">DeleteCommand</a> event. It deletes the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control when the <code>Delete</code> button is clicked.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"DataListEdit#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      // The Cart and CartView objects temporarily store the data source\n      // for the DataList control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. \n         // Because the data source in this example is an in-memory\n         // DataTable, retrieve the data from session state if it exists;\n         // otherwise, create the data source.\n         GetSource();\n\n         // The DataList control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the\n         // page is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindList();\n\n         }\n                   \n      }\n\n      void BindList() \n      {\n\n         // Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView;\n         ItemsList.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that \n         // is stored in session state. If the data source does not exist,\n         // create it; otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void Edit_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked\n         // in the DataList control to enable editing for that item. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex;\n         BindList();\n\n      }\n\n      void Cancel_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Delete_Command(Object sender, DataListCommandEventArgs e) \n      { \n\n         // Retrieve the name of the item to remove.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Update_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Retrieve the updated values from the selected item.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n         String qty = ((TextBox)e.Item.FindControl(&quot;QtyTextBox&quot;)).Text;\n         String price = ((TextBox)e.Item.FindControl(&quot;PriceTextBox&quot;)).Text;\n\n         // With a database, use an update command to update the data.\n         // Because the data source in this example is an in-memory \n         // DataTable, delete the old row and replace it with a new one.\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // ***************************************************************\n         // Insert data validation code here. Make sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add a new entry to replace the previous item.\n         DataRow dr = Cart.NewRow();\n         dr[0] = qty;\n         dr[1] = item;\n         // If necessary, remove the &#39;$&#39; character from the price before\n         // converting the price to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n         Cart.Rows.Add(dr);\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DataList to the data source to refresh\n         // the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           OnEditCommand=&quot;Edit_Command&quot;\n           OnUpdateCommand=&quot;Update_Command&quot;\n           OnDeleteCommand=&quot;Delete_Command&quot;\n           OnCancelCommand=&quot;Cancel_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataListEdit#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataList control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView\n \n      Sub Page_Load(sende As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data.\n         &#39; Because the data source in this example is an in-memory\n         &#39; DataTable, retrieve the data from session state if it exists;\n         &#39; otherwise, create the data source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the\n         &#39; page is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindList()\n\n         End If\n                   \n      End Sub\n\n      Sub BindList() \n\n         &#39; Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView\n         ItemsList.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that\n         &#39; is stored in session state. If the data source does not exist,\n         &#39; create it; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values\n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub Edit_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked\n         &#39; in the DataList control to enable editing for that item. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex\n         BindList()\n\n      End Sub\n\n      Sub Cancel_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Delete_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the name of the item to remove.\n         Dim item As String = (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n\n         &#39; Filter the CartView for the selected item and remove it from\n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure \n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Update_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the updated values from the selected item.\n         Dim item As String = _\n             (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n         Dim qty As String = _\n             (CType(e.Item.FindControl(&quot;QtyTextBox&quot;), TextBox)).Text\n         Dim price As String = _\n             (CType(e.Item.FindControl(&quot;PriceTextBox&quot;), TextBox)).Text\n\n         &#39; With a database, use an update command to update the data.\n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n\n         &#39; Filter the CartView for the selected item and remove it from \n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Make sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add a new entry to replace the previous item.\n         Dim dr As DataRow = Cart.NewRow()\n         dr(0) = qty\n         dr(1) = item\n         &#39; If necessary, remove the &#39;$&#39; character from the price before \n         &#39; converting the price to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n\n            dr(2) = Convert.ToDouble(price.Substring(1))\n\n         Else\n\n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DataList to the data source to refresh \n         &#39; the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           OnEditCommand=&quot;Edit_Command&quot;\n           OnUpdateCommand=&quot;Update_Command&quot;\n           OnDeleteCommand=&quot;Delete_Command&quot;\n           OnCancelCommand=&quot;Cancel_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataListEdit2#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataList control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView\n \n      Sub Page_Load(sende As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data.\n         &#39; Because the data source in this example is an in-memory\n         &#39; DataTable, retrieve the data from session state if it exists;\n         &#39; otherwise, create the data source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the\n         &#39; page is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindList()\n\n         End If\n\n         &#39; Manually register the event-handling methods.\n         AddHandler ItemsList.EditCommand, AddressOf Edit_Command\n         AddHandler ItemsList.UpdateCommand, AddressOf Update_Command\n         AddHandler ItemsList.DeleteCommand, AddressOf Delete_Command\n         AddHandler ItemsList.CancelCommand, AddressOf Cancel_Command\n                   \n      End Sub\n\n      Sub BindList() \n\n         &#39; Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView\n         ItemsList.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that\n         &#39; is stored in session state. If the data source does not exist,\n         &#39; create it; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values\n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub Edit_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked\n         &#39; in the DataList control to enable editing for that item. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex\n         BindList()\n\n      End Sub\n\n      Sub Cancel_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Delete_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the name of the item to remove.\n         Dim item As String = (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n\n         &#39; Filter the CartView for the selected item and remove it from \n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure \n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Update_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the updated values from the selected item.\n         Dim item As String = _\n             (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n         Dim qty As String = _\n             (CType(e.Item.FindControl(&quot;QtyTextBox&quot;), TextBox)).Text\n         Dim price As String = _\n             (CType(e.Item.FindControl(&quot;PriceTextBox&quot;), TextBox)).Text\n\n         &#39; With a database, use an update command to update the data.\n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n\n         &#39; Filter the CartView for the selected item and remove it from \n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Make sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add a new entry to replace the previous item.\n         Dim dr As DataRow = Cart.NewRow()\n         dr(0) = qty\n         dr(1) = item\n         &#39; If necessary, remove the &#39;$&#39; character from the price before \n         &#39; converting the price to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n\n            dr(2) = Convert.ToDouble(price.Substring(1))\n\n         Else\n\n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DataList to the data source to refresh \n         &#39; the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           OnEditCommand=&quot;Edit_Command&quot;\n           OnUpdateCommand=&quot;Update_Command&quot;\n           OnDeleteCommand=&quot;Delete_Command&quot;\n           OnCancelCommand=&quot;Cancel_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataListEdit2#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      // The Cart and CartView objects temporarily store the data source\n      // for the DataList control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. \n         // Because the data source in this example is an in-memory\n         // DataTable, retrieve the data from session state if it exists;\n         // otherwise, create the data source.\n         GetSource();\n\n         // The DataList control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the\n         // page is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindList();\n\n         }\n\n         // Manually register the event-handling methods.\n         ItemsList.EditCommand += \n             new DataListCommandEventHandler(this.Edit_Command);\n         ItemsList.UpdateCommand += \n             new DataListCommandEventHandler(this.Update_Command);\n         ItemsList.DeleteCommand += \n             new DataListCommandEventHandler(this.Delete_Command);\n         ItemsList.CancelCommand += \n             new DataListCommandEventHandler(this.Cancel_Command);\n                   \n      }\n\n      void BindList() \n      {\n\n         // Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView;\n         ItemsList.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that \n         // is stored in session state. If the data source does not exist,\n         // create it; otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values\n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void Edit_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked\n         // in the DataList control to enable editing for that item. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex;\n         BindList();\n\n      }\n\n      void Cancel_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Delete_Command(Object sender, DataListCommandEventArgs e) \n      { \n\n         // Retrieve the name of the item to remove.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Update_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Retrieve the updated values from the selected item.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n         String qty = ((TextBox)e.Item.FindControl(&quot;QtyTextBox&quot;)).Text;\n         String price = ((TextBox)e.Item.FindControl(&quot;PriceTextBox&quot;)).Text;\n\n         // With a database, use an update command to update the data.\n         // Because the data source in this example is an in-memory \n         // DataTable, delete the old row and replace it with a new one.\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // ***************************************************************\n         // Insert data validation code here. Make sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add a new entry to replace the previous item.\n         DataRow dr = Cart.NewRow();\n         dr[0] = qty;\n         dr[1] = item;\n         // If necessary, remove the &#39;$&#39; character from the price before\n         // converting the price to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n         Cart.Rows.Add(dr);\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DataList to the data source to refresh\n         // the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_OnEditCommand_System_Web_UI_WebControls_DataListCommandEventArgs_\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_OnEditCommand_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnEditCommand(DataListCommandEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_EditCommand\" data-linktype=\"relative-path\">EditCommand</a> event. This allows you to provide a custom handler for the event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnEditCommand (System.Web.UI.WebControls.DataListCommandEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.datalistcommandeventargs\" data-linktype=\"relative-path\">DataListCommandEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.datalistcommandeventargs\" data-linktype=\"relative-path\">DataListCommandEventArgs</a> that contains event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the OnEditCommand method to provide a custom handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_EditCommand\" data-linktype=\"relative-path\">EditCommand</a> event.  </p>\n<p> The <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_EditCommand\" data-linktype=\"relative-path\">EditCommand</a> event is raised when the <code>Edit</code> button is clicked for an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<p> A typical handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_EditCommand\" data-linktype=\"relative-path\">EditCommand</a> event sets the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_EditItemIndex_\" data-linktype=\"relative-path\">EditItemIndex</a> property to the selected row and then rebinds the data to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see <a href=\"../Topic/Securing%20Standard%20Controls.md\" data-linktype=\"relative-path\">Securing Standard Controls</a>, <a href=\"../Topic/How%20to:%20Protect%20Against%20Script%20Exploits%20in%20a%20Web%20Application%20by%20Applying%20HTML%20Encoding%20to%20Strings.md\" data-linktype=\"relative-path\">How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings</a>, and <a href=\"../Topic/Validating%20User%20Input%20in%20ASP.NET%20Web%20Pages.md\" data-linktype=\"relative-path\">Validating User Input in ASP.NET Web Pages</a>.  </p>\n</div>\n<p> Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/How%20to:%20Consume%20Events%20in%20a%20Web%20Forms%20Application.md\" data-linktype=\"relative-path\">How to: Consume Events in a Web Forms Application</a>.  </p>\n<p> The OnEditCommand method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to specify and code a handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_EditCommand\" data-linktype=\"relative-path\">EditCommand</a> event. It allows you to edit the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control when the <code>Edit</code> button is clicked.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"DataListEdit#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      // The Cart and CartView objects temporarily store the data source\n      // for the DataList control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. \n         // Because the data source in this example is an in-memory\n         // DataTable, retrieve the data from session state if it exists;\n         // otherwise, create the data source.\n         GetSource();\n\n         // The DataList control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the\n         // page is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindList();\n\n         }\n                   \n      }\n\n      void BindList() \n      {\n\n         // Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView;\n         ItemsList.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that \n         // is stored in session state. If the data source does not exist,\n         // create it; otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void Edit_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked\n         // in the DataList control to enable editing for that item. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex;\n         BindList();\n\n      }\n\n      void Cancel_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Delete_Command(Object sender, DataListCommandEventArgs e) \n      { \n\n         // Retrieve the name of the item to remove.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Update_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Retrieve the updated values from the selected item.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n         String qty = ((TextBox)e.Item.FindControl(&quot;QtyTextBox&quot;)).Text;\n         String price = ((TextBox)e.Item.FindControl(&quot;PriceTextBox&quot;)).Text;\n\n         // With a database, use an update command to update the data.\n         // Because the data source in this example is an in-memory \n         // DataTable, delete the old row and replace it with a new one.\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // ***************************************************************\n         // Insert data validation code here. Make sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add a new entry to replace the previous item.\n         DataRow dr = Cart.NewRow();\n         dr[0] = qty;\n         dr[1] = item;\n         // If necessary, remove the &#39;$&#39; character from the price before\n         // converting the price to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n         Cart.Rows.Add(dr);\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DataList to the data source to refresh\n         // the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           OnEditCommand=&quot;Edit_Command&quot;\n           OnUpdateCommand=&quot;Update_Command&quot;\n           OnDeleteCommand=&quot;Delete_Command&quot;\n           OnCancelCommand=&quot;Cancel_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataListEdit#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataList control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView\n \n      Sub Page_Load(sende As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data.\n         &#39; Because the data source in this example is an in-memory\n         &#39; DataTable, retrieve the data from session state if it exists;\n         &#39; otherwise, create the data source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the\n         &#39; page is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindList()\n\n         End If\n                   \n      End Sub\n\n      Sub BindList() \n\n         &#39; Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView\n         ItemsList.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that\n         &#39; is stored in session state. If the data source does not exist,\n         &#39; create it; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values\n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub Edit_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked\n         &#39; in the DataList control to enable editing for that item. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex\n         BindList()\n\n      End Sub\n\n      Sub Cancel_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Delete_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the name of the item to remove.\n         Dim item As String = (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n\n         &#39; Filter the CartView for the selected item and remove it from\n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure \n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Update_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the updated values from the selected item.\n         Dim item As String = _\n             (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n         Dim qty As String = _\n             (CType(e.Item.FindControl(&quot;QtyTextBox&quot;), TextBox)).Text\n         Dim price As String = _\n             (CType(e.Item.FindControl(&quot;PriceTextBox&quot;), TextBox)).Text\n\n         &#39; With a database, use an update command to update the data.\n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n\n         &#39; Filter the CartView for the selected item and remove it from \n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Make sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add a new entry to replace the previous item.\n         Dim dr As DataRow = Cart.NewRow()\n         dr(0) = qty\n         dr(1) = item\n         &#39; If necessary, remove the &#39;$&#39; character from the price before \n         &#39; converting the price to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n\n            dr(2) = Convert.ToDouble(price.Substring(1))\n\n         Else\n\n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DataList to the data source to refresh \n         &#39; the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           OnEditCommand=&quot;Edit_Command&quot;\n           OnUpdateCommand=&quot;Update_Command&quot;\n           OnDeleteCommand=&quot;Delete_Command&quot;\n           OnCancelCommand=&quot;Cancel_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataListEdit2#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataList control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView\n \n      Sub Page_Load(sende As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data.\n         &#39; Because the data source in this example is an in-memory\n         &#39; DataTable, retrieve the data from session state if it exists;\n         &#39; otherwise, create the data source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the\n         &#39; page is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindList()\n\n         End If\n\n         &#39; Manually register the event-handling methods.\n         AddHandler ItemsList.EditCommand, AddressOf Edit_Command\n         AddHandler ItemsList.UpdateCommand, AddressOf Update_Command\n         AddHandler ItemsList.DeleteCommand, AddressOf Delete_Command\n         AddHandler ItemsList.CancelCommand, AddressOf Cancel_Command\n                   \n      End Sub\n\n      Sub BindList() \n\n         &#39; Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView\n         ItemsList.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that\n         &#39; is stored in session state. If the data source does not exist,\n         &#39; create it; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values\n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub Edit_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked\n         &#39; in the DataList control to enable editing for that item. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex\n         BindList()\n\n      End Sub\n\n      Sub Cancel_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Delete_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the name of the item to remove.\n         Dim item As String = (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n\n         &#39; Filter the CartView for the selected item and remove it from \n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure \n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Update_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the updated values from the selected item.\n         Dim item As String = _\n             (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n         Dim qty As String = _\n             (CType(e.Item.FindControl(&quot;QtyTextBox&quot;), TextBox)).Text\n         Dim price As String = _\n             (CType(e.Item.FindControl(&quot;PriceTextBox&quot;), TextBox)).Text\n\n         &#39; With a database, use an update command to update the data.\n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n\n         &#39; Filter the CartView for the selected item and remove it from \n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Make sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add a new entry to replace the previous item.\n         Dim dr As DataRow = Cart.NewRow()\n         dr(0) = qty\n         dr(1) = item\n         &#39; If necessary, remove the &#39;$&#39; character from the price before \n         &#39; converting the price to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n\n            dr(2) = Convert.ToDouble(price.Substring(1))\n\n         Else\n\n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DataList to the data source to refresh \n         &#39; the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           OnEditCommand=&quot;Edit_Command&quot;\n           OnUpdateCommand=&quot;Update_Command&quot;\n           OnDeleteCommand=&quot;Delete_Command&quot;\n           OnCancelCommand=&quot;Cancel_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataListEdit2#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      // The Cart and CartView objects temporarily store the data source\n      // for the DataList control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. \n         // Because the data source in this example is an in-memory\n         // DataTable, retrieve the data from session state if it exists;\n         // otherwise, create the data source.\n         GetSource();\n\n         // The DataList control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the\n         // page is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindList();\n\n         }\n\n         // Manually register the event-handling methods.\n         ItemsList.EditCommand += \n             new DataListCommandEventHandler(this.Edit_Command);\n         ItemsList.UpdateCommand += \n             new DataListCommandEventHandler(this.Update_Command);\n         ItemsList.DeleteCommand += \n             new DataListCommandEventHandler(this.Delete_Command);\n         ItemsList.CancelCommand += \n             new DataListCommandEventHandler(this.Cancel_Command);\n                   \n      }\n\n      void BindList() \n      {\n\n         // Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView;\n         ItemsList.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that \n         // is stored in session state. If the data source does not exist,\n         // create it; otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values\n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void Edit_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked\n         // in the DataList control to enable editing for that item. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex;\n         BindList();\n\n      }\n\n      void Cancel_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Delete_Command(Object sender, DataListCommandEventArgs e) \n      { \n\n         // Retrieve the name of the item to remove.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Update_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Retrieve the updated values from the selected item.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n         String qty = ((TextBox)e.Item.FindControl(&quot;QtyTextBox&quot;)).Text;\n         String price = ((TextBox)e.Item.FindControl(&quot;PriceTextBox&quot;)).Text;\n\n         // With a database, use an update command to update the data.\n         // Because the data source in this example is an in-memory \n         // DataTable, delete the old row and replace it with a new one.\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // ***************************************************************\n         // Insert data validation code here. Make sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add a new entry to replace the previous item.\n         DataRow dr = Cart.NewRow();\n         dr[0] = qty;\n         dr[1] = item;\n         // If necessary, remove the &#39;$&#39; character from the price before\n         // converting the price to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n         Cart.Rows.Add(dr);\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DataList to the data source to refresh\n         // the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_OnInit_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_OnInit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnInit(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_Init\" data-linktype=\"relative-path\">Init</a> event for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void OnInit (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The OnInit method notifies the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control to perform any initialization steps that are required to create and set up an instance.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_OnItemCommand_System_Web_UI_WebControls_DataListCommandEventArgs_\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_OnItemCommand_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnItemCommand(DataListCommandEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_ItemCommand\" data-linktype=\"relative-path\">ItemCommand</a> event. This allows you to provide a custom handler for the event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnItemCommand (System.Web.UI.WebControls.DataListCommandEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.datalistcommandeventargs\" data-linktype=\"relative-path\">DataListCommandEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.datalistcommandeventargs\" data-linktype=\"relative-path\">DataListCommandEventArgs</a> that contains event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the OnItemCommand method to provide a custom handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_ItemCommand\" data-linktype=\"relative-path\">ItemCommand</a> event.  </p>\n<p> The <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_ItemCommand\" data-linktype=\"relative-path\">ItemCommand</a> event is raised when any button is clicked in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control and is commonly used when you have a button control with a custom <code>CommandName</code> value, such as <code>Add</code>, in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<p> Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/How%20to:%20Consume%20Events%20in%20a%20Web%20Forms%20Application.md\" data-linktype=\"relative-path\">How to: Consume Events in a Web Forms Application</a>.  </p>\n<p> The OnItemCommand method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to specify and code a handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_ItemCommand\" data-linktype=\"relative-path\">ItemCommand</a> event to select an item from the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"DataListItemCommand#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Select Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataList control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;Item&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;Qty&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;Price&quot;, GetType(Double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 To 8 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = i * 2\n            dr(2) = 1.23 * (i + 1)\n \n            dt.Rows.Add(dr)\n         \n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n      \n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n\n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then \n         \n            ItemsList.DataSource = CreateDataSource()\n            ItemsList.DataBind()\n         \n         End If\n\n      End Sub\n\n      Sub Item_Command(sender As Object, e As DataListCommandEventArgs) \n        \n         &#39; Set the SelectedIndex property to select an item in the DataList.\n         ItemsList.SelectedIndex = e.Item.ItemIndex\n\n         &#39; Rebind the data source to the DataList to refresh the control.\n         ItemsList.DataSource = CreateDataSource()\n         ItemsList.DataBind()\n\n      End Sub\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Select Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Select&lt;/b&gt; to select an item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;           \n           OnItemCommand=&quot;Item_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;SelectedItemStyle BackColor=&quot;Yellow&quot;&gt;\n         &lt;/SelectedItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            &lt;asp:LinkButton id=&quot;SelectButton&quot; \n                 Text=&quot;Select&quot; \n                 CommandName=&quot;Select&quot;\n                 runat=&quot;server&quot;/&gt;\n\n            Item &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;SelectedItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:Label id=&quot;QtyLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:Label id=&quot;PriceLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/SelectedItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataListItemCommand#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Select Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataList control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(double)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = i * 2;\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n\n      }\n \n      void Page_Load(Object sender, EventArgs e) \n      {\n\n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsList.DataSource = CreateDataSource();\n            ItemsList.DataBind();\n         }\n\n      }\n\n      void Item_Command(Object sender, DataListCommandEventArgs e) \n      {\n        \n         // Set the SelectedIndex property to select an item in the DataList.\n         ItemsList.SelectedIndex = e.Item.ItemIndex;\n\n         // Rebind the data source to the DataList to refresh the control.\n         ItemsList.DataSource = CreateDataSource();\n         ItemsList.DataBind();\n\n      }\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Select Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Select&lt;/b&gt; to select an item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;           \n           OnItemCommand=&quot;Item_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;SelectedItemStyle BackColor=&quot;Yellow&quot;&gt;\n         &lt;/SelectedItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            &lt;asp:LinkButton id=&quot;SelectButton&quot; \n                 Text=&quot;Select&quot; \n                 CommandName=&quot;Select&quot;\n                 runat=&quot;server&quot;/&gt;\n\n            Item &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;SelectedItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:Label id=&quot;QtyLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:Label id=&quot;PriceLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/SelectedItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataListItemCommand2#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Select Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataList control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;Item&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;Qty&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;Price&quot;, GetType(Double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 To 8 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = i * 2\n            dr(2) = 1.23 * (i + 1)\n \n            dt.Rows.Add(dr)\n         \n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n      \n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n\n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then \n         \n            ItemsList.DataSource = CreateDataSource()\n            ItemsList.DataBind()\n         \n         End If\n\n         &#39; Manually register the event-handling method for the \n         &#39; ItemCommand event.\n         AddHandler ItemsList.ItemCommand, AddressOf Item_Command\n\n      End Sub\n\n      Sub Item_Command(sender As Object, e As DataListCommandEventArgs) \n        \n         &#39; Set the SelectedIndex property to select an item in the DataList.\n         ItemsList.SelectedIndex = e.Item.ItemIndex\n\n         &#39; Rebind the data source to the DataList to refresh the control.\n         ItemsList.DataSource = CreateDataSource()\n         ItemsList.DataBind()\n\n      End Sub\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Select Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Select&lt;/b&gt; to select an item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;           \n           OnItemCommand=&quot;Item_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;SelectedItemStyle BackColor=&quot;Yellow&quot;&gt;\n         &lt;/SelectedItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            &lt;asp:LinkButton id=&quot;SelectButton&quot; \n                 Text=&quot;Select&quot; \n                 CommandName=&quot;Select&quot;\n                 runat=&quot;server&quot;/&gt;\n\n            Item &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;SelectedItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:Label id=&quot;QtyLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:Label id=&quot;PriceLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/SelectedItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataListItemCommand2#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Select Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataList control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(double)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = i * 2;\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n\n      }\n \n      void Page_Load(Object sender, EventArgs e) \n      {\n\n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsList.DataSource = CreateDataSource();\n            ItemsList.DataBind();\n         }\n\n         // Manually register the event-handling method for the \n         // ItemCommand event.\n         ItemsList.ItemCommand += \n             new DataListCommandEventHandler(this.Item_Command);\n\n      }\n\n      void Item_Command(Object sender, DataListCommandEventArgs e) \n      {\n        \n         // Set the SelectedIndex property to select an item in the DataList.\n         ItemsList.SelectedIndex = e.Item.ItemIndex;\n\n         // Rebind the data source to the DataList to refresh the control.\n         ItemsList.DataSource = CreateDataSource();\n         ItemsList.DataBind();\n\n      }\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Select Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Select&lt;/b&gt; to select an item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;           \n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;SelectedItemStyle BackColor=&quot;Yellow&quot;&gt;\n         &lt;/SelectedItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            &lt;asp:LinkButton id=&quot;SelectButton&quot; \n                 Text=&quot;Select&quot; \n                 CommandName=&quot;Select&quot;\n                 runat=&quot;server&quot;/&gt;\n\n            Item &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;SelectedItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:Label id=&quot;QtyLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:Label id=&quot;PriceLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/SelectedItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_OnItemCreated_System_Web_UI_WebControls_DataListItemEventArgs_\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_OnItemCreated_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnItemCreated(DataListItemEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_ItemCreated\" data-linktype=\"relative-path\">ItemCreated</a> event. This allows you to provide a custom handler for the event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnItemCreated (System.Web.UI.WebControls.DataListItemEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.datalistitemeventargs\" data-linktype=\"relative-path\">DataListItemEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.datalistitemeventargs\" data-linktype=\"relative-path\">DataListItemEventArgs</a> that contains event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the OnItemCreated method to provide a custom handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_ItemCreated\" data-linktype=\"relative-path\">ItemCreated</a> event.  </p>\n<p> The <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_ItemCreated\" data-linktype=\"relative-path\">ItemCreated</a> event is raised when an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control is created, both during round-trips and at the time data is bound to the control.  </p>\n<p> The <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_ItemCreated\" data-linktype=\"relative-path\">ItemCreated</a> event is commonly used to control the content and appearance of a row in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<p> Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/How%20to:%20Consume%20Events%20in%20a%20Web%20Forms%20Application.md\" data-linktype=\"relative-path\">How to: Consume Events in a Web Forms Application</a>.  </p>\n<p> The OnItemCreated method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to specify and code a handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_ItemCreated\" data-linktype=\"relative-path\">ItemCreated</a> event to display the order in which items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control are created.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"DataListItemCreated#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataList control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 To 8 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Description for item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n \n            dt.Rows.Add(dr)\n\n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n\n      End Function\n \n \n      Sub Page_Load(sender As Object, e As EventArgs) \n\n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then\n         \n            ItemsList.DataSource = CreateDataSource()\n            ItemsList.DataBind()\n         \n         End If\n\n      End Sub\n\n      Sub Item_Created(sender As Object, e As DataListItemEventArgs)\n\n         If e.Item.ItemType = ListItemType.Item Or _\n             e.Item.ItemType = ListItemType.AlternatingItem Then\n\n\n            &#39; Retrieve the Label control in the current DataListItem.\n            Dim PriceLabel As Label = _\n                CType(e.Item.FindControl(&quot;PriceLabel&quot;), Label)\n\n            &#39; Retrieve the text of the CurrencyColumn from the DataListItem\n            &#39; and convert the value to a Double.\n            Dim Price As Double = Convert.ToDouble( _\n                (CType(e.Item.DataItem, DataRowView)).Row.ItemArray(2).ToString())\n\n            &#39; Format the value as currency and redisplay it in the DataList.\n            PriceLabel.Text = Price.ToString(&quot;c&quot;)\n\n         End If\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList ItemCreated Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList ItemCreated Example&lt;/h3&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;3&quot;\n           OnItemCreated=&quot;Item_Created&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: \n            &lt;asp:Label id=&quot;PriceLabel&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataListItemCreated#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataList control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Description for item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n\n      }\n \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n\n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsList.DataSource = CreateDataSource();\n            ItemsList.DataBind();\n         }\n\n      }\n\n      void Item_Created(Object sender, DataListItemEventArgs e)\n      {\n\n         if (e.Item.ItemType == ListItemType.Item || \n             e.Item.ItemType == ListItemType.AlternatingItem)\n         {\n\n            // Retrieve the Label control in the current DataListItem.\n            Label PriceLabel = (Label)e.Item.FindControl(&quot;PriceLabel&quot;);\n\n            // Retrieve the text of the CurrencyColumn from the DataListItem\n            // and convert the value to a Double.\n            Double Price = Convert.ToDouble(\n                ((DataRowView)e.Item.DataItem).Row.ItemArray[2].ToString());\n\n            // Format the value as currency and redisplay it in the DataList.\n            PriceLabel.Text = Price.ToString(&quot;c&quot;);\n\n         }\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList ItemCreated Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList ItemCreated Example&lt;/h3&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;3&quot;\n           OnItemCreated=&quot;Item_Created&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: \n            &lt;asp:Label id=&quot;PriceLabel&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataListItemCreated2#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataList control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Description for item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n\n      }\n \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n\n         // Manually register the event-handling method for the \n         // ItemCommand event.\n         ItemsList.ItemCreated += \n             new DataListItemEventHandler(this.Item_Created);\n\n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsList.DataSource = CreateDataSource();\n            ItemsList.DataBind();\n         }\n\n      }\n\n      void Item_Created(Object sender, DataListItemEventArgs e)\n      {\n\n         if (e.Item.ItemType == ListItemType.Item || \n             e.Item.ItemType == ListItemType.AlternatingItem)\n         {\n\n            // Retrieve the Label control in the current DataListItem.\n            Label PriceLabel = (Label)e.Item.FindControl(&quot;PriceLabel&quot;);\n\n            // Retrieve the text of the CurrencyColumn from the DataListItem\n            // and convert the value to a Double.\n            Double Price = Convert.ToDouble(\n                ((DataRowView)e.Item.DataItem).Row.ItemArray[2].ToString());\n\n            // Format the value as currency and redisplay it in the DataList.\n            PriceLabel.Text = Price.ToString(&quot;c&quot;);\n\n         }\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList ItemCreated Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList ItemCreated Example&lt;/h3&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;3&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: \n            &lt;asp:Label id=&quot;PriceLabel&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataListItemCreated2#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataList control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 To 8 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Description for item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n \n            dt.Rows.Add(dr)\n\n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n\n      End Function\n \n \n      Sub Page_Load(sender As Object, e As EventArgs) \n\n         &#39; Manually register the event-handling method for the \n         &#39; ItemCommand event.\n         AddHandler ItemsList.ItemCreated, AddressOf Item_Created\n\n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then\n         \n            ItemsList.DataSource = CreateDataSource()\n            ItemsList.DataBind()\n         \n         End If\n\n      End Sub\n\n      Sub Item_Created(sender As Object, e As DataListItemEventArgs)\n\n         If e.Item.ItemType = ListItemType.Item Or _\n             e.Item.ItemType = ListItemType.AlternatingItem Then\n\n\n            &#39; Retrieve the Label control in the current DataListItem.\n            Dim PriceLabel As Label = CType( _\n                e.Item.FindControl(&quot;PriceLabel&quot;), Label)\n\n            &#39; Retrieve the text of the CurrencyColumn from the DataListItem\n            &#39; and convert the value to a Double.\n            Dim Price As Double = Convert.ToDouble( _\n                (CType(e.Item.DataItem, DataRowView)).Row.ItemArray(2).ToString())\n\n            &#39; Format the value as currency and redisplay it in the DataList.\n            PriceLabel.Text = Price.ToString(&quot;c&quot;)\n\n         End If\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList ItemCreated Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList ItemCreated Example&lt;/h3&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;3&quot;\n           OnItemCreated=&quot;Item_Created&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: \n            &lt;asp:Label id=&quot;PriceLabel&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_OnItemDataBound_System_Web_UI_WebControls_DataListItemEventArgs_\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_OnItemDataBound_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnItemDataBound(DataListItemEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_ItemDataBound\" data-linktype=\"relative-path\">ItemDataBound</a> event. This allows you to provide a custom handler for the event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnItemDataBound (System.Web.UI.WebControls.DataListItemEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.datalistitemeventargs\" data-linktype=\"relative-path\">DataListItemEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.datalistitemeventargs\" data-linktype=\"relative-path\">DataListItemEventArgs</a> that contains event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the OnItemDataBound method to provide a custom handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_ItemDataBound\" data-linktype=\"relative-path\">ItemDataBound</a> event.  </p>\n<p> The <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_ItemDataBound\" data-linktype=\"relative-path\">ItemDataBound</a> event is raised after an item is data bound to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. This event provides you with the last opportunity to access the data item before it is displayed on the client. After this event is raised, the data item is no longer available.  </p>\n<p> Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/How%20to:%20Consume%20Events%20in%20a%20Web%20Forms%20Application.md\" data-linktype=\"relative-path\">How to: Consume Events in a Web Forms Application</a>.  </p>\n<p> The OnItemDataBound method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to specify and code a handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_ItemDataBound\" data-linktype=\"relative-path\">ItemDataBound</a> event to display the order in which items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control are bound to the control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"DataListItemDataBound#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataList control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Description for item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n\n      }\n \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n\n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsList.DataSource = CreateDataSource();\n            ItemsList.DataBind();\n         }\n\n      }\n\n      void Item_Bound(Object sender, DataListItemEventArgs e)\n      {\n\n         if (e.Item.ItemType == ListItemType.Item || \n             e.Item.ItemType == ListItemType.AlternatingItem)\n         {\n\n            // Retrieve the Label control in the current DataListItem.\n            Label PriceLabel = (Label)e.Item.FindControl(&quot;PriceLabel&quot;);\n\n            // Retrieve the text of the CurrencyColumn from the DataListItem\n            // and convert the value to a Double.\n            Double Price = Convert.ToDouble(\n                ((DataRowView)e.Item.DataItem).Row.ItemArray[2].ToString());\n\n            // Format the value as currency and redisplay it in the DataList.\n            PriceLabel.Text = Price.ToString(&quot;c&quot;);\n\n         }\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList ItemDataBound Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList ItemDataBound Example&lt;/h3&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;3&quot;\n           OnItemDataBound=&quot;Item_Bound&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: \n            &lt;asp:Label id=&quot;PriceLabel&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataListItemDataBound#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataList control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 To 8 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Description for item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n \n            dt.Rows.Add(dr)\n\n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n\n      End Function\n \n \n      Sub Page_Load(sender As Object, e As EventArgs) \n\n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then\n         \n            ItemsList.DataSource = CreateDataSource()\n            ItemsList.DataBind()\n         \n         End If\n\n      End Sub\n\n      Sub Item_Bound(sender As Object, e As DataListItemEventArgs)\n\n         If e.Item.ItemType = ListItemType.Item Or _\n             e.Item.ItemType = ListItemType.AlternatingItem Then\n\n\n            &#39; Retrieve the Label control in the current DataListItem.\n            Dim PriceLabel As Label = _\n                CType(e.Item.FindControl(&quot;PriceLabel&quot;), Label)\n\n            &#39; Retrieve the text of the CurrencyColumn from the DataListItem\n            &#39; and convert the value to a Double.\n            Dim Price As Double = Convert.ToDouble( _\n                (CType(e.Item.DataItem, DataRowView)).Row.ItemArray(2).ToString())\n\n            &#39; Format the value as currency and redisplay it in the DataList.\n            PriceLabel.Text = Price.ToString(&quot;c&quot;)\n\n         End If\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList ItemDataBound Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList ItemDataBound Example&lt;/h3&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;3&quot;\n           OnItemDataBound=&quot;Item_Bound&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: \n            &lt;asp:Label id=&quot;PriceLabel&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataListItemDataBound2#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataList control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 To 8 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Description for item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n \n            dt.Rows.Add(dr)\n\n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n\n      End Function\n \n \n      Sub Page_Load(sender As Object, e As EventArgs)\n\n         &#39; Manually register the event-handling method for the \n         &#39; ItemCommand event.\n         AddHandler ItemsList.ItemDataBound, AddressOf Item_Bound \n\n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then\n         \n            ItemsList.DataSource = CreateDataSource()\n            ItemsList.DataBind()\n         \n         End If\n\n      End Sub\n\n      Sub Item_Bound(sender As Object, e As DataListItemEventArgs)\n\n         If e.Item.ItemType = ListItemType.Item Or _\n             e.Item.ItemType = ListItemType.AlternatingItem Then\n\n            &#39; Retrieve the Label control in the current DataListItem.\n            Dim PriceLabel As Label = _\n                CType(e.Item.FindControl(&quot;PriceLabel&quot;), Label)\n\n            &#39; Retrieve the text of the CurrencyColumn from the DataListItem\n            &#39; and convert the value to a Double.\n            Dim Price As Double = Convert.ToDouble( _\n                (CType(e.Item.DataItem, DataRowView)).Row.ItemArray(2).ToString())\n\n            &#39; Format the value as currency and redisplay it in the DataList.\n            PriceLabel.Text = Price.ToString(&quot;c&quot;)\n\n         End If\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList ItemDataBound Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList ItemDataBound Example&lt;/h3&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;3&quot;\n           OnItemDataBound=&quot;Item_Bound&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: \n            &lt;asp:Label id=&quot;PriceLabel&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataListItemDataBound2#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataList control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Description for item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n\n      }\n \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n\n         // Manually register the event-handling method for the \n         // ItemCommand event.\n         ItemsList.ItemDataBound += \n             new DataListItemEventHandler(this.Item_Bound);\n\n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsList.DataSource = CreateDataSource();\n            ItemsList.DataBind();\n         }\n\n      }\n\n      void Item_Bound(Object sender, DataListItemEventArgs e)\n      {\n\n         if (e.Item.ItemType == ListItemType.Item || \n             e.Item.ItemType == ListItemType.AlternatingItem)\n         {\n\n            // Retrieve the Label control in the current DataListItem.\n            Label PriceLabel = (Label)e.Item.FindControl(&quot;PriceLabel&quot;);\n\n            // Retrieve the text of the CurrencyColumn from the DataListItem\n            // and convert the value to a Double.\n            Double Price = Convert.ToDouble(\n                ((DataRowView)e.Item.DataItem).Row.ItemArray[2].ToString());\n\n            // Format the value as currency and redisplay it in the DataList.\n            PriceLabel.Text = Price.ToString(&quot;c&quot;);\n\n         }\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList ItemDataBound Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList ItemDataBound Example&lt;/h3&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;3&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: \n            &lt;asp:Label id=&quot;PriceLabel&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_OnUpdateCommand_System_Web_UI_WebControls_DataListCommandEventArgs_\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_OnUpdateCommand_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnUpdateCommand(DataListCommandEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_UpdateCommand\" data-linktype=\"relative-path\">UpdateCommand</a> event. This allows you to provide a custom handler for the event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnUpdateCommand (System.Web.UI.WebControls.DataListCommandEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.datalistcommandeventargs\" data-linktype=\"relative-path\">DataListCommandEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.datalistitemeventargs\" data-linktype=\"relative-path\">DataListItemEventArgs</a> that contains event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the OnUpdateCommand method to provide a custom handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_UpdateCommand\" data-linktype=\"relative-path\">UpdateCommand</a> event.  </p>\n<p> The <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_UpdateCommand\" data-linktype=\"relative-path\">UpdateCommand</a> event is raised when the <code>Update</code> button for an item is clicked.  </p>\n<p> A typical handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_UpdateCommand\" data-linktype=\"relative-path\">UpdateCommand</a> event updates the data, sets the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_EditItemIndex_\" data-linktype=\"relative-path\">EditItemIndex</a> property to <code>-1</code> (to deselect the item), and then rebinds the data to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see <a href=\"../Topic/Securing%20Standard%20Controls.md\" data-linktype=\"relative-path\">Securing Standard Controls</a>, <a href=\"../Topic/How%20to:%20Protect%20Against%20Script%20Exploits%20in%20a%20Web%20Application%20by%20Applying%20HTML%20Encoding%20to%20Strings.md\" data-linktype=\"relative-path\">How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings</a>, and <a href=\"../Topic/Validating%20User%20Input%20in%20ASP.NET%20Web%20Pages.md\" data-linktype=\"relative-path\">Validating User Input in ASP.NET Web Pages</a>.  </p>\n</div>\n<p> Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/How%20to:%20Consume%20Events%20in%20a%20Web%20Forms%20Application.md\" data-linktype=\"relative-path\">How to: Consume Events in a Web Forms Application</a>.  </p>\n<p> The OnUpdateCommand method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to specify and code a handler for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_UpdateCommand\" data-linktype=\"relative-path\">UpdateCommand</a> event. It allows you to update the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control with the new values entered by the user when the <code>Update</code> button is clicked.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"DataListEdit#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      // The Cart and CartView objects temporarily store the data source\n      // for the DataList control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. \n         // Because the data source in this example is an in-memory\n         // DataTable, retrieve the data from session state if it exists;\n         // otherwise, create the data source.\n         GetSource();\n\n         // The DataList control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the\n         // page is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindList();\n\n         }\n                   \n      }\n\n      void BindList() \n      {\n\n         // Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView;\n         ItemsList.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that \n         // is stored in session state. If the data source does not exist,\n         // create it; otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void Edit_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked\n         // in the DataList control to enable editing for that item. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex;\n         BindList();\n\n      }\n\n      void Cancel_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Delete_Command(Object sender, DataListCommandEventArgs e) \n      { \n\n         // Retrieve the name of the item to remove.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Update_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Retrieve the updated values from the selected item.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n         String qty = ((TextBox)e.Item.FindControl(&quot;QtyTextBox&quot;)).Text;\n         String price = ((TextBox)e.Item.FindControl(&quot;PriceTextBox&quot;)).Text;\n\n         // With a database, use an update command to update the data.\n         // Because the data source in this example is an in-memory \n         // DataTable, delete the old row and replace it with a new one.\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // ***************************************************************\n         // Insert data validation code here. Make sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add a new entry to replace the previous item.\n         DataRow dr = Cart.NewRow();\n         dr[0] = qty;\n         dr[1] = item;\n         // If necessary, remove the &#39;$&#39; character from the price before\n         // converting the price to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n         Cart.Rows.Add(dr);\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DataList to the data source to refresh\n         // the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           OnEditCommand=&quot;Edit_Command&quot;\n           OnUpdateCommand=&quot;Update_Command&quot;\n           OnDeleteCommand=&quot;Delete_Command&quot;\n           OnCancelCommand=&quot;Cancel_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataListEdit#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataList control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView\n \n      Sub Page_Load(sende As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data.\n         &#39; Because the data source in this example is an in-memory\n         &#39; DataTable, retrieve the data from session state if it exists;\n         &#39; otherwise, create the data source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the\n         &#39; page is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindList()\n\n         End If\n                   \n      End Sub\n\n      Sub BindList() \n\n         &#39; Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView\n         ItemsList.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that\n         &#39; is stored in session state. If the data source does not exist,\n         &#39; create it; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values\n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub Edit_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked\n         &#39; in the DataList control to enable editing for that item. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex\n         BindList()\n\n      End Sub\n\n      Sub Cancel_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Delete_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the name of the item to remove.\n         Dim item As String = (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n\n         &#39; Filter the CartView for the selected item and remove it from\n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure \n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Update_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the updated values from the selected item.\n         Dim item As String = _\n             (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n         Dim qty As String = _\n             (CType(e.Item.FindControl(&quot;QtyTextBox&quot;), TextBox)).Text\n         Dim price As String = _\n             (CType(e.Item.FindControl(&quot;PriceTextBox&quot;), TextBox)).Text\n\n         &#39; With a database, use an update command to update the data.\n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n\n         &#39; Filter the CartView for the selected item and remove it from \n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Make sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add a new entry to replace the previous item.\n         Dim dr As DataRow = Cart.NewRow()\n         dr(0) = qty\n         dr(1) = item\n         &#39; If necessary, remove the &#39;$&#39; character from the price before \n         &#39; converting the price to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n\n            dr(2) = Convert.ToDouble(price.Substring(1))\n\n         Else\n\n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DataList to the data source to refresh \n         &#39; the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           OnEditCommand=&quot;Edit_Command&quot;\n           OnUpdateCommand=&quot;Update_Command&quot;\n           OnDeleteCommand=&quot;Delete_Command&quot;\n           OnCancelCommand=&quot;Cancel_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataListEdit2#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataList control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView\n \n      Sub Page_Load(sende As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data.\n         &#39; Because the data source in this example is an in-memory\n         &#39; DataTable, retrieve the data from session state if it exists;\n         &#39; otherwise, create the data source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the\n         &#39; page is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindList()\n\n         End If\n\n         &#39; Manually register the event-handling methods.\n         AddHandler ItemsList.EditCommand, AddressOf Edit_Command\n         AddHandler ItemsList.UpdateCommand, AddressOf Update_Command\n         AddHandler ItemsList.DeleteCommand, AddressOf Delete_Command\n         AddHandler ItemsList.CancelCommand, AddressOf Cancel_Command\n                   \n      End Sub\n\n      Sub BindList() \n\n         &#39; Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView\n         ItemsList.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that\n         &#39; is stored in session state. If the data source does not exist,\n         &#39; create it; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values\n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub Edit_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked\n         &#39; in the DataList control to enable editing for that item. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex\n         BindList()\n\n      End Sub\n\n      Sub Cancel_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Delete_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the name of the item to remove.\n         Dim item As String = (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n\n         &#39; Filter the CartView for the selected item and remove it from \n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure \n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Update_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the updated values from the selected item.\n         Dim item As String = _\n             (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n         Dim qty As String = _\n             (CType(e.Item.FindControl(&quot;QtyTextBox&quot;), TextBox)).Text\n         Dim price As String = _\n             (CType(e.Item.FindControl(&quot;PriceTextBox&quot;), TextBox)).Text\n\n         &#39; With a database, use an update command to update the data.\n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n\n         &#39; Filter the CartView for the selected item and remove it from \n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Make sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add a new entry to replace the previous item.\n         Dim dr As DataRow = Cart.NewRow()\n         dr(0) = qty\n         dr(1) = item\n         &#39; If necessary, remove the &#39;$&#39; character from the price before \n         &#39; converting the price to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n\n            dr(2) = Convert.ToDouble(price.Substring(1))\n\n         Else\n\n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DataList to the data source to refresh \n         &#39; the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           OnEditCommand=&quot;Edit_Command&quot;\n           OnUpdateCommand=&quot;Update_Command&quot;\n           OnDeleteCommand=&quot;Delete_Command&quot;\n           OnCancelCommand=&quot;Cancel_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataListEdit2#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      // The Cart and CartView objects temporarily store the data source\n      // for the DataList control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. \n         // Because the data source in this example is an in-memory\n         // DataTable, retrieve the data from session state if it exists;\n         // otherwise, create the data source.\n         GetSource();\n\n         // The DataList control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the\n         // page is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindList();\n\n         }\n\n         // Manually register the event-handling methods.\n         ItemsList.EditCommand += \n             new DataListCommandEventHandler(this.Edit_Command);\n         ItemsList.UpdateCommand += \n             new DataListCommandEventHandler(this.Update_Command);\n         ItemsList.DeleteCommand += \n             new DataListCommandEventHandler(this.Delete_Command);\n         ItemsList.CancelCommand += \n             new DataListCommandEventHandler(this.Cancel_Command);\n                   \n      }\n\n      void BindList() \n      {\n\n         // Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView;\n         ItemsList.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that \n         // is stored in session state. If the data source does not exist,\n         // create it; otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values\n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void Edit_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked\n         // in the DataList control to enable editing for that item. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex;\n         BindList();\n\n      }\n\n      void Cancel_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Delete_Command(Object sender, DataListCommandEventArgs e) \n      { \n\n         // Retrieve the name of the item to remove.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Update_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Retrieve the updated values from the selected item.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n         String qty = ((TextBox)e.Item.FindControl(&quot;QtyTextBox&quot;)).Text;\n         String price = ((TextBox)e.Item.FindControl(&quot;PriceTextBox&quot;)).Text;\n\n         // With a database, use an update command to update the data.\n         // Because the data source in this example is an in-memory \n         // DataTable, delete the old row and replace it with a new one.\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // ***************************************************************\n         // Insert data validation code here. Make sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add a new entry to replace the previous item.\n         DataRow dr = Cart.NewRow();\n         dr[0] = qty;\n         dr[1] = item;\n         // If necessary, remove the &#39;$&#39; character from the price before\n         // converting the price to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n         Cart.Rows.Add(dr);\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DataList to the data source to refresh\n         // the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_PrepareControlHierarchy\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_PrepareControlHierarchy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PrepareControlHierarchy()</div>        \r\n          </div>\r\n    \r\n            <p>Prepares the control hierarchy for rendering in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void PrepareControlHierarchy ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The PrepareControlHierarchy method is used primarily by control developers when deriving a custom control from the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<p> The PrepareControlHierarchy prepares the control hierarchy and sets styles for contained <a class=\"xref\" href=\"system.web.ui.webcontrols.datalistitem\" data-linktype=\"relative-path\">DataListItem</a> controls before the child controls are rendered.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_RenderContents_System_Web_UI_HtmlTextWriter_\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_RenderContents_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RenderContents(HtmlTextWriter)</div>        \r\n          </div>\r\n    \r\n            <p>Renders the list items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void RenderContents (System.Web.UI.HtmlTextWriter writer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.htmltextwriter\" data-linktype=\"relative-path\">HtmlTextWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.htmltextwriter\" data-linktype=\"relative-path\">HtmlTextWriter</a> that represents the output stream to render HTML content on the client.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The RenderContents method is used primarily by control developers, when deriving a custom control from the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<p> The RenderContents method renders the inner content of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control, including the contained <a class=\"xref\" href=\"system.web.ui.webcontrols.datalistitem\" data-linktype=\"relative-path\">DataListItem</a> controls.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to override the RenderContents method in a custom server control so that some text precedes the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> object.  </p>\n<pre><code class=\"lang-cs\" name=\"CustomDataListRenderContents#1\">&lt;%@ Register TagPrefix=&quot;aspSample&quot; Namespace=&quot;Samples.AspNet&quot; Assembly=&quot;Samples.AspNet.CS&quot; %&gt;\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n    &lt;head&gt;\n        &lt;title&gt;Custom DataList - RenderContents - C# Example&lt;/title&gt;\n        &lt;script runat=&quot;server&quot;&gt;\n          private void Page_Load(object sender, System.EventArgs e)\n          {\n        // Create sample data for the DataList control.\n        System.Data.DataTable dt = new System.Data.DataTable();\n        System.Data.DataRow dr;\n        dt.Columns.Add(new System.Data.DataColumn(&quot;Column1&quot;, typeof(String)));\n        \n        dr = dt.NewRow();\n        dr[0] = &quot;Hello&quot;;\n        dt.Rows.Add(dr);\n        \n        dr = dt.NewRow();\n        dr[0] = &quot;DataList&quot;;\n        dt.Rows.Add(dr);\n        \n        dr = dt.NewRow();\n        dr[0] = &quot;World&quot;;\n        dt.Rows.Add(dr);\n\n        // Show the DataTable values in the DataList.\n              DataList1.DataSource = dt;\n        DataList1.DataBind();\n        }        \n        &lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form id=&quot;Form1&quot; method=&quot;post&quot; runat=&quot;server&quot;&gt;\n            &lt;h3&gt;Custom DataList - RenderContents - C# Example&lt;/h3&gt;\n\n            &lt;aspSample:CustomDataListRenderContents id=&quot;DataList1&quot; runat=&quot;server&quot; \n                BorderColor=&quot;#999999&quot; BorderStyle=&quot;None&quot; BackColor=&quot;White&quot; CellPadding=&quot;3&quot; \n                GridLines=&quot;Vertical&quot; BorderWidth=&quot;1px&quot; Width=&quot;100px&quot;&gt;\n        \n          &lt;HeaderStyle Font-Bold=&quot;True&quot; ForeColor=&quot;White&quot; BackColor=&quot;#000084&quot; /&gt;\n          &lt;HeaderTemplate&gt;\n              &lt;asp:Label id=&quot;Label1&quot; runat=&quot;server&quot;&gt;Column1&lt;/asp:Label&gt;\n          &lt;/HeaderTemplate&gt;\n\n          &lt;ItemStyle ForeColor=&quot;Black&quot; BackColor=&quot;#EEEEEE&quot; /&gt;\n          &lt;ItemTemplate&gt;\n              &lt;asp:Label id=&quot;Label2&quot; runat=&quot;server&quot;&gt;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Column1&quot;) %&gt;&lt;/asp:Label&gt;\n          &lt;/ItemTemplate&gt;\n\n          &lt;AlternatingItemStyle BackColor=&quot;#DCDCDC&quot; /&gt;\n          &lt;AlternatingItemTemplate&gt;\n              &lt;asp:Label id=&quot;Label3&quot; runat=&quot;server&quot;&gt;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Column1&quot;) %&gt;&lt;/asp:Label&gt;\n          &lt;/AlternatingItemTemplate&gt;\n          \n      &lt;/aspSample:CustomDataListRenderContents&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"CustomDataListRenderContents#1\">&lt;%@ Register TagPrefix=&quot;aspSample&quot; Namespace=&quot;Samples.AspNet.VB.Controls&quot; Assembly=&quot;Samples.AspNet.VB&quot; %&gt;\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head&gt;\n    &lt;title&gt;Custom DataList - RenderContents - VB.NET Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;form id=&quot;Form1&quot; method=&quot;post&quot; runat=&quot;server&quot;&gt;\n      &lt;h3&gt;Custom DataList - RenderContents - VB.NET Example&lt;/h3&gt;\n      &lt;aspSample:CustomDataListRenderContents id=&quot;DataList1&quot; runat=&quot;server&quot; /&gt;\n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"CustomDataListRenderContents#2\">using System.Web;\nusing System.Security.Permissions;\n\nnamespace Samples.AspNet\n{\n    [AspNetHostingPermission(SecurityAction.Demand, Level = AspNetHostingPermissionLevel.Minimal)]\n    public sealed class CustomDataListRenderContents : System.Web.UI.WebControls.DataList\n    {\n        protected override void RenderContents(System.Web.UI.HtmlTextWriter writer)\n        {\n            // Place some text before the DataList.\n            writer.Write(&quot;Here is some text from the RenderContent method.&lt;br&gt;&quot;);\n\n            // Call the base RenderContents method.\n            base.RenderContents(writer);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"CustomDataListRenderContents#2\">Imports System.Web\nImports System.Security.Permissions\n\nNamespace Samples.AspNet.VB.Controls\n    &lt;AspNetHostingPermission(SecurityAction.Demand, Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n    Public NotInheritable Class CustomDataListRenderContents\n        Inherits System.Web.UI.WebControls.DataList\n\n        Protected Overrides Sub RenderContents(ByVal writer As System.Web.UI.HtmlTextWriter)\n\n            &#39; Place some text before the DataList.\n            writer.Write(&quot;Here is some text from the RenderContent method.&lt;br&gt;&quot;)\n\n            &#39; Call the base RenderContents method.\n            MyBase.RenderContents(writer)\n        End Sub\n    End Class\nEnd Namespace\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_SaveViewState\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_SaveViewState_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SaveViewState()</div>        \r\n          </div>\r\n    \r\n            <p>Saves the changes to the control view state since the time the page was posted back to the server.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override object SaveViewState ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The object that contains the changes to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> view state.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The SaveViewState method is used primarily by control developers.  </p>\n<p> View state is the accumulation of the values of a server control&#39;s properties. These values are automatically placed in the server control&#39;s <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ViewState_\" data-linktype=\"relative-path\">ViewState</a> property, which is an instance of the <a class=\"xref\" href=\"system.web.ui.statebag\" data-linktype=\"relative-path\">StateBag</a> class. The <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ViewState_\" data-linktype=\"relative-path\">ViewState</a> property&#39;s value is then persisted to a string object after the save-state stage of the server control&#39;s life cycle. For more information, see <a href=\"../Topic/ASP.NET%20Page%20Life%20Cycle%20Overview.md\" data-linktype=\"relative-path\">ASP.NET Page Life Cycle Overview</a>.  </p>\n<p> When view state is saved, this string object is returned to the client as a variable that is stored in a hidden HTML input element. When you author custom server controls, you can improve efficiency by overriding the SaveViewState method and modifying the <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_ViewState_\" data-linktype=\"relative-path\">ViewState</a> property for your server control. For more information, see <a href=\"../Topic/Developing%20Custom%20ASP.NET%20Server%20Controls.md\" data-linktype=\"relative-path\">Developing Custom ASP.NET Server Controls</a> and <a href=\"../Topic/ASP.NET%20State%20Management%20Overview.md\" data-linktype=\"relative-path\">ASP.NET State Management Overview</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_TrackViewState\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_TrackViewState_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TrackViewState()</div>        \r\n          </div>\r\n    \r\n            <p>Tracks view-state changes to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control so they can be stored in the control&#39;s <span class=\"xref\">stem.Web.UI.Control.ViewState*</span> property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void TrackViewState ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The TrackViewState method is overridden to mark the starting point at which to begin tracking and saving changes to the control as part of the control&#39;s view state.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"events\">\r\n        <h2>Events\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_CancelCommand\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CancelCommand</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the <code>Cancel</code> button is clicked for an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Web.UI.WebControls.DataListCommandEventHandler CancelCommand;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The CancelCommand event is raised when the <code>Cancel</code> button is clicked for an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<p> A typical handler for the CancelCommand event sets the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_EditItemIndex_\" data-linktype=\"relative-path\">EditItemIndex</a> property to <code>-1</code> (to deselect the item) and then rebinds the data to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Text is not HTML encoded before it is displayed in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. This makes it possible to embed script within HTML tags in the text. If the values for the control come from user input, be sure to validate the values to reduce security vulnerabilities.  </p>\n</div>\n<p> For more information about handling events, see <a href=\"../Topic/How%20to:%20Consume%20Events%20in%20a%20Web%20Forms%20Application.md\" data-linktype=\"relative-path\">How to: Consume Events in a Web Forms Application</a>.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see <a href=\"../Topic/Securing%20Standard%20Controls.md\" data-linktype=\"relative-path\">Securing Standard Controls</a>, <a href=\"../Topic/How%20to:%20Protect%20Against%20Script%20Exploits%20in%20a%20Web%20Application%20by%20Applying%20HTML%20Encoding%20to%20Strings.md\" data-linktype=\"relative-path\">How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings</a>, and <a href=\"../Topic/Validating%20User%20Input%20in%20ASP.NET%20Web%20Pages.md\" data-linktype=\"relative-path\">Validating User Input in ASP.NET Web Pages</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to specify and code a handler for the CancelCommand event. It cancels any edits made to an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control when the <code>Cancel</code> button is clicked.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"DataListEdit#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      // The Cart and CartView objects temporarily store the data source\n      // for the DataList control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. \n         // Because the data source in this example is an in-memory\n         // DataTable, retrieve the data from session state if it exists;\n         // otherwise, create the data source.\n         GetSource();\n\n         // The DataList control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the\n         // page is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindList();\n\n         }\n                   \n      }\n\n      void BindList() \n      {\n\n         // Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView;\n         ItemsList.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that \n         // is stored in session state. If the data source does not exist,\n         // create it; otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void Edit_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked\n         // in the DataList control to enable editing for that item. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex;\n         BindList();\n\n      }\n\n      void Cancel_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Delete_Command(Object sender, DataListCommandEventArgs e) \n      { \n\n         // Retrieve the name of the item to remove.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Update_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Retrieve the updated values from the selected item.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n         String qty = ((TextBox)e.Item.FindControl(&quot;QtyTextBox&quot;)).Text;\n         String price = ((TextBox)e.Item.FindControl(&quot;PriceTextBox&quot;)).Text;\n\n         // With a database, use an update command to update the data.\n         // Because the data source in this example is an in-memory \n         // DataTable, delete the old row and replace it with a new one.\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // ***************************************************************\n         // Insert data validation code here. Make sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add a new entry to replace the previous item.\n         DataRow dr = Cart.NewRow();\n         dr[0] = qty;\n         dr[1] = item;\n         // If necessary, remove the &#39;$&#39; character from the price before\n         // converting the price to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n         Cart.Rows.Add(dr);\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DataList to the data source to refresh\n         // the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           OnEditCommand=&quot;Edit_Command&quot;\n           OnUpdateCommand=&quot;Update_Command&quot;\n           OnDeleteCommand=&quot;Delete_Command&quot;\n           OnCancelCommand=&quot;Cancel_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataListEdit#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataList control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView\n \n      Sub Page_Load(sende As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data.\n         &#39; Because the data source in this example is an in-memory\n         &#39; DataTable, retrieve the data from session state if it exists;\n         &#39; otherwise, create the data source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the\n         &#39; page is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindList()\n\n         End If\n                   \n      End Sub\n\n      Sub BindList() \n\n         &#39; Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView\n         ItemsList.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that\n         &#39; is stored in session state. If the data source does not exist,\n         &#39; create it; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values\n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub Edit_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked\n         &#39; in the DataList control to enable editing for that item. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex\n         BindList()\n\n      End Sub\n\n      Sub Cancel_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Delete_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the name of the item to remove.\n         Dim item As String = (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n\n         &#39; Filter the CartView for the selected item and remove it from\n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure \n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Update_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the updated values from the selected item.\n         Dim item As String = _\n             (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n         Dim qty As String = _\n             (CType(e.Item.FindControl(&quot;QtyTextBox&quot;), TextBox)).Text\n         Dim price As String = _\n             (CType(e.Item.FindControl(&quot;PriceTextBox&quot;), TextBox)).Text\n\n         &#39; With a database, use an update command to update the data.\n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n\n         &#39; Filter the CartView for the selected item and remove it from \n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Make sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add a new entry to replace the previous item.\n         Dim dr As DataRow = Cart.NewRow()\n         dr(0) = qty\n         dr(1) = item\n         &#39; If necessary, remove the &#39;$&#39; character from the price before \n         &#39; converting the price to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n\n            dr(2) = Convert.ToDouble(price.Substring(1))\n\n         Else\n\n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DataList to the data source to refresh \n         &#39; the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           OnEditCommand=&quot;Edit_Command&quot;\n           OnUpdateCommand=&quot;Update_Command&quot;\n           OnDeleteCommand=&quot;Delete_Command&quot;\n           OnCancelCommand=&quot;Cancel_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataListEdit2#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataList control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView\n \n      Sub Page_Load(sende As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data.\n         &#39; Because the data source in this example is an in-memory\n         &#39; DataTable, retrieve the data from session state if it exists;\n         &#39; otherwise, create the data source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the\n         &#39; page is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindList()\n\n         End If\n\n         &#39; Manually register the event-handling methods.\n         AddHandler ItemsList.EditCommand, AddressOf Edit_Command\n         AddHandler ItemsList.UpdateCommand, AddressOf Update_Command\n         AddHandler ItemsList.DeleteCommand, AddressOf Delete_Command\n         AddHandler ItemsList.CancelCommand, AddressOf Cancel_Command\n                   \n      End Sub\n\n      Sub BindList() \n\n         &#39; Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView\n         ItemsList.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that\n         &#39; is stored in session state. If the data source does not exist,\n         &#39; create it; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values\n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub Edit_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked\n         &#39; in the DataList control to enable editing for that item. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex\n         BindList()\n\n      End Sub\n\n      Sub Cancel_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Delete_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the name of the item to remove.\n         Dim item As String = (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n\n         &#39; Filter the CartView for the selected item and remove it from \n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure \n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Update_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the updated values from the selected item.\n         Dim item As String = _\n             (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n         Dim qty As String = _\n             (CType(e.Item.FindControl(&quot;QtyTextBox&quot;), TextBox)).Text\n         Dim price As String = _\n             (CType(e.Item.FindControl(&quot;PriceTextBox&quot;), TextBox)).Text\n\n         &#39; With a database, use an update command to update the data.\n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n\n         &#39; Filter the CartView for the selected item and remove it from \n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Make sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add a new entry to replace the previous item.\n         Dim dr As DataRow = Cart.NewRow()\n         dr(0) = qty\n         dr(1) = item\n         &#39; If necessary, remove the &#39;$&#39; character from the price before \n         &#39; converting the price to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n\n            dr(2) = Convert.ToDouble(price.Substring(1))\n\n         Else\n\n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DataList to the data source to refresh \n         &#39; the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           OnEditCommand=&quot;Edit_Command&quot;\n           OnUpdateCommand=&quot;Update_Command&quot;\n           OnDeleteCommand=&quot;Delete_Command&quot;\n           OnCancelCommand=&quot;Cancel_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataListEdit2#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      // The Cart and CartView objects temporarily store the data source\n      // for the DataList control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. \n         // Because the data source in this example is an in-memory\n         // DataTable, retrieve the data from session state if it exists;\n         // otherwise, create the data source.\n         GetSource();\n\n         // The DataList control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the\n         // page is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindList();\n\n         }\n\n         // Manually register the event-handling methods.\n         ItemsList.EditCommand += \n             new DataListCommandEventHandler(this.Edit_Command);\n         ItemsList.UpdateCommand += \n             new DataListCommandEventHandler(this.Update_Command);\n         ItemsList.DeleteCommand += \n             new DataListCommandEventHandler(this.Delete_Command);\n         ItemsList.CancelCommand += \n             new DataListCommandEventHandler(this.Cancel_Command);\n                   \n      }\n\n      void BindList() \n      {\n\n         // Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView;\n         ItemsList.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that \n         // is stored in session state. If the data source does not exist,\n         // create it; otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values\n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void Edit_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked\n         // in the DataList control to enable editing for that item. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex;\n         BindList();\n\n      }\n\n      void Cancel_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Delete_Command(Object sender, DataListCommandEventArgs e) \n      { \n\n         // Retrieve the name of the item to remove.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Update_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Retrieve the updated values from the selected item.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n         String qty = ((TextBox)e.Item.FindControl(&quot;QtyTextBox&quot;)).Text;\n         String price = ((TextBox)e.Item.FindControl(&quot;PriceTextBox&quot;)).Text;\n\n         // With a database, use an update command to update the data.\n         // Because the data source in this example is an in-memory \n         // DataTable, delete the old row and replace it with a new one.\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // ***************************************************************\n         // Insert data validation code here. Make sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add a new entry to replace the previous item.\n         DataRow dr = Cart.NewRow();\n         dr[0] = qty;\n         dr[1] = item;\n         // If necessary, remove the &#39;$&#39; character from the price before\n         // converting the price to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n         Cart.Rows.Add(dr);\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DataList to the data source to refresh\n         // the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_DeleteCommand\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeleteCommand</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the <code>Delete</code> button is clicked for an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Web.UI.WebControls.DataListCommandEventHandler DeleteCommand;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The DeleteCommand event is raised when the <code>Delete</code> button is clicked for an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<p> A typical handler for the DeleteCommand event removes the selected item from the data source and then rebinds the data to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/How%20to:%20Consume%20Events%20in%20a%20Web%20Forms%20Application.md\" data-linktype=\"relative-path\">How to: Consume Events in a Web Forms Application</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to specify and code a handler for the DeleteCommand event. It deletes the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control when the <code>Delete</code> button is clicked.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"DataListEdit#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      // The Cart and CartView objects temporarily store the data source\n      // for the DataList control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. \n         // Because the data source in this example is an in-memory\n         // DataTable, retrieve the data from session state if it exists;\n         // otherwise, create the data source.\n         GetSource();\n\n         // The DataList control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the\n         // page is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindList();\n\n         }\n                   \n      }\n\n      void BindList() \n      {\n\n         // Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView;\n         ItemsList.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that \n         // is stored in session state. If the data source does not exist,\n         // create it; otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void Edit_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked\n         // in the DataList control to enable editing for that item. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex;\n         BindList();\n\n      }\n\n      void Cancel_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Delete_Command(Object sender, DataListCommandEventArgs e) \n      { \n\n         // Retrieve the name of the item to remove.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Update_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Retrieve the updated values from the selected item.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n         String qty = ((TextBox)e.Item.FindControl(&quot;QtyTextBox&quot;)).Text;\n         String price = ((TextBox)e.Item.FindControl(&quot;PriceTextBox&quot;)).Text;\n\n         // With a database, use an update command to update the data.\n         // Because the data source in this example is an in-memory \n         // DataTable, delete the old row and replace it with a new one.\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // ***************************************************************\n         // Insert data validation code here. Make sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add a new entry to replace the previous item.\n         DataRow dr = Cart.NewRow();\n         dr[0] = qty;\n         dr[1] = item;\n         // If necessary, remove the &#39;$&#39; character from the price before\n         // converting the price to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n         Cart.Rows.Add(dr);\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DataList to the data source to refresh\n         // the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           OnEditCommand=&quot;Edit_Command&quot;\n           OnUpdateCommand=&quot;Update_Command&quot;\n           OnDeleteCommand=&quot;Delete_Command&quot;\n           OnCancelCommand=&quot;Cancel_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataListEdit#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataList control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView\n \n      Sub Page_Load(sende As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data.\n         &#39; Because the data source in this example is an in-memory\n         &#39; DataTable, retrieve the data from session state if it exists;\n         &#39; otherwise, create the data source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the\n         &#39; page is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindList()\n\n         End If\n                   \n      End Sub\n\n      Sub BindList() \n\n         &#39; Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView\n         ItemsList.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that\n         &#39; is stored in session state. If the data source does not exist,\n         &#39; create it; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values\n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub Edit_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked\n         &#39; in the DataList control to enable editing for that item. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex\n         BindList()\n\n      End Sub\n\n      Sub Cancel_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Delete_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the name of the item to remove.\n         Dim item As String = (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n\n         &#39; Filter the CartView for the selected item and remove it from\n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure \n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Update_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the updated values from the selected item.\n         Dim item As String = _\n             (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n         Dim qty As String = _\n             (CType(e.Item.FindControl(&quot;QtyTextBox&quot;), TextBox)).Text\n         Dim price As String = _\n             (CType(e.Item.FindControl(&quot;PriceTextBox&quot;), TextBox)).Text\n\n         &#39; With a database, use an update command to update the data.\n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n\n         &#39; Filter the CartView for the selected item and remove it from \n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Make sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add a new entry to replace the previous item.\n         Dim dr As DataRow = Cart.NewRow()\n         dr(0) = qty\n         dr(1) = item\n         &#39; If necessary, remove the &#39;$&#39; character from the price before \n         &#39; converting the price to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n\n            dr(2) = Convert.ToDouble(price.Substring(1))\n\n         Else\n\n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DataList to the data source to refresh \n         &#39; the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           OnEditCommand=&quot;Edit_Command&quot;\n           OnUpdateCommand=&quot;Update_Command&quot;\n           OnDeleteCommand=&quot;Delete_Command&quot;\n           OnCancelCommand=&quot;Cancel_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataListEdit2#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataList control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView\n \n      Sub Page_Load(sende As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data.\n         &#39; Because the data source in this example is an in-memory\n         &#39; DataTable, retrieve the data from session state if it exists;\n         &#39; otherwise, create the data source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the\n         &#39; page is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindList()\n\n         End If\n\n         &#39; Manually register the event-handling methods.\n         AddHandler ItemsList.EditCommand, AddressOf Edit_Command\n         AddHandler ItemsList.UpdateCommand, AddressOf Update_Command\n         AddHandler ItemsList.DeleteCommand, AddressOf Delete_Command\n         AddHandler ItemsList.CancelCommand, AddressOf Cancel_Command\n                   \n      End Sub\n\n      Sub BindList() \n\n         &#39; Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView\n         ItemsList.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that\n         &#39; is stored in session state. If the data source does not exist,\n         &#39; create it; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values\n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub Edit_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked\n         &#39; in the DataList control to enable editing for that item. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex\n         BindList()\n\n      End Sub\n\n      Sub Cancel_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Delete_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the name of the item to remove.\n         Dim item As String = (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n\n         &#39; Filter the CartView for the selected item and remove it from \n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure \n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Update_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the updated values from the selected item.\n         Dim item As String = _\n             (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n         Dim qty As String = _\n             (CType(e.Item.FindControl(&quot;QtyTextBox&quot;), TextBox)).Text\n         Dim price As String = _\n             (CType(e.Item.FindControl(&quot;PriceTextBox&quot;), TextBox)).Text\n\n         &#39; With a database, use an update command to update the data.\n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n\n         &#39; Filter the CartView for the selected item and remove it from \n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Make sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add a new entry to replace the previous item.\n         Dim dr As DataRow = Cart.NewRow()\n         dr(0) = qty\n         dr(1) = item\n         &#39; If necessary, remove the &#39;$&#39; character from the price before \n         &#39; converting the price to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n\n            dr(2) = Convert.ToDouble(price.Substring(1))\n\n         Else\n\n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DataList to the data source to refresh \n         &#39; the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           OnEditCommand=&quot;Edit_Command&quot;\n           OnUpdateCommand=&quot;Update_Command&quot;\n           OnDeleteCommand=&quot;Delete_Command&quot;\n           OnCancelCommand=&quot;Cancel_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataListEdit2#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      // The Cart and CartView objects temporarily store the data source\n      // for the DataList control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. \n         // Because the data source in this example is an in-memory\n         // DataTable, retrieve the data from session state if it exists;\n         // otherwise, create the data source.\n         GetSource();\n\n         // The DataList control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the\n         // page is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindList();\n\n         }\n\n         // Manually register the event-handling methods.\n         ItemsList.EditCommand += \n             new DataListCommandEventHandler(this.Edit_Command);\n         ItemsList.UpdateCommand += \n             new DataListCommandEventHandler(this.Update_Command);\n         ItemsList.DeleteCommand += \n             new DataListCommandEventHandler(this.Delete_Command);\n         ItemsList.CancelCommand += \n             new DataListCommandEventHandler(this.Cancel_Command);\n                   \n      }\n\n      void BindList() \n      {\n\n         // Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView;\n         ItemsList.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that \n         // is stored in session state. If the data source does not exist,\n         // create it; otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values\n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void Edit_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked\n         // in the DataList control to enable editing for that item. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex;\n         BindList();\n\n      }\n\n      void Cancel_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Delete_Command(Object sender, DataListCommandEventArgs e) \n      { \n\n         // Retrieve the name of the item to remove.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Update_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Retrieve the updated values from the selected item.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n         String qty = ((TextBox)e.Item.FindControl(&quot;QtyTextBox&quot;)).Text;\n         String price = ((TextBox)e.Item.FindControl(&quot;PriceTextBox&quot;)).Text;\n\n         // With a database, use an update command to update the data.\n         // Because the data source in this example is an in-memory \n         // DataTable, delete the old row and replace it with a new one.\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // ***************************************************************\n         // Insert data validation code here. Make sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add a new entry to replace the previous item.\n         DataRow dr = Cart.NewRow();\n         dr[0] = qty;\n         dr[1] = item;\n         // If necessary, remove the &#39;$&#39; character from the price before\n         // converting the price to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n         Cart.Rows.Add(dr);\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DataList to the data source to refresh\n         // the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_EditCommand\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EditCommand</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the <code>Edit</code> button is clicked for an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Web.UI.WebControls.DataListCommandEventHandler EditCommand;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The EditCommand event is raised when the <code>Edit</code> button is clicked for an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<p> A typical handler for the EditCommand event sets the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_EditItemIndex_\" data-linktype=\"relative-path\">EditItemIndex</a> property to the selected row and then rebinds the data to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Text is not HTML encoded before it is displayed in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. This makes it possible to embed script within HTML tags in the text. If the values for the control come from user input, be sure to validate the values to reduce security vulnerabilities.  </p>\n</div>\n<p> For more information about handling events, see <a href=\"../Topic/How%20to:%20Consume%20Events%20in%20a%20Web%20Forms%20Application.md\" data-linktype=\"relative-path\">How to: Consume Events in a Web Forms Application</a>.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see <a href=\"../Topic/Securing%20Standard%20Controls.md\" data-linktype=\"relative-path\">Securing Standard Controls</a>, <a href=\"../Topic/How%20to:%20Protect%20Against%20Script%20Exploits%20in%20a%20Web%20Application%20by%20Applying%20HTML%20Encoding%20to%20Strings.md\" data-linktype=\"relative-path\">How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings</a>, and <a href=\"../Topic/Validating%20User%20Input%20in%20ASP.NET%20Web%20Pages.md\" data-linktype=\"relative-path\">Validating User Input in ASP.NET Web Pages</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to specify and code a handler for the EditCommand event. It allows you to edit the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control when the <code>Edit</code> button is clicked.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"DataListEdit#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      // The Cart and CartView objects temporarily store the data source\n      // for the DataList control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. \n         // Because the data source in this example is an in-memory\n         // DataTable, retrieve the data from session state if it exists;\n         // otherwise, create the data source.\n         GetSource();\n\n         // The DataList control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the\n         // page is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindList();\n\n         }\n                   \n      }\n\n      void BindList() \n      {\n\n         // Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView;\n         ItemsList.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that \n         // is stored in session state. If the data source does not exist,\n         // create it; otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void Edit_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked\n         // in the DataList control to enable editing for that item. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex;\n         BindList();\n\n      }\n\n      void Cancel_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Delete_Command(Object sender, DataListCommandEventArgs e) \n      { \n\n         // Retrieve the name of the item to remove.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Update_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Retrieve the updated values from the selected item.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n         String qty = ((TextBox)e.Item.FindControl(&quot;QtyTextBox&quot;)).Text;\n         String price = ((TextBox)e.Item.FindControl(&quot;PriceTextBox&quot;)).Text;\n\n         // With a database, use an update command to update the data.\n         // Because the data source in this example is an in-memory \n         // DataTable, delete the old row and replace it with a new one.\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // ***************************************************************\n         // Insert data validation code here. Make sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add a new entry to replace the previous item.\n         DataRow dr = Cart.NewRow();\n         dr[0] = qty;\n         dr[1] = item;\n         // If necessary, remove the &#39;$&#39; character from the price before\n         // converting the price to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n         Cart.Rows.Add(dr);\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DataList to the data source to refresh\n         // the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           OnEditCommand=&quot;Edit_Command&quot;\n           OnUpdateCommand=&quot;Update_Command&quot;\n           OnDeleteCommand=&quot;Delete_Command&quot;\n           OnCancelCommand=&quot;Cancel_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataListEdit#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataList control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView\n \n      Sub Page_Load(sende As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data.\n         &#39; Because the data source in this example is an in-memory\n         &#39; DataTable, retrieve the data from session state if it exists;\n         &#39; otherwise, create the data source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the\n         &#39; page is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindList()\n\n         End If\n                   \n      End Sub\n\n      Sub BindList() \n\n         &#39; Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView\n         ItemsList.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that\n         &#39; is stored in session state. If the data source does not exist,\n         &#39; create it; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values\n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub Edit_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked\n         &#39; in the DataList control to enable editing for that item. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex\n         BindList()\n\n      End Sub\n\n      Sub Cancel_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Delete_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the name of the item to remove.\n         Dim item As String = (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n\n         &#39; Filter the CartView for the selected item and remove it from\n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure \n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Update_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the updated values from the selected item.\n         Dim item As String = _\n             (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n         Dim qty As String = _\n             (CType(e.Item.FindControl(&quot;QtyTextBox&quot;), TextBox)).Text\n         Dim price As String = _\n             (CType(e.Item.FindControl(&quot;PriceTextBox&quot;), TextBox)).Text\n\n         &#39; With a database, use an update command to update the data.\n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n\n         &#39; Filter the CartView for the selected item and remove it from \n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Make sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add a new entry to replace the previous item.\n         Dim dr As DataRow = Cart.NewRow()\n         dr(0) = qty\n         dr(1) = item\n         &#39; If necessary, remove the &#39;$&#39; character from the price before \n         &#39; converting the price to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n\n            dr(2) = Convert.ToDouble(price.Substring(1))\n\n         Else\n\n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DataList to the data source to refresh \n         &#39; the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           OnEditCommand=&quot;Edit_Command&quot;\n           OnUpdateCommand=&quot;Update_Command&quot;\n           OnDeleteCommand=&quot;Delete_Command&quot;\n           OnCancelCommand=&quot;Cancel_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataListEdit2#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataList control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView\n \n      Sub Page_Load(sende As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data.\n         &#39; Because the data source in this example is an in-memory\n         &#39; DataTable, retrieve the data from session state if it exists;\n         &#39; otherwise, create the data source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the\n         &#39; page is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindList()\n\n         End If\n\n         &#39; Manually register the event-handling methods.\n         AddHandler ItemsList.EditCommand, AddressOf Edit_Command\n         AddHandler ItemsList.UpdateCommand, AddressOf Update_Command\n         AddHandler ItemsList.DeleteCommand, AddressOf Delete_Command\n         AddHandler ItemsList.CancelCommand, AddressOf Cancel_Command\n                   \n      End Sub\n\n      Sub BindList() \n\n         &#39; Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView\n         ItemsList.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that\n         &#39; is stored in session state. If the data source does not exist,\n         &#39; create it; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values\n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub Edit_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked\n         &#39; in the DataList control to enable editing for that item. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex\n         BindList()\n\n      End Sub\n\n      Sub Cancel_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Delete_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the name of the item to remove.\n         Dim item As String = (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n\n         &#39; Filter the CartView for the selected item and remove it from \n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure \n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Update_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the updated values from the selected item.\n         Dim item As String = _\n             (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n         Dim qty As String = _\n             (CType(e.Item.FindControl(&quot;QtyTextBox&quot;), TextBox)).Text\n         Dim price As String = _\n             (CType(e.Item.FindControl(&quot;PriceTextBox&quot;), TextBox)).Text\n\n         &#39; With a database, use an update command to update the data.\n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n\n         &#39; Filter the CartView for the selected item and remove it from \n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Make sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add a new entry to replace the previous item.\n         Dim dr As DataRow = Cart.NewRow()\n         dr(0) = qty\n         dr(1) = item\n         &#39; If necessary, remove the &#39;$&#39; character from the price before \n         &#39; converting the price to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n\n            dr(2) = Convert.ToDouble(price.Substring(1))\n\n         Else\n\n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DataList to the data source to refresh \n         &#39; the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           OnEditCommand=&quot;Edit_Command&quot;\n           OnUpdateCommand=&quot;Update_Command&quot;\n           OnDeleteCommand=&quot;Delete_Command&quot;\n           OnCancelCommand=&quot;Cancel_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataListEdit2#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      // The Cart and CartView objects temporarily store the data source\n      // for the DataList control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. \n         // Because the data source in this example is an in-memory\n         // DataTable, retrieve the data from session state if it exists;\n         // otherwise, create the data source.\n         GetSource();\n\n         // The DataList control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the\n         // page is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindList();\n\n         }\n\n         // Manually register the event-handling methods.\n         ItemsList.EditCommand += \n             new DataListCommandEventHandler(this.Edit_Command);\n         ItemsList.UpdateCommand += \n             new DataListCommandEventHandler(this.Update_Command);\n         ItemsList.DeleteCommand += \n             new DataListCommandEventHandler(this.Delete_Command);\n         ItemsList.CancelCommand += \n             new DataListCommandEventHandler(this.Cancel_Command);\n                   \n      }\n\n      void BindList() \n      {\n\n         // Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView;\n         ItemsList.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that \n         // is stored in session state. If the data source does not exist,\n         // create it; otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values\n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void Edit_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked\n         // in the DataList control to enable editing for that item. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex;\n         BindList();\n\n      }\n\n      void Cancel_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Delete_Command(Object sender, DataListCommandEventArgs e) \n      { \n\n         // Retrieve the name of the item to remove.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Update_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Retrieve the updated values from the selected item.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n         String qty = ((TextBox)e.Item.FindControl(&quot;QtyTextBox&quot;)).Text;\n         String price = ((TextBox)e.Item.FindControl(&quot;PriceTextBox&quot;)).Text;\n\n         // With a database, use an update command to update the data.\n         // Because the data source in this example is an in-memory \n         // DataTable, delete the old row and replace it with a new one.\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // ***************************************************************\n         // Insert data validation code here. Make sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add a new entry to replace the previous item.\n         DataRow dr = Cart.NewRow();\n         dr[0] = qty;\n         dr[1] = item;\n         // If necessary, remove the &#39;$&#39; character from the price before\n         // converting the price to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n         Cart.Rows.Add(dr);\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DataList to the data source to refresh\n         // the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_ItemCommand\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ItemCommand</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when any button is clicked in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Web.UI.WebControls.DataListCommandEventHandler ItemCommand;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ItemCommand event is raised when any button is clicked in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control and is commonly used when you have a button control with a custom <code>CommandName</code> value.  </p>\n<p> For more information about handling events, see<a href=\"../Topic/How%20to:%20Consume%20Events%20in%20a%20Web%20Forms%20Application.md\" data-linktype=\"relative-path\">How to: Consume Events in a Web Forms Application</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to specify and code a handler for the ItemCommand event to select an item from the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"DataListItemCommand#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Select Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataList control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;Item&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;Qty&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;Price&quot;, GetType(Double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 To 8 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = i * 2\n            dr(2) = 1.23 * (i + 1)\n \n            dt.Rows.Add(dr)\n         \n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n      \n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n\n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then \n         \n            ItemsList.DataSource = CreateDataSource()\n            ItemsList.DataBind()\n         \n         End If\n\n      End Sub\n\n      Sub Item_Command(sender As Object, e As DataListCommandEventArgs) \n        \n         &#39; Set the SelectedIndex property to select an item in the DataList.\n         ItemsList.SelectedIndex = e.Item.ItemIndex\n\n         &#39; Rebind the data source to the DataList to refresh the control.\n         ItemsList.DataSource = CreateDataSource()\n         ItemsList.DataBind()\n\n      End Sub\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Select Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Select&lt;/b&gt; to select an item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;           \n           OnItemCommand=&quot;Item_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;SelectedItemStyle BackColor=&quot;Yellow&quot;&gt;\n         &lt;/SelectedItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            &lt;asp:LinkButton id=&quot;SelectButton&quot; \n                 Text=&quot;Select&quot; \n                 CommandName=&quot;Select&quot;\n                 runat=&quot;server&quot;/&gt;\n\n            Item &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;SelectedItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:Label id=&quot;QtyLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:Label id=&quot;PriceLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/SelectedItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataListItemCommand#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Select Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataList control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(double)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = i * 2;\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n\n      }\n \n      void Page_Load(Object sender, EventArgs e) \n      {\n\n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsList.DataSource = CreateDataSource();\n            ItemsList.DataBind();\n         }\n\n      }\n\n      void Item_Command(Object sender, DataListCommandEventArgs e) \n      {\n        \n         // Set the SelectedIndex property to select an item in the DataList.\n         ItemsList.SelectedIndex = e.Item.ItemIndex;\n\n         // Rebind the data source to the DataList to refresh the control.\n         ItemsList.DataSource = CreateDataSource();\n         ItemsList.DataBind();\n\n      }\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Select Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Select&lt;/b&gt; to select an item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;           \n           OnItemCommand=&quot;Item_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;SelectedItemStyle BackColor=&quot;Yellow&quot;&gt;\n         &lt;/SelectedItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            &lt;asp:LinkButton id=&quot;SelectButton&quot; \n                 Text=&quot;Select&quot; \n                 CommandName=&quot;Select&quot;\n                 runat=&quot;server&quot;/&gt;\n\n            Item &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;SelectedItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:Label id=&quot;QtyLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:Label id=&quot;PriceLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/SelectedItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataListItemCommand2#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Select Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataList control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;Item&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;Qty&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;Price&quot;, GetType(Double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 To 8 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = i * 2\n            dr(2) = 1.23 * (i + 1)\n \n            dt.Rows.Add(dr)\n         \n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n      \n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n\n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then \n         \n            ItemsList.DataSource = CreateDataSource()\n            ItemsList.DataBind()\n         \n         End If\n\n         &#39; Manually register the event-handling method for the \n         &#39; ItemCommand event.\n         AddHandler ItemsList.ItemCommand, AddressOf Item_Command\n\n      End Sub\n\n      Sub Item_Command(sender As Object, e As DataListCommandEventArgs) \n        \n         &#39; Set the SelectedIndex property to select an item in the DataList.\n         ItemsList.SelectedIndex = e.Item.ItemIndex\n\n         &#39; Rebind the data source to the DataList to refresh the control.\n         ItemsList.DataSource = CreateDataSource()\n         ItemsList.DataBind()\n\n      End Sub\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Select Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Select&lt;/b&gt; to select an item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;           \n           OnItemCommand=&quot;Item_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;SelectedItemStyle BackColor=&quot;Yellow&quot;&gt;\n         &lt;/SelectedItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            &lt;asp:LinkButton id=&quot;SelectButton&quot; \n                 Text=&quot;Select&quot; \n                 CommandName=&quot;Select&quot;\n                 runat=&quot;server&quot;/&gt;\n\n            Item &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;SelectedItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:Label id=&quot;QtyLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:Label id=&quot;PriceLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/SelectedItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataListItemCommand2#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Select Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataList control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(double)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = i * 2;\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n\n      }\n \n      void Page_Load(Object sender, EventArgs e) \n      {\n\n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsList.DataSource = CreateDataSource();\n            ItemsList.DataBind();\n         }\n\n         // Manually register the event-handling method for the \n         // ItemCommand event.\n         ItemsList.ItemCommand += \n             new DataListCommandEventHandler(this.Item_Command);\n\n      }\n\n      void Item_Command(Object sender, DataListCommandEventArgs e) \n      {\n        \n         // Set the SelectedIndex property to select an item in the DataList.\n         ItemsList.SelectedIndex = e.Item.ItemIndex;\n\n         // Rebind the data source to the DataList to refresh the control.\n         ItemsList.DataSource = CreateDataSource();\n         ItemsList.DataBind();\n\n      }\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Select Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Select&lt;/b&gt; to select an item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;           \n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;SelectedItemStyle BackColor=&quot;Yellow&quot;&gt;\n         &lt;/SelectedItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            &lt;asp:LinkButton id=&quot;SelectButton&quot; \n                 Text=&quot;Select&quot; \n                 CommandName=&quot;Select&quot;\n                 runat=&quot;server&quot;/&gt;\n\n            Item &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;SelectedItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:Label id=&quot;QtyLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:Label id=&quot;PriceLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/SelectedItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_ItemCreated\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ItemCreated</div>        \r\n          </div>\r\n    \r\n            <p>Occurs on the server when an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control is created.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Web.UI.WebControls.DataListItemEventHandler ItemCreated;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ItemCreated event is raised when an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control is created, both during round-trips and at the time data is bound to the control.  </p>\n<p> The ItemCreated event is commonly used to control the content and appearance of a row in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/How%20to:%20Consume%20Events%20in%20a%20Web%20Forms%20Application.md\" data-linktype=\"relative-path\">How to: Consume Events in a Web Forms Application</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to specify and code a handler for the ItemCreated event to display the order in which items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control are created.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"DataListItemCreated#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataList control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 To 8 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Description for item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n \n            dt.Rows.Add(dr)\n\n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n\n      End Function\n \n \n      Sub Page_Load(sender As Object, e As EventArgs) \n\n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then\n         \n            ItemsList.DataSource = CreateDataSource()\n            ItemsList.DataBind()\n         \n         End If\n\n      End Sub\n\n      Sub Item_Created(sender As Object, e As DataListItemEventArgs)\n\n         If e.Item.ItemType = ListItemType.Item Or _\n             e.Item.ItemType = ListItemType.AlternatingItem Then\n\n\n            &#39; Retrieve the Label control in the current DataListItem.\n            Dim PriceLabel As Label = _\n                CType(e.Item.FindControl(&quot;PriceLabel&quot;), Label)\n\n            &#39; Retrieve the text of the CurrencyColumn from the DataListItem\n            &#39; and convert the value to a Double.\n            Dim Price As Double = Convert.ToDouble( _\n                (CType(e.Item.DataItem, DataRowView)).Row.ItemArray(2).ToString())\n\n            &#39; Format the value as currency and redisplay it in the DataList.\n            PriceLabel.Text = Price.ToString(&quot;c&quot;)\n\n         End If\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList ItemCreated Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList ItemCreated Example&lt;/h3&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;3&quot;\n           OnItemCreated=&quot;Item_Created&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: \n            &lt;asp:Label id=&quot;PriceLabel&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataListItemCreated#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataList control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Description for item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n\n      }\n \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n\n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsList.DataSource = CreateDataSource();\n            ItemsList.DataBind();\n         }\n\n      }\n\n      void Item_Created(Object sender, DataListItemEventArgs e)\n      {\n\n         if (e.Item.ItemType == ListItemType.Item || \n             e.Item.ItemType == ListItemType.AlternatingItem)\n         {\n\n            // Retrieve the Label control in the current DataListItem.\n            Label PriceLabel = (Label)e.Item.FindControl(&quot;PriceLabel&quot;);\n\n            // Retrieve the text of the CurrencyColumn from the DataListItem\n            // and convert the value to a Double.\n            Double Price = Convert.ToDouble(\n                ((DataRowView)e.Item.DataItem).Row.ItemArray[2].ToString());\n\n            // Format the value as currency and redisplay it in the DataList.\n            PriceLabel.Text = Price.ToString(&quot;c&quot;);\n\n         }\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList ItemCreated Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList ItemCreated Example&lt;/h3&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;3&quot;\n           OnItemCreated=&quot;Item_Created&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: \n            &lt;asp:Label id=&quot;PriceLabel&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataListItemCreated2#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataList control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Description for item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n\n      }\n \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n\n         // Manually register the event-handling method for the \n         // ItemCommand event.\n         ItemsList.ItemCreated += \n             new DataListItemEventHandler(this.Item_Created);\n\n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsList.DataSource = CreateDataSource();\n            ItemsList.DataBind();\n         }\n\n      }\n\n      void Item_Created(Object sender, DataListItemEventArgs e)\n      {\n\n         if (e.Item.ItemType == ListItemType.Item || \n             e.Item.ItemType == ListItemType.AlternatingItem)\n         {\n\n            // Retrieve the Label control in the current DataListItem.\n            Label PriceLabel = (Label)e.Item.FindControl(&quot;PriceLabel&quot;);\n\n            // Retrieve the text of the CurrencyColumn from the DataListItem\n            // and convert the value to a Double.\n            Double Price = Convert.ToDouble(\n                ((DataRowView)e.Item.DataItem).Row.ItemArray[2].ToString());\n\n            // Format the value as currency and redisplay it in the DataList.\n            PriceLabel.Text = Price.ToString(&quot;c&quot;);\n\n         }\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList ItemCreated Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList ItemCreated Example&lt;/h3&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;3&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: \n            &lt;asp:Label id=&quot;PriceLabel&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataListItemCreated2#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataList control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 To 8 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Description for item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n \n            dt.Rows.Add(dr)\n\n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n\n      End Function\n \n \n      Sub Page_Load(sender As Object, e As EventArgs) \n\n         &#39; Manually register the event-handling method for the \n         &#39; ItemCommand event.\n         AddHandler ItemsList.ItemCreated, AddressOf Item_Created\n\n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then\n         \n            ItemsList.DataSource = CreateDataSource()\n            ItemsList.DataBind()\n         \n         End If\n\n      End Sub\n\n      Sub Item_Created(sender As Object, e As DataListItemEventArgs)\n\n         If e.Item.ItemType = ListItemType.Item Or _\n             e.Item.ItemType = ListItemType.AlternatingItem Then\n\n\n            &#39; Retrieve the Label control in the current DataListItem.\n            Dim PriceLabel As Label = CType( _\n                e.Item.FindControl(&quot;PriceLabel&quot;), Label)\n\n            &#39; Retrieve the text of the CurrencyColumn from the DataListItem\n            &#39; and convert the value to a Double.\n            Dim Price As Double = Convert.ToDouble( _\n                (CType(e.Item.DataItem, DataRowView)).Row.ItemArray(2).ToString())\n\n            &#39; Format the value as currency and redisplay it in the DataList.\n            PriceLabel.Text = Price.ToString(&quot;c&quot;)\n\n         End If\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList ItemCreated Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList ItemCreated Example&lt;/h3&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;3&quot;\n           OnItemCreated=&quot;Item_Created&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: \n            &lt;asp:Label id=&quot;PriceLabel&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_ItemDataBound\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ItemDataBound</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when an item is data bound to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Web.UI.WebControls.DataListItemEventHandler ItemDataBound;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ItemDataBound event is raised after an item is data bound to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control. This event provides you with the last opportunity to access the data item before it is displayed on the client. After this event is raised, the data item is no longer available.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/How%20to:%20Consume%20Events%20in%20a%20Web%20Forms%20Application.md\" data-linktype=\"relative-path\">How to: Consume Events in a Web Forms Application</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to specify and code a handler for the ItemDataBound event to display the order in which items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control are bound to the control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"DataListItemDataBound#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataList control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Description for item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n\n      }\n \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n\n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsList.DataSource = CreateDataSource();\n            ItemsList.DataBind();\n         }\n\n      }\n\n      void Item_Bound(Object sender, DataListItemEventArgs e)\n      {\n\n         if (e.Item.ItemType == ListItemType.Item || \n             e.Item.ItemType == ListItemType.AlternatingItem)\n         {\n\n            // Retrieve the Label control in the current DataListItem.\n            Label PriceLabel = (Label)e.Item.FindControl(&quot;PriceLabel&quot;);\n\n            // Retrieve the text of the CurrencyColumn from the DataListItem\n            // and convert the value to a Double.\n            Double Price = Convert.ToDouble(\n                ((DataRowView)e.Item.DataItem).Row.ItemArray[2].ToString());\n\n            // Format the value as currency and redisplay it in the DataList.\n            PriceLabel.Text = Price.ToString(&quot;c&quot;);\n\n         }\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList ItemDataBound Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList ItemDataBound Example&lt;/h3&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;3&quot;\n           OnItemDataBound=&quot;Item_Bound&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: \n            &lt;asp:Label id=&quot;PriceLabel&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataListItemDataBound#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataList control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 To 8 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Description for item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n \n            dt.Rows.Add(dr)\n\n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n\n      End Function\n \n \n      Sub Page_Load(sender As Object, e As EventArgs) \n\n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then\n         \n            ItemsList.DataSource = CreateDataSource()\n            ItemsList.DataBind()\n         \n         End If\n\n      End Sub\n\n      Sub Item_Bound(sender As Object, e As DataListItemEventArgs)\n\n         If e.Item.ItemType = ListItemType.Item Or _\n             e.Item.ItemType = ListItemType.AlternatingItem Then\n\n\n            &#39; Retrieve the Label control in the current DataListItem.\n            Dim PriceLabel As Label = _\n                CType(e.Item.FindControl(&quot;PriceLabel&quot;), Label)\n\n            &#39; Retrieve the text of the CurrencyColumn from the DataListItem\n            &#39; and convert the value to a Double.\n            Dim Price As Double = Convert.ToDouble( _\n                (CType(e.Item.DataItem, DataRowView)).Row.ItemArray(2).ToString())\n\n            &#39; Format the value as currency and redisplay it in the DataList.\n            PriceLabel.Text = Price.ToString(&quot;c&quot;)\n\n         End If\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList ItemDataBound Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList ItemDataBound Example&lt;/h3&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;3&quot;\n           OnItemDataBound=&quot;Item_Bound&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: \n            &lt;asp:Label id=&quot;PriceLabel&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataListItemDataBound2#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataList control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 To 8 \n\n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Description for item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n \n            dt.Rows.Add(dr)\n\n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n\n      End Function\n \n \n      Sub Page_Load(sender As Object, e As EventArgs)\n\n         &#39; Manually register the event-handling method for the \n         &#39; ItemCommand event.\n         AddHandler ItemsList.ItemDataBound, AddressOf Item_Bound \n\n         &#39; Load sample data only once, when the page is first loaded.\n         If Not IsPostBack Then\n         \n            ItemsList.DataSource = CreateDataSource()\n            ItemsList.DataBind()\n         \n         End If\n\n      End Sub\n\n      Sub Item_Bound(sender As Object, e As DataListItemEventArgs)\n\n         If e.Item.ItemType = ListItemType.Item Or _\n             e.Item.ItemType = ListItemType.AlternatingItem Then\n\n            &#39; Retrieve the Label control in the current DataListItem.\n            Dim PriceLabel As Label = _\n                CType(e.Item.FindControl(&quot;PriceLabel&quot;), Label)\n\n            &#39; Retrieve the text of the CurrencyColumn from the DataListItem\n            &#39; and convert the value to a Double.\n            Dim Price As Double = Convert.ToDouble( _\n                (CType(e.Item.DataItem, DataRowView)).Row.ItemArray(2).ToString())\n\n            &#39; Format the value as currency and redisplay it in the DataList.\n            PriceLabel.Text = Price.ToString(&quot;c&quot;)\n\n         End If\n\n      End Sub\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList ItemDataBound Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList ItemDataBound Example&lt;/h3&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;3&quot;\n           OnItemDataBound=&quot;Item_Bound&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: \n            &lt;asp:Label id=&quot;PriceLabel&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataListItemDataBound2#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataList control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(String)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Description for item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n\n      }\n \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n\n         // Manually register the event-handling method for the \n         // ItemCommand event.\n         ItemsList.ItemDataBound += \n             new DataListItemEventHandler(this.Item_Bound);\n\n         // Load sample data only once, when the page is first loaded.\n         if (!IsPostBack) \n         {\n            ItemsList.DataSource = CreateDataSource();\n            ItemsList.DataBind();\n         }\n\n      }\n\n      void Item_Bound(Object sender, DataListItemEventArgs e)\n      {\n\n         if (e.Item.ItemType == ListItemType.Item || \n             e.Item.ItemType == ListItemType.AlternatingItem)\n         {\n\n            // Retrieve the Label control in the current DataListItem.\n            Label PriceLabel = (Label)e.Item.FindControl(&quot;PriceLabel&quot;);\n\n            // Retrieve the text of the CurrencyColumn from the DataListItem\n            // and convert the value to a Double.\n            Double Price = Convert.ToDouble(\n                ((DataRowView)e.Item.DataItem).Row.ItemArray[2].ToString());\n\n            // Format the value as currency and redisplay it in the DataList.\n            PriceLabel.Text = Price.ToString(&quot;c&quot;);\n\n         }\n\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataList ItemDataBound Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList ItemDataBound Example&lt;/h3&gt;\n \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           BorderColor=&quot;black&quot;\n           CellPadding=&quot;5&quot;\n           CellSpacing=&quot;5&quot;\n           RepeatDirection=&quot;Vertical&quot;\n           RepeatLayout=&quot;Table&quot;\n           RepeatColumns=&quot;3&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            List of items\n\n         &lt;/HeaderTemplate&gt;\n               \n         &lt;ItemTemplate&gt;\n\n            Description: &lt;br /&gt;\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;StringValue&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price: \n            &lt;asp:Label id=&quot;PriceLabel&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n \n      &lt;/asp:DataList&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_UpdateCommand\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UpdateCommand</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the <code>Update</code> button is clicked for an item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Web.UI.WebControls.DataListCommandEventHandler UpdateCommand;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The UpdateCommand event is raised when the <code>Update</code> button for an item is clicked.  </p>\n<p> A typical handler for the UpdateCommand event updates the data, sets the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist#System_Web_UI_WebControls_DataList_EditItemIndex_\" data-linktype=\"relative-path\">EditItemIndex</a> property to <code>-1</code> (to deselect the item), and then rebinds the data to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see <a href=\"../Topic/Securing%20Standard%20Controls.md\" data-linktype=\"relative-path\">Securing Standard Controls</a>, <a href=\"../Topic/How%20to:%20Protect%20Against%20Script%20Exploits%20in%20a%20Web%20Application%20by%20Applying%20HTML%20Encoding%20to%20Strings.md\" data-linktype=\"relative-path\">How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings</a>, and <a href=\"../Topic/Validating%20User%20Input%20in%20ASP.NET%20Web%20Pages.md\" data-linktype=\"relative-path\">Validating User Input in ASP.NET Web Pages</a>.  </p>\n</div>\n<p> For more information about handling events, see <a href=\"../Topic/How%20to:%20Consume%20Events%20in%20a%20Web%20Forms%20Application.md\" data-linktype=\"relative-path\">How to: Consume Events in a Web Forms Application</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to specify and code a handler for the UpdateCommand event. It allows you to update the selected item in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> control with the new values entered by the user when the <code>Update</code> button is clicked.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see <a href=\"../Topic/ASP.NET%20Web%20Forms%20Page%20Code%20Model.md\" data-linktype=\"relative-path\">ASP.NET Web Forms Page Code Model</a>.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"DataListEdit#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      // The Cart and CartView objects temporarily store the data source\n      // for the DataList control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. \n         // Because the data source in this example is an in-memory\n         // DataTable, retrieve the data from session state if it exists;\n         // otherwise, create the data source.\n         GetSource();\n\n         // The DataList control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the\n         // page is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindList();\n\n         }\n                   \n      }\n\n      void BindList() \n      {\n\n         // Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView;\n         ItemsList.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that \n         // is stored in session state. If the data source does not exist,\n         // create it; otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void Edit_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked\n         // in the DataList control to enable editing for that item. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex;\n         BindList();\n\n      }\n\n      void Cancel_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Delete_Command(Object sender, DataListCommandEventArgs e) \n      { \n\n         // Retrieve the name of the item to remove.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Update_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Retrieve the updated values from the selected item.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n         String qty = ((TextBox)e.Item.FindControl(&quot;QtyTextBox&quot;)).Text;\n         String price = ((TextBox)e.Item.FindControl(&quot;PriceTextBox&quot;)).Text;\n\n         // With a database, use an update command to update the data.\n         // Because the data source in this example is an in-memory \n         // DataTable, delete the old row and replace it with a new one.\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // ***************************************************************\n         // Insert data validation code here. Make sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add a new entry to replace the previous item.\n         DataRow dr = Cart.NewRow();\n         dr[0] = qty;\n         dr[1] = item;\n         // If necessary, remove the &#39;$&#39; character from the price before\n         // converting the price to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n         Cart.Rows.Add(dr);\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DataList to the data source to refresh\n         // the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           OnEditCommand=&quot;Edit_Command&quot;\n           OnUpdateCommand=&quot;Update_Command&quot;\n           OnDeleteCommand=&quot;Delete_Command&quot;\n           OnCancelCommand=&quot;Cancel_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataListEdit#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataList control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView\n \n      Sub Page_Load(sende As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data.\n         &#39; Because the data source in this example is an in-memory\n         &#39; DataTable, retrieve the data from session state if it exists;\n         &#39; otherwise, create the data source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the\n         &#39; page is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindList()\n\n         End If\n                   \n      End Sub\n\n      Sub BindList() \n\n         &#39; Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView\n         ItemsList.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that\n         &#39; is stored in session state. If the data source does not exist,\n         &#39; create it; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values\n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub Edit_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked\n         &#39; in the DataList control to enable editing for that item. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex\n         BindList()\n\n      End Sub\n\n      Sub Cancel_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Delete_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the name of the item to remove.\n         Dim item As String = (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n\n         &#39; Filter the CartView for the selected item and remove it from\n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure \n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Update_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the updated values from the selected item.\n         Dim item As String = _\n             (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n         Dim qty As String = _\n             (CType(e.Item.FindControl(&quot;QtyTextBox&quot;), TextBox)).Text\n         Dim price As String = _\n             (CType(e.Item.FindControl(&quot;PriceTextBox&quot;), TextBox)).Text\n\n         &#39; With a database, use an update command to update the data.\n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n\n         &#39; Filter the CartView for the selected item and remove it from \n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Make sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add a new entry to replace the previous item.\n         Dim dr As DataRow = Cart.NewRow()\n         dr(0) = qty\n         dr(1) = item\n         &#39; If necessary, remove the &#39;$&#39; character from the price before \n         &#39; converting the price to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n\n            dr(2) = Convert.ToDouble(price.Substring(1))\n\n         Else\n\n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DataList to the data source to refresh \n         &#39; the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           OnEditCommand=&quot;Edit_Command&quot;\n           OnUpdateCommand=&quot;Update_Command&quot;\n           OnDeleteCommand=&quot;Delete_Command&quot;\n           OnCancelCommand=&quot;Cancel_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataListEdit2#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      &#39; The Cart and CartView objects temporarily store the data source\n      &#39; for the DataList control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView\n \n      Sub Page_Load(sende As Object, e As EventArgs) \n \n         &#39; With a database, use an select query to retrieve the data.\n         &#39; Because the data source in this example is an in-memory\n         &#39; DataTable, retrieve the data from session state if it exists;\n         &#39; otherwise, create the data source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the server;\n         &#39; it only needs to be bound to a data source the first time the\n         &#39; page is loaded or when the data source is updated.\n         If Not IsPostBack Then\n\n            BindList()\n\n         End If\n\n         &#39; Manually register the event-handling methods.\n         AddHandler ItemsList.EditCommand, AddressOf Edit_Command\n         AddHandler ItemsList.UpdateCommand, AddressOf Update_Command\n         AddHandler ItemsList.DeleteCommand, AddressOf Delete_Command\n         AddHandler ItemsList.CancelCommand, AddressOf Cancel_Command\n                   \n      End Sub\n\n      Sub BindList() \n\n         &#39; Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView\n         ItemsList.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source is a DataTable that\n         &#39; is stored in session state. If the data source does not exist,\n         &#39; create it; otherwise, load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, GetType(Int32)))\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, GetType(Double)))\n\n            &#39; Store the table in session state to persist its values\n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            Dim i As Integer\n\n            For i = 1 To 9 \n            \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n\n                  dr(0) = 2\n               \n               Else\n               \n                  dr(0) = 1\n               \n               End If\n\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1))\n               Cart.Rows.Add(dr)\n            \n            Next i\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n\n      Sub Edit_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item clicked\n         &#39; in the DataList control to enable editing for that item. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex\n         BindList()\n\n      End Sub\n\n      Sub Cancel_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Delete_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the name of the item to remove.\n         Dim item As String = (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n\n         &#39; Filter the CartView for the selected item and remove it from \n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. Be sure \n         &#39; to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n      Sub Update_Command(sender As Object, e As DataListCommandEventArgs) \n\n         &#39; Retrieve the updated values from the selected item.\n         Dim item As String = _\n             (CType(e.Item.FindControl(&quot;ItemLabel&quot;), Label)).Text\n         Dim qty As String = _\n             (CType(e.Item.FindControl(&quot;QtyTextBox&quot;), TextBox)).Text\n         Dim price As String = _\n             (CType(e.Item.FindControl(&quot;PriceTextBox&quot;), TextBox)).Text\n\n         &#39; With a database, use an update command to update the data.\n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, delete the old row and replace it with a new one.\n\n         &#39; Filter the CartView for the selected item and remove it from \n         &#39; the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then \n       \n            CartView.Delete(0)\n         \n         End If\n         CartView.RowFilter = &quot;&quot;\n\n         &#39; ***************************************************************\n         &#39; Insert data validation code here. Make sure to validate the\n         &#39; values entered by the user before converting to the appropriate\n         &#39; data types and updating the data source.\n         &#39; ***************************************************************\n\n         &#39; Add a new entry to replace the previous item.\n         Dim dr As DataRow = Cart.NewRow()\n         dr(0) = qty\n         dr(1) = item\n         &#39; If necessary, remove the &#39;$&#39; character from the price before \n         &#39; converting the price to a Double.\n         If price.Chars(0) = &quot;$&quot; Then\n\n            dr(2) = Convert.ToDouble(price.Substring(1))\n\n         Else\n\n            dr(2) = Convert.ToDouble(price)\n         \n         End If\n\n         Cart.Rows.Add(dr)\n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DataList to the data source to refresh \n         &#39; the control.\n         ItemsList.EditItemIndex = -1\n         BindList()\n\n      End Sub\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           OnEditCommand=&quot;Edit_Command&quot;\n           OnUpdateCommand=&quot;Update_Command&quot;\n           OnDeleteCommand=&quot;Delete_Command&quot;\n           OnCancelCommand=&quot;Cancel_Command&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DataListEdit2#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head&gt;\n    &lt;title&gt;DataList Edit Example&lt;/title&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n      // The Cart and CartView objects temporarily store the data source\n      // for the DataList control while the page is being processed.\n      DataTable Cart = new DataTable();\n      DataView CartView;   \n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         // With a database, use an select query to retrieve the data. \n         // Because the data source in this example is an in-memory\n         // DataTable, retrieve the data from session state if it exists;\n         // otherwise, create the data source.\n         GetSource();\n\n         // The DataList control maintains state between posts to the server;\n         // it only needs to be bound to a data source the first time the\n         // page is loaded or when the data source is updated.\n         if (!IsPostBack)\n         {\n\n            BindList();\n\n         }\n\n         // Manually register the event-handling methods.\n         ItemsList.EditCommand += \n             new DataListCommandEventHandler(this.Edit_Command);\n         ItemsList.UpdateCommand += \n             new DataListCommandEventHandler(this.Update_Command);\n         ItemsList.DeleteCommand += \n             new DataListCommandEventHandler(this.Delete_Command);\n         ItemsList.CancelCommand += \n             new DataListCommandEventHandler(this.Cancel_Command);\n                   \n      }\n\n      void BindList() \n      {\n\n         // Set the data source and bind to the DataList control.\n         ItemsList.DataSource = CartView;\n         ItemsList.DataBind();\n\n      }\n\n      void GetSource()\n      {\n\n         // For this example, the data source is a DataTable that \n         // is stored in session state. If the data source does not exist,\n         // create it; otherwise, load the data.\n         if (Session[&quot;ShoppingCart&quot;] == null) \n         {     \n\n            // Create the sample data.\n            DataRow dr;  \n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Double)));\n\n            // Store the table in session state to persist its values\n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n             \n            // Populate the DataTable with sample data.\n            for (int i = 1; i &lt;= 9; i++) \n            {\n               dr = Cart.NewRow();\n               if (i % 2 != 0)\n               {\n                  dr[0] = 2;\n               }\n               else\n               {\n                  dr[0] = 1;\n               }\n               dr[1] = &quot;Item &quot; + i.ToString();\n               dr[2] = (1.23 * (i + 1));\n               Cart.Rows.Add(dr);\n            }\n\n         } \n\n         else\n         {\n\n            // Retrieve the sample data from session state.\n            Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n\n         }         \n \n         // Create a DataView and specify the field to sort by.\n         CartView = new DataView(Cart);\n         CartView.Sort=&quot;Item&quot;;\n\n         return;\n\n      }\n\n      void Edit_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to the index of the item clicked\n         // in the DataList control to enable editing for that item. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = e.Item.ItemIndex;\n         BindList();\n\n      }\n\n      void Cancel_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Delete_Command(Object sender, DataListCommandEventArgs e) \n      { \n\n         // Retrieve the name of the item to remove.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0) \n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // Set the EditItemIndex property to -1 to exit editing mode. Be sure\n         // to rebind the DataList to the data source to refresh the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n      void Update_Command(Object sender, DataListCommandEventArgs e) \n      {\n\n         // Retrieve the updated values from the selected item.\n         String item = ((Label)e.Item.FindControl(&quot;ItemLabel&quot;)).Text;\n         String qty = ((TextBox)e.Item.FindControl(&quot;QtyTextBox&quot;)).Text;\n         String price = ((TextBox)e.Item.FindControl(&quot;PriceTextBox&quot;)).Text;\n\n         // With a database, use an update command to update the data.\n         // Because the data source in this example is an in-memory \n         // DataTable, delete the old row and replace it with a new one.\n\n         // Filter the CartView for the selected item and remove it from\n         // the data source.\n         CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n         if (CartView.Count &gt; 0)\n         {\n            CartView.Delete(0);\n         }\n         CartView.RowFilter = &quot;&quot;;\n\n         // ***************************************************************\n         // Insert data validation code here. Make sure to validate the\n         // values entered by the user before converting to the appropriate\n         // data types and updating the data source.\n         // ***************************************************************\n\n         // Add a new entry to replace the previous item.\n         DataRow dr = Cart.NewRow();\n         dr[0] = qty;\n         dr[1] = item;\n         // If necessary, remove the &#39;$&#39; character from the price before\n         // converting the price to a Double.\n         if(price[0] == &#39;$&#39;)\n         {\n            dr[2] = Convert.ToDouble(price.Substring(1));\n         }\n         else\n         {\n            dr[2] = Convert.ToDouble(price);\n         }\n         Cart.Rows.Add(dr);\n\n         // Set the EditItemIndex property to -1 to exit editing mode. \n         // Be sure to rebind the DataList to the data source to refresh\n         // the control.\n         ItemsList.EditItemIndex = -1;\n         BindList();\n\n      }\n\n   &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;DataList Edit Example&lt;/h3&gt;\n\n      Click &lt;b&gt;Edit&lt;/b&gt; to edit the values of the item.\n\n      &lt;br /&gt;&lt;br /&gt;\n       \n      &lt;asp:DataList id=&quot;ItemsList&quot;\n           GridLines=&quot;Both&quot;\n           RepeatColumns=&quot;3&quot;\n           RepeatDirection=&quot;Horizontal&quot;\n           CellPadding=&quot;3&quot;\n           CellSpacing=&quot;0&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;AlternatingItemStyle BackColor=&quot;Gainsboro&quot;&gt;\n         &lt;/AlternatingItemStyle&gt;\n\n         &lt;EditItemStyle BackColor=&quot;yellow&quot;&gt;\n         &lt;/EditItemStyle&gt;\n\n         &lt;HeaderTemplate&gt;\n\n            Items\n\n         &lt;/HeaderTemplate&gt;\n         \n         &lt;ItemTemplate&gt;\n\n            Item:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt; \n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;EditButton&quot; \n                 Text=&quot;Edit&quot; \n                 CommandName=&quot;Edit&quot;\n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/ItemTemplate&gt;\n              \n         &lt;EditItemTemplate&gt;\n\n            Item:\n            &lt;asp:Label id=&quot;ItemLabel&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Item&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Quantity:\n            &lt;asp:TextBox id=&quot;QtyTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Qty&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            Price:\n            &lt;asp:TextBox id=&quot;PriceTextBox&quot; \n                 Text=&#39;&lt;%# DataBinder.Eval(Container.DataItem, &quot;Price&quot;, &quot;{0:c}&quot;) %&gt;&#39; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;br /&gt;\n\n            &lt;asp:LinkButton id=&quot;UpdateButton&quot; \n                 Text=&quot;Update&quot; \n                 CommandName=&quot;Update&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;DeleteButton&quot; \n                 Text=&quot;Delete&quot; \n                 CommandName=&quot;Delete&quot; \n                 runat=&quot;server&quot;/&gt;\n\n            &lt;asp:LinkButton id=&quot;CancelButton&quot; \n                 Text=&quot;Cancel&quot; \n                 CommandName=&quot;Cancel&quot; \n                 runat=&quot;server&quot;/&gt;\n\n         &lt;/EditItemTemplate&gt;\n\n      &lt;/asp:DataList&gt;\n\n   &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_System_Web_UI_WebControls_IRepeatInfoUser_GetItemStyle_System_Web_UI_WebControls_ListItemType_System_Int32_\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_System_Web_UI_WebControls_IRepeatInfoUser_GetItemStyle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IRepeatInfoUser.GetItemStyle(ListItemType,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.Web.UI.WebControls.IRepeatInfoUser.GetItemStyle*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">System.Web.UI.WebControls.Style IRepeatInfoUser.GetItemStyle (System.Web.UI.WebControls.ListItemType itemType, int repeatIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>itemType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.listitemtype\" data-linktype=\"relative-path\">ListItemType</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.web.ui.webcontrols.listitemtype\" data-linktype=\"relative-path\">ListItemType</a> enumeration values.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>repeatIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the item in the list control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.style\" data-linktype=\"relative-path\">Style</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.style\" data-linktype=\"relative-path\">Style</a> that represents the style of the specified item type at the specified index in the list control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> instance is cast to an <a class=\"xref\" href=\"system.web.ui.webcontrols.irepeatinfouser\" data-linktype=\"relative-path\">IRepeatInfoUser</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_System_Web_UI_WebControls_IRepeatInfoUser_HasFooter\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_System_Web_UI_WebControls_IRepeatInfoUser_HasFooter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IRepeatInfoUser.HasFooter</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.Web.UI.WebControls.IRepeatInfoUser.HasFooter*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool System.Web.UI.WebControls.IRepeatInfoUser.HasFooter { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> instance is cast to an <a class=\"xref\" href=\"system.web.ui.webcontrols.irepeatinfouser\" data-linktype=\"relative-path\">IRepeatInfoUser</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_System_Web_UI_WebControls_IRepeatInfoUser_HasHeader\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_System_Web_UI_WebControls_IRepeatInfoUser_HasHeader_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IRepeatInfoUser.HasHeader</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.Web.UI.WebControls.IRepeatInfoUser.HasHeader*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool System.Web.UI.WebControls.IRepeatInfoUser.HasHeader { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> instance is cast an <a class=\"xref\" href=\"system.web.ui.webcontrols.irepeatinfouser\" data-linktype=\"relative-path\">IRepeatInfoUser</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_System_Web_UI_WebControls_IRepeatInfoUser_HasSeparators\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_System_Web_UI_WebControls_IRepeatInfoUser_HasSeparators_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IRepeatInfoUser.HasSeparators</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.Web.UI.WebControls.IRepeatInfoUser.HasSeparators*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool System.Web.UI.WebControls.IRepeatInfoUser.HasSeparators { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> instance is cast to an <a class=\"xref\" href=\"system.web.ui.webcontrols.irepeatinfouser\" data-linktype=\"relative-path\">IRepeatInfoUser</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_System_Web_UI_WebControls_IRepeatInfoUser_RenderItem_System_Web_UI_WebControls_ListItemType_System_Int32_System_Web_UI_WebControls_RepeatInfo_System_Web_UI_HtmlTextWriter_\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_System_Web_UI_WebControls_IRepeatInfoUser_RenderItem_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IRepeatInfoUser.RenderItem(ListItemType,Int32,RepeatInfo,HtmlTextWriter)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.Web.UI.WebControls.IRepeatInfoUser.RenderItem*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IRepeatInfoUser.RenderItem (System.Web.UI.WebControls.ListItemType itemType, int repeatIndex, System.Web.UI.WebControls.RepeatInfo repeatInfo, System.Web.UI.HtmlTextWriter writer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>itemType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.listitemtype\" data-linktype=\"relative-path\">ListItemType</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the item.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>repeatIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the item.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>repeatInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.repeatinfo\" data-linktype=\"relative-path\">RepeatInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Information that is used to render the item.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.htmltextwriter\" data-linktype=\"relative-path\">HtmlTextWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.web.ui.htmltextwriter\" data-linktype=\"relative-path\">HtmlTextWriter</a> object to use to render the item.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> instance is cast to an <a class=\"xref\" href=\"system.web.ui.webcontrols.irepeatinfouser\" data-linktype=\"relative-path\">IRepeatInfoUser</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_DataList_System_Web_UI_WebControls_IRepeatInfoUser_RepeatedItemCount\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_DataList_System_Web_UI_WebControls_IRepeatInfoUser_RepeatedItemCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IRepeatInfoUser.RepeatedItemCount</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.Web.UI.WebControls.IRepeatInfoUser.RepeatedItemCount*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int System.Web.UI.WebControls.IRepeatInfoUser.RepeatedItemCount { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.web.ui.webcontrols.datalist\" data-linktype=\"relative-path\">DataList</a> instance is cast to an <a class=\"xref\" href=\"system.web.ui.webcontrols.irepeatinfouser\" data-linktype=\"relative-path\">IRepeatInfoUser</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Web.UI.WebControls.DataList.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Web.UI.WebControls.DataList.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList..ctor\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.AlternatingItemStyle\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.AlternatingItemTemplate\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.CancelCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.add_CancelCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.remove_CancelCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.CancelCommandName\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.CreateControlHierarchy\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.CreateControlStyle\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.CreateItem\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.DeleteCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.add_DeleteCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.remove_DeleteCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.DeleteCommandName\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.EditCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.add_EditCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.remove_EditCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.EditCommandName\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.EditItemIndex\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.EditItemStyle\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.EditItemTemplate\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.ExtractTemplateRows\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.FooterStyle\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.FooterTemplate\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.GridLines\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.HeaderStyle\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.HeaderTemplate\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.InitializeItem\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.ItemCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.add_ItemCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.remove_ItemCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.ItemCreated\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.add_ItemCreated\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.remove_ItemCreated\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.ItemDataBound\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.add_ItemDataBound\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.remove_ItemDataBound\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.Items\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.ItemStyle\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.ItemTemplate\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.LoadViewState\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.OnBubbleEvent\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.OnCancelCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.OnDeleteCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.OnEditCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.OnInit\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.OnItemCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.OnItemCreated\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.OnItemDataBound\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.OnUpdateCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.PrepareControlHierarchy\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.RenderContents\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.RepeatColumns\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.RepeatDirection\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.RepeatLayout\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.SaveViewState\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.SelectCommandName\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.SelectedIndex\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.SelectedItem\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.SelectedItemStyle\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.SelectedItemTemplate\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.SelectedValue\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.SeparatorStyle\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.SeparatorTemplate\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.ShowFooter\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.ShowHeader\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.IRepeatInfoUser.GetItemStyle\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.IRepeatInfoUser.HasFooter\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.IRepeatInfoUser.HasHeader\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.IRepeatInfoUser.HasSeparators\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.IRepeatInfoUser.RenderItem\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.IRepeatInfoUser.RepeatedItemCount\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.TagKey\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.TrackViewState\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.UpdateCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.add_UpdateCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.remove_UpdateCommand\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DataList.UpdateCommandName\">\r\n<meta name=\"APILocation\" content=\"System.Web.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"02477f00-41b4-1379-556e-1678106a9ca1\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"A data bound list control that displays items using templates.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Web.UI.WebControls/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.UI.WebControls.DataList\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Web.UI.WebControls.DataList.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Web.UI.WebControls.DataList.yml","open_to_public_contributors":true,"api_name":["System.Web.UI.WebControls.DataList","System.Web.UI.WebControls.DataList..ctor","System.Web.UI.WebControls.DataList.AlternatingItemStyle","System.Web.UI.WebControls.DataList.AlternatingItemTemplate","System.Web.UI.WebControls.DataList.CancelCommand","System.Web.UI.WebControls.DataList.add_CancelCommand","System.Web.UI.WebControls.DataList.remove_CancelCommand","System.Web.UI.WebControls.DataList.CancelCommandName","System.Web.UI.WebControls.DataList.CreateControlHierarchy","System.Web.UI.WebControls.DataList.CreateControlStyle","System.Web.UI.WebControls.DataList.CreateItem","System.Web.UI.WebControls.DataList.DeleteCommand","System.Web.UI.WebControls.DataList.add_DeleteCommand","System.Web.UI.WebControls.DataList.remove_DeleteCommand","System.Web.UI.WebControls.DataList.DeleteCommandName","System.Web.UI.WebControls.DataList.EditCommand","System.Web.UI.WebControls.DataList.add_EditCommand","System.Web.UI.WebControls.DataList.remove_EditCommand","System.Web.UI.WebControls.DataList.EditCommandName","System.Web.UI.WebControls.DataList.EditItemIndex","System.Web.UI.WebControls.DataList.EditItemStyle","System.Web.UI.WebControls.DataList.EditItemTemplate","System.Web.UI.WebControls.DataList.ExtractTemplateRows","System.Web.UI.WebControls.DataList.FooterStyle","System.Web.UI.WebControls.DataList.FooterTemplate","System.Web.UI.WebControls.DataList.GridLines","System.Web.UI.WebControls.DataList.HeaderStyle","System.Web.UI.WebControls.DataList.HeaderTemplate","System.Web.UI.WebControls.DataList.InitializeItem","System.Web.UI.WebControls.DataList.ItemCommand","System.Web.UI.WebControls.DataList.add_ItemCommand","System.Web.UI.WebControls.DataList.remove_ItemCommand","System.Web.UI.WebControls.DataList.ItemCreated","System.Web.UI.WebControls.DataList.add_ItemCreated","System.Web.UI.WebControls.DataList.remove_ItemCreated","System.Web.UI.WebControls.DataList.ItemDataBound","System.Web.UI.WebControls.DataList.add_ItemDataBound","System.Web.UI.WebControls.DataList.remove_ItemDataBound","System.Web.UI.WebControls.DataList.Items","System.Web.UI.WebControls.DataList.ItemStyle","System.Web.UI.WebControls.DataList.ItemTemplate","System.Web.UI.WebControls.DataList.LoadViewState","System.Web.UI.WebControls.DataList.OnBubbleEvent","System.Web.UI.WebControls.DataList.OnCancelCommand","System.Web.UI.WebControls.DataList.OnDeleteCommand","System.Web.UI.WebControls.DataList.OnEditCommand","System.Web.UI.WebControls.DataList.OnInit","System.Web.UI.WebControls.DataList.OnItemCommand","System.Web.UI.WebControls.DataList.OnItemCreated","System.Web.UI.WebControls.DataList.OnItemDataBound","System.Web.UI.WebControls.DataList.OnUpdateCommand","System.Web.UI.WebControls.DataList.PrepareControlHierarchy","System.Web.UI.WebControls.DataList.RenderContents","System.Web.UI.WebControls.DataList.RepeatColumns","System.Web.UI.WebControls.DataList.RepeatDirection","System.Web.UI.WebControls.DataList.RepeatLayout","System.Web.UI.WebControls.DataList.SaveViewState","System.Web.UI.WebControls.DataList.SelectCommandName","System.Web.UI.WebControls.DataList.SelectedIndex","System.Web.UI.WebControls.DataList.SelectedItem","System.Web.UI.WebControls.DataList.SelectedItemStyle","System.Web.UI.WebControls.DataList.SelectedItemTemplate","System.Web.UI.WebControls.DataList.SelectedValue","System.Web.UI.WebControls.DataList.SeparatorStyle","System.Web.UI.WebControls.DataList.SeparatorTemplate","System.Web.UI.WebControls.DataList.ShowFooter","System.Web.UI.WebControls.DataList.ShowHeader","System.Web.UI.WebControls.DataList.IRepeatInfoUser.GetItemStyle","System.Web.UI.WebControls.DataList.IRepeatInfoUser.HasFooter","System.Web.UI.WebControls.DataList.IRepeatInfoUser.HasHeader","System.Web.UI.WebControls.DataList.IRepeatInfoUser.HasSeparators","System.Web.UI.WebControls.DataList.IRepeatInfoUser.RenderItem","System.Web.UI.WebControls.DataList.IRepeatInfoUser.RepeatedItemCount","System.Web.UI.WebControls.DataList.TagKey","System.Web.UI.WebControls.DataList.TrackViewState","System.Web.UI.WebControls.DataList.UpdateCommand","System.Web.UI.WebControls.DataList.add_UpdateCommand","System.Web.UI.WebControls.DataList.remove_UpdateCommand","System.Web.UI.WebControls.DataList.UpdateCommandName"],"api_location":["System.Web.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.UI.WebControls.DataList","System::Web::UI::WebControls::DataList","System.Web.UI.WebControls.DataList.#ctor","System::Web::UI::WebControls::DataList::#ctor","System.Web.UI.WebControls.DataList.AlternatingItemStyle","System::Web::UI::WebControls::DataList::AlternatingItemStyle","System.Web.UI.WebControls.DataList.AlternatingItemTemplate","System::Web::UI::WebControls::DataList::AlternatingItemTemplate","System.Web.UI.WebControls.DataList.CancelCommand","System::Web::UI::WebControls::DataList::CancelCommand","System.Web.UI.WebControls.DataList.CancelCommandName","System::Web::UI::WebControls::DataList::CancelCommandName","System.Web.UI.WebControls.DataList.CreateControlHierarchy","System::Web::UI::WebControls::DataList::CreateControlHierarchy","System.Web.UI.WebControls.DataList.CreateControlStyle","System::Web::UI::WebControls::DataList::CreateControlStyle","System.Web.UI.WebControls.DataList.CreateItem","System::Web::UI::WebControls::DataList::CreateItem","System.Web.UI.WebControls.DataList.DeleteCommand","System::Web::UI::WebControls::DataList::DeleteCommand","System.Web.UI.WebControls.DataList.DeleteCommandName","System::Web::UI::WebControls::DataList::DeleteCommandName","System.Web.UI.WebControls.DataList.EditCommand","System::Web::UI::WebControls::DataList::EditCommand","System.Web.UI.WebControls.DataList.EditCommandName","System::Web::UI::WebControls::DataList::EditCommandName","System.Web.UI.WebControls.DataList.EditItemIndex","System::Web::UI::WebControls::DataList::EditItemIndex","System.Web.UI.WebControls.DataList.EditItemStyle","System::Web::UI::WebControls::DataList::EditItemStyle","System.Web.UI.WebControls.DataList.EditItemTemplate","System::Web::UI::WebControls::DataList::EditItemTemplate","System.Web.UI.WebControls.DataList.ExtractTemplateRows","System::Web::UI::WebControls::DataList::ExtractTemplateRows","System.Web.UI.WebControls.DataList.FooterStyle","System::Web::UI::WebControls::DataList::FooterStyle","System.Web.UI.WebControls.DataList.FooterTemplate","System::Web::UI::WebControls::DataList::FooterTemplate","System.Web.UI.WebControls.DataList.GridLines","System::Web::UI::WebControls::DataList::GridLines","System.Web.UI.WebControls.DataList.HeaderStyle","System::Web::UI::WebControls::DataList::HeaderStyle","System.Web.UI.WebControls.DataList.HeaderTemplate","System::Web::UI::WebControls::DataList::HeaderTemplate","System.Web.UI.WebControls.DataList.InitializeItem","System::Web::UI::WebControls::DataList::InitializeItem","System.Web.UI.WebControls.DataList.ItemCommand","System::Web::UI::WebControls::DataList::ItemCommand","System.Web.UI.WebControls.DataList.ItemCreated","System::Web::UI::WebControls::DataList::ItemCreated","System.Web.UI.WebControls.DataList.ItemDataBound","System::Web::UI::WebControls::DataList::ItemDataBound","System.Web.UI.WebControls.DataList.Items","System::Web::UI::WebControls::DataList::Items","System.Web.UI.WebControls.DataList.ItemStyle","System::Web::UI::WebControls::DataList::ItemStyle","System.Web.UI.WebControls.DataList.ItemTemplate","System::Web::UI::WebControls::DataList::ItemTemplate","System.Web.UI.WebControls.DataList.LoadViewState","System::Web::UI::WebControls::DataList::LoadViewState","System.Web.UI.WebControls.DataList.OnBubbleEvent","System::Web::UI::WebControls::DataList::OnBubbleEvent","System.Web.UI.WebControls.DataList.OnCancelCommand","System::Web::UI::WebControls::DataList::OnCancelCommand","System.Web.UI.WebControls.DataList.OnDeleteCommand","System::Web::UI::WebControls::DataList::OnDeleteCommand","System.Web.UI.WebControls.DataList.OnEditCommand","System::Web::UI::WebControls::DataList::OnEditCommand","System.Web.UI.WebControls.DataList.OnInit","System::Web::UI::WebControls::DataList::OnInit","System.Web.UI.WebControls.DataList.OnItemCommand","System::Web::UI::WebControls::DataList::OnItemCommand","System.Web.UI.WebControls.DataList.OnItemCreated","System::Web::UI::WebControls::DataList::OnItemCreated","System.Web.UI.WebControls.DataList.OnItemDataBound","System::Web::UI::WebControls::DataList::OnItemDataBound","System.Web.UI.WebControls.DataList.OnUpdateCommand","System::Web::UI::WebControls::DataList::OnUpdateCommand","System.Web.UI.WebControls.DataList.PrepareControlHierarchy","System::Web::UI::WebControls::DataList::PrepareControlHierarchy","System.Web.UI.WebControls.DataList.RenderContents","System::Web::UI::WebControls::DataList::RenderContents","System.Web.UI.WebControls.DataList.RepeatColumns","System::Web::UI::WebControls::DataList::RepeatColumns","System.Web.UI.WebControls.DataList.RepeatDirection","System::Web::UI::WebControls::DataList::RepeatDirection","System.Web.UI.WebControls.DataList.RepeatLayout","System::Web::UI::WebControls::DataList::RepeatLayout","System.Web.UI.WebControls.DataList.SaveViewState","System::Web::UI::WebControls::DataList::SaveViewState","System.Web.UI.WebControls.DataList.SelectCommandName","System::Web::UI::WebControls::DataList::SelectCommandName","System.Web.UI.WebControls.DataList.SelectedIndex","System::Web::UI::WebControls::DataList::SelectedIndex","System.Web.UI.WebControls.DataList.SelectedItem","System::Web::UI::WebControls::DataList::SelectedItem","System.Web.UI.WebControls.DataList.SelectedItemStyle","System::Web::UI::WebControls::DataList::SelectedItemStyle","System.Web.UI.WebControls.DataList.SelectedItemTemplate","System::Web::UI::WebControls::DataList::SelectedItemTemplate","System.Web.UI.WebControls.DataList.SelectedValue","System::Web::UI::WebControls::DataList::SelectedValue","System.Web.UI.WebControls.DataList.SeparatorStyle","System::Web::UI::WebControls::DataList::SeparatorStyle","System.Web.UI.WebControls.DataList.SeparatorTemplate","System::Web::UI::WebControls::DataList::SeparatorTemplate","System.Web.UI.WebControls.DataList.ShowFooter","System::Web::UI::WebControls::DataList::ShowFooter","System.Web.UI.WebControls.DataList.ShowHeader","System::Web::UI::WebControls::DataList::ShowHeader","System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#GetItemStyle","System::Web::UI::WebControls::DataList::System#Web#UI#WebControls#IRepeatInfoUser#GetItemStyle","System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#HasFooter","System::Web::UI::WebControls::DataList::System#Web#UI#WebControls#IRepeatInfoUser#HasFooter","System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#HasHeader","System::Web::UI::WebControls::DataList::System#Web#UI#WebControls#IRepeatInfoUser#HasHeader","System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#HasSeparators","System::Web::UI::WebControls::DataList::System#Web#UI#WebControls#IRepeatInfoUser#HasSeparators","System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#RenderItem","System::Web::UI::WebControls::DataList::System#Web#UI#WebControls#IRepeatInfoUser#RenderItem","System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#RepeatedItemCount","System::Web::UI::WebControls::DataList::System#Web#UI#WebControls#IRepeatInfoUser#RepeatedItemCount","System.Web.UI.WebControls.DataList.TagKey","System::Web::UI::WebControls::DataList::TagKey","System.Web.UI.WebControls.DataList.TrackViewState","System::Web::UI::WebControls::DataList::TrackViewState","System.Web.UI.WebControls.DataList.UpdateCommand","System::Web::UI::WebControls::DataList::UpdateCommand","System.Web.UI.WebControls.DataList.UpdateCommandName","System::Web::UI::WebControls::DataList::UpdateCommandName"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"02477f00-41b4-1379-556e-1678106a9ca1","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Web.UI.WebControls/DataList.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DataList class | Microsoft Docs","_op_ogTitle":"DataList class","description":"A data bound list control that displays items using templates.\n","toc_asset_id":"_splitted/System.Web.UI.WebControls/toc.json","toc_rel":"_splitted/System.Web.UI.WebControls/toc.json","source_url":"","ms.assetid":"System.Web.UI.WebControls.DataList","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.web.ui.webcontrols.datalist","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.web.ui.webcontrols.datalist","fileRelativePath":"System.Web.UI.WebControls.DataList.html"},"themesRelativePathToOutputRoot":"_themes/"}