{"content":"    \r\n    <h1 id=\"System_Threading_Tasks_Parallel\">\r\n      <span class=\"lang-csharp\">Parallel</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides support for parallel loops and regions.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static class Parallel</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Parallel</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The Parallel class provides library-based data parallel replacements for common operations such as for loops, for each loops, and execution of a set of statements.</p>\n\r\n    \r\n    \r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Parallel_For_System_Int32_System_Int32_System_Action_System_Int32_System_Threading_Tasks_ParallelLoopState__\" data-linktype=\"self-bookmark\">For(Int32,Int32,Action&lt;Int32,ParallelLoopState&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes a <code>for</code> (<code>For</code> in Visual Basic) loop in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Parallel_For_System_Int32_System_Int32_System_Action_System_Int32__\" data-linktype=\"self-bookmark\">For(Int32,Int32,Action&lt;Int32&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes a <code>for</code> (<code>For</code> in Visual Basic) loop in which iterations may run in parallel.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Parallel_For_System_Int64_System_Int64_System_Action_System_Int64_System_Threading_Tasks_ParallelLoopState__\" data-linktype=\"self-bookmark\">For(Int64,Int64,Action&lt;Int64,ParallelLoopState&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes a <code>for</code> (<code>For</code> in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Parallel_For_System_Int64_System_Int64_System_Action_System_Int64__\" data-linktype=\"self-bookmark\">For(Int64,Int64,Action&lt;Int64&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes a <code>for</code> (<code>For</code> in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Parallel_For_System_Int32_System_Int32_System_Threading_Tasks_ParallelOptions_System_Action_System_Int32_System_Threading_Tasks_ParallelLoopState__\" data-linktype=\"self-bookmark\">For(Int32,Int32,ParallelOptions,Action&lt;Int32,ParallelLoopState&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes a <code>for</code> (<code>For</code> in Visual Basic) loop in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Parallel_For_System_Int32_System_Int32_System_Threading_Tasks_ParallelOptions_System_Action_System_Int32__\" data-linktype=\"self-bookmark\">For(Int32,Int32,ParallelOptions,Action&lt;Int32&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes a <code>for</code> (<code>For</code> in Visual Basic) loop in which iterations may run in parallel and loop options can be configured.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Parallel_For_System_Int64_System_Int64_System_Threading_Tasks_ParallelOptions_System_Action_System_Int64_System_Threading_Tasks_ParallelLoopState__\" data-linktype=\"self-bookmark\">For(Int64,Int64,ParallelOptions,Action&lt;Int64,ParallelLoopState&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes a <code>for</code> (<code>For</code> in Visual Basic)  loop with 64-bit indexes in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Parallel_For_System_Int64_System_Int64_System_Threading_Tasks_ParallelOptions_System_Action_System_Int64__\" data-linktype=\"self-bookmark\">For(Int64,Int64,ParallelOptions,Action&lt;Int64&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes a <code>for</code> (<code>For</code> in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel and loop options can be configured.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Parallel_For__1_System_Int32_System_Int32_System_Func___0__System_Func_System_Int32_System_Threading_Tasks_ParallelLoopState___0___0__System_Action___0__\" data-linktype=\"self-bookmark\">For&lt;TLocal&gt;(Int32,Int32,Func&lt;TLocal&gt;,Func&lt;Int32,ParallelLoopState,TLocal,TLocal&gt;,Action&lt;TLocal&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes a <code>for</code> (<code>For</code> in Visual Basic) loop with thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Parallel_For__1_System_Int64_System_Int64_System_Func___0__System_Func_System_Int64_System_Threading_Tasks_ParallelLoopState___0___0__System_Action___0__\" data-linktype=\"self-bookmark\">For&lt;TLocal&gt;(Int64,Int64,Func&lt;TLocal&gt;,Func&lt;Int64,ParallelLoopState,TLocal,TLocal&gt;,Action&lt;TLocal&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes a <code>for</code> (<code>For</code> in Visual Basic)  loop with 64-bit indexes and thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Parallel_For__1_System_Int32_System_Int32_System_Threading_Tasks_ParallelOptions_System_Func___0__System_Func_System_Int32_System_Threading_Tasks_ParallelLoopState___0___0__System_Action___0__\" data-linktype=\"self-bookmark\">For&lt;TLocal&gt;(Int32,Int32,ParallelOptions,Func&lt;TLocal&gt;,Func&lt;Int32,ParallelLoopState,TLocal,TLocal&gt;,Action&lt;TLocal&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes a <code>for</code> (<code>For</code> in Visual Basic)  loop with thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Parallel_For__1_System_Int64_System_Int64_System_Threading_Tasks_ParallelOptions_System_Func___0__System_Func_System_Int64_System_Threading_Tasks_ParallelLoopState___0___0__System_Action___0__\" data-linktype=\"self-bookmark\">For&lt;TLocal&gt;(Int64,Int64,ParallelOptions,Func&lt;TLocal&gt;,Func&lt;Int64,ParallelLoopState,TLocal,TLocal&gt;,Action&lt;TLocal&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes a <code>for</code> (<code>For</code> in Visual Basic) loop with 64-bit indexes and thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Parallel_ForEach__1_System_Collections_Concurrent_OrderablePartitioner___0__System_Action___0_System_Threading_Tasks_ParallelLoopState_System_Int64__\" data-linktype=\"self-bookmark\">ForEach&lt;TSource&gt;(OrderablePartitioner&lt;TSource&gt;,Action&lt;TSource,ParallelLoopState,Int64&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation on a <span class=\"xref\">stem.Collections.Concurrent.OrderablePartitioner`1</span> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Parallel_ForEach__1_System_Collections_Concurrent_Partitioner___0__System_Action___0_System_Threading_Tasks_ParallelLoopState__\" data-linktype=\"self-bookmark\">ForEach&lt;TSource&gt;(Partitioner&lt;TSource&gt;,Action&lt;TSource,ParallelLoopState&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation on a <a class=\"xref\" href=\"system.collections.concurrent.partitioner\" data-linktype=\"relative-path\">Partitioner</a> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Parallel_ForEach__1_System_Collections_Concurrent_Partitioner___0__System_Action___0__\" data-linktype=\"self-bookmark\">ForEach&lt;TSource&gt;(Partitioner&lt;TSource&gt;,Action&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation on a <a class=\"xref\" href=\"system.collections.concurrent.partitioner\" data-linktype=\"relative-path\">Partitioner</a> in which iterations may run in parallel.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Parallel_ForEach__1_System_Collections_Generic_IEnumerable___0__System_Action___0_System_Threading_Tasks_ParallelLoopState_System_Int64__\" data-linktype=\"self-bookmark\">ForEach&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Action&lt;TSource,ParallelLoopState,Int64&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation with 64-bit indexes on an <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Parallel_ForEach__1_System_Collections_Generic_IEnumerable___0__System_Action___0_System_Threading_Tasks_ParallelLoopState__\" data-linktype=\"self-bookmark\">ForEach&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Action&lt;TSource,ParallelLoopState&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation on an <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Parallel_ForEach__1_System_Collections_Generic_IEnumerable___0__System_Action___0__\" data-linktype=\"self-bookmark\">ForEach&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Action&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation on an <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> in which iterations may run in parallel.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Parallel_ForEach__1_System_Collections_Concurrent_OrderablePartitioner___0__System_Threading_Tasks_ParallelOptions_System_Action___0_System_Threading_Tasks_ParallelLoopState_System_Int64__\" data-linktype=\"self-bookmark\">ForEach&lt;TSource&gt;(OrderablePartitioner&lt;TSource&gt;,ParallelOptions,Action&lt;TSource,ParallelLoopState,Int64&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation on a <span class=\"xref\">stem.Collections.Concurrent.OrderablePartitioner`1</span> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Parallel_ForEach__1_System_Collections_Concurrent_Partitioner___0__System_Threading_Tasks_ParallelOptions_System_Action___0_System_Threading_Tasks_ParallelLoopState__\" data-linktype=\"self-bookmark\">ForEach&lt;TSource&gt;(Partitioner&lt;TSource&gt;,ParallelOptions,Action&lt;TSource,ParallelLoopState&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation on a <a class=\"xref\" href=\"system.collections.concurrent.partitioner\" data-linktype=\"relative-path\">Partitioner</a> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Parallel_ForEach__1_System_Collections_Concurrent_Partitioner___0__System_Threading_Tasks_ParallelOptions_System_Action___0__\" data-linktype=\"self-bookmark\">ForEach&lt;TSource&gt;(Partitioner&lt;TSource&gt;,ParallelOptions,Action&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation on a <a class=\"xref\" href=\"system.collections.concurrent.partitioner\" data-linktype=\"relative-path\">Partitioner</a> in which iterations may run in parallel and loop options can be configured.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Parallel_ForEach__1_System_Collections_Generic_IEnumerable___0__System_Threading_Tasks_ParallelOptions_System_Action___0_System_Threading_Tasks_ParallelLoopState_System_Int64__\" data-linktype=\"self-bookmark\">ForEach&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,ParallelOptions,Action&lt;TSource,ParallelLoopState,Int64&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation with 64-bit indexes on an <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Parallel_ForEach__1_System_Collections_Generic_IEnumerable___0__System_Threading_Tasks_ParallelOptions_System_Action___0_System_Threading_Tasks_ParallelLoopState__\" data-linktype=\"self-bookmark\">ForEach&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,ParallelOptions,Action&lt;TSource,ParallelLoopState&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation on an <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Parallel_ForEach__1_System_Collections_Generic_IEnumerable___0__System_Threading_Tasks_ParallelOptions_System_Action___0__\" data-linktype=\"self-bookmark\">ForEach&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,ParallelOptions,Action&lt;TSource&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation on an <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> in which iterations may run in parallel and loop options can be configured.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Parallel_ForEach__2_System_Collections_Concurrent_OrderablePartitioner___0__System_Func___1__System_Func___0_System_Threading_Tasks_ParallelLoopState_System_Int64___1___1__System_Action___1__\" data-linktype=\"self-bookmark\">ForEach&lt;TSource,TLocal&gt;(OrderablePartitioner&lt;TSource&gt;,Func&lt;TLocal&gt;,Func&lt;TSource,ParallelLoopState,Int64,TLocal,TLocal&gt;,Action&lt;TLocal&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation with thread-local data on a <span class=\"xref\">stem.Collections.Concurrent.OrderablePartitioner`1</span> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Parallel_ForEach__2_System_Collections_Concurrent_Partitioner___0__System_Func___1__System_Func___0_System_Threading_Tasks_ParallelLoopState___1___1__System_Action___1__\" data-linktype=\"self-bookmark\">ForEach&lt;TSource,TLocal&gt;(Partitioner&lt;TSource&gt;,Func&lt;TLocal&gt;,Func&lt;TSource,ParallelLoopState,TLocal,TLocal&gt;,Action&lt;TLocal&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation with thread-local data on a <a class=\"xref\" href=\"system.collections.concurrent.partitioner\" data-linktype=\"relative-path\">Partitioner</a> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Parallel_ForEach__2_System_Collections_Generic_IEnumerable___0__System_Func___1__System_Func___0_System_Threading_Tasks_ParallelLoopState_System_Int64___1___1__System_Action___1__\" data-linktype=\"self-bookmark\">ForEach&lt;TSource,TLocal&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TLocal&gt;,Func&lt;TSource,ParallelLoopState,Int64,TLocal,TLocal&gt;,Action&lt;TLocal&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation with thread-local data on an <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Parallel_ForEach__2_System_Collections_Generic_IEnumerable___0__System_Func___1__System_Func___0_System_Threading_Tasks_ParallelLoopState___1___1__System_Action___1__\" data-linktype=\"self-bookmark\">ForEach&lt;TSource,TLocal&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TLocal&gt;,Func&lt;TSource,ParallelLoopState,TLocal,TLocal&gt;,Action&lt;TLocal&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation with thread-local data on an <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Parallel_ForEach__2_System_Collections_Concurrent_OrderablePartitioner___0__System_Threading_Tasks_ParallelOptions_System_Func___1__System_Func___0_System_Threading_Tasks_ParallelLoopState_System_Int64___1___1__System_Action___1__\" data-linktype=\"self-bookmark\">ForEach&lt;TSource,TLocal&gt;(OrderablePartitioner&lt;TSource&gt;,ParallelOptions,Func&lt;TLocal&gt;,Func&lt;TSource,ParallelLoopState,Int64,TLocal,TLocal&gt;,Action&lt;TLocal&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation with 64-bit indexes and  with thread-local data on a <span class=\"xref\">stem.Collections.Concurrent.OrderablePartitioner`1</span> in which iterations may run in parallel , loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Parallel_ForEach__2_System_Collections_Concurrent_Partitioner___0__System_Threading_Tasks_ParallelOptions_System_Func___1__System_Func___0_System_Threading_Tasks_ParallelLoopState___1___1__System_Action___1__\" data-linktype=\"self-bookmark\">ForEach&lt;TSource,TLocal&gt;(Partitioner&lt;TSource&gt;,ParallelOptions,Func&lt;TLocal&gt;,Func&lt;TSource,ParallelLoopState,TLocal,TLocal&gt;,Action&lt;TLocal&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation  with thread-local data on a <a class=\"xref\" href=\"system.collections.concurrent.partitioner\" data-linktype=\"relative-path\">Partitioner</a> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Parallel_ForEach__2_System_Collections_Generic_IEnumerable___0__System_Threading_Tasks_ParallelOptions_System_Func___1__System_Func___0_System_Threading_Tasks_ParallelLoopState_System_Int64___1___1__System_Action___1__\" data-linktype=\"self-bookmark\">ForEach&lt;TSource,TLocal&gt;(IEnumerable&lt;TSource&gt;,ParallelOptions,Func&lt;TLocal&gt;,Func&lt;TSource,ParallelLoopState,Int64,TLocal,TLocal&gt;,Action&lt;TLocal&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation with thread-local data and 64-bit indexes on an <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Parallel_ForEach__2_System_Collections_Generic_IEnumerable___0__System_Threading_Tasks_ParallelOptions_System_Func___1__System_Func___0_System_Threading_Tasks_ParallelLoopState___1___1__System_Action___1__\" data-linktype=\"self-bookmark\">ForEach&lt;TSource,TLocal&gt;(IEnumerable&lt;TSource&gt;,ParallelOptions,Func&lt;TLocal&gt;,Func&lt;TSource,ParallelLoopState,TLocal,TLocal&gt;,Action&lt;TLocal&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation with thread-local data on an <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated..</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Parallel_Invoke_System_Action___\" data-linktype=\"self-bookmark\">Invoke(Action[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes each of the provided actions, possibly in parallel.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Parallel_Invoke_System_Threading_Tasks_ParallelOptions_System_Action___\" data-linktype=\"self-bookmark\">Invoke(ParallelOptions,Action[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes each of the provided actions, possibly in parallel, unless the operation is cancelled by the user.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Parallel_For_System_Int32_System_Int32_System_Action_System_Int32_System_Threading_Tasks_ParallelLoopState__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Parallel_For_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">For(Int32,Int32,Action&lt;Int32,ParallelLoopState&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Executes a <code>for</code> (<code>For</code> in Visual Basic) loop in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, Action&lt;int,System.Threading.Tasks.ParallelLoopState&gt; body);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fromInclusive</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The start index, inclusive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>toExclusive</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The end index, exclusive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-2\" data-linktype=\"relative-path\">Action</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>,<a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that is invoked once per iteration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.parallelloopresult\" data-linktype=\"relative-path\">ParallelLoopResult</a></div>\r\n                  </div>\r\n                  <p>A  structure that contains information about which portion of the loop completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>body</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>The exception that contains all the individual exceptions thrown on all threads.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>body</code> delegate is invoked once for each value in the iteration range (<code>fromInclusive</code>, <code>toExclusive</code>). It is provided with two arguments:  </p>\n<ul>\n<li><p>An <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value that represents the iteration count.  </p>\n</li>\n<li><p>A <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a> instance that can be used to break out of the loop prematurely. The <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a> object is created by the compiler; it cannot be instantiated in user code.  </p>\n<p>Calling the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_Break_\" data-linktype=\"relative-path\">Break</a> method informs the <code>for</code> operation that iterations after the current one don&#39;t have to execute. However, all iterations before the current one will still have to be executed if they haven&#39;t already.  </p>\n<p>Therefore, calling <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_Break_\" data-linktype=\"relative-path\">Break</a> is similar to using a break operation within a conventional <code>for</code> loop in a language like C#, but it is not a perfect substitute: For example, there is no guarantee that iterations after the current one will definitely not execute.  </p>\n<p>If executing all iterations before the current one is not necessary, use the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_Stop_\" data-linktype=\"relative-path\">Stop</a> method instead of using <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_Break_\" data-linktype=\"relative-path\">Break</a>. Calling <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_Stop_\" data-linktype=\"relative-path\">Stop</a> informs the <code>for</code> loop that it may abandon all remaining iterations, regardless of whether they&#39;re before or after the current iteration, because all required work will have already been completed. However, as with <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_Break_\" data-linktype=\"relative-path\">Break</a>, there are no guarantees regarding which other iterations will not execute.  </p>\n<p>If a loop is ended prematurely, the <a class=\"xref\" href=\"system.threading.tasks.parallelloopresult\" data-linktype=\"relative-path\">ParallelLoopResult</a> structure that is returned will contain relevant information about the loop&#39;s completion.  </p>\n<p>If <code>fromInclusive</code> is greater than or equal to <code>toExclusive</code>, the method returns immediately without performing any iterations.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example executes up to 100 iterations of a loop in parallel. Each iteration pauses for a random interval from 1 to 1,000 milliseconds. A randomly generated value determines on which iteration of the loop the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_Break_\" data-linktype=\"relative-path\">Break</a> method is called. As the output from the example shows, no iterations whose index is greater than the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_LowestBreakIteration_\" data-linktype=\"relative-path\">LowestBreakIteration</a> property value start after the call to the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_Break_\" data-linktype=\"relative-path\">Break</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.ParallelLoopState#2\">using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var rnd = new Random();\n      int breakIndex = rnd.Next(1, 11);\n      Nullable&lt;long&gt; lowest = new Nullable&lt;long&gt;();\n\n      Console.WriteLine(&quot;Will call Break at iteration {0}<br>&quot;,\n                        breakIndex);\n\n      var result = Parallel.For(1, 101, (i, state) =&gt; {\n                                            Console.WriteLine(&quot;Beginning iteration {0}&quot;, i);\n                                            int delay;\n                                            Monitor.Enter(rnd);\n                                               delay = rnd.Next(1, 1001);\n                                            Monitor.Exit(rnd);\n                                            Thread.Sleep(delay);\n                                            \n                                            if (state.ShouldExitCurrentIteration) {\n                                               if (state.LowestBreakIteration &lt; i)\n                                                  return;\n                                            }\n\n                                            if (i == breakIndex) {\n                                               Console.WriteLine(&quot;Break in iteration {0}&quot;, i);\n                                               state.Break();\n                                               if (state.LowestBreakIteration.HasValue)\n                                                  if (lowest &lt; state.LowestBreakIteration)\n                                                     lowest = state.LowestBreakIteration;\n                                                  else\n                                                     lowest = state.LowestBreakIteration;\n                                            }\n\n                                            Console.WriteLine(&quot;Completed iteration {0}&quot;, i);\n                                       });\n         if (lowest.HasValue)\n            Console.WriteLine(&quot;<br>Lowest Break Iteration: {0}&quot;, lowest);\n         else\n            Console.WriteLine(&quot;<br>No lowest break iteration.&quot;);\n   }\n}\n// The example displays output like the following:\n//       Will call Break at iteration 8\n//\n//       Beginning iteration 1\n//       Beginning iteration 13\n//       Beginning iteration 97\n//       Beginning iteration 25\n//       Beginning iteration 49\n//       Beginning iteration 37\n//       Beginning iteration 85\n//       Beginning iteration 73\n//       Beginning iteration 61\n//       Completed iteration 85\n//       Beginning iteration 86\n//       Completed iteration 61\n//       Beginning iteration 62\n//       Completed iteration 86\n//       Beginning iteration 87\n//       Completed iteration 37\n//       Beginning iteration 38\n//       Completed iteration 38\n//       Beginning iteration 39\n//       Completed iteration 25\n//       Beginning iteration 26\n//       Completed iteration 26\n//       Beginning iteration 27\n//       Completed iteration 73\n//       Beginning iteration 74\n//       Completed iteration 62\n//       Beginning iteration 63\n//       Completed iteration 39\n//       Beginning iteration 40\n//       Completed iteration 40\n//       Beginning iteration 41\n//       Completed iteration 13\n//       Beginning iteration 14\n//       Completed iteration 1\n//       Beginning iteration 2\n//       Completed iteration 97\n//       Beginning iteration 98\n//       Completed iteration 49\n//       Beginning iteration 50\n//       Completed iteration 87\n//       Completed iteration 27\n//       Beginning iteration 28\n//       Completed iteration 50\n//       Beginning iteration 51\n//       Beginning iteration 88\n//       Completed iteration 14\n//       Beginning iteration 15\n//       Completed iteration 15\n//       Completed iteration 2\n//       Beginning iteration 3\n//       Beginning iteration 16\n//       Completed iteration 63\n//       Beginning iteration 64\n//       Completed iteration 74\n//       Beginning iteration 75\n//       Completed iteration 41\n//       Beginning iteration 42\n//       Completed iteration 28\n//       Beginning iteration 29\n//       Completed iteration 29\n//       Beginning iteration 30\n//       Completed iteration 98\n//       Beginning iteration 99\n//       Completed iteration 64\n//       Beginning iteration 65\n//       Completed iteration 42\n//       Beginning iteration 43\n//       Completed iteration 88\n//       Beginning iteration 89\n//       Completed iteration 51\n//       Beginning iteration 52\n//       Completed iteration 16\n//       Beginning iteration 17\n//       Completed iteration 43\n//       Beginning iteration 44\n//       Completed iteration 44\n//       Beginning iteration 45\n//       Completed iteration 99\n//       Beginning iteration 4\n//       Completed iteration 3\n//       Beginning iteration 8\n//       Completed iteration 4\n//       Beginning iteration 5\n//       Completed iteration 52\n//       Beginning iteration 53\n//       Completed iteration 75\n//       Beginning iteration 76\n//       Completed iteration 76\n//       Beginning iteration 77\n//       Completed iteration 65\n//       Beginning iteration 66\n//       Completed iteration 5\n//       Beginning iteration 6\n//       Completed iteration 89\n//       Beginning iteration 90\n//       Completed iteration 30\n//       Beginning iteration 31\n//       Break in iteration 8\n//       Completed iteration 8\n//       Completed iteration 6\n//       Beginning iteration 7\n//       Completed iteration 7\n//\n//       Lowest Break Iteration: 8\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.ParallelLoopState#2\">Imports System.Threading\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim rnd As New Random()\n      Dim breakIndex As Integer = rnd.Next(1, 11)\n      Dim lowest As New Nullable(Of Long)()\n\n      Console.WriteLine(&quot;Will call Break at iteration {0}&quot;, breakIndex)\n      Console.WriteLine()\n\n      Dim result = Parallel.For(1, 101, Sub(i, state)\n                                            Console.WriteLine(&quot;Beginning iteration {0}&quot;, i)\n                                            Dim delay As Integer\n                                            Monitor.Enter(rnd)\n                                               delay = rnd.Next(1, 1001)\n                                            Monitor.Exit(rnd)\n                                            Thread.Sleep(delay)\n\n                                            If state.ShouldExitCurrentIteration Then\n                                               If state.LowestBreakIteration &lt; i Then\n                                                  Return\n                                               End If\n                                            End If\n\n                                            If i = breakIndex Then\n                                               Console.WriteLine(&quot;Break in iteration {0}&quot;, i)\n                                               state.Break()\n                                               If state.LowestBreakIteration.HasValue Then\n                                                  If lowest &lt; state.LowestBreakIteration Then\n                                                     lowest = state.LowestBreakIteration\n                                                  Else\n                                                     lowest = state.LowestBreakIteration\n                                                  End If\n                                               End If\n                                            End If\n\n                                            Console.WriteLine(&quot;Completed iteration {0}&quot;, i)\n                                       End Sub )\n         Console.WriteLine()\n         If lowest.HasValue Then\n            Console.WriteLine(&quot;Lowest Break Iteration: {0}&quot;, lowest)\n         Else\n            Console.WriteLine(&quot;No lowest break iteration.&quot;)\n         End If\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;       Will call Break at iteration 8\n&#39;\n&#39;       Beginning iteration 1\n&#39;       Beginning iteration 13\n&#39;       Beginning iteration 97\n&#39;       Beginning iteration 25\n&#39;       Beginning iteration 49\n&#39;       Beginning iteration 37\n&#39;       Beginning iteration 85\n&#39;       Beginning iteration 73\n&#39;       Beginning iteration 61\n&#39;       Completed iteration 85\n&#39;       Beginning iteration 86\n&#39;       Completed iteration 61\n&#39;       Beginning iteration 62\n&#39;       Completed iteration 86\n&#39;       Beginning iteration 87\n&#39;       Completed iteration 37\n&#39;       Beginning iteration 38\n&#39;       Completed iteration 38\n&#39;       Beginning iteration 39\n&#39;       Completed iteration 25\n&#39;       Beginning iteration 26\n&#39;       Completed iteration 26\n&#39;       Beginning iteration 27\n&#39;       Completed iteration 73\n&#39;       Beginning iteration 74\n&#39;       Completed iteration 62\n&#39;       Beginning iteration 63\n&#39;       Completed iteration 39\n&#39;       Beginning iteration 40\n&#39;       Completed iteration 40\n&#39;       Beginning iteration 41\n&#39;       Completed iteration 13\n&#39;       Beginning iteration 14\n&#39;       Completed iteration 1\n&#39;       Beginning iteration 2\n&#39;       Completed iteration 97\n&#39;       Beginning iteration 98\n&#39;       Completed iteration 49\n&#39;       Beginning iteration 50\n&#39;       Completed iteration 87\n&#39;       Completed iteration 27\n&#39;       Beginning iteration 28\n&#39;       Completed iteration 50\n&#39;       Beginning iteration 51\n&#39;       Beginning iteration 88\n&#39;       Completed iteration 14\n&#39;       Beginning iteration 15\n&#39;       Completed iteration 15\n&#39;       Completed iteration 2\n&#39;       Beginning iteration 3\n&#39;       Beginning iteration 16\n&#39;       Completed iteration 63\n&#39;       Beginning iteration 64\n&#39;       Completed iteration 74\n&#39;       Beginning iteration 75\n&#39;       Completed iteration 41\n&#39;       Beginning iteration 42\n&#39;       Completed iteration 28\n&#39;       Beginning iteration 29\n&#39;       Completed iteration 29\n&#39;       Beginning iteration 30\n&#39;       Completed iteration 98\n&#39;       Beginning iteration 99\n&#39;       Completed iteration 64\n&#39;       Beginning iteration 65\n&#39;       Completed iteration 42\n&#39;       Beginning iteration 43\n&#39;       Completed iteration 88\n&#39;       Beginning iteration 89\n&#39;       Completed iteration 51\n&#39;       Beginning iteration 52\n&#39;       Completed iteration 16\n&#39;       Beginning iteration 17\n&#39;       Completed iteration 43\n&#39;       Beginning iteration 44\n&#39;       Completed iteration 44\n&#39;       Beginning iteration 45\n&#39;       Completed iteration 99\n&#39;       Beginning iteration 4\n&#39;       Completed iteration 3\n&#39;       Beginning iteration 8\n&#39;       Completed iteration 4\n&#39;       Beginning iteration 5\n&#39;       Completed iteration 52\n&#39;       Beginning iteration 53\n&#39;       Completed iteration 75\n&#39;       Beginning iteration 76\n&#39;       Completed iteration 76\n&#39;       Beginning iteration 77\n&#39;       Completed iteration 65\n&#39;       Beginning iteration 66\n&#39;       Completed iteration 5\n&#39;       Beginning iteration 6\n&#39;       Completed iteration 89\n&#39;       Beginning iteration 90\n&#39;       Completed iteration 30\n&#39;       Beginning iteration 31\n&#39;       Break in iteration 8\n&#39;       Completed iteration 8\n&#39;       Completed iteration 6\n&#39;       Beginning iteration 7\n&#39;       Completed iteration 7\n&#39;\n&#39;       Lowest Break Iteration: 8\n</code></pre><p> Because iterations of the loop are still likely to be executing when the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_Break_\" data-linktype=\"relative-path\">Break</a> method is called, each iteration calls the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_ShouldExitCurrentIteration_\" data-linktype=\"relative-path\">ShouldExitCurrentIteration</a> property to check whether another iteration has called the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_Break_\" data-linktype=\"relative-path\">Break</a> method. If  the property value is <code>true</code>, the iteration checks the value of the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_LowestBreakIteration_\" data-linktype=\"relative-path\">LowestBreakIteration</a> property and, if it is greater than the current iteration&#39;s index value, returns immediately.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Parallel_For_System_Int32_System_Int32_System_Action_System_Int32__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Parallel_For_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">For(Int32,Int32,Action&lt;Int32&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Executes a <code>for</code> (<code>For</code> in Visual Basic) loop in which iterations may run in parallel.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, Action&lt;int&gt; body);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fromInclusive</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The start index, inclusive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>toExclusive</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The end index, exclusive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that is invoked once per iteration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.parallelloopresult\" data-linktype=\"relative-path\">ParallelLoopResult</a></div>\r\n                  </div>\r\n                  <p>A structure that contains information about which portion of the loop completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>body</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>The exception that contains all the individual exceptions thrown on all threads.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>body</code> delegate is invoked once for each value in the iteration range (<code>fromInclusive</code>, <code>toExclusive</code>). It is provided with the iteration count (<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>) as a parameter.  </p>\n<p> If <code>fromInclusive</code> is greater than or equal to <code>toExclusive</code>, the method returns immediately without performing any iterations.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the For method for 100 invocations of a delegate that generates random byte values and computes their sum.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Parallel.For#1\">Imports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim result As ParallelLoopResult = Parallel.For(0, 100, Sub(ctr)\n                                                                 Dim rnd As New Random(ctr * 100000)\n                                                                 Dim bytes(99) As Byte\n                                                                 rnd.NextBytes(bytes)\n                                                                 Dim sum As Integer\n                                                                 For Each byt In bytes\n                                                                    sum += byt\n                                                                 Next\n                                                                 Console.WriteLine(&quot;Iteration {0,2}: {1:N0}&quot;, ctr, sum)\n                                                              End Sub)\n      Console.WriteLine(&quot;Result: {0}&quot;, If(result.IsCompleted, &quot;Completed Normally&quot;, \n                                                             String.Format(&quot;Completed to {0}&quot;, result.LowestBreakIteration)))\n   End Sub\nEnd Module\n&#39; The following is a portion of the output displayed by the example:\n&#39;       Iteration  0: 12,509\n&#39;       Iteration 50: 12,823\n&#39;       Iteration 51: 11,275\n&#39;       Iteration 52: 12,531\n&#39;       Iteration  1: 13,007\n&#39;       Iteration 53: 13,799\n&#39;       Iteration  4: 12,945\n&#39;       Iteration  2: 13,246\n&#39;       Iteration 54: 13,008\n&#39;       Iteration 55: 12,727\n&#39;       Iteration 56: 13,223\n&#39;       Iteration 57: 13,717\n&#39;       Iteration  5: 12,679\n&#39;       Iteration  3: 12,455\n&#39;       Iteration 58: 12,669\n&#39;       Iteration 59: 11,882\n&#39;       Iteration  6: 13,167\n&#39;       ...\n&#39;       Iteration 92: 12,275\n&#39;       Iteration 93: 13,282\n&#39;       Iteration 94: 12,745\n&#39;       Iteration 95: 11,957\n&#39;       Iteration 96: 12,455\n&#39;       Result: Completed Normally\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Parallel.For#1\">using System;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      ParallelLoopResult result = Parallel.For(0, 100, ctr =&gt; { Random rnd = new Random(ctr * 100000);\n                                                                Byte[] bytes = new Byte[100];\n                                                                rnd.NextBytes(bytes);\n                                                                int sum = 0;\n                                                                foreach(var byt in bytes)\n                                                                    sum += byt;\n                                                                Console.WriteLine(&quot;Iteration {0,2}: {1:N0}&quot;, ctr, sum);\n                                                              });\n      Console.WriteLine(&quot;Result: {0}&quot;, result.IsCompleted ? &quot;Completed Normally&quot; : \n                                                             String.Format(&quot;Completed to {0}&quot;, result.LowestBreakIteration));\n   }\n}\n// The following is a portion of the output displayed by the example:\n//       Iteration  0: 12,509\n//       Iteration 50: 12,823\n//       Iteration 51: 11,275\n//       Iteration 52: 12,531\n//       Iteration  1: 13,007\n//       Iteration 53: 13,799\n//       Iteration  4: 12,945\n//       Iteration  2: 13,246\n//       Iteration 54: 13,008\n//       Iteration 55: 12,727\n//       Iteration 56: 13,223\n//       Iteration 57: 13,717\n//       Iteration  5: 12,679\n//       Iteration  3: 12,455\n//       Iteration 58: 12,669\n//       Iteration 59: 11,882\n//       Iteration  6: 13,167\n//       ...\n//       Iteration 92: 12,275\n//       Iteration 93: 13,282\n//       Iteration 94: 12,745\n//       Iteration 95: 11,957\n//       Iteration 96: 12,455\n//       Result: Completed Normally\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Parallel_For_System_Int64_System_Int64_System_Action_System_Int64_System_Threading_Tasks_ParallelLoopState__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Parallel_For_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">For(Int64,Int64,Action&lt;Int64,ParallelLoopState&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Executes a <code>for</code> (<code>For</code> in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, Action&lt;long,System.Threading.Tasks.ParallelLoopState&gt; body);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fromInclusive</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The start index, inclusive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>toExclusive</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The end index, exclusive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-2\" data-linktype=\"relative-path\">Action</a>&lt;<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>,<a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that is invoked once per iteration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.parallelloopresult\" data-linktype=\"relative-path\">ParallelLoopResult</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.threading.tasks.parallelloopresult\" data-linktype=\"relative-path\">ParallelLoopResult</a> structure that contains information on what portion of the loop completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>body</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>The exception that contains all the individual exceptions thrown on all threads.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>body</code> delegate is invoked once for each value in the iteration range (<code>fromInclusive</code>, <code>toExclusive</code>). It is provided with the following parameters: the iteration count (<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>), and a <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a> instance that may be used to break out of the loop prematurely.  </p>\n<p> Calling the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_Break_\" data-linktype=\"relative-path\">Break</a> method informs the <code>for</code> operation that iterations after the current one donâ€™t have to be executed, but all iterations before the current one do.  </p>\n<p> Therefore, calling Break is similar to using a break operation within a conventional <code>for</code> loop in a language like C#, but it is not a perfect substitute: For example, there is no guarantee that iterations after the current one will definitely not execute.  </p>\n<p> If executing all iterations before the current one is not necessary, use the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_Stop_\" data-linktype=\"relative-path\">Stop</a> method instead of using <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_Break_\" data-linktype=\"relative-path\">Break</a>. Calling <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_Stop_\" data-linktype=\"relative-path\">Stop</a> informs the <code>for</code> loop that it may abandon all remaining iterations, regardless of whether they&#39;re before or after the current iteration, because all required work will have already been completed. However, as with <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_Break_\" data-linktype=\"relative-path\">Break</a>, there are no guarantees regarding which other iterations will not execute.  </p>\n<p> If a loop is ended prematurely, the <a class=\"xref\" href=\"system.threading.tasks.parallelloopresult\" data-linktype=\"relative-path\">ParallelLoopResult</a> structure that is returned will contain relevant information about the loop&#39;s completion.  </p>\n<p> If <code>fromInclusive</code> is greater than or equal to <code>toExclusive</code>, then the method returns immediately without performing any iterations.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Parallel_For_System_Int64_System_Int64_System_Action_System_Int64__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Parallel_For_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">For(Int64,Int64,Action&lt;Int64&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Executes a <code>for</code> (<code>For</code> in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, Action&lt;long&gt; body);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fromInclusive</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The start index, inclusive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>toExclusive</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The end index, exclusive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action</a>&lt;<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that is invoked once per iteration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.parallelloopresult\" data-linktype=\"relative-path\">ParallelLoopResult</a></div>\r\n                  </div>\r\n                  <p>A structure that contains information about which portion of the loop completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>body</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>The exception that contains all the individual exceptions thrown on all threads.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>body</code> delegate is invoked once for each value in the iteration range (<code>fromInclusive</code>, <code>toExclusive</code>). It is provided with the iteration count (<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>) as a parameter.  </p>\n<p> If <code>fromInclusive</code> is greater than or equal to <code>toExclusive</code>, the method returns immediately without performing any iterations.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Parallel_For_System_Int32_System_Int32_System_Threading_Tasks_ParallelOptions_System_Action_System_Int32_System_Threading_Tasks_ParallelLoopState__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Parallel_For_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">For(Int32,Int32,ParallelOptions,Action&lt;Int32,ParallelLoopState&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Executes a <code>for</code> (<code>For</code> in Visual Basic) loop in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;int,System.Threading.Tasks.ParallelLoopState&gt; body);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fromInclusive</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The start index, inclusive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>toExclusive</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The end index, exclusive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parallelOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.paralleloptions\" data-linktype=\"relative-path\">ParallelOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that configures the behavior of this operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-2\" data-linktype=\"relative-path\">Action</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>,<a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that is invoked once per iteration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.parallelloopresult\" data-linktype=\"relative-path\">ParallelLoopResult</a></div>\r\n                  </div>\r\n                  <p>A structure that contains information about which portion of the loop completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.operationcanceledexception\" data-linktype=\"relative-path\">OperationCanceledException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> in the <code>parallelOptions</code> argument is canceled.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>body</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>parallelOptions</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>The exception that contains all the individual exceptions thrown on all threads.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a> associated with the <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> in the <code>parallelOptions</code> has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>body</code> delegate is invoked once for each value in the iteration range (<code>fromInclusive</code>, <code>toExclusive</code>). It is provided with the following parameters: the iteration count (<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>), and a <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a> instance that may be used to break out of the loop prematurely.  </p>\n<p> If <code>fromInclusive</code> is greater than or equal to <code>toExclusive</code>, the method returns immediately without performing any iterations.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Parallel_For_System_Int32_System_Int32_System_Threading_Tasks_ParallelOptions_System_Action_System_Int32__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Parallel_For_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">For(Int32,Int32,ParallelOptions,Action&lt;Int32&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Executes a <code>for</code> (<code>For</code> in Visual Basic) loop in which iterations may run in parallel and loop options can be configured.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;int&gt; body);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fromInclusive</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The start index, inclusive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>toExclusive</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The end index, exclusive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parallelOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.paralleloptions\" data-linktype=\"relative-path\">ParallelOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that configures the behavior of this operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that is invoked once per iteration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.parallelloopresult\" data-linktype=\"relative-path\">ParallelLoopResult</a></div>\r\n                  </div>\r\n                  <p>A  structure that contains information about which portion of the loop completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.operationcanceledexception\" data-linktype=\"relative-path\">OperationCanceledException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> in the <code>parallelOptions</code> argument is canceled.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>body</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>parallelOptions</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>The exception that contains all the individual exceptions thrown on all threads.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a> associated with the <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> in the <code>parallelOptions</code> has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>body</code> delegate is invoked once for each value in the iteration range (<code>fromInclusive</code>, <code>toExclusive</code>). It is provided with the iteration count (<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>) as a parameter.  </p>\n<p> If <code>fromInclusive</code> is greater than or equal to <code>toExclusive</code>, then the method returns immediately without performing any iterations.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to cancel a parallel loop:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Parallel#05\">Imports System.Threading\nImports System.Threading.Tasks\n\nModule LoopCancellation\n    &#39; Demonstrated features:\n    &#39;   CancellationTokenSource\n    &#39;   Parallel.For()\n    &#39;   ParallelOptions\n    &#39;   ParallelLoopResult\n    &#39; Expected results:\n    &#39;   An iteration for each argument value (0, 1, 2, 3, 4, 5, 6, 7, 8, 9) is executed.\n    &#39;   The order of execution of the iterations is undefined.\n    &#39;   The iteration when i=2 cancels the loop.\n    &#39;   Some iterations may bail out or not start at all; because they are temporally executed in unpredictable order, \n    &#39;      it is impossible to say which will start/complete and which won&#39;t.\n    &#39;   At the end, an OperationCancelledException is surfaced.\n    &#39; Documentation:\n    &#39;   http://msdn.microsoft.com/en-us/library/system.threading.cancellationtokensource(VS.100).aspx\n    Private Sub Main()\n        Dim cancellationSource As New CancellationTokenSource()\n        Dim options As New ParallelOptions()\n        options.CancellationToken = cancellationSource.Token\n\n        Try\n            Dim loopResult As ParallelLoopResult = _\n                Parallel.For(0, 10, options, Sub(i, loopState)\n                                                 Console.WriteLine(&quot;Start Thread={0}, i={1}&quot;, Thread.CurrentThread.ManagedThreadId, i)\n\n                                                 &#39; Simulate a cancellation of the loop when i=2\n                                                 If i = 2 Then\n                                                     cancellationSource.Cancel()\n                                                 End If\n\n                                                 &#39; Simulates a long execution\n                                                 For j As Integer = 0 To 9\n                                                     Thread.Sleep(1 * 200)\n\n                                                     &#39; check to see whether or not to continue\n                                                     If loopState.ShouldExitCurrentIteration Then\n                                                         Exit Sub\n                                                     End If\n                                                 Next\n\n                                                 Console.WriteLine(&quot;Finish Thread={0}, i={1}&quot;, Thread.CurrentThread.ManagedThreadId, i)\n                                             End Sub)\n\n            If loopResult.IsCompleted Then\n                Console.WriteLine(&quot;All iterations completed successfully. THIS WAS NOT EXPECTED.&quot;)\n            End If\n        Catch e As AggregateException\n            &#39; No exception is expected in this example, but if one is still thrown from a task,\n            &#39; it will be wrapped in AggregateException and propagated to the main thread.\n            Console.WriteLine(&quot;An action has thrown an AggregateException. THIS WAS NOT EXPECTED.&quot; &amp; vbLf &amp; &quot;{0}&quot;, e)\n        Catch e As OperationCanceledException\n            &#39; Catching the cancellation exception\n            Console.WriteLine(&quot;An iteration has triggered a cancellation. THIS WAS EXPECTED.&quot; &amp; vbLf &amp; &quot;{0}&quot;, e)\n        Finally\n            cancellationSource.Dispose()\n        End Try\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Parallel#05\">\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass ParallelForCancellation\n{\n    // Demonstrated features:\n    //\t\tCancellationTokenSource\n    // \t\tParallel.For()\n    //\t\tParallelOptions\n    //\t\tParallelLoopResult\n    // Expected results:\n    // \t\tAn iteration for each argument value (0, 1, 2, 3, 4, 5, 6, 7, 8, 9) is executed.\n    //\t\tThe order of execution of the iterations is undefined.\n    //\t\tThe iteration when i=2 cancels the loop.\n    //\t\tSome iterations may bail out or not start at all; because they are temporally executed in unpredictable order, \n    //          it is impossible to say which will start/complete and which won&#39;t.\n    //\t\tAt the end, an OperationCancelledException is surfaced.\n    // Documentation:\n    //\t\thttp://msdn.microsoft.com/en-us/library/system.threading.cancellationtokensource(VS.100).aspx\n    static void CancelDemo()\n    {\n        CancellationTokenSource cancellationSource = new CancellationTokenSource();\n        ParallelOptions options = new ParallelOptions();\n        options.CancellationToken = cancellationSource.Token;\n\n        try\n        {\n            ParallelLoopResult loopResult = Parallel.For(\n                    0,\n                    10,\n                    options,\n                    (i, loopState) =&gt;\n                    {\n                        Console.WriteLine(&quot;Start Thread={0}, i={1}&quot;, Thread.CurrentThread.ManagedThreadId, i);\n\n                        // Simulate a cancellation of the loop when i=2\n                        if (i == 2)\n                        {\n                            cancellationSource.Cancel();\n                        }\n\n                        // Simulates a long execution\n                        for (int j = 0; j &lt; 10; j++)\n                        {\n                            Thread.Sleep(1 * 200);\n\n                            // check to see whether or not to continue\n                            if (loopState.ShouldExitCurrentIteration) return;\n                        }\n\n                        Console.WriteLine(&quot;Finish Thread={0}, i={1}&quot;, Thread.CurrentThread.ManagedThreadId, i);\n                    }\n                );\n\n            if (loopResult.IsCompleted)\n            {\n                Console.WriteLine(&quot;All iterations completed successfully. THIS WAS NOT EXPECTED.&quot;);\n            }\n        }\n        // No exception is expected in this example, but if one is still thrown from a task,\n        // it will be wrapped in AggregateException and propagated to the main thread.\n        catch (AggregateException e)\n        {\n            Console.WriteLine(&quot;Parallel.For has thrown an AggregateException. THIS WAS NOT EXPECTED.<br>{0}&quot;, e);\n        }\n        // Catching the cancellation exception\n        catch (OperationCanceledException e)\n        {\n            Console.WriteLine(&quot;An iteration has triggered a cancellation. THIS WAS EXPECTED.<br>{0}&quot;, e.ToString());\n        }\n        finally\n        {\n           cancellationSource.Dispose();\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Parallel_For_System_Int64_System_Int64_System_Threading_Tasks_ParallelOptions_System_Action_System_Int64_System_Threading_Tasks_ParallelLoopState__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Parallel_For_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">For(Int64,Int64,ParallelOptions,Action&lt;Int64,ParallelLoopState&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Executes a <code>for</code> (<code>For</code> in Visual Basic)  loop with 64-bit indexes in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;long,System.Threading.Tasks.ParallelLoopState&gt; body);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fromInclusive</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The start index, inclusive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>toExclusive</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The end index, exclusive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parallelOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.paralleloptions\" data-linktype=\"relative-path\">ParallelOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that configures the behavior of this operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-2\" data-linktype=\"relative-path\">Action</a>&lt;<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>,<a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that is invoked once per iteration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.parallelloopresult\" data-linktype=\"relative-path\">ParallelLoopResult</a></div>\r\n                  </div>\r\n                  <p>A structure that contains information about which portion of the loop completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.operationcanceledexception\" data-linktype=\"relative-path\">OperationCanceledException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> in the <code>parallelOptions</code> argument is canceled.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>body</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>parallelOptions</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>The exception that contains all the individual exceptions thrown on all threads.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a> associated with the <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> in the <code>parallelOptions</code> has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>body</code> delegate is invoked once for each value in the iteration range (<code>fromInclusive</code>, <code>toExclusive</code>). It is provided with the following parameters: the iteration count (<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>), and a <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a> instance that may be used to break out of the loop prematurely.  </p>\n<p> If <code>fromInclusive</code> is greater than or equal to <code>toExclusive</code>, the method returns immediately without performing any iterations.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the <a class=\"xref\" href=\"system.threading.tasks.parallel#System_Threading_Tasks_Parallel_For_\" data-linktype=\"relative-path\">For</a> method with a <a class=\"xref\" href=\"system.threading.tasks.paralleloptions\" data-linktype=\"relative-path\">ParallelOptions</a> object:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Parallel#03\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\n\n\nclass ParallelOptionsDemo\n{\n    // Demonstrated features:\n    // \t\tParallel.For()\n    //\t\tParallelOptions\n    // Expected results:\n    // \t\tAn iteration for each argument value (0, 1, 2, 3, 4, 5, 6, 7, 8, 9) is executed.\n    //\t\tThe order of execution of the iterations is undefined.\n    //\t\tVerify that no more than two threads have been used for the iterations.\n    // Documentation:\n    //\t\thttp://msdn.microsoft.com/en-us/library/system.threading.tasks.parallel.for(VS.100).aspx\n    static void Main()\n    {\n        ParallelOptions options = new ParallelOptions();\n        options.MaxDegreeOfParallelism = 2; // -1 is for unlimited. 1 is for sequential.\n\n        try\n        {\n            Parallel.For(\n                    0,\n                    9,\n                    options,\n                    (i) =&gt;\n                    {\n                        Console.WriteLine(&quot;Thread={0}, i={1}&quot;, Thread.CurrentThread.ManagedThreadId, i);\n                    }\n                );\n\n        }\n        // No exception is expected in this example, but if one is still thrown from a task,\n        // it will be wrapped in AggregateException and propagated to the main thread.\n        catch (AggregateException e)\n        {\n            Console.WriteLine(&quot;Parallel.For has thrown the following (unexpected) exception:<br>{0}&quot;, e);\n        }\n    }\n\n}\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Parallel#03\">Imports System.Threading\nImports System.Threading.Tasks\n\n\nModule ParallelForDemo\n\n    &#39; Demonstrated features:\n    &#39;   Parallel.For()\n    &#39;   ParallelOptions\n    &#39; Expected results:\n    &#39;   An iteration for each argument value (0, 1, 2, 3, 4, 5, 6, 7, 8, 9) is executed.\n    &#39;   The order of execution of the iterations is undefined.\n    &#39;   Verify that no more than two threads have been used for the iterations.\n    &#39; Documentation:\n    &#39;   http://msdn.microsoft.com/en-us/library/system.threading.tasks.parallel.for(VS.100).aspx\n    Sub Main()\n        Dim options As New ParallelOptions()\n        options.MaxDegreeOfParallelism = 2 &#39; -1 is for unlimited. 1 is for sequential.\n        Try\n            Parallel.For(0, 9, options, Sub(i)\n                                            Console.WriteLine(&quot;Thread={0}, i={1}&quot;, Thread.CurrentThread.ManagedThreadId, i)\n\n                                        End Sub)\n        Catch e As AggregateException\n            &#39; No exception is expected in this example, but if one is still thrown from a task,\n            &#39; it will be wrapped in AggregateException and propagated to the main thread.\n            Console.WriteLine(&quot;Parallel.For has thrown the following (unexpected) exception:&quot; &amp; vbLf &amp; &quot;{0}&quot;, e)\n        End Try\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Parallel_For_System_Int64_System_Int64_System_Threading_Tasks_ParallelOptions_System_Action_System_Int64__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Parallel_For_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">For(Int64,Int64,ParallelOptions,Action&lt;Int64&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Executes a <code>for</code> (<code>For</code> in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel and loop options can be configured.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;long&gt; body);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fromInclusive</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The start index, inclusive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>toExclusive</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The end index, exclusive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parallelOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.paralleloptions\" data-linktype=\"relative-path\">ParallelOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that configures the behavior of this operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action</a>&lt;<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that is invoked once per iteration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.parallelloopresult\" data-linktype=\"relative-path\">ParallelLoopResult</a></div>\r\n                  </div>\r\n                  <p>A structure that contains information about which portion of the loop completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.operationcanceledexception\" data-linktype=\"relative-path\">OperationCanceledException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> in the <code>parallelOptions</code> argument is canceled.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>body</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>parallelOptions</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>The exception that contains all the individual exceptions thrown on all threads.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a> associated with the <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> in the <code>parallelOptions</code> has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Supports 64-bit indexes. The <code>body</code> delegate is invoked once for each value in the iteration range (<code>fromInclusive</code>, <code>toExclusive</code>). It is provided with the iteration count (<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>) as a parameter.  </p>\n<p> If <code>fromInclusive</code> is greater than or equal to <code>toExclusive</code>, then the method returns immediately without performing any iterations.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use <a class=\"xref\" href=\"system.threading.tasks.paralleloptions\" data-linktype=\"relative-path\">ParallelOptions</a> to specify a custom task scheduler:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Parallel#06\">using System;\nusing System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass ParallelSchedulerDemo2\n{\n        // Demonstrated features:\n        //\t\tTaskScheduler\n        //      BlockingCollection\n        // \t\tParallel.For()\n        //\t\tParallelOptions\n        // Expected results:\n        // \t\tAn iteration for each argument value (0, 1, 2, 3, 4, 5, 6, 7, 8, 9) is executed.\n        //\t\tThe TwoThreadTaskScheduler employs 2 threads on which iterations may be executed in a random order.\n        //\t\tThus a scheduler thread may execute multiple iterations.\n        // Documentation:\n        //\t\thttp://msdn.microsoft.com/en-us/library/system.threading.tasks.taskscheduler(VS.100).aspx\n        //\t\thttp://msdn.microsoft.com/en-us/library/dd997413(VS.100).aspx\n        // More information:\n        //\t\thttp://blogs.msdn.com/pfxteam/archive/2009/09/22/9898090.aspx\n        static void Main()\n        {\n            ParallelOptions options = new ParallelOptions();\n\n            // Construct and associate a custom task scheduler\n            options.TaskScheduler = new TwoThreadTaskScheduler();\n\n            try\n            {\n                Parallel.For(\n                        0,\n                        10,\n                        options,\n                        (i, localState) =&gt;\n                        {\n                            Console.WriteLine(&quot;i={0}, Task={1}, Thread={2}&quot;, i, Task.CurrentId, Thread.CurrentThread.ManagedThreadId);\n                        }\n                    );\n\n            }\n            // No exception is expected in this example, but if one is still thrown from a task,\n            // it will be wrapped in AggregateException and propagated to the main thread.\n            catch (AggregateException e)\n            {\n                Console.WriteLine(&quot;An iteration has thrown an exception. THIS WAS NOT EXPECTED.<br>{0}&quot;, e);\n            }\n        }\n\n        // This scheduler schedules all tasks on (at most) two threads\n        sealed class TwoThreadTaskScheduler : TaskScheduler, IDisposable\n        {\n            // The runtime decides how many tasks to create for the given set of iterations, loop options, and scheduler&#39;s max concurrency level.\n            // Tasks will be queued in this collection\n            private BlockingCollection&lt;Task&gt; _tasks = new BlockingCollection&lt;Task&gt;();\n\n            // Maintain an array of threads. (Feel free to bump up _n.)\n            private readonly int _n = 2;\n            private Thread[] _threads;\n\n            public TwoThreadTaskScheduler()\n            {\n                _threads = new Thread[_n];\n\n                // Create unstarted threads based on the same inline delegate\n                for (int i = 0; i &lt; _n; i++)\n                {\n                    _threads[i] = new Thread(() =&gt;\n                    {\n                        // The following loop blocks until items become available in the blocking collection.\n                        // Then one thread is unblocked to consume that item.\n                        foreach (var task in _tasks.GetConsumingEnumerable())\n                        {\n                            TryExecuteTask(task);\n                        }\n                    });\n\n                    // Start each thread\n                    _threads[i].IsBackground = true;\n                    _threads[i].Start();\n                }\n            }\n\n            // This method is invoked by the runtime to schedule a task\n            protected override void QueueTask(Task task)\n            {\n                _tasks.Add(task);\n            }\n\n            // The runtime will probe if a task can be executed in the current thread.\n            // By returning false, we direct all tasks to be queued up.\n            protected override bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued)\n            {\n                return false;\n            }\n\n            public override int MaximumConcurrencyLevel { get { return _n; } }\n\n            protected override IEnumerable&lt;Task&gt; GetScheduledTasks()\n            {\n                return _tasks.ToArray();\n            }\n\n            // Dispose is not thread-safe with other members.\n            // It may only be used when no more tasks will be queued\n            // to the scheduler.  This implementation will block\n            // until all previously queued tasks have completed.\n            public void Dispose()\n            {\n                if (_threads != null)\n                {\n                    _tasks.CompleteAdding();\n\n                    for (int i = 0; i &lt; _n; i++)\n                    {\n                        _threads[i].Join();\n                        _threads[i] = null;\n                    }\n                    _threads = null;\n                    _tasks.Dispose();\n                    _tasks = null;\n                }\n            }\n        \n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Parallel#06\">Imports System.Collections.Concurrent\nImports System.Threading\nImports System.Threading.Tasks\nModule SchedulerDemo\n    &#39; Demonstrated features:\n    &#39;   TaskScheduler\n    &#39;   BlockingCollection\n    &#39;   Parallel.For()\n    &#39;   ParallelOptions\n    &#39; Expected results:\n    &#39;   An iteration for each argument value (0, 1, 2, 3, 4, 5, 6, 7, 8, 9) is executed.\n    &#39;   The TwoThreadTaskScheduler employs 2 threads on which iterations may be executed in a random order.\n    &#39;   A task is internally created for each thread of the task scheduler (plus an aditional internal task).\n    &#39;\tThus a scheduler thread may execute multiple iterations.\n    &#39; Documentation:\n    &#39;   http://msdn.microsoft.com/en-us/library/system.threading.tasks.taskscheduler(VS.100).aspx\n    &#39;   http://msdn.microsoft.com/en-us/library/dd997413(VS.100).aspx\n    &#39; More information:\n    &#39;   http://blogs.msdn.com/pfxteam/archive/2009/09/22/9898090.aspx\n    Sub Main()\n        Dim options As New ParallelOptions()\n\n        &#39; Construct and associate a custom task scheduler\n        options.TaskScheduler = New TwoThreadTaskScheduler()\n\n        Try\n            Parallel.For(0, 10, options, Sub(i, localState)\n                                             Console.WriteLine(&quot;i={0}, Task={1}, Thread={2}&quot;, i, Task.CurrentId, Thread.CurrentThread.ManagedThreadId)\n\n                                         End Sub)\n        Catch e As AggregateException\n            &#39; No exception is expected in this example, but if one is still thrown from a task,\n            &#39; it will be wrapped in AggregateException and propagated to the main thread.\n            Console.WriteLine(&quot;An iteration has thrown an exception. THIS WAS NOT EXPECTED.&quot; &amp; vbLf &amp; &quot;{0}&quot;, e)\n        End Try\n    End Sub\n\n    &#39; This scheduler schedules all tasks on (at most) two threads\n    Private NotInheritable Class TwoThreadTaskScheduler\n        Inherits TaskScheduler\n        Implements IDisposable\n        &#39; The runtime decides how many tasks to create for the given set of iterations, loop options, and scheduler&#39;s max concurrency level.\n        &#39; Tasks will be queued in this collection\n        Private _tasks As New BlockingCollection(Of Task)()\n\n        &#39; Maintain an array of threads. (Feel free to bump up _n.)\n        Private ReadOnly _n As Integer = 2\n        Private _threads As Thread()\n\n        Public Sub New()\n            _threads = New Thread(_n - 1) {}\n\n            &#39; Create unstarted threads based on the same inline delegate\n            For i As Integer = 0 To _n - 1\n                _threads(i) = New Thread(Sub()\n                                             &#39; The following loop blocks until items become available in the blocking collection.\n                                             &#39; Then one thread is unblocked to consume that item.\n                                             For Each task In _tasks.GetConsumingEnumerable()\n                                                 TryExecuteTask(task)\n                                             Next\n                                         End Sub)\n\n                &#39; Start each thread\n                _threads(i).IsBackground = True\n                _threads(i).Start()\n            Next\n        End Sub\n\n        &#39; This method is invoked by the runtime to schedule a task\n        Protected Overloads Overrides Sub QueueTask(ByVal task As Task)\n            _tasks.Add(task)\n        End Sub\n\n        &#39; The runtime will probe if a task can be executed in the current thread.\n        &#39; By returning false, we direct all tasks to be queued up.\n        Protected Overloads Overrides Function TryExecuteTaskInline(ByVal task As Task, ByVal taskWasPreviouslyQueued As Boolean) As Boolean\n            Return False\n        End Function\n\n        Public Overloads Overrides ReadOnly Property MaximumConcurrencyLevel() As Integer\n            Get\n                Return _n\n            End Get\n        End Property\n\n        Protected Overloads Overrides Function GetScheduledTasks() As IEnumerable(Of Task)\n            Return _tasks.ToArray()\n        End Function\n\n        &#39; Dispose is not thread-safe with other members.\n        &#39; It may only be used when no more tasks will be queued\n        &#39; to the scheduler. This implementation will block\n        &#39; until all previously queued tasks have completed.\n        Public Sub Dispose() Implements IDisposable.Dispose\n            If _threads IsNot Nothing Then\n                _tasks.CompleteAdding()\n\n                For i As Integer = 0 To _n - 1\n                    _threads(i).Join()\n                    _threads(i) = Nothing\n                Next\n                _threads = Nothing\n                _tasks.Dispose()\n                _tasks = Nothing\n            End If\n        End Sub\n    End Class\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Parallel_For__1_System_Int32_System_Int32_System_Func___0__System_Func_System_Int32_System_Threading_Tasks_ParallelLoopState___0___0__System_Action___0__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Parallel_For_TLocal__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">For&lt;TLocal&gt;(Int32,Int32,Func&lt;TLocal&gt;,Func&lt;Int32,ParallelLoopState,TLocal,TLocal&gt;,Action&lt;TLocal&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Executes a <code>for</code> (<code>For</code> in Visual Basic) loop with thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (int fromInclusive, int toExclusive, Func&lt;TLocal&gt; localInit, Func&lt;int,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fromInclusive</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The start index, inclusive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>toExclusive</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The end index, exclusive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>localInit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-1\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TLocal</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The function delegate that returns the initial state of the local data for each task.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-4\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>,<a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a>,<span class=\"xref\">TLocal</span>,<span class=\"xref\">TLocal</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that is invoked once per iteration.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>localFinally</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action</a>&lt;<span class=\"xref\">TLocal</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that performs a final action on the local state of each task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.parallelloopresult\" data-linktype=\"relative-path\">ParallelLoopResult</a></div>\r\n                  </div>\r\n                  <p>A  structure that contains information about which portion of the loop completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>body</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>localInit</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>localFinally</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>The exception that contains all the individual exceptions thrown on all threads.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>body</code> delegate is invoked once for each value in the iteration range (<code>fromInclusive</code>, <code>toExclusive</code>). It is provided with the following parameters: the iteration count (<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>), a <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.  </p>\n<p> The <code>localInit</code> delegate is invoked once for each task that participates in the loop&#39;s execution and returns the initial local state for each of those tasks. These initial states are passed to the first <code>body</code> invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the <code>localFinally</code> delegate. The <code>localFinally</code> delegate is invoked once per task to perform a final action on each task&#39;s local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  </p>\n<p> The <a class=\"xref\" href=\"system.threading.tasks.parallel#System_Threading_Tasks_Parallel_For_\" data-linktype=\"relative-path\">For</a> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a> object the chance to add, change, or remove threads that service the loop.  </p>\n<p> If <code>fromInclusive</code> is greater than or equal to <code>toExclusive</code>, then the method returns immediately without performing any iterations.  </p>\n<p> For an example that uses this method, see <a href=\"../Topic/How%20to:%20Write%20a%20Parallel.For%20Loop%20with%20Thread-Local%20Variables.md\" data-linktype=\"relative-path\">How to: Write a Parallel.For Loop with Thread-Local Variables</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Parallel_For__1_System_Int64_System_Int64_System_Func___0__System_Func_System_Int64_System_Threading_Tasks_ParallelLoopState___0___0__System_Action___0__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Parallel_For_TLocal__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">For&lt;TLocal&gt;(Int64,Int64,Func&lt;TLocal&gt;,Func&lt;Int64,ParallelLoopState,TLocal,TLocal&gt;,Action&lt;TLocal&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Executes a <code>for</code> (<code>For</code> in Visual Basic)  loop with 64-bit indexes and thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (long fromInclusive, long toExclusive, Func&lt;TLocal&gt; localInit, Func&lt;long,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fromInclusive</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The start index, inclusive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>toExclusive</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The end index, exclusive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>localInit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-1\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TLocal</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The function delegate that returns the initial state of the local data for each task.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-4\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>,<a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a>,<span class=\"xref\">TLocal</span>,<span class=\"xref\">TLocal</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that is invoked once per iteration.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>localFinally</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action</a>&lt;<span class=\"xref\">TLocal</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that performs a final action on the local state of each task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.parallelloopresult\" data-linktype=\"relative-path\">ParallelLoopResult</a></div>\r\n                  </div>\r\n                  <p>A structure that contains information about which portion of the loop completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>body</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>localInit</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>localFinally</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>The exception that contains all the individual exceptions thrown on all threads.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>body</code> delegate is invoked once for each value in the iteration range (<code>fromInclusive</code>, <code>toExclusive</code>). It is provided with the following parameters: the iteration count (<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>), a <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same task.  </p>\n<p> The <code>localInit</code> delegate is invoked once for each task that participates in the loop&#39;s execution and returns the initial local state for each of those tasks. These initial states are passed to the first <code>body</code> invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the <code>localFinally</code> delegate. The <code>localFinally</code> delegate is invoked once per task to perform a final action on each task&#39;s local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  </p>\n<p> The <a class=\"xref\" href=\"system.threading.tasks.parallel#System_Threading_Tasks_Parallel_For_\" data-linktype=\"relative-path\">For</a> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a> object the chance to add, change, or remove threads that service the loop.  </p>\n<p> If <code>fromInclusive</code> is greater than or equal to <code>toExclusive</code>, then the method returns immediately without performing any iterations.  </p>\n<p> For an example that uses this method, see <a href=\"../Topic/How%20to:%20Write%20a%20Parallel.For%20Loop%20with%20Thread-Local%20Variables.md\" data-linktype=\"relative-path\">How to: Write a Parallel.For Loop with Thread-Local Variables</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Parallel_For__1_System_Int32_System_Int32_System_Threading_Tasks_ParallelOptions_System_Func___0__System_Func_System_Int32_System_Threading_Tasks_ParallelLoopState___0___0__System_Action___0__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Parallel_For_TLocal__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">For&lt;TLocal&gt;(Int32,Int32,ParallelOptions,Func&lt;TLocal&gt;,Func&lt;Int32,ParallelLoopState,TLocal,TLocal&gt;,Action&lt;TLocal&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Executes a <code>for</code> (<code>For</code> in Visual Basic)  loop with thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;int,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fromInclusive</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The start index, inclusive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>toExclusive</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The end index, exclusive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parallelOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.paralleloptions\" data-linktype=\"relative-path\">ParallelOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that configures the behavior of this operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>localInit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-1\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TLocal</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The function delegate that returns the initial state of the local data for each task.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-4\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>,<a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a>,<span class=\"xref\">TLocal</span>,<span class=\"xref\">TLocal</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that is invoked once per iteration.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>localFinally</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action</a>&lt;<span class=\"xref\">TLocal</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that performs a final action on the local state of each task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.parallelloopresult\" data-linktype=\"relative-path\">ParallelLoopResult</a></div>\r\n                  </div>\r\n                  <p>A structure that contains information about which portion of the loop completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>body</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>localInit</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>localFinally</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>parallelOptions</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.operationcanceledexception\" data-linktype=\"relative-path\">OperationCanceledException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> in the <code>parallelOptions</code> argument is canceled.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a> associated with the <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> in the <code>parallelOptions</code> has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>The exception that contains all the individual exceptions thrown on all threads.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>body</code> delegate is invoked once for each value in the iteration range (<code>fromInclusive</code>, <code>toExclusive</code>). It is provided with the following parameters: the iteration count (<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>), a <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same task.  </p>\n<p> The <code>localInit</code> delegate is invoked once for each task that participates in the loop&#39;s execution and returns the initial local state for each of those tasks. These initial states are passed to the first <code>body</code> invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the <code>localFinally</code> delegate. The <code>localFinally</code> delegate is invoked once per task to perform a final action on each task&#39;s local state. This delegate might be invoked concurrently on multiple threads; therefore, you must synchronize access to any shared variables.  </p>\n<p> The <a class=\"xref\" href=\"system.threading.tasks.parallel#System_Threading_Tasks_Parallel_For_\" data-linktype=\"relative-path\">For</a> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a> object the chance to add, change, or remove threads that service the loop.  </p>\n<p> If <code>fromInclusive</code> is greater than or equal to <code>toExclusive</code>, then the method returns immediately without performing any iterations.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses thread-local variables to compute the sum of the results of many lengthy operations. This example limits the degree of parallelism to four.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Parallel#04\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass ThreadLocalForWithOptions\n{\n   // The number of parallel iterations to perform.\n   const int N = 1000000;\n\n   static void Main()\n   {\n      // The result of all thread-local computations.\n      int result = 0;\n\n      // This example limits the degree of parallelism to four.\n      // You might limit the degree of parallelism when your algorithm\n      // does not scale beyond a certain number of cores or when you \n      // enforce a particular quality of service in your application.\n\n      Parallel.For(0, N, new ParallelOptions { MaxDegreeOfParallelism = 4 },\n         // Initialize the local states\n         () =&gt; 0,\n         // Accumulate the thread-local computations in the loop body\n         (i, loop, localState) =&gt;\n         {\n            return localState + Compute(i);\n         },\n         // Combine all local states\n         localState =&gt; Interlocked.Add(ref result, localState)\n      );\n\n      // Print the actual and expected results.\n      Console.WriteLine(&quot;Actual result: {0}. Expected 1000000.&quot;, result);\n   }\n\n   // Simulates a lengthy operation.\n   private static int Compute(int n)\n   {\n      for (int i = 0; i &lt; 10000; i++) ;\n      return 1;\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Parallel#04\">Imports System.Threading\nImports System.Threading.Tasks\n\nModule ThreadLocalForWithOptions\n\n   &#39; The number of parallel iterations to perform.\n   Const N As Integer = 1000000\n\n   Sub Main()\n      &#39; The result of all thread-local computations.\n      Dim result As Integer = 0\n\n      &#39; This example limits the degree of parallelism to four.\n      &#39; You might limit the degree of parallelism when your algorithm\n      &#39; does not scale beyond a certain number of cores or when you \n      &#39; enforce a particular quality of service in your application.\n\n      Parallel.For(0, N, New ParallelOptions With {.MaxDegreeOfParallelism = 4},\n         Function()\n            &#39; Initialize the local states \n            Return 0\n         End Function,\n         Function(i, loopState, localState)\n            &#39; Accumulate the thread-local computations in the loop body\n            Return localState + Compute(i)\n         End Function,\n         Sub(localState)\n            &#39; Combine all local states\n            Interlocked.Add(result, localState)\n         End Sub\n      )\n\n      &#39; Print the actual and expected results.\n      Console.WriteLine(&quot;Actual result: {0}. Expected 1000000.&quot;, result)\n   End Sub\n\n   &#39; Simulates a lengthy operation.\n   Function Compute(ByVal n As Integer) As Integer\n      For i As Integer = 0 To 10000\n      Next\n      Return 1\n   End Function\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Parallel_For__1_System_Int64_System_Int64_System_Threading_Tasks_ParallelOptions_System_Func___0__System_Func_System_Int64_System_Threading_Tasks_ParallelLoopState___0___0__System_Action___0__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Parallel_For_TLocal__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">For&lt;TLocal&gt;(Int64,Int64,ParallelOptions,Func&lt;TLocal&gt;,Func&lt;Int64,ParallelLoopState,TLocal,TLocal&gt;,Action&lt;TLocal&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Executes a <code>for</code> (<code>For</code> in Visual Basic) loop with 64-bit indexes and thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;long,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fromInclusive</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The start index, inclusive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>toExclusive</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The end index, exclusive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parallelOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.paralleloptions\" data-linktype=\"relative-path\">ParallelOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that configures the behavior of this operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>localInit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-1\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TLocal</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The function delegate that returns the initial state of the local data for each thread.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-4\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>,<a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a>,<span class=\"xref\">TLocal</span>,<span class=\"xref\">TLocal</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that is invoked once per iteration.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>localFinally</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action</a>&lt;<span class=\"xref\">TLocal</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that performs a final action on the local state of each thread.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.parallelloopresult\" data-linktype=\"relative-path\">ParallelLoopResult</a></div>\r\n                  </div>\r\n                  <p>A structure that contains information about which portion of the loop completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>body</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>localInit</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>localFinally</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>parallelOptions</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.operationcanceledexception\" data-linktype=\"relative-path\">OperationCanceledException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> in the <code>parallelOptions</code> argument is canceled.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a> associated with the <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> in the <code>parallelOptions</code> has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>The exception that contains all the individual exceptions thrown on all threads.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>body</code> delegate is invoked once for each value in the iteration range (<code>fromInclusive</code>, <code>toExclusive</code>). It is provided with the following parameters: the iteration count (<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>), a <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.  </p>\n<p> The <code>localInit</code> delegate is invoked once for each thread that participates in the loop&#39;s execution and returns the initial local state for each of those threads. These initial states are passed to the first <code>body</code> invocations on each thread. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each thread returns a state value that is passed to the <code>localFinally</code> delegate. The <code>localFinally</code> delegate is invoked once per thread to perform a final action on each thread&#39;s local state. This delegate might be invoked concurrently on multiple threads; therefore, you must synchronize access to any shared variables.  </p>\n<p> The <a class=\"xref\" href=\"system.threading.tasks.parallel#System_Threading_Tasks_Parallel_For_\" data-linktype=\"relative-path\">For</a> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a> object the chance to add, change, or remove threads that service the loop.  </p>\n<p> If <code>fromInclusive</code> is greater than or equal to <code>toExclusive</code>, then the method returns immediately without performing any iterations.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Parallel_ForEach__1_System_Collections_Concurrent_OrderablePartitioner___0__System_Action___0_System_Threading_Tasks_ParallelLoopState_System_Int64__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Parallel_ForEach_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ForEach&lt;TSource&gt;(OrderablePartitioner&lt;TSource&gt;,Action&lt;TSource,ParallelLoopState,Int64&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation on a <span class=\"xref\">stem.Collections.Concurrent.OrderablePartitioner`1</span> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.concurrent.orderablepartitioner-1\" data-linktype=\"relative-path\">OrderablePartitioner<tsource></tsource></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The orderable partitioner that contains the original data source.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-3\" data-linktype=\"relative-path\">Action</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a>,<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that is invoked once per iteration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.parallelloopresult\" data-linktype=\"relative-path\">ParallelLoopResult</a></div>\r\n                  </div>\r\n                  <p>A structure that contains information about which portion of the loop completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>source</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>body</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions*</span> property in the <code>source</code> orderable partitioner returns <code>false</code>.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized*</span> property in the source orderable partitioner returns <code>false</code>.  </p>\n<p> -or-  </p>\n<p> Any methods in the source orderable partitioner return <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The &lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt; method expects custom partitioners to support dynamic partitioning. For more information, see <a href=\"../Topic/Custom%20Partitioners%20for%20PLINQ%20and%20TPL.md\" data-linktype=\"relative-path\">Custom Partitioners for PLINQ and TPL</a> and <a href=\"../Topic/How%20to:%20Implement%20Dynamic%20Partitions.md\" data-linktype=\"relative-path\">How to: Implement Dynamic Partitions</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Parallel_ForEach__1_System_Collections_Concurrent_Partitioner___0__System_Action___0_System_Threading_Tasks_ParallelLoopState__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Parallel_ForEach_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ForEach&lt;TSource&gt;(Partitioner&lt;TSource&gt;,Action&lt;TSource,ParallelLoopState&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation on a <a class=\"xref\" href=\"system.collections.concurrent.partitioner\" data-linktype=\"relative-path\">Partitioner</a> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.concurrent.partitioner-1\" data-linktype=\"relative-path\">Partitioner<tsource></tsource></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The partitioner that contains the original data source.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-2\" data-linktype=\"relative-path\">Action</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that is invoked once per iteration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.parallelloopresult\" data-linktype=\"relative-path\">ParallelLoopResult</a></div>\r\n                  </div>\r\n                  <p>A structure that contains information about which portion of the loop completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>source</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>body</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions*</span> property in the <code>source</code> partitioner returns <code>false</code>.  </p>\n<p> -or-  </p>\n<p> A method in the <code>source</code> partitioner returns <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Collections.Concurrent.Partitioner`1.GetPartitions*</span> method in the <code>source</code> partitioner does not return the correct number of partitions.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The &lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt; method expects custom partitioners to support dynamic partitioning. For more information, see <a href=\"../Topic/Custom%20Partitioners%20for%20PLINQ%20and%20TPL.md\" data-linktype=\"relative-path\">Custom Partitioners for PLINQ and TPL</a> and <a href=\"../Topic/How%20to:%20Implement%20Dynamic%20Partitions.md\" data-linktype=\"relative-path\">How to: Implement Dynamic Partitions</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Parallel_ForEach__1_System_Collections_Concurrent_Partitioner___0__System_Action___0__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Parallel_ForEach_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ForEach&lt;TSource&gt;(Partitioner&lt;TSource&gt;,Action&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation on a <a class=\"xref\" href=\"system.collections.concurrent.partitioner\" data-linktype=\"relative-path\">Partitioner</a> in which iterations may run in parallel.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, Action&lt;TSource&gt; body);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.concurrent.partitioner-1\" data-linktype=\"relative-path\">Partitioner<tsource></tsource></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The partitioner that contains the original data source.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that is invoked once per iteration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.parallelloopresult\" data-linktype=\"relative-path\">ParallelLoopResult</a></div>\r\n                  </div>\r\n                  <p>A structure that contains information about which portion of the loop completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>source</code> argument is  <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>body</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions*</span> property in the <code>source</code> partitioner returns <code>false</code>.  </p>\n<p> -or-  </p>\n<p> The exception that is thrown when any methods in the <code>source</code> partitioner return <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Collections.Concurrent.Partitioner`1.GetPartitions*</span> method in the <code>source</code> partitioner does not return the correct number of partitions.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The ForEach(TSource) method expects custom partitioners to support dynamic partitioning. For more information, see <a href=\"../Topic/Custom%20Partitioners%20for%20PLINQ%20and%20TPL.md\" data-linktype=\"relative-path\">Custom Partitioners for PLINQ and TPL</a> and <a href=\"../Topic/How%20to:%20Implement%20Dynamic%20Partitions.md\" data-linktype=\"relative-path\">How to: Implement Dynamic Partitions</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to implement a range partitioner for use with ForEach(TSource):  </p>\n<pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Parallel_RangePartitioners#01\">Imports System.Collections.Concurrent\nImports System.Threading\nImports System.Threading.Tasks\nModule RangePartitionerDemo\n\n    Sub Main()\n        Dim sw As Stopwatch = Nothing\n\n        Dim sum As Long = 0\n        Dim SUMTOP As Long = 10000000\n\n        &#39; Try sequential for\n        sw = Stopwatch.StartNew()\n        For i As Long = 0 To SUMTOP - 1\n            sum += i\n        Next\n        sw.Stop()\n        Console.WriteLine(&quot;sequential for result = {0}, time = {1} ms&quot;, sum, sw.ElapsedMilliseconds)\n\n        &#39; Try parallel for with locals\n        sum = 0\n        sw = Stopwatch.StartNew()\n        Parallel.For(0L, SUMTOP, Function() 0L, Function(item, state, prevLocal) prevLocal + item, Function(local) Interlocked.Add(sum, local))\n        sw.Stop()\n        Console.WriteLine(&quot;parallel for w/locals result = {0}, time = {1} ms&quot;, sum, sw.ElapsedMilliseconds)\n\n        &#39; Try range partitioner\n        sum = 0\n        sw = Stopwatch.StartNew()\n        Parallel.ForEach(Partitioner.Create(0L, SUMTOP),\n                         Sub(range)\n                             Dim local As Long = 0\n                             For i As Long = range.Item1 To range.Item2 - 1\n                                 local += i\n                             Next\n                             Interlocked.Add(sum, local)\n                         End Sub)\n        sw.Stop()\n        Console.WriteLine(&quot;range partitioner result = {0}, time = {1} ms&quot;, sum, sw.ElapsedMilliseconds)\n    End Sub\n\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Parallel_RangePartitioners#01\">using System;\nusing System.Collections.Concurrent;\nusing System.Diagnostics;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass RangePartitionerDemo \n{\n        static void Main()\n        {\n            Stopwatch sw = null;\n\n            long sum = 0;\n            long SUMTOP = 10000000;\n\n            // Try sequential for\n            sw = Stopwatch.StartNew();\n            for (long i = 0; i &lt; SUMTOP; i++) sum += i;\n            sw.Stop();\n            Console.WriteLine(&quot;sequential for result = {0}, time = {1} ms&quot;, sum, sw.ElapsedMilliseconds);\n\n            // Try parallel for -- this is slow!\n            //sum = 0;\n            //sw = Stopwatch.StartNew();\n            //Parallel.For(0L, SUMTOP, (item) =&gt; Interlocked.Add(ref sum, item));\n            //sw.Stop();\n            //Console.WriteLine(&quot;parallel for  result = {0}, time = {1} ms&quot;, sum, sw.ElapsedMilliseconds);\n\n            // Try parallel for with locals\n            sum = 0;\n            sw = Stopwatch.StartNew();\n            Parallel.For(0L, SUMTOP, () =&gt; 0L, (item, state, prevLocal) =&gt; prevLocal + item, local =&gt; Interlocked.Add(ref sum, local));\n            sw.Stop();\n            Console.WriteLine(&quot;parallel for w/locals result = {0}, time = {1} ms&quot;, sum, sw.ElapsedMilliseconds);\n\n            // Try range partitioner\n            sum = 0;\n            sw = Stopwatch.StartNew();\n            Parallel.ForEach(Partitioner.Create(0L, SUMTOP), (range) =&gt;\n            {\n                long local = 0;\n                for (long i = range.Item1; i &lt; range.Item2; i++) local += i;\n                Interlocked.Add(ref sum, local);\n            });\n            sw.Stop();\n            Console.WriteLine(&quot;range partitioner result = {0}, time = {1} ms&quot;, sum, sw.ElapsedMilliseconds);\n        }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Parallel_ForEach__1_System_Collections_Generic_IEnumerable___0__System_Action___0_System_Threading_Tasks_ParallelLoopState_System_Int64__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Parallel_ForEach_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ForEach&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Action&lt;TSource,ParallelLoopState,Int64&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation with 64-bit indexes on an <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An enumerable data source.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-3\" data-linktype=\"relative-path\">Action</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a>,<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that is invoked once per iteration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.parallelloopresult\" data-linktype=\"relative-path\">ParallelLoopResult</a></div>\r\n                  </div>\r\n                  <p>A structure that contains information about which portion of the loop completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>source</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>body</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>The exception that contains all the individual exceptions thrown on all threads.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>body</code> delegate is invoked once for each element in the <code>source</code> enumerable. It is provided with the following parameters: the current element, a <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a> instance that may be used to break out of the loop prematurely, and the current element&#39;s index (<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>).</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Parallel_ForEach__1_System_Collections_Generic_IEnumerable___0__System_Action___0_System_Threading_Tasks_ParallelLoopState__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Parallel_ForEach_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ForEach&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Action&lt;TSource,ParallelLoopState&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation on an <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An enumerable data source.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-2\" data-linktype=\"relative-path\">Action</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that is invoked once per iteration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.parallelloopresult\" data-linktype=\"relative-path\">ParallelLoopResult</a></div>\r\n                  </div>\r\n                  <p>A structure that contains information about which portion of the loop completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>source</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>body</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>The exception that contains all the individual exceptions thrown on all threads.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>body</code> delegate is invoked once for each element in the <code>source</code> enumerable. It is provided with the following parameters: the current element, and a <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a> instance that may be used to break out of the loop prematurely.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Parallel_ForEach__1_System_Collections_Generic_IEnumerable___0__System_Action___0__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Parallel_ForEach_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ForEach&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,Action&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation on an <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> in which iterations may run in parallel.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Action&lt;TSource&gt; body);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An enumerable data source.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that is invoked once per iteration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.parallelloopresult\" data-linktype=\"relative-path\">ParallelLoopResult</a></div>\r\n                  </div>\r\n                  <p>A structure that contains information about which portion of the loop completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>source</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>body</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>The exception that contains all the individual exceptions thrown on all threads.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>body</code> delegate is invoked once for each element in the <code>source</code> enumerable. It is provided with the current element as a parameter.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the ForEach(TSource) method to count the number of vowels and non-whitespace characters in a text file. In this case, the <a class=\"xref\" href=\"system.threading.tasks.parallelloopresult\" data-linktype=\"relative-path\">ParallelLoopResult</a> value returned by the method is ignored. Note that, because operations can run in parallel, you must ensure that incrementing the counter variables is an atomic operation, and that multiple threads do not attempt to access the counter variables simultaneously. For this purpose, the example uses the <code>lock</code> statement (in C#) and the <code>SyncLock</code> statement (in Visual Basic).  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Parallel.ForEach#1\">using System;\nusing System.IO;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Task&lt;String&gt; task = ReadCharacters(@&quot;.\\CallOfTheWild.txt&quot;);\n      String text = task.Result;\n      \n      int nVowels = 0;\n      int nNonWhiteSpace = 0;\n      Object obj = new Object();\n\n      ParallelLoopResult result = Parallel.ForEach(text, \n                                                   (ch) =&gt; {\n                                                      Char uCh = Char.ToUpper(ch);\n                                                      if (&quot;AEIOUY&quot;.IndexOf(uCh) &gt;= 0) {\n                                                         lock (obj) {\n                                                            nVowels++;\n                                                         }\n                                                      }\n                                                      if (! Char.IsWhiteSpace(uCh)) {\n                                                         lock (obj) {\n                                                            nNonWhiteSpace++;\n                                                         }   \n                                                      }\n                                                   } );\n      Console.WriteLine(&quot;Total characters:      {0,10:N0}&quot;, text.Length);\n      Console.WriteLine(&quot;Total vowels:          {0,10:N0}&quot;, nVowels);\n      Console.WriteLine(&quot;Total non-whitespace:  {0,10:N0}&quot;, nNonWhiteSpace);\n   }\n\n   private static async Task&lt;String&gt; ReadCharacters(String fn)\n   {\n      String text;\n      using (StreamReader sr = new StreamReader(fn)) {\n         text = await sr.ReadToEndAsync();\n      }\n      return text;\n   }\n}\n// The example displays output like the following:\n//       Total characters:         198,548\n//       Total vowels:              58,421\n//       Total non-whitespace:     159,461\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Parallel.ForEach#1\">Imports System.IO\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim task As Task(Of String) = ReadCharacters(&quot;.\\CallOfTheWild.txt&quot;)\n      Dim text As String = task.Result\n      \n      Dim nVowels As Integer = 0\n      Dim nNonWhiteSpace As Integer = 0\n      Dim obj As New Object()\n\n      Dim result As ParallelLoopResult = Parallel.ForEach(text, \n                                                          Sub(ch)\n                                                             Dim uCh As Char = Char.ToUpper(ch)\n                                                             If &quot;AEIOUY&quot;.IndexOf(uCh) &gt;= 0 Then\n                                                                SyncLock obj\n                                                                   nVowels += 1\n                                                                End SyncLock\n                                                             End If\n                                                             If Not Char.IsWhiteSpace(uCh) Then\n                                                                SyncLock obj\n                                                                   nNonWhiteSpace += 1\n                                                                End SyncLock   \n                                                             End If\n                                                          End Sub)\n      Console.WriteLine(&quot;Total characters:      {0,10:N0}&quot;, text.Length)\n      Console.WriteLine(&quot;Total vowels:          {0,10:N0}&quot;, nVowels)\n      Console.WriteLine(&quot;Total non-whitespace:  {0,10:N0}&quot;, nNonWhiteSpace)\n   End Sub\n   \n   Private Async Function ReadCharacters(fn As String) As Task(Of String)\n      Dim text As String\n      Using sr As New StreamReader(fn)\n         text = Await sr.ReadToEndAsync()\n      End Using\n      Return text\n   End Function\nEnd Module\n&#39; The output from the example resembles the following:\n&#39;       Total characters:         198,548\n&#39;       Total vowels:              58,421\n&#39;       Total non-whitespace:     159,461\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Parallel_ForEach__1_System_Collections_Concurrent_OrderablePartitioner___0__System_Threading_Tasks_ParallelOptions_System_Action___0_System_Threading_Tasks_ParallelLoopState_System_Int64__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Parallel_ForEach_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ForEach&lt;TSource&gt;(OrderablePartitioner&lt;TSource&gt;,ParallelOptions,Action&lt;TSource,ParallelLoopState,Int64&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation on a <span class=\"xref\">stem.Collections.Concurrent.OrderablePartitioner`1</span> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.concurrent.orderablepartitioner-1\" data-linktype=\"relative-path\">OrderablePartitioner<tsource></tsource></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The orderable partitioner that contains the original data source.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parallelOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.paralleloptions\" data-linktype=\"relative-path\">ParallelOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that configures the behavior of this operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-3\" data-linktype=\"relative-path\">Action</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a>,<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that is invoked once per iteration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.parallelloopresult\" data-linktype=\"relative-path\">ParallelLoopResult</a></div>\r\n                  </div>\r\n                  <p>A structure that contains information about which portion of the loop completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.operationcanceledexception\" data-linktype=\"relative-path\">OperationCanceledException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> in the <code>parallelOptions</code> argument is canceled</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>source</code> argument is  <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>parallelOptions</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>body</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a> associated with the <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> in the <code>parallelOptions</code> has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions*</span> property in the <code>source</code> orderable partitioner returns <code>false</code>.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized*</span> property in the <code>source</code> orderable partitioner returns <code>false</code>.  </p>\n<p> -or-  </p>\n<p> The exception that is thrown when any methods in the <code>source</code> orderable partitioner return <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The &lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt;method expects custom partitioners to support dynamic partitioning. For more information, see <a href=\"../Topic/Custom%20Partitioners%20for%20PLINQ%20and%20TPL.md\" data-linktype=\"relative-path\">Custom Partitioners for PLINQ and TPL</a> and <a href=\"../Topic/How%20to:%20Implement%20Dynamic%20Partitions.md\" data-linktype=\"relative-path\">How to: Implement Dynamic Partitions</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Parallel_ForEach__1_System_Collections_Concurrent_Partitioner___0__System_Threading_Tasks_ParallelOptions_System_Action___0_System_Threading_Tasks_ParallelLoopState__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Parallel_ForEach_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ForEach&lt;TSource&gt;(Partitioner&lt;TSource&gt;,ParallelOptions,Action&lt;TSource,ParallelLoopState&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation on a <a class=\"xref\" href=\"system.collections.concurrent.partitioner\" data-linktype=\"relative-path\">Partitioner</a> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.concurrent.partitioner-1\" data-linktype=\"relative-path\">Partitioner<tsource></tsource></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The partitioner that contains the original data source.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parallelOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.paralleloptions\" data-linktype=\"relative-path\">ParallelOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that configures the behavior of this operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-2\" data-linktype=\"relative-path\">Action</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that is invoked once per iteration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.parallelloopresult\" data-linktype=\"relative-path\">ParallelLoopResult</a></div>\r\n                  </div>\r\n                  <p>A  structure that contains information about which portion of the loop completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.operationcanceledexception\" data-linktype=\"relative-path\">OperationCanceledException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> in the <code>parallelOptions</code> argument is canceled.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a> associated with the <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> in the <code>parallelOptions</code> has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>source</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>parallelOptions</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>body</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions*</span> property in the <code>source</code> partitioner returns <code>false</code>.  </p>\n<p> -or-  </p>\n<p> The exception that is thrown when any methods in the <code>source</code> partitioner return <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The &lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt; method expects custom partitioners to support dynamic partitioning. For more information, see <a href=\"../Topic/Custom%20Partitioners%20for%20PLINQ%20and%20TPL.md\" data-linktype=\"relative-path\">Custom Partitioners for PLINQ and TPL</a> and <a href=\"../Topic/How%20to:%20Implement%20Dynamic%20Partitions.md\" data-linktype=\"relative-path\">How to: Implement Dynamic Partitions</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Parallel_ForEach__1_System_Collections_Concurrent_Partitioner___0__System_Threading_Tasks_ParallelOptions_System_Action___0__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Parallel_ForEach_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ForEach&lt;TSource&gt;(Partitioner&lt;TSource&gt;,ParallelOptions,Action&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation on a <a class=\"xref\" href=\"system.collections.concurrent.partitioner\" data-linktype=\"relative-path\">Partitioner</a> in which iterations may run in parallel and loop options can be configured.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource&gt; body);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.concurrent.partitioner-1\" data-linktype=\"relative-path\">Partitioner<tsource></tsource></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The partitioner that contains the original data source.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parallelOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.paralleloptions\" data-linktype=\"relative-path\">ParallelOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that configures the behavior of this operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that is invoked once per iteration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.parallelloopresult\" data-linktype=\"relative-path\">ParallelLoopResult</a></div>\r\n                  </div>\r\n                  <p>A structure that contains information about which portion of the loop completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.operationcanceledexception\" data-linktype=\"relative-path\">OperationCanceledException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> in the <code>parallelOptions</code> argument is canceled.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a> associated with the <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> in the <code>parallelOptions</code> has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>source</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>parallelOptions</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>body</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions*</span> property in the <code>source</code> partitioner returns <code>false</code>.  </p>\n<p> -or-  </p>\n<p> The exception that is thrown when any methods in the <code>source</code> partitioner return <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The &lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt; method expects custom partitioners to support dynamic partitioning. For more information, see <a href=\"../Topic/Custom%20Partitioners%20for%20PLINQ%20and%20TPL.md\" data-linktype=\"relative-path\">Custom Partitioners for PLINQ and TPL</a> and <a href=\"../Topic/How%20to:%20Implement%20Dynamic%20Partitions.md\" data-linktype=\"relative-path\">How to: Implement Dynamic Partitions</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Parallel_ForEach__1_System_Collections_Generic_IEnumerable___0__System_Threading_Tasks_ParallelOptions_System_Action___0_System_Threading_Tasks_ParallelLoopState_System_Int64__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Parallel_ForEach_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ForEach&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,ParallelOptions,Action&lt;TSource,ParallelLoopState,Int64&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation with 64-bit indexes on an <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An enumerable data source.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parallelOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.paralleloptions\" data-linktype=\"relative-path\">ParallelOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that configures the behavior of this operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-3\" data-linktype=\"relative-path\">Action</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a>,<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that is invoked once per iteration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.parallelloopresult\" data-linktype=\"relative-path\">ParallelLoopResult</a></div>\r\n                  </div>\r\n                  <p>A structure that contains information about which portion of the loop completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.operationcanceledexception\" data-linktype=\"relative-path\">OperationCanceledException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> in the <code>parallelOptions</code> argument is canceled</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>source</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>parallelOptions</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>body</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>The exception that contains all the individual exceptions thrown on all threads.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a> associated with the <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> in the <code>parallelOptions</code> has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>body</code> delegate is invoked once for each element in the <code>source</code> enumerable. It is provided with the following parameters: the current element, a <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a> instance that may be used to break out of the loop prematurely, and the current element&#39;s index (<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>).</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Parallel_ForEach__1_System_Collections_Generic_IEnumerable___0__System_Threading_Tasks_ParallelOptions_System_Action___0_System_Threading_Tasks_ParallelLoopState__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Parallel_ForEach_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ForEach&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,ParallelOptions,Action&lt;TSource,ParallelLoopState&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation on an <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An enumerable data source.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parallelOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.paralleloptions\" data-linktype=\"relative-path\">ParallelOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that configures the behavior of this operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-2\" data-linktype=\"relative-path\">Action</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that is invoked once per iteration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.parallelloopresult\" data-linktype=\"relative-path\">ParallelLoopResult</a></div>\r\n                  </div>\r\n                  <p>A structure that contains information about which portion of the loop completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.operationcanceledexception\" data-linktype=\"relative-path\">OperationCanceledException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> in the <code>parallelOptions</code> argument is canceled</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>source</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>parallelOptions</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>body</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>The exception that contains all the individual exceptions thrown on all threads.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a> associated with the <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> in the <code>parallelOptions</code> has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>body</code> delegate is invoked once for each element in the <code>source</code> enumerable. It is provided with the following parameters: the current element, and a <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a> instance that may be used to break out of the loop prematurely.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Parallel_ForEach__1_System_Collections_Generic_IEnumerable___0__System_Threading_Tasks_ParallelOptions_System_Action___0__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Parallel_ForEach_TSource__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ForEach&lt;TSource&gt;(IEnumerable&lt;TSource&gt;,ParallelOptions,Action&lt;TSource&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation on an <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> in which iterations may run in parallel and loop options can be configured.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource&gt; body);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An enumerable data source.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parallelOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.paralleloptions\" data-linktype=\"relative-path\">ParallelOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that configures the behavior of this operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that is invoked once per iteration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.parallelloopresult\" data-linktype=\"relative-path\">ParallelLoopResult</a></div>\r\n                  </div>\r\n                  <p>A structure that contains information about which portion of the loop completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.operationcanceledexception\" data-linktype=\"relative-path\">OperationCanceledException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> in the <code>parallelOptions</code> argument is canceled</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>source</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>parallelOptions</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>body</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>The exception that contains all the individual exceptions thrown on all threads.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a> associated with the <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> in the <code>parallelOptions</code> has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>body</code> delegate is invoked once for each element in the <code>source</code> enumerable. It is provided with the current element as a parameter.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Parallel_ForEach__2_System_Collections_Concurrent_OrderablePartitioner___0__System_Func___1__System_Func___0_System_Threading_Tasks_ParallelLoopState_System_Int64___1___1__System_Action___1__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Parallel_ForEach_TSource_TLocal__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ForEach&lt;TSource,TLocal&gt;(OrderablePartitioner&lt;TSource&gt;,Func&lt;TLocal&gt;,Func&lt;TSource,ParallelLoopState,Int64,TLocal,TLocal&gt;,Action&lt;TLocal&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation with thread-local data on a <span class=\"xref\">stem.Collections.Concurrent.OrderablePartitioner`1</span> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.concurrent.orderablepartitioner-1\" data-linktype=\"relative-path\">OrderablePartitioner<tsource></tsource></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The orderable partitioner that contains the original data source.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>localInit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-1\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TLocal</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The function delegate that returns the initial state of the local data for each task.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-5\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a>,<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>,<span class=\"xref\">TLocal</span>,<span class=\"xref\">TLocal</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that is invoked once per iteration.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>localFinally</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action</a>&lt;<span class=\"xref\">TLocal</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that performs a final action on the local state of each task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.parallelloopresult\" data-linktype=\"relative-path\">ParallelLoopResult</a></div>\r\n                  </div>\r\n                  <p>A structure that contains information about which portion of the loop completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>source</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>body</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>localInit</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>localFinally</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions*</span> property in the <code>source</code><a class=\"xref\" href=\"system.collections.concurrent.partitioner\" data-linktype=\"relative-path\">Partitioner</a> returns <code>false</code> or the partitioner returns <code>null</code> partitions.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>The exception that contains all the individual exceptions thrown on all threads.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The &lt;xref:System.Threading.Tasks.Parallel.ForEach%2A&gt; method expects custom partitioners to support dynamic partitioning. For more information, see <a href=\"../Topic/Custom%20Partitioners%20for%20PLINQ%20and%20TPL.md\" data-linktype=\"relative-path\">Custom Partitioners for PLINQ and TPL</a> and <a href=\"../Topic/How%20to:%20Implement%20Dynamic%20Partitions.md\" data-linktype=\"relative-path\">How to: Implement Dynamic Partitions</a>.  </p>\n<p> The <code>localInit</code> delegate is invoked once for each task that participates in the loop&#39;s execution and returns the initial local state for each of those tasks. These initial states are passed to the first <code>body</code> invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the <code>localFinally</code> delegate. The <code>localFinally</code> delegate is invoked once per task to perform a final action on each task&#39;s local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  </p>\n<p> The &lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt; method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a> object the chance to add, change, or remove threads that service the loop.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Parallel_ForEach__2_System_Collections_Concurrent_Partitioner___0__System_Func___1__System_Func___0_System_Threading_Tasks_ParallelLoopState___1___1__System_Action___1__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Parallel_ForEach_TSource_TLocal__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ForEach&lt;TSource,TLocal&gt;(Partitioner&lt;TSource&gt;,Func&lt;TLocal&gt;,Func&lt;TSource,ParallelLoopState,TLocal,TLocal&gt;,Action&lt;TLocal&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation with thread-local data on a <a class=\"xref\" href=\"system.collections.concurrent.partitioner\" data-linktype=\"relative-path\">Partitioner</a> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.concurrent.partitioner-1\" data-linktype=\"relative-path\">Partitioner<tsource></tsource></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The partitioner that contains the original data source.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>localInit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-1\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TLocal</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The function delegate that returns the initial state of the local data for each task.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-4\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a>,<span class=\"xref\">TLocal</span>,<span class=\"xref\">TLocal</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that is invoked once per iteration.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>localFinally</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action</a>&lt;<span class=\"xref\">TLocal</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that performs a final action on the local state of each task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.parallelloopresult\" data-linktype=\"relative-path\">ParallelLoopResult</a></div>\r\n                  </div>\r\n                  <p>A structure that contains information about which portion of the loop completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>source</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>body</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>localInit</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>localFinally</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions*</span> property in the <code>source</code><a class=\"xref\" href=\"system.collections.concurrent.partitioner\" data-linktype=\"relative-path\">Partitioner</a> returns <code>false</code> or the partitioner returns <code>null</code> partitions.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>The exception that contains all the individual exceptions thrown on all threads.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The ForEach(TSource, method expects custom partitioners to support dynamic partitioning. For more information, see <a href=\"../Topic/Custom%20Partitioners%20for%20PLINQ%20and%20TPL.md\" data-linktype=\"relative-path\">Custom Partitioners for PLINQ and TPL</a> and <a href=\"../Topic/How%20to:%20Implement%20Dynamic%20Partitions.md\" data-linktype=\"relative-path\">How to: Implement Dynamic Partitions</a>.  </p>\n<p> The <code>localInit</code> delegate is invoked once for each thread that participates in the loop&#39;s execution and returns the initial local state for each of those tasks. These initial states are passed to the first <code>body</code> invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the <code>localFinally</code> delegate. The <code>localFinally</code> delegate is invoked once per task to perform a final action on each task&#39;s local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  </p>\n<p> The &lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt; method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a> object the chance to add, change, or remove threads that service the loop.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Parallel_ForEach__2_System_Collections_Generic_IEnumerable___0__System_Func___1__System_Func___0_System_Threading_Tasks_ParallelLoopState_System_Int64___1___1__System_Action___1__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Parallel_ForEach_TSource_TLocal__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ForEach&lt;TSource,TLocal&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TLocal&gt;,Func&lt;TSource,ParallelLoopState,Int64,TLocal,TLocal&gt;,Action&lt;TLocal&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation with thread-local data on an <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An enumerable data source.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>localInit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-1\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TLocal</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The function delegate that returns the initial state of the local data for each task.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-5\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a>,<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>,<span class=\"xref\">TLocal</span>,<span class=\"xref\">TLocal</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that is invoked once per iteration.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>localFinally</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action</a>&lt;<span class=\"xref\">TLocal</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that performs a final action on the local state of each task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.parallelloopresult\" data-linktype=\"relative-path\">ParallelLoopResult</a></div>\r\n                  </div>\r\n                  <p>A structure that contains information about which portion of the loop completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>source</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>body</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>localInit</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>localFinally</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>The exception that contains all the individual exceptions thrown on all threads.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>body</code> delegate is invoked once for each element in the <code>source</code> enumerable. It is provided with the following parameters: the current element, a <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a> instance that may be used to break out of the loop prematurely, the current element&#39;s index (<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>), and some local state that may be shared amongst iterations that execute on the same thread.  </p>\n<p> The <code>localInit</code> delegate is invoked once for each task that participates in the loop&#39;s execution and returns the initial local state for each of those tasks. These initial states are passed to the first <code>body</code> invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the <code>localFinally</code> delegate. The <code>localFinally</code> delegate is invoked once per task to perform a final action on each taskâ€™s local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  </p>\n<p> The &lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt; method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a> object the chance to add, change, or remove threads that service the loop.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Parallel_ForEach__2_System_Collections_Generic_IEnumerable___0__System_Func___1__System_Func___0_System_Threading_Tasks_ParallelLoopState___1___1__System_Action___1__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Parallel_ForEach_TSource_TLocal__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ForEach&lt;TSource,TLocal&gt;(IEnumerable&lt;TSource&gt;,Func&lt;TLocal&gt;,Func&lt;TSource,ParallelLoopState,TLocal,TLocal&gt;,Action&lt;TLocal&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation with thread-local data on an <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An enumerable data source.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>localInit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-1\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TLocal</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The function delegate that returns the initial state of the local data for each task.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-4\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a>,<span class=\"xref\">TLocal</span>,<span class=\"xref\">TLocal</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that is invoked once per iteration.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>localFinally</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action</a>&lt;<span class=\"xref\">TLocal</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that performs a final action on the local state of each task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.parallelloopresult\" data-linktype=\"relative-path\">ParallelLoopResult</a></div>\r\n                  </div>\r\n                  <p>A structure that contains information about which portion of the loop completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>source</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>body</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>localInit</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>localFinally</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>The exception that contains all the individual exceptions thrown on all threads.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>body</code> delegate is invoked once for each element in the <code>source</code> enumerable. It is provided with the following parameters: the current element, a <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.  </p>\n<p> The <code>localInit</code> delegate is invoked once for each task that participates in the loop&#39;s execution and returns the initial local state for each of those tasks. These initial states are passed to the first <code>body</code> invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the <code>localFinally</code> delegate. The <code>localFinally</code> delegate is invoked once per thread to perform a final action on each taskâ€™s local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  </p>\n<p> The &lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt; method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a> object the chance to add, change, or remove threads that service the loop.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use a &lt;xref:System.Threading.Tasks.Parallel.ForEach%2A&gt; method with local state:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Parallel#02\">Imports System.Threading\nImports System.Threading.Tasks\nModule ForEachDemo\n\n    &#39; Demonstrated features:\n    &#39;   Parallel.ForEach()\n    &#39;   Thread-local state\n    &#39; Expected results:\n    &#39;   This example sums up the elements of an int[] in parallel.\n    &#39;   Each thread maintains a local sum. When a thread is initialized, that local sum is set to 0.\n    &#39;   On every iteration the current element is added to the local sum.\n    &#39;   When a thread is done, it safely adds its local sum to the global sum.\n    &#39;   After the loop is complete, the global sum is printed out.\n    &#39; Documentation:\n    &#39;   http://msdn.microsoft.com/en-us/library/dd990270(VS.100).aspx\n    Private Sub ForEachDemo()\n        &#39; The sum of these elements is 40.\n        Dim input As Integer() = {4, 1, 6, 2, 9, 5, _\n        10, 3}\n        Dim sum As Integer = 0\n\n        Try\n            &#39; source collection\n            Parallel.ForEach(input,\n                             Function()\n                                 &#39; thread local initializer\n                                 Return 0\n                             End Function,\n                             Function(n, loopState, localSum)\n                                 &#39; body\n                                 localSum += n\n                                 Console.WriteLine(&quot;Thread={0}, n={1}, localSum={2}&quot;, Thread.CurrentThread.ManagedThreadId, n, localSum)\n                                 Return localSum\n                             End Function,\n                             Sub(localSum)\n                                 &#39; thread local aggregator\n                                 Interlocked.Add(sum, localSum)\n                             End Sub)\n\n            Console.WriteLine(vbLf &amp; &quot;Sum={0}&quot;, sum)\n        Catch e As AggregateException\n            &#39; No exception is expected in this example, but if one is still thrown from a task,\n            &#39; it will be wrapped in AggregateException and propagated to the main thread.\n            Console.WriteLine(&quot;Parallel.ForEach has thrown an exception. THIS WAS NOT EXPECTED.&quot; &amp; vbLf &amp; &quot;{0}&quot;, e)\n        End Try\n    End Sub\n\n\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Parallel#02\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass ForEachWithThreadLocal\n{\n    // Demonstrated features:\n    // \t\tParallel.ForEach()\n    //\t\tThread-local state\n    // Expected results:\n    //      This example sums up the elements of an int[] in parallel.\n    //      Each thread maintains a local sum. When a thread is initialized, that local sum is set to 0.\n    //      On every iteration the current element is added to the local sum.\n    //      When a thread is done, it safely adds its local sum to the global sum.\n    //      After the loop is complete, the global sum is printed out.\n    // Documentation:\n    //\t\thttp://msdn.microsoft.com/en-us/library/dd990270(VS.100).aspx\n    static void Main()\n    {\n        // The sum of these elements is 40.\n        int[] input = { 4, 1, 6, 2, 9, 5, 10, 3 };\n        int sum = 0;\n\n        try\n        {\n            Parallel.ForEach(\n                    input,\t\t\t\t\t        // source collection\n                    () =&gt; 0,\t\t\t\t\t        // thread local initializer\n                    (n, loopState, localSum) =&gt;\t\t// body\n                    {\n                        localSum += n;\n                        Console.WriteLine(&quot;Thread={0}, n={1}, localSum={2}&quot;, Thread.CurrentThread.ManagedThreadId, n, localSum);\n                        return localSum;\n                    },\n                    (localSum) =&gt; Interlocked.Add(ref sum, localSum)\t\t\t\t\t// thread local aggregator\n                );\n\n            Console.WriteLine(&quot;<br>Sum={0}&quot;, sum);\n        }\n        // No exception is expected in this example, but if one is still thrown from a task,\n        // it will be wrapped in AggregateException and propagated to the main thread.\n        catch (AggregateException e)\n        {\n            Console.WriteLine(&quot;Parallel.ForEach has thrown an exception. THIS WAS NOT EXPECTED.<br>{0}&quot;, e);\n        }\n    }\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Parallel_ForEach__2_System_Collections_Concurrent_OrderablePartitioner___0__System_Threading_Tasks_ParallelOptions_System_Func___1__System_Func___0_System_Threading_Tasks_ParallelLoopState_System_Int64___1___1__System_Action___1__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Parallel_ForEach_TSource_TLocal__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ForEach&lt;TSource,TLocal&gt;(OrderablePartitioner&lt;TSource&gt;,ParallelOptions,Func&lt;TLocal&gt;,Func&lt;TSource,ParallelLoopState,Int64,TLocal,TLocal&gt;,Action&lt;TLocal&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation with 64-bit indexes and  with thread-local data on a <span class=\"xref\">stem.Collections.Concurrent.OrderablePartitioner`1</span> in which iterations may run in parallel , loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.concurrent.orderablepartitioner-1\" data-linktype=\"relative-path\">OrderablePartitioner<tsource></tsource></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The orderable partitioner that contains the original data source.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parallelOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.paralleloptions\" data-linktype=\"relative-path\">ParallelOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that configures the behavior of this operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>localInit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-1\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TLocal</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The function delegate that returns the initial state of the local data for each task.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-5\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a>,<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>,<span class=\"xref\">TLocal</span>,<span class=\"xref\">TLocal</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that is invoked once per iteration.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>localFinally</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action</a>&lt;<span class=\"xref\">TLocal</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that performs a final action on the local state of each task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.parallelloopresult\" data-linktype=\"relative-path\">ParallelLoopResult</a></div>\r\n                  </div>\r\n                  <p>A structure that contains information about which portion of the loop completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>source</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>parallelOptions</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>body</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>localInit</code> or <code>localFinally</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions*</span> property in the <code>source</code><a class=\"xref\" href=\"system.collections.concurrent.partitioner\" data-linktype=\"relative-path\">Partitioner</a> returns <code>false</code> or the partitioner returns <code>null</code> partitions.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>The exception that contains all the individual exceptions thrown on all threads.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.operationcanceledexception\" data-linktype=\"relative-path\">OperationCanceledException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> in the <code>parallelOptions</code> argument is canceled.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a> associated with the <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> in the <code>parallelOptions</code> has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The ForEach(TSource, method expects custom partitioners to support dynamic partitioning. For more information, see <a href=\"../Topic/Custom%20Partitioners%20for%20PLINQ%20and%20TPL.md\" data-linktype=\"relative-path\">Custom Partitioners for PLINQ and TPL</a> and <a href=\"../Topic/How%20to:%20Implement%20Dynamic%20Partitions.md\" data-linktype=\"relative-path\">How to: Implement Dynamic Partitions</a>.  </p>\n<p> The <code>localInit</code> delegate is invoked once for each task that participates in the loop&#39;s execution and returns the initial local state for each of those tasks. These initial states are passed to the first <code>body</code> invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each thread returns a state value that is passed to the <code>localFinally</code> delegate. The <code>localFinally</code> delegate is invoked once per task to perform a final action on each taskâ€™s local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  </p>\n<p> The &lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt; method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a> object the chance to add, change, or remove threads that service the loop.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Parallel_ForEach__2_System_Collections_Concurrent_Partitioner___0__System_Threading_Tasks_ParallelOptions_System_Func___1__System_Func___0_System_Threading_Tasks_ParallelLoopState___1___1__System_Action___1__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Parallel_ForEach_TSource_TLocal__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ForEach&lt;TSource,TLocal&gt;(Partitioner&lt;TSource&gt;,ParallelOptions,Func&lt;TLocal&gt;,Func&lt;TSource,ParallelLoopState,TLocal,TLocal&gt;,Action&lt;TLocal&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation  with thread-local data on a <a class=\"xref\" href=\"system.collections.concurrent.partitioner\" data-linktype=\"relative-path\">Partitioner</a> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.concurrent.partitioner-1\" data-linktype=\"relative-path\">Partitioner<tsource></tsource></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The partitioner that contains the original data source.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parallelOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.paralleloptions\" data-linktype=\"relative-path\">ParallelOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that configures the behavior of this operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>localInit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-1\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TLocal</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The function delegate that returns the initial state of the local data for each task.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-4\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a>,<span class=\"xref\">TLocal</span>,<span class=\"xref\">TLocal</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that is invoked once per iteration.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>localFinally</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action</a>&lt;<span class=\"xref\">TLocal</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that performs a final action on the local state of each task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.parallelloopresult\" data-linktype=\"relative-path\">ParallelLoopResult</a></div>\r\n                  </div>\r\n                  <p>A structure that contains information about which portion of the loop completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>source</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>parallelOptions</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>body</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>localInit</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>localFinally</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions*</span> property in the <code>source</code><a class=\"xref\" href=\"system.collections.concurrent.partitioner\" data-linktype=\"relative-path\">Partitioner</a> returns <code>false</code> or the partitioner returns <code>null</code> partitions.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>The exception that contains all the individual exceptions thrown on all threads.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.operationcanceledexception\" data-linktype=\"relative-path\">OperationCanceledException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> in the <code>parallelOptions</code> argument is canceled.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a> associated with the <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> in the <code>parallelOptions</code> has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The ForEach(TSource, method expects custom partitioners to support dynamic partitioning. This overload is provided for scenarios with small loop bodies that might benefit from static range partitioning. Partitioners must support dynamic partitions.  For more information, see <a href=\"../Topic/Custom%20Partitioners%20for%20PLINQ%20and%20TPL.md\" data-linktype=\"relative-path\">Custom Partitioners for PLINQ and TPL</a> and <a href=\"../Topic/How%20to:%20Implement%20Dynamic%20Partitions.md\" data-linktype=\"relative-path\">How to: Implement Dynamic Partitions</a>.  </p>\n<p> The <code>localInit</code> delegate is invoked once for each task that participates in the loop&#39;s execution and returns the initial local state for each of those tasks. These initial states are passed to the first <code>body</code> invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the <code>localFinally</code> delegate. The <code>localFinally</code> delegate is invoked once per task to perform a final action on each task&#39;s local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  </p>\n<p> The &lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt; method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a> object the chance to add, change, or remove threads that service the loop.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Parallel_ForEach__2_System_Collections_Generic_IEnumerable___0__System_Threading_Tasks_ParallelOptions_System_Func___1__System_Func___0_System_Threading_Tasks_ParallelLoopState_System_Int64___1___1__System_Action___1__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Parallel_ForEach_TSource_TLocal__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ForEach&lt;TSource,TLocal&gt;(IEnumerable&lt;TSource&gt;,ParallelOptions,Func&lt;TLocal&gt;,Func&lt;TSource,ParallelLoopState,Int64,TLocal,TLocal&gt;,Action&lt;TLocal&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation with thread-local data and 64-bit indexes on an <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An enumerable data source.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parallelOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.paralleloptions\" data-linktype=\"relative-path\">ParallelOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that configures the behavior of this operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>localInit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-1\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TLocal</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The function delegate that returns the initial state of the local data for each task.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-5\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a>,<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>,<span class=\"xref\">TLocal</span>,<span class=\"xref\">TLocal</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that is invoked once per iteration.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>localFinally</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action</a>&lt;<span class=\"xref\">TLocal</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that performs a final action on the local state of each task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.parallelloopresult\" data-linktype=\"relative-path\">ParallelLoopResult</a></div>\r\n                  </div>\r\n                  <p>A structure that contains information about which portion of the loop completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>source</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>parallelOptions</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>body</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>localInit</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>localFinally</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.operationcanceledexception\" data-linktype=\"relative-path\">OperationCanceledException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> in the <code>parallelOptions</code> argument is canceled.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a> associated with the <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> in the <code>parallelOptions</code> has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>The exception that contains all the individual exceptions thrown on all threads.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>body</code> delegate is invoked once for each element in the <code>source</code> enumerable. It is provided with the following parameters: the current element, a <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a> instance that may be used to break out of the loop prematurely, the current element&#39;s index (<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>), and some local state that may be shared amongst iterations that execute on the same thread.  </p>\n<p> The <code>localInit</code> delegate is invoked once for each task that participates in the loop&#39;s execution and returns the initial local state for each of those tasks. These initial states are passed to the first <code>body</code> invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the <code>localFinally</code> delegate. The <code>localFinally</code> delegate is invoked once per thread to perform a final action on each taskâ€™s local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  </p>\n<p> The &lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt; method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a> object the chance to add, change, or remove threads that service the loop.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Parallel_ForEach__2_System_Collections_Generic_IEnumerable___0__System_Threading_Tasks_ParallelOptions_System_Func___1__System_Func___0_System_Threading_Tasks_ParallelLoopState___1___1__System_Action___1__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Parallel_ForEach_TSource_TLocal__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ForEach&lt;TSource,TLocal&gt;(IEnumerable&lt;TSource&gt;,ParallelOptions,Func&lt;TLocal&gt;,Func&lt;TSource,ParallelLoopState,TLocal,TLocal&gt;,Action&lt;TLocal&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Executes a <code>foreach</code> (<code>For Each</code> in Visual Basic) operation with thread-local data on an <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated..</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TSource</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An enumerable data source.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parallelOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.paralleloptions\" data-linktype=\"relative-path\">ParallelOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that configures the behavior of this operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>localInit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-1\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TLocal</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The function delegate that returns the initial state of the local data for each task.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>body</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-4\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TSource</span>,<a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a>,<span class=\"xref\">TLocal</span>,<span class=\"xref\">TLocal</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that is invoked once per iteration.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>localFinally</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action</a>&lt;<span class=\"xref\">TLocal</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that performs a final action on the local state of each task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.parallelloopresult\" data-linktype=\"relative-path\">ParallelLoopResult</a></div>\r\n                  </div>\r\n                  <p>A structure that contains information about which portion of the loop completed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>source</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>parallelOptions</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>body</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>localInit</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>localFinally</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.operationcanceledexception\" data-linktype=\"relative-path\">OperationCanceledException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> in the <code>parallelOptions</code> argument is canceled.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a> associated with the <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> in the <code>parallelOptions</code> has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>The exception that contains all the individual exceptions thrown on all threads.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>body</code> delegate is invoked once for each element in the <code>source</code> enumerable. It is provided with the following parameters: the current element, a <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate\" data-linktype=\"relative-path\">ParallelLoopState</a> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.  </p>\n<p> The <code>localInit</code> delegate is invoked once for each task that participates in the loop&#39;s execution and returns the initial local state for each of those tasks. These initial states are passed to the first <code>body</code> invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the <code>localFinally</code> delegate. The <code>localFinally</code> delegate is invoked once per thread to perform a final action on each taskâ€™s local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  </p>\n<p> The &lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt; method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a> object the chance to add, change, or remove threads that service the loop.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Parallel_Invoke_System_Action___\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Parallel_Invoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Invoke(Action[])</div>        \r\n          </div>\r\n    \r\n            <p>Executes each of the provided actions, possibly in parallel.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Invoke (Action[] actions);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>actions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action\" data-linktype=\"relative-path\">Action</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.action\" data-linktype=\"relative-path\">Action</a> to execute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>actions</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>The exception that is thrown when any action in the <code>actions</code> array throws an exception.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>actions</code> array contains a <code>null</code> element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used to execute a set of operations, potentially in parallel.  </p>\n<p> No guarantees are made about the order in which the operations execute or whether they execute in parallel. This method does not return until each of the provided operations has completed, regardless of whether completion occurs due to normal or exceptional termination.  </p>\n<p> For more information, see <a href=\"../Topic/How%20to:%20Use%20Parallel.Invoke%20to%20Execute%20Parallel%20Operations.md\" data-linktype=\"relative-path\">How to: Use Parallel.Invoke to Execute Parallel Operations</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example demonstrates how to use the Invokemethod with other methods, anonymous delegates, and lambda expressions.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Parallel#01\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\n\n    class ParallelInvokeDemo\n    {\n\n        // Demonstrated features:\n        // \t\tParallel.Invoke()\n        // Expected results:\n        // \t\tThe threads on which each task gets executed may be different.\n        //\t\tThe thread assignments may be different in different executions.\n        //\t\tThe tasks may get executed in any order.\n        // Documentation:\n        //\t\thttp://msdn.microsoft.com/en-us/library/dd783942(VS.100).aspx\n        static void Main()\n        {\n            try\n            {\n                Parallel.Invoke(\n                    BasicAction,\t// Param #0 - static method\n                    () =&gt;\t\t\t// Param #1 - lambda expression\n                    {\n                        Console.WriteLine(&quot;Method=beta, Thread={0}&quot;, Thread.CurrentThread.ManagedThreadId);\n                    },\n                    delegate()\t\t// Param #2 - in-line delegate\n                    {\n                        Console.WriteLine(&quot;Method=gamma, Thread={0}&quot;, Thread.CurrentThread.ManagedThreadId);\n                    }\n                );\n            }\n            // No exception is expected in this example, but if one is still thrown from a task,\n            // it will be wrapped in AggregateException and propagated to the main thread.\n            catch (AggregateException e)\n            {\n                Console.WriteLine(&quot;An action has thrown an exception. THIS WAS UNEXPECTED.<br>{0}&quot;, e.InnerException.ToString());\n            }\n        }\n\n        static void BasicAction()\n        {\n            Console.WriteLine(&quot;Method=alpha, Thread={0}&quot;, Thread.CurrentThread.ManagedThreadId);\n        }\n\n\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Parallel#01\">Imports System.Threading\nImports System.Threading.Tasks\n\nModule InvokeDemo\n\n    &#39; Demonstrated features:\n    &#39;   Parallel.Invoke()\n    &#39; Expected results:\n    &#39;   The threads on which each task gets executed may be different.\n    &#39;   The thread assignments may be different in different executions.\n    &#39;   The tasks may get executed in any order.\n    &#39; Documentation:\n    &#39;   http://msdn.microsoft.com/en-us/library/dd783942(VS.100).aspx\n    Private Sub Main()\n        Try\n            &#39; Param #0 - static method\n            Parallel.Invoke(AddressOf BasicAction,\n                            Sub()\n                                &#39; Param #1 - lambda expression\n                                Console.WriteLine(&quot;Method=beta, Thread={0}&quot;, Thread.CurrentThread.ManagedThreadId)\n                            End Sub,\n                            Sub()\n                                &#39; Param #2 - in-line delegate\n                                Console.WriteLine(&quot;Method=gamma, Thread={0}&quot;, Thread.CurrentThread.ManagedThreadId)\n                            End Sub)\n        Catch e As AggregateException\n            &#39; No exception is expected in this example, but if one is still thrown from a task,\n            &#39; it will be wrapped in AggregateException and propagated to the main thread.\n            Console.WriteLine(&quot;An action has thrown an exception. THIS WAS UNEXPECTED.&quot; &amp; vbLf &amp; &quot;{0}&quot;, e.InnerException.ToString())\n        End Try\n    End Sub\n\n    Private Sub BasicAction()\n        Console.WriteLine(&quot;Method=alpha, Thread={0}&quot;, Thread.CurrentThread.ManagedThreadId)\n    End Sub\n\n\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Parallel_Invoke_System_Threading_Tasks_ParallelOptions_System_Action___\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Parallel_Invoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Invoke(ParallelOptions,Action[])</div>        \r\n          </div>\r\n    \r\n            <p>Executes each of the provided actions, possibly in parallel, unless the operation is cancelled by the user.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Invoke (System.Threading.Tasks.ParallelOptions parallelOptions, Action[] actions);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>parallelOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.paralleloptions\" data-linktype=\"relative-path\">ParallelOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that configures the behavior of this operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>actions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action\" data-linktype=\"relative-path\">Action</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of actions to execute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.operationcanceledexception\" data-linktype=\"relative-path\">OperationCanceledException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> in the <code>parallelOptions</code> is set.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>actions</code> argument is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>parallelOptions</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>The exception that is thrown when any action in the <code>actions</code> array throws an exception.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>actions</code> array contains a <code>null</code> element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a> associated with the <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> in the <code>parallelOptions</code> has been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used to execute a set of operations, potentially in parallel. The cancellation token passed in with the <a class=\"xref\" href=\"system.threading.tasks.paralleloptions\" data-linktype=\"relative-path\">ParallelOptions</a> structure enables the caller to cancel the entire operation. For more information, see <a href=\"../Topic/Cancellation%20in%20Managed%20Threads.md\" data-linktype=\"relative-path\">Cancellation in Managed Threads</a>.  </p>\n<p> No guarantees are made about the order in which the operations execute or whether they execute in parallel. This method does not return until each of the provided operations has completed, regardless of whether completion occurs due to normal or exceptional termination.  </p>\n<p> For more information, see <a href=\"../Topic/How%20to:%20Use%20Parallel.Invoke%20to%20Execute%20Parallel%20Operations.md\" data-linktype=\"relative-path\">How to: Use Parallel.Invoke to Execute Parallel Operations</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Threading.Tasks.Parallel.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Threading.Tasks.Parallel.yml\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Parallel\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Parallel.For\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Parallel.For&lt;TLocal&gt;\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Parallel.ForEach&lt;TSource&gt;\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Parallel.ForEach&lt;TSource,TLocal&gt;\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Parallel.Invoke\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"d0f64d8d-fc48-7d69-f7c1-46a6daf2d718\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Threading.Tasks\\Parallel.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides support for parallel loops and regions.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Threading.Tasks/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Threading.Tasks.Parallel\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Threading.Tasks.Parallel.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Threading.Tasks.Parallel.yml","open_to_public_contributors":true,"api_name":["System.Threading.Tasks.Parallel","System.Threading.Tasks.Parallel.For","System.Threading.Tasks.Parallel.For<TLocal>","System.Threading.Tasks.Parallel.ForEach<TSource>","System.Threading.Tasks.Parallel.ForEach<TSource,TLocal>","System.Threading.Tasks.Parallel.Invoke"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Threading.Tasks.Parallel","System::Threading::Tasks::Parallel","System.Threading.Tasks.Parallel.For","System::Threading::Tasks::Parallel::For","System.Threading.Tasks.Parallel.For``1","System::Threading::Tasks::Parallel::For``1","System.Threading.Tasks.Parallel.ForEach``1","System::Threading::Tasks::Parallel::ForEach``1","System.Threading.Tasks.Parallel.ForEach``2","System::Threading::Tasks::Parallel::ForEach``2","System.Threading.Tasks.Parallel.Invoke","System::Threading::Tasks::Parallel::Invoke"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"d0f64d8d-fc48-7d69-f7c1-46a6daf2d718","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Threading.Tasks\\Parallel.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Threading.Tasks/Parallel.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Parallel class | Microsoft Docs","_op_ogTitle":"Parallel class","description":"Provides support for parallel loops and regions.\n","toc_asset_id":"_splitted/System.Threading.Tasks/toc.json","toc_rel":"_splitted/System.Threading.Tasks/toc.json","source_url":"","ms.assetid":"System.Threading.Tasks.Parallel","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.threading.tasks.parallel","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.threading.tasks.parallel","fileRelativePath":"System.Threading.Tasks.Parallel.html"},"themesRelativePathToOutputRoot":"_themes/"}